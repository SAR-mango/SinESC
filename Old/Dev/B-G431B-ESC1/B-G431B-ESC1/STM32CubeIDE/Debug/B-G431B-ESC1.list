
B-G431B-ESC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f70  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f4  080093f4  00020724  2**0
                  CONTENTS
  4 .ARM          00000008  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093fc  080093fc  00020724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009400  08009400  00019400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000724  20000000  08009404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000724  08009b28  00020724  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c78  08009b28  00020c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020724  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003d1dc  00000000  00000000  00020754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0005aa5b  00000000  00000000  0005d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008153  00000000  00000000  000b838b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001be8  00000000  00000000  000c04e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fffc5  00000000  00000000  000c20c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004918  00000000  00000000  001c2090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b968  00000000  00000000  001c69a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  001f2310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005474  00000000  00000000  001f23e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00022a43  00000000  00000000  001f7858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000724 	.word	0x20000724
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009130 	.word	0x08009130

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000728 	.word	0x20000728
 8000214:	08009130 	.word	0x08009130

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800053a:	f003 f991 	bl	8003860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f008 fdcb 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f000 f85d 	bl	8000600 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000724 	.word	0x20000724
  ldr r2, =_sidata
 8000554:	08009404 	.word	0x08009404
  ldr r2, =_sbss
 8000558:	20000724 	.word	0x20000724
  ldr r4, =_ebss
 800055c:	20000c78 	.word	0x20000c78

08000560 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <BusFault_Handler>
	...

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	2100      	movs	r1, #0
{
 8000568:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056c:	2238      	movs	r2, #56	; 0x38
 800056e:	a806      	add	r0, sp, #24
 8000570:	f008 fdd6 	bl	8009120 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	4621      	mov	r1, r4
 8000576:	2244      	movs	r2, #68	; 0x44
 8000578:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057a:	e9cd 4400 	strd	r4, r4, [sp]
 800057e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000582:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000584:	f008 fdcc 	bl	8009120 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000588:	4620      	mov	r0, r4
 800058a:	f004 fc53 	bl	8004e34 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000598:	2155      	movs	r1, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800059a:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059e:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005a6:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005ac:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f004 fcc6 	bl	8004f40 <HAL_RCC_OscConfig>
 80005b4:	b108      	cbz	r0, 80005ba <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ba:	4603      	mov	r3, r0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	2200      	movs	r2, #0
 80005c0:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	240f      	movs	r4, #15
 80005c6:	2503      	movs	r5, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c8:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80005ce:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	f004 ff39 	bl	8005448 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	b108      	cbz	r0, 80005de <SystemClock_Config+0x7a>
 80005da:	b672      	cpsid	i
  while (1)
 80005dc:	e7fe      	b.n	80005dc <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005de:	f248 0102 	movw	r1, #32770	; 0x8002
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e6:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e8:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80005ea:	9115      	str	r1, [sp, #84]	; 0x54
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80005ec:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ee:	f005 f867 	bl	80056c0 <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	b108      	cbz	r0, 80005f8 <SystemClock_Config+0x94>
 80005f4:	b672      	cpsid	i
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <SystemClock_Config+0x92>
}
 80005f8:	b027      	add	sp, #156	; 0x9c
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	0000      	movs	r0, r0
	...

08000600 <main>:
{
 8000600:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	2600      	movs	r6, #0
{
 8000606:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8000608:	f003 f95e 	bl	80038c8 <HAL_Init>
  SystemClock_Config();
 800060c:	f7ff ffaa 	bl	8000564 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	e9cd 661f 	strd	r6, r6, [sp, #124]	; 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000614:	4bac      	ldr	r3, [pc, #688]	; (80008c8 <main+0x2c8>)
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000616:	48ad      	ldr	r0, [pc, #692]	; (80008cc <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000618:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 800061a:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 800090c <main+0x30c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	f042 0204 	orr.w	r2, r2, #4
 8000622:	64da      	str	r2, [r3, #76]	; 0x4c
 8000624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000626:	f002 0204 	and.w	r2, r2, #4
 800062a:	9202      	str	r2, [sp, #8]
 800062c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800062e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000630:	f042 0220 	orr.w	r2, r2, #32
 8000634:	64da      	str	r2, [r3, #76]	; 0x4c
 8000636:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000638:	f002 0220 	and.w	r2, r2, #32
 800063c:	9203      	str	r2, [sp, #12]
 800063e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000642:	f042 0201 	orr.w	r2, r2, #1
 8000646:	64da      	str	r2, [r3, #76]	; 0x4c
 8000648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800064a:	f002 0201 	and.w	r2, r2, #1
 800064e:	9204      	str	r2, [sp, #16]
 8000650:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000654:	f042 0202 	orr.w	r2, r2, #2
 8000658:	64da      	str	r2, [r3, #76]	; 0x4c
 800065a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	961e      	str	r6, [sp, #120]	; 0x78
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000664:	4b9a      	ldr	r3, [pc, #616]	; (80008d0 <main+0x2d0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	9c05      	ldr	r4, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000668:	f44f 6280 	mov.w	r2, #1024	; 0x400
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800066c:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800066e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000672:	f004 fa65 	bl	8004b40 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000676:	4631      	mov	r1, r6
 8000678:	223c      	movs	r2, #60	; 0x3c
 800067a:	a81c      	add	r0, sp, #112	; 0x70
  ADC_MultiModeTypeDef multimode = {0};
 800067c:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
 8000680:	9610      	str	r6, [sp, #64]	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000682:	f008 fd4d 	bl	8009120 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	4631      	mov	r1, r6
 8000688:	a814      	add	r0, sp, #80	; 0x50
 800068a:	2220      	movs	r2, #32
 800068c:	f008 fd48 	bl	8009120 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000690:	f44f 2a00 	mov.w	sl, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8000694:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000698:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800069c:	2501      	movs	r5, #1
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.NbrOfConversion = 2;
 80006a2:	2402      	movs	r4, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a4:	4658      	mov	r0, fp
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006a6:	f8ab 601c 	strh.w	r6, [fp, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006aa:	e9cb 660b 	strd	r6, r6, [fp, #44]	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80006ae:	e9cb 3a00 	strd	r3, sl, [fp]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	e9cb 5805 	strd	r5, r8, [fp, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	f8cb 6008 	str.w	r6, [fp, #8]
  hadc1.Init.GainCompensation = 0;
 80006ba:	f8cb 6010 	str.w	r6, [fp, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	f88b 6024 	strb.w	r6, [fp, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c2:	f88b 6038 	strb.w	r6, [fp, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c6:	f8cb 603c 	str.w	r6, [fp, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006ca:	f88b 6040 	strb.w	r6, [fp, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80006ce:	f8cb 900c 	str.w	r9, [fp, #12]
  hadc1.Init.NbrOfConversion = 2;
 80006d2:	f8cb 4020 	str.w	r4, [fp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d6:	f003 f92b 	bl	8003930 <HAL_ADC_Init>
 80006da:	b108      	cbz	r0, 80006e0 <main+0xe0>
 80006dc:	b672      	cpsid	i
  while (1)
 80006de:	e7fe      	b.n	80006de <main+0xde>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e0:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e2:	a90e      	add	r1, sp, #56	; 0x38
 80006e4:	4658      	mov	r0, fp
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006e8:	f003 ff94 	bl	8004614 <HAL_ADCEx_MultiModeConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b108      	cbz	r0, 80006f4 <main+0xf4>
 80006f0:	b672      	cpsid	i
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0xf2>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80006f4:	4a77      	ldr	r2, [pc, #476]	; (80008d4 <main+0x2d4>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80006f6:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 80006fa:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80006fe:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000702:	2309      	movs	r3, #9
 8000704:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000708:	2201      	movs	r2, #1
 800070a:	237f      	movs	r3, #127	; 0x7f
 800070c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000710:	2604      	movs	r6, #4
 8000712:	2700      	movs	r7, #0
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000714:	2284      	movs	r2, #132	; 0x84
 8000716:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000718:	a91c      	add	r1, sp, #112	; 0x70
 800071a:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800071c:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000720:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000724:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000726:	f003 fc71 	bl	800400c <HAL_ADCEx_InjectedConfigChannel>
 800072a:	b108      	cbz	r0, 8000730 <main+0x130>
 800072c:	b672      	cpsid	i
  while (1)
 800072e:	e7fe      	b.n	800072e <main+0x12e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000730:	a361      	add	r3, pc, #388	; (adr r3, 80008b8 <main+0x2b8>)
 8000732:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000736:	a91c      	add	r1, sp, #112	; 0x70
 8000738:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800073a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800073e:	f003 fc65 	bl	800400c <HAL_ADCEx_InjectedConfigChannel>
 8000742:	b108      	cbz	r0, 8000748 <main+0x148>
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <main+0x146>
  sConfig.Channel = ADC_CHANNEL_1;
 8000748:	4a63      	ldr	r2, [pc, #396]	; (80008d8 <main+0x2d8>)
 800074a:	2306      	movs	r3, #6
 800074c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_1;
 8000752:	2204      	movs	r2, #4
 8000754:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_1;
 8000758:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 800075c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	f003 f9ea 	bl	8003b38 <HAL_ADC_ConfigChannel>
 8000764:	b108      	cbz	r0, 800076a <main+0x16a>
 8000766:	b672      	cpsid	i
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x168>
  sConfig.Channel = ADC_CHANNEL_5;
 800076a:	a355      	add	r3, pc, #340	; (adr r3, 80008c0 <main+0x2c0>)
 800076c:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	a914      	add	r1, sp, #80	; 0x50
 8000772:	4658      	mov	r0, fp
  sConfig.Channel = ADC_CHANNEL_5;
 8000774:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	f003 f9de 	bl	8003b38 <HAL_ADC_ConfigChannel>
 800077c:	4601      	mov	r1, r0
 800077e:	b108      	cbz	r0, 8000784 <main+0x184>
 8000780:	b672      	cpsid	i
  while (1)
 8000782:	e7fe      	b.n	8000782 <main+0x182>
  hadc2.Instance = ADC2;
 8000784:	f8df b188 	ldr.w	fp, [pc, #392]	; 8000910 <main+0x310>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000788:	9001      	str	r0, [sp, #4]
 800078a:	223c      	movs	r2, #60	; 0x3c
 800078c:	a81c      	add	r0, sp, #112	; 0x70
 800078e:	f008 fcc7 	bl	8009120 <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000794:	4b51      	ldr	r3, [pc, #324]	; (80008dc <main+0x2dc>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000796:	f8ab 101c 	strh.w	r1, [fp, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800079a:	4658      	mov	r0, fp
  hadc2.Instance = ADC2;
 800079c:	f8cb 3000 	str.w	r3, [fp]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80007a0:	e9cb 1902 	strd	r1, r9, [fp, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007a4:	e9cb 1504 	strd	r1, r5, [fp, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80007a8:	f8cb a004 	str.w	sl, [fp, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ac:	f8cb 8018 	str.w	r8, [fp, #24]
  hadc2.Init.NbrOfConversion = 1;
 80007b0:	f8cb 5020 	str.w	r5, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007b4:	f88b 1024 	strb.w	r1, [fp, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80007b8:	f88b 1038 	strb.w	r1, [fp, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007bc:	f8cb 103c 	str.w	r1, [fp, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80007c0:	f88b 1040 	strb.w	r1, [fp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007c4:	f003 f8b4 	bl	8003930 <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b108      	cbz	r0, 80007d0 <main+0x1d0>
 80007cc:	b672      	cpsid	i
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x1ce>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007d0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80008d4 <main+0x2d4>
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007d4:	9424      	str	r4, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007d6:	f04f 0909 	mov.w	r9, #9
 80007da:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80007de:	2484      	movs	r4, #132	; 0x84
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007e0:	f04f 0801 	mov.w	r8, #1
 80007e4:	f04f 097f 	mov.w	r9, #127	; 0x7f
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80007e8:	2580      	movs	r5, #128	; 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80007ea:	a91c      	add	r1, sp, #112	; 0x70
 80007ec:	4658      	mov	r0, fp
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80007ee:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 80007f2:	e9cd 6720 	strd	r6, r7, [sp, #128]	; 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80007f6:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007fa:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007fe:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000802:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000806:	f003 fc01 	bl	800400c <HAL_ADCEx_InjectedConfigChannel>
 800080a:	b108      	cbz	r0, 8000810 <main+0x210>
 800080c:	b672      	cpsid	i
  while (1)
 800080e:	e7fe      	b.n	800080e <main+0x20e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000810:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <main+0x2e0>)
 8000812:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000816:	4658      	mov	r0, fp
 8000818:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800081a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800081e:	f003 fbf5 	bl	800400c <HAL_ADCEx_InjectedConfigChannel>
 8000822:	b108      	cbz	r0, 8000828 <main+0x228>
 8000824:	b672      	cpsid	i
  while (1)
 8000826:	e7fe      	b.n	8000826 <main+0x226>
  hcomp1.Instance = COMP1;
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <main+0x2e4>)
 800082a:	492f      	ldr	r1, [pc, #188]	; (80008e8 <main+0x2e8>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800082c:	6058      	str	r0, [r3, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800082e:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000832:	e9c3 0005 	strd	r0, r0, [r3, #20]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8000836:	2240      	movs	r2, #64	; 0x40
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000838:	4618      	mov	r0, r3
  hcomp1.Instance = COMP1;
 800083a:	6019      	str	r1, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800083c:	609a      	str	r2, [r3, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800083e:	f003 ff4b 	bl	80046d8 <HAL_COMP_Init>
 8000842:	b108      	cbz	r0, 8000848 <main+0x248>
 8000844:	b672      	cpsid	i
  while (1)
 8000846:	e7fe      	b.n	8000846 <main+0x246>
  hcomp2.Instance = COMP2;
 8000848:	4828      	ldr	r0, [pc, #160]	; (80008ec <main+0x2ec>)
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <main+0x2f0>)
 800084c:	6003      	str	r3, [r0, #0]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800084e:	2440      	movs	r4, #64	; 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000850:	2300      	movs	r3, #0
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000852:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000856:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800085a:	6043      	str	r3, [r0, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800085c:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800085e:	f003 ff3b 	bl	80046d8 <HAL_COMP_Init>
 8000862:	b108      	cbz	r0, 8000868 <main+0x268>
 8000864:	b672      	cpsid	i
  while (1)
 8000866:	e7fe      	b.n	8000866 <main+0x266>
  hcomp4.Instance = COMP4;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <main+0x2f4>)
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <main+0x2f8>)
 800086c:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800086e:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000872:	e9c3 0003 	strd	r0, r0, [r3, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000876:	e9c3 0005 	strd	r0, r0, [r3, #20]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800087a:	4618      	mov	r0, r3
 800087c:	f003 ff2c 	bl	80046d8 <HAL_COMP_Init>
 8000880:	b108      	cbz	r0, 8000886 <main+0x286>
 8000882:	b672      	cpsid	i
  while (1)
 8000884:	e7fe      	b.n	8000884 <main+0x284>
  hcordic.Instance = CORDIC;
 8000886:	481d      	ldr	r0, [pc, #116]	; (80008fc <main+0x2fc>)
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <main+0x300>)
 800088a:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800088c:	f003 ffc8 	bl	8004820 <HAL_CORDIC_Init>
 8000890:	4601      	mov	r1, r0
 8000892:	b108      	cbz	r0, 8000898 <main+0x298>
 8000894:	b672      	cpsid	i
  while (1)
 8000896:	e7fe      	b.n	8000896 <main+0x296>
  hdac3.Instance = DAC3;
 8000898:	4d1a      	ldr	r5, [pc, #104]	; (8000904 <main+0x304>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800089a:	2230      	movs	r2, #48	; 0x30
 800089c:	a81c      	add	r0, sp, #112	; 0x70
 800089e:	f008 fc3f 	bl	8009120 <memset>
  hdac3.Instance = DAC3;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <main+0x308>)
 80008a4:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80008a6:	4628      	mov	r0, r5
 80008a8:	f004 f84e 	bl	8004948 <HAL_DAC_Init>
 80008ac:	b390      	cbz	r0, 8000914 <main+0x314>
 80008ae:	b672      	cpsid	i
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <main+0x2b0>
 80008b2:	bf00      	nop
 80008b4:	f3af 8000 	nop.w
 80008b8:	32601000 	.word	0x32601000
 80008bc:	0000010f 	.word	0x0000010f
 80008c0:	14f00020 	.word	0x14f00020
 80008c4:	0000000c 	.word	0x0000000c
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	10210000 	.word	0x10210000
 80008d4:	0c900008 	.word	0x0c900008
 80008d8:	04300002 	.word	0x04300002
 80008dc:	50000100 	.word	0x50000100
 80008e0:	cb8c0000 	.word	0xcb8c0000
 80008e4:	2000086c 	.word	0x2000086c
 80008e8:	40010200 	.word	0x40010200
 80008ec:	200009d0 	.word	0x200009d0
 80008f0:	40010204 	.word	0x40010204
 80008f4:	200008cc 	.word	0x200008cc
 80008f8:	4001020c 	.word	0x4001020c
 80008fc:	2000095c 	.word	0x2000095c
 8000900:	40020c00 	.word	0x40020c00
 8000904:	200007b0 	.word	0x200007b0
 8000908:	50001000 	.word	0x50001000
 800090c:	200008f0 	.word	0x200008f0
 8000910:	200007c4 	.word	0x200007c4
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000914:	f04f 0800 	mov.w	r8, #0
 8000918:	f04f 0900 	mov.w	r9, #0
 800091c:	e9cd 891e 	strd	r8, r9, [sp, #120]	; 0x78
 8000920:	f04f 0800 	mov.w	r8, #0
 8000924:	f04f 0902 	mov.w	r9, #2
 8000928:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800092c:	4602      	mov	r2, r0
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800092e:	2602      	movs	r6, #2
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000930:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000934:	f04f 0802 	mov.w	r8, #2
 8000938:	f04f 0900 	mov.w	r9, #0
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800093c:	a91c      	add	r1, sp, #112	; 0x70
 800093e:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000940:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000944:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000946:	f004 f815 	bl	8004974 <HAL_DAC_ConfigChannel>
 800094a:	b108      	cbz	r0, 8000950 <main+0x350>
 800094c:	b672      	cpsid	i
  while (1)
 800094e:	e7fe      	b.n	800094e <main+0x34e>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000950:	2210      	movs	r2, #16
 8000952:	4628      	mov	r0, r5
 8000954:	a91c      	add	r1, sp, #112	; 0x70
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000956:	9622      	str	r6, [sp, #136]	; 0x88
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000958:	f004 f80c 	bl	8004974 <HAL_DAC_ConfigChannel>
 800095c:	4602      	mov	r2, r0
 800095e:	b108      	cbz	r0, 8000964 <main+0x364>
 8000960:	b672      	cpsid	i
  while (1)
 8000962:	e7fe      	b.n	8000962 <main+0x362>
  hopamp1.Instance = OPAMP1;
 8000964:	4896      	ldr	r0, [pc, #600]	; (8000bc0 <main+0x5c0>)
 8000966:	4997      	ldr	r1, [pc, #604]	; (8000bc4 <main+0x5c4>)
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000968:	6042      	str	r2, [r0, #4]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800096a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800096e:	f44f 4540 	mov.w	r5, #49152	; 0xc000
 8000972:	e9c0 6509 	strd	r6, r5, [r0, #36]	; 0x24
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000976:	6084      	str	r4, [r0, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000978:	6102      	str	r2, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 800097a:	7502      	strb	r2, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800097c:	6182      	str	r2, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800097e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hopamp1.Instance = OPAMP1;
 8000980:	6001      	str	r1, [r0, #0]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000982:	f004 f9d1 	bl	8004d28 <HAL_OPAMP_Init>
 8000986:	b108      	cbz	r0, 800098c <main+0x38c>
 8000988:	b672      	cpsid	i
  while (1)
 800098a:	e7fe      	b.n	800098a <main+0x38a>
  hopamp2.Instance = OPAMP2;
 800098c:	4b8e      	ldr	r3, [pc, #568]	; (8000bc8 <main+0x5c8>)
 800098e:	4a8f      	ldr	r2, [pc, #572]	; (8000bcc <main+0x5cc>)
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000990:	6118      	str	r0, [r3, #16]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000992:	e9c3 0401 	strd	r0, r4, [r3, #4]
  hopamp2.Init.InternalOutput = DISABLE;
 8000996:	7518      	strb	r0, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000998:	6198      	str	r0, [r3, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800099a:	62d8      	str	r0, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800099c:	4618      	mov	r0, r3
  hopamp2.Instance = OPAMP2;
 800099e:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80009a0:	e9c3 6509 	strd	r6, r5, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80009a4:	f004 f9c0 	bl	8004d28 <HAL_OPAMP_Init>
 80009a8:	4602      	mov	r2, r0
 80009aa:	b108      	cbz	r0, 80009b0 <main+0x3b0>
 80009ac:	b672      	cpsid	i
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0x3ae>
  hopamp3.Instance = OPAMP3;
 80009b0:	4887      	ldr	r0, [pc, #540]	; (8000bd0 <main+0x5d0>)
 80009b2:	4988      	ldr	r1, [pc, #544]	; (8000bd4 <main+0x5d4>)
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80009b4:	6246      	str	r6, [r0, #36]	; 0x24
  hopamp3.Init.InternalOutput = ENABLE;
 80009b6:	2601      	movs	r6, #1
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80009b8:	e9c0 2401 	strd	r2, r4, [r0, #4]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80009bc:	e9c0 520a 	strd	r5, r2, [r0, #40]	; 0x28
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80009c0:	6102      	str	r2, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80009c2:	6182      	str	r2, [r0, #24]
  hopamp3.Instance = OPAMP3;
 80009c4:	6001      	str	r1, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80009c6:	7506      	strb	r6, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80009c8:	f004 f9ae 	bl	8004d28 <HAL_OPAMP_Init>
 80009cc:	4604      	mov	r4, r0
 80009ce:	b108      	cbz	r0, 80009d4 <main+0x3d4>
 80009d0:	b672      	cpsid	i
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0x3d2>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d4:	4601      	mov	r1, r0
 80009d6:	2234      	movs	r2, #52	; 0x34
 80009d8:	a81c      	add	r0, sp, #112	; 0x70
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009da:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80009de:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80009e6:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80009ea:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009f2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009f6:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	9406      	str	r4, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009fa:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fc:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009fe:	f008 fb8f 	bl	8009120 <memset>
  htim1.Instance = TIM1;
 8000a02:	4875      	ldr	r0, [pc, #468]	; (8000bd8 <main+0x5d8>)
 8000a04:	4d75      	ldr	r5, [pc, #468]	; (8000bdc <main+0x5dc>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000a06:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a08:	2120      	movs	r1, #32
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000a0a:	f640 3211 	movw	r2, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000a12:	e9c0 1202 	strd	r1, r2, [r0, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000a16:	6146      	str	r6, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	6184      	str	r4, [r0, #24]
  htim1.Instance = TIM1;
 8000a1a:	6005      	str	r5, [r0, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000a1c:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1e:	f005 f859 	bl	8005ad4 <HAL_TIM_Base_Init>
 8000a22:	b108      	cbz	r0, 8000a28 <main+0x428>
 8000a24:	b672      	cpsid	i
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <main+0x426>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a28:	486b      	ldr	r0, [pc, #428]	; (8000bd8 <main+0x5d8>)
 8000a2a:	f005 f8d9 	bl	8005be0 <HAL_TIM_PWM_Init>
 8000a2e:	b108      	cbz	r0, 8000a34 <main+0x434>
 8000a30:	b672      	cpsid	i
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <main+0x432>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a34:	2310      	movs	r3, #16
 8000a36:	2206      	movs	r2, #6
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a38:	4867      	ldr	r0, [pc, #412]	; (8000bd8 <main+0x5d8>)
 8000a3a:	a90e      	add	r1, sp, #56	; 0x38
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a3c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a40:	f005 f952 	bl	8005ce8 <HAL_TIM_SlaveConfigSynchro>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x44c>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x44a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a4c:	2470      	movs	r4, #112	; 0x70
 8000a4e:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a50:	4861      	ldr	r0, [pc, #388]	; (8000bd8 <main+0x5d8>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a54:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a56:	e9cd 4506 	strd	r4, r5, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5a:	f005 fb01 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	b108      	cbz	r0, 8000a64 <main+0x464>
 8000a60:	b672      	cpsid	i
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <main+0x462>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a64:	2602      	movs	r6, #2
 8000a66:	2701      	movs	r7, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a68:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a6a:	aa0a      	add	r2, sp, #40	; 0x28
 8000a6c:	485a      	ldr	r0, [pc, #360]	; (8000bd8 <main+0x5d8>)
 8000a6e:	2102      	movs	r1, #2
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a70:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a74:	f005 fb8a 	bl	800618c <HAL_TIMEx_ConfigBreakInput>
 8000a78:	b108      	cbz	r0, 8000a7e <main+0x47e>
 8000a7a:	b672      	cpsid	i
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <main+0x47c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a7e:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a80:	4855      	ldr	r0, [pc, #340]	; (8000bd8 <main+0x5d8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000a82:	960a      	str	r6, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a84:	aa0a      	add	r2, sp, #40	; 0x28
 8000a86:	2102      	movs	r1, #2
 8000a88:	f005 fb80 	bl	800618c <HAL_TIMEx_ConfigBreakInput>
 8000a8c:	b108      	cbz	r0, 8000a92 <main+0x492>
 8000a8e:	b672      	cpsid	i
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <main+0x490>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a92:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a94:	4850      	ldr	r0, [pc, #320]	; (8000bd8 <main+0x5d8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000a96:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a98:	aa0a      	add	r2, sp, #40	; 0x28
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	f005 fb76 	bl	800618c <HAL_TIMEx_ConfigBreakInput>
 8000aa0:	b108      	cbz	r0, 8000aa6 <main+0x4a6>
 8000aa2:	b672      	cpsid	i
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <main+0x4a4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	f04f 0860 	mov.w	r8, #96	; 0x60
 8000aaa:	f04f 0900 	mov.w	r9, #0
 8000aae:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab2:	4602      	mov	r2, r0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab4:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ab6:	f04f 0800 	mov.w	r8, #0
 8000aba:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	4846      	ldr	r0, [pc, #280]	; (8000bd8 <main+0x5d8>)
 8000ac0:	a914      	add	r1, sp, #80	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8000ac6:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aca:	f005 f9cf 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b108      	cbz	r0, 8000ad6 <main+0x4d6>
 8000ad2:	b672      	cpsid	i
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <main+0x4d4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad6:	4840      	ldr	r0, [pc, #256]	; (8000bd8 <main+0x5d8>)
  sConfigOC.Pulse = 0;
 8000ad8:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ada:	4632      	mov	r2, r6
 8000adc:	a914      	add	r1, sp, #80	; 0x50
 8000ade:	f005 f9c5 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b108      	cbz	r0, 8000aea <main+0x4ea>
 8000ae6:	b672      	cpsid	i
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x4e8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aea:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <main+0x5d8>)
  sConfigOC.Pulse = 0;
 8000aec:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aee:	2208      	movs	r2, #8
 8000af0:	a914      	add	r1, sp, #80	; 0x50
 8000af2:	f005 f9bb 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	b108      	cbz	r0, 8000afe <main+0x4fe>
 8000afa:	b672      	cpsid	i
  while (1)
 8000afc:	e7fe      	b.n	8000afc <main+0x4fc>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000afe:	4836      	ldr	r0, [pc, #216]	; (8000bd8 <main+0x5d8>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b00:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b02:	a914      	add	r1, sp, #80	; 0x50
 8000b04:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b06:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b0a:	f005 f9af 	bl	8005e6c <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	b108      	cbz	r0, 8000b14 <main+0x514>
 8000b10:	b672      	cpsid	i
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <main+0x512>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b18:	2344      	movs	r3, #68	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b1a:	2400      	movs	r4, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b1c:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b20:	9428      	str	r4, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b22:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 8000b26:	2400      	movs	r4, #0
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8000b30:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8000b34:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000b38:	2203      	movs	r2, #3
 8000b3a:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3c:	4826      	ldr	r0, [pc, #152]	; (8000bd8 <main+0x5d8>)
 8000b3e:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b40:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000b44:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8000b48:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
 8000b4c:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
 8000b50:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8000b54:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b58:	f005 faca 	bl	80060f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b5c:	4605      	mov	r5, r0
 8000b5e:	b108      	cbz	r0, 8000b64 <main+0x564>
 8000b60:	b672      	cpsid	i
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <main+0x562>
  huart2.Instance = USART2;
 8000b64:	4c1e      	ldr	r4, [pc, #120]	; (8000be0 <main+0x5e0>)
  HAL_TIM_MspPostInit(&htim1);
 8000b66:	481c      	ldr	r0, [pc, #112]	; (8000bd8 <main+0x5d8>)
 8000b68:	f001 ff20 	bl	80029ac <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000b6c:	491d      	ldr	r1, [pc, #116]	; (8000be4 <main+0x5e4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	60a5      	str	r5, [r4, #8]
  huart2.Init.BaudRate = 115200;
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000b78:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7c:	e9c4 5503 	strd	r5, r5, [r4, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	e9c4 5506 	strd	r5, r5, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b84:	e9c4 5508 	strd	r5, r5, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b88:	62a5      	str	r5, [r4, #40]	; 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8a:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8c:	f005 fc10 	bl	80063b0 <HAL_UART_Init>
 8000b90:	4601      	mov	r1, r0
 8000b92:	b108      	cbz	r0, 8000b98 <main+0x598>
 8000b94:	b672      	cpsid	i
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <main+0x596>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b98:	4620      	mov	r0, r4
 8000b9a:	f005 fde1 	bl	8006760 <HAL_UARTEx_SetTxFifoThreshold>
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	b108      	cbz	r0, 8000ba6 <main+0x5a6>
 8000ba2:	b672      	cpsid	i
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <main+0x5a4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f005 fe2c 	bl	8006804 <HAL_UARTEx_SetRxFifoThreshold>
 8000bac:	b108      	cbz	r0, 8000bb2 <main+0x5b2>
 8000bae:	b672      	cpsid	i
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <main+0x5b0>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f005 fdb6 	bl	8006724 <HAL_UARTEx_DisableFifoMode>
 8000bb8:	4604      	mov	r4, r0
 8000bba:	b1a8      	cbz	r0, 8000be8 <main+0x5e8>
 8000bbc:	b672      	cpsid	i
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <main+0x5be>
 8000bc0:	20000890 	.word	0x20000890
 8000bc4:	40010300 	.word	0x40010300
 8000bc8:	20000774 	.word	0x20000774
 8000bcc:	40010304 	.word	0x40010304
 8000bd0:	20000830 	.word	0x20000830
 8000bd4:	40010308 	.word	0x40010308
 8000bd8:	20000984 	.word	0x20000984
 8000bdc:	40012c00 	.word	0x40012c00
 8000be0:	200009f4 	.word	0x200009f4
 8000be4:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8000be8:	f001 fae2 	bl	80021b0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2104      	movs	r1, #4
 8000bf0:	2018      	movs	r0, #24
 8000bf2:	f003 fe43 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000bf6:	2018      	movs	r0, #24
 8000bf8:	f003 fe78 	bl	80048ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bfc:	4622      	mov	r2, r4
 8000bfe:	4621      	mov	r1, r4
 8000c00:	2019      	movs	r0, #25
 8000c02:	f003 fe3b 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c06:	2019      	movs	r0, #25
 8000c08:	f003 fe70 	bl	80048ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000c0c:	4622      	mov	r2, r4
 8000c0e:	2102      	movs	r1, #2
 8000c10:	2012      	movs	r0, #18
 8000c12:	f003 fe33 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c16:	2012      	movs	r0, #18
 8000c18:	f003 fe68 	bl	80048ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2103      	movs	r1, #3
 8000c20:	2026      	movs	r0, #38	; 0x26
 8000c22:	f003 fe2b 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c26:	2026      	movs	r0, #38	; 0x26
 8000c28:	f003 fe60 	bl	80048ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c2c:	2028      	movs	r0, #40	; 0x28
 8000c2e:	4622      	mov	r2, r4
 8000c30:	2103      	movs	r1, #3
 8000c32:	f003 fe23 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c36:	2028      	movs	r0, #40	; 0x28
 8000c38:	f003 fe58 	bl	80048ec <HAL_NVIC_EnableIRQ>
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <main+0x63c>
 8000c3e:	bf00      	nop

08000c40 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <MC_StartMotor1+0x8>)
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	f000 b83c 	b.w	8000cc0 <MCI_StartMotor>
 8000c48:	20000b68 	.word	0x20000b68

08000c4c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000c4c:	4b01      	ldr	r3, [pc, #4]	; (8000c54 <MC_StopMotor1+0x8>)
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	f000 b840 	b.w	8000cd4 <MCI_StopMotor>
 8000c54:	20000b68 	.word	0x20000b68

08000c58 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <MC_GetSTMStateMotor1+0x8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	f000 b882 	b.w	8000d64 <MCI_GetSTMState>
 8000c60:	20000b68 	.word	0x20000b68

08000c64 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 8000c64:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c66:	2400      	movs	r4, #0
 8000c68:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000c6a:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8000c6c:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 8000c6e:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000c70:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 8000c72:	e9c0 1200 	strd	r1, r2, [r0]
}
 8000c76:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 8000c7a:	6083      	str	r3, [r0, #8]
}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8000c80:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c82:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c86:	2401      	movs	r4, #1
 8000c88:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000c8a:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000c90:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c92:	8303      	strh	r3, [r0, #24]
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000c98:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c9a:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000c9c:	2402      	movs	r4, #2
 8000c9e:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000ca0:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000ca6:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ca8:	8303      	strh	r3, [r0, #24]
}
 8000caa:	4770      	bx	lr

08000cac <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000cac:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000cae:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cb0:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8000cb2:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000cb6:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cb8:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cba:	b002      	add	sp, #8
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000cc0:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cc2:	2103      	movs	r1, #3
{
 8000cc4:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cc6:	6800      	ldr	r0, [r0, #0]
 8000cc8:	f007 fa22 	bl	8008110 <STM_NextState>

  if ( RetVal == true )
 8000ccc:	b108      	cbz	r0, 8000cd2 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000cd2:	bd10      	pop	{r4, pc}

08000cd4 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000cd4:	6800      	ldr	r0, [r0, #0]
 8000cd6:	2107      	movs	r1, #7
 8000cd8:	f007 ba1a 	b.w	8008110 <STM_NextState>

08000cdc <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	f007 ba8d 	b.w	80081fc <STM_FaultAcknowledged>
 8000ce2:	bf00      	nop

08000ce4 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000ce4:	6800      	ldr	r0, [r0, #0]
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	f007 ba12 	b.w	8008110 <STM_NextState>

08000cec <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000cec:	b178      	cbz	r0, 8000d0e <MCI_ExecBufferedCommands+0x22>
{
 8000cee:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000cf0:	7e03      	ldrb	r3, [r0, #24]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	4604      	mov	r4, r0
 8000cf6:	d000      	beq.n	8000cfa <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000cf8:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000cfa:	7b01      	ldrb	r1, [r0, #12]
 8000cfc:	2902      	cmp	r1, #2
 8000cfe:	d020      	beq.n	8000d42 <MCI_ExecBufferedCommands+0x56>
 8000d00:	2903      	cmp	r1, #3
 8000d02:	d005      	beq.n	8000d10 <MCI_ExecBufferedCommands+0x24>
 8000d04:	2901      	cmp	r1, #1
 8000d06:	d00c      	beq.n	8000d22 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	7623      	strb	r3, [r4, #24]
}
 8000d0c:	bd10      	pop	{r4, pc}
 8000d0e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000d10:	6882      	ldr	r2, [r0, #8]
 8000d12:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000d16:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000d1a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	7623      	strb	r3, [r4, #24]
}
 8000d20:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d22:	6883      	ldr	r3, [r0, #8]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000d2a:	6840      	ldr	r0, [r0, #4]
 8000d2c:	f007 f92a 	bl	8007f84 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000d30:	8ae2      	ldrh	r2, [r4, #22]
 8000d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d36:	6860      	ldr	r0, [r4, #4]
 8000d38:	f007 f928 	bl	8007f8c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	d0e3      	beq.n	8000d08 <MCI_ExecBufferedCommands+0x1c>
 8000d40:	e7ec      	b.n	8000d1c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d42:	6883      	ldr	r3, [r0, #8]
 8000d44:	2100      	movs	r1, #0
 8000d46:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000d4a:	6840      	ldr	r0, [r0, #4]
 8000d4c:	f007 f91a 	bl	8007f84 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000d50:	8ae2      	ldrh	r2, [r4, #22]
 8000d52:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000d56:	6860      	ldr	r0, [r4, #4]
 8000d58:	f007 f918 	bl	8007f8c <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	d0d3      	beq.n	8000d08 <MCI_ExecBufferedCommands+0x1c>
 8000d60:	e7dc      	b.n	8000d1c <MCI_ExecBufferedCommands+0x30>
 8000d62:	bf00      	nop

08000d64 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000d64:	6800      	ldr	r0, [r0, #0]
 8000d66:	f007 ba47 	b.w	80081f8 <STM_GetState>
 8000d6a:	bf00      	nop

08000d6c <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000d6c:	7e40      	ldrb	r0, [r0, #25]
 8000d6e:	4770      	bx	lr

08000d70 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000d70:	7b03      	ldrb	r3, [r0, #12]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d005      	beq.n	8000d82 <MCI_GetImposedMotorDirection+0x12>
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d013      	beq.n	8000da2 <MCI_GetImposedMotorDirection+0x32>
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d009      	beq.n	8000d92 <MCI_GetImposedMotorDirection+0x22>
 8000d7e:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 8000d80:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000d82:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8000d86:	2b00      	cmp	r3, #0
        retVal = -1;
 8000d88:	bfac      	ite	ge
 8000d8a:	2001      	movge	r0, #1
 8000d8c:	f04f 30ff 	movlt.w	r0, #4294967295
 8000d90:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000d92:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000d96:	2b00      	cmp	r3, #0
        retVal = -1;
 8000d98:	bfac      	ite	ge
 8000d9a:	2001      	movge	r0, #1
 8000d9c:	f04f 30ff 	movlt.w	r0, #4294967295
 8000da0:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000da2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8000da6:	2b00      	cmp	r3, #0
        retVal = -1;
 8000da8:	bfac      	ite	ge
 8000daa:	2001      	movge	r0, #1
 8000dac:	f04f 30ff 	movlt.w	r0, #4294967295
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000db4:	7b03      	ldrb	r3, [r0, #12]
 8000db6:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000db8:	bf0c      	ite	eq
 8000dba:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000dbe:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000dc4:	6840      	ldr	r0, [r0, #4]
 8000dc6:	f007 b929 	b.w	800801c <STC_StopRamp>
 8000dca:	bf00      	nop

08000dcc <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000dcc:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000dce:	6840      	ldr	r0, [r0, #4]
 8000dd0:	f007 f8be 	bl	8007f50 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000dd8:	f007 b862 	b.w	8007ea0 <SPD_GetAvrgMecSpeedUnit>

08000ddc <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000ddc:	6840      	ldr	r0, [r0, #4]
 8000dde:	f007 b8c1 	b.w	8007f64 <STC_GetMecSpeedRefUnit>
 8000de2:	bf00      	nop

08000de4 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000de4:	6882      	ldr	r2, [r0, #8]
 8000de6:	6810      	ldr	r0, [r2, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	b282      	uxth	r2, r0
 8000dec:	f362 030f 	bfi	r3, r2, #0, #16
 8000df0:	0c00      	lsrs	r0, r0, #16
 8000df2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000df6:	b082      	sub	sp, #8
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	b002      	add	sp, #8
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000e00:	6882      	ldr	r2, [r0, #8]
 8000e02:	6850      	ldr	r0, [r2, #4]
 8000e04:	2300      	movs	r3, #0
 8000e06:	b282      	uxth	r2, r0
 8000e08:	f362 030f 	bfi	r3, r2, #0, #16
 8000e0c:	0c00      	lsrs	r0, r0, #16
 8000e0e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e12:	b082      	sub	sp, #8
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	b002      	add	sp, #8
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000e1c:	6882      	ldr	r2, [r0, #8]
 8000e1e:	68d0      	ldr	r0, [r2, #12]
 8000e20:	2300      	movs	r3, #0
 8000e22:	b282      	uxth	r2, r0
 8000e24:	f362 030f 	bfi	r3, r2, #0, #16
 8000e28:	0c00      	lsrs	r0, r0, #16
 8000e2a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e2e:	b082      	sub	sp, #8
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	b002      	add	sp, #8
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000e38:	6882      	ldr	r2, [r0, #8]
 8000e3a:	6910      	ldr	r0, [r2, #16]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	b282      	uxth	r2, r0
 8000e40:	f362 030f 	bfi	r3, r2, #0, #16
 8000e44:	0c00      	lsrs	r0, r0, #16
 8000e46:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e4a:	b082      	sub	sp, #8
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	b002      	add	sp, #8
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000e54:	6882      	ldr	r2, [r0, #8]
 8000e56:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	b282      	uxth	r2, r0
 8000e5e:	f362 030f 	bfi	r3, r2, #0, #16
 8000e62:	0c00      	lsrs	r0, r0, #16
 8000e64:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e68:	b082      	sub	sp, #8
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	b002      	add	sp, #8
 8000e6e:	4770      	bx	lr

08000e70 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000e70:	6882      	ldr	r2, [r0, #8]
 8000e72:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000e76:	2300      	movs	r3, #0
 8000e78:	b282      	uxth	r2, r0
 8000e7a:	f362 030f 	bfi	r3, r2, #0, #16
 8000e7e:	0c00      	lsrs	r0, r0, #16
 8000e80:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e84:	b082      	sub	sp, #8
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	b002      	add	sp, #8
 8000e8a:	4770      	bx	lr

08000e8c <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000e8c:	6883      	ldr	r3, [r0, #8]
}
 8000e8e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000e92:	4770      	bx	lr

08000e94 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000e94:	2300      	movs	r3, #0
 8000e96:	6882      	ldr	r2, [r0, #8]
 8000e98:	f361 030f 	bfi	r3, r1, #0, #16
 8000e9c:	f361 431f 	bfi	r3, r1, #16, #16
 8000ea0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000ea8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000eaa:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000eae:	f007 f8f5 	bl	800809c <STC_GetDefaultIqdref>
 8000eb2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000eb6:	8220      	strh	r0, [r4, #16]
 8000eb8:	8263      	strh	r3, [r4, #18]
}
 8000eba:	bd10      	pop	{r4, pc}

08000ebc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000ebc:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000ebe:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000ec2:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000ec6:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000eca:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000ece:	4250      	negs	r0, r2
 8000ed0:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000ed4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000ed8:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000eda:	da05      	bge.n	8000ee8 <MCM_Clarke+0x2c>
 8000edc:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000ede:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000ee2:	da0c      	bge.n	8000efe <MCM_Clarke+0x42>
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <MCM_Clarke+0x50>)
 8000ee6:	e001      	b.n	8000eec <MCM_Clarke+0x30>
 8000ee8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	2000      	movs	r0, #0
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f363 000f 	bfi	r0, r3, #0, #16
 8000ef6:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000efa:	b004      	add	sp, #16
 8000efc:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MCM_Clarke+0x50>)
 8000f00:	b20a      	sxth	r2, r1
 8000f02:	4282      	cmp	r2, r0
 8000f04:	bfb8      	it	lt
 8000f06:	4602      	movlt	r2, r0
 8000f08:	e7f0      	b.n	8000eec <MCM_Clarke+0x30>
 8000f0a:	bf00      	nop
 8000f0c:	ffff8001 	.word	0xffff8001

08000f10 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MCM_Trig_Functions+0x28>)
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <MCM_Trig_Functions+0x2c>)
 8000f14:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000f16:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8000f1a:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000f1e:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000f20:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8000f22:	2000      	movs	r0, #0
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f362 000f 	bfi	r0, r2, #0, #16
 8000f2a:	0c1b      	lsrs	r3, r3, #16
{
 8000f2c:	b082      	sub	sp, #8
  return (CosSin.Components);
 8000f2e:	f363 401f 	bfi	r0, r3, #16, #16

}
 8000f32:	b002      	add	sp, #8
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	00600040 	.word	0x00600040

08000f40 <MCM_Park>:
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	4605      	mov	r5, r0
 8000f46:	9001      	str	r0, [sp, #4]
 8000f48:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	f7ff ffe0 	bl	8000f10 <MCM_Trig_Functions>
 8000f50:	b22d      	sxth	r5, r5
 8000f52:	b204      	sxth	r4, r0
 8000f54:	1436      	asrs	r6, r6, #16
 8000f56:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000f58:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000f5c:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8000f60:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000f64:	da12      	bge.n	8000f8c <MCM_Park+0x4c>
 8000f66:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000f68:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000f6c:	4914      	ldr	r1, [pc, #80]	; (8000fc0 <MCM_Park+0x80>)
 8000f6e:	da21      	bge.n	8000fb4 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000f70:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000f74:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000f78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000f7c:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000f80:	da07      	bge.n	8000f92 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000f82:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000f86:	da0f      	bge.n	8000fa8 <MCM_Park+0x68>
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MCM_Park+0x80>)
 8000f8a:	e004      	b.n	8000f96 <MCM_Park+0x56>
 8000f8c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000f90:	e7ee      	b.n	8000f70 <MCM_Park+0x30>
 8000f92:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000f96:	b28a      	uxth	r2, r1
 8000f98:	2000      	movs	r0, #0
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	f362 000f 	bfi	r0, r2, #0, #16
 8000fa0:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000fa4:	b004      	add	sp, #16
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MCM_Park+0x80>)
 8000faa:	b213      	sxth	r3, r2
 8000fac:	4283      	cmp	r3, r0
 8000fae:	bfb8      	it	lt
 8000fb0:	4603      	movlt	r3, r0
 8000fb2:	e7f0      	b.n	8000f96 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	4291      	cmp	r1, r2
 8000fb8:	bfb8      	it	lt
 8000fba:	4611      	movlt	r1, r2
 8000fbc:	e7d8      	b.n	8000f70 <MCM_Park+0x30>
 8000fbe:	bf00      	nop
 8000fc0:	ffff8001 	.word	0xffff8001

08000fc4 <MCM_Rev_Park>:
{
 8000fc4:	b530      	push	{r4, r5, lr}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	4604      	mov	r4, r0
 8000fca:	9001      	str	r0, [sp, #4]
 8000fcc:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000fce:	4608      	mov	r0, r1
 8000fd0:	f7ff ff9e 	bl	8000f10 <MCM_Trig_Functions>
 8000fd4:	142d      	asrs	r5, r5, #16
 8000fd6:	1403      	asrs	r3, r0, #16
 8000fd8:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000fda:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000fde:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000fe0:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000fe4:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000fe8:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000fec:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000ff6:	f362 000f 	bfi	r0, r2, #0, #16
 8000ffa:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ffe:	b005      	add	sp, #20
 8001000:	bd30      	pop	{r4, r5, pc}
 8001002:	bf00      	nop

08001004 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	dd32      	ble.n	800106e <MCM_Sqrt+0x6a>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if ( wInput <= ( int32_t )2097152 )
 8001008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 800100c:	bfd4      	ite	le
 800100e:	2080      	movle	r0, #128	; 0x80
 8001010:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001014:	fb93 f2f0 	sdiv	r2, r3, r0
 8001018:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800101a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800101e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001022:	d025      	beq.n	8001070 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001024:	fb93 f2f1 	sdiv	r2, r3, r1
 8001028:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800102a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800102e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001032:	d01d      	beq.n	8001070 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001034:	fb93 f2f0 	sdiv	r2, r3, r0
 8001038:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800103a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800103e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001042:	d015      	beq.n	8001070 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001044:	fb93 f2f1 	sdiv	r2, r3, r1
 8001048:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 800104a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800104e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001052:	d00d      	beq.n	8001070 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001054:	fb93 f2f0 	sdiv	r2, r3, r0
 8001058:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 800105a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800105e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8001062:	d005      	beq.n	8001070 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001064:	fb93 f0f1 	sdiv	r0, r3, r1
 8001068:	4408      	add	r0, r1
 800106a:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 800106c:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 800106e:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <FOC_Clear+0x8c>)
 800107c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8001080:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001084:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8001086:	2500      	movs	r5, #0
{
 8001088:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 800108a:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 800108e:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8001090:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8001092:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001096:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 800109a:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800109e:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 80010a2:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010a6:	4817      	ldr	r0, [pc, #92]	; (8001104 <FOC_Clear+0x90>)
  FOCVars[bMotor].Iqd = NULL_qd;
 80010a8:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010aa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 80010ae:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010b2:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 80010b4:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 80010b6:	50d5      	str	r5, [r2, r3]
 80010b8:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 80010bc:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80010be:	f005 fcf3 	bl	8006aa8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <FOC_Clear+0x94>)
 80010c4:	4629      	mov	r1, r5
 80010c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80010ca:	f005 fced 	bl	8006aa8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <FOC_Clear+0x98>)
 80010d0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80010d4:	f006 ff3e 	bl	8007f54 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <FOC_Clear+0x9c>)
 80010da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80010de:	f005 fef1 	bl	8006ec4 <PWMC_SwitchOffPWM>

  if (pFW[bMotor])
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <FOC_Clear+0xa0>)
 80010e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80010e8:	b108      	cbz	r0, 80010ee <FOC_Clear+0x7a>
  {
    FW_Clear(pFW[bMotor]);
 80010ea:	f007 fb97 	bl	800881c <FW_Clear>
  }
  if (pFF[bMotor])
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <FOC_Clear+0xa4>)
 80010f0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80010f4:	b118      	cbz	r0, 80010fe <FOC_Clear+0x8a>
    FF_Clear(pFF[bMotor]);
  }
  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80010f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FF_Clear(pFF[bMotor]);
 80010fa:	f007 baaf 	b.w	800865c <FF_Clear>
}
 80010fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001100:	20000aac 	.word	0x20000aac
 8001104:	20000aa0 	.word	0x20000aa0
 8001108:	20000b60 	.word	0x20000b60
 800110c:	20000b64 	.word	0x20000b64
 8001110:	20000a98 	.word	0x20000a98
 8001114:	20000b5c 	.word	0x20000b5c
 8001118:	20000a90 	.word	0x20000a90

0800111c <MCboot>:
{
 800111c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001120:	4603      	mov	r3, r0
 8001122:	b089      	sub	sp, #36	; 0x24
  STM_Init(&STM[M1]);
 8001124:	4871      	ldr	r0, [pc, #452]	; (80012ec <MCboot+0x1d0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001126:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8001364 <MCboot+0x248>
  pSTC[M1] = &SpeednTorqCtrlM1;
 800112a:	4d71      	ldr	r5, [pc, #452]	; (80012f0 <MCboot+0x1d4>)
  PID_HandleInit(&PIDIqHandle_M1);
 800112c:	f8df a238 	ldr.w	sl, [pc, #568]	; 8001368 <MCboot+0x24c>
  PID_HandleInit(&PIDIdHandle_M1);
 8001130:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800136c <MCboot+0x250>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001134:	4f6f      	ldr	r7, [pc, #444]	; (80012f4 <MCboot+0x1d8>)
  NTC_Init(&TempSensorParamsM1);
 8001136:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8001370 <MCboot+0x254>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800113a:	4e6f      	ldr	r6, [pc, #444]	; (80012f8 <MCboot+0x1dc>)
{
 800113c:	e9cd 3103 	strd	r3, r1, [sp, #12]
  STM_Init(&STM[M1]);
 8001140:	f006 ffc2 	bl	80080c8 <STM_Init>
  bMCBootCompleted = 0;
 8001144:	496d      	ldr	r1, [pc, #436]	; (80012fc <MCboot+0x1e0>)
  pCLM[M1] = &CircleLimitationM1;
 8001146:	4b6e      	ldr	r3, [pc, #440]	; (8001300 <MCboot+0x1e4>)
 8001148:	4a6e      	ldr	r2, [pc, #440]	; (8001304 <MCboot+0x1e8>)
 800114a:	601a      	str	r2, [r3, #0]
  bMCBootCompleted = 0;
 800114c:	2400      	movs	r4, #0
 800114e:	700c      	strb	r4, [r1, #0]
  pFW[M1] = &FW_M1; /* only if M1 has FW */
 8001150:	496d      	ldr	r1, [pc, #436]	; (8001308 <MCboot+0x1ec>)
 8001152:	4a6e      	ldr	r2, [pc, #440]	; (800130c <MCboot+0x1f0>)
 8001154:	600a      	str	r2, [r1, #0]
  pFF[M1] = &FF_M1; /* only if M1 has FF */
 8001156:	4a6e      	ldr	r2, [pc, #440]	; (8001310 <MCboot+0x1f4>)
 8001158:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <MCboot+0x1f8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800115a:	486f      	ldr	r0, [pc, #444]	; (8001318 <MCboot+0x1fc>)
  pFF[M1] = &FF_M1; /* only if M1 has FF */
 800115c:	6013      	str	r3, [r2, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800115e:	f8cb 0000 	str.w	r0, [fp]
  R3_2_Init(&PWM_Handle_M1);
 8001162:	f006 fa21 	bl	80075a8 <R3_2_Init>
  startTimers();
 8001166:	f005 fd29 	bl	8006bbc <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800116a:	486c      	ldr	r0, [pc, #432]	; (800131c <MCboot+0x200>)
 800116c:	f005 fc88 	bl	8006a80 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001170:	4a6b      	ldr	r2, [pc, #428]	; (8001320 <MCboot+0x204>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001172:	4b6c      	ldr	r3, [pc, #432]	; (8001324 <MCboot+0x208>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001174:	4969      	ldr	r1, [pc, #420]	; (800131c <MCboot+0x200>)
  STO_PLL_Init (&STO_PLL_M1);
 8001176:	486c      	ldr	r0, [pc, #432]	; (8001328 <MCboot+0x20c>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001178:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800117a:	6011      	str	r1, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 800117c:	f007 feb0 	bl	8008ee0 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8001180:	4867      	ldr	r0, [pc, #412]	; (8001320 <MCboot+0x204>)
 8001182:	4a69      	ldr	r2, [pc, #420]	; (8001328 <MCboot+0x20c>)
 8001184:	6801      	ldr	r1, [r0, #0]
 8001186:	6828      	ldr	r0, [r5, #0]
 8001188:	f006 fecc 	bl	8007f24 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 800118c:	4867      	ldr	r0, [pc, #412]	; (800132c <MCboot+0x210>)
 800118e:	f007 f963 	bl	8008458 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001192:	f8db 3000 	ldr.w	r3, [fp]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	6829      	ldr	r1, [r5, #0]
 800119a:	4a64      	ldr	r2, [pc, #400]	; (800132c <MCboot+0x210>)
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <MCboot+0x214>)
 800119e:	4865      	ldr	r0, [pc, #404]	; (8001334 <MCboot+0x218>)
 80011a0:	f007 fbc6 	bl	8008930 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80011a4:	4650      	mov	r0, sl
 80011a6:	f005 fc6b 	bl	8006a80 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80011aa:	4648      	mov	r0, r9
 80011ac:	f005 fc68 	bl	8006a80 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80011b0:	4a61      	ldr	r2, [pc, #388]	; (8001338 <MCboot+0x21c>)
  pPIDId[M1] = &PIDIdHandle_M1;
 80011b2:	4b62      	ldr	r3, [pc, #392]	; (800133c <MCboot+0x220>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80011b4:	4862      	ldr	r0, [pc, #392]	; (8001340 <MCboot+0x224>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 80011b6:	f8c2 a000 	str.w	sl, [r2]
  pPIDId[M1] = &PIDIdHandle_M1;
 80011ba:	f8c3 9000 	str.w	r9, [r3]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80011be:	6038      	str	r0, [r7, #0]
  RVBS_Init(pBusSensorM1);
 80011c0:	f006 fd94 	bl	8007cec <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80011c4:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <MCboot+0x228>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80011cc:	4a5e      	ldr	r2, [pc, #376]	; (8001348 <MCboot+0x22c>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80011ce:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 80011d2:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80011d4:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 80011d6:	f005 fc0f 	bl	80069f8 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <MCboot+0x230>)
  PID_HandleInit(&PIDFluxWeakeningHandle_M1);
 80011dc:	485c      	ldr	r0, [pc, #368]	; (8001350 <MCboot+0x234>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80011de:	f8c3 8000 	str.w	r8, [r3]
  PID_HandleInit(&PIDFluxWeakeningHandle_M1);
 80011e2:	f005 fc4d 	bl	8006a80 <PID_HandleInit>
  FW_Init(pFW[M1],pPIDSpeed[M1],&PIDFluxWeakeningHandle_M1);
 80011e6:	4b48      	ldr	r3, [pc, #288]	; (8001308 <MCboot+0x1ec>)
 80011e8:	484d      	ldr	r0, [pc, #308]	; (8001320 <MCboot+0x204>)
 80011ea:	4a59      	ldr	r2, [pc, #356]	; (8001350 <MCboot+0x234>)
 80011ec:	6801      	ldr	r1, [r0, #0]
 80011ee:	6818      	ldr	r0, [r3, #0]
  oMCInterface[M1] = & Mci[M1];
 80011f0:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8001374 <MCboot+0x258>
  FW_Init(pFW[M1],pPIDSpeed[M1],&PIDFluxWeakeningHandle_M1);
 80011f4:	f007 fb0c 	bl	8008810 <FW_Init>
  FF_Init(pFF[M1],&(pBusSensorM1->_Super),pPIDId[M1],pPIDIq[M1]);
 80011f8:	494f      	ldr	r1, [pc, #316]	; (8001338 <MCboot+0x21c>)
 80011fa:	4845      	ldr	r0, [pc, #276]	; (8001310 <MCboot+0x1f4>)
 80011fc:	680b      	ldr	r3, [r1, #0]
 80011fe:	494f      	ldr	r1, [pc, #316]	; (800133c <MCboot+0x220>)
 8001200:	6800      	ldr	r0, [r0, #0]
 8001202:	680a      	ldr	r2, [r1, #0]
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	f007 fa1d 	bl	8008644 <FF_Init>
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800120a:	4b52      	ldr	r3, [pc, #328]	; (8001354 <MCboot+0x238>)
 800120c:	4852      	ldr	r0, [pc, #328]	; (8001358 <MCboot+0x23c>)
 800120e:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001210:	f04f 0801 	mov.w	r8, #1
  REMNG_Init(pREMNG[M1]);
 8001214:	f006 fdb8 	bl	8007d88 <REMNG_Init>
  FOC_Clear(M1);
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff ff2b 	bl	8001074 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800121e:	f886 8024 	strb.w	r8, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001222:	6828      	ldr	r0, [r5, #0]
 8001224:	f006 ff3a 	bl	800809c <STC_GetDefaultIqdref>
 8001228:	4603      	mov	r3, r0
 800122a:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800122e:	8233      	strh	r3, [r6, #16]
 8001230:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001232:	6828      	ldr	r0, [r5, #0]
 8001234:	f006 ff32 	bl	800809c <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8001238:	4948      	ldr	r1, [pc, #288]	; (800135c <MCboot+0x240>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800123a:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 800123c:	f8c9 1000 	str.w	r1, [r9]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001240:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001244:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001246:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800124a:	4608      	mov	r0, r1
 800124c:	4927      	ldr	r1, [pc, #156]	; (80012ec <MCboot+0x1d0>)
 800124e:	f7ff fd09 	bl	8000c64 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001252:	6828      	ldr	r0, [r5, #0]
 8001254:	f8d9 6000 	ldr.w	r6, [r9]
 8001258:	f006 ff16 	bl	8008088 <STC_GetMecSpeedRefUnitDefault>
 800125c:	4622      	mov	r2, r4
 800125e:	4601      	mov	r1, r0
 8001260:	4630      	mov	r0, r6
 8001262:	f7ff fd0d 	bl	8000c80 <MCI_ExecSpeedRamp>
  MCT[M1].pFW = pFW[M1];
 8001266:	4a28      	ldr	r2, [pc, #160]	; (8001308 <MCboot+0x1ec>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001268:	4e33      	ldr	r6, [pc, #204]	; (8001338 <MCboot+0x21c>)
  MCT[M1].pFW = pFW[M1];
 800126a:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pFF = pFF[M1];
 800126c:	4a28      	ldr	r2, [pc, #160]	; (8001310 <MCboot+0x1f4>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 800126e:	f8d6 e000 	ldr.w	lr, [r6]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001272:	482b      	ldr	r0, [pc, #172]	; (8001320 <MCboot+0x204>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001274:	4e31      	ldr	r6, [pc, #196]	; (800133c <MCboot+0x220>)
  MCT[M1].pFF = pFF[M1];
 8001276:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001278:	f8d6 c000 	ldr.w	ip, [r6]
  pMCIList[M1] = oMCInterface[M1];
 800127c:	f8d9 a000 	ldr.w	sl, [r9]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001280:	f8db 6000 	ldr.w	r6, [fp]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001284:	f8d0 9000 	ldr.w	r9, [r0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001288:	f8d5 b000 	ldr.w	fp, [r5]
  MCT[M1].pFF = pFF[M1];
 800128c:	9205      	str	r2, [sp, #20]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800128e:	4d2f      	ldr	r5, [pc, #188]	; (800134c <MCboot+0x230>)
  pMCIList[M1] = oMCInterface[M1];
 8001290:	9a03      	ldr	r2, [sp, #12]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001292:	482d      	ldr	r0, [pc, #180]	; (8001348 <MCboot+0x22c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001294:	4b32      	ldr	r3, [pc, #200]	; (8001360 <MCboot+0x244>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001296:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001298:	683f      	ldr	r7, [r7, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800129a:	6800      	ldr	r0, [r0, #0]
  pMCIList[M1] = oMCInterface[M1];
 800129c:	f8c2 a000 	str.w	sl, [r2]
  MCT[M1].pFF = pFF[M1];
 80012a0:	9a05      	ldr	r2, [sp, #20]
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
  MCT[M1].pPIDFluxWeakening = &PIDFluxWeakeningHandle_M1; /* only if M1 has FW */
 80012a4:	4a2a      	ldr	r2, [pc, #168]	; (8001350 <MCboot+0x234>)
 80012a6:	60da      	str	r2, [r3, #12]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 80012a8:	4a22      	ldr	r2, [pc, #136]	; (8001334 <MCboot+0x218>)
 80012aa:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 80012ac:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <MCboot+0x20c>)
  MCT[M1].pPIDId = pPIDId[M1];
 80012ae:	f8c3 c008 	str.w	ip, [r3, #8]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80012b2:	e9c3 2406 	strd	r2, r4, [r3, #24]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <MCboot+0x210>)
 80012b8:	621a      	str	r2, [r3, #32]
  MCT[M1].pStateMachine = &STM[M1];
 80012ba:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <MCboot+0x1d0>)
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pFW = pFW[M1];
 80012be:	e9c3 010f 	strd	r0, r1, [r3, #60]	; 0x3c
  MCT[M1].pPIDIq = pPIDIq[M1];
 80012c2:	e9c3 9e00 	strd	r9, lr, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80012c6:	e9c3 570b 	strd	r5, r7, [r3, #44]	; 0x2c
  bMCBootCompleted = 1;
 80012ca:	490c      	ldr	r1, [pc, #48]	; (80012fc <MCboot+0x1e0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80012cc:	611e      	str	r6, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80012ce:	f8c3 b024 	str.w	fp, [r3, #36]	; 0x24
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80012d2:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  pMCTList[M1] = &MCT[M1];
 80012d6:	9a04      	ldr	r2, [sp, #16]
  MCT[M1].pOTT = MC_NULL;
 80012d8:	651c      	str	r4, [r3, #80]	; 0x50
  MCT[M1].pSCC = MC_NULL;
 80012da:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  pMCTList[M1] = &MCT[M1];
 80012de:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 80012e0:	f881 8000 	strb.w	r8, [r1]
}
 80012e4:	b009      	add	sp, #36	; 0x24
 80012e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ea:	bf00      	nop
 80012ec:	20000b4c 	.word	0x20000b4c
 80012f0:	20000b64 	.word	0x20000b64
 80012f4:	20000b2c 	.word	0x20000b2c
 80012f8:	20000aac 	.word	0x20000aac
 80012fc:	20000758 	.word	0x20000758
 8001300:	20000b28 	.word	0x20000b28
 8001304:	20000000 	.word	0x20000000
 8001308:	20000b5c 	.word	0x20000b5c
 800130c:	200000ec 	.word	0x200000ec
 8001310:	20000a90 	.word	0x20000a90
 8001314:	200000b4 	.word	0x200000b4
 8001318:	200002d0 	.word	0x200002d0
 800131c:	20000190 	.word	0x20000190
 8001320:	20000a9c 	.word	0x20000a9c
 8001324:	20000540 	.word	0x20000540
 8001328:	20000418 	.word	0x20000418
 800132c:	2000059c 	.word	0x2000059c
 8001330:	20000404 	.word	0x20000404
 8001334:	2000038c 	.word	0x2000038c
 8001338:	20000aa0 	.word	0x20000aa0
 800133c:	20000b60 	.word	0x20000b60
 8001340:	20000364 	.word	0x20000364
 8001344:	200001bc 	.word	0x200001bc
 8001348:	20000b58 	.word	0x20000b58
 800134c:	20000a94 	.word	0x20000a94
 8001350:	2000010c 	.word	0x2000010c
 8001354:	20000b54 	.word	0x20000b54
 8001358:	2000034c 	.word	0x2000034c
 800135c:	20000b30 	.word	0x20000b30
 8001360:	20000ad4 	.word	0x20000ad4
 8001364:	20000a98 	.word	0x20000a98
 8001368:	20000164 	.word	0x20000164
 800136c:	20000138 	.word	0x20000138
 8001370:	20000574 	.word	0x20000574
 8001374:	20000aa4 	.word	0x20000aa4

08001378 <FOC_InitAdditionalMethods>:
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
    if (pFF[bMotor])
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <FOC_InitAdditionalMethods+0x10>)
 800137a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800137e:	b108      	cbz	r0, 8001384 <FOC_InitAdditionalMethods+0xc>
    {
      FF_InitFOCAdditionalMethods(pFF[bMotor]);
 8001380:	f007 ba08 	b.w	8008794 <FF_InitFOCAdditionalMethods>
    }
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000a90 	.word	0x20000a90

0800138c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  qd_t IqdTmp;

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001390:	4e19      	ldr	r6, [pc, #100]	; (80013f8 <FOC_CalcCurrRef+0x6c>)
 8001392:	2526      	movs	r5, #38	; 0x26
 8001394:	fb05 6500 	mla	r5, r5, r0, r6
{
 8001398:	b082      	sub	sp, #8
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800139a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800139e:	b113      	cbz	r3, 80013a6 <FOC_CalcCurrRef+0x1a>
    }
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80013a0:	b002      	add	sp, #8
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80013a6:	4f15      	ldr	r7, [pc, #84]	; (80013fc <FOC_CalcCurrRef+0x70>)
 80013a8:	4604      	mov	r4, r0
 80013aa:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80013ae:	f006 fe39 	bl	8008024 <STC_CalcTorqueReference>
    if (pFW[bMotor])
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <FOC_CalcCurrRef+0x74>)
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80013b4:	83e8      	strh	r0, [r5, #30]
    if (pFW[bMotor])
 80013b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80013ba:	8228      	strh	r0, [r5, #16]
    if (pFW[bMotor])
 80013bc:	b163      	cbz	r3, 80013d8 <FOC_CalcCurrRef+0x4c>
      IqdTmp.d = FOCVars[bMotor].UserIdref;
 80013be:	8aaa      	ldrh	r2, [r5, #20]
      IqdTmp.q = FOCVars[bMotor].Iqdref.q;
 80013c0:	f8ad 0004 	strh.w	r0, [sp, #4]
      IqdTmp.d = FOCVars[bMotor].UserIdref;
 80013c4:	f8ad 2006 	strh.w	r2, [sp, #6]
      FOCVars[bMotor].Iqdref = FW_CalcCurrRef(pFW[bMotor],IqdTmp);
 80013c8:	4618      	mov	r0, r3
 80013ca:	9901      	ldr	r1, [sp, #4]
 80013cc:	f007 fa32 	bl	8008834 <FW_CalcCurrRef>
 80013d0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80013d4:	8228      	strh	r0, [r5, #16]
 80013d6:	826b      	strh	r3, [r5, #18]
    if (pFF[bMotor])
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <FOC_CalcCurrRef+0x78>)
 80013da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80013de:	2800      	cmp	r0, #0
 80013e0:	d0de      	beq.n	80013a0 <FOC_CalcCurrRef+0x14>
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 80013e2:	2326      	movs	r3, #38	; 0x26
 80013e4:	fb03 6604 	mla	r6, r3, r4, r6
 80013e8:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
 80013ec:	6931      	ldr	r1, [r6, #16]
}
 80013ee:	b002      	add	sp, #8
 80013f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      FF_VqdffComputation(pFF[bMotor], FOCVars[bMotor].Iqdref, pSTC[bMotor]);
 80013f4:	f007 b936 	b.w	8008664 <FF_VqdffComputation>
 80013f8:	20000aac 	.word	0x20000aac
 80013fc:	20000b64 	.word	0x20000b64
 8001400:	20000b5c 	.word	0x20000b5c
 8001404:	20000a90 	.word	0x20000a90

08001408 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001408:	4b01      	ldr	r3, [pc, #4]	; (8001410 <TSK_SetChargeBootCapDelayM1+0x8>)
 800140a:	8018      	strh	r0, [r3, #0]
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	2000075a 	.word	0x2000075a

08001414 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001416:	8818      	ldrh	r0, [r3, #0]
 8001418:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800141a:	fab0 f080 	clz	r0, r0
 800141e:	0940      	lsrs	r0, r0, #5
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	2000075a 	.word	0x2000075a

08001428 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001428:	4b01      	ldr	r3, [pc, #4]	; (8001430 <TSK_SetStopPermanencyTimeM1+0x8>)
 800142a:	8018      	strh	r0, [r3, #0]
}
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	2000075e 	.word	0x2000075e

08001434 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001436:	8818      	ldrh	r0, [r3, #0]
 8001438:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800143a:	fab0 f080 	clz	r0, r0
 800143e:	0940      	lsrs	r0, r0, #5
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000075e 	.word	0x2000075e

08001448 <TSK_MediumFrequencyTaskM1>:
{
 8001448:	b530      	push	{r4, r5, lr}
 800144a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 800144c:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800144e:	4669      	mov	r1, sp
 8001450:	489a      	ldr	r0, [pc, #616]	; (80016bc <TSK_MediumFrequencyTaskM1+0x274>)
  int16_t wAux = 0;
 8001452:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001456:	f007 fc4b 	bl	8008cf0 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800145a:	4d99      	ldr	r5, [pc, #612]	; (80016c0 <TSK_MediumFrequencyTaskM1+0x278>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800145c:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 800145e:	6828      	ldr	r0, [r5, #0]
 8001460:	f005 fb78 	bl	8006b54 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001464:	4897      	ldr	r0, [pc, #604]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001466:	f006 fec7 	bl	80081f8 <STM_GetState>
  switch ( StateM1 )
 800146a:	1ec3      	subs	r3, r0, #3
 800146c:	2b10      	cmp	r3, #16
 800146e:	d85a      	bhi.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
 8001470:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001474:	0011007e 	.word	0x0011007e
 8001478:	00a90092 	.word	0x00a90092
 800147c:	00cb00b8 	.word	0x00cb00b8
 8001480:	005900d4 	.word	0x005900d4
 8001484:	00590059 	.word	0x00590059
 8001488:	00590059 	.word	0x00590059
 800148c:	00e10059 	.word	0x00e10059
 8001490:	00fd00f0 	.word	0x00fd00f0
 8001494:	005b      	.short	0x005b
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8001496:	488c      	ldr	r0, [pc, #560]	; (80016c8 <TSK_MediumFrequencyTaskM1+0x280>)
 8001498:	f007 fad0 	bl	8008a3c <RUC_Exec>
 800149c:	2800      	cmp	r0, #0
 800149e:	f000 8101 	beq.w	80016a4 <TSK_MediumFrequencyTaskM1+0x25c>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 80014a2:	4b8a      	ldr	r3, [pc, #552]	; (80016cc <TSK_MediumFrequencyTaskM1+0x284>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	f006 fdbd 	bl	8008024 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <TSK_MediumFrequencyTaskM1+0x288>)
 80014ac:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 80014b0:	8218      	strh	r0, [r3, #16]
 80014b2:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 80014b4:	4887      	ldr	r0, [pc, #540]	; (80016d4 <TSK_MediumFrequencyTaskM1+0x28c>)
 80014b6:	f10d 0102 	add.w	r1, sp, #2
 80014ba:	f007 f821 	bl	8008500 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80014be:	4882      	ldr	r0, [pc, #520]	; (80016c8 <TSK_MediumFrequencyTaskM1+0x280>)
 80014c0:	f007 faf6 	bl	8008ab0 <RUC_FirstAccelerationStageReached>
 80014c4:	b378      	cbz	r0, 8001526 <TSK_MediumFrequencyTaskM1+0xde>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80014c6:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80014ca:	487c      	ldr	r0, [pc, #496]	; (80016bc <TSK_MediumFrequencyTaskM1+0x274>)
 80014cc:	f007 fd42 	bl	8008f54 <STO_PLL_IsObserverConverged>
 80014d0:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 80014d2:	4881      	ldr	r0, [pc, #516]	; (80016d8 <TSK_MediumFrequencyTaskM1+0x290>)
 80014d4:	f7ff fc4c 	bl	8000d70 <MCI_GetImposedMotorDirection>
 80014d8:	b2c1      	uxtb	r1, r0
 80014da:	4878      	ldr	r0, [pc, #480]	; (80016bc <TSK_MediumFrequencyTaskM1+0x274>)
 80014dc:	f007 fdf8 	bl	80090d0 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80014e0:	487c      	ldr	r0, [pc, #496]	; (80016d4 <TSK_MediumFrequencyTaskM1+0x28c>)
 80014e2:	4621      	mov	r1, r4
 80014e4:	f007 f89c 	bl	8008620 <VSS_SetStartTransition>
      if ( ObserverConverged )
 80014e8:	b1ec      	cbz	r4, 8001526 <TSK_MediumFrequencyTaskM1+0xde>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80014ea:	4874      	ldr	r0, [pc, #464]	; (80016bc <TSK_MediumFrequencyTaskM1+0x274>)
 80014ec:	4d78      	ldr	r5, [pc, #480]	; (80016d0 <TSK_MediumFrequencyTaskM1+0x288>)
        REMNG_Init( pREMNG[M1] );
 80014ee:	4c7b      	ldr	r4, [pc, #492]	; (80016dc <TSK_MediumFrequencyTaskM1+0x294>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80014f0:	f006 fcd2 	bl	8007e98 <SPD_GetElAngle>
 80014f4:	4601      	mov	r1, r0
 80014f6:	6868      	ldr	r0, [r5, #4]
 80014f8:	f7ff fd22 	bl	8000f40 <MCM_Park>
 80014fc:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 80014fe:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001500:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8001502:	f006 fc41 	bl	8007d88 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8001506:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 800150a:	6820      	ldr	r0, [r4, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	f006 fc81 	bl	8007e14 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8001512:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001516:	6820      	ldr	r0, [r4, #0]
 8001518:	2219      	movs	r2, #25
 800151a:	f006 fc7b 	bl	8007e14 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 800151e:	4869      	ldr	r0, [pc, #420]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001520:	2113      	movs	r1, #19
 8001522:	f006 fdf5 	bl	8008110 <STM_NextState>
}
 8001526:	b003      	add	sp, #12
 8001528:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800152a:	4867      	ldr	r0, [pc, #412]	; (80016c8 <TSK_MediumFrequencyTaskM1+0x280>)
 800152c:	f007 fa86 	bl	8008a3c <RUC_Exec>
 8001530:	2800      	cmp	r0, #0
 8001532:	f000 80bd 	beq.w	80016b0 <TSK_MediumFrequencyTaskM1+0x268>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8001536:	4867      	ldr	r0, [pc, #412]	; (80016d4 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001538:	a901      	add	r1, sp, #4
 800153a:	f006 ffe1 	bl	8008500 <VSS_CalcAvrgMecSpeedUnit>
 800153e:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8001540:	4864      	ldr	r0, [pc, #400]	; (80016d4 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001542:	f007 f87b 	bl	800863c <VSS_TransitionEnded>
        if ( LoopClosed == true )
 8001546:	b90c      	cbnz	r4, 800154c <TSK_MediumFrequencyTaskM1+0x104>
 8001548:	2800      	cmp	r0, #0
 800154a:	d0ec      	beq.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800154c:	4a64      	ldr	r2, [pc, #400]	; (80016e0 <TSK_MediumFrequencyTaskM1+0x298>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 800154e:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <TSK_MediumFrequencyTaskM1+0x288>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8001550:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8001552:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8001556:	4620      	mov	r0, r4
 8001558:	f005 faaa 	bl	8006ab0 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800155c:	fb05 f100 	mul.w	r1, r5, r0
 8001560:	4620      	mov	r0, r4
 8001562:	f005 faa1 	bl	8006aa8 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8001566:	2105      	movs	r1, #5
 8001568:	4856      	ldr	r0, [pc, #344]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 800156a:	f006 fdd1 	bl	8008110 <STM_NextState>
    break;
 800156e:	e7da      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001570:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	f7ff fbfc 	bl	8000d70 <MCI_GetImposedMotorDirection>
 8001578:	4601      	mov	r1, r0
 800157a:	4853      	ldr	r0, [pc, #332]	; (80016c8 <TSK_MediumFrequencyTaskM1+0x280>)
 800157c:	f007 fa16 	bl	80089ac <RUC_Clear>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001580:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f005 fe7c 	bl	8007280 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001588:	2014      	movs	r0, #20
 800158a:	f7ff ff3d 	bl	8001408 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800158e:	2110      	movs	r1, #16
 8001590:	484c      	ldr	r0, [pc, #304]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001592:	f006 fdbd 	bl	8008110 <STM_NextState>
    break;
 8001596:	e7c6      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001598:	4c4c      	ldr	r4, [pc, #304]	; (80016cc <TSK_MediumFrequencyTaskM1+0x284>)
 800159a:	4948      	ldr	r1, [pc, #288]	; (80016bc <TSK_MediumFrequencyTaskM1+0x274>)
 800159c:	6820      	ldr	r0, [r4, #0]
 800159e:	f006 fcd5 	bl	8007f4c <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fee8 	bl	8001378 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff feef 	bl	800138c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80015ae:	2106      	movs	r1, #6
 80015b0:	4844      	ldr	r0, [pc, #272]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 80015b2:	f006 fdad 	bl	8008110 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80015b6:	6820      	ldr	r0, [r4, #0]
 80015b8:	f006 fd7e 	bl	80080b8 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <TSK_MediumFrequencyTaskM1+0x29c>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	f7ff fb94 	bl	8000cec <MCI_ExecBufferedCommands>
    break;
 80015c4:	e7af      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <TSK_MediumFrequencyTaskM1+0x29c>)
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	f7ff fb8f 	bl	8000cec <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fedc 	bl	800138c <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d1a6      	bne.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80015d8:	4622      	mov	r2, r4
 80015da:	2120      	movs	r1, #32
 80015dc:	4839      	ldr	r0, [pc, #228]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 80015de:	f006 fd79 	bl	80080d4 <STM_FaultProcessing>
 80015e2:	e7a0      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80015e4:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	f005 febc 	bl	8007364 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fd41 	bl	8001074 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80015f2:	6828      	ldr	r0, [r5, #0]
 80015f4:	f005 f9bc 	bl	8006970 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80015f8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80015fc:	f7ff ff14 	bl	8001428 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001600:	2108      	movs	r1, #8
 8001602:	4830      	ldr	r0, [pc, #192]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001604:	f006 fd84 	bl	8008110 <STM_NextState>
    break;
 8001608:	e78d      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800160a:	f7ff ff13 	bl	8001434 <TSK_StopPermanencyTimeHasElapsedM1>
 800160e:	2800      	cmp	r0, #0
 8001610:	d089      	beq.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001612:	2109      	movs	r1, #9
 8001614:	482b      	ldr	r0, [pc, #172]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001616:	f006 fd7b 	bl	8008110 <STM_NextState>
 800161a:	e784      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <TSK_MediumFrequencyTaskM1+0x284>)
 800161e:	492d      	ldr	r1, [pc, #180]	; (80016d4 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	f006 fc93 	bl	8007f4c <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8001626:	482b      	ldr	r0, [pc, #172]	; (80016d4 <TSK_MediumFrequencyTaskM1+0x28c>)
 8001628:	f006 ff08 	bl	800843c <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 800162c:	2100      	movs	r1, #0
 800162e:	4825      	ldr	r0, [pc, #148]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001630:	f006 fd6e 	bl	8008110 <STM_NextState>
}
 8001634:	e777      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001636:	f7ff feed 	bl	8001414 <TSK_ChargeBootCapDelayHasElapsedM1>
 800163a:	2800      	cmp	r0, #0
 800163c:	f43f af73 	beq.w	8001526 <TSK_MediumFrequencyTaskM1+0xde>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001642:	2100      	movs	r1, #0
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f005 fc3f 	bl	8006ec8 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 800164a:	2111      	movs	r1, #17
 800164c:	481d      	ldr	r0, [pc, #116]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 800164e:	f006 fd5f 	bl	8008110 <STM_NextState>
 8001652:	e768      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001656:	2101      	movs	r1, #1
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	f005 fc35 	bl	8006ec8 <PWMC_CurrentReadingCalibr>
 800165e:	2800      	cmp	r0, #0
 8001660:	f43f af61 	beq.w	8001526 <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], CLEAR );
 8001664:	2112      	movs	r1, #18
 8001666:	4817      	ldr	r0, [pc, #92]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001668:	f006 fd52 	bl	8008110 <STM_NextState>
 800166c:	e75b      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <TSK_MediumFrequencyTaskM1+0x284>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <TSK_MediumFrequencyTaskM1+0x288>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001672:	6810      	ldr	r0, [r2, #0]
 8001674:	4917      	ldr	r1, [pc, #92]	; (80016d4 <TSK_MediumFrequencyTaskM1+0x28c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800167c:	f006 fc66 	bl	8007f4c <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001680:	480e      	ldr	r0, [pc, #56]	; (80016bc <TSK_MediumFrequencyTaskM1+0x274>)
 8001682:	f007 fbff 	bl	8008e84 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001688:	2104      	movs	r1, #4
 800168a:	f006 fd41 	bl	8008110 <STM_NextState>
 800168e:	2800      	cmp	r0, #0
 8001690:	f43f af49 	beq.w	8001526 <TSK_MediumFrequencyTaskM1+0xde>
      FOC_Clear( M1 );
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fced 	bl	8001074 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f005 fe17 	bl	80072d0 <R3_2_SwitchOnPWM>
 80016a2:	e740      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80016a4:	4602      	mov	r2, r0
 80016a6:	2110      	movs	r1, #16
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 80016aa:	f006 fd13 	bl	80080d4 <STM_FaultProcessing>
 80016ae:	e701      	b.n	80014b4 <TSK_MediumFrequencyTaskM1+0x6c>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80016b0:	4602      	mov	r2, r0
 80016b2:	2110      	movs	r1, #16
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <TSK_MediumFrequencyTaskM1+0x27c>)
 80016b6:	f006 fd0d 	bl	80080d4 <STM_FaultProcessing>
 80016ba:	e734      	b.n	8001526 <TSK_MediumFrequencyTaskM1+0xde>
 80016bc:	20000418 	.word	0x20000418
 80016c0:	20000b58 	.word	0x20000b58
 80016c4:	20000b4c 	.word	0x20000b4c
 80016c8:	2000038c 	.word	0x2000038c
 80016cc:	20000b64 	.word	0x20000b64
 80016d0:	20000aac 	.word	0x20000aac
 80016d4:	2000059c 	.word	0x2000059c
 80016d8:	20000b30 	.word	0x20000b30
 80016dc:	20000b54 	.word	0x20000b54
 80016e0:	20000a9c 	.word	0x20000a9c
 80016e4:	20000aa4 	.word	0x20000aa4
 80016e8:	20000a98 	.word	0x20000a98

080016ec <MC_Scheduler>:
{
 80016ec:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MC_Scheduler+0x48>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d000      	beq.n	80016f8 <MC_Scheduler+0xc>
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80016f8:	4d0f      	ldr	r5, [pc, #60]	; (8001738 <MC_Scheduler+0x4c>)
 80016fa:	882c      	ldrh	r4, [r5, #0]
 80016fc:	b2a4      	uxth	r4, r4
 80016fe:	b1ac      	cbz	r4, 800172c <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001700:	882b      	ldrh	r3, [r5, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	b29b      	uxth	r3, r3
 8001706:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <MC_Scheduler+0x50>)
 800170a:	8813      	ldrh	r3, [r2, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	b11b      	cbz	r3, 8001718 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001710:	8813      	ldrh	r3, [r2, #0]
 8001712:	3b01      	subs	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001718:	4a09      	ldr	r2, [pc, #36]	; (8001740 <MC_Scheduler+0x54>)
 800171a:	8813      	ldrh	r3, [r2, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0e9      	beq.n	80016f6 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001722:	8813      	ldrh	r3, [r2, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	8013      	strh	r3, [r2, #0]
}
 800172a:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 800172c:	f7ff fe8c 	bl	8001448 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001730:	802c      	strh	r4, [r5, #0]
 8001732:	e7e9      	b.n	8001708 <MC_Scheduler+0x1c>
 8001734:	20000758 	.word	0x20000758
 8001738:	2000075c 	.word	0x2000075c
 800173c:	2000075a 	.word	0x2000075a
 8001740:	2000075e 	.word	0x2000075e

08001744 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 8001748:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <TSK_HighFrequencyTask+0x180>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800174a:	4c5f      	ldr	r4, [pc, #380]	; (80018c8 <TSK_HighFrequencyTask+0x184>)
  if ( STM[M1].bState == SWITCH_OVER )
 800174c:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800174e:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001752:	b088      	sub	sp, #32
  if ( STM[M1].bState == SWITCH_OVER )
 8001754:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001756:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 8001758:	f000 80a8 	beq.w	80018ac <TSK_HighFrequencyTask+0x168>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <TSK_HighFrequencyTask+0x188>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800175e:	4f5c      	ldr	r7, [pc, #368]	; (80018d0 <TSK_HighFrequencyTask+0x18c>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001760:	6818      	ldr	r0, [r3, #0]
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 8001762:	4e5c      	ldr	r6, [pc, #368]	; (80018d4 <TSK_HighFrequencyTask+0x190>)
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001764:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80018fc <TSK_HighFrequencyTask+0x1b8>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001768:	f006 fbf2 	bl	8007f50 <STC_GetSpeedSensor>
 800176c:	4681      	mov	r9, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800176e:	f006 fb93 	bl	8007e98 <SPD_GetElAngle>
 8001772:	4605      	mov	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001774:	4648      	mov	r0, r9
 8001776:	f006 fb9b 	bl	8007eb0 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800177a:	a902      	add	r1, sp, #8
 800177c:	6838      	ldr	r0, [r7, #0]
 800177e:	f005 fa77 	bl	8006c70 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001782:	f000 ff4b 	bl	800261c <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001786:	f000 feff 	bl	8002588 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800178a:	9802      	ldr	r0, [sp, #8]
 800178c:	f7ff fb96 	bl	8000ebc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001790:	4629      	mov	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001792:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001794:	f7ff fbd4 	bl	8000f40 <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001798:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800179c:	4a4e      	ldr	r2, [pc, #312]	; (80018d8 <TSK_HighFrequencyTask+0x194>)
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800179e:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80017a0:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 80017a2:	1ac9      	subs	r1, r1, r3
 80017a4:	6810      	ldr	r0, [r2, #0]
 80017a6:	f005 f98f 	bl	8006ac8 <PI_Controller>
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80017aa:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <TSK_HighFrequencyTask+0x198>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80017b0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80017b4:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80017b6:	1a89      	subs	r1, r1, r2
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	f005 f985 	bl	8006ac8 <PI_Controller>
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 80017be:	f8ad a004 	strh.w	sl, [sp, #4]
 80017c2:	f8ad 0006 	strh.w	r0, [sp, #6]
 80017c6:	9901      	ldr	r1, [sp, #4]
 80017c8:	6830      	ldr	r0, [r6, #0]
 80017ca:	f006 ffa5 	bl	8008718 <FF_VqdConditioning>
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80017ce:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <TSK_HighFrequencyTask+0x19c>)
  Vqd = FF_VqdConditioning(pFF[M1],Vqd);
 80017d0:	4601      	mov	r1, r0
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	f005 f870 	bl	80068b8 <Circle_Limitation>
 80017d8:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80017da:	4648      	mov	r0, r9
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80017dc:	fa0f fa83 	sxth.w	sl, r3
 80017e0:	ea4f 4923 	mov.w	r9, r3, asr #16
 80017e4:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80017e6:	f006 fb63 	bl	8007eb0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80017ea:	4629      	mov	r1, r5
 80017ec:	9801      	ldr	r0, [sp, #4]
 80017ee:	f7ff fbe9 	bl	8000fc4 <MCM_Rev_Park>
 80017f2:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80017f4:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80017f6:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80017f8:	f005 fa3c 	bl	8006c74 <PWMC_SetPhaseVoltage>
 80017fc:	4603      	mov	r3, r0
  FOCVars[M1].Iab = Iab;
 80017fe:	9802      	ldr	r0, [sp, #8]
 8001800:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001802:	9803      	ldr	r0, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
  FOCVars[M1].hElAngle = hElAngle;
  FW_DataProcess(pFW[M1], Vqd);
 8001804:	4a37      	ldr	r2, [pc, #220]	; (80018e4 <TSK_HighFrequencyTask+0x1a0>)
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001806:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001808:	9800      	ldr	r0, [sp, #0]
 800180a:	60e0      	str	r0, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 800180c:	9804      	ldr	r0, [sp, #16]
 800180e:	f8c4 001a 	str.w	r0, [r4, #26]
  FW_DataProcess(pFW[M1], Vqd);
 8001812:	9901      	ldr	r1, [sp, #4]
 8001814:	6810      	ldr	r0, [r2, #0]
  FOCVars[M1].Vqd = Vqd;
 8001816:	f8a4 a016 	strh.w	sl, [r4, #22]
 800181a:	f8a4 9018 	strh.w	r9, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 800181e:	8425      	strh	r5, [r4, #32]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001820:	461c      	mov	r4, r3
  FW_DataProcess(pFW[M1], Vqd);
 8001822:	f007 f85f 	bl	80088e4 <FW_DataProcess>
  FF_DataProcess(pFF[M1]);
 8001826:	6830      	ldr	r0, [r6, #0]
 8001828:	f006 ff9e 	bl	8008768 <FF_DataProcess>
  if(hFOCreturn == MC_FOC_DURATION)
 800182c:	2c01      	cmp	r4, #1
 800182e:	d034      	beq.n	800189a <TSK_HighFrequencyTask+0x156>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001830:	482d      	ldr	r0, [pc, #180]	; (80018e8 <TSK_HighFrequencyTask+0x1a4>)
 8001832:	f007 f93d 	bl	8008ab0 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <TSK_HighFrequencyTask+0x1a8>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001838:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 800183a:	f8d8 0000 	ldr.w	r0, [r8]
 800183e:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	f005 f831 	bl	80068a8 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001846:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8001848:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800184a:	4829      	ldr	r0, [pc, #164]	; (80018f0 <TSK_HighFrequencyTask+0x1ac>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 800184c:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8001850:	f007 f964 	bl	8008b1c <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001854:	4826      	ldr	r0, [pc, #152]	; (80018f0 <TSK_HighFrequencyTask+0x1ac>)
 8001856:	f007 faeb 	bl	8008e30 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800185a:	b164      	cbz	r4, 8001876 <TSK_HighFrequencyTask+0x132>
    hState = STM_GetState(&STM[M1]);
 800185c:	4819      	ldr	r0, [pc, #100]	; (80018c4 <TSK_HighFrequencyTask+0x180>)
 800185e:	f006 fccb 	bl	80081f8 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001862:	1f03      	subs	r3, r0, #4
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d909      	bls.n	800187e <TSK_HighFrequencyTask+0x13a>
 800186a:	2813      	cmp	r0, #19
 800186c:	d007      	beq.n	800187e <TSK_HighFrequencyTask+0x13a>
}
 800186e:	2000      	movs	r0, #0
 8001870:	b008      	add	sp, #32
 8001872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001876:	481e      	ldr	r0, [pc, #120]	; (80018f0 <TSK_HighFrequencyTask+0x1ac>)
 8001878:	f007 fc0e 	bl	8009098 <STO_ResetPLL>
 800187c:	e7ee      	b.n	800185c <TSK_HighFrequencyTask+0x118>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800187e:	481c      	ldr	r0, [pc, #112]	; (80018f0 <TSK_HighFrequencyTask+0x1ac>)
 8001880:	f006 fb0a 	bl	8007e98 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001884:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001886:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001888:	481a      	ldr	r0, [pc, #104]	; (80018f4 <TSK_HighFrequencyTask+0x1b0>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800188a:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 800188e:	f006 fde7 	bl	8008460 <VSS_CalcElAngle>
}
 8001892:	2000      	movs	r0, #0
 8001894:	b008      	add	sp, #32
 8001896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 800189a:	4621      	mov	r1, r4
 800189c:	2200      	movs	r2, #0
 800189e:	4809      	ldr	r0, [pc, #36]	; (80018c4 <TSK_HighFrequencyTask+0x180>)
 80018a0:	f006 fc18 	bl	80080d4 <STM_FaultProcessing>
}
 80018a4:	2000      	movs	r0, #0
 80018a6:	b008      	add	sp, #32
 80018a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80018ac:	4d12      	ldr	r5, [pc, #72]	; (80018f8 <TSK_HighFrequencyTask+0x1b4>)
 80018ae:	6828      	ldr	r0, [r5, #0]
 80018b0:	f006 fa94 	bl	8007ddc <REMNG_RampCompleted>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	f47f af51 	bne.w	800175c <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 80018ba:	6828      	ldr	r0, [r5, #0]
 80018bc:	f006 fa6c 	bl	8007d98 <REMNG_Calc>
 80018c0:	8220      	strh	r0, [r4, #16]
 80018c2:	e74b      	b.n	800175c <TSK_HighFrequencyTask+0x18>
 80018c4:	20000b4c 	.word	0x20000b4c
 80018c8:	20000aac 	.word	0x20000aac
 80018cc:	20000b64 	.word	0x20000b64
 80018d0:	20000a98 	.word	0x20000a98
 80018d4:	20000a90 	.word	0x20000a90
 80018d8:	20000aa0 	.word	0x20000aa0
 80018dc:	20000b60 	.word	0x20000b60
 80018e0:	20000b28 	.word	0x20000b28
 80018e4:	20000b5c 	.word	0x20000b5c
 80018e8:	2000038c 	.word	0x2000038c
 80018ec:	20000b2c 	.word	0x20000b2c
 80018f0:	20000418 	.word	0x20000418
 80018f4:	2000059c 	.word	0x2000059c
 80018f8:	20000b54 	.word	0x20000b54
 80018fc:	20000ab0 	.word	0x20000ab0

08001900 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001904:	4e20      	ldr	r6, [pc, #128]	; (8001988 <TSK_SafetyTask_PWMOFF+0x88>)
{
 8001906:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001908:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800190c:	f005 f886 	bl	8006a1c <NTC_CalcAvTemp>
 8001910:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001912:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001916:	f005 fb01 	bl	8006f1c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800191a:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800191e:	4328      	orrs	r0, r5
 8001920:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8001922:	b334      	cbz	r4, 8001972 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001924:	4f19      	ldr	r7, [pc, #100]	; (800198c <TSK_SafetyTask_PWMOFF+0x8c>)
 8001926:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800192a:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800192e:	43ea      	mvns	r2, r5
 8001930:	b292      	uxth	r2, r2
 8001932:	4629      	mov	r1, r5
 8001934:	4638      	mov	r0, r7
 8001936:	f006 fbcd 	bl	80080d4 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 800193a:	4638      	mov	r0, r7
 800193c:	f006 fc5c 	bl	80081f8 <STM_GetState>
 8001940:	280a      	cmp	r0, #10
 8001942:	d002      	beq.n	800194a <TSK_SafetyTask_PWMOFF+0x4a>
 8001944:	280b      	cmp	r0, #11
 8001946:	d00e      	beq.n	8001966 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800194a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800194e:	f005 fab9 	bl	8006ec4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff fb8e 	bl	8001074 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <TSK_SafetyTask_PWMOFF+0x90>)
 800195a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800195e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001962:	f005 b805 	b.w	8006970 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001966:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 800196a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800196e:	f005 baa9 	b.w	8006ec4 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <TSK_SafetyTask_PWMOFF+0x94>)
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	f006 f9d1 	bl	8007d1c <RVBS_CalcAvVbus>
 800197a:	f000 000e 	and.w	r0, r0, #14
 800197e:	4305      	orrs	r5, r0
 8001980:	e7d0      	b.n	8001924 <TSK_SafetyTask_PWMOFF+0x24>
 8001982:	bf00      	nop
 8001984:	20000a94 	.word	0x20000a94
 8001988:	20000a98 	.word	0x20000a98
 800198c:	20000b4c 	.word	0x20000b4c
 8001990:	20000b58 	.word	0x20000b58
 8001994:	20000b2c 	.word	0x20000b2c

08001998 <TSK_SafetyTask>:
{
 8001998:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <TSK_SafetyTask+0x1c>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d000      	beq.n	80019a4 <TSK_SafetyTask+0xc>
}
 80019a2:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff ffab 	bl	8001900 <TSK_SafetyTask_PWMOFF>
}
 80019aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80019ae:	f000 bdbb 	b.w	8002528 <RCM_ExecUserConv>
 80019b2:	bf00      	nop
 80019b4:	20000758 	.word	0x20000758

080019b8 <MC_RunMotorControlTasks>:
{
 80019b8:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MC_RunMotorControlTasks+0x1c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b903      	cbnz	r3, 80019c2 <MC_RunMotorControlTasks+0xa>
}
 80019c0:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80019c2:	f7ff fe93 	bl	80016ec <MC_Scheduler>
    TSK_SafetyTask();
 80019c6:	f7ff ffe7 	bl	8001998 <TSK_SafetyTask>
}
 80019ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 80019ce:	f001 b981 	b.w	8002cd4 <UI_Scheduler>
 80019d2:	bf00      	nop
 80019d4:	20000758 	.word	0x20000758

080019d8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80019d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <TSK_HardwareFaultTask+0x18>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f005 fcc1 	bl	8007364 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80019e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <TSK_HardwareFaultTask+0x1c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	2180      	movs	r1, #128	; 0x80
 80019ec:	f006 bb72 	b.w	80080d4 <STM_FaultProcessing>
 80019f0:	20000a98 	.word	0x20000a98
 80019f4:	20000b4c 	.word	0x20000b4c

080019f8 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80019f8:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80019fa:	4a4e      	ldr	r2, [pc, #312]	; (8001b34 <mc_lock_pins+0x13c>)
 80019fc:	494e      	ldr	r1, [pc, #312]	; (8001b38 <mc_lock_pins+0x140>)
 80019fe:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a00:	2504      	movs	r5, #4
 8001a02:	b092      	sub	sp, #72	; 0x48
 8001a04:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a06:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001a08:	69d3      	ldr	r3, [r2, #28]
 8001a0a:	9311      	str	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a0c:	484b      	ldr	r0, [pc, #300]	; (8001b3c <mc_lock_pins+0x144>)
  (void) temp;
 8001a0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a10:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a12:	2602      	movs	r6, #2
 8001a14:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a16:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a18:	69d3      	ldr	r3, [r2, #28]
 8001a1a:	9310      	str	r3, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a1c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a20:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
  (void) temp;
 8001a24:	9f10      	ldr	r7, [sp, #64]	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a26:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a28:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a2a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a2c:	69d3      	ldr	r3, [r2, #28]
 8001a2e:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a34:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a38:	2701      	movs	r7, #1
  (void) temp;
 8001a3a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a3e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a40:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a42:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a44:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8001a48:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  (void) temp;
 8001a4c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a50:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a52:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a54:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a56:	69d4      	ldr	r4, [r2, #28]
 8001a58:	940d      	str	r4, [sp, #52]	; 0x34
  (void) temp;
 8001a5a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a5c:	4c38      	ldr	r4, [pc, #224]	; (8001b40 <mc_lock_pins+0x148>)
 8001a5e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a60:	2780      	movs	r7, #128	; 0x80
 8001a62:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a64:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a66:	69dc      	ldr	r4, [r3, #28]
 8001a68:	940c      	str	r4, [sp, #48]	; 0x30
  (void) temp;
 8001a6a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a6c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a6e:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a70:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a72:	69d8      	ldr	r0, [r3, #28]
 8001a74:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 8001a76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a78:	4832      	ldr	r0, [pc, #200]	; (8001b44 <mc_lock_pins+0x14c>)
 8001a7a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a7c:	2408      	movs	r4, #8
 8001a7e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a80:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a82:	69d8      	ldr	r0, [r3, #28]
 8001a84:	900a      	str	r0, [sp, #40]	; 0x28
  (void) temp;
 8001a86:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a88:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a8a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a8c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a8e:	69d9      	ldr	r1, [r3, #28]
 8001a90:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 8001a92:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a94:	492c      	ldr	r1, [pc, #176]	; (8001b48 <mc_lock_pins+0x150>)
 8001a96:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001a98:	2040      	movs	r0, #64	; 0x40
 8001a9a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001a9c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001a9e:	69d9      	ldr	r1, [r3, #28]
 8001aa0:	9108      	str	r1, [sp, #32]
  (void) temp;
 8001aa2:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aa4:	4929      	ldr	r1, [pc, #164]	; (8001b4c <mc_lock_pins+0x154>)
 8001aa6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aa8:	2020      	movs	r0, #32
 8001aaa:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001aac:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001aae:	69d9      	ldr	r1, [r3, #28]
 8001ab0:	9107      	str	r1, [sp, #28]
  (void) temp;
 8001ab2:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ab4:	4926      	ldr	r1, [pc, #152]	; (8001b50 <mc_lock_pins+0x158>)
 8001ab6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ab8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001abc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001abe:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ac0:	69d9      	ldr	r1, [r3, #28]
 8001ac2:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ac4:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ac8:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 8001acc:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ace:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ad0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ad2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ad4:	69d9      	ldr	r1, [r3, #28]
 8001ad6:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ad8:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001adc:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 8001ae0:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ae2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ae4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ae6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ae8:	69d9      	ldr	r1, [r3, #28]
 8001aea:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001aec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001af0:	f44f 3188 	mov.w	r1, #69632	; 0x11000
  (void) temp;
 8001af4:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001af6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001af8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001afa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b04:	f44f 33c0 	mov.w	r3, #98304	; 0x18000
  (void) temp;
 8001b08:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b0a:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b0c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b0e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b10:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <mc_lock_pins+0x15c>)
  temp = READ_REG(GPIOx->LCKR);
 8001b14:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b1a:	f44f 3290 	mov.w	r2, #73728	; 0x12000
  (void) temp;
 8001b1e:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b20:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001b22:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001b24:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001b2a:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001b2c:	b012      	add	sp, #72	; 0x48
 8001b2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	48000400 	.word	0x48000400
 8001b38:	00010004 	.word	0x00010004
 8001b3c:	00010002 	.word	0x00010002
 8001b40:	00010080 	.word	0x00010080
 8001b44:	00010008 	.word	0x00010008
 8001b48:	00010040 	.word	0x00010040
 8001b4c:	00010020 	.word	0x00010020
 8001b50:	00010100 	.word	0x00010100
 8001b54:	48000800 	.word	0x48000800

08001b58 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001b5e:	2100      	movs	r1, #0
{
 8001b60:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001b62:	0962      	lsrs	r2, r4, #5
{
 8001b64:	461f      	mov	r7, r3
 8001b66:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 8001b68:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001b6c:	d122      	bne.n	8001bb4 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001b6e:	2c12      	cmp	r4, #18
 8001b70:	d814      	bhi.n	8001b9c <MCP_ReceivedFrame+0x44>
 8001b72:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001b76:	0016      	.short	0x0016
 8001b78:	00d1003f 	.word	0x00d1003f
 8001b7c:	00130163 	.word	0x00130163
 8001b80:	01700013 	.word	0x01700013
 8001b84:	01f80241 	.word	0x01f80241
 8001b88:	019d021c 	.word	0x019d021c
 8001b8c:	01cc01b5 	.word	0x01cc01b5
 8001b90:	001301e5 	.word	0x001301e5
 8001b94:	00130013 	.word	0x00130013
 8001b98:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001ba2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f10d 020e 	add.w	r2, sp, #14
 8001bac:	21ff      	movs	r1, #255	; 0xff
 8001bae:	47a0      	blx	r4
    }
  }
}
 8001bb0:	b00d      	add	sp, #52	; 0x34
 8001bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001bb4:	3a01      	subs	r2, #1
 8001bb6:	f001 f8db 	bl	8002d70 <UI_SetReg>
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	f000 8234 	beq.w	8002028 <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 8001bc0:	f004 041f 	and.w	r4, r4, #31
 8001bc4:	2c12      	cmp	r4, #18
 8001bc6:	f200 8238 	bhi.w	800203a <MCP_ReceivedFrame+0x4e2>
 8001bca:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001bce:	01ea      	.short	0x01ea
 8001bd0:	00a50013 	.word	0x00a50013
 8001bd4:	02360137 	.word	0x02360137
 8001bd8:	01440236 	.word	0x01440236
 8001bdc:	01cc0215 	.word	0x01cc0215
 8001be0:	017101f0 	.word	0x017101f0
 8001be4:	01a00189 	.word	0x01a00189
 8001be8:	023601b9 	.word	0x023601b9
 8001bec:	02360236 	.word	0x02360236
 8001bf0:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001bf4:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001bfc:	2988      	cmp	r1, #136	; 0x88
 8001bfe:	f200 8237 	bhi.w	8002070 <MCP_ReceivedFrame+0x518>
 8001c02:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001c06:	028c      	.short	0x028c
 8001c08:	02350235 	.word	0x02350235
 8001c0c:	02350282 	.word	0x02350282
 8001c10:	023e023e 	.word	0x023e023e
 8001c14:	023e023e 	.word	0x023e023e
 8001c18:	023e023e 	.word	0x023e023e
 8001c1c:	023e023e 	.word	0x023e023e
 8001c20:	023e023e 	.word	0x023e023e
 8001c24:	025d023e 	.word	0x025d023e
 8001c28:	0235025d 	.word	0x0235025d
 8001c2c:	023e0235 	.word	0x023e0235
 8001c30:	023e023e 	.word	0x023e023e
 8001c34:	023e023e 	.word	0x023e023e
 8001c38:	02350235 	.word	0x02350235
 8001c3c:	01510235 	.word	0x01510235
 8001c40:	02350151 	.word	0x02350151
 8001c44:	02350235 	.word	0x02350235
 8001c48:	02350235 	.word	0x02350235
 8001c4c:	02350235 	.word	0x02350235
 8001c50:	02350235 	.word	0x02350235
 8001c54:	02350235 	.word	0x02350235
 8001c58:	02350235 	.word	0x02350235
 8001c5c:	02350235 	.word	0x02350235
 8001c60:	02350235 	.word	0x02350235
 8001c64:	02350235 	.word	0x02350235
 8001c68:	02350235 	.word	0x02350235
 8001c6c:	02350235 	.word	0x02350235
 8001c70:	02350235 	.word	0x02350235
 8001c74:	02350235 	.word	0x02350235
 8001c78:	02350235 	.word	0x02350235
 8001c7c:	02350235 	.word	0x02350235
 8001c80:	02350235 	.word	0x02350235
 8001c84:	02350235 	.word	0x02350235
 8001c88:	0235023e 	.word	0x0235023e
 8001c8c:	02350235 	.word	0x02350235
 8001c90:	025d0235 	.word	0x025d0235
 8001c94:	025d025d 	.word	0x025d025d
 8001c98:	02350235 	.word	0x02350235
 8001c9c:	02350235 	.word	0x02350235
 8001ca0:	02350235 	.word	0x02350235
 8001ca4:	0235023e 	.word	0x0235023e
 8001ca8:	02350235 	.word	0x02350235
 8001cac:	023e023e 	.word	0x023e023e
 8001cb0:	023e023e 	.word	0x023e023e
 8001cb4:	023e023e 	.word	0x023e023e
 8001cb8:	0235023e 	.word	0x0235023e
 8001cbc:	0235025d 	.word	0x0235025d
 8001cc0:	02350235 	.word	0x02350235
 8001cc4:	02350235 	.word	0x02350235
 8001cc8:	0235023e 	.word	0x0235023e
 8001ccc:	023e0235 	.word	0x023e0235
 8001cd0:	0235023e 	.word	0x0235023e
 8001cd4:	02350235 	.word	0x02350235
 8001cd8:	02350235 	.word	0x02350235
 8001cdc:	02350235 	.word	0x02350235
 8001ce0:	02350235 	.word	0x02350235
 8001ce4:	02350235 	.word	0x02350235
 8001ce8:	02350235 	.word	0x02350235
 8001cec:	02820235 	.word	0x02820235
 8001cf0:	025d025d 	.word	0x025d025d
 8001cf4:	025d025d 	.word	0x025d025d
 8001cf8:	0235025d 	.word	0x0235025d
 8001cfc:	02350235 	.word	0x02350235
 8001d00:	025d025d 	.word	0x025d025d
 8001d04:	02350235 	.word	0x02350235
 8001d08:	02350235 	.word	0x02350235
 8001d0c:	02350235 	.word	0x02350235
 8001d10:	023e0235 	.word	0x023e0235
 8001d14:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001d18:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001d20:	2988      	cmp	r1, #136	; 0x88
 8001d22:	f200 813e 	bhi.w	8001fa2 <MCP_ReceivedFrame+0x44a>
 8001d26:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001d2a:	01de      	.short	0x01de
 8001d2c:	01de01b9 	.word	0x01de01b9
 8001d30:	01b901de 	.word	0x01b901de
 8001d34:	01910191 	.word	0x01910191
 8001d38:	01910191 	.word	0x01910191
 8001d3c:	01910191 	.word	0x01910191
 8001d40:	01910191 	.word	0x01910191
 8001d44:	01910191 	.word	0x01910191
 8001d48:	01910191 	.word	0x01910191
 8001d4c:	01910191 	.word	0x01910191
 8001d50:	01910191 	.word	0x01910191
 8001d54:	01910191 	.word	0x01910191
 8001d58:	01910191 	.word	0x01910191
 8001d5c:	01910191 	.word	0x01910191
 8001d60:	013c0191 	.word	0x013c0191
 8001d64:	01b9013c 	.word	0x01b9013c
 8001d68:	01910191 	.word	0x01910191
 8001d6c:	01de0191 	.word	0x01de0191
 8001d70:	013c013c 	.word	0x013c013c
 8001d74:	013c013c 	.word	0x013c013c
 8001d78:	013c013c 	.word	0x013c013c
 8001d7c:	013c013c 	.word	0x013c013c
 8001d80:	013c013c 	.word	0x013c013c
 8001d84:	013c013c 	.word	0x013c013c
 8001d88:	013c013c 	.word	0x013c013c
 8001d8c:	013c013c 	.word	0x013c013c
 8001d90:	013c013c 	.word	0x013c013c
 8001d94:	013c013c 	.word	0x013c013c
 8001d98:	013c013c 	.word	0x013c013c
 8001d9c:	013c013c 	.word	0x013c013c
 8001da0:	013c013c 	.word	0x013c013c
 8001da4:	013c013c 	.word	0x013c013c
 8001da8:	013c013c 	.word	0x013c013c
 8001dac:	013c0191 	.word	0x013c0191
 8001db0:	013c013c 	.word	0x013c013c
 8001db4:	01b9013c 	.word	0x01b9013c
 8001db8:	01b901b9 	.word	0x01b901b9
 8001dbc:	01910191 	.word	0x01910191
 8001dc0:	01910191 	.word	0x01910191
 8001dc4:	01b901de 	.word	0x01b901de
 8001dc8:	01910191 	.word	0x01910191
 8001dcc:	01910191 	.word	0x01910191
 8001dd0:	01910191 	.word	0x01910191
 8001dd4:	01910191 	.word	0x01910191
 8001dd8:	01910191 	.word	0x01910191
 8001ddc:	01de0191 	.word	0x01de0191
 8001de0:	013c01b9 	.word	0x013c01b9
 8001de4:	01910191 	.word	0x01910191
 8001de8:	01910191 	.word	0x01910191
 8001dec:	013c0191 	.word	0x013c0191
 8001df0:	0191013c 	.word	0x0191013c
 8001df4:	01de0191 	.word	0x01de0191
 8001df8:	01b901de 	.word	0x01b901de
 8001dfc:	01b901b9 	.word	0x01b901b9
 8001e00:	01b901b9 	.word	0x01b901b9
 8001e04:	019101de 	.word	0x019101de
 8001e08:	01b90191 	.word	0x01b90191
 8001e0c:	0191013c 	.word	0x0191013c
 8001e10:	01de0191 	.word	0x01de0191
 8001e14:	01b901b9 	.word	0x01b901b9
 8001e18:	01b901b9 	.word	0x01b901b9
 8001e1c:	01b901b9 	.word	0x01b901b9
 8001e20:	01b901b9 	.word	0x01b901b9
 8001e24:	01b901b9 	.word	0x01b901b9
 8001e28:	01de01b9 	.word	0x01de01b9
 8001e2c:	01de013c 	.word	0x01de013c
 8001e30:	01b901b9 	.word	0x01b901b9
 8001e34:	019101b9 	.word	0x019101b9
 8001e38:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001e3c:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001e3e:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001e40:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001e44:	4628      	mov	r0, r5
 8001e46:	f001 fc67 	bl	8003718 <UI_ExecCmd>
 8001e4a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	f43f aea7 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8001e54:	e03c      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
 8001e56:	ac04      	add	r4, sp, #16
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	f007 f95f 	bl	8009120 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001e62:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8001e66:	f10d 0012 	add.w	r0, sp, #18
 8001e6a:	1e71      	subs	r1, r6, #1
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e005      	b.n	8001e7c <MCP_ReceivedFrame+0x324>
 8001e70:	3301      	adds	r3, #1
 8001e72:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001e74:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001e78:	f000 815c 	beq.w	8002134 <MCP_ReceivedFrame+0x5dc>
 8001e7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001e80:	2a09      	cmp	r2, #9
 8001e82:	d1f5      	bne.n	8001e70 <MCP_ReceivedFrame+0x318>
 8001e84:	1d5a      	adds	r2, r3, #5
 8001e86:	1dd9      	adds	r1, r3, #7
 8001e88:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001e8a:	5cb2      	ldrb	r2, [r6, r2]
 8001e8c:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001e90:	5c72      	ldrb	r2, [r6, r1]
 8001e92:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001e96:	5cf3      	ldrb	r3, [r6, r3]
 8001e98:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001e9c:	4622      	mov	r2, r4
 8001e9e:	2320      	movs	r3, #32
 8001ea0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ea4:	21f0      	movs	r1, #240	; 0xf0
 8001ea6:	47a0      	blx	r4
      bNoError = true;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001eae:	e00f      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001eb0:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001eb2:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001eb4:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001eb6:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001eb8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001ebc:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001ec0:	b212      	sxth	r2, r2
 8001ec2:	b209      	sxth	r1, r1
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f001 fcb9 	bl	800383c <UI_SetCurrentReferences>
      bNoError = true;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	21f0      	movs	r1, #240	; 0xf0
 8001eda:	47a0      	blx	r4
}
 8001edc:	b00d      	add	sp, #52	; 0x34
 8001ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ee0:	4c96      	ldr	r4, [pc, #600]	; (800213c <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 8001ee2:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001ee4:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001eea:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001eee:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001ef2:	f001 fcb3 	bl	800385c <UI_GetMPInfo>
 8001ef6:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001efa:	2800      	cmp	r0, #0
 8001efc:	f43f ae51 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001f00:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 8001f04:	7923      	ldrb	r3, [r4, #4]
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	21f0      	movs	r1, #240	; 0xf0
 8001f0a:	47b0      	blx	r6
  if (RequireAck)
 8001f0c:	e650      	b.n	8001bb0 <MCP_ReceivedFrame+0x58>
 8001f0e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001f12:	ac04      	add	r4, sp, #16
 8001f14:	3b01      	subs	r3, #1
 8001f16:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001f18:	2000      	movs	r0, #0
 8001f1a:	e004      	b.n	8001f26 <MCP_ReceivedFrame+0x3ce>
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001f20:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001f24:	d0ba      	beq.n	8001e9c <MCP_ReceivedFrame+0x344>
 8001f26:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001f2a:	b2c6      	uxtb	r6, r0
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	d1f5      	bne.n	8001f1c <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 8001f30:	f1c6 021f 	rsb	r2, r6, #31
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	3201      	adds	r2, #1
 8001f38:	4420      	add	r0, r4
 8001f3a:	f007 f8f1 	bl	8009120 <memset>
 8001f3e:	e7ad      	b.n	8001e9c <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001f40:	7970      	ldrb	r0, [r6, #5]
 8001f42:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f44:	7873      	ldrb	r3, [r6, #1]
 8001f46:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001f48:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f4c:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001f50:	b292      	uxth	r2, r2
 8001f52:	b209      	sxth	r1, r1
 8001f54:	4628      	mov	r0, r5
 8001f56:	f001 fc2d 	bl	80037b4 <UI_ExecTorqueRamp>
 8001f5a:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	f43f ae1f 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8001f64:	e7b4      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001f66:	f10d 030e 	add.w	r3, sp, #14
 8001f6a:	7831      	ldrb	r1, [r6, #0]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	f10d 020a 	add.w	r2, sp, #10
 8001f72:	ab03      	add	r3, sp, #12
 8001f74:	4628      	mov	r0, r5
 8001f76:	f001 fc27 	bl	80037c8 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001f7a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001f7e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001f82:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001f86:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001f8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001f8e:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001f90:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 8001f92:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001f96:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	aa04      	add	r2, sp, #16
 8001f9e:	21f0      	movs	r1, #240	; 0xf0
 8001fa0:	47a0      	blx	r4
  if (RequireAck)
 8001fa2:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	f43f adfb 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8001fac:	e790      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001fae:	78b1      	ldrb	r1, [r6, #2]
 8001fb0:	7873      	ldrb	r3, [r6, #1]
 8001fb2:	78f2      	ldrb	r2, [r6, #3]
 8001fb4:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001fb6:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001fb8:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001fba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001fbe:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001fc2:	4a5f      	ldr	r2, [pc, #380]	; (8002140 <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001fc4:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001fc6:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001fca:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001fce:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001fd0:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001fd4:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001fd8:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001fda:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001fde:	7831      	ldrb	r1, [r6, #0]
 8001fe0:	9000      	str	r0, [sp, #0]
 8001fe2:	b21b      	sxth	r3, r3
 8001fe4:	b292      	uxth	r2, r2
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f001 fc0c 	bl	8003804 <UI_SetRevupData>
 8001fec:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	f43f add6 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8001ff6:	e76b      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ff8:	7877      	ldrb	r7, [r6, #1]
 8001ffa:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001ffc:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001ffe:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002000:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002002:	78f1      	ldrb	r1, [r6, #3]
 8002004:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8002008:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800200c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002010:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8002014:	b292      	uxth	r2, r2
 8002016:	4628      	mov	r0, r5
 8002018:	f001 fbba 	bl	8003790 <UI_ExecSpeedRamp>
 800201c:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002020:	2800      	cmp	r0, #0
 8002022:	f43f adbe 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8002026:	e753      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002028:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800202c:	230b      	movs	r3, #11
 800202e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002032:	2800      	cmp	r0, #0
 8002034:	f43f adb5 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8002038:	e74a      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
 800203a:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 800203e:	2301      	movs	r3, #1
 8002040:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8002044:	2800      	cmp	r0, #0
 8002046:	f43f adac 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 800204a:	e741      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800204c:	f10d 0209 	add.w	r2, sp, #9
 8002050:	4628      	mov	r0, r5
 8002052:	f001 f835 	bl	80030c0 <UI_GetReg>
          if ( bNoError == true )
 8002056:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800205a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800205c:	2b00      	cmp	r3, #0
 800205e:	f43f ada0 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002062:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002066:	2302      	movs	r3, #2
 8002068:	aa04      	add	r2, sp, #16
 800206a:	21f0      	movs	r1, #240	; 0xf0
 800206c:	47a0      	blx	r4
  if (RequireAck)
 800206e:	e59f      	b.n	8001bb0 <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002070:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002074:	2302      	movs	r3, #2
 8002076:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 800207a:	2800      	cmp	r0, #0
 800207c:	f43f ad91 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8002080:	e726      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8002082:	78b2      	ldrb	r2, [r6, #2]
 8002084:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002086:	4628      	mov	r0, r5
 8002088:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 800208c:	f000 fe70 	bl	8002d70 <UI_SetReg>
 8002090:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002094:	2800      	cmp	r0, #0
 8002096:	f43f ad84 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 800209a:	e719      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 800209c:	f10d 0209 	add.w	r2, sp, #9
 80020a0:	4628      	mov	r0, r5
 80020a2:	f001 f80d 	bl	80030c0 <UI_GetReg>
          if ( bNoError == true )
 80020a6:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80020aa:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f43f ad78 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80020b2:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80020b6:	2304      	movs	r3, #4
 80020b8:	aa04      	add	r2, sp, #16
 80020ba:	21f0      	movs	r1, #240	; 0xf0
 80020bc:	47a0      	blx	r4
  if (RequireAck)
 80020be:	e577      	b.n	8001bb0 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80020c0:	78b4      	ldrb	r4, [r6, #2]
 80020c2:	7873      	ldrb	r3, [r6, #1]
 80020c4:	78f0      	ldrb	r0, [r6, #3]
 80020c6:	7932      	ldrb	r2, [r6, #4]
 80020c8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 80020cc:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80020d0:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 fe4b 	bl	8002d70 <UI_SetReg>
 80020da:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80020de:	2800      	cmp	r0, #0
 80020e0:	f43f ad5f 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 80020e4:	e6f4      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80020e6:	f10d 0209 	add.w	r2, sp, #9
 80020ea:	4628      	mov	r0, r5
 80020ec:	f000 ffe8 	bl	80030c0 <UI_GetReg>
           if ( bNoError == true )
 80020f0:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 80020f4:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f43f ad53 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 80020fc:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8002100:	2301      	movs	r3, #1
 8002102:	aa04      	add	r2, sp, #16
 8002104:	21f0      	movs	r1, #240	; 0xf0
 8002106:	47a0      	blx	r4
  if (RequireAck)
 8002108:	e552      	b.n	8001bb0 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800210a:	7872      	ldrb	r2, [r6, #1]
 800210c:	4628      	mov	r0, r5
 800210e:	f000 fe2f 	bl	8002d70 <UI_SetReg>
 8002112:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8002116:	2800      	cmp	r0, #0
 8002118:	f43f ad43 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 800211c:	e6d8      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800211e:	7872      	ldrb	r2, [r6, #1]
 8002120:	2100      	movs	r1, #0
 8002122:	4628      	mov	r0, r5
 8002124:	f000 fe24 	bl	8002d70 <UI_SetReg>
 8002128:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 800212c:	2800      	cmp	r0, #0
 800212e:	f43f ad38 	beq.w	8001ba2 <MCP_ReceivedFrame+0x4a>
 8002132:	e6cd      	b.n	8001ed0 <MCP_ReceivedFrame+0x378>
 8002134:	2326      	movs	r3, #38	; 0x26
 8002136:	2124      	movs	r1, #36	; 0x24
 8002138:	2222      	movs	r2, #34	; 0x22
 800213a:	e6a6      	b.n	8001e8a <MCP_ReceivedFrame+0x332>
 800213c:	20000760 	.word	0x20000760
 8002140:	2aaaaaab 	.word	0x2aaaaaab

08002144 <MCP_WaitNextFrame>:
{
 8002144:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002146:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002148:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800214a:	6980      	ldr	r0, [r0, #24]
 800214c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002154:	69a0      	ldr	r0, [r4, #24]
 8002156:	6a23      	ldr	r3, [r4, #32]
}
 8002158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 800215c:	4718      	bx	r3
 800215e:	bf00      	nop

08002160 <MCP_Init>:
{
 8002160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002162:	b083      	sub	sp, #12
 8002164:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8002166:	4f0b      	ldr	r7, [pc, #44]	; (8002194 <MCP_Init+0x34>)
{
 8002168:	4608      	mov	r0, r1
 800216a:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 800216c:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 800216e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 8002172:	4616      	mov	r6, r2
 8002174:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 8002176:	4a08      	ldr	r2, [pc, #32]	; (8002198 <MCP_Init+0x38>)
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <MCP_Init+0x3c>)
 800217a:	9700      	str	r7, [sp, #0]
 800217c:	4621      	mov	r1, r4
{
 800217e:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8002180:	f004 fbd8 	bl	8006934 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8002184:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002188:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff ffda 	bl	8002144 <MCP_WaitNextFrame>
}
 8002190:	b003      	add	sp, #12
 8002192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002194:	080021a1 	.word	0x080021a1
 8002198:	080021a9 	.word	0x080021a9
 800219c:	08001b59 	.word	0x08001b59

080021a0 <MCP_OnTimeOut>:
{
 80021a0:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 80021a2:	f7ff ffcf 	bl	8002144 <MCP_WaitNextFrame>
}
 80021a6:	bd08      	pop	{r3, pc}

080021a8 <MCP_SentFrame>:
{
 80021a8:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 80021aa:	f7ff ffcb 	bl	8002144 <MCP_WaitNextFrame>
}
 80021ae:	bd08      	pop	{r3, pc}

080021b0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80021b0:	b530      	push	{r4, r5, lr}
 80021b2:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80021b4:	f003 fa5a 	bl	800566c <HAL_RCC_GetHCLKFreq>
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80021ba:	4d0c      	ldr	r5, [pc, #48]	; (80021ec <MX_MotorControl_Init+0x3c>)
 80021bc:	4c0c      	ldr	r4, [pc, #48]	; (80021f0 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80021be:	fba3 3000 	umull	r3, r0, r3, r0
 80021c2:	09c0      	lsrs	r0, r0, #7
 80021c4:	f002 fba0 	bl	8004908 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 80021c8:	4629      	mov	r1, r5
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7fe ffa6 	bl	800111c <MCboot>
  mc_lock_pins();
 80021d0:	f7ff fc12 	bl	80019f8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <MX_MotorControl_Init+0x44>)
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_MotorControl_Init+0x48>)
 80021da:	462b      	mov	r3, r5
 80021dc:	4622      	mov	r2, r4
 80021de:	2101      	movs	r1, #1
 80021e0:	f000 fd38 	bl	8002c54 <UI_TaskInit>
}
 80021e4:	b003      	add	sp, #12
 80021e6:	bd30      	pop	{r4, r5, pc}
 80021e8:	10624dd3 	.word	0x10624dd3
 80021ec:	20000b6c 	.word	0x20000b6c
 80021f0:	20000b68 	.word	0x20000b68
 80021f4:	08009280 	.word	0x08009280
 80021f8:	20000710 	.word	0x20000710

080021fc <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021fc:	4a65      	ldr	r2, [pc, #404]	; (8002394 <RCM_RegisterRegConv+0x198>)
 80021fe:	6813      	ldr	r3, [r2, #0]
{
 8002200:	b470      	push	{r4, r5, r6}
 8002202:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002204:	2b00      	cmp	r3, #0
 8002206:	d07e      	beq.n	8002306 <RCM_RegisterRegConv+0x10a>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002208:	7904      	ldrb	r4, [r0, #4]
 800220a:	7918      	ldrb	r0, [r3, #4]
 800220c:	4284      	cmp	r4, r0
 800220e:	d01e      	beq.n	800224e <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002210:	6855      	ldr	r5, [r2, #4]
 8002212:	2d00      	cmp	r5, #0
 8002214:	f000 808b 	beq.w	800232e <RCM_RegisterRegConv+0x132>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002218:	792b      	ldrb	r3, [r5, #4]
 800221a:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 800221c:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002220:	d079      	beq.n	8002316 <RCM_RegisterRegConv+0x11a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002222:	6893      	ldr	r3, [r2, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80a2 	beq.w	800236e <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800222a:	791d      	ldrb	r5, [r3, #4]
 800222c:	42a5      	cmp	r5, r4
 800222e:	d078      	beq.n	8002322 <RCM_RegisterRegConv+0x126>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002230:	68d3      	ldr	r3, [r2, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80a0 	beq.w	8002378 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002238:	791d      	ldrb	r5, [r3, #4]
 800223a:	42a5      	cmp	r5, r4
 800223c:	f000 8082 	beq.w	8002344 <RCM_RegisterRegConv+0x148>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002240:	2803      	cmp	r0, #3
 8002242:	bf88      	it	hi
 8002244:	20ff      	movhi	r0, #255	; 0xff
 8002246:	f240 80a0 	bls.w	800238a <RCM_RegisterRegConv+0x18e>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 800224a:	bc70      	pop	{r4, r5, r6}
 800224c:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	680b      	ldr	r3, [r1, #0]
 8002252:	4283      	cmp	r3, r0
 8002254:	d1dc      	bne.n	8002210 <RCM_RegisterRegConv+0x14>
  uint8_t i=0;
 8002256:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002258:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800225a:	4d4f      	ldr	r5, [pc, #316]	; (8002398 <RCM_RegisterRegConv+0x19c>)
      RCM_handle_array [handle] = regConv;
 800225c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002260:	2200      	movs	r2, #0
 8002262:	f845 2030 	str.w	r2, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002266:	07e5      	lsls	r5, r4, #31
 8002268:	d422      	bmi.n	80022b0 <RCM_RegisterRegConv+0xb4>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800226a:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800226c:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800226e:	f022 0204 	bic.w	r2, r2, #4
 8002272:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002274:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002276:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002278:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800227a:	f022 0220 	bic.w	r2, r2, #32
 800227e:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002280:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002288:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800228c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002290:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	2a00      	cmp	r2, #0
 8002296:	dbfc      	blt.n	8002292 <RCM_RegisterRegConv+0x96>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002298:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 800229a:	07d4      	lsls	r4, r2, #31
 800229c:	d408      	bmi.n	80022b0 <RCM_RegisterRegConv+0xb4>
  MODIFY_REG(ADCx->CR,
 800229e:	4c3f      	ldr	r4, [pc, #252]	; (800239c <RCM_RegisterRegConv+0x1a0>)
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4022      	ands	r2, r4
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	07d2      	lsls	r2, r2, #31
 80022ae:	d5f7      	bpl.n	80022a0 <RCM_RegisterRegConv+0xa4>
      RCM_NoInj_array [handle].enable = false;
 80022b0:	4d3b      	ldr	r5, [pc, #236]	; (80023a0 <RCM_RegisterRegConv+0x1a4>)
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80022b2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80022b4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80022b8:	0056      	lsls	r6, r2, #1
 80022ba:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80022be:	f024 040f 	bic.w	r4, r4, #15
      RCM_NoInj_array [handle].next = handle;
 80022c2:	7150      	strb	r0, [r2, #5]
      RCM_NoInj_array [handle].prev = handle;
 80022c4:	7110      	strb	r0, [r2, #4]
      RCM_NoInj_array [handle].enable = false;
 80022c6:	2200      	movs	r2, #0
 80022c8:	55aa      	strb	r2, [r5, r6]
 80022ca:	631c      	str	r4, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80022cc:	790c      	ldrb	r4, [r1, #4]
 80022ce:	2c09      	cmp	r4, #9
 80022d0:	d83f      	bhi.n	8002352 <RCM_RegisterRegConv+0x156>
 80022d2:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80022d6:	06a2      	lsls	r2, r4, #26
 80022d8:	2501      	movs	r5, #1
 80022da:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 80022de:	fa05 f404 	lsl.w	r4, r5, r4
 80022e2:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022e4:	0dd4      	lsrs	r4, r2, #23
 80022e6:	f004 0404 	and.w	r4, r4, #4
 80022ea:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80022ec:	688d      	ldr	r5, [r1, #8]
 80022ee:	58e1      	ldr	r1, [r4, r3]
 80022f0:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80022f4:	2607      	movs	r6, #7
 80022f6:	4096      	lsls	r6, r2
 80022f8:	4095      	lsls	r5, r2
 80022fa:	ea21 0206 	bic.w	r2, r1, r6
 80022fe:	432a      	orrs	r2, r5
 8002300:	50e2      	str	r2, [r4, r3]
}
 8002302:	bc70      	pop	{r4, r5, r6}
 8002304:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002306:	6855      	ldr	r5, [r2, #4]
 8002308:	2d00      	cmp	r5, #0
 800230a:	d039      	beq.n	8002380 <RCM_RegisterRegConv+0x184>
 800230c:	7904      	ldrb	r4, [r0, #4]
  uint8_t i=0;
 800230e:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002310:	792b      	ldrb	r3, [r5, #4]
 8002312:	42a3      	cmp	r3, r4
 8002314:	d185      	bne.n	8002222 <RCM_RegisterRegConv+0x26>
 8002316:	682d      	ldr	r5, [r5, #0]
 8002318:	680b      	ldr	r3, [r1, #0]
 800231a:	429d      	cmp	r5, r3
 800231c:	d181      	bne.n	8002222 <RCM_RegisterRegConv+0x26>
 800231e:	2001      	movs	r0, #1
 8002320:	e79a      	b.n	8002258 <RCM_RegisterRegConv+0x5c>
 8002322:	681d      	ldr	r5, [r3, #0]
 8002324:	680b      	ldr	r3, [r1, #0]
 8002326:	429d      	cmp	r5, r3
 8002328:	d182      	bne.n	8002230 <RCM_RegisterRegConv+0x34>
      i++;
 800232a:	2002      	movs	r0, #2
 800232c:	e794      	b.n	8002258 <RCM_RegisterRegConv+0x5c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800232e:	6893      	ldr	r3, [r2, #8]
 8002330:	2001      	movs	r0, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	f47f af79 	bne.w	800222a <RCM_RegisterRegConv+0x2e>
 8002338:	68d3      	ldr	r3, [r2, #12]
 800233a:	b333      	cbz	r3, 800238a <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800233c:	791d      	ldrb	r5, [r3, #4]
 800233e:	790c      	ldrb	r4, [r1, #4]
 8002340:	42a5      	cmp	r5, r4
 8002342:	d122      	bne.n	800238a <RCM_RegisterRegConv+0x18e>
 8002344:	681c      	ldr	r4, [r3, #0]
 8002346:	680b      	ldr	r3, [r1, #0]
 8002348:	429c      	cmp	r4, r3
 800234a:	f47f af79 	bne.w	8002240 <RCM_RegisterRegConv+0x44>
      i++;
 800234e:	2003      	movs	r0, #3
 8002350:	e782      	b.n	8002258 <RCM_RegisterRegConv+0x5c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002352:	2503      	movs	r5, #3
 8002354:	f06f 061d 	mvn.w	r6, #29
 8002358:	2201      	movs	r2, #1
 800235a:	fb15 6504 	smlabb	r5, r5, r4, r6
 800235e:	40a2      	lsls	r2, r4
 8002360:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8002364:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8002368:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800236c:	e7ba      	b.n	80022e4 <RCM_RegisterRegConv+0xe8>
      i++;
 800236e:	2805      	cmp	r0, #5
 8002370:	bf34      	ite	cc
 8002372:	2000      	movcc	r0, #0
 8002374:	2002      	movcs	r0, #2
 8002376:	e7df      	b.n	8002338 <RCM_RegisterRegConv+0x13c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002378:	2804      	cmp	r0, #4
 800237a:	680b      	ldr	r3, [r1, #0]
 800237c:	d8e7      	bhi.n	800234e <RCM_RegisterRegConv+0x152>
 800237e:	e76b      	b.n	8002258 <RCM_RegisterRegConv+0x5c>
 8002380:	6893      	ldr	r3, [r2, #8]
 8002382:	b123      	cbz	r3, 800238e <RCM_RegisterRegConv+0x192>
 8002384:	790c      	ldrb	r4, [r1, #4]
  uint8_t i=0;
 8002386:	4628      	mov	r0, r5
 8002388:	e74f      	b.n	800222a <RCM_RegisterRegConv+0x2e>
 800238a:	680b      	ldr	r3, [r1, #0]
 800238c:	e764      	b.n	8002258 <RCM_RegisterRegConv+0x5c>
 800238e:	4618      	mov	r0, r3
 8002390:	e7d2      	b.n	8002338 <RCM_RegisterRegConv+0x13c>
 8002392:	bf00      	nop
 8002394:	20000bb0 	.word	0x20000bb0
 8002398:	20000b8c 	.word	0x20000b8c
 800239c:	7fffffc0 	.word	0x7fffffc0
 80023a0:	20000b74 	.word	0x20000b74

080023a4 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 80023a4:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <RCM_ExecRegularConv+0x174>)
 80023a6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 80023aa:	b4f0      	push	{r4, r5, r6, r7}
  if (RCM_NoInj_array [handle].enable == false)
 80023ac:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80023b0:	0044      	lsls	r4, r0, #1
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	d136      	bne.n	8002424 <RCM_ExecRegularConv+0x80>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 80023b6:	7819      	ldrb	r1, [r3, #0]
 80023b8:	2900      	cmp	r1, #0
 80023ba:	d179      	bne.n	80024b0 <RCM_ExecRegularConv+0x10c>
 80023bc:	7999      	ldrb	r1, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 80023be:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 80023c0:	2900      	cmp	r1, #0
 80023c2:	d07b      	beq.n	80024bc <RCM_ExecRegularConv+0x118>
      {
        if (RCM_NoInj_array [i].next > handle)
 80023c4:	7ade      	ldrb	r6, [r3, #11]
 80023c6:	42b0      	cmp	r0, r6
 80023c8:	f0c0 8098 	bcc.w	80024fc <RCM_ExecRegularConv+0x158>
      if (RCM_NoInj_array [i].enable == true)
 80023cc:	7b1a      	ldrb	r2, [r3, #12]
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	f000 8097 	beq.w	8002502 <RCM_ExecRegularConv+0x15e>
        if (RCM_NoInj_array [i].next > handle)
 80023d4:	7c5e      	ldrb	r6, [r3, #17]
 80023d6:	42b0      	cmp	r0, r6
 80023d8:	d305      	bcc.n	80023e6 <RCM_ExecRegularConv+0x42>
      if (RCM_NoInj_array [i].enable == true)
 80023da:	7c9a      	ldrb	r2, [r3, #18]
 80023dc:	2a00      	cmp	r2, #0
 80023de:	f040 8094 	bne.w	800250a <RCM_ExecRegularConv+0x166>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 80023e2:	2202      	movs	r2, #2
 80023e4:	e071      	b.n	80024ca <RCM_ExecRegularConv+0x126>
 80023e6:	2202      	movs	r2, #2
      if (RCM_NoInj_array [i].enable == true)
 80023e8:	4611      	mov	r1, r2
          RCM_NoInj_array [i].next = handle;
 80023ea:	eb01 0541 	add.w	r5, r1, r1, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80023ee:	1821      	adds	r1, r4, r0
 80023f0:	eb03 0141 	add.w	r1, r3, r1, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80023f4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array [handle].next = formerNext;
 80023f8:	714e      	strb	r6, [r1, #5]
          RCM_NoInj_array [handle].prev = i;
 80023fa:	4e48      	ldr	r6, [pc, #288]	; (800251c <RCM_ExecRegularConv+0x178>)
 80023fc:	710a      	strb	r2, [r1, #4]
          RCM_NoInj_array [i].next = handle;
 80023fe:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 8002402:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8002406:	7832      	ldrb	r2, [r6, #0]
          RCM_NoInj_array [i].next = handle;
 8002408:	7168      	strb	r0, [r5, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 800240a:	7138      	strb	r0, [r7, #4]
      {
       /* Nothing to do we are parsing the array, nothing inserted yet*/
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
 800240c:	1821      	adds	r1, r4, r0
 800240e:	2501      	movs	r5, #1
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002410:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 8002414:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002418:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800241c:	7852      	ldrb	r2, [r2, #1]
 800241e:	42aa      	cmp	r2, r5
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8002420:	bf18      	it	ne
 8002422:	7030      	strbne	r0, [r6, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8002424:	4a3e      	ldr	r2, [pc, #248]	; (8002520 <RCM_ExecRegularConv+0x17c>)
 8002426:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800242a:	bb8a      	cbnz	r2, 8002490 <RCM_ExecRegularConv+0xec>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800242c:	4a3d      	ldr	r2, [pc, #244]	; (8002524 <RCM_ExecRegularConv+0x180>)
 800242e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002432:	7915      	ldrb	r5, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002434:	6811      	ldr	r1, [r2, #0]
 8002436:	2d09      	cmp	r5, #9
 8002438:	d930      	bls.n	800249c <RCM_ExecRegularConv+0xf8>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800243a:	2603      	movs	r6, #3
 800243c:	f06f 071d 	mvn.w	r7, #29
 8002440:	2201      	movs	r2, #1
 8002442:	fb16 7605 	smlabb	r6, r6, r5, r7
 8002446:	40aa      	lsls	r2, r5
 8002448:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 800244c:	ea42 6285 	orr.w	r2, r2, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002450:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8002454:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8002456:	0d12      	lsrs	r2, r2, #20
 8002458:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 800245c:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8002460:	432a      	orrs	r2, r5
 8002462:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002464:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002466:	688a      	ldr	r2, [r1, #8]
 8002468:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800246c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002470:	f042 0204 	orr.w	r2, r2, #4
 8002474:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002476:	680a      	ldr	r2, [r1, #0]
 8002478:	0752      	lsls	r2, r2, #29
 800247a:	d5fc      	bpl.n	8002476 <RCM_ExecRegularConv+0xd2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 800247c:	1822      	adds	r2, r4, r0
 800247e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002482:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002484:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002486:	4d25      	ldr	r5, [pc, #148]	; (800251c <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array [handle].status = valid;
 8002488:	2102      	movs	r1, #2
 800248a:	7051      	strb	r1, [r2, #1]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 800248c:	7952      	ldrb	r2, [r2, #5]
 800248e:	702a      	strb	r2, [r5, #0]
  }
  retVal = RCM_NoInj_array [handle].value;
 8002490:	4420      	add	r0, r4
 8002492:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8002496:	bcf0      	pop	{r4, r5, r6, r7}
 8002498:	8858      	ldrh	r0, [r3, #2]
 800249a:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800249c:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80024a0:	06aa      	lsls	r2, r5, #26
 80024a2:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80024a4:	ea42 5207 	orr.w	r2, r2, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80024a8:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80024ac:	432a      	orrs	r2, r5
 80024ae:	e7d1      	b.n	8002454 <RCM_ExecRegularConv+0xb0>
        if (RCM_NoInj_array [i].next > handle)
 80024b0:	795e      	ldrb	r6, [r3, #5]
 80024b2:	4286      	cmp	r6, r0
 80024b4:	d898      	bhi.n	80023e8 <RCM_ExecRegularConv+0x44>
      if (RCM_NoInj_array [i].enable == true)
 80024b6:	7999      	ldrb	r1, [r3, #6]
 80024b8:	2900      	cmp	r1, #0
 80024ba:	d183      	bne.n	80023c4 <RCM_ExecRegularConv+0x20>
 80024bc:	7b19      	ldrb	r1, [r3, #12]
 80024be:	2900      	cmp	r1, #0
 80024c0:	d188      	bne.n	80023d4 <RCM_ExecRegularConv+0x30>
 80024c2:	7c99      	ldrb	r1, [r3, #18]
 80024c4:	bb09      	cbnz	r1, 800250a <RCM_ExecRegularConv+0x166>
       if (LastEnable != RCM_MAX_CONV )
 80024c6:	2a04      	cmp	r2, #4
 80024c8:	d014      	beq.n	80024f4 <RCM_ExecRegularConv+0x150>
         formerNext = RCM_NoInj_array [LastEnable].next;
 80024ca:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80024ce:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80024d2:	1821      	adds	r1, r4, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 80024d4:	f895 c005 	ldrb.w	ip, [r5, #5]
         RCM_NoInj_array [handle].next = formerNext;
 80024d8:	4e10      	ldr	r6, [pc, #64]	; (800251c <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array [formerNext].prev = handle;
 80024da:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 80024de:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [formerNext].prev = handle;
 80024e2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 80024e6:	710a      	strb	r2, [r1, #4]
         RCM_NoInj_array [handle].next = formerNext;
 80024e8:	f881 c005 	strb.w	ip, [r1, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 80024ec:	7832      	ldrb	r2, [r6, #0]
 80024ee:	7168      	strb	r0, [r5, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 80024f0:	7138      	strb	r0, [r7, #4]
    while (i < RCM_MAX_CONV)
 80024f2:	e78b      	b.n	800240c <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 80024f4:	4e09      	ldr	r6, [pc, #36]	; (800251c <RCM_ExecRegularConv+0x178>)
 80024f6:	4602      	mov	r2, r0
 80024f8:	7030      	strb	r0, [r6, #0]
    while (i < RCM_MAX_CONV)
 80024fa:	e787      	b.n	800240c <RCM_ExecRegularConv+0x68>
      i++;
 80024fc:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 80024fe:	4611      	mov	r1, r2
 8002500:	e773      	b.n	80023ea <RCM_ExecRegularConv+0x46>
 8002502:	7c9a      	ldrb	r2, [r3, #18]
 8002504:	b90a      	cbnz	r2, 800250a <RCM_ExecRegularConv+0x166>
      i++;
 8002506:	2201      	movs	r2, #1
 8002508:	e7df      	b.n	80024ca <RCM_ExecRegularConv+0x126>
        if (RCM_NoInj_array [i].next > handle)
 800250a:	7dde      	ldrb	r6, [r3, #23]
 800250c:	4286      	cmp	r6, r0
      i++;
 800250e:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 8002512:	d9da      	bls.n	80024ca <RCM_ExecRegularConv+0x126>
 8002514:	e768      	b.n	80023e8 <RCM_ExecRegularConv+0x44>
 8002516:	bf00      	nop
 8002518:	20000b74 	.word	0x20000b74
 800251c:	20000b70 	.word	0x20000b70
 8002520:	200002d0 	.word	0x200002d0
 8002524:	20000bb0 	.word	0x20000bb0

08002528 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002528:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800252a:	4c12      	ldr	r4, [pc, #72]	; (8002574 <RCM_ExecUserConv+0x4c>)
 800252c:	7823      	ldrb	r3, [r4, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d000      	beq.n	8002534 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002532:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002534:	4d10      	ldr	r5, [pc, #64]	; (8002578 <RCM_ExecUserConv+0x50>)
 8002536:	7828      	ldrb	r0, [r5, #0]
 8002538:	f7ff ff34 	bl	80023a4 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800253c:	782b      	ldrb	r3, [r5, #0]
 800253e:	4a0f      	ldr	r2, [pc, #60]	; (800257c <RCM_ExecUserConv+0x54>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002540:	490f      	ldr	r1, [pc, #60]	; (8002580 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8002542:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8002546:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800254a:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 800254c:	7852      	ldrb	r2, [r2, #1]
 800254e:	b10a      	cbz	r2, 8002554 <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8002550:	2202      	movs	r2, #2
 8002552:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002554:	4a0b      	ldr	r2, [pc, #44]	; (8002584 <RCM_ExecUserConv+0x5c>)
 8002556:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800255a:	2d00      	cmp	r5, #0
 800255c:	d0e9      	beq.n	8002532 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800255e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002562:	2100      	movs	r1, #0
 8002564:	7021      	strb	r1, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002566:	6852      	ldr	r2, [r2, #4]
 8002568:	4601      	mov	r1, r0
 800256a:	4618      	mov	r0, r3
 800256c:	462b      	mov	r3, r5
}
 800256e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002572:	4718      	bx	r3
 8002574:	20000bac 	.word	0x20000bac
 8002578:	20000b71 	.word	0x20000b71
 800257c:	20000b74 	.word	0x20000b74
 8002580:	20000bc0 	.word	0x20000bc0
 8002584:	20000b8c 	.word	0x20000b8c

08002588 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <RCM_ExecNextConv+0x88>)
 800258a:	4822      	ldr	r0, [pc, #136]	; (8002614 <RCM_ExecNextConv+0x8c>)
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002592:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8002596:	b383      	cbz	r3, 80025fa <RCM_ExecNextConv+0x72>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8002598:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <RCM_ExecNextConv+0x90>)
{
 800259a:	b4f0      	push	{r4, r5, r6, r7}
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80025a2:	2504      	movs	r5, #4
 80025a4:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80025a6:	791d      	ldrb	r5, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80025a8:	2d09      	cmp	r5, #9
 80025aa:	ea4f 0442 	mov.w	r4, r2, lsl #1
 80025ae:	d925      	bls.n	80025fc <RCM_ExecNextConv+0x74>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80025b0:	2603      	movs	r6, #3
 80025b2:	f06f 071d 	mvn.w	r7, #29
 80025b6:	2301      	movs	r3, #1
 80025b8:	fb16 7605 	smlabb	r6, r6, r5, r7
 80025bc:	40ab      	lsls	r3, r5
 80025be:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
 80025c2:	ea43 6385 	orr.w	r3, r3, r5, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80025c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 80025ca:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80025cc:	0d1b      	lsrs	r3, r3, #20
 80025ce:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 80025d2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025d6:	432b      	orrs	r3, r5
 80025d8:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80025da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80025dc:	688b      	ldr	r3, [r1, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 80025de:	4422      	add	r2, r4
 80025e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80025e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	2201      	movs	r2, #1
 80025f2:	608b      	str	r3, [r1, #8]
 80025f4:	7042      	strb	r2, [r0, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80025f6:	bcf0      	pop	{r4, r5, r6, r7}
 80025f8:	4770      	bx	lr
 80025fa:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80025fc:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8002600:	06ab      	lsls	r3, r5, #26
 8002602:	2601      	movs	r6, #1
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002604:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002608:	fa06 f505 	lsl.w	r5, r6, r5
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800260c:	432b      	orrs	r3, r5
 800260e:	e7dc      	b.n	80025ca <RCM_ExecNextConv+0x42>
 8002610:	20000b70 	.word	0x20000b70
 8002614:	20000b74 	.word	0x20000b74
 8002618:	20000bb0 	.word	0x20000bb0

0800261c <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 800261c:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 800261e:	4c0f      	ldr	r4, [pc, #60]	; (800265c <RCM_ReadOngoingConv+0x40>)
 8002620:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <RCM_ReadOngoingConv+0x44>)
 8002622:	7823      	ldrb	r3, [r4, #0]
 8002624:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8002628:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800262c:	0058      	lsls	r0, r3, #1
 800262e:	784d      	ldrb	r5, [r1, #1]
 8002630:	2d01      	cmp	r5, #1
 8002632:	d006      	beq.n	8002642 <RCM_ReadOngoingConv+0x26>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8002634:	4403      	add	r3, r0
 8002636:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800263a:	7953      	ldrb	r3, [r2, #5]
 800263c:	7023      	strb	r3, [r4, #0]
}
 800263e:	bc70      	pop	{r4, r5, r6}
 8002640:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8002642:	4d08      	ldr	r5, [pc, #32]	; (8002664 <RCM_ReadOngoingConv+0x48>)
 8002644:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8002648:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800264a:	682e      	ldr	r6, [r5, #0]
 800264c:	0776      	lsls	r6, r6, #29
 800264e:	d5f1      	bpl.n	8002634 <RCM_ReadOngoingConv+0x18>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002650:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8002652:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8002654:	2502      	movs	r5, #2
 8002656:	704d      	strb	r5, [r1, #1]
 8002658:	e7ec      	b.n	8002634 <RCM_ReadOngoingConv+0x18>
 800265a:	bf00      	nop
 800265c:	20000b70 	.word	0x20000b70
 8002660:	20000b74 	.word	0x20000b74
 8002664:	20000bb0 	.word	0x20000bb0

08002668 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <HAL_MspInit+0x3c>)
{
 800266a:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
 8002674:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002676:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002678:	f002 0201 	and.w	r2, r2, #1
 800267c:	9200      	str	r2, [sp, #0]
 800267e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002682:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002686:	659a      	str	r2, [r3, #88]	; 0x58
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002690:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002694:	f002 f8de 	bl	8004854 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002698:	b003      	add	sp, #12
 800269a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800269e:	f002 bc47 	b.w	8004f30 <HAL_PWREx_DisableUCPDDeadBattery>
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80026aa:	6802      	ldr	r2, [r0, #0]
{
 80026ac:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80026b0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80026b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80026bc:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80026be:	d021      	beq.n	8002704 <HAL_ADC_MspInit+0x5c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80026c0:	4b33      	ldr	r3, [pc, #204]	; (8002790 <HAL_ADC_MspInit+0xe8>)
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80026c6:	b00d      	add	sp, #52	; 0x34
 80026c8:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026ca:	4a32      	ldr	r2, [pc, #200]	; (8002794 <HAL_ADC_MspInit+0xec>)
 80026cc:	6813      	ldr	r3, [r2, #0]
 80026ce:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026d0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026d4:	d051      	beq.n	800277a <HAL_ADC_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_ADC_MspInit+0xf0>)
 80026d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	64da      	str	r2, [r3, #76]	; 0x4c
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80026ec:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2400      	movs	r4, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80026f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f8:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80026fc:	f002 fa20 	bl	8004b40 <HAL_GPIO_Init>
}
 8002700:	b00d      	add	sp, #52	; 0x34
 8002702:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002704:	4a23      	ldr	r2, [pc, #140]	; (8002794 <HAL_ADC_MspInit+0xec>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800270a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800270c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800270e:	d029      	beq.n	8002764 <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_ADC_MspInit+0xf0>)
 8002712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	64da      	str	r2, [r3, #76]	; 0x4c
 800271a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800271c:	f002 0201 	and.w	r2, r2, #1
 8002720:	9202      	str	r2, [sp, #8]
 8002722:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002726:	f042 0202 	orr.w	r2, r2, #2
 800272a:	64da      	str	r2, [r3, #76]	; 0x4c
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002734:	2205      	movs	r2, #5
 8002736:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	a906      	add	r1, sp, #24
 800273c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8002740:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f002 f9fa 	bl	8004b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 800274c:	f244 0202 	movw	r2, #16386	; 0x4002
 8002750:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	4812      	ldr	r0, [pc, #72]	; (800279c <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8002758:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f002 f9f0 	bl	8004b40 <HAL_GPIO_Init>
}
 8002760:	b00d      	add	sp, #52	; 0x34
 8002762:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_ADC_MspInit+0xf0>)
 8002766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800276c:	64da      	str	r2, [r3, #76]	; 0x4c
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	9b01      	ldr	r3, [sp, #4]
 8002778:	e7ca      	b.n	8002710 <HAL_ADC_MspInit+0x68>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800277a:	4b07      	ldr	r3, [pc, #28]	; (8002798 <HAL_ADC_MspInit+0xf0>)
 800277c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800277e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002782:	64da      	str	r2, [r3, #76]	; 0x4c
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800278a:	9304      	str	r3, [sp, #16]
 800278c:	9b04      	ldr	r3, [sp, #16]
 800278e:	e7a2      	b.n	80026d6 <HAL_ADC_MspInit+0x2e>
 8002790:	50000100 	.word	0x50000100
 8002794:	20000768 	.word	0x20000768
 8002798:	40021000 	.word	0x40021000
 800279c:	48000400 	.word	0x48000400

080027a0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80027a0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80027a2:	6802      	ldr	r2, [r0, #0]
 80027a4:	4929      	ldr	r1, [pc, #164]	; (800284c <HAL_COMP_MspInit+0xac>)
{
 80027a6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80027aa:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80027b0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80027b4:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 80027b6:	d007      	beq.n	80027c8 <HAL_COMP_MspInit+0x28>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 80027b8:	4925      	ldr	r1, [pc, #148]	; (8002850 <HAL_COMP_MspInit+0xb0>)
 80027ba:	428a      	cmp	r2, r1
 80027bc:	d01a      	beq.n	80027f4 <HAL_COMP_MspInit+0x54>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 80027be:	4925      	ldr	r1, [pc, #148]	; (8002854 <HAL_COMP_MspInit+0xb4>)
 80027c0:	428a      	cmp	r2, r1
 80027c2:	d02d      	beq.n	8002820 <HAL_COMP_MspInit+0x80>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 80027c4:	b00a      	add	sp, #40	; 0x28
 80027c6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_COMP_MspInit+0xb8>)
 80027ca:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80027cc:	f041 0101 	orr.w	r1, r1, #1
 80027d0:	64d1      	str	r1, [r2, #76]	; 0x4c
 80027d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	f002 0201 	and.w	r2, r2, #1
 80027da:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80027dc:	2303      	movs	r3, #3
 80027de:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80027e0:	a904      	add	r1, sp, #16
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80027e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80027ec:	f002 f9a8 	bl	8004b40 <HAL_GPIO_Init>
}
 80027f0:	b00a      	add	sp, #40	; 0x28
 80027f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_COMP_MspInit+0xb8>)
 80027f6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80027f8:	f041 0101 	orr.w	r1, r1, #1
 80027fc:	64d1      	str	r1, [r2, #76]	; 0x4c
 80027fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	f002 0201 	and.w	r2, r2, #1
 8002806:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002808:	2303      	movs	r3, #3
 800280a:	2280      	movs	r2, #128	; 0x80
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800280c:	a904      	add	r1, sp, #16
 800280e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8002812:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8002818:	f002 f992 	bl	8004b40 <HAL_GPIO_Init>
}
 800281c:	b00a      	add	sp, #40	; 0x28
 800281e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_COMP_MspInit+0xb8>)
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002822:	480e      	ldr	r0, [pc, #56]	; (800285c <HAL_COMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002824:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002826:	f041 0102 	orr.w	r1, r1, #2
 800282a:	64d1      	str	r1, [r2, #76]	; 0x4c
 800282c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002830:	f002 0202 	and.w	r2, r2, #2
 8002834:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8002836:	2303      	movs	r3, #3
 8002838:	2201      	movs	r2, #1
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800283a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800283c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8002842:	f002 f97d 	bl	8004b40 <HAL_GPIO_Init>
}
 8002846:	b00a      	add	sp, #40	; 0x28
 8002848:	bd10      	pop	{r4, pc}
 800284a:	bf00      	nop
 800284c:	40010200 	.word	0x40010200
 8002850:	40010204 	.word	0x40010204
 8002854:	4001020c 	.word	0x4001020c
 8002858:	40021000 	.word	0x40021000
 800285c:	48000400 	.word	0x48000400

08002860 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_CORDIC_MspInit+0x2c>)
 8002862:	6802      	ldr	r2, [r0, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d000      	beq.n	800286a <HAL_CORDIC_MspInit+0xa>
 8002868:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800286a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 800286e:	f042 0208 	orr.w	r2, r2, #8
 8002872:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8002876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800287a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800287c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002886:	b002      	add	sp, #8
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40020c00 	.word	0x40020c00

08002890 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_DAC_MspInit+0x2c>)
 8002892:	6802      	ldr	r2, [r0, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d000      	beq.n	800289a <HAL_DAC_MspInit+0xa>
 8002898:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 800289a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 800289e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
{
 80028a2:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 80028a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 80028b6:	b002      	add	sp, #8
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	50001000 	.word	0x50001000

080028c0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80028c0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 80028c2:	6802      	ldr	r2, [r0, #0]
 80028c4:	4929      	ldr	r1, [pc, #164]	; (800296c <HAL_OPAMP_MspInit+0xac>)
{
 80028c6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 80028ca:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80028d0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80028d4:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 80028d6:	d007      	beq.n	80028e8 <HAL_OPAMP_MspInit+0x28>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 80028d8:	4925      	ldr	r1, [pc, #148]	; (8002970 <HAL_OPAMP_MspInit+0xb0>)
 80028da:	428a      	cmp	r2, r1
 80028dc:	d01a      	beq.n	8002914 <HAL_OPAMP_MspInit+0x54>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 80028de:	4925      	ldr	r1, [pc, #148]	; (8002974 <HAL_OPAMP_MspInit+0xb4>)
 80028e0:	428a      	cmp	r2, r1
 80028e2:	d02d      	beq.n	8002940 <HAL_OPAMP_MspInit+0x80>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 80028e4:	b00a      	add	sp, #40	; 0x28
 80028e6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	4a23      	ldr	r2, [pc, #140]	; (8002978 <HAL_OPAMP_MspInit+0xb8>)
 80028ea:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80028ec:	f041 0101 	orr.w	r1, r1, #1
 80028f0:	64d1      	str	r1, [r2, #76]	; 0x4c
 80028f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	f002 0201 	and.w	r2, r2, #1
 80028fa:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 80028fc:	2303      	movs	r3, #3
 80028fe:	220e      	movs	r2, #14
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002900:	a904      	add	r1, sp, #16
 8002902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8002906:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	f002 f918 	bl	8004b40 <HAL_GPIO_Init>
}
 8002910:	b00a      	add	sp, #40	; 0x28
 8002912:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_OPAMP_MspInit+0xb8>)
 8002916:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002918:	f041 0101 	orr.w	r1, r1, #1
 800291c:	64d1      	str	r1, [r2, #76]	; 0x4c
 800291e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	f002 0201 	and.w	r2, r2, #1
 8002926:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8002928:	2303      	movs	r3, #3
 800292a:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	a904      	add	r1, sp, #16
 800292e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8002932:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	9c02      	ldr	r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002938:	f002 f902 	bl	8004b40 <HAL_GPIO_Init>
}
 800293c:	b00a      	add	sp, #40	; 0x28
 800293e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_OPAMP_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002942:	480e      	ldr	r0, [pc, #56]	; (800297c <HAL_OPAMP_MspInit+0xbc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002946:	f041 0102 	orr.w	r1, r1, #2
 800294a:	64d1      	str	r1, [r2, #76]	; 0x4c
 800294c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002950:	f002 0202 	and.w	r2, r2, #2
 8002954:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8002956:	2303      	movs	r3, #3
 8002958:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 800295c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f002 f8ed 	bl	8004b40 <HAL_GPIO_Init>
}
 8002966:	b00a      	add	sp, #40	; 0x28
 8002968:	bd10      	pop	{r4, pc}
 800296a:	bf00      	nop
 800296c:	40010300 	.word	0x40010300
 8002970:	40010304 	.word	0x40010304
 8002974:	40010308 	.word	0x40010308
 8002978:	40021000 	.word	0x40021000
 800297c:	48000400 	.word	0x48000400

08002980 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002980:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_TIM_Base_MspInit+0x28>)
 8002982:	6802      	ldr	r2, [r0, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d000      	beq.n	800298a <HAL_TIM_Base_MspInit+0xa>
 8002988:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800298a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 800298e:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	661a      	str	r2, [r3, #96]	; 0x60
 8002998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029a2:	b002      	add	sp, #8
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40012c00 	.word	0x40012c00

080029ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80029ae:	6801      	ldr	r1, [r0, #0]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <HAL_TIM_MspPostInit+0xb0>)
{
 80029b2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80029b6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80029bc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80029c0:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 80029c2:	d001      	beq.n	80029c8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029c4:	b00b      	add	sp, #44	; 0x2c
 80029c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029cc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80029d0:	2402      	movs	r4, #2
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80029d4:	4822      	ldr	r0, [pc, #136]	; (8002a60 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d6:	f042 0204 	orr.w	r2, r2, #4
 80029da:	64da      	str	r2, [r3, #76]	; 0x4c
 80029dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029de:	f002 0204 	and.w	r2, r2, #4
 80029e2:	9201      	str	r2, [sp, #4]
 80029e4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029e8:	f042 0202 	orr.w	r2, r2, #2
 80029ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80029ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029f0:	f002 0202 	and.w	r2, r2, #2
 80029f4:	9202      	str	r2, [sp, #8]
 80029f6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8002a08:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8002a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a10:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002a12:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002a14:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8002a16:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002a1a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8002a1c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f002 f88e 	bl	8004b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002a24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a28:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	a904      	add	r1, sp, #16
 8002a2c:	480d      	ldr	r0, [pc, #52]	; (8002a64 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002a2e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8002a30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a34:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002a38:	f44f 56b8 	mov.w	r6, #5888	; 0x1700
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002a3c:	f002 f880 	bl	8004b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002a40:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a42:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	a904      	add	r1, sp, #16
 8002a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8002a4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002a4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a52:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a54:	f002 f874 	bl	8004b40 <HAL_GPIO_Init>
}
 8002a58:	b00b      	add	sp, #44	; 0x2c
 8002a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	48000800 	.word	0x48000800
 8002a64:	48000400 	.word	0x48000400

08002a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a68:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8002a6a:	6801      	ldr	r1, [r0, #0]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_UART_MspInit+0x68>)
{
 8002a6e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002a72:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002a78:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002a7c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a80:	b009      	add	sp, #36	; 0x24
 8002a82:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a88:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a8c:	4811      	ldr	r0, [pc, #68]	; (8002ad4 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a90:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002a94:	659a      	str	r2, [r3, #88]	; 0x58
 8002a96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a98:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002a9c:	9200      	str	r2, [sp, #0]
 8002a9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002aa2:	f042 0202 	orr.w	r2, r2, #2
 8002aa6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ab0:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ab4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002abc:	2418      	movs	r4, #24
 8002abe:	2502      	movs	r5, #2
 8002ac0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002ac4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac8:	f002 f83a 	bl	8004b40 <HAL_GPIO_Init>
}
 8002acc:	b009      	add	sp, #36	; 0x24
 8002ace:	bd30      	pop	{r4, r5, pc}
 8002ad0:	40004400 	.word	0x40004400
 8002ad4:	48000400 	.word	0x48000400

08002ad8 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8002ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8002ae0:	f7fe be30 	b.w	8001744 <TSK_HighFrequencyTask>

08002ae4 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002ae6:	4804      	ldr	r0, [pc, #16]	; (8002af8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002ae8:	f06f 0201 	mvn.w	r2, #1
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	f004 bf41 	b.w	8007974 <R3_2_TIMx_UP_IRQHandler>
 8002af2:	bf00      	nop
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	200002d0 	.word	0x200002d0

08002afc <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002afc:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	0611      	lsls	r1, r2, #24
 8002b04:	d505      	bpl.n	8002b12 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002b06:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8002b0a:	480a      	ldr	r0, [pc, #40]	; (8002b34 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	f004 ff93 	bl	8007a38 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	05d2      	lsls	r2, r2, #23
 8002b18:	d505      	bpl.n	8002b26 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8002b1e:	4805      	ldr	r0, [pc, #20]	; (8002b34 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002b20:	611a      	str	r2, [r3, #16]
 8002b22:	f004 ff69 	bl	80079f8 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002b2a:	f7fe bddf 	b.w	80016ec <MC_Scheduler>
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	200002d0 	.word	0x200002d0

08002b38 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002b38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002b3a:	4c18      	ldr	r4, [pc, #96]	; (8002b9c <USART2_IRQHandler+0x64>)
 8002b3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	0691      	lsls	r1, r2, #26
 8002b44:	d50b      	bpl.n	8002b5e <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002b46:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002b48:	4620      	mov	r0, r4
 8002b4a:	b2c9      	uxtb	r1, r1
 8002b4c:	f005 fc02 	bl	8008354 <UFCP_RX_IRQ_Handler>
 8002b50:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d01a      	beq.n	8002b8c <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d01d      	beq.n	8002b96 <USART2_IRQHandler+0x5e>
 8002b5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	0612      	lsls	r2, r2, #24
 8002b62:	d504      	bpl.n	8002b6e <USART2_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <USART2_IRQHandler+0x64>)
 8002b66:	f005 fb5d 	bl	8008224 <UFCP_TX_IRQ_Handler>
 8002b6a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	d50a      	bpl.n	8002b8a <USART2_IRQHandler+0x52>
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <USART2_IRQHandler+0x64>)
 8002b76:	f005 fc4f 	bl	8008418 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002b7a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002b7e:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b84:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002b86:	f000 b8c7 	b.w	8002d18 <UI_SerialCommunicationTimeOutStop>
}
 8002b8a:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8002b8c:	f000 f8ca 	bl	8002d24 <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8002b90:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b94:	e7e3      	b.n	8002b5e <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8002b96:	f000 f8bf 	bl	8002d18 <UI_SerialCommunicationTimeOutStop>
 8002b9a:	e7de      	b.n	8002b5a <USART2_IRQHandler+0x22>
 8002b9c:	200005d4 	.word	0x200005d4

08002ba0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002ba2:	f7fe ff19 	bl	80019d8 <TSK_HardwareFaultTask>
 8002ba6:	4d18      	ldr	r5, [pc, #96]	; (8002c08 <HardFault_Handler+0x68>)
 8002ba8:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002baa:	462c      	mov	r4, r5
 8002bac:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	0711      	lsls	r1, r2, #28
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	d508      	bpl.n	8002bca <HardFault_Handler+0x2a>
 8002bb8:	f005 fc2e 	bl	8008418 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002bbc:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002bc0:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002bc2:	f000 f8a9 	bl	8002d18 <UI_SerialCommunicationTimeOutStop>
 8002bc6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	0612      	lsls	r2, r2, #24
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8002bce:	4620      	mov	r0, r4
 8002bd0:	d513      	bpl.n	8002bfa <HardFault_Handler+0x5a>
 8002bd2:	f005 fb27 	bl	8008224 <UFCP_TX_IRQ_Handler>
 8002bd6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	0691      	lsls	r1, r2, #26
 8002bde:	d5e7      	bpl.n	8002bb0 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002be0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002be2:	4620      	mov	r0, r4
 8002be4:	b2c9      	uxtb	r1, r1
 8002be6:	f005 fbb5 	bl	8008354 <UFCP_RX_IRQ_Handler>
 8002bea:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d008      	beq.n	8002c02 <HardFault_Handler+0x62>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d1db      	bne.n	8002bac <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8002bf4:	f000 f890 	bl	8002d18 <UI_SerialCommunicationTimeOutStop>
 8002bf8:	e7d8      	b.n	8002bac <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	0692      	lsls	r2, r2, #26
 8002bfe:	d5d7      	bpl.n	8002bb0 <HardFault_Handler+0x10>
 8002c00:	e7ee      	b.n	8002be0 <HardFault_Handler+0x40>
          UI_SerialCommunicationTimeOutStart();
 8002c02:	f000 f88f 	bl	8002d24 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002c06:	e7d1      	b.n	8002bac <HardFault_Handler+0xc>
 8002c08:	200005d4 	.word	0x200005d4

08002c0c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002c0c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002c0e:	4c0a      	ldr	r4, [pc, #40]	; (8002c38 <SysTick_Handler+0x2c>)
 8002c10:	7823      	ldrb	r3, [r4, #0]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d006      	beq.n	8002c24 <SysTick_Handler+0x18>
 8002c16:	3301      	adds	r3, #1
 8002c18:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002c1a:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002c20:	f7fe beca 	b.w	80019b8 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002c24:	f000 fe60 	bl	80038e8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002c28:	f001 fe8a 	bl	8004940 <HAL_SYSTICK_IRQHandler>
 8002c2c:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002c2e:	7023      	strb	r3, [r4, #0]
}
 8002c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002c34:	f7fe bec0 	b.w	80019b8 <MC_RunMotorControlTasks>
 8002c38:	20000714 	.word	0x20000714

08002c3c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <EXTI15_10_IRQHandler+0x14>)
 8002c3e:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC10.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10) )
 8002c40:	0552      	lsls	r2, r2, #21
 8002c42:	d400      	bmi.n	8002c46 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    UI_HandleStartStopButton_cb ();
  }

}
 8002c44:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4a:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002c4c:	f000 b870 	b.w	8002d30 <UI_HandleStartStopButton_cb>
 8002c50:	40010400 	.word	0x40010400

08002c54 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002c58:	4d17      	ldr	r5, [pc, #92]	; (8002cb8 <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8002c5a:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002ccc <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8002c5e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002cd0 <UI_TaskInit+0x7c>
{
 8002c62:	468e      	mov	lr, r1
 8002c64:	4681      	mov	r9, r0
 8002c66:	4616      	mov	r6, r2
 8002c68:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8002c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c6c:	4664      	mov	r4, ip
 8002c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c70:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8002c74:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 8002c76:	4d11      	ldr	r5, [pc, #68]	; (8002cbc <UI_TaskInit+0x68>)
{
 8002c78:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8002c7c:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8002c80:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 8002c84:	4640      	mov	r0, r8
{
 8002c86:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8002c88:	f005 faca 	bl	8008220 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002c8c:	f8cd a004 	str.w	sl, [sp, #4]
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <UI_TaskInit+0x6c>)
 8002c92:	6828      	ldr	r0, [r5, #0]
 8002c94:	4a0b      	ldr	r2, [pc, #44]	; (8002cc4 <UI_TaskInit+0x70>)
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	4641      	mov	r1, r8
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <UI_TaskInit+0x74>)
 8002c9c:	f7ff fa60 	bl	8002160 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002ca0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8002ca4:	6828      	ldr	r0, [r5, #0]
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	4632      	mov	r2, r6
 8002caa:	4621      	mov	r1, r4

}
 8002cac:	b002      	add	sp, #8
 8002cae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002cb2:	f000 b849 	b.w	8002d48 <UI_Init>
 8002cb6:	bf00      	nop
 8002cb8:	20000740 	.word	0x20000740
 8002cbc:	20000770 	.word	0x20000770
 8002cc0:	08008435 	.word	0x08008435
 8002cc4:	080082a5 	.word	0x080082a5
 8002cc8:	08008285 	.word	0x08008285
 8002ccc:	20000bc4 	.word	0x20000bc4
 8002cd0:	200005d4 	.word	0x200005d4

08002cd4 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <UI_Scheduler+0x38>)
 8002cd6:	8813      	ldrh	r3, [r2, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b11b      	cbz	r3, 8002ce4 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002cdc:	8813      	ldrh	r3, [r2, #0]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <UI_Scheduler+0x3c>)
 8002ce6:	8813      	ldrh	r3, [r2, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d903      	bls.n	8002cf6 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002cee:	8813      	ldrh	r3, [r2, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <UI_Scheduler+0x40>)
 8002cf8:	8813      	ldrh	r3, [r2, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d903      	bls.n	8002d08 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002d00:	8813      	ldrh	r3, [r2, #0]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	8013      	strh	r3, [r2, #0]
  }
}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	2000076e 	.word	0x2000076e
 8002d10:	2000076c 	.word	0x2000076c
 8002d14:	20000716 	.word	0x20000716

08002d18 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002d18:	4b01      	ldr	r3, [pc, #4]	; (8002d20 <UI_SerialCommunicationTimeOutStop+0x8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]
}
 8002d1e:	4770      	bx	lr
 8002d20:	2000076c 	.word	0x2000076c

08002d24 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002d24:	4b01      	ldr	r3, [pc, #4]	; (8002d2c <UI_SerialCommunicationTimeOutStart+0x8>)
 8002d26:	224f      	movs	r2, #79	; 0x4f
 8002d28:	801a      	strh	r2, [r3, #0]
}
 8002d2a:	4770      	bx	lr
 8002d2c:	2000076c 	.word	0x2000076c

08002d30 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002d30:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002d32:	f7fd ff91 	bl	8000c58 <MC_GetSTMStateMotor1>
 8002d36:	b918      	cbnz	r0, 8002d40 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002d38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002d3c:	f7fd bf80 	b.w	8000c40 <MC_StartMotor1>
}
 8002d40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002d44:	f7fd bf82 	b.w	8000c4c <MC_StopMotor1>

08002d48 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8002d48:	b430      	push	{r4, r5}
 8002d4a:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002d4c:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 8002d4e:	2500      	movs	r5, #0
 8002d50:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 8002d52:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 8002d56:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 8002d58:	7101      	strb	r1, [r0, #4]
}
 8002d5a:	4770      	bx	lr

08002d5c <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002d5c:	7903      	ldrb	r3, [r0, #4]
 8002d5e:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002d60:	bf86      	itte	hi
 8002d62:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002d64:	2001      	movhi	r0, #1
    retVal = false;
 8002d66:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002d6c:	7d00      	ldrb	r0, [r0, #20]
 8002d6e:	4770      	bx	lr

08002d70 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002d70:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d72:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d76:	7d03      	ldrb	r3, [r0, #20]
{
 8002d78:	b084      	sub	sp, #16
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d7a:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d7e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002d82:	4614      	mov	r4, r2
 8002d84:	295b      	cmp	r1, #91	; 0x5b
 8002d86:	d85d      	bhi.n	8002e44 <UI_SetReg+0xd4>
 8002d88:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d8c:	005c014a 	.word	0x005c014a
 8002d90:	013a005c 	.word	0x013a005c
 8002d94:	0134005c 	.word	0x0134005c
 8002d98:	0128012e 	.word	0x0128012e
 8002d9c:	0116011c 	.word	0x0116011c
 8002da0:	01660110 	.word	0x01660110
 8002da4:	0154015a 	.word	0x0154015a
 8002da8:	010a014e 	.word	0x010a014e
 8002dac:	00d500f0 	.word	0x00d500f0
 8002db0:	005c005c 	.word	0x005c005c
 8002db4:	00ab00ba 	.word	0x00ab00ba
 8002db8:	009f00a5 	.word	0x009f00a5
 8002dbc:	005c0098 	.word	0x005c0098
 8002dc0:	005c005c 	.word	0x005c005c
 8002dc4:	005c005c 	.word	0x005c005c
 8002dc8:	005c005c 	.word	0x005c005c
 8002dcc:	005c005c 	.word	0x005c005c
 8002dd0:	005c005c 	.word	0x005c005c
 8002dd4:	005c005c 	.word	0x005c005c
 8002dd8:	005c005c 	.word	0x005c005c
 8002ddc:	005c005c 	.word	0x005c005c
 8002de0:	005c005c 	.word	0x005c005c
 8002de4:	005c005c 	.word	0x005c005c
 8002de8:	005c005c 	.word	0x005c005c
 8002dec:	005c005c 	.word	0x005c005c
 8002df0:	005c005c 	.word	0x005c005c
 8002df4:	005c005c 	.word	0x005c005c
 8002df8:	005c005c 	.word	0x005c005c
 8002dfc:	005c005c 	.word	0x005c005c
 8002e00:	005c005c 	.word	0x005c005c
 8002e04:	005c005c 	.word	0x005c005c
 8002e08:	005c005c 	.word	0x005c005c
 8002e0c:	0092005c 	.word	0x0092005c
 8002e10:	005c005c 	.word	0x005c005c
 8002e14:	005c005c 	.word	0x005c005c
 8002e18:	00780085 	.word	0x00780085
 8002e1c:	005c006b 	.word	0x005c006b
 8002e20:	005c005c 	.word	0x005c005c
 8002e24:	005c005c 	.word	0x005c005c
 8002e28:	005c005c 	.word	0x005c005c
 8002e2c:	005c005c 	.word	0x005c005c
 8002e30:	005c005c 	.word	0x005c005c
 8002e34:	005c005c 	.word	0x005c005c
 8002e38:	005c005c 	.word	0x005c005c
 8002e3c:	005c005c 	.word	0x005c005c
 8002e40:	005f005c 	.word	0x005f005c
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002e44:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002e46:	b004      	add	sp, #16
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002e4a:	4a9c      	ldr	r2, [pc, #624]	; (80030bc <UI_SetReg+0x34c>)
 8002e4c:	fb82 3204 	smull	r3, r2, r2, r4
 8002e50:	eba2 74e4 	sub.w	r4, r2, r4, asr #31
 8002e54:	4630      	mov	r0, r6
 8002e56:	b221      	sxth	r1, r4
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f7fd ff11 	bl	8000c80 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002e5e:	2001      	movs	r0, #1
    break;
 8002e60:	e7f1      	b.n	8002e46 <UI_SetReg+0xd6>
      sNewConstants = FF_GetFFConstants(pMCT->pFF);
 8002e62:	ae01      	add	r6, sp, #4
 8002e64:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002e66:	4630      	mov	r0, r6
 8002e68:	f005 fcb0 	bl	80087cc <FF_GetFFConstants>
      sNewConstants.wConst_2 = wValue;
 8002e6c:	9403      	str	r4, [sp, #12]
      FF_SetFFConstants(pMCT->pFF,sNewConstants);
 8002e6e:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002e70:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002e74:	f005 fc9c 	bl	80087b0 <FF_SetFFConstants>
  bool retVal = true;
 8002e78:	2001      	movs	r0, #1
    break;
 8002e7a:	e7e4      	b.n	8002e46 <UI_SetReg+0xd6>
      sNewConstants = FF_GetFFConstants(pMCT->pFF);
 8002e7c:	ae01      	add	r6, sp, #4
 8002e7e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002e80:	4630      	mov	r0, r6
 8002e82:	f005 fca3 	bl	80087cc <FF_GetFFConstants>
      sNewConstants.wConst_1D = wValue;
 8002e86:	9401      	str	r4, [sp, #4]
      FF_SetFFConstants(pMCT->pFF,sNewConstants);
 8002e88:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002e8a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002e8e:	f005 fc8f 	bl	80087b0 <FF_SetFFConstants>
  bool retVal = true;
 8002e92:	2001      	movs	r0, #1
    break;
 8002e94:	e7d7      	b.n	8002e46 <UI_SetReg+0xd6>
      sNewConstants = FF_GetFFConstants(pMCT->pFF);
 8002e96:	ae01      	add	r6, sp, #4
 8002e98:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	f005 fc96 	bl	80087cc <FF_GetFFConstants>
      sNewConstants.wConst_1Q = wValue;
 8002ea0:	9402      	str	r4, [sp, #8]
      FF_SetFFConstants(pMCT->pFF,sNewConstants);
 8002ea2:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002ea4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002ea8:	f005 fc82 	bl	80087b0 <FF_SetFFConstants>
  bool retVal = true;
 8002eac:	2001      	movs	r0, #1
    break;
 8002eae:	e7ca      	b.n	8002e46 <UI_SetReg+0xd6>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	b221      	sxth	r1, r4
 8002eb4:	f7fd ffee 	bl	8000e94 <MCI_SetIdref>
  bool retVal = true;
 8002eb8:	2001      	movs	r0, #1
    break;
 8002eba:	e7c4      	b.n	8002e46 <UI_SetReg+0xd6>
      if (pMCT->pFW)
 8002ebc:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8002ebe:	b1e0      	cbz	r0, 8002efa <UI_SetReg+0x18a>
        FW_SetVref(pMCT->pFW,(uint16_t)wValue);
 8002ec0:	b2a1      	uxth	r1, r4
 8002ec2:	f005 fd25 	bl	8008910 <FW_SetVref>
  bool retVal = true;
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	e7bd      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDFluxWeakening,(int16_t)wValue);
 8002eca:	68e8      	ldr	r0, [r5, #12]
 8002ecc:	b221      	sxth	r1, r4
 8002ece:	f003 fde1 	bl	8006a94 <PID_SetKI>
  bool retVal = true;
 8002ed2:	2001      	movs	r0, #1
    break;
 8002ed4:	e7b7      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDFluxWeakening,(int16_t)wValue);
 8002ed6:	68e8      	ldr	r0, [r5, #12]
 8002ed8:	b221      	sxth	r1, r4
 8002eda:	f003 fdd9 	bl	8006a90 <PID_SetKP>
  bool retVal = true;
 8002ede:	2001      	movs	r0, #1
    break;
 8002ee0:	e7b1      	b.n	8002e46 <UI_SetReg+0xd6>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ee2:	6902      	ldr	r2, [r0, #16]
 8002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ee8:	0f1a      	lsrs	r2, r3, #28
 8002eea:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002eec:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ef0:	f000 80c6 	beq.w	8003080 <UI_SetReg+0x310>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ef4:	2b09      	cmp	r3, #9
 8002ef6:	f000 80c6 	beq.w	8003086 <UI_SetReg+0x316>
  bool retVal = true;
 8002efa:	2001      	movs	r0, #1
}
 8002efc:	b004      	add	sp, #16
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f00:	6902      	ldr	r2, [r0, #16]
 8002f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f06:	0f1a      	lsrs	r2, r3, #28
 8002f08:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f0a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f0e:	f000 80ad 	beq.w	800306c <UI_SetReg+0x2fc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f12:	2b09      	cmp	r3, #9
 8002f14:	d1f1      	bne.n	8002efa <UI_SetReg+0x18a>
        pSPD = pMCT->pSpeedSensorAux;
 8002f16:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002f18:	2e00      	cmp	r6, #0
 8002f1a:	d0ee      	beq.n	8002efa <UI_SetReg+0x18a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002f1c:	aa01      	add	r2, sp, #4
 8002f1e:	f10d 0102 	add.w	r1, sp, #2
 8002f22:	4630      	mov	r0, r6
 8002f24:	f006 f896 	bl	8009054 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002f28:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002f2c:	b222      	sxth	r2, r4
 8002f2e:	4630      	mov	r0, r6
 8002f30:	f006 f89e 	bl	8009070 <STO_SetPLLGains>
    break;
 8002f34:	e7e1      	b.n	8002efa <UI_SetReg+0x18a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f36:	6902      	ldr	r2, [r0, #16]
 8002f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f3c:	0f1a      	lsrs	r2, r3, #28
 8002f3e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f40:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f44:	f000 8097 	beq.w	8003076 <UI_SetReg+0x306>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f48:	2b09      	cmp	r3, #9
 8002f4a:	d1d6      	bne.n	8002efa <UI_SetReg+0x18a>
        pSPD = pMCT->pSpeedSensorAux;
 8002f4c:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002f4e:	2e00      	cmp	r6, #0
 8002f50:	d0d3      	beq.n	8002efa <UI_SetReg+0x18a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002f52:	aa01      	add	r2, sp, #4
 8002f54:	f10d 0102 	add.w	r1, sp, #2
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f006 f86f 	bl	800903c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002f5e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002f62:	b222      	sxth	r2, r4
 8002f64:	4630      	mov	r0, r6
 8002f66:	f006 f871 	bl	800904c <STO_PLL_SetObserverGains>
    break;
 8002f6a:	e7c6      	b.n	8002efa <UI_SetReg+0x18a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002f6c:	6902      	ldr	r2, [r0, #16]
 8002f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f72:	0f1a      	lsrs	r2, r3, #28
 8002f74:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f76:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f7a:	d073      	beq.n	8003064 <UI_SetReg+0x2f4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	d1bc      	bne.n	8002efa <UI_SetReg+0x18a>
        pSPD = pMCT->pSpeedSensorAux;
 8002f80:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002f82:	2e00      	cmp	r6, #0
 8002f84:	d0b9      	beq.n	8002efa <UI_SetReg+0x18a>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002f86:	aa01      	add	r2, sp, #4
 8002f88:	f10d 0102 	add.w	r1, sp, #2
 8002f8c:	4630      	mov	r0, r6
 8002f8e:	f006 f855 	bl	800903c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8002f92:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002f96:	b221      	sxth	r1, r4
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f006 f857 	bl	800904c <STO_PLL_SetObserverGains>
    break;
 8002f9e:	e7ac      	b.n	8002efa <UI_SetReg+0x18a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002fa0:	68a8      	ldr	r0, [r5, #8]
 8002fa2:	b221      	sxth	r1, r4
 8002fa4:	f003 fd8a 	bl	8006abc <PID_SetKD>
  bool retVal = true;
 8002fa8:	2001      	movs	r0, #1
    break;
 8002faa:	e74c      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002fac:	6868      	ldr	r0, [r5, #4]
 8002fae:	b221      	sxth	r1, r4
 8002fb0:	f003 fd70 	bl	8006a94 <PID_SetKI>
  bool retVal = true;
 8002fb4:	2001      	movs	r0, #1
    break;
 8002fb6:	e746      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002fb8:	6868      	ldr	r0, [r5, #4]
 8002fba:	b221      	sxth	r1, r4
 8002fbc:	f003 fd68 	bl	8006a90 <PID_SetKP>
  bool retVal = true;
 8002fc0:	2001      	movs	r0, #1
    break;
 8002fc2:	e740      	b.n	8002e46 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8002fc4:	4630      	mov	r0, r6
 8002fc6:	f7fd ff37 	bl	8000e38 <MCI_GetIqdref>
 8002fca:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002fcc:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	9901      	ldr	r1, [sp, #4]
 8002fd4:	f7fd fe6a 	bl	8000cac <MCI_SetCurrentReferences>
  bool retVal = true;
 8002fd8:	2001      	movs	r0, #1
    break;
 8002fda:	e734      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002fdc:	6828      	ldr	r0, [r5, #0]
 8002fde:	b221      	sxth	r1, r4
 8002fe0:	f003 fd6c 	bl	8006abc <PID_SetKD>
  bool retVal = true;
 8002fe4:	2001      	movs	r0, #1
    break;
 8002fe6:	e72e      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002fe8:	6828      	ldr	r0, [r5, #0]
 8002fea:	b221      	sxth	r1, r4
 8002fec:	f003 fd52 	bl	8006a94 <PID_SetKI>
  bool retVal = true;
 8002ff0:	2001      	movs	r0, #1
    break;
 8002ff2:	e728      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002ff4:	6828      	ldr	r0, [r5, #0]
 8002ff6:	b221      	sxth	r1, r4
 8002ff8:	f003 fd4a 	bl	8006a90 <PID_SetKP>
  bool retVal = true;
 8002ffc:	2001      	movs	r0, #1
    break;
 8002ffe:	e722      	b.n	8002e46 <UI_SetReg+0xd6>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8003000:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003004:	d050      	beq.n	80030a8 <UI_SetReg+0x338>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8003006:	2c01      	cmp	r4, #1
 8003008:	f47f af77 	bne.w	8002efa <UI_SetReg+0x18a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800300c:	4630      	mov	r0, r6
 800300e:	f7fd fee5 	bl	8000ddc <MCI_GetMecSpeedRefUnit>
 8003012:	2200      	movs	r2, #0
 8003014:	4601      	mov	r1, r0
 8003016:	4630      	mov	r0, r6
 8003018:	f7fd fe32 	bl	8000c80 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800301c:	4620      	mov	r0, r4
 800301e:	e712      	b.n	8002e46 <UI_SetReg+0xd6>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8003020:	b2e1      	uxtb	r1, r4
 8003022:	f7ff fe9b 	bl	8002d5c <UI_SelectMC>
    break;
 8003026:	e70e      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8003028:	68a8      	ldr	r0, [r5, #8]
 800302a:	b221      	sxth	r1, r4
 800302c:	f003 fd32 	bl	8006a94 <PID_SetKI>
  bool retVal = true;
 8003030:	2001      	movs	r0, #1
    break;
 8003032:	e708      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8003034:	68a8      	ldr	r0, [r5, #8]
 8003036:	b221      	sxth	r1, r4
 8003038:	f003 fd2a 	bl	8006a90 <PID_SetKP>
  bool retVal = true;
 800303c:	2001      	movs	r0, #1
    break;
 800303e:	e702      	b.n	8002e46 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8003040:	4630      	mov	r0, r6
 8003042:	f7fd fef9 	bl	8000e38 <MCI_GetIqdref>
 8003046:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8003048:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 800304c:	4630      	mov	r0, r6
 800304e:	9901      	ldr	r1, [sp, #4]
 8003050:	f7fd fe2c 	bl	8000cac <MCI_SetCurrentReferences>
  bool retVal = true;
 8003054:	2001      	movs	r0, #1
    break;
 8003056:	e6f6      	b.n	8002e46 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8003058:	6868      	ldr	r0, [r5, #4]
 800305a:	b221      	sxth	r1, r4
 800305c:	f003 fd2e 	bl	8006abc <PID_SetKD>
  bool retVal = true;
 8003060:	2001      	movs	r0, #1
    break;
 8003062:	e6f0      	b.n	8002e46 <UI_SetReg+0xd6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003064:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003066:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003068:	d18b      	bne.n	8002f82 <UI_SetReg+0x212>
 800306a:	e789      	b.n	8002f80 <UI_SetReg+0x210>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800306c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800306e:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003070:	f47f af52 	bne.w	8002f18 <UI_SetReg+0x1a8>
 8003074:	e74f      	b.n	8002f16 <UI_SetReg+0x1a6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003076:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003078:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800307a:	f47f af68 	bne.w	8002f4e <UI_SetReg+0x1de>
 800307e:	e765      	b.n	8002f4c <UI_SetReg+0x1dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003080:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003082:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003084:	d100      	bne.n	8003088 <UI_SetReg+0x318>
        pSPD = pMCT->pSpeedSensorAux;
 8003086:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8003088:	2e00      	cmp	r6, #0
 800308a:	f43f af36 	beq.w	8002efa <UI_SetReg+0x18a>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800308e:	aa01      	add	r2, sp, #4
 8003090:	f10d 0102 	add.w	r1, sp, #2
 8003094:	4630      	mov	r0, r6
 8003096:	f005 ffdd 	bl	8009054 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 800309a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 800309e:	b221      	sxth	r1, r4
 80030a0:	4630      	mov	r0, r6
 80030a2:	f005 ffe5 	bl	8009070 <STO_SetPLLGains>
    break;
 80030a6:	e728      	b.n	8002efa <UI_SetReg+0x18a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80030a8:	4630      	mov	r0, r6
 80030aa:	f7fd feef 	bl	8000e8c <MCI_GetTeref>
 80030ae:	4622      	mov	r2, r4
 80030b0:	4601      	mov	r1, r0
 80030b2:	4630      	mov	r0, r6
 80030b4:	f7fd fdf0 	bl	8000c98 <MCI_ExecTorqueRamp>
  bool retVal = true;
 80030b8:	2001      	movs	r0, #1
 80030ba:	e6c4      	b.n	8002e46 <UI_SetReg+0xd6>
 80030bc:	2aaaaaab 	.word	0x2aaaaaab

080030c0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80030c0:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030c2:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80030c6:	7d03      	ldrb	r3, [r0, #20]
{
 80030c8:	b09e      	sub	sp, #120	; 0x78
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80030ca:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030ce:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	f000 8089 	beq.w	80031ea <UI_GetReg+0x12a>
  {
    *success = true;
 80030d8:	2401      	movs	r4, #1
 80030da:	7014      	strb	r4, [r2, #0]
  }

  switch (bRegID)
 80030dc:	2981      	cmp	r1, #129	; 0x81
 80030de:	f200 82ca 	bhi.w	8003676 <UI_GetReg+0x5b6>
 80030e2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80030e6:	01b3      	.short	0x01b3
 80030e8:	023101af 	.word	0x023101af
 80030ec:	01d001d7 	.word	0x01d001d7
 80030f0:	02bf018e 	.word	0x02bf018e
 80030f4:	0105029b 	.word	0x0105029b
 80030f8:	01a701ab 	.word	0x01a701ab
 80030fc:	00fd010e 	.word	0x00fd010e
 8003100:	0248024c 	.word	0x0248024c
 8003104:	02350244 	.word	0x02350244
 8003108:	02c80289 	.word	0x02c80289
 800310c:	027902c8 	.word	0x027902c8
 8003110:	02630267 	.word	0x02630267
 8003114:	0258025f 	.word	0x0258025f
 8003118:	02500254 	.word	0x02500254
 800311c:	02c8010a 	.word	0x02c8010a
 8003120:	022a02c8 	.word	0x022a02c8
 8003124:	02200225 	.word	0x02200225
 8003128:	02a40219 	.word	0x02a40219
 800312c:	0214029f 	.word	0x0214029f
 8003130:	02c302ab 	.word	0x02c302ab
 8003134:	02200225 	.word	0x02200225
 8003138:	00fd0105 	.word	0x00fd0105
 800313c:	02ba020f 	.word	0x02ba020f
 8003140:	02b002b5 	.word	0x02b002b5
 8003144:	02c802c8 	.word	0x02c802c8
 8003148:	016a017b 	.word	0x016a017b
 800314c:	01460158 	.word	0x01460158
 8003150:	01220134 	.word	0x01220134
 8003154:	02c802c8 	.word	0x02c802c8
 8003158:	02c802c8 	.word	0x02c802c8
 800315c:	02c802c8 	.word	0x02c802c8
 8003160:	02c802c8 	.word	0x02c802c8
 8003164:	0114011b 	.word	0x0114011b
 8003168:	01fb00fd 	.word	0x01fb00fd
 800316c:	02c801e7 	.word	0x02c801e7
 8003170:	01e102c8 	.word	0x01e102c8
 8003174:	01a101db 	.word	0x01a101db
 8003178:	0197019c 	.word	0x0197019c
 800317c:	01cb0192 	.word	0x01cb0192
 8003180:	02c802c8 	.word	0x02c802c8
 8003184:	02c802c8 	.word	0x02c802c8
 8003188:	02c802c8 	.word	0x02c802c8
 800318c:	02c802c8 	.word	0x02c802c8
 8003190:	02c802c8 	.word	0x02c802c8
 8003194:	02c802c8 	.word	0x02c802c8
 8003198:	02c802c8 	.word	0x02c802c8
 800319c:	02c801be 	.word	0x02c801be
 80031a0:	02c802c8 	.word	0x02c802c8
 80031a4:	02c802c8 	.word	0x02c802c8
 80031a8:	02c802c8 	.word	0x02c802c8
 80031ac:	02c802c8 	.word	0x02c802c8
 80031b0:	02c802c8 	.word	0x02c802c8
 80031b4:	02c802c8 	.word	0x02c802c8
 80031b8:	02c802c8 	.word	0x02c802c8
 80031bc:	02c802c8 	.word	0x02c802c8
 80031c0:	01ba02c8 	.word	0x01ba02c8
 80031c4:	011201b6 	.word	0x011201b6
 80031c8:	010202c8 	.word	0x010202c8
 80031cc:	02c80102 	.word	0x02c80102
 80031d0:	02c802c8 	.word	0x02c802c8
 80031d4:	02c802c8 	.word	0x02c802c8
 80031d8:	02c802c8 	.word	0x02c802c8
 80031dc:	02c802c8 	.word	0x02c802c8
 80031e0:	02c802c8 	.word	0x02c802c8
 80031e4:	02c802c8 	.word	0x02c802c8
 80031e8:	00fa      	.short	0x00fa
 80031ea:	2973      	cmp	r1, #115	; 0x73
 80031ec:	d875      	bhi.n	80032da <UI_GetReg+0x21a>
 80031ee:	e8df f011 	tbh	[pc, r1, lsl #1]
 80031f2:	012d      	.short	0x012d
 80031f4:	01ab0129 	.word	0x01ab0129
 80031f8:	014a0151 	.word	0x014a0151
 80031fc:	02390108 	.word	0x02390108
 8003200:	007f0215 	.word	0x007f0215
 8003204:	01210125 	.word	0x01210125
 8003208:	00770088 	.word	0x00770088
 800320c:	01c201c6 	.word	0x01c201c6
 8003210:	01af01be 	.word	0x01af01be
 8003214:	00740203 	.word	0x00740203
 8003218:	01f30074 	.word	0x01f30074
 800321c:	01dd01e1 	.word	0x01dd01e1
 8003220:	01d201d9 	.word	0x01d201d9
 8003224:	01ca01ce 	.word	0x01ca01ce
 8003228:	00740084 	.word	0x00740084
 800322c:	01a40074 	.word	0x01a40074
 8003230:	019a019f 	.word	0x019a019f
 8003234:	021e0193 	.word	0x021e0193
 8003238:	018e0219 	.word	0x018e0219
 800323c:	023d0225 	.word	0x023d0225
 8003240:	019a019f 	.word	0x019a019f
 8003244:	0077007f 	.word	0x0077007f
 8003248:	02340189 	.word	0x02340189
 800324c:	022a022f 	.word	0x022a022f
 8003250:	00740074 	.word	0x00740074
 8003254:	00e400f5 	.word	0x00e400f5
 8003258:	00c000d2 	.word	0x00c000d2
 800325c:	009c00ae 	.word	0x009c00ae
 8003260:	00740074 	.word	0x00740074
 8003264:	00740074 	.word	0x00740074
 8003268:	00740074 	.word	0x00740074
 800326c:	00740074 	.word	0x00740074
 8003270:	008e0095 	.word	0x008e0095
 8003274:	01750077 	.word	0x01750077
 8003278:	00740161 	.word	0x00740161
 800327c:	015b0074 	.word	0x015b0074
 8003280:	011b0155 	.word	0x011b0155
 8003284:	01110116 	.word	0x01110116
 8003288:	0145010c 	.word	0x0145010c
 800328c:	00740074 	.word	0x00740074
 8003290:	00740074 	.word	0x00740074
 8003294:	00740074 	.word	0x00740074
 8003298:	00740074 	.word	0x00740074
 800329c:	00740074 	.word	0x00740074
 80032a0:	00740074 	.word	0x00740074
 80032a4:	00740074 	.word	0x00740074
 80032a8:	00740138 	.word	0x00740138
 80032ac:	00740074 	.word	0x00740074
 80032b0:	00740074 	.word	0x00740074
 80032b4:	00740074 	.word	0x00740074
 80032b8:	00740074 	.word	0x00740074
 80032bc:	00740074 	.word	0x00740074
 80032c0:	00740074 	.word	0x00740074
 80032c4:	00740074 	.word	0x00740074
 80032c8:	00740074 	.word	0x00740074
 80032cc:	01340074 	.word	0x01340074
 80032d0:	008c0130 	.word	0x008c0130
 80032d4:	007c0074 	.word	0x007c0074
 80032d8:	007c      	.short	0x007c
  int32_t bRetVal = 0;
 80032da:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 80032dc:	b01e      	add	sp, #120	; 0x78
 80032de:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 80032e0:	4630      	mov	r0, r6
 80032e2:	f7fd fda9 	bl	8000e38 <MCI_GetIqdref>
 80032e6:	1400      	asrs	r0, r0, #16
    break;
 80032e8:	e7f8      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = CTRBDID;
 80032ea:	f242 701f 	movw	r0, #10015	; 0x271f
 80032ee:	e7f5      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80032f0:	4630      	mov	r0, r6
 80032f2:	f7fd fda1 	bl	8000e38 <MCI_GetIqdref>
 80032f6:	b200      	sxth	r0, r0
    break;
 80032f8:	e7f0      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80032fa:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80032fc:	f003 fb66 	bl	80069cc <MPM_GetAvrgElMotorPowerW>
    break;
 8003300:	e7ec      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003302:	6868      	ldr	r0, [r5, #4]
 8003304:	f003 fbdc 	bl	8006ac0 <PID_GetKD>
    break;
 8003308:	e7e8      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)(MC_UID);
 800330a:	48ba      	ldr	r0, [pc, #744]	; (80035f4 <UI_GetReg+0x534>)
 800330c:	e7e6      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800330e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003310:	f004 fec0 	bl	8008094 <STC_GetMinAppNegativeMecSpeedUnit>
 8003314:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003318:	0040      	lsls	r0, r0, #1
    break;
 800331a:	e7df      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800331c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800331e:	f004 feb7 	bl	8008090 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003322:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003326:	0040      	lsls	r0, r0, #1
    break;
 8003328:	e7d8      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800332a:	6902      	ldr	r2, [r0, #16]
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003330:	0f1a      	lsrs	r2, r3, #28
 8003332:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003334:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003338:	f000 81bd 	beq.w	80036b6 <UI_GetReg+0x5f6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800333c:	2b09      	cmp	r3, #9
 800333e:	d1cc      	bne.n	80032da <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8003340:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003342:	2800      	cmp	r0, #0
 8003344:	d0c9      	beq.n	80032da <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8003346:	f005 fe59 	bl	8008ffc <STO_PLL_GetEstimatedBemf>
 800334a:	1400      	asrs	r0, r0, #16
 800334c:	e7c6      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800334e:	6902      	ldr	r2, [r0, #16]
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003354:	0f1a      	lsrs	r2, r3, #28
 8003356:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003358:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800335c:	f000 8198 	beq.w	8003690 <UI_GetReg+0x5d0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003360:	2b09      	cmp	r3, #9
 8003362:	d1ba      	bne.n	80032da <UI_GetReg+0x21a>
        pSPD =  pMCT->pSpeedSensorAux;
 8003364:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003366:	2800      	cmp	r0, #0
 8003368:	d0b7      	beq.n	80032da <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 800336a:	f005 fe47 	bl	8008ffc <STO_PLL_GetEstimatedBemf>
 800336e:	b200      	sxth	r0, r0
 8003370:	e7b4      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003372:	6902      	ldr	r2, [r0, #16]
 8003374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003378:	0f1a      	lsrs	r2, r3, #28
 800337a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800337c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003380:	f000 8181 	beq.w	8003686 <UI_GetReg+0x5c6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003384:	2b09      	cmp	r3, #9
 8003386:	d1a8      	bne.n	80032da <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8003388:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800338a:	2800      	cmp	r0, #0
 800338c:	d0a5      	beq.n	80032da <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 800338e:	f005 fe41 	bl	8009014 <STO_PLL_GetEstimatedCurrent>
 8003392:	1400      	asrs	r0, r0, #16
 8003394:	e7a2      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003396:	6902      	ldr	r2, [r0, #16]
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800339c:	0f1a      	lsrs	r2, r3, #28
 800339e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a4:	f000 816a 	beq.w	800367c <UI_GetReg+0x5bc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033a8:	2b09      	cmp	r3, #9
 80033aa:	d196      	bne.n	80032da <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 80033ac:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d093      	beq.n	80032da <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80033b2:	f005 fe2f 	bl	8009014 <STO_PLL_GetEstimatedCurrent>
 80033b6:	b200      	sxth	r0, r0
 80033b8:	e790      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033ba:	6902      	ldr	r2, [r0, #16]
 80033bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033c0:	0f1a      	lsrs	r2, r3, #28
 80033c2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033c4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033c8:	f000 8170 	beq.w	80036ac <UI_GetReg+0x5ec>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033cc:	2b09      	cmp	r3, #9
 80033ce:	d184      	bne.n	80032da <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 80033d0:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d081      	beq.n	80032da <UI_GetReg+0x21a>
        bRetVal = SPD_GetS16Speed(pSPD);
 80033d6:	f004 fd9b 	bl	8007f10 <SPD_GetS16Speed>
 80033da:	e77f      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033dc:	6902      	ldr	r2, [r0, #16]
 80033de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033e2:	0f1a      	lsrs	r2, r3, #28
 80033e4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033e6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ea:	f000 816f 	beq.w	80036cc <UI_GetReg+0x60c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80033ee:	2b09      	cmp	r3, #9
 80033f0:	f47f af73 	bne.w	80032da <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 80033f4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80033f6:	2800      	cmp	r0, #0
 80033f8:	f43f af6f 	beq.w	80032da <UI_GetReg+0x21a>
        bRetVal = SPD_GetElAngle(pSPD);
 80033fc:	f004 fd4c 	bl	8007e98 <SPD_GetElAngle>
 8003400:	e76c      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003402:	6828      	ldr	r0, [r5, #0]
 8003404:	f003 fb48 	bl	8006a98 <PID_GetKP>
    break;
 8003408:	e768      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = FF_GetVqdAvPIout(pMCT->pFF).q;
 800340a:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800340c:	f005 f9f4 	bl	80087f8 <FF_GetVqdAvPIout>
 8003410:	b200      	sxth	r0, r0
    break;
 8003412:	e763      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = FF_GetVqdff(pMCT->pFF).d;
 8003414:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8003416:	f005 f9e3 	bl	80087e0 <FF_GetVqdff>
 800341a:	1400      	asrs	r0, r0, #16
    break;
 800341c:	e75e      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = FF_GetVqdff(pMCT->pFF).q;
 800341e:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8003420:	f005 f9de 	bl	80087e0 <FF_GetVqdff>
 8003424:	b200      	sxth	r0, r0
    break;
 8003426:	e759      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = FF_GetFFConstants(pMCT->pFF).wConst_2;
 8003428:	a81b      	add	r0, sp, #108	; 0x6c
 800342a:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800342c:	f005 f9ce 	bl	80087cc <FF_GetFFConstants>
 8003430:	981d      	ldr	r0, [sp, #116]	; 0x74
    break;
 8003432:	e753      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003434:	6868      	ldr	r0, [r5, #4]
 8003436:	f003 fb33 	bl	8006aa0 <PID_GetKI>
    break;
 800343a:	e74f      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800343c:	6868      	ldr	r0, [r5, #4]
 800343e:	f003 fb2b 	bl	8006a98 <PID_GetKP>
    break;
 8003442:	e74b      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8003444:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003446:	f004 fee5 	bl	8008214 <STM_GetFaultState>
	break;
 800344a:	e747      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 800344c:	f7ff fc8e 	bl	8002d6c <UI_GetSelectedMC>
    break;
 8003450:	e744      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003452:	6828      	ldr	r0, [r5, #0]
 8003454:	f003 fb2c 	bl	8006ab0 <PID_GetKIDivisor>
    break;
 8003458:	e740      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800345a:	6828      	ldr	r0, [r5, #0]
 800345c:	f003 fb26 	bl	8006aac <PID_GetKPDivisor>
    break;
 8003460:	e73c      	b.n	80032dc <UI_GetReg+0x21c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8003462:	4630      	mov	r0, r6
 8003464:	f7fd fc82 	bl	8000d6c <MCI_GetControlMode>
 8003468:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800346a:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800346c:	f000 8128 	beq.w	80036c0 <UI_GetReg+0x600>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8003470:	f7fd fcb4 	bl	8000ddc <MCI_GetMecSpeedRefUnit>
 8003474:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003478:	0040      	lsls	r0, r0, #1
 800347a:	e72f      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = FF_GetVqdAvPIout(pMCT->pFF).d;
 800347c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800347e:	f005 f9bb 	bl	80087f8 <FF_GetVqdAvPIout>
 8003482:	1400      	asrs	r0, r0, #16
    break;
 8003484:	e72a      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8003486:	4630      	mov	r0, r6
 8003488:	f7fd fca8 	bl	8000ddc <MCI_GetMecSpeedRefUnit>
 800348c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003490:	0040      	lsls	r0, r0, #1
    break;
 8003492:	e723      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003494:	4630      	mov	r0, r6
 8003496:	f7fd fc69 	bl	8000d6c <MCI_GetControlMode>
    break;
 800349a:	e71f      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = FF_GetFFConstants(pMCT->pFF).wConst_1D;
 800349c:	a818      	add	r0, sp, #96	; 0x60
 800349e:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80034a0:	f005 f994 	bl	80087cc <FF_GetFFConstants>
 80034a4:	9818      	ldr	r0, [sp, #96]	; 0x60
    break;
 80034a6:	e719      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = FF_GetFFConstants(pMCT->pFF).wConst_1Q;
 80034a8:	a815      	add	r0, sp, #84	; 0x54
 80034aa:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80034ac:	f005 f98e 	bl	80087cc <FF_GetFFConstants>
 80034b0:	9816      	ldr	r0, [sp, #88]	; 0x58
    break;
 80034b2:	e713      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80034b4:	6902      	ldr	r2, [r0, #16]
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ba:	0f1a      	lsrs	r2, r3, #28
 80034bc:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034be:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c2:	f000 80ee 	beq.w	80036a2 <UI_GetReg+0x5e2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034c6:	2b09      	cmp	r3, #9
 80034c8:	f47f af07 	bne.w	80032da <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 80034cc:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80034ce:	2800      	cmp	r0, #0
 80034d0:	f43f af03 	beq.w	80032da <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80034d4:	f005 fde8 	bl	80090a8 <STO_PLL_GetObservedBemfLevel>
 80034d8:	1400      	asrs	r0, r0, #16
 80034da:	e6ff      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80034dc:	6902      	ldr	r2, [r0, #16]
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e2:	0f1a      	lsrs	r2, r3, #28
 80034e4:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034e6:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ea:	f000 8103 	beq.w	80036f4 <UI_GetReg+0x634>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	f47f aef3 	bne.w	80032da <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 80034f4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80034f6:	2800      	cmp	r0, #0
 80034f8:	f43f aeef 	beq.w	80032da <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80034fc:	f005 fdd0 	bl	80090a0 <STO_PLL_GetEstimatedBemfLevel>
 8003500:	1400      	asrs	r0, r0, #16
 8003502:	e6eb      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetVqd(pMCI).q;
 8003504:	4630      	mov	r0, r6
 8003506:	f7fd fca5 	bl	8000e54 <MCI_GetVqd>
 800350a:	b200      	sxth	r0, r0
    break;
 800350c:	e6e6      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetIab(pMCI).b;
 800350e:	4630      	mov	r0, r6
 8003510:	f7fd fc68 	bl	8000de4 <MCI_GetIab>
 8003514:	1400      	asrs	r0, r0, #16
    break;
 8003516:	e6e1      	b.n	80032dc <UI_GetReg+0x21c>
      if (pMCT->pFW)
 8003518:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800351a:	2800      	cmp	r0, #0
 800351c:	f43f aedd 	beq.w	80032da <UI_GetReg+0x21a>
        bRetVal = ((int32_t)FW_GetAvVPercentage(pMCT->pFW));
 8003520:	f005 f9fa 	bl	8008918 <FW_GetAvVPercentage>
 8003524:	e6da      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003526:	4630      	mov	r0, r6
 8003528:	f7fd fc78 	bl	8000e1c <MCI_GetIqd>
 800352c:	1400      	asrs	r0, r0, #16
    break;
 800352e:	e6d5      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003530:	4630      	mov	r0, r6
 8003532:	f7fd fc73 	bl	8000e1c <MCI_GetIqd>
 8003536:	b200      	sxth	r0, r0
    break;
 8003538:	e6d0      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 800353a:	4630      	mov	r0, r6
 800353c:	f7fd fc46 	bl	8000dcc <MCI_GetAvrgMecSpeedUnit>
 8003540:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003544:	0040      	lsls	r0, r0, #1
    break;
 8003546:	e6c9      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003548:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800354a:	f004 fe55 	bl	80081f8 <STM_GetState>
	break;
 800354e:	e6c5      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003550:	6902      	ldr	r2, [r0, #16]
 8003552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003556:	0f1a      	lsrs	r2, r3, #28
 8003558:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800355a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800355e:	f000 80ce 	beq.w	80036fe <UI_GetReg+0x63e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003562:	2b09      	cmp	r3, #9
 8003564:	f000 80ce 	beq.w	8003704 <UI_GetReg+0x644>
      bRetVal = (int32_t)hPgain;
 8003568:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
    break;
 800356c:	e6b6      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800356e:	68a8      	ldr	r0, [r5, #8]
 8003570:	f003 faa6 	bl	8006ac0 <PID_GetKD>
    break;
 8003574:	e6b2      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003576:	68a8      	ldr	r0, [r5, #8]
 8003578:	f003 fa92 	bl	8006aa0 <PID_GetKI>
    break;
 800357c:	e6ae      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800357e:	68a8      	ldr	r0, [r5, #8]
 8003580:	f003 fa8a 	bl	8006a98 <PID_GetKP>
    break;
 8003584:	e6aa      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8003586:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8003588:	f003 fa64 	bl	8006a54 <NTC_GetAvTemp_C>
    break;
 800358c:	e6a6      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 800358e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003590:	f003 f98c 	bl	80068ac <VBS_GetAvBusVoltage_V>
    break;
 8003594:	e6a2      	b.n	80032dc <UI_GetReg+0x21c>
      if (pMCT->pFW)
 8003596:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8003598:	2800      	cmp	r0, #0
 800359a:	f43f ae9e 	beq.w	80032da <UI_GetReg+0x21a>
        bRetVal = (int32_t)FW_GetVref(pMCT->pFW);
 800359e:	f005 f9b9 	bl	8008914 <FW_GetVref>
 80035a2:	e69b      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = PID_GetKI(pMCT->pPIDFluxWeakening);
 80035a4:	68e8      	ldr	r0, [r5, #12]
 80035a6:	f003 fa7b 	bl	8006aa0 <PID_GetKI>
    break;
 80035aa:	e697      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = PID_GetKP(pMCT->pPIDFluxWeakening);
 80035ac:	68e8      	ldr	r0, [r5, #12]
 80035ae:	f003 fa73 	bl	8006a98 <PID_GetKP>
    break;
 80035b2:	e693      	b.n	80032dc <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80035b4:	6902      	ldr	r2, [r0, #16]
 80035b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035ba:	0f1a      	lsrs	r2, r3, #28
 80035bc:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035be:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035c2:	d06a      	beq.n	800369a <UI_GetReg+0x5da>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	d1cf      	bne.n	8003568 <UI_GetReg+0x4a8>
        pSPD = pMCT->pSpeedSensorAux;
 80035c8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80035ca:	2800      	cmp	r0, #0
 80035cc:	d0cc      	beq.n	8003568 <UI_GetReg+0x4a8>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80035ce:	aa1b      	add	r2, sp, #108	; 0x6c
 80035d0:	a918      	add	r1, sp, #96	; 0x60
 80035d2:	f005 fd3f 	bl	8009054 <STO_GetPLLGains>
 80035d6:	e7c7      	b.n	8003568 <UI_GetReg+0x4a8>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80035d8:	6902      	ldr	r2, [r0, #16]
 80035da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035de:	0f1a      	lsrs	r2, r3, #28
 80035e0:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035e2:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035e6:	d076      	beq.n	80036d6 <UI_GetReg+0x616>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035e8:	2b09      	cmp	r3, #9
 80035ea:	d077      	beq.n	80036dc <UI_GetReg+0x61c>
      bRetVal = (int32_t)hIgain;
 80035ec:	f9bd 006c 	ldrsh.w	r0, [sp, #108]	; 0x6c
    break;
 80035f0:	e674      	b.n	80032dc <UI_GetReg+0x21c>
 80035f2:	bf00      	nop
 80035f4:	34a6847a 	.word	0x34a6847a
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80035f8:	6902      	ldr	r2, [r0, #16]
 80035fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80035fe:	0f1a      	lsrs	r2, r3, #28
 8003600:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003602:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003606:	d071      	beq.n	80036ec <UI_GetReg+0x62c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003608:	2b09      	cmp	r3, #9
 800360a:	d1ef      	bne.n	80035ec <UI_GetReg+0x52c>
        pSPD = pMCT->pSpeedSensorAux;
 800360c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800360e:	2800      	cmp	r0, #0
 8003610:	d0ec      	beq.n	80035ec <UI_GetReg+0x52c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8003612:	aa1b      	add	r2, sp, #108	; 0x6c
 8003614:	a918      	add	r1, sp, #96	; 0x60
 8003616:	f005 fd11 	bl	800903c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 800361a:	e7e7      	b.n	80035ec <UI_GetReg+0x52c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800361c:	6828      	ldr	r0, [r5, #0]
 800361e:	f003 fa4f 	bl	8006ac0 <PID_GetKD>
    break;
 8003622:	e65b      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetIab(pMCI).a;
 8003624:	4630      	mov	r0, r6
 8003626:	f7fd fbdd 	bl	8000de4 <MCI_GetIab>
 800362a:	b200      	sxth	r0, r0
    break;
 800362c:	e656      	b.n	80032dc <UI_GetReg+0x21c>
      if (pMCT->pRevupCtrl)
 800362e:	6968      	ldr	r0, [r5, #20]
 8003630:	2800      	cmp	r0, #0
 8003632:	f43f ae52 	beq.w	80032da <UI_GetReg+0x21a>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8003636:	f005 fa6d 	bl	8008b14 <RUC_GetNumberOfPhases>
 800363a:	e64f      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 800363c:	4630      	mov	r0, r6
 800363e:	f7fd fbdf 	bl	8000e00 <MCI_GetIalphabeta>
 8003642:	b200      	sxth	r0, r0
    break;
 8003644:	e64a      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003646:	4630      	mov	r0, r6
 8003648:	f7fd fc12 	bl	8000e70 <MCI_GetValphabeta>
 800364c:	1400      	asrs	r0, r0, #16
    break;
 800364e:	e645      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003650:	4630      	mov	r0, r6
 8003652:	f7fd fc0d 	bl	8000e70 <MCI_GetValphabeta>
 8003656:	b200      	sxth	r0, r0
    break;
 8003658:	e640      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetVqd(pMCI).d;
 800365a:	4630      	mov	r0, r6
 800365c:	f7fd fbfa 	bl	8000e54 <MCI_GetVqd>
 8003660:	1400      	asrs	r0, r0, #16
    break;
 8003662:	e63b      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8003664:	6828      	ldr	r0, [r5, #0]
 8003666:	f003 fa1b 	bl	8006aa0 <PID_GetKI>
    break;
 800366a:	e637      	b.n	80032dc <UI_GetReg+0x21c>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 800366c:	4630      	mov	r0, r6
 800366e:	f7fd fbc7 	bl	8000e00 <MCI_GetIalphabeta>
 8003672:	1400      	asrs	r0, r0, #16
    break;
 8003674:	e632      	b.n	80032dc <UI_GetReg+0x21c>
        *success = false;
 8003676:	2000      	movs	r0, #0
 8003678:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800367a:	e62f      	b.n	80032dc <UI_GetReg+0x21c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800367c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800367e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003680:	f47f ae95 	bne.w	80033ae <UI_GetReg+0x2ee>
 8003684:	e692      	b.n	80033ac <UI_GetReg+0x2ec>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003686:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003688:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800368a:	f47f ae7e 	bne.w	800338a <UI_GetReg+0x2ca>
 800368e:	e67b      	b.n	8003388 <UI_GetReg+0x2c8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003690:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003692:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003694:	f47f ae67 	bne.w	8003366 <UI_GetReg+0x2a6>
 8003698:	e664      	b.n	8003364 <UI_GetReg+0x2a4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800369a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 800369c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800369e:	d194      	bne.n	80035ca <UI_GetReg+0x50a>
 80036a0:	e792      	b.n	80035c8 <UI_GetReg+0x508>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036a2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036a4:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036a6:	f47f af12 	bne.w	80034ce <UI_GetReg+0x40e>
 80036aa:	e70f      	b.n	80034cc <UI_GetReg+0x40c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036ac:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036ae:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036b0:	f47f ae8f 	bne.w	80033d2 <UI_GetReg+0x312>
 80036b4:	e68c      	b.n	80033d0 <UI_GetReg+0x310>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036b6:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 80036b8:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036ba:	f47f ae42 	bne.w	8003342 <UI_GetReg+0x282>
 80036be:	e63f      	b.n	8003340 <UI_GetReg+0x280>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80036c0:	f7fd fb78 	bl	8000db4 <MCI_GetLastRampFinalSpeed>
 80036c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80036c8:	0040      	lsls	r0, r0, #1
 80036ca:	e607      	b.n	80032dc <UI_GetReg+0x21c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036cc:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036ce:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036d0:	f47f ae91 	bne.w	80033f6 <UI_GetReg+0x336>
 80036d4:	e68e      	b.n	80033f4 <UI_GetReg+0x334>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036d6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036d8:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036da:	d100      	bne.n	80036de <UI_GetReg+0x61e>
        pSPD = pMCT->pSpeedSensorAux;
 80036dc:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80036de:	2800      	cmp	r0, #0
 80036e0:	d084      	beq.n	80035ec <UI_GetReg+0x52c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80036e2:	aa1b      	add	r2, sp, #108	; 0x6c
 80036e4:	a918      	add	r1, sp, #96	; 0x60
 80036e6:	f005 fcb5 	bl	8009054 <STO_GetPLLGains>
 80036ea:	e77f      	b.n	80035ec <UI_GetReg+0x52c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036ec:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036ee:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036f0:	d18d      	bne.n	800360e <UI_GetReg+0x54e>
 80036f2:	e78b      	b.n	800360c <UI_GetReg+0x54c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036f4:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80036f6:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036f8:	f47f aefd 	bne.w	80034f6 <UI_GetReg+0x436>
 80036fc:	e6fa      	b.n	80034f4 <UI_GetReg+0x434>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80036fe:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8003700:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8003702:	d100      	bne.n	8003706 <UI_GetReg+0x646>
        pSPD = pMCT->pSpeedSensorAux;
 8003704:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8003706:	2800      	cmp	r0, #0
 8003708:	f43f af2e 	beq.w	8003568 <UI_GetReg+0x4a8>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800370c:	aa1b      	add	r2, sp, #108	; 0x6c
 800370e:	a918      	add	r1, sp, #96	; 0x60
 8003710:	f005 fc94 	bl	800903c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 8003714:	e728      	b.n	8003568 <UI_GetReg+0x4a8>
 8003716:	bf00      	nop

08003718 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8003718:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800371a:	6883      	ldr	r3, [r0, #8]
 800371c:	7d02      	ldrb	r2, [r0, #20]
 800371e:	3901      	subs	r1, #1
 8003720:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8003724:	290d      	cmp	r1, #13
 8003726:	d808      	bhi.n	800373a <UI_ExecCmd+0x22>
 8003728:	e8df f001 	tbb	[pc, r1]
 800372c:	0e091419 	.word	0x0e091419
 8003730:	231e100e 	.word	0x231e100e
 8003734:	07070728 	.word	0x07070728
 8003738:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800373a:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 800373c:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 800373e:	4620      	mov	r0, r4
 8003740:	f7fd fb10 	bl	8000d64 <MCI_GetSTMState>
 8003744:	2806      	cmp	r0, #6
 8003746:	d01e      	beq.n	8003786 <UI_ExecCmd+0x6e>
  bool retVal = true;
 8003748:	2001      	movs	r0, #1
}
 800374a:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 800374c:	4620      	mov	r0, r4
 800374e:	f7fd fb09 	bl	8000d64 <MCI_GetSTMState>
 8003752:	b120      	cbz	r0, 800375e <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8003754:	4620      	mov	r0, r4
 8003756:	f7fd fabd 	bl	8000cd4 <MCI_StopMotor>
  bool retVal = true;
 800375a:	2001      	movs	r0, #1
}
 800375c:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 800375e:	4620      	mov	r0, r4
 8003760:	f7fd faae 	bl	8000cc0 <MCI_StartMotor>
  bool retVal = true;
 8003764:	2001      	movs	r0, #1
}
 8003766:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8003768:	4620      	mov	r0, r4
 800376a:	f7fd fab7 	bl	8000cdc <MCI_FaultAcknowledged>
  bool retVal = true;
 800376e:	2001      	movs	r0, #1
}
 8003770:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8003772:	4620      	mov	r0, r4
 8003774:	f7fd fab6 	bl	8000ce4 <MCI_EncoderAlign>
  bool retVal = true;
 8003778:	2001      	movs	r0, #1
}
 800377a:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 800377c:	4620      	mov	r0, r4
 800377e:	f7fd fb93 	bl	8000ea8 <MCI_Clear_Iqdref>
  bool retVal = true;
 8003782:	2001      	movs	r0, #1
}
 8003784:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8003786:	4620      	mov	r0, r4
 8003788:	f7fd fb1c 	bl	8000dc4 <MCI_StopRamp>
  bool retVal = true;
 800378c:	2001      	movs	r0, #1
}
 800378e:	bd10      	pop	{r4, pc}

08003790 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8003790:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003794:	7d04      	ldrb	r4, [r0, #20]
 8003796:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8003798:	fb83 c301 	smull	ip, r3, r3, r1
 800379c:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80037a0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80037a4:	b209      	sxth	r1, r1
 80037a6:	f7fd fa6b 	bl	8000c80 <MCI_ExecSpeedRamp>
  return true;
}
 80037aa:	2001      	movs	r0, #1
 80037ac:	bd10      	pop	{r4, pc}
 80037ae:	bf00      	nop
 80037b0:	2aaaaaab 	.word	0x2aaaaaab

080037b4 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80037b4:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80037b6:	6883      	ldr	r3, [r0, #8]
 80037b8:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80037ba:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80037be:	f7fd fa6b 	bl	8000c98 <MCI_ExecTorqueRamp>
  return true;
}
 80037c2:	2001      	movs	r0, #1
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	bf00      	nop

080037c8 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80037ca:	7d04      	ldrb	r4, [r0, #20]
 80037cc:	68c0      	ldr	r0, [r0, #12]
 80037ce:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80037d2:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 80037d4:	b19c      	cbz	r4, 80037fe <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80037d6:	4620      	mov	r0, r4
 80037d8:	461e      	mov	r6, r3
 80037da:	4617      	mov	r7, r2
 80037dc:	460d      	mov	r5, r1
 80037de:	f005 f983 	bl	8008ae8 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80037e2:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 80037e4:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80037e6:	4620      	mov	r0, r4
 80037e8:	f005 f984 	bl	8008af4 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80037ec:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 80037ee:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 80037f0:	4620      	mov	r0, r4
 80037f2:	f005 f987 	bl	8008b04 <RUC_GetPhaseFinalTorque>
 80037f6:	9b06      	ldr	r3, [sp, #24]
 80037f8:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 80037fa:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 80037fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 80037fe:	4620      	mov	r0, r4
}
 8003800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003802:	bf00      	nop

08003804 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003804:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003806:	7d04      	ldrb	r4, [r0, #20]
 8003808:	68c0      	ldr	r0, [r0, #12]
{
 800380a:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800380c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8003810:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003814:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003816:	9001      	str	r0, [sp, #4]
{
 8003818:	461d      	mov	r5, r3
 800381a:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800381c:	f005 f952 	bl	8008ac4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8003820:	9801      	ldr	r0, [sp, #4]
 8003822:	462a      	mov	r2, r5
 8003824:	4621      	mov	r1, r4
 8003826:	f005 f953 	bl	8008ad0 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 800382a:	9801      	ldr	r0, [sp, #4]
 800382c:	4632      	mov	r2, r6
 800382e:	4621      	mov	r1, r4
 8003830:	f005 f954 	bl	8008adc <RUC_SetPhaseFinalTorque>
  return true;
}
 8003834:	2001      	movs	r0, #1
 8003836:	b002      	add	sp, #8
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	bf00      	nop

0800383c <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 800383c:	b410      	push	{r4}
 800383e:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003840:	7d04      	ldrb	r4, [r0, #20]
 8003842:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8003844:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8003848:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 800384c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003850:	9901      	ldr	r1, [sp, #4]
}
 8003852:	b003      	add	sp, #12
 8003854:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8003858:	f7fd ba28 	b.w	8000cac <MCI_SetCurrentReferences>

0800385c <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 800385c:	2000      	movs	r0, #0
 800385e:	4770      	bx	lr

08003860 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <SystemInit+0x18>)
 8003862:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003866:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800386a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800386e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003872:	6099      	str	r1, [r3, #8]
#endif
}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800387c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800387e:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <HAL_InitTick+0x40>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	b90b      	cbnz	r3, 8003888 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003884:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003886:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003888:	490d      	ldr	r1, [pc, #52]	; (80038c0 <HAL_InitTick+0x44>)
 800388a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800388e:	4605      	mov	r5, r0
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	6808      	ldr	r0, [r1, #0]
 8003896:	fbb0 f0f3 	udiv	r0, r0, r3
 800389a:	f001 f835 	bl	8004908 <HAL_SYSTICK_Config>
 800389e:	4604      	mov	r4, r0
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d1ef      	bne.n	8003884 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038a4:	2d0f      	cmp	r5, #15
 80038a6:	d8ed      	bhi.n	8003884 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038a8:	4602      	mov	r2, r0
 80038aa:	4629      	mov	r1, r5
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f000 ffe4 	bl	800487c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_InitTick+0x48>)
 80038b6:	4620      	mov	r0, r4
 80038b8:	601d      	str	r5, [r3, #0]
}
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	2000071c 	.word	0x2000071c
 80038c0:	20000718 	.word	0x20000718
 80038c4:	20000720 	.word	0x20000720

080038c8 <HAL_Init>:
{
 80038c8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ca:	2003      	movs	r0, #3
 80038cc:	f000 ffc2 	bl	8004854 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038d0:	2004      	movs	r0, #4
 80038d2:	f7ff ffd3 	bl	800387c <HAL_InitTick>
 80038d6:	b110      	cbz	r0, 80038de <HAL_Init+0x16>
    status = HAL_ERROR;
 80038d8:	2401      	movs	r4, #1
}
 80038da:	4620      	mov	r0, r4
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	4604      	mov	r4, r0
    HAL_MspInit();
 80038e0:	f7fe fec2 	bl	8002668 <HAL_MspInit>
}
 80038e4:	4620      	mov	r0, r4
 80038e6:	bd10      	pop	{r4, pc}

080038e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80038e8:	4a03      	ldr	r2, [pc, #12]	; (80038f8 <HAL_IncTick+0x10>)
 80038ea:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_IncTick+0x14>)
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	6809      	ldr	r1, [r1, #0]
 80038f0:	440b      	add	r3, r1
 80038f2:	6013      	str	r3, [r2, #0]
}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000c74 	.word	0x20000c74
 80038fc:	2000071c 	.word	0x2000071c

08003900 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003900:	4b01      	ldr	r3, [pc, #4]	; (8003908 <HAL_GetTick+0x8>)
 8003902:	6818      	ldr	r0, [r3, #0]
}
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000c74 	.word	0x20000c74

0800390c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800390c:	b538      	push	{r3, r4, r5, lr}
 800390e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff fff6 	bl	8003900 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003914:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003916:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003918:	d002      	beq.n	8003920 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <HAL_Delay+0x20>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003920:	f7ff ffee 	bl	8003900 <HAL_GetTick>
 8003924:	1b43      	subs	r3, r0, r5
 8003926:	42a3      	cmp	r3, r4
 8003928:	d3fa      	bcc.n	8003920 <HAL_Delay+0x14>
  {
  }
}
 800392a:	bd38      	pop	{r3, r4, r5, pc}
 800392c:	2000071c 	.word	0x2000071c

08003930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003934:	2300      	movs	r3, #0
 8003936:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003938:	2800      	cmp	r0, #0
 800393a:	f000 80c9 	beq.w	8003ad0 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800393e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003940:	4604      	mov	r4, r0
 8003942:	2d00      	cmp	r5, #0
 8003944:	f000 8092 	beq.w	8003a6c <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003948:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800394a:	6893      	ldr	r3, [r2, #8]
 800394c:	009d      	lsls	r5, r3, #2
 800394e:	d505      	bpl.n	800395c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003950:	6893      	ldr	r3, [r2, #8]
 8003952:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003956:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800395a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800395c:	6893      	ldr	r3, [r2, #8]
 800395e:	00d8      	lsls	r0, r3, #3
 8003960:	d417      	bmi.n	8003992 <HAL_ADC_Init+0x62>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003962:	4b70      	ldr	r3, [pc, #448]	; (8003b24 <HAL_ADC_Init+0x1f4>)
  MODIFY_REG(ADCx->CR,
 8003964:	6891      	ldr	r1, [r2, #8]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	486f      	ldr	r0, [pc, #444]	; (8003b28 <HAL_ADC_Init+0x1f8>)
 800396a:	099b      	lsrs	r3, r3, #6
 800396c:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003970:	fba0 0303 	umull	r0, r3, r0, r3
 8003974:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800397e:	6091      	str	r1, [r2, #8]
 8003980:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003982:	9b01      	ldr	r3, [sp, #4]
 8003984:	b12b      	cbz	r3, 8003992 <HAL_ADC_Init+0x62>
    {
      wait_loop_index--;
 8003986:	9b01      	ldr	r3, [sp, #4]
 8003988:	3b01      	subs	r3, #1
 800398a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800398c:	9b01      	ldr	r3, [sp, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <HAL_ADC_Init+0x56>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003992:	6893      	ldr	r3, [r2, #8]
 8003994:	00d9      	lsls	r1, r3, #3
 8003996:	d45b      	bmi.n	8003a50 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003998:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800399a:	f043 0310 	orr.w	r3, r3, #16
 800399e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039a8:	6893      	ldr	r3, [r2, #8]
 80039aa:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 80039ae:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039b4:	d153      	bne.n	8003a5e <HAL_ADC_Init+0x12e>
 80039b6:	06db      	lsls	r3, r3, #27
 80039b8:	d451      	bmi.n	8003a5e <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039c6:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c8:	07de      	lsls	r6, r3, #31
 80039ca:	d40e      	bmi.n	80039ea <HAL_ADC_Init+0xba>
 80039cc:	4b57      	ldr	r3, [pc, #348]	; (8003b2c <HAL_ADC_Init+0x1fc>)
 80039ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80039d2:	6889      	ldr	r1, [r1, #8]
 80039d4:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039d6:	430b      	orrs	r3, r1
 80039d8:	07dd      	lsls	r5, r3, #31
 80039da:	d406      	bmi.n	80039ea <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039dc:	4954      	ldr	r1, [pc, #336]	; (8003b30 <HAL_ADC_Init+0x200>)
 80039de:	6865      	ldr	r5, [r4, #4]
 80039e0:	688b      	ldr	r3, [r1, #8]
 80039e2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80039e6:	432b      	orrs	r3, r5
 80039e8:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80039ea:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 80039ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039f0:	432b      	orrs	r3, r5
 80039f2:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039f4:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039f6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80039fa:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039fe:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a04:	d05f      	beq.n	8003ac6 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003a08:	b121      	cbz	r1, 8003a14 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8003a0a:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a0c:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a10:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a12:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a14:	68d6      	ldr	r6, [r2, #12]
 8003a16:	4947      	ldr	r1, [pc, #284]	; (8003b34 <HAL_ADC_Init+0x204>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a18:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a1a:	4031      	ands	r1, r6
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a20:	6913      	ldr	r3, [r2, #16]
 8003a22:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003a26:	432b      	orrs	r3, r5
 8003a28:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a2a:	6893      	ldr	r3, [r2, #8]
 8003a2c:	0759      	lsls	r1, r3, #29
 8003a2e:	d523      	bpl.n	8003a78 <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a30:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a32:	6963      	ldr	r3, [r4, #20]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d04e      	beq.n	8003ad6 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a3a:	f023 030f 	bic.w	r3, r3, #15
 8003a3e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a50:	6893      	ldr	r3, [r2, #8]
 8003a52:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a56:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a5a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a5c:	d0ab      	beq.n	80039b6 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003a60:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a62:	f043 0310 	orr.w	r3, r3, #16
 8003a66:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003a6c:	f7fe fe1c 	bl	80026a8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003a72:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003a76:	e767      	b.n	8003948 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a78:	6893      	ldr	r3, [r2, #8]
 8003a7a:	071b      	lsls	r3, r3, #28
 8003a7c:	d4d9      	bmi.n	8003a32 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a7e:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a80:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a84:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8003a86:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a88:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a8c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a8e:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a92:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a96:	430b      	orrs	r3, r1
 8003a98:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a9a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003a9c:	bb1d      	cbnz	r5, 8003ae6 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa2:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003aa4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003aa8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003aac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ab0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003ab4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d021      	beq.n	8003b00 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003abc:	6913      	ldr	r3, [r2, #16]
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6113      	str	r3, [r2, #16]
 8003ac4:	e7b5      	b.n	8003a32 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ac6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003ac8:	3901      	subs	r1, #1
 8003aca:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003ace:	e79a      	b.n	8003a06 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8003ad0:	2001      	movs	r0, #1
}
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ad6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003ad8:	6a23      	ldr	r3, [r4, #32]
 8003ada:	f021 010f 	bic.w	r1, r1, #15
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae4:	e7ac      	b.n	8003a40 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003aec:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003af0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003af8:	432b      	orrs	r3, r5
 8003afa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003afe:	e7d9      	b.n	8003ab4 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b00:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8003b04:	6911      	ldr	r1, [r2, #16]
 8003b06:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8003b08:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003b0c:	f021 0104 	bic.w	r1, r1, #4
 8003b10:	4333      	orrs	r3, r6
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003b16:	432b      	orrs	r3, r5
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6113      	str	r3, [r2, #16]
 8003b20:	e787      	b.n	8003a32 <HAL_ADC_Init+0x102>
 8003b22:	bf00      	nop
 8003b24:	20000718 	.word	0x20000718
 8003b28:	053e2d63 	.word	0x053e2d63
 8003b2c:	50000100 	.word	0x50000100
 8003b30:	50000300 	.word	0x50000300
 8003b34:	fff04007 	.word	0xfff04007

08003b38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b3a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8003b3e:	b083      	sub	sp, #12
 8003b40:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003b42:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0;
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003b4a:	f000 8143 	beq.w	8003dd4 <HAL_ADC_ConfigChannel+0x29c>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b4e:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003b50:	2001      	movs	r0, #1
 8003b52:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b56:	6894      	ldr	r4, [r2, #8]
 8003b58:	0766      	lsls	r6, r4, #29
 8003b5a:	d43d      	bmi.n	8003bd8 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 8003b5c:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b60:	09a6      	lsrs	r6, r4, #6
 8003b62:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8003b66:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8003b6a:	f004 041f 	and.w	r4, r4, #31
 8003b6e:	5977      	ldr	r7, [r6, r5]
 8003b70:	f04f 0c1f 	mov.w	ip, #31
 8003b74:	fa0c fc04 	lsl.w	ip, ip, r4
 8003b78:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003b7c:	ea27 070c 	bic.w	r7, r7, ip
 8003b80:	40a0      	lsls	r0, r4
 8003b82:	4338      	orrs	r0, r7
 8003b84:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b86:	6890      	ldr	r0, [r2, #8]
 8003b88:	0745      	lsls	r5, r0, #29
 8003b8a:	f140 809a 	bpl.w	8003cc2 <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b8e:	6890      	ldr	r0, [r2, #8]
 8003b90:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b92:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b94:	07e4      	lsls	r4, r4, #31
 8003b96:	d530      	bpl.n	8003bfa <HAL_ADC_ConfigChannel+0xc2>
 8003b98:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b9a:	49c2      	ldr	r1, [pc, #776]	; (8003ea4 <HAL_ADC_ConfigChannel+0x36c>)
 8003b9c:	420c      	tst	r4, r1
 8003b9e:	d02a      	beq.n	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003ba0:	49c1      	ldr	r1, [pc, #772]	; (8003ea8 <HAL_ADC_ConfigChannel+0x370>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ba2:	4dc2      	ldr	r5, [pc, #776]	; (8003eac <HAL_ADC_ConfigChannel+0x374>)
 8003ba4:	6888      	ldr	r0, [r1, #8]
 8003ba6:	42ac      	cmp	r4, r5
 8003ba8:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003bac:	d01d      	beq.n	8003bea <HAL_ADC_ConfigChannel+0xb2>
 8003bae:	4dc0      	ldr	r5, [pc, #768]	; (8003eb0 <HAL_ADC_ConfigChannel+0x378>)
 8003bb0:	42ac      	cmp	r4, r5
 8003bb2:	d01a      	beq.n	8003bea <HAL_ADC_ConfigChannel+0xb2>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bb4:	4dbf      	ldr	r5, [pc, #764]	; (8003eb4 <HAL_ADC_ConfigChannel+0x37c>)
 8003bb6:	42ac      	cmp	r4, r5
 8003bb8:	f040 813d 	bne.w	8003e36 <HAL_ADC_ConfigChannel+0x2fe>
 8003bbc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003bc0:	d119      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bc2:	4cbd      	ldr	r4, [pc, #756]	; (8003eb8 <HAL_ADC_ConfigChannel+0x380>)
 8003bc4:	42a2      	cmp	r2, r4
 8003bc6:	d016      	beq.n	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bc8:	688a      	ldr	r2, [r1, #8]
 8003bca:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003bce:	4316      	orrs	r6, r2
 8003bd0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8003bd4:	608e      	str	r6, [r1, #8]
}
 8003bd6:	e003      	b.n	8003be0 <HAL_ADC_ConfigChannel+0xa8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bda:	f042 0220 	orr.w	r2, r2, #32
 8003bde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003be6:	b003      	add	sp, #12
 8003be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bea:	0201      	lsls	r1, r0, #8
 8003bec:	d403      	bmi.n	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bee:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003bf2:	f000 8102 	beq.w	8003dfa <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	e7f2      	b.n	8003be0 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003bfa:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003bfc:	4caf      	ldr	r4, [pc, #700]	; (8003ebc <HAL_ADC_ConfigChannel+0x384>)
 8003bfe:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c02:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8003ecc <HAL_ADC_ConfigChannel+0x394>
 8003c06:	f006 0718 	and.w	r7, r6, #24
 8003c0a:	40fc      	lsrs	r4, r7
 8003c0c:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8003c10:	4004      	ands	r4, r0
 8003c12:	ea25 0507 	bic.w	r5, r5, r7
 8003c16:	432c      	orrs	r4, r5
 8003c18:	4566      	cmp	r6, ip
 8003c1a:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c1e:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c20:	d1bb      	bne.n	8003b9a <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c22:	2f00      	cmp	r7, #0
 8003c24:	f000 80d9 	beq.w	8003dda <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c28:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c2c:	2c00      	cmp	r4, #0
 8003c2e:	f000 8181 	beq.w	8003f34 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003c32:	fab4 f484 	clz	r4, r4
 8003c36:	3401      	adds	r4, #1
 8003c38:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c3c:	2c09      	cmp	r4, #9
 8003c3e:	f240 8179 	bls.w	8003f34 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c42:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	f000 81d7 	beq.w	8003ffa <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8003c4c:	fab5 f585 	clz	r5, r5
 8003c50:	3501      	adds	r5, #1
 8003c52:	06ad      	lsls	r5, r5, #26
 8003c54:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c58:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003c5c:	2c00      	cmp	r4, #0
 8003c5e:	f000 81d1 	beq.w	8004004 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8003c62:	fab4 f484 	clz	r4, r4
 8003c66:	3401      	adds	r4, #1
 8003c68:	f004 041f 	and.w	r4, r4, #31
 8003c6c:	2601      	movs	r6, #1
 8003c6e:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c72:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	f000 81c1 	beq.w	8004000 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003c7e:	fab0 f480 	clz	r4, r0
 8003c82:	3401      	adds	r4, #1
 8003c84:	f004 041f 	and.w	r4, r4, #31
 8003c88:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003c8c:	f1a4 001e 	sub.w	r0, r4, #30
 8003c90:	0500      	lsls	r0, r0, #20
 8003c92:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c96:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c98:	0dc7      	lsrs	r7, r0, #23
 8003c9a:	f007 0704 	and.w	r7, r7, #4
 8003c9e:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003ca2:	688e      	ldr	r6, [r1, #8]
 8003ca4:	597c      	ldr	r4, [r7, r5]
 8003ca6:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003caa:	f04f 0c07 	mov.w	ip, #7
 8003cae:	fa0c fc00 	lsl.w	ip, ip, r0
 8003cb2:	ea24 040c 	bic.w	r4, r4, ip
 8003cb6:	fa06 f000 	lsl.w	r0, r6, r0
 8003cba:	4320      	orrs	r0, r4
 8003cbc:	5178      	str	r0, [r7, r5]
 8003cbe:	680c      	ldr	r4, [r1, #0]
}
 8003cc0:	e76b      	b.n	8003b9a <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cc2:	6890      	ldr	r0, [r2, #8]
 8003cc4:	f010 0008 	ands.w	r0, r0, #8
 8003cc8:	f040 8082 	bne.w	8003dd0 <HAL_ADC_ConfigChannel+0x298>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ccc:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003cce:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003cd0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003cd4:	f000 80c3 	beq.w	8003e5e <HAL_ADC_ConfigChannel+0x326>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cd8:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8003cdc:	f00c 0c04 	and.w	ip, ip, #4
 8003ce0:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8003ce4:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003ce8:	f85c 5007 	ldr.w	r5, [ip, r7]
 8003cec:	f04f 0e07 	mov.w	lr, #7
 8003cf0:	fa0e fe06 	lsl.w	lr, lr, r6
 8003cf4:	40b4      	lsls	r4, r6
 8003cf6:	ea25 050e 	bic.w	r5, r5, lr
 8003cfa:	432c      	orrs	r4, r5
 8003cfc:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d00:	6954      	ldr	r4, [r2, #20]
 8003d02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003d06:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d08:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d0c:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d0e:	f1bc 0f04 	cmp.w	ip, #4
 8003d12:	d02e      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d14:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8003d18:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8003ed0 <HAL_ADC_ConfigChannel+0x398>
 8003d1c:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8003d20:	680f      	ldr	r7, [r1, #0]
 8003d22:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d26:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8003d2a:	694d      	ldr	r5, [r1, #20]
 8003d2c:	0076      	lsls	r6, r6, #1
 8003d2e:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8003d32:	40b5      	lsls	r5, r6
 8003d34:	ea47 070e 	orr.w	r7, r7, lr
 8003d38:	433d      	orrs	r5, r7
 8003d3a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8003d3e:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d42:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003d44:	698e      	ldr	r6, [r1, #24]
 8003d46:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8003d4a:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8003d4e:	4335      	orrs	r5, r6
 8003d50:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d54:	690e      	ldr	r6, [r1, #16]
 8003d56:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8003d58:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8003d5c:	2f01      	cmp	r7, #1
 8003d5e:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8003d62:	bf08      	it	eq
 8003d64:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8003d68:	4328      	orrs	r0, r5
 8003d6a:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8003d6e:	6808      	ldr	r0, [r1, #0]
}
 8003d70:	e70f      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x5a>
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d72:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d74:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8003d76:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8003d78:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003d7c:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003d80:	2d00      	cmp	r5, #0
 8003d82:	f040 80a7 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x39c>
 8003d86:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003d8a:	42ac      	cmp	r4, r5
 8003d8c:	f000 8119 	beq.w	8003fc2 <HAL_ADC_ConfigChannel+0x48a>
 8003d90:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8003d92:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d94:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d98:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003d9c:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8003da0:	42ae      	cmp	r6, r5
 8003da2:	f000 80fc 	beq.w	8003f9e <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003da6:	68a6      	ldr	r6, [r4, #8]
 8003da8:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003daa:	f104 0708 	add.w	r7, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dae:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003db2:	42ae      	cmp	r6, r5
 8003db4:	f000 80e2 	beq.w	8003f7c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003db8:	68e6      	ldr	r6, [r4, #12]
 8003dba:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dbc:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dbe:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003dc2:	42b5      	cmp	r5, r6
 8003dc4:	f47f aee5 	bne.w	8003b92 <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003dce:	6020      	str	r0, [r4, #0]
 8003dd0:	6808      	ldr	r0, [r1, #0]
}
 8003dd2:	e6de      	b.n	8003b92 <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8003dd4:	2002      	movs	r0, #2
}
 8003dd6:	b003      	add	sp, #12
 8003dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003dda:	0e80      	lsrs	r0, r0, #26
 8003ddc:	1c44      	adds	r4, r0, #1
 8003dde:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de2:	2e09      	cmp	r6, #9
 8003de4:	d84f      	bhi.n	8003e86 <HAL_ADC_ConfigChannel+0x34e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003de6:	06a5      	lsls	r5, r4, #26
 8003de8:	2401      	movs	r4, #1
 8003dea:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003dee:	40b4      	lsls	r4, r6
 8003df0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003df4:	4325      	orrs	r5, r4
 8003df6:	0500      	lsls	r0, r0, #20
 8003df8:	e74d      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003dfa:	482b      	ldr	r0, [pc, #172]	; (8003ea8 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_ADC_ConfigChannel+0x388>)
 8003dfe:	6881      	ldr	r1, [r0, #8]
 8003e00:	4c30      	ldr	r4, [pc, #192]	; (8003ec4 <HAL_ADC_ConfigChannel+0x38c>)
 8003e02:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003e06:	430e      	orrs	r6, r1
 8003e08:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8003e0c:	6086      	str	r6, [r0, #8]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	0992      	lsrs	r2, r2, #6
 8003e12:	fba4 1202 	umull	r1, r2, r4, r2
 8003e16:	0992      	lsrs	r2, r2, #6
 8003e18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e20:	9a01      	ldr	r2, [sp, #4]
 8003e22:	2a00      	cmp	r2, #0
 8003e24:	f43f aee7 	beq.w	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8003e28:	9a01      	ldr	r2, [sp, #4]
 8003e2a:	3a01      	subs	r2, #1
 8003e2c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e2e:	9a01      	ldr	r2, [sp, #4]
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d1f9      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x2f0>
 8003e34:	e6df      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e36:	4d24      	ldr	r5, [pc, #144]	; (8003ec8 <HAL_ADC_ConfigChannel+0x390>)
 8003e38:	42ac      	cmp	r4, r5
 8003e3a:	f47f aedc 	bne.w	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e3e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003e42:	f47f aed8 	bne.w	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e46:	4c1c      	ldr	r4, [pc, #112]	; (8003eb8 <HAL_ADC_ConfigChannel+0x380>)
 8003e48:	42a2      	cmp	r2, r4
 8003e4a:	f43f aed4 	beq.w	8003bf6 <HAL_ADC_ConfigChannel+0xbe>
 8003e4e:	688a      	ldr	r2, [r1, #8]
 8003e50:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003e54:	4332      	orrs	r2, r6
 8003e56:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003e5a:	608a      	str	r2, [r1, #8]
}
 8003e5c:	e6c0      	b.n	8003be0 <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e5e:	0df5      	lsrs	r5, r6, #23
 8003e60:	f102 0414 	add.w	r4, r2, #20
 8003e64:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003e68:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003e6c:	592f      	ldr	r7, [r5, r4]
 8003e6e:	f04f 0c07 	mov.w	ip, #7
 8003e72:	fa0c f606 	lsl.w	r6, ip, r6
 8003e76:	ea27 0606 	bic.w	r6, r7, r6
 8003e7a:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e7c:	6954      	ldr	r4, [r2, #20]
 8003e7e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003e82:	6154      	str	r4, [r2, #20]
}
 8003e84:	e740      	b.n	8003d08 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e86:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8003e8a:	06a5      	lsls	r5, r4, #26
 8003e8c:	381e      	subs	r0, #30
 8003e8e:	2401      	movs	r4, #1
 8003e90:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003e94:	fa04 f606 	lsl.w	r6, r4, r6
 8003e98:	0500      	lsls	r0, r0, #20
 8003e9a:	4335      	orrs	r5, r6
 8003e9c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8003ea0:	e6f9      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x15e>
 8003ea2:	bf00      	nop
 8003ea4:	80080000 	.word	0x80080000
 8003ea8:	50000300 	.word	0x50000300
 8003eac:	c3210000 	.word	0xc3210000
 8003eb0:	90c00010 	.word	0x90c00010
 8003eb4:	c7520000 	.word	0xc7520000
 8003eb8:	50000100 	.word	0x50000100
 8003ebc:	0007ffff 	.word	0x0007ffff
 8003ec0:	20000718 	.word	0x20000718
 8003ec4:	053e2d63 	.word	0x053e2d63
 8003ec8:	cb840000 	.word	0xcb840000
 8003ecc:	407f0000 	.word	0x407f0000
 8003ed0:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003ed8:	b11d      	cbz	r5, 8003ee2 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8003eda:	fab5 f585 	clz	r5, r5
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ede:	42ac      	cmp	r4, r5
 8003ee0:	d06f      	beq.n	8003fc2 <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ee2:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8003ee4:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ee6:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eea:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003eee:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003ef6:	b11d      	cbz	r5, 8003f00 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8003ef8:	fab5 f585 	clz	r5, r5
 8003efc:	42ae      	cmp	r6, r5
 8003efe:	d04e      	beq.n	8003f9e <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f00:	68a5      	ldr	r5, [r4, #8]
 8003f02:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f04:	f104 0708 	add.w	r7, r4, #8
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f08:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003f10:	b11d      	cbz	r5, 8003f1a <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8003f12:	fab5 f585 	clz	r5, r5
 8003f16:	42ae      	cmp	r6, r5
 8003f18:	d030      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f1a:	68e5      	ldr	r5, [r4, #12]
 8003f1c:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f1e:	340c      	adds	r4, #12
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f20:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	f43f ae32 	beq.w	8003b92 <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8003f2e:	fab5 f585 	clz	r5, r5
 8003f32:	e746      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	d058      	beq.n	8003fee <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8003f3c:	fab5 f585 	clz	r5, r5
 8003f40:	3501      	adds	r5, #1
 8003f42:	06ad      	lsls	r5, r5, #26
 8003f44:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003f4c:	2c00      	cmp	r4, #0
 8003f4e:	d04c      	beq.n	8003fea <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8003f50:	fab4 f484 	clz	r4, r4
 8003f54:	3401      	adds	r4, #1
 8003f56:	f004 041f 	and.w	r4, r4, #31
 8003f5a:	2601      	movs	r6, #1
 8003f5c:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f60:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f62:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8003f6a:	fab0 f480 	clz	r4, r0
 8003f6e:	3401      	adds	r4, #1
 8003f70:	f004 041f 	and.w	r4, r4, #31
 8003f74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003f78:	0520      	lsls	r0, r4, #20
 8003f7a:	e68c      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8003f7c:	6838      	ldr	r0, [r7, #0]
 8003f7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003f82:	6038      	str	r0, [r7, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f84:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f86:	68e5      	ldr	r5, [r4, #12]
 8003f88:	68e6      	ldr	r6, [r4, #12]
 8003f8a:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003f8e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f92:	340c      	adds	r4, #12
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	d1c5      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x3ec>
 8003f98:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003f9c:	e711      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003fa4:	6038      	str	r0, [r7, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fa6:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fa8:	68a5      	ldr	r5, [r4, #8]
 8003faa:	68a6      	ldr	r6, [r4, #8]
 8003fac:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003fb0:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb4:	f104 0708 	add.w	r7, r4, #8
 8003fb8:	2d00      	cmp	r5, #0
 8003fba:	d1a7      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x3d4>
 8003fbc:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003fc0:	e6f7      	b.n	8003db2 <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 8003fc2:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003fca:	f844 0f60 	str.w	r0, [r4, #96]!
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fce:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fd0:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8003fd2:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8003fd4:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003fd8:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fdc:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8003fe0:	2d00      	cmp	r5, #0
 8003fe2:	d186      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x3ba>
 8003fe4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003fe8:	e6da      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x268>
 8003fea:	2402      	movs	r4, #2
 8003fec:	e7b8      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x428>
 8003fee:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003ff2:	e7a9      	b.n	8003f48 <HAL_ADC_ConfigChannel+0x410>
 8003ff4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8003ff8:	e64d      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x15e>
 8003ffa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003ffe:	e62b      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x120>
 8004000:	4801      	ldr	r0, [pc, #4]	; (8004008 <HAL_ADC_ConfigChannel+0x4d0>)
 8004002:	e648      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x15e>
 8004004:	2402      	movs	r4, #2
 8004006:	e634      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x13a>
 8004008:	fe500000 	.word	0xfe500000

0800400c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 800400c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004010:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004014:	6944      	ldr	r4, [r0, #20]
{
 8004016:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8004018:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800401a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 800401c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800401e:	f000 8186 	beq.w	800432e <HAL_ADCEx_InjectedConfigChannel+0x322>
 8004022:	2301      	movs	r3, #1
 8004024:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004028:	b1e4      	cbz	r4, 8004064 <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800402a:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800402c:	2b01      	cmp	r3, #1
 800402e:	d019      	beq.n	8004064 <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004030:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004032:	2c00      	cmp	r4, #0
 8004034:	f040 8125 	bne.w	8004282 <HAL_ADCEx_InjectedConfigChannel+0x276>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004038:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800403a:	2a00      	cmp	r2, #0
 800403c:	f000 8248 	beq.w	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x4c4>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004040:	1e5c      	subs	r4, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004042:	f002 027c 	and.w	r2, r2, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004046:	6acb      	ldr	r3, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004048:	4322      	orrs	r2, r4
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800404a:	4313      	orrs	r3, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800404c:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004050:	6684      	str	r4, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004052:	f005 051f 	and.w	r5, r5, #31
 8004056:	f3c2 6484 	ubfx	r4, r2, #26, #5
 800405a:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 800405c:	4323      	orrs	r3, r4
 800405e:	6643      	str	r3, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004060:	6803      	ldr	r3, [r0, #0]
 8004062:	e005      	b.n	8004070 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004064:	684b      	ldr	r3, [r1, #4]
 8004066:	2b09      	cmp	r3, #9
 8004068:	f000 80f7 	beq.w	800425a <HAL_ADCEx_InjectedConfigChannel+0x24e>
 800406c:	680a      	ldr	r2, [r1, #0]
 800406e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004070:	689c      	ldr	r4, [r3, #8]
 8004072:	0724      	lsls	r4, r4, #28
 8004074:	d410      	bmi.n	8004098 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004076:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 800407a:	2c00      	cmp	r4, #0
 800407c:	f040 80e4 	bne.w	8004248 <HAL_ADCEx_InjectedConfigChannel+0x23c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004080:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8004084:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004088:	68dd      	ldr	r5, [r3, #12]
 800408a:	0524      	lsls	r4, r4, #20
 800408c:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004090:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004094:	432c      	orrs	r4, r5
 8004096:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004098:	689c      	ldr	r4, [r3, #8]
 800409a:	f014 0404 	ands.w	r4, r4, #4
 800409e:	d05f      	beq.n	8004160 <HAL_ADCEx_InjectedConfigChannel+0x154>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040a0:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a2:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040a4:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a6:	07ef      	lsls	r7, r5, #31
 80040a8:	d414      	bmi.n	80040d4 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80040aa:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80040ac:	4dbe      	ldr	r5, [pc, #760]	; (80043a8 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 80040ae:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040b2:	f8df e320 	ldr.w	lr, [pc, #800]	; 80043d4 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
 80040b6:	f007 0c18 	and.w	ip, r7, #24
 80040ba:	fa25 f50c 	lsr.w	r5, r5, ip
 80040be:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80040c2:	4015      	ands	r5, r2
 80040c4:	ea26 060c 	bic.w	r6, r6, ip
 80040c8:	4335      	orrs	r5, r6
 80040ca:	4577      	cmp	r7, lr
 80040cc:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80040d0:	f000 80fc 	beq.w	80042cc <HAL_ADCEx_InjectedConfigChannel+0x2c0>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80040d4:	49b5      	ldr	r1, [pc, #724]	; (80043ac <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
 80040d6:	420a      	tst	r2, r1
 80040d8:	d019      	beq.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80040da:	4db5      	ldr	r5, [pc, #724]	; (80043b0 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80040dc:	4eb5      	ldr	r6, [pc, #724]	; (80043b4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 80040de:	68a9      	ldr	r1, [r5, #8]
 80040e0:	42b2      	cmp	r2, r6
 80040e2:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 80040e6:	d019      	beq.n	800411c <HAL_ADCEx_InjectedConfigChannel+0x110>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80040e8:	4eb3      	ldr	r6, [pc, #716]	; (80043b8 <HAL_ADCEx_InjectedConfigChannel+0x3ac>)
 80040ea:	42b2      	cmp	r2, r6
 80040ec:	d016      	beq.n	800411c <HAL_ADCEx_InjectedConfigChannel+0x110>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80040ee:	4eb3      	ldr	r6, [pc, #716]	; (80043bc <HAL_ADCEx_InjectedConfigChannel+0x3b0>)
 80040f0:	42b2      	cmp	r2, r6
 80040f2:	f040 8125 	bne.w	8004340 <HAL_ADCEx_InjectedConfigChannel+0x334>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040f6:	01ce      	lsls	r6, r1, #7
 80040f8:	d409      	bmi.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80040fa:	4ab1      	ldr	r2, [pc, #708]	; (80043c0 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d006      	beq.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004100:	68ab      	ldr	r3, [r5, #8]
 8004102:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004106:	431f      	orrs	r7, r3
 8004108:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 800410c:	60af      	str	r7, [r5, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800410e:	2300      	movs	r3, #0
 8004110:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004114:	4620      	mov	r0, r4
 8004116:	b002      	add	sp, #8
 8004118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800411c:	020a      	lsls	r2, r1, #8
 800411e:	d4f6      	bmi.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004124:	d1f3      	bne.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
 8004126:	4aa2      	ldr	r2, [pc, #648]	; (80043b0 <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004128:	49a6      	ldr	r1, [pc, #664]	; (80043c4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 800412a:	6893      	ldr	r3, [r2, #8]
 800412c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004130:	431f      	orrs	r7, r3
 8004132:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
 8004136:	6097      	str	r7, [r2, #8]
 8004138:	680b      	ldr	r3, [r1, #0]
 800413a:	4aa3      	ldr	r2, [pc, #652]	; (80043c8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800414c:	9b01      	ldr	r3, [sp, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0dd      	beq.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
          wait_loop_index--;
 8004152:	9b01      	ldr	r3, [sp, #4]
 8004154:	3b01      	subs	r3, #1
 8004156:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004158:	9b01      	ldr	r3, [sp, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f9      	bne.n	8004152 <HAL_ADCEx_InjectedConfigChannel+0x146>
 800415e:	e7d6      	b.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004160:	689d      	ldr	r5, [r3, #8]
 8004162:	f015 0508 	ands.w	r5, r5, #8
 8004166:	d19d      	bne.n	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004168:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 800416a:	2c00      	cmp	r4, #0
 800416c:	f040 809f 	bne.w	80042ae <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004170:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004174:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004176:	68dc      	ldr	r4, [r3, #12]
 8004178:	bf0c      	ite	eq
 800417a:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800417e:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004182:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004184:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004186:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 800418a:	2e01      	cmp	r6, #1
 800418c:	f000 80ff 	beq.w	800438e <HAL_ADCEx_InjectedConfigChannel+0x382>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004190:	691e      	ldr	r6, [r3, #16]
 8004192:	f026 0602 	bic.w	r6, r6, #2
 8004196:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004198:	688e      	ldr	r6, [r1, #8]
 800419a:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 800419e:	f000 80e2 	beq.w	8004366 <HAL_ADCEx_InjectedConfigChannel+0x35a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041a2:	ea4f 5ed2 	mov.w	lr, r2, lsr #23
 80041a6:	f00e 0e04 	and.w	lr, lr, #4
 80041aa:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 80041ae:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80041b2:	f85e 700c 	ldr.w	r7, [lr, ip]
 80041b6:	f04f 0807 	mov.w	r8, #7
 80041ba:	fa08 f802 	lsl.w	r8, r8, r2
 80041be:	4096      	lsls	r6, r2
 80041c0:	ea27 0208 	bic.w	r2, r7, r8
 80041c4:	4316      	orrs	r6, r2
 80041c6:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041d0:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80041d2:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80041d6:	68df      	ldr	r7, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80041d8:	f1be 0f04 	cmp.w	lr, #4
 80041dc:	f000 80fe 	beq.w	80043dc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e0:	f103 0260 	add.w	r2, r3, #96	; 0x60
  MODIFY_REG(*preg,
 80041e4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 80043d8 <HAL_ADCEx_InjectedConfigChannel+0x3cc>
 80041e8:	f852 602e 	ldr.w	r6, [r2, lr, lsl #2]
 80041ec:	ea06 0808 	and.w	r8, r6, r8
 80041f0:	680e      	ldr	r6, [r1, #0]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80041f2:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80041f6:	f006 47f8 	and.w	r7, r6, #2080374784	; 0x7c000000
 80041fa:	694e      	ldr	r6, [r1, #20]
 80041fc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004200:	fa06 f60c 	lsl.w	r6, r6, ip
 8004204:	ea47 0708 	orr.w	r7, r7, r8
 8004208:	433e      	orrs	r6, r7
 800420a:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 800420e:	f842 602e 	str.w	r6, [r2, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004212:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004216:	698f      	ldr	r7, [r1, #24]
 8004218:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 800421c:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004220:	433e      	orrs	r6, r7
 8004222:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004226:	690f      	ldr	r7, [r1, #16]
 8004228:	f891 c01c 	ldrb.w	ip, [r1, #28]
  MODIFY_REG(*preg,
 800422c:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8004230:	f1bc 0f01 	cmp.w	ip, #1
 8004234:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004238:	bf08      	it	eq
 800423a:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 800423e:	4335      	orrs	r5, r6
 8004240:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
 8004244:	680a      	ldr	r2, [r1, #0]
}
 8004246:	e72d      	b.n	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004248:	68dc      	ldr	r4, [r3, #12]
 800424a:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 800424e:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004252:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004256:	60dc      	str	r4, [r3, #12]
 8004258:	e71e      	b.n	8004098 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800425a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800425c:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800425e:	2b00      	cmp	r3, #0
 8004260:	d06a      	beq.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0x32c>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004262:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004264:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004268:	0c55      	lsrs	r5, r2, #17
 800426a:	4323      	orrs	r3, r4
 800426c:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004270:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004272:	6803      	ldr	r3, [r0, #0]
 8004274:	4e55      	ldr	r6, [pc, #340]	; (80043cc <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004276:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004278:	4034      	ands	r4, r6
 800427a:	432c      	orrs	r4, r5
 800427c:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800427e:	6645      	str	r5, [r0, #100]	; 0x64
 8004280:	e6f6      	b.n	8004070 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004282:	e9d1 2600 	ldrd	r2, r6, [r1]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004286:	6e43      	ldr	r3, [r0, #100]	; 0x64
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004288:	f3c2 6584 	ubfx	r5, r2, #26, #5
 800428c:	f006 061f 	and.w	r6, r6, #31
 8004290:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004292:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004294:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004296:	e9c0 5419 	strd	r5, r4, [r0, #100]	; 0x64
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800429a:	6803      	ldr	r3, [r0, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800429c:	2c00      	cmp	r4, #0
 800429e:	f47f aee7 	bne.w	8004070 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80042a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80042a4:	4e49      	ldr	r6, [pc, #292]	; (80043cc <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80042a6:	4034      	ands	r4, r6
 80042a8:	4325      	orrs	r5, r4
 80042aa:	64dd      	str	r5, [r3, #76]	; 0x4c
 80042ac:	e6e0      	b.n	8004070 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80042ae:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80042b0:	2c00      	cmp	r4, #0
 80042b2:	f43f af5d 	beq.w	8004170 <HAL_ADCEx_InjectedConfigChannel+0x164>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80042b6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 80042ba:	2c01      	cmp	r4, #1
 80042bc:	f000 8155 	beq.w	800456a <HAL_ADCEx_InjectedConfigChannel+0x55e>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80042c0:	68dc      	ldr	r4, [r3, #12]
 80042c2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 80042c6:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c8:	462c      	mov	r4, r5
 80042ca:	e75c      	b.n	8004186 <HAL_ADCEx_InjectedConfigChannel+0x17a>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80042cc:	f1bc 0f00 	cmp.w	ip, #0
 80042d0:	f040 80c8 	bne.w	8004464 <HAL_ADCEx_InjectedConfigChannel+0x458>
 80042d4:	0e92      	lsrs	r2, r2, #26
 80042d6:	1c55      	adds	r5, r2, #1
 80042d8:	f005 071f 	and.w	r7, r5, #31
 80042dc:	2f09      	cmp	r7, #9
 80042de:	f240 80fa 	bls.w	80044d6 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
 80042e2:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80042e6:	06ae      	lsls	r6, r5, #26
 80042e8:	3a1e      	subs	r2, #30
 80042ea:	2501      	movs	r5, #1
 80042ec:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80042f0:	fa05 f707 	lsl.w	r7, r5, r7
 80042f4:	0512      	lsls	r2, r2, #20
 80042f6:	433e      	orrs	r6, r7
 80042f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80042fc:	4332      	orrs	r2, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80042fe:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8004302:	f00c 0c04 	and.w	ip, ip, #4
 8004306:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800430a:	688e      	ldr	r6, [r1, #8]
 800430c:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004310:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004314:	f04f 0e07 	mov.w	lr, #7
 8004318:	fa0e fe02 	lsl.w	lr, lr, r2
 800431c:	ea25 050e 	bic.w	r5, r5, lr
 8004320:	fa06 f202 	lsl.w	r2, r6, r2
 8004324:	432a      	orrs	r2, r5
 8004326:	f84c 2007 	str.w	r2, [ip, r7]
 800432a:	680a      	ldr	r2, [r1, #0]
}
 800432c:	e6d2      	b.n	80040d4 <HAL_ADCEx_InjectedConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 800432e:	2402      	movs	r4, #2
}
 8004330:	4620      	mov	r0, r4
 8004332:	b002      	add	sp, #8
 8004334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004338:	0c55      	lsrs	r5, r2, #17
 800433a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 800433e:	e798      	b.n	8004272 <HAL_ADCEx_InjectedConfigChannel+0x266>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004340:	4e23      	ldr	r6, [pc, #140]	; (80043d0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 8004342:	42b2      	cmp	r2, r6
 8004344:	f47f aee3 	bne.w	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004348:	0249      	lsls	r1, r1, #9
 800434a:	f53f aee0 	bmi.w	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
      if (ADC_VREFINT_INSTANCE(hadc))
 800434e:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <HAL_ADCEx_InjectedConfigChannel+0x3b4>)
 8004350:	4293      	cmp	r3, r2
 8004352:	f43f aedc 	beq.w	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004356:	68ab      	ldr	r3, [r5, #8]
 8004358:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800435c:	431f      	orrs	r7, r3
 800435e:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004362:	60af      	str	r7, [r5, #8]
}
 8004364:	e6d3      	b.n	800410e <HAL_ADCEx_InjectedConfigChannel+0x102>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004366:	0dd7      	lsrs	r7, r2, #23
 8004368:	f007 0704 	and.w	r7, r7, #4
 800436c:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004370:	f3c2 5e04 	ubfx	lr, r2, #20, #5
 8004374:	f04f 0c07 	mov.w	ip, #7
 8004378:	59ba      	ldr	r2, [r7, r6]
 800437a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800437e:	ea22 020c 	bic.w	r2, r2, ip
 8004382:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800438a:	615a      	str	r2, [r3, #20]
}
 800438c:	e721      	b.n	80041d2 <HAL_ADCEx_InjectedConfigChannel+0x1c6>
      MODIFY_REG(hadc->Instance->CFGR2,
 800438e:	691f      	ldr	r7, [r3, #16]
 8004390:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8004392:	f427 7cff 	bic.w	ip, r7, #510	; 0x1fe
 8004396:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 8004398:	433e      	orrs	r6, r7
 800439a:	ea46 060c 	orr.w	r6, r6, ip
 800439e:	f046 0602 	orr.w	r6, r6, #2
 80043a2:	611e      	str	r6, [r3, #16]
 80043a4:	e6f8      	b.n	8004198 <HAL_ADCEx_InjectedConfigChannel+0x18c>
 80043a6:	bf00      	nop
 80043a8:	0007ffff 	.word	0x0007ffff
 80043ac:	80080000 	.word	0x80080000
 80043b0:	50000300 	.word	0x50000300
 80043b4:	c3210000 	.word	0xc3210000
 80043b8:	90c00010 	.word	0x90c00010
 80043bc:	c7520000 	.word	0xc7520000
 80043c0:	50000100 	.word	0x50000100
 80043c4:	20000718 	.word	0x20000718
 80043c8:	053e2d63 	.word	0x053e2d63
 80043cc:	04104000 	.word	0x04104000
 80043d0:	cb840000 	.word	0xcb840000
 80043d4:	407f0000 	.word	0x407f0000
 80043d8:	03fff000 	.word	0x03fff000
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043dc:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043de:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80043e0:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80043e2:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80043e6:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	d07d      	beq.n	80044ea <HAL_ADCEx_InjectedConfigChannel+0x4de>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80043f2:	b126      	cbz	r6, 80043fe <HAL_ADCEx_InjectedConfigChannel+0x3f2>
  return __builtin_clz(value);
 80043f4:	fab6 f686 	clz	r6, r6
 80043f8:	42b5      	cmp	r5, r6
 80043fa:	f000 80bb 	beq.w	8004574 <HAL_ADCEx_InjectedConfigChannel+0x568>
 80043fe:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004400:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004402:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004406:	f3c7 6784 	ubfx	r7, r7, #26, #5
 800440a:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004412:	b126      	cbz	r6, 800441e <HAL_ADCEx_InjectedConfigChannel+0x412>
  return __builtin_clz(value);
 8004414:	fab6 f686 	clz	r6, r6
 8004418:	42b7      	cmp	r7, r6
 800441a:	f000 80c0 	beq.w	800459e <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800441e:	68ae      	ldr	r6, [r5, #8]
 8004420:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004422:	f105 0c08 	add.w	ip, r5, #8
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004426:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800442e:	b126      	cbz	r6, 800443a <HAL_ADCEx_InjectedConfigChannel+0x42e>
  return __builtin_clz(value);
 8004430:	fab6 f686 	clz	r6, r6
 8004434:	42b7      	cmp	r7, r6
 8004436:	f000 80c7 	beq.w	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800443a:	68ee      	ldr	r6, [r5, #12]
 800443c:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800443e:	350c      	adds	r5, #12
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004440:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004448:	2e00      	cmp	r6, #0
 800444a:	f43f ae2b 	beq.w	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 800444e:	fab6 f686 	clz	r6, r6
 8004452:	42be      	cmp	r6, r7
 8004454:	f47f ae26 	bne.w	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004458:	682a      	ldr	r2, [r5, #0]
 800445a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800445e:	602a      	str	r2, [r5, #0]
 8004460:	680a      	ldr	r2, [r1, #0]
}
 8004462:	e61f      	b.n	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004468:	2d00      	cmp	r5, #0
 800446a:	d05a      	beq.n	8004522 <HAL_ADCEx_InjectedConfigChannel+0x516>
  return __builtin_clz(value);
 800446c:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 8004470:	3501      	adds	r5, #1
 8004472:	f005 051f 	and.w	r5, r5, #31
 8004476:	2d09      	cmp	r5, #9
 8004478:	d953      	bls.n	8004522 <HAL_ADCEx_InjectedConfigChannel+0x516>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800447e:	2e00      	cmp	r6, #0
 8004480:	f000 80c2 	beq.w	8004608 <HAL_ADCEx_InjectedConfigChannel+0x5fc>
  return __builtin_clz(value);
 8004484:	fab6 f686 	clz	r6, r6
 8004488:	3601      	adds	r6, #1
 800448a:	06b6      	lsls	r6, r6, #26
 800448c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004494:	2d00      	cmp	r5, #0
 8004496:	f000 80b5 	beq.w	8004604 <HAL_ADCEx_InjectedConfigChannel+0x5f8>
  return __builtin_clz(value);
 800449a:	fab5 f585 	clz	r5, r5
 800449e:	3501      	adds	r5, #1
 80044a0:	f005 051f 	and.w	r5, r5, #31
 80044a4:	2701      	movs	r7, #1
 80044a6:	fa07 f505 	lsl.w	r5, r7, r5
 80044aa:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ac:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80044b0:	2a00      	cmp	r2, #0
 80044b2:	f000 80a5 	beq.w	8004600 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
  return __builtin_clz(value);
 80044b6:	fab2 f582 	clz	r5, r2
 80044ba:	3501      	adds	r5, #1
 80044bc:	f005 051f 	and.w	r5, r5, #31
 80044c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044c4:	f1a5 021e 	sub.w	r2, r5, #30
 80044c8:	0512      	lsls	r2, r2, #20
 80044ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80044ce:	e715      	b.n	80042fc <HAL_ADCEx_InjectedConfigChannel+0x2f0>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80044d0:	3b01      	subs	r3, #1
 80044d2:	461c      	mov	r4, r3
 80044d4:	e5ba      	b.n	800404c <HAL_ADCEx_InjectedConfigChannel+0x40>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80044d6:	06ae      	lsls	r6, r5, #26
 80044d8:	2501      	movs	r5, #1
 80044da:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 80044de:	40bd      	lsls	r5, r7
 80044e0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 80044e4:	432e      	orrs	r6, r5
 80044e6:	0512      	lsls	r2, r2, #20
 80044e8:	e708      	b.n	80042fc <HAL_ADCEx_InjectedConfigChannel+0x2f0>
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80044ea:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80044ee:	42b5      	cmp	r5, r6
 80044f0:	d040      	beq.n	8004574 <HAL_ADCEx_InjectedConfigChannel+0x568>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044f2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80044f4:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044f6:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80044fa:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80044fe:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004502:	42b7      	cmp	r7, r6
 8004504:	d04b      	beq.n	800459e <HAL_ADCEx_InjectedConfigChannel+0x592>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004506:	68af      	ldr	r7, [r5, #8]
 8004508:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800450a:	f105 0c08 	add.w	ip, r5, #8
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800450e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004512:	42b7      	cmp	r7, r6
 8004514:	d058      	beq.n	80045c8 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004516:	68ef      	ldr	r7, [r5, #12]
 8004518:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800451a:	350c      	adds	r5, #12
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800451c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004520:	e797      	b.n	8004452 <HAL_ADCEx_InjectedConfigChannel+0x446>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004526:	2e00      	cmp	r6, #0
 8004528:	d064      	beq.n	80045f4 <HAL_ADCEx_InjectedConfigChannel+0x5e8>
  return __builtin_clz(value);
 800452a:	fab6 f686 	clz	r6, r6
 800452e:	3601      	adds	r6, #1
 8004530:	06b6      	lsls	r6, r6, #26
 8004532:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800453a:	2d00      	cmp	r5, #0
 800453c:	d058      	beq.n	80045f0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  return __builtin_clz(value);
 800453e:	fab5 f585 	clz	r5, r5
 8004542:	3501      	adds	r5, #1
 8004544:	f005 051f 	and.w	r5, r5, #31
 8004548:	2701      	movs	r7, #1
 800454a:	fa07 f505 	lsl.w	r5, r7, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 800454e:	432e      	orrs	r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004554:	2a00      	cmp	r2, #0
 8004556:	d050      	beq.n	80045fa <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  return __builtin_clz(value);
 8004558:	fab2 f582 	clz	r5, r2
 800455c:	3501      	adds	r5, #1
 800455e:	f005 051f 	and.w	r5, r5, #31
 8004562:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004566:	052a      	lsls	r2, r5, #20
 8004568:	e6c8      	b.n	80042fc <HAL_ADCEx_InjectedConfigChannel+0x2f0>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800456a:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 800456c:	f046 0620 	orr.w	r6, r6, #32
 8004570:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8004572:	e608      	b.n	8004186 <HAL_ADCEx_InjectedConfigChannel+0x17a>
  MODIFY_REG(*preg,
 8004574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004576:	461d      	mov	r5, r3
 8004578:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800457c:	f845 2f60 	str.w	r2, [r5, #96]!
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004580:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004582:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8004584:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004586:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800458a:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800458e:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004592:	2e00      	cmp	r6, #0
 8004594:	f47f af3b 	bne.w	800440e <HAL_ADCEx_InjectedConfigChannel+0x402>
 8004598:	f3c2 6684 	ubfx	r6, r2, #26, #5
 800459c:	e7b1      	b.n	8004502 <HAL_ADCEx_InjectedConfigChannel+0x4f6>
  MODIFY_REG(*preg,
 800459e:	f8dc 2000 	ldr.w	r2, [ip]
 80045a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045a6:	f8cc 2000 	str.w	r2, [ip]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80045aa:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045ac:	68ae      	ldr	r6, [r5, #8]
 80045ae:	68af      	ldr	r7, [r5, #8]
 80045b0:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80045b4:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045b8:	f105 0c08 	add.w	ip, r5, #8
 80045bc:	2e00      	cmp	r6, #0
 80045be:	f47f af34 	bne.w	800442a <HAL_ADCEx_InjectedConfigChannel+0x41e>
 80045c2:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80045c6:	e7a4      	b.n	8004512 <HAL_ADCEx_InjectedConfigChannel+0x506>
  MODIFY_REG(*preg,
 80045c8:	f8dc 2000 	ldr.w	r2, [ip]
 80045cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045d0:	f8cc 2000 	str.w	r2, [ip]
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80045d4:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045d6:	68ee      	ldr	r6, [r5, #12]
 80045d8:	68ef      	ldr	r7, [r5, #12]
 80045da:	f3c2 0612 	ubfx	r6, r2, #0, #19
 80045de:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045e2:	350c      	adds	r5, #12
 80045e4:	2e00      	cmp	r6, #0
 80045e6:	f47f af2d 	bne.w	8004444 <HAL_ADCEx_InjectedConfigChannel+0x438>
 80045ea:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80045ee:	e730      	b.n	8004452 <HAL_ADCEx_InjectedConfigChannel+0x446>
 80045f0:	2502      	movs	r5, #2
 80045f2:	e7ac      	b.n	800454e <HAL_ADCEx_InjectedConfigChannel+0x542>
 80045f4:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 80045f8:	e79d      	b.n	8004536 <HAL_ADCEx_InjectedConfigChannel+0x52a>
 80045fa:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80045fe:	e67d      	b.n	80042fc <HAL_ADCEx_InjectedConfigChannel+0x2f0>
 8004600:	4a03      	ldr	r2, [pc, #12]	; (8004610 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 8004602:	e67b      	b.n	80042fc <HAL_ADCEx_InjectedConfigChannel+0x2f0>
 8004604:	2502      	movs	r5, #2
 8004606:	e750      	b.n	80044aa <HAL_ADCEx_InjectedConfigChannel+0x49e>
 8004608:	f04f 6680 	mov.w	r6, #67108864	; 0x4000000
 800460c:	e740      	b.n	8004490 <HAL_ADCEx_InjectedConfigChannel+0x484>
 800460e:	bf00      	nop
 8004610:	fe500000 	.word	0xfe500000

08004614 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004614:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004616:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800461a:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 800461c:	2a01      	cmp	r2, #1
 800461e:	d04c      	beq.n	80046ba <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004620:	6802      	ldr	r2, [r0, #0]
 8004622:	4603      	mov	r3, r0
 8004624:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8004628:	f04f 0001 	mov.w	r0, #1
 800462c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004630:	d008      	beq.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x30>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004632:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004634:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004636:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 800463a:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800463e:	bcf0      	pop	{r4, r5, r6, r7}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004640:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004642:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004644:	4c22      	ldr	r4, [pc, #136]	; (80046d0 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004646:	68a0      	ldr	r0, [r4, #8]
 8004648:	0740      	lsls	r0, r0, #29
 800464a:	d50a      	bpl.n	8004662 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800464c:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800464e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004650:	f042 0220 	orr.w	r2, r2, #32
 8004654:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004656:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 800465e:	bcf0      	pop	{r4, r5, r6, r7}
 8004660:	4770      	bx	lr
 8004662:	6890      	ldr	r0, [r2, #8]
 8004664:	0746      	lsls	r6, r0, #29
 8004666:	d4f2      	bmi.n	800464e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004668:	b1d5      	cbz	r5, 80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800466a:	4e1a      	ldr	r6, [pc, #104]	; (80046d4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800466c:	684f      	ldr	r7, [r1, #4]
 800466e:	68b0      	ldr	r0, [r6, #8]
 8004670:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8004674:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004678:	4338      	orrs	r0, r7
 800467a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800467e:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004680:	6892      	ldr	r2, [r2, #8]
 8004682:	68a0      	ldr	r0, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004684:	4310      	orrs	r0, r2
 8004686:	f010 0001 	ands.w	r0, r0, #1
 800468a:	d114      	bne.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
        MODIFY_REG(tmpADC_Common->CCR,
 800468c:	68b4      	ldr	r4, [r6, #8]
 800468e:	688a      	ldr	r2, [r1, #8]
 8004690:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8004694:	4315      	orrs	r5, r2
 8004696:	f021 010f 	bic.w	r1, r1, #15
 800469a:	430d      	orrs	r5, r1
 800469c:	60b5      	str	r5, [r6, #8]
 800469e:	e7db      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x44>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046a0:	4d0c      	ldr	r5, [pc, #48]	; (80046d4 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80046a2:	68a9      	ldr	r1, [r5, #8]
 80046a4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80046a8:	60a9      	str	r1, [r5, #8]
 80046aa:	6892      	ldr	r2, [r2, #8]
 80046ac:	68a0      	ldr	r0, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ae:	4310      	orrs	r0, r2
 80046b0:	f010 0001 	ands.w	r0, r0, #1
 80046b4:	d004      	beq.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046b6:	2000      	movs	r0, #0
 80046b8:	e7ce      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x44>
  __HAL_LOCK(hadc);
 80046ba:	2002      	movs	r0, #2
}
 80046bc:	bcf0      	pop	{r4, r5, r6, r7}
 80046be:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046c0:	68aa      	ldr	r2, [r5, #8]
 80046c2:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80046c6:	f022 020f 	bic.w	r2, r2, #15
 80046ca:	60aa      	str	r2, [r5, #8]
 80046cc:	e7c4      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x44>
 80046ce:	bf00      	nop
 80046d0:	50000100 	.word	0x50000100
 80046d4:	50000300 	.word	0x50000300

080046d8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80046dc:	2300      	movs	r3, #0
 80046de:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d054      	beq.n	800478e <HAL_COMP_Init+0xb6>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80046e4:	6802      	ldr	r2, [r0, #0]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	4604      	mov	r4, r0
 80046ec:	db4f      	blt.n	800478e <HAL_COMP_Init+0xb6>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80046ee:	7f43      	ldrb	r3, [r0, #29]
 80046f0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d077      	beq.n	80047e8 <HAL_COMP_Init+0x110>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 80046f8:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 80046fc:	e9d4 5003 	ldrd	r5, r0, [r4, #12]
               | hcomp->Init.BlankingSrce
 8004700:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004702:	6817      	ldr	r7, [r2, #0]
               | hcomp->Init.InputPlus
 8004704:	4333      	orrs	r3, r6
               | hcomp->Init.BlankingSrce
 8004706:	430b      	orrs	r3, r1
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004708:	6816      	ldr	r6, [r2, #0]
 800470a:	493f      	ldr	r1, [pc, #252]	; (8004808 <HAL_COMP_Init+0x130>)
               | hcomp->Init.Hysteresis
 800470c:	432b      	orrs	r3, r5
    tmp_csr = (  hcomp->Init.InputMinus
 800470e:	4303      	orrs	r3, r0
    MODIFY_REG(hcomp->Instance->CSR,
 8004710:	4031      	ands	r1, r6
 8004712:	430b      	orrs	r3, r1
 8004714:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	0218      	lsls	r0, r3, #8
 800471a:	d501      	bpl.n	8004720 <HAL_COMP_Init+0x48>
 800471c:	023b      	lsls	r3, r7, #8
 800471e:	d54e      	bpl.n	80047be <HAL_COMP_Init+0xe6>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8004720:	4b3a      	ldr	r3, [pc, #232]	; (800480c <HAL_COMP_Init+0x134>)
 8004722:	429a      	cmp	r2, r3
 8004724:	d066      	beq.n	80047f4 <HAL_COMP_Init+0x11c>
 8004726:	4b3a      	ldr	r3, [pc, #232]	; (8004810 <HAL_COMP_Init+0x138>)
 8004728:	429a      	cmp	r2, r3
 800472a:	d068      	beq.n	80047fe <HAL_COMP_Init+0x126>
 800472c:	3304      	adds	r3, #4
 800472e:	429a      	cmp	r2, r3
 8004730:	bf0b      	itete	eq
 8004732:	f06f 5200 	mvneq.w	r2, #536870912	; 0x20000000
 8004736:	f06f 4280 	mvnne.w	r2, #1073741824	; 0x40000000
 800473a:	f04f 5100 	moveq.w	r1, #536870912	; 0x20000000
 800473e:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8004742:	69a3      	ldr	r3, [r4, #24]
 8004744:	079f      	lsls	r7, r3, #30
 8004746:	d025      	beq.n	8004794 <HAL_COMP_Init+0xbc>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004748:	4d32      	ldr	r5, [pc, #200]	; (8004814 <HAL_COMP_Init+0x13c>)
 800474a:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800474c:	06de      	lsls	r6, r3, #27
 800474e:	bf4c      	ite	mi
 8004750:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004752:	4010      	andpl	r0, r2
 8004754:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004756:	4d2f      	ldr	r5, [pc, #188]	; (8004814 <HAL_COMP_Init+0x13c>)
 8004758:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800475a:	069f      	lsls	r7, r3, #26
 800475c:	bf4c      	ite	mi
 800475e:	4308      	orrmi	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004760:	4010      	andpl	r0, r2
 8004762:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004764:	482b      	ldr	r0, [pc, #172]	; (8004814 <HAL_COMP_Init+0x13c>)
 8004766:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004768:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800476a:	079e      	lsls	r6, r3, #30
 800476c:	bf4c      	ite	mi
 800476e:	430d      	orrmi	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004770:	4015      	andpl	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004772:	07db      	lsls	r3, r3, #31
 8004774:	6045      	str	r5, [r0, #4]
 8004776:	d51d      	bpl.n	80047b4 <HAL_COMP_Init+0xdc>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004778:	4b26      	ldr	r3, [pc, #152]	; (8004814 <HAL_COMP_Init+0x13c>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4311      	orrs	r1, r2
 800477e:	6019      	str	r1, [r3, #0]
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004780:	7f63      	ldrb	r3, [r4, #29]
 8004782:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004786:	b18b      	cbz	r3, 80047ac <HAL_COMP_Init+0xd4>
  HAL_StatusTypeDef status = HAL_OK;
 8004788:	2000      	movs	r0, #0
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800478a:	b003      	add	sp, #12
 800478c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 800478e:	2001      	movs	r0, #1
}
 8004790:	b003      	add	sp, #12
 8004792:	bdf0      	pop	{r4, r5, r6, r7, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004794:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <HAL_COMP_Init+0x13c>)
 8004796:	6859      	ldr	r1, [r3, #4]
 8004798:	4011      	ands	r1, r2
 800479a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	400a      	ands	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80047a2:	7f63      	ldrb	r3, [r4, #29]
 80047a4:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ed      	bne.n	8004788 <HAL_COMP_Init+0xb0>
      hcomp->State = HAL_COMP_STATE_READY;
 80047ac:	2301      	movs	r3, #1
 80047ae:	7763      	strb	r3, [r4, #29]
}
 80047b0:	b003      	add	sp, #12
 80047b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b4:	4917      	ldr	r1, [pc, #92]	; (8004814 <HAL_COMP_Init+0x13c>)
 80047b6:	680b      	ldr	r3, [r1, #0]
 80047b8:	401a      	ands	r2, r3
 80047ba:	600a      	str	r2, [r1, #0]
}
 80047bc:	e7f1      	b.n	80047a2 <HAL_COMP_Init+0xca>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_COMP_Init+0x140>)
 80047c0:	4916      	ldr	r1, [pc, #88]	; (800481c <HAL_COMP_Init+0x144>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	099b      	lsrs	r3, r3, #6
 80047c6:	fba1 1303 	umull	r1, r3, r1, r3
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0a2      	beq.n	8004720 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 80047da:	9b01      	ldr	r3, [sp, #4]
 80047dc:	3b01      	subs	r3, #1
 80047de:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 80047e0:	9b01      	ldr	r3, [sp, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f9      	bne.n	80047da <HAL_COMP_Init+0x102>
 80047e6:	e79b      	b.n	8004720 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 80047e8:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 80047ea:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 80047ec:	f7fd ffd8 	bl	80027a0 <HAL_COMP_MspInit>
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	e781      	b.n	80046f8 <HAL_COMP_Init+0x20>
 80047f4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80047f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047fc:	e7a1      	b.n	8004742 <HAL_COMP_Init+0x6a>
 80047fe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004802:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004806:	e79c      	b.n	8004742 <HAL_COMP_Init+0x6a>
 8004808:	ff007e0f 	.word	0xff007e0f
 800480c:	40010200 	.word	0x40010200
 8004810:	40010204 	.word	0x40010204
 8004814:	40010400 	.word	0x40010400
 8004818:	20000718 	.word	0x20000718
 800481c:	053e2d63 	.word	0x053e2d63

08004820 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004820:	b1b0      	cbz	r0, 8004850 <HAL_CORDIC_Init+0x30>
{
 8004822:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004824:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004828:	4604      	mov	r4, r0
 800482a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800482e:	b153      	cbz	r3, 8004846 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004830:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004832:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004834:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004836:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800483a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 800483e:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004842:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004844:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8004846:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800484a:	f7fe f809 	bl	8002860 <HAL_CORDIC_MspInit>
 800484e:	e7ef      	b.n	8004830 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004850:	2001      	movs	r0, #1
}
 8004852:	4770      	bx	lr

08004854 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004854:	4908      	ldr	r1, [pc, #32]	; (8004878 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8004856:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004858:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800485a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8004860:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004862:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004870:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8004874:	60cb      	str	r3, [r1, #12]
 8004876:	4770      	bx	lr
 8004878:	e000ed00 	.word	0xe000ed00

0800487c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <HAL_NVIC_SetPriority+0x68>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004884:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004886:	f1c3 0507 	rsb	r5, r3, #7
 800488a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004890:	bf28      	it	cs
 8004892:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004894:	2c06      	cmp	r4, #6
 8004896:	d919      	bls.n	80048cc <HAL_NVIC_SetPriority+0x50>
 8004898:	3b03      	subs	r3, #3
 800489a:	f04f 34ff 	mov.w	r4, #4294967295
 800489e:	409c      	lsls	r4, r3
 80048a0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a4:	f04f 34ff 	mov.w	r4, #4294967295
 80048a8:	40ac      	lsls	r4, r5
 80048aa:	ea21 0104 	bic.w	r1, r1, r4
 80048ae:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80048b0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048b2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80048b6:	db0c      	blt.n	80048d2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80048bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80048c0:	0109      	lsls	r1, r1, #4
 80048c2:	b2c9      	uxtb	r1, r1
 80048c4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80048c8:	bc30      	pop	{r4, r5}
 80048ca:	4770      	bx	lr
 80048cc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ce:	4613      	mov	r3, r2
 80048d0:	e7e8      	b.n	80048a4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d2:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <HAL_NVIC_SetPriority+0x6c>)
 80048d4:	f000 000f 	and.w	r0, r0, #15
 80048d8:	0109      	lsls	r1, r1, #4
 80048da:	4403      	add	r3, r0
 80048dc:	b2c9      	uxtb	r1, r1
 80048de:	7619      	strb	r1, [r3, #24]
 80048e0:	bc30      	pop	{r4, r5}
 80048e2:	4770      	bx	lr
 80048e4:	e000ed00 	.word	0xe000ed00
 80048e8:	e000ecfc 	.word	0xe000ecfc

080048ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80048ec:	2800      	cmp	r0, #0
 80048ee:	db07      	blt.n	8004900 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048f0:	4a04      	ldr	r2, [pc, #16]	; (8004904 <HAL_NVIC_EnableIRQ+0x18>)
 80048f2:	f000 011f 	and.w	r1, r0, #31
 80048f6:	2301      	movs	r3, #1
 80048f8:	0940      	lsrs	r0, r0, #5
 80048fa:	408b      	lsls	r3, r1
 80048fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	e000e100 	.word	0xe000e100

08004908 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004908:	3801      	subs	r0, #1
 800490a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800490e:	d20e      	bcs.n	800492e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004910:	4b08      	ldr	r3, [pc, #32]	; (8004934 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004912:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004914:	4c08      	ldr	r4, [pc, #32]	; (8004938 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004916:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004918:	20f0      	movs	r0, #240	; 0xf0
 800491a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800491e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004920:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004922:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004924:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8004926:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800492a:	6019      	str	r1, [r3, #0]
 800492c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800492e:	2001      	movs	r0, #1
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000e010 	.word	0xe000e010
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop

08004940 <HAL_SYSTICK_IRQHandler>:
{
 8004940:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004942:	f7ff fffb 	bl	800493c <HAL_SYSTICK_Callback>
}
 8004946:	bd08      	pop	{r3, pc}

08004948 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004948:	b188      	cbz	r0, 800496e <HAL_DAC_Init+0x26>
{
 800494a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800494c:	7903      	ldrb	r3, [r0, #4]
 800494e:	4604      	mov	r4, r0
 8004950:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004954:	b13b      	cbz	r3, 8004966 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004956:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004958:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800495a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800495c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800495e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004960:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004962:	4618      	mov	r0, r3
}
 8004964:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004966:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004968:	f7fd ff92 	bl	8002890 <HAL_DAC_MspInit>
 800496c:	e7f3      	b.n	8004956 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800496e:	2001      	movs	r0, #1
}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop

08004974 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004978:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800497a:	f8d1 8008 	ldr.w	r8, [r1, #8]
  __HAL_LOCK(hdac);
 800497e:	2b01      	cmp	r3, #1
 8004980:	f000 80d0 	beq.w	8004b24 <HAL_DAC_ConfigChannel+0x1b0>
 8004984:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004986:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 8004988:	2201      	movs	r2, #1

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800498a:	f1b8 0f04 	cmp.w	r8, #4
 800498e:	4605      	mov	r5, r0
 8004990:	460e      	mov	r6, r1
  __HAL_LOCK(hdac);
 8004992:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8004994:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004996:	d078      	beq.n	8004a8a <HAL_DAC_ConfigChannel+0x116>
 8004998:	6803      	ldr	r3, [r0, #0]
 800499a:	f004 0410 	and.w	r4, r4, #16
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800499e:	69f2      	ldr	r2, [r6, #28]
 80049a0:	2a01      	cmp	r2, #1
 80049a2:	d068      	beq.n	8004a76 <HAL_DAC_ConfigChannel+0x102>
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80049a4:	69b1      	ldr	r1, [r6, #24]
  tmpreg1 = hdac->Instance->MCR;
 80049a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80049a8:	2207      	movs	r2, #7
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80049aa:	07cf      	lsls	r7, r1, #31
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80049ac:	fa02 fc04 	lsl.w	ip, r2, r4
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80049b0:	6972      	ldr	r2, [r6, #20]
 80049b2:	d45e      	bmi.n	8004a72 <HAL_DAC_ConfigChannel+0xfe>
  {
    connectOnChip = 0x00000000UL;
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80049b4:	0789      	lsls	r1, r1, #30
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80049b6:	bf56      	itet	pl
 80049b8:	fab2 f182 	clzpl	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 80049bc:	2101      	movmi	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80049be:	0949      	lsrpl	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80049c0:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80049c2:	7932      	ldrb	r2, [r6, #4]
 80049c4:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80049c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80049ca:	f44f 7780 	mov.w	r7, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80049ce:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80049d2:	fa07 f704 	lsl.w	r7, r7, r4
 80049d6:	ea42 020c 	orr.w	r2, r2, ip
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80049da:	ea41 0808 	orr.w	r8, r1, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80049de:	ea20 0202 	bic.w	r2, r0, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80049e2:	7971      	ldrb	r1, [r6, #5]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80049e4:	ea6f 0707 	mvn.w	r7, r7
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80049e8:	ea07 0702 	and.w	r7, r7, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80049ec:	6832      	ldr	r2, [r6, #0]
 80049ee:	bf08      	it	eq
 80049f0:	f448 7880 	orreq.w	r8, r8, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80049f4:	2901      	cmp	r1, #1
 80049f6:	bf08      	it	eq
 80049f8:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80049fc:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80049fe:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004a02:	d07d      	beq.n	8004b00 <HAL_DAC_ConfigChannel+0x18c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004a04:	4317      	orrs	r7, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a06:	fa08 f804 	lsl.w	r8, r8, r4
 8004a0a:	ea48 0707 	orr.w	r7, r8, r7
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004a0e:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004a10:	e9d6 1203 	ldrd	r1, r2, [r6, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8004a1a:	40a6      	lsls	r6, r4
 8004a1c:	ea20 0006 	bic.w	r0, r0, r6
 8004a20:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8004a22:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004a24:	f640 76fe 	movw	r6, #4094	; 0xffe
 8004a28:	40a6      	lsls	r6, r4
 8004a2a:	ea20 0606 	bic.w	r6, r0, r6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a2e:	fa01 f004 	lsl.w	r0, r1, r4
 8004a32:	4330      	orrs	r0, r6
  hdac->Instance->CR = tmpreg1;
 8004a34:	6018      	str	r0, [r3, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	26c0      	movs	r6, #192	; 0xc0
 8004a3a:	40a6      	lsls	r6, r4
 8004a3c:	ea20 0006 	bic.w	r0, r0, r6
 8004a40:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004a42:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004a44:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004a46:	f3c1 0183 	ubfx	r1, r1, #2, #4
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004a4a:	f640 760f 	movw	r6, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004a4e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8004a52:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004a54:	fa06 f104 	lsl.w	r1, r6, r4
 8004a58:	fa02 f404 	lsl.w	r4, r2, r4
 8004a5c:	ea20 0201 	bic.w	r2, r0, r1
 8004a60:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a62:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a64:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004a66:	661c      	str	r4, [r3, #96]	; 0x60
  hdac->State = HAL_DAC_STATE_READY;
 8004a68:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 8004a6a:	716a      	strb	r2, [r5, #5]

  /* Return function status */
  return HAL_OK;
 8004a6c:	4610      	mov	r0, r2
}
 8004a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8004a72:	2100      	movs	r1, #0
 8004a74:	e7a4      	b.n	80049c0 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 8004a76:	6b99      	ldr	r1, [r3, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a78:	6a32      	ldr	r2, [r6, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004a7a:	201f      	movs	r0, #31
 8004a7c:	40a0      	lsls	r0, r4
 8004a7e:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a82:	40a2      	lsls	r2, r4
 8004a84:	430a      	orrs	r2, r1
    hdac->Instance->CCR = tmpreg1;
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
 8004a88:	e78c      	b.n	80049a4 <HAL_DAC_ConfigChannel+0x30>
    if (Channel == DAC_CHANNEL_1)
 8004a8a:	b9bc      	cbnz	r4, 8004abc <HAL_DAC_ConfigChannel+0x148>
      tickstart = HAL_GetTick();
 8004a8c:	f7fe ff38 	bl	8003900 <HAL_GetTick>
 8004a90:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a92:	e004      	b.n	8004a9e <HAL_DAC_ConfigChannel+0x12a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a94:	f7fe ff34 	bl	8003900 <HAL_GetTick>
 8004a98:	1bc0      	subs	r0, r0, r7
 8004a9a:	2801      	cmp	r0, #1
 8004a9c:	d839      	bhi.n	8004b12 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a9e:	682b      	ldr	r3, [r5, #0]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	d4f6      	bmi.n	8004a94 <HAL_DAC_ConfigChannel+0x120>
      HAL_Delay(1);
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f7fe ff30 	bl	800390c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab2:	e00d      	b.n	8004ad0 <HAL_DAC_ConfigChannel+0x15c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ab4:	f7fe ff24 	bl	8003900 <HAL_GetTick>
 8004ab8:	2801      	cmp	r0, #1
 8004aba:	d82a      	bhi.n	8004b12 <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	dbf7      	blt.n	8004ab4 <HAL_DAC_ConfigChannel+0x140>
      HAL_Delay(1U);
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	f7fe ff21 	bl	800390c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004ace:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ad2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004ad4:	f8d6 8008 	ldr.w	r8, [r6, #8]
 8004ad8:	f004 0410 	and.w	r4, r4, #16
 8004adc:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8004ae0:	40a0      	lsls	r0, r4
 8004ae2:	ea22 0200 	bic.w	r2, r2, r0
 8004ae6:	40a1      	lsls	r1, r4
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004aec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aee:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004af0:	20ff      	movs	r0, #255	; 0xff
 8004af2:	40a0      	lsls	r0, r4
 8004af4:	ea22 0200 	bic.w	r2, r2, r0
 8004af8:	40a1      	lsls	r1, r4
 8004afa:	430a      	orrs	r2, r1
 8004afc:	64da      	str	r2, [r3, #76]	; 0x4c
 8004afe:	e74e      	b.n	800499e <HAL_DAC_ConfigChannel+0x2a>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004b00:	f000 fdb4 	bl	800566c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <HAL_DAC_ConfigChannel+0x1c4>)
 8004b06:	4298      	cmp	r0, r3
 8004b08:	d90f      	bls.n	8004b2a <HAL_DAC_ConfigChannel+0x1b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004b0a:	682b      	ldr	r3, [r5, #0]
 8004b0c:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8004b10:	e779      	b.n	8004a06 <HAL_DAC_ConfigChannel+0x92>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b12:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b14:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b16:	f043 0308 	orr.w	r3, r3, #8
 8004b1a:	612b      	str	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b1c:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 8004b1e:	4610      	mov	r0, r2
}
 8004b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hdac);
 8004b24:	2002      	movs	r0, #2
}
 8004b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <HAL_DAC_ConfigChannel+0x1c8>)
 8004b2c:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004b2e:	bf88      	it	hi
 8004b30:	f447 4780 	orrhi.w	r7, r7, #16384	; 0x4000
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	e766      	b.n	8004a06 <HAL_DAC_ConfigChannel+0x92>
 8004b38:	09896800 	.word	0x09896800
 8004b3c:	04c4b400 	.word	0x04c4b400

08004b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b44:	680e      	ldr	r6, [r1, #0]
{
 8004b46:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b48:	2e00      	cmp	r6, #0
 8004b4a:	f000 808b 	beq.w	8004c64 <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b4e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8004d24 <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 8004b52:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b54:	2201      	movs	r2, #1
 8004b56:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8004b5a:	ea14 0c06 	ands.w	ip, r4, r6
 8004b5e:	d07c      	beq.n	8004c5a <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b60:	684d      	ldr	r5, [r1, #4]
 8004b62:	f025 0a10 	bic.w	sl, r5, #16
 8004b66:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004b6a:	2a01      	cmp	r2, #1
 8004b6c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b70:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b74:	d979      	bls.n	8004c6a <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 8004b76:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b78:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b7a:	fa02 f208 	lsl.w	r2, r2, r8
 8004b7e:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b82:	fa04 f408 	lsl.w	r4, r4, r8
 8004b86:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8004b88:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b8a:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8004b8c:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b8e:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b92:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b94:	fa02 f208 	lsl.w	r2, r2, r8
 8004b98:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b9a:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8004b9c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b9e:	d55c      	bpl.n	8004c5a <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba0:	4c5a      	ldr	r4, [pc, #360]	; (8004d0c <HAL_GPIO_Init+0x1cc>)
 8004ba2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	6622      	str	r2, [r4, #96]	; 0x60
 8004baa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004bac:	f023 0403 	bic.w	r4, r3, #3
 8004bb0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004bb4:	f002 0201 	and.w	r2, r2, #1
 8004bb8:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8004bbc:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bbe:	f003 0203 	and.w	r2, r3, #3
 8004bc2:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc6:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004bc8:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bd0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bd4:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bd8:	d018      	beq.n	8004c0c <HAL_GPIO_Init+0xcc>
 8004bda:	4a4d      	ldr	r2, [pc, #308]	; (8004d10 <HAL_GPIO_Init+0x1d0>)
 8004bdc:	4290      	cmp	r0, r2
 8004bde:	f000 8084 	beq.w	8004cea <HAL_GPIO_Init+0x1aa>
 8004be2:	4a4c      	ldr	r2, [pc, #304]	; (8004d14 <HAL_GPIO_Init+0x1d4>)
 8004be4:	4290      	cmp	r0, r2
 8004be6:	f000 8085 	beq.w	8004cf4 <HAL_GPIO_Init+0x1b4>
 8004bea:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <HAL_GPIO_Init+0x1d8>)
 8004bec:	4290      	cmp	r0, r2
 8004bee:	d076      	beq.n	8004cde <HAL_GPIO_Init+0x19e>
 8004bf0:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <HAL_GPIO_Init+0x1dc>)
 8004bf2:	4290      	cmp	r0, r2
 8004bf4:	f000 8084 	beq.w	8004d00 <HAL_GPIO_Init+0x1c0>
 8004bf8:	4a49      	ldr	r2, [pc, #292]	; (8004d20 <HAL_GPIO_Init+0x1e0>)
 8004bfa:	4290      	cmp	r0, r2
 8004bfc:	bf0c      	ite	eq
 8004bfe:	f04f 0805 	moveq.w	r8, #5
 8004c02:	f04f 0806 	movne.w	r8, #6
 8004c06:	fa08 f209 	lsl.w	r2, r8, r9
 8004c0a:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c0c:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 8004c0e:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8004c12:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c16:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 8004c18:	bf54      	ite	pl
 8004c1a:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004c1c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 8004c20:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 8004c24:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c28:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8004c2a:	bf54      	ite	pl
 8004c2c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004c2e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 8004c32:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c36:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c3a:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8004c3c:	bf54      	ite	pl
 8004c3e:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004c40:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 8004c44:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8004c48:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c4c:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8004c4e:	bf54      	ite	pl
 8004c50:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8004c52:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 8004c56:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8004c5a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c5c:	fa36 f203 	lsrs.w	r2, r6, r3
 8004c60:	f47f af78 	bne.w	8004b54 <HAL_GPIO_Init+0x14>
  }
}
 8004c64:	b003      	add	sp, #12
 8004c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004c6a:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c6c:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c70:	fa02 f208 	lsl.w	r2, r2, r8
 8004c74:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c78:	68cf      	ldr	r7, [r1, #12]
 8004c7a:	fa07 f708 	lsl.w	r7, r7, r8
 8004c7e:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8004c82:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004c84:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c86:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c8a:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c8e:	465c      	mov	r4, fp
 8004c90:	409c      	lsls	r4, r3
 8004c92:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 8004c94:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8004c96:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c98:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c9c:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ca0:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ca4:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ca8:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8004cac:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cae:	f47f af6d 	bne.w	8004b8c <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8004cb2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8004cb6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cba:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004cbe:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	f04f 0a0f 	mov.w	sl, #15
 8004cc8:	fa0a fb02 	lsl.w	fp, sl, r2
 8004ccc:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cd0:	690c      	ldr	r4, [r1, #16]
 8004cd2:	4094      	lsls	r4, r2
 8004cd4:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004cd8:	f8c9 4020 	str.w	r4, [r9, #32]
 8004cdc:	e756      	b.n	8004b8c <HAL_GPIO_Init+0x4c>
 8004cde:	f04f 0803 	mov.w	r8, #3
 8004ce2:	fa08 f209 	lsl.w	r2, r8, r9
 8004ce6:	4317      	orrs	r7, r2
 8004ce8:	e790      	b.n	8004c0c <HAL_GPIO_Init+0xcc>
 8004cea:	2201      	movs	r2, #1
 8004cec:	fa02 f209 	lsl.w	r2, r2, r9
 8004cf0:	4317      	orrs	r7, r2
 8004cf2:	e78b      	b.n	8004c0c <HAL_GPIO_Init+0xcc>
 8004cf4:	f04f 0802 	mov.w	r8, #2
 8004cf8:	fa08 f209 	lsl.w	r2, r8, r9
 8004cfc:	4317      	orrs	r7, r2
 8004cfe:	e785      	b.n	8004c0c <HAL_GPIO_Init+0xcc>
 8004d00:	f04f 0804 	mov.w	r8, #4
 8004d04:	fa08 f209 	lsl.w	r2, r8, r9
 8004d08:	4317      	orrs	r7, r2
 8004d0a:	e77f      	b.n	8004c0c <HAL_GPIO_Init+0xcc>
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	48000400 	.word	0x48000400
 8004d14:	48000800 	.word	0x48000800
 8004d18:	48000c00 	.word	0x48000c00
 8004d1c:	48001000 	.word	0x48001000
 8004d20:	48001400 	.word	0x48001400
 8004d24:	40010400 	.word	0x40010400

08004d28 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d07d      	beq.n	8004e28 <HAL_OPAMP_Init+0x100>
{
 8004d2c:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004d2e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004d32:	2b05      	cmp	r3, #5
{
 8004d34:	b082      	sub	sp, #8
 8004d36:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8004d38:	d057      	beq.n	8004dea <HAL_OPAMP_Init+0xc2>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8004d3a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d053      	beq.n	8004dea <HAL_OPAMP_Init+0xc2>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d42:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <HAL_OPAMP_Init+0x104>)
 8004d44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	661a      	str	r2, [r3, #96]	; 0x60
 8004d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004d56:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d5e:	b90b      	cbnz	r3, 8004d64 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8004d60:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8004d64:	4620      	mov	r0, r4
 8004d66:	f7fd fdab 	bl	80028c0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	f023 0220 	bic.w	r2, r3, #32
 8004d70:	2a40      	cmp	r2, #64	; 0x40
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004d72:	6822      	ldr	r2, [r4, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8004d74:	d03c      	beq.n	8004df0 <HAL_OPAMP_Init+0xc8>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8004d76:	6860      	ldr	r0, [r4, #4]
 8004d78:	68e6      	ldr	r6, [r4, #12]
 8004d7a:	6811      	ldr	r1, [r2, #0]
 8004d7c:	6925      	ldr	r5, [r4, #16]
 8004d7e:	4303      	orrs	r3, r0
 8004d80:	4333      	orrs	r3, r6
 8004d82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8004d84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d86:	432b      	orrs	r3, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004d88:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8004d8c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8004d8e:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8004d90:	4333      	orrs	r3, r6
 8004d92:	e9d4 600c 	ldrd	r6, r0, [r4, #48]	; 0x30
      MODIFY_REG(hopamp->Instance->CSR,
 8004d96:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004d98:	432b      	orrs	r3, r5
 8004d9a:	4925      	ldr	r1, [pc, #148]	; (8004e30 <HAL_OPAMP_Init+0x108>)
 8004d9c:	6815      	ldr	r5, [r2, #0]
 8004d9e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8004da2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004da6:	7d20      	ldrb	r0, [r4, #20]
 8004da8:	4029      	ands	r1, r5
 8004daa:	2801      	cmp	r0, #1
 8004dac:	ea43 0301 	orr.w	r3, r3, r1
 8004db0:	bf0c      	ite	eq
 8004db2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8004db6:	2100      	movne	r1, #0
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8004dbc:	6993      	ldr	r3, [r2, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	db09      	blt.n	8004dd6 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8004dc2:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8004dc6:	6a20      	ldr	r0, [r4, #32]
 8004dc8:	6991      	ldr	r1, [r2, #24]
 8004dca:	432b      	orrs	r3, r5
 8004dcc:	4303      	orrs	r3, r0
 8004dce:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8004dd6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004dda:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004dde:	bb03      	cbnz	r3, 8004e22 <HAL_OPAMP_Init+0xfa>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
  }
}
 8004de6:	b002      	add	sp, #8
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004dea:	2001      	movs	r0, #1
}
 8004dec:	b002      	add	sp, #8
 8004dee:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8004df0:	6866      	ldr	r6, [r4, #4]
 8004df2:	6811      	ldr	r1, [r2, #0]
 8004df4:	6920      	ldr	r0, [r4, #16]
 8004df6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004df8:	4333      	orrs	r3, r6
 8004dfa:	4303      	orrs	r3, r0
 8004dfc:	f021 0110 	bic.w	r1, r1, #16
      MODIFY_REG(hopamp->Instance->CSR,
 8004e00:	6a60      	ldr	r0, [r4, #36]	; 0x24
      MODIFY_REG(hopamp->Instance->CSR,
 8004e02:	4329      	orrs	r1, r5
      MODIFY_REG(hopamp->Instance->CSR,
 8004e04:	6aa5      	ldr	r5, [r4, #40]	; 0x28
      MODIFY_REG(hopamp->Instance->CSR,
 8004e06:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8004e08:	4303      	orrs	r3, r0
 8004e0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004e0c:	6816      	ldr	r6, [r2, #0]
 8004e0e:	4908      	ldr	r1, [pc, #32]	; (8004e30 <HAL_OPAMP_Init+0x108>)
 8004e10:	432b      	orrs	r3, r5
 8004e12:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004e14:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8004e18:	4031      	ands	r1, r6
 8004e1a:	7d20      	ldrb	r0, [r4, #20]
 8004e1c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8004e20:	e7c3      	b.n	8004daa <HAL_OPAMP_Init+0x82>
    return status;
 8004e22:	2000      	movs	r0, #0
}
 8004e24:	b002      	add	sp, #8
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004e28:	2001      	movs	r0, #1
}
 8004e2a:	4770      	bx	lr
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	e0003e11 	.word	0xe0003e11

08004e34 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e34:	4a3b      	ldr	r2, [pc, #236]	; (8004f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8004e36:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e38:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e3a:	b968      	cbnz	r0, 8004e58 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e44:	d014      	beq.n	8004e70 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e46:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e56:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004e5c:	d02f      	beq.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e66:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004e68:	2000      	movs	r0, #0
}
 8004e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e6e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e70:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e74:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004e76:	482d      	ldr	r0, [pc, #180]	; (8004f2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e78:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004e7c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e80:	6811      	ldr	r1, [r2, #0]
 8004e82:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004e86:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004e8a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e8c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e8e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e90:	2332      	movs	r3, #50	; 0x32
 8004e92:	fb03 f304 	mul.w	r3, r3, r4
 8004e96:	fba0 0303 	umull	r0, r3, r0, r3
 8004e9a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e9c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e9e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ea2:	d506      	bpl.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004ea4:	e000      	b.n	8004ea8 <HAL_PWREx_ControlVoltageScaling+0x74>
 8004ea6:	b123      	cbz	r3, 8004eb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004ea8:	6951      	ldr	r1, [r2, #20]
 8004eaa:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004eac:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb0:	d4f9      	bmi.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	055c      	lsls	r4, r3, #21
 8004eb8:	d5d6      	bpl.n	8004e68 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004eba:	2003      	movs	r0, #3
 8004ebc:	e7c9      	b.n	8004e52 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec6:	d009      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ec8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8004ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004ed4:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ed6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004eda:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004edc:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004ee2:	4812      	ldr	r0, [pc, #72]	; (8004f2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ee4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004ee8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004ef2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004ef6:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ef8:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004efa:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004efc:	2332      	movs	r3, #50	; 0x32
 8004efe:	fb03 f304 	mul.w	r3, r3, r4
 8004f02:	fba0 0303 	umull	r0, r3, r0, r3
 8004f06:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f08:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f0a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f0e:	d5d0      	bpl.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004f10:	e001      	b.n	8004f16 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0cd      	beq.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004f16:	6951      	ldr	r1, [r2, #20]
 8004f18:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004f1a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1e:	d5c8      	bpl.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004f20:	e7f7      	b.n	8004f12 <HAL_PWREx_ControlVoltageScaling+0xde>
 8004f22:	bf00      	nop
 8004f24:	40007000 	.word	0x40007000
 8004f28:	20000718 	.word	0x20000718
 8004f2c:	431bde83 	.word	0x431bde83

08004f30 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004f30:	4a02      	ldr	r2, [pc, #8]	; (8004f3c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004f32:	6893      	ldr	r3, [r2, #8]
 8004f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f38:	6093      	str	r3, [r2, #8]
}
 8004f3a:	4770      	bx	lr
 8004f3c:	40007000 	.word	0x40007000

08004f40 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f40:	2800      	cmp	r0, #0
 8004f42:	f000 81c3 	beq.w	80052cc <HAL_RCC_OscConfig+0x38c>
{
 8004f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f4a:	6803      	ldr	r3, [r0, #0]
 8004f4c:	07d9      	lsls	r1, r3, #31
{
 8004f4e:	b082      	sub	sp, #8
 8004f50:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f52:	d52d      	bpl.n	8004fb0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f54:	49b5      	ldr	r1, [pc, #724]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 8004f56:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f58:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f5e:	2a0c      	cmp	r2, #12
 8004f60:	f000 810a 	beq.w	8005178 <HAL_RCC_OscConfig+0x238>
 8004f64:	2a08      	cmp	r2, #8
 8004f66:	f000 810c 	beq.w	8005182 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	f000 8133 	beq.w	80051da <HAL_RCC_OscConfig+0x29a>
 8004f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f78:	f000 819b 	beq.w	80052b2 <HAL_RCC_OscConfig+0x372>
 8004f7c:	4dab      	ldr	r5, [pc, #684]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 8004f7e:	682a      	ldr	r2, [r5, #0]
 8004f80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f84:	602a      	str	r2, [r5, #0]
 8004f86:	682a      	ldr	r2, [r5, #0]
 8004f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f8c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 8128 	bne.w	80051e4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fe fcb4 	bl	8003900 <HAL_GetTick>
 8004f98:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f9a:	e005      	b.n	8004fa8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fe fcb0 	bl	8003900 <HAL_GetTick>
 8004fa0:	1b80      	subs	r0, r0, r6
 8004fa2:	2864      	cmp	r0, #100	; 0x64
 8004fa4:	f200 813b 	bhi.w	800521e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	039f      	lsls	r7, r3, #14
 8004fac:	d4f6      	bmi.n	8004f9c <HAL_RCC_OscConfig+0x5c>
 8004fae:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb0:	079e      	lsls	r6, r3, #30
 8004fb2:	d528      	bpl.n	8005006 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fb4:	4a9d      	ldr	r2, [pc, #628]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 8004fb6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fb8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fba:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	f000 80ec 	beq.w	800519c <HAL_RCC_OscConfig+0x25c>
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	f000 80ee 	beq.w	80051a6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fca:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fcc:	4d97      	ldr	r5, [pc, #604]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8116 	beq.w	8005200 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fda:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fdc:	f7fe fc90 	bl	8003900 <HAL_GetTick>
 8004fe0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe4:	f7fe fc8c 	bl	8003900 <HAL_GetTick>
 8004fe8:	1b80      	subs	r0, r0, r6
 8004fea:	2802      	cmp	r0, #2
 8004fec:	f200 8117 	bhi.w	800521e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	0558      	lsls	r0, r3, #21
 8004ff4:	d5f6      	bpl.n	8004fe4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff6:	686b      	ldr	r3, [r5, #4]
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ffe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005002:	606b      	str	r3, [r5, #4]
 8005004:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005006:	071a      	lsls	r2, r3, #28
 8005008:	d519      	bpl.n	800503e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800500a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800500c:	4d87      	ldr	r5, [pc, #540]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 809e 	beq.w	8005150 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8005014:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fe fc6e 	bl	8003900 <HAL_GetTick>
 8005024:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005026:	e005      	b.n	8005034 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005028:	f7fe fc6a 	bl	8003900 <HAL_GetTick>
 800502c:	1b80      	subs	r0, r0, r6
 800502e:	2802      	cmp	r0, #2
 8005030:	f200 80f5 	bhi.w	800521e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005034:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005038:	079f      	lsls	r7, r3, #30
 800503a:	d5f5      	bpl.n	8005028 <HAL_RCC_OscConfig+0xe8>
 800503c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800503e:	0759      	lsls	r1, r3, #29
 8005040:	d541      	bpl.n	80050c6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005042:	4b7a      	ldr	r3, [pc, #488]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 8005044:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005046:	00d2      	lsls	r2, r2, #3
 8005048:	f100 80ed 	bmi.w	8005226 <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800504e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005052:	659a      	str	r2, [r3, #88]	; 0x58
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800505e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005060:	4e73      	ldr	r6, [pc, #460]	; (8005230 <HAL_RCC_OscConfig+0x2f0>)
 8005062:	6833      	ldr	r3, [r6, #0]
 8005064:	05df      	lsls	r7, r3, #23
 8005066:	f140 8113 	bpl.w	8005290 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800506a:	68a3      	ldr	r3, [r4, #8]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f000 80e3 	beq.w	8005238 <HAL_RCC_OscConfig+0x2f8>
 8005072:	2b05      	cmp	r3, #5
 8005074:	f000 8169 	beq.w	800534a <HAL_RCC_OscConfig+0x40a>
 8005078:	4e6c      	ldr	r6, [pc, #432]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 800507a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800507e:	f022 0201 	bic.w	r2, r2, #1
 8005082:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8005086:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800508a:	f022 0204 	bic.w	r2, r2, #4
 800508e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005092:	2b00      	cmp	r3, #0
 8005094:	f040 80d7 	bne.w	8005246 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005098:	f7fe fc32 	bl	8003900 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80050a0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050a2:	e005      	b.n	80050b0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a4:	f7fe fc2c 	bl	8003900 <HAL_GetTick>
 80050a8:	1bc0      	subs	r0, r0, r7
 80050aa:	4540      	cmp	r0, r8
 80050ac:	f200 80b7 	bhi.w	800521e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050b0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80050b4:	079a      	lsls	r2, r3, #30
 80050b6:	d4f5      	bmi.n	80050a4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050b8:	b125      	cbz	r5, 80050c4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ba:	4a5c      	ldr	r2, [pc, #368]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 80050bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80050be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c2:	6593      	str	r3, [r2, #88]	; 0x58
 80050c4:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050c6:	069b      	lsls	r3, r3, #26
 80050c8:	d518      	bpl.n	80050fc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050ca:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050cc:	4d57      	ldr	r5, [pc, #348]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 80ca 	beq.w	8005268 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80050d4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fe fc0e 	bl	8003900 <HAL_GetTick>
 80050e4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050e6:	e005      	b.n	80050f4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e8:	f7fe fc0a 	bl	8003900 <HAL_GetTick>
 80050ec:	1b80      	subs	r0, r0, r6
 80050ee:	2802      	cmp	r0, #2
 80050f0:	f200 8095 	bhi.w	800521e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80050f8:	079f      	lsls	r7, r3, #30
 80050fa:	d5f5      	bpl.n	80050e8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050fc:	69e0      	ldr	r0, [r4, #28]
 80050fe:	b318      	cbz	r0, 8005148 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005100:	4d4a      	ldr	r5, [pc, #296]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 8005102:	68ab      	ldr	r3, [r5, #8]
 8005104:	f003 030c 	and.w	r3, r3, #12
 8005108:	2b0c      	cmp	r3, #12
 800510a:	f000 812c 	beq.w	8005366 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005110:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005116:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005118:	f000 80da 	beq.w	80052d0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800511c:	68eb      	ldr	r3, [r5, #12]
 800511e:	f023 0303 	bic.w	r3, r3, #3
 8005122:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005124:	68eb      	ldr	r3, [r5, #12]
 8005126:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800512a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800512e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005130:	f7fe fbe6 	bl	8003900 <HAL_GetTick>
 8005134:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005136:	e004      	b.n	8005142 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fe fbe2 	bl	8003900 <HAL_GetTick>
 800513c:	1b00      	subs	r0, r0, r4
 800513e:	2802      	cmp	r0, #2
 8005140:	d86d      	bhi.n	800521e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005142:	682b      	ldr	r3, [r5, #0]
 8005144:	019b      	lsls	r3, r3, #6
 8005146:	d4f7      	bmi.n	8005138 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8005148:	2000      	movs	r0, #0
}
 800514a:	b002      	add	sp, #8
 800514c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005150:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800515c:	f7fe fbd0 	bl	8003900 <HAL_GetTick>
 8005160:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005162:	e004      	b.n	800516e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005164:	f7fe fbcc 	bl	8003900 <HAL_GetTick>
 8005168:	1b80      	subs	r0, r0, r6
 800516a:	2802      	cmp	r0, #2
 800516c:	d857      	bhi.n	800521e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800516e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005172:	0798      	lsls	r0, r3, #30
 8005174:	d4f6      	bmi.n	8005164 <HAL_RCC_OscConfig+0x224>
 8005176:	e761      	b.n	800503c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005178:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800517c:	2903      	cmp	r1, #3
 800517e:	f47f aef4 	bne.w	8004f6a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005182:	4a2a      	ldr	r2, [pc, #168]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	0392      	lsls	r2, r2, #14
 8005188:	f57f af12 	bpl.w	8004fb0 <HAL_RCC_OscConfig+0x70>
 800518c:	6862      	ldr	r2, [r4, #4]
 800518e:	2a00      	cmp	r2, #0
 8005190:	f47f af0e 	bne.w	8004fb0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005194:	2001      	movs	r0, #1
}
 8005196:	b002      	add	sp, #8
 8005198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800519c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80051a0:	2a02      	cmp	r2, #2
 80051a2:	f47f af12 	bne.w	8004fca <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051a6:	4b21      	ldr	r3, [pc, #132]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	055d      	lsls	r5, r3, #21
 80051ac:	d502      	bpl.n	80051b4 <HAL_RCC_OscConfig+0x274>
 80051ae:	68e3      	ldr	r3, [r4, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0ef      	beq.n	8005194 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4a1d      	ldr	r2, [pc, #116]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 80051b6:	6920      	ldr	r0, [r4, #16]
 80051b8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051ba:	491e      	ldr	r1, [pc, #120]	; (8005234 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80051c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80051c4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051c6:	6808      	ldr	r0, [r1, #0]
 80051c8:	f7fe fb58 	bl	800387c <HAL_InitTick>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d1e1      	bne.n	8005194 <HAL_RCC_OscConfig+0x254>
 80051d0:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d2:	071a      	lsls	r2, r3, #28
 80051d4:	f57f af33 	bpl.w	800503e <HAL_RCC_OscConfig+0xfe>
 80051d8:	e717      	b.n	800500a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051da:	4a14      	ldr	r2, [pc, #80]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80051e4:	f7fe fb8c 	bl	8003900 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051e8:	4e10      	ldr	r6, [pc, #64]	; (800522c <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 80051ea:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ec:	e004      	b.n	80051f8 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ee:	f7fe fb87 	bl	8003900 <HAL_GetTick>
 80051f2:	1b40      	subs	r0, r0, r5
 80051f4:	2864      	cmp	r0, #100	; 0x64
 80051f6:	d812      	bhi.n	800521e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	039b      	lsls	r3, r3, #14
 80051fc:	d5f7      	bpl.n	80051ee <HAL_RCC_OscConfig+0x2ae>
 80051fe:	e6d6      	b.n	8004fae <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005206:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005208:	f7fe fb7a 	bl	8003900 <HAL_GetTick>
 800520c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	0559      	lsls	r1, r3, #21
 8005212:	d5dd      	bpl.n	80051d0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005214:	f7fe fb74 	bl	8003900 <HAL_GetTick>
 8005218:	1b80      	subs	r0, r0, r6
 800521a:	2802      	cmp	r0, #2
 800521c:	d9f7      	bls.n	800520e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 800521e:	2003      	movs	r0, #3
}
 8005220:	b002      	add	sp, #8
 8005222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2500      	movs	r5, #0
 8005228:	e71a      	b.n	8005060 <HAL_RCC_OscConfig+0x120>
 800522a:	bf00      	nop
 800522c:	40021000 	.word	0x40021000
 8005230:	40007000 	.word	0x40007000
 8005234:	20000720 	.word	0x20000720
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005238:	4a65      	ldr	r2, [pc, #404]	; (80053d0 <HAL_RCC_OscConfig+0x490>)
 800523a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005246:	f7fe fb5b 	bl	8003900 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800524a:	4f61      	ldr	r7, [pc, #388]	; (80053d0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800524c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005252:	e004      	b.n	800525e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005254:	f7fe fb54 	bl	8003900 <HAL_GetTick>
 8005258:	1b80      	subs	r0, r0, r6
 800525a:	4540      	cmp	r0, r8
 800525c:	d8df      	bhi.n	800521e <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800525e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005262:	0799      	lsls	r1, r3, #30
 8005264:	d5f6      	bpl.n	8005254 <HAL_RCC_OscConfig+0x314>
 8005266:	e727      	b.n	80050b8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8005268:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800526c:	f023 0301 	bic.w	r3, r3, #1
 8005270:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005274:	f7fe fb44 	bl	8003900 <HAL_GetTick>
 8005278:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800527a:	e004      	b.n	8005286 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800527c:	f7fe fb40 	bl	8003900 <HAL_GetTick>
 8005280:	1b80      	subs	r0, r0, r6
 8005282:	2802      	cmp	r0, #2
 8005284:	d8cb      	bhi.n	800521e <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005286:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800528a:	0798      	lsls	r0, r3, #30
 800528c:	d4f6      	bmi.n	800527c <HAL_RCC_OscConfig+0x33c>
 800528e:	e735      	b.n	80050fc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005298:	f7fe fb32 	bl	8003900 <HAL_GetTick>
 800529c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529e:	6833      	ldr	r3, [r6, #0]
 80052a0:	05d8      	lsls	r0, r3, #23
 80052a2:	f53f aee2 	bmi.w	800506a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a6:	f7fe fb2b 	bl	8003900 <HAL_GetTick>
 80052aa:	1bc0      	subs	r0, r0, r7
 80052ac:	2802      	cmp	r0, #2
 80052ae:	d9f6      	bls.n	800529e <HAL_RCC_OscConfig+0x35e>
 80052b0:	e7b5      	b.n	800521e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052b6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052c8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052ca:	e78b      	b.n	80051e4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80052cc:	2001      	movs	r0, #1
}
 80052ce:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80052d0:	f7fe fb16 	bl	8003900 <HAL_GetTick>
 80052d4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d6:	e004      	b.n	80052e2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d8:	f7fe fb12 	bl	8003900 <HAL_GetTick>
 80052dc:	1b80      	subs	r0, r0, r6
 80052de:	2802      	cmp	r0, #2
 80052e0:	d89d      	bhi.n	800521e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e2:	682b      	ldr	r3, [r5, #0]
 80052e4:	0199      	lsls	r1, r3, #6
 80052e6:	d4f7      	bmi.n	80052d8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e8:	68e9      	ldr	r1, [r5, #12]
 80052ea:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCC_OscConfig+0x494>)
 80052ec:	6a22      	ldr	r2, [r4, #32]
 80052ee:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80052f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80052f4:	400b      	ands	r3, r1
 80052f6:	4313      	orrs	r3, r2
 80052f8:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 80052fc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8005300:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8005304:	3801      	subs	r0, #1
 8005306:	0849      	lsrs	r1, r1, #1
 8005308:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800530c:	3901      	subs	r1, #1
 800530e:	0852      	lsrs	r2, r2, #1
 8005310:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005314:	3a01      	subs	r2, #1
 8005316:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800531a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800531c:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800531e:	4e2c      	ldr	r6, [pc, #176]	; (80053d0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005324:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005326:	68eb      	ldr	r3, [r5, #12]
 8005328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800532c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800532e:	f7fe fae7 	bl	8003900 <HAL_GetTick>
 8005332:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005334:	e005      	b.n	8005342 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005336:	f7fe fae3 	bl	8003900 <HAL_GetTick>
 800533a:	1b00      	subs	r0, r0, r4
 800533c:	2802      	cmp	r0, #2
 800533e:	f63f af6e 	bhi.w	800521e <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005342:	6833      	ldr	r3, [r6, #0]
 8005344:	019a      	lsls	r2, r3, #6
 8005346:	d5f6      	bpl.n	8005336 <HAL_RCC_OscConfig+0x3f6>
 8005348:	e6fe      	b.n	8005148 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534a:	4b21      	ldr	r3, [pc, #132]	; (80053d0 <HAL_RCC_OscConfig+0x490>)
 800534c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005350:	f042 0204 	orr.w	r2, r2, #4
 8005354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005358:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800535c:	f042 0201 	orr.w	r2, r2, #1
 8005360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005364:	e76f      	b.n	8005246 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005366:	2801      	cmp	r0, #1
 8005368:	f43f aeef 	beq.w	800514a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800536c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	6a22      	ldr	r2, [r4, #32]
 8005370:	f003 0103 	and.w	r1, r3, #3
 8005374:	4291      	cmp	r1, r2
 8005376:	f47f af0d 	bne.w	8005194 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800537a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800537c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005380:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005382:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005386:	f47f af05 	bne.w	8005194 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800538a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800538c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005390:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005394:	f47f aefe 	bne.w	8005194 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005398:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800539a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800539e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80053a2:	f47f aef7 	bne.w	8005194 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80053a8:	0852      	lsrs	r2, r2, #1
 80053aa:	3a01      	subs	r2, #1
 80053ac:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80053b0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80053b4:	f47f aeee 	bne.w	8005194 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80053b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80053ba:	0852      	lsrs	r2, r2, #1
 80053bc:	3a01      	subs	r2, #1
 80053be:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053c2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 80053c6:	bf14      	ite	ne
 80053c8:	2001      	movne	r0, #1
 80053ca:	2000      	moveq	r0, #0
 80053cc:	e6bd      	b.n	800514a <HAL_RCC_OscConfig+0x20a>
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	019f800c 	.word	0x019f800c

080053d8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80053d8:	4b18      	ldr	r3, [pc, #96]	; (800543c <HAL_RCC_GetSysClockFreq+0x64>)
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	f002 020c 	and.w	r2, r2, #12
 80053e0:	2a04      	cmp	r2, #4
 80053e2:	d027      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	f002 020c 	and.w	r2, r2, #12
 80053ea:	2a08      	cmp	r2, #8
 80053ec:	d024      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	f002 020c 	and.w	r2, r2, #12
 80053f4:	2a0c      	cmp	r2, #12
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80053f8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80053fa:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053fc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053fe:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005400:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005402:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005406:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 800540a:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800540c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005410:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005414:	bf0c      	ite	eq
 8005416:	480a      	ldreq	r0, [pc, #40]	; (8005440 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005418:	480a      	ldrne	r0, [pc, #40]	; (8005444 <HAL_RCC_GetSysClockFreq+0x6c>)
 800541a:	fbb0 f0f2 	udiv	r0, r0, r2
 800541e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_RCC_GetSysClockFreq+0x64>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800542a:	3301      	adds	r3, #1
 800542c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800542e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005432:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005434:	4803      	ldr	r0, [pc, #12]	; (8005444 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005436:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <HAL_RCC_GetSysClockFreq+0x68>)
 800543a:	4770      	bx	lr
 800543c:	40021000 	.word	0x40021000
 8005440:	007a1200 	.word	0x007a1200
 8005444:	00f42400 	.word	0x00f42400

08005448 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005448:	2800      	cmp	r0, #0
 800544a:	f000 80ef 	beq.w	800562c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800544e:	4a7f      	ldr	r2, [pc, #508]	; (800564c <HAL_RCC_ClockConfig+0x204>)
{
 8005450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005454:	6813      	ldr	r3, [r2, #0]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	428b      	cmp	r3, r1
 800545c:	460d      	mov	r5, r1
 800545e:	4604      	mov	r4, r0
 8005460:	d20c      	bcs.n	800547c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	f023 030f 	bic.w	r3, r3, #15
 8005468:	430b      	orrs	r3, r1
 800546a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800546c:	6813      	ldr	r3, [r2, #0]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	428b      	cmp	r3, r1
 8005474:	d002      	beq.n	800547c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005476:	2001      	movs	r0, #1
}
 8005478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	07de      	lsls	r6, r3, #31
 8005480:	d563      	bpl.n	800554a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	2a03      	cmp	r2, #3
 8005486:	f000 809a 	beq.w	80055be <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548a:	4b71      	ldr	r3, [pc, #452]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800548c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005490:	f000 8091 	beq.w	80055b6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005494:	055b      	lsls	r3, r3, #21
 8005496:	d5ee      	bpl.n	8005476 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005498:	f7ff ff9e 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800549c:	4b6d      	ldr	r3, [pc, #436]	; (8005654 <HAL_RCC_ClockConfig+0x20c>)
 800549e:	4298      	cmp	r0, r3
 80054a0:	f200 80c6 	bhi.w	8005630 <HAL_RCC_ClockConfig+0x1e8>
 80054a4:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054a6:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054aa:	4e69      	ldr	r6, [pc, #420]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 80054ac:	68b3      	ldr	r3, [r6, #8]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	431a      	orrs	r2, r3
 80054b4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80054b6:	f7fe fa23 	bl	8003900 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80054be:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c0:	e004      	b.n	80054cc <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c2:	f7fe fa1d 	bl	8003900 <HAL_GetTick>
 80054c6:	1bc0      	subs	r0, r0, r7
 80054c8:	4540      	cmp	r0, r8
 80054ca:	d871      	bhi.n	80055b0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054cc:	68b3      	ldr	r3, [r6, #8]
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80054d8:	d1f3      	bne.n	80054c2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	079f      	lsls	r7, r3, #30
 80054de:	d436      	bmi.n	800554e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80054e0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80054e4:	d103      	bne.n	80054ee <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80054e6:	68b3      	ldr	r3, [r6, #8]
 80054e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ec:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054ee:	4e57      	ldr	r6, [pc, #348]	; (800564c <HAL_RCC_ClockConfig+0x204>)
 80054f0:	6833      	ldr	r3, [r6, #0]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	42ab      	cmp	r3, r5
 80054f8:	d846      	bhi.n	8005588 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	075a      	lsls	r2, r3, #29
 80054fe:	d506      	bpl.n	800550e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005500:	4953      	ldr	r1, [pc, #332]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 8005502:	68e0      	ldr	r0, [r4, #12]
 8005504:	688a      	ldr	r2, [r1, #8]
 8005506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800550a:	4302      	orrs	r2, r0
 800550c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550e:	071b      	lsls	r3, r3, #28
 8005510:	d507      	bpl.n	8005522 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005512:	4a4f      	ldr	r2, [pc, #316]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 8005514:	6921      	ldr	r1, [r4, #16]
 8005516:	6893      	ldr	r3, [r2, #8]
 8005518:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800551c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005520:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005522:	f7ff ff59 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
 8005526:	4a4a      	ldr	r2, [pc, #296]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 8005528:	4c4b      	ldr	r4, [pc, #300]	; (8005658 <HAL_RCC_ClockConfig+0x210>)
 800552a:	6892      	ldr	r2, [r2, #8]
 800552c:	494b      	ldr	r1, [pc, #300]	; (800565c <HAL_RCC_ClockConfig+0x214>)
 800552e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005532:	4603      	mov	r3, r0
 8005534:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005536:	484a      	ldr	r0, [pc, #296]	; (8005660 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005538:	f002 021f 	and.w	r2, r2, #31
 800553c:	40d3      	lsrs	r3, r2
 800553e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005540:	6800      	ldr	r0, [r0, #0]
}
 8005542:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005546:	f7fe b999 	b.w	800387c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800554a:	0798      	lsls	r0, r3, #30
 800554c:	d5cf      	bpl.n	80054ee <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800554e:	0758      	lsls	r0, r3, #29
 8005550:	d504      	bpl.n	800555c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005552:	493f      	ldr	r1, [pc, #252]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 8005554:	688a      	ldr	r2, [r1, #8]
 8005556:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800555a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555c:	0719      	lsls	r1, r3, #28
 800555e:	d506      	bpl.n	800556e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005560:	4a3b      	ldr	r2, [pc, #236]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 8005562:	6893      	ldr	r3, [r2, #8]
 8005564:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005568:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800556c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800556e:	4a38      	ldr	r2, [pc, #224]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 8005570:	68a1      	ldr	r1, [r4, #8]
 8005572:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005574:	4e35      	ldr	r6, [pc, #212]	; (800564c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005576:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800557a:	430b      	orrs	r3, r1
 800557c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800557e:	6833      	ldr	r3, [r6, #0]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	42ab      	cmp	r3, r5
 8005586:	d9b8      	bls.n	80054fa <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	f023 030f 	bic.w	r3, r3, #15
 800558e:	432b      	orrs	r3, r5
 8005590:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005592:	f7fe f9b5 	bl	8003900 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005596:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800559a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559c:	6833      	ldr	r3, [r6, #0]
 800559e:	f003 030f 	and.w	r3, r3, #15
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	d0a9      	beq.n	80054fa <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a6:	f7fe f9ab 	bl	8003900 <HAL_GetTick>
 80055aa:	1bc0      	subs	r0, r0, r7
 80055ac:	4540      	cmp	r0, r8
 80055ae:	d9f5      	bls.n	800559c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80055b0:	2003      	movs	r0, #3
}
 80055b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b6:	039a      	lsls	r2, r3, #14
 80055b8:	f53f af6e 	bmi.w	8005498 <HAL_RCC_ClockConfig+0x50>
 80055bc:	e75b      	b.n	8005476 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055be:	4824      	ldr	r0, [pc, #144]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 80055c0:	6801      	ldr	r1, [r0, #0]
 80055c2:	0189      	lsls	r1, r1, #6
 80055c4:	f57f af57 	bpl.w	8005476 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055c8:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055ca:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055cc:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ce:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055d2:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80055d6:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055d8:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055dc:	bf0c      	ite	eq
 80055de:	4921      	ldreq	r1, [pc, #132]	; (8005664 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055e0:	4921      	ldrne	r1, [pc, #132]	; (8005668 <HAL_RCC_ClockConfig+0x220>)
 80055e2:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055e6:	4e1a      	ldr	r6, [pc, #104]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80055e8:	4f1a      	ldr	r7, [pc, #104]	; (8005654 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055ea:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80055ee:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055f2:	68f0      	ldr	r0, [r6, #12]
 80055f4:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80055f8:	3001      	adds	r0, #1
 80055fa:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80055fc:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005600:	42b9      	cmp	r1, r7
 8005602:	d920      	bls.n	8005646 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005604:	68b1      	ldr	r1, [r6, #8]
 8005606:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_ClockConfig+0x1d0>
 800560c:	f013 0902 	ands.w	r9, r3, #2
 8005610:	f43f af4b 	beq.w	80054aa <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005614:	68a3      	ldr	r3, [r4, #8]
 8005616:	b9b3      	cbnz	r3, 8005646 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005618:	490d      	ldr	r1, [pc, #52]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 800561a:	688b      	ldr	r3, [r1, #8]
 800561c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005624:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005626:	f04f 0980 	mov.w	r9, #128	; 0x80
 800562a:	e73e      	b.n	80054aa <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800562c:	2001      	movs	r0, #1
}
 800562e:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005630:	4a07      	ldr	r2, [pc, #28]	; (8005650 <HAL_RCC_ClockConfig+0x208>)
 8005632:	6893      	ldr	r3, [r2, #8]
 8005634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800563e:	6862      	ldr	r2, [r4, #4]
 8005640:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005644:	e731      	b.n	80054aa <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005646:	f04f 0900 	mov.w	r9, #0
 800564a:	e72e      	b.n	80054aa <HAL_RCC_ClockConfig+0x62>
 800564c:	40022000 	.word	0x40022000
 8005650:	40021000 	.word	0x40021000
 8005654:	04c4b400 	.word	0x04c4b400
 8005658:	080092a0 	.word	0x080092a0
 800565c:	20000718 	.word	0x20000718
 8005660:	20000720 	.word	0x20000720
 8005664:	007a1200 	.word	0x007a1200
 8005668:	00f42400 	.word	0x00f42400

0800566c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800566c:	4b01      	ldr	r3, [pc, #4]	; (8005674 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20000718 	.word	0x20000718

08005678 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005678:	4b05      	ldr	r3, [pc, #20]	; (8005690 <HAL_RCC_GetPCLK1Freq+0x18>)
 800567a:	4a06      	ldr	r2, [pc, #24]	; (8005694 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800567c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800567e:	4906      	ldr	r1, [pc, #24]	; (8005698 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005680:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005684:	6808      	ldr	r0, [r1, #0]
 8005686:	5cd3      	ldrb	r3, [r2, r3]
 8005688:	f003 031f 	and.w	r3, r3, #31
}
 800568c:	40d8      	lsrs	r0, r3
 800568e:	4770      	bx	lr
 8005690:	40021000 	.word	0x40021000
 8005694:	080092b0 	.word	0x080092b0
 8005698:	20000718 	.word	0x20000718

0800569c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800569e:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80056a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80056a2:	4906      	ldr	r1, [pc, #24]	; (80056bc <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056a4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80056a8:	6808      	ldr	r0, [r1, #0]
 80056aa:	5cd3      	ldrb	r3, [r2, r3]
 80056ac:	f003 031f 	and.w	r3, r3, #31
}
 80056b0:	40d8      	lsrs	r0, r3
 80056b2:	4770      	bx	lr
 80056b4:	40021000 	.word	0x40021000
 80056b8:	080092b0 	.word	0x080092b0
 80056bc:	20000718 	.word	0x20000718

080056c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056c4:	6803      	ldr	r3, [r0, #0]
{
 80056c6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056c8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80056cc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056ce:	d056      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d0:	4b9f      	ldr	r3, [pc, #636]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80056d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056d4:	00d5      	lsls	r5, r2, #3
 80056d6:	f140 810c 	bpl.w	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80056da:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056dc:	4d9d      	ldr	r5, [pc, #628]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056e6:	f7fe f90b 	bl	8003900 <HAL_GetTick>
 80056ea:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ec:	e005      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ee:	f7fe f907 	bl	8003900 <HAL_GetTick>
 80056f2:	1b83      	subs	r3, r0, r6
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	f200 8107 	bhi.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056fa:	682b      	ldr	r3, [r5, #0]
 80056fc:	05d8      	lsls	r0, r3, #23
 80056fe:	d5f6      	bpl.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005700:	4d93      	ldr	r5, [pc, #588]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005702:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005706:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800570a:	d027      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800570c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800570e:	429a      	cmp	r2, r3
 8005710:	d025      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005712:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005716:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800571a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005722:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005726:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800572a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800572e:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005730:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005734:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005738:	f140 8108 	bpl.w	800594c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fe f8e0 	bl	8003900 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005740:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005744:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005746:	e005      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005748:	f7fe f8da 	bl	8003900 <HAL_GetTick>
 800574c:	1b80      	subs	r0, r0, r6
 800574e:	4540      	cmp	r0, r8
 8005750:	f200 80da 	bhi.w	8005908 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005754:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005758:	079b      	lsls	r3, r3, #30
 800575a:	d5f5      	bpl.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800575c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800575e:	497c      	ldr	r1, [pc, #496]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005760:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005764:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800576e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005770:	b127      	cbz	r7, 800577c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005772:	4a77      	ldr	r2, [pc, #476]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005774:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577a:	6593      	str	r3, [r2, #88]	; 0x58
 800577c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800577e:	07de      	lsls	r6, r3, #31
 8005780:	d508      	bpl.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005782:	4973      	ldr	r1, [pc, #460]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005784:	6865      	ldr	r5, [r4, #4]
 8005786:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800578a:	f022 0203 	bic.w	r2, r2, #3
 800578e:	432a      	orrs	r2, r5
 8005790:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005794:	079d      	lsls	r5, r3, #30
 8005796:	d508      	bpl.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005798:	496d      	ldr	r1, [pc, #436]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800579a:	68a5      	ldr	r5, [r4, #8]
 800579c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057a0:	f022 020c 	bic.w	r2, r2, #12
 80057a4:	432a      	orrs	r2, r5
 80057a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057aa:	0759      	lsls	r1, r3, #29
 80057ac:	d508      	bpl.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ae:	4968      	ldr	r1, [pc, #416]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057b0:	68e5      	ldr	r5, [r4, #12]
 80057b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80057ba:	432a      	orrs	r2, r5
 80057bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057c0:	071a      	lsls	r2, r3, #28
 80057c2:	d508      	bpl.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057c4:	4962      	ldr	r1, [pc, #392]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057c6:	6925      	ldr	r5, [r4, #16]
 80057c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057cc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80057d0:	432a      	orrs	r2, r5
 80057d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80057d6:	069f      	lsls	r7, r3, #26
 80057d8:	d508      	bpl.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057da:	495d      	ldr	r1, [pc, #372]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057dc:	6965      	ldr	r5, [r4, #20]
 80057de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057e6:	432a      	orrs	r2, r5
 80057e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ec:	065e      	lsls	r6, r3, #25
 80057ee:	d508      	bpl.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057f0:	4957      	ldr	r1, [pc, #348]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80057f2:	69a5      	ldr	r5, [r4, #24]
 80057f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80057fc:	432a      	orrs	r2, r5
 80057fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005802:	061d      	lsls	r5, r3, #24
 8005804:	d508      	bpl.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005806:	4952      	ldr	r1, [pc, #328]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005808:	69e5      	ldr	r5, [r4, #28]
 800580a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800580e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005812:	432a      	orrs	r2, r5
 8005814:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005818:	05d9      	lsls	r1, r3, #23
 800581a:	d508      	bpl.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800581c:	494c      	ldr	r1, [pc, #304]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800581e:	6a25      	ldr	r5, [r4, #32]
 8005820:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005824:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005828:	432a      	orrs	r2, r5
 800582a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800582e:	059a      	lsls	r2, r3, #22
 8005830:	d508      	bpl.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005832:	4947      	ldr	r1, [pc, #284]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005834:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005836:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800583a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800583e:	432a      	orrs	r2, r5
 8005840:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005844:	055f      	lsls	r7, r3, #21
 8005846:	d50b      	bpl.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005848:	4941      	ldr	r1, [pc, #260]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800584a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800584c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005850:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005854:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005856:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800585a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800585e:	d055      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005860:	051e      	lsls	r6, r3, #20
 8005862:	d50b      	bpl.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005864:	493a      	ldr	r1, [pc, #232]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005866:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005868:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800586c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005870:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005872:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005876:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800587a:	d04c      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800587c:	04dd      	lsls	r5, r3, #19
 800587e:	d50b      	bpl.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005880:	4933      	ldr	r1, [pc, #204]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005882:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005884:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005888:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800588c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800588e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005892:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005896:	d043      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005898:	0499      	lsls	r1, r3, #18
 800589a:	d50b      	bpl.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800589c:	492c      	ldr	r1, [pc, #176]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800589e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80058a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058a4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80058a8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058aa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058b2:	d03a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058b4:	045a      	lsls	r2, r3, #17
 80058b6:	d50b      	bpl.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b8:	4925      	ldr	r1, [pc, #148]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058ba:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80058bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80058c0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80058c4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058c6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058ce:	d031      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	d50b      	bpl.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058d4:	4a1e      	ldr	r2, [pc, #120]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80058d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80058d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80058dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80058e0:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058ea:	d028      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80058ec:	b002      	add	sp, #8
 80058ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80058f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80058f8:	659a      	str	r2, [r3, #88]	; 0x58
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005904:	2701      	movs	r7, #1
 8005906:	e6e9      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8005908:	2003      	movs	r0, #3
 800590a:	e731      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800590c:	68ca      	ldr	r2, [r1, #12]
 800590e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005912:	60ca      	str	r2, [r1, #12]
 8005914:	e7a4      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005916:	68ca      	ldr	r2, [r1, #12]
 8005918:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800591c:	60ca      	str	r2, [r1, #12]
 800591e:	e7ad      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005920:	68ca      	ldr	r2, [r1, #12]
 8005922:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005926:	60ca      	str	r2, [r1, #12]
 8005928:	e7b6      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800592a:	68ca      	ldr	r2, [r1, #12]
 800592c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005930:	60ca      	str	r2, [r1, #12]
 8005932:	e7bf      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005934:	68ca      	ldr	r2, [r1, #12]
 8005936:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800593a:	60ca      	str	r2, [r1, #12]
 800593c:	e7c8      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800593e:	68d3      	ldr	r3, [r2, #12]
 8005940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005944:	60d3      	str	r3, [r2, #12]
}
 8005946:	b002      	add	sp, #8
 8005948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800594c:	4613      	mov	r3, r2
 800594e:	e706      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000

08005958 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005958:	6a03      	ldr	r3, [r0, #32]
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	6203      	str	r3, [r0, #32]
{
 8005960:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005966:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005968:	4f18      	ldr	r7, [pc, #96]	; (80059cc <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 800596a:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 800596c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800596e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8005972:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005976:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800597a:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 800597c:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8005980:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005984:	d00e      	beq.n	80059a4 <TIM_OC1_SetConfig+0x4c>
 8005986:	4c12      	ldr	r4, [pc, #72]	; (80059d0 <TIM_OC1_SetConfig+0x78>)
 8005988:	42a0      	cmp	r0, r4
 800598a:	d00b      	beq.n	80059a4 <TIM_OC1_SetConfig+0x4c>
 800598c:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005990:	42a0      	cmp	r0, r4
 8005992:	d007      	beq.n	80059a4 <TIM_OC1_SetConfig+0x4c>
 8005994:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005998:	42a0      	cmp	r0, r4
 800599a:	d003      	beq.n	80059a4 <TIM_OC1_SetConfig+0x4c>
 800599c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80059a0:	42a0      	cmp	r0, r4
 80059a2:	d10b      	bne.n	80059bc <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a4:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80059aa:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059ac:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059b0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80059b4:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80059ba:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059bc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80059be:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80059c0:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80059c2:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80059c4:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80059c6:	6203      	str	r3, [r0, #32]
}
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00
 80059d0:	40013400 	.word	0x40013400

080059d4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059d4:	6a03      	ldr	r3, [r0, #32]
 80059d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059da:	6203      	str	r3, [r0, #32]
{
 80059dc:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059e2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059e4:	4f19      	ldr	r7, [pc, #100]	; (8005a4c <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059e6:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80059e8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 80059ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059f6:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80059fc:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a00:	d00f      	beq.n	8005a22 <TIM_OC3_SetConfig+0x4e>
 8005a02:	4c13      	ldr	r4, [pc, #76]	; (8005a50 <TIM_OC3_SetConfig+0x7c>)
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	d00c      	beq.n	8005a22 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005a0c:	42a0      	cmp	r0, r4
 8005a0e:	d00f      	beq.n	8005a30 <TIM_OC3_SetConfig+0x5c>
 8005a10:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005a14:	42a0      	cmp	r0, r4
 8005a16:	d00b      	beq.n	8005a30 <TIM_OC3_SetConfig+0x5c>
 8005a18:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005a1c:	42a0      	cmp	r0, r4
 8005a1e:	d10e      	bne.n	8005a3e <TIM_OC3_SetConfig+0x6a>
 8005a20:	e006      	b.n	8005a30 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a22:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a28:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a30:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a34:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a38:	432c      	orrs	r4, r5
 8005a3a:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a3e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005a40:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005a42:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005a44:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8005a46:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005a48:	6203      	str	r3, [r0, #32]
}
 8005a4a:	4770      	bx	lr
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40013400 	.word	0x40013400

08005a54 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a54:	6a03      	ldr	r3, [r0, #32]
 8005a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5a:	6203      	str	r3, [r0, #32]
{
 8005a5c:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a62:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a64:	4f19      	ldr	r7, [pc, #100]	; (8005acc <TIM_OC4_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a66:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a68:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a6a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8005a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a76:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a78:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a80:	d00f      	beq.n	8005aa2 <TIM_OC4_SetConfig+0x4e>
 8005a82:	4c13      	ldr	r4, [pc, #76]	; (8005ad0 <TIM_OC4_SetConfig+0x7c>)
 8005a84:	42a0      	cmp	r0, r4
 8005a86:	d00c      	beq.n	8005aa2 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a88:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005a8c:	42a0      	cmp	r0, r4
 8005a8e:	d00f      	beq.n	8005ab0 <TIM_OC4_SetConfig+0x5c>
 8005a90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	d00b      	beq.n	8005ab0 <TIM_OC4_SetConfig+0x5c>
 8005a98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005a9c:	42a0      	cmp	r0, r4
 8005a9e:	d10e      	bne.n	8005abe <TIM_OC4_SetConfig+0x6a>
 8005aa0:	e006      	b.n	8005ab0 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005aa2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005aa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005aa8:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005aac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ab0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ab4:	f426 4640 	bic.w	r6, r6, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ab8:	432c      	orrs	r4, r5
 8005aba:	ea46 1684 	orr.w	r6, r6, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005abe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005ac0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005ac2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005ac4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8005ac6:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005ac8:	6203      	str	r3, [r0, #32]
}
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40013400 	.word	0x40013400

08005ad4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d07d      	beq.n	8005bd4 <HAL_TIM_Base_Init+0x100>
{
 8005ad8:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ada:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ade:	4604      	mov	r4, r0
 8005ae0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d06d      	beq.n	8005bc4 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae8:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aea:	4a3b      	ldr	r2, [pc, #236]	; (8005bd8 <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005aec:	2302      	movs	r3, #2
 8005aee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af2:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8005af4:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af6:	d051      	beq.n	8005b9c <HAL_TIM_Base_Init+0xc8>
 8005af8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8005afc:	d021      	beq.n	8005b42 <HAL_TIM_Base_Init+0x6e>
 8005afe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005b02:	4291      	cmp	r1, r2
 8005b04:	d01d      	beq.n	8005b42 <HAL_TIM_Base_Init+0x6e>
 8005b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b0a:	4291      	cmp	r1, r2
 8005b0c:	d019      	beq.n	8005b42 <HAL_TIM_Base_Init+0x6e>
 8005b0e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005b12:	4291      	cmp	r1, r2
 8005b14:	d042      	beq.n	8005b9c <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b16:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	d057      	beq.n	8005bce <HAL_TIM_Base_Init+0xfa>
 8005b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b22:	4291      	cmp	r1, r2
 8005b24:	d053      	beq.n	8005bce <HAL_TIM_Base_Init+0xfa>
 8005b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b2a:	4291      	cmp	r1, r2
 8005b2c:	d04f      	beq.n	8005bce <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b2e:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005b32:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b38:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005b3a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b3c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b3e:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	e010      	b.n	8005b64 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005b42:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b44:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b46:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b4c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b52:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b54:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b5a:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8005b5c:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005b5e:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b60:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b62:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005b64:	2301      	movs	r3, #1
 8005b66:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b68:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005b70:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005b74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005b78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005b88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b8c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005b90:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005b98:	2000      	movs	r0, #0
}
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005b9c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b9e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ba0:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ba6:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bac:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005bb4:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bb6:	68e3      	ldr	r3, [r4, #12]
 8005bb8:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005bbe:	6963      	ldr	r3, [r4, #20]
 8005bc0:	630b      	str	r3, [r1, #48]	; 0x30
 8005bc2:	e7cf      	b.n	8005b64 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8005bc4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005bc8:	f7fc feda 	bl	8002980 <HAL_TIM_Base_MspInit>
 8005bcc:	e78c      	b.n	8005ae8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bce:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd0:	69a2      	ldr	r2, [r4, #24]
 8005bd2:	e7e9      	b.n	8005ba8 <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 8005bd4:	2001      	movs	r0, #1
}
 8005bd6:	4770      	bx	lr
 8005bd8:	40012c00 	.word	0x40012c00

08005bdc <HAL_TIM_PWM_MspInit>:
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop

08005be0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d07d      	beq.n	8005ce0 <HAL_TIM_PWM_Init+0x100>
{
 8005be4:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005be6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005bea:	4604      	mov	r4, r0
 8005bec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d06d      	beq.n	8005cd0 <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf4:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf6:	4a3b      	ldr	r2, [pc, #236]	; (8005ce4 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bfe:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8005c00:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c02:	d051      	beq.n	8005ca8 <HAL_TIM_PWM_Init+0xc8>
 8005c04:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8005c08:	d021      	beq.n	8005c4e <HAL_TIM_PWM_Init+0x6e>
 8005c0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c0e:	4291      	cmp	r1, r2
 8005c10:	d01d      	beq.n	8005c4e <HAL_TIM_PWM_Init+0x6e>
 8005c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c16:	4291      	cmp	r1, r2
 8005c18:	d019      	beq.n	8005c4e <HAL_TIM_PWM_Init+0x6e>
 8005c1a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005c1e:	4291      	cmp	r1, r2
 8005c20:	d042      	beq.n	8005ca8 <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005c26:	4291      	cmp	r1, r2
 8005c28:	d057      	beq.n	8005cda <HAL_TIM_PWM_Init+0xfa>
 8005c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c2e:	4291      	cmp	r1, r2
 8005c30:	d053      	beq.n	8005cda <HAL_TIM_PWM_Init+0xfa>
 8005c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c36:	4291      	cmp	r1, r2
 8005c38:	d04f      	beq.n	8005cda <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c3a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c3c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8005c3e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c44:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005c46:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c48:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c4a:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c4c:	e010      	b.n	8005c70 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8005c4e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c50:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c52:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c58:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c5e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c60:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c66:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8005c68:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005c6a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c6c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c6e:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005c70:	2301      	movs	r3, #1
 8005c72:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c74:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005c7c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005c80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005c84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c98:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005c9c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005ca0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ca4:	2000      	movs	r0, #0
}
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005caa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005cb2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbe:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005cc0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc2:	68e3      	ldr	r3, [r4, #12]
 8005cc4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cc6:	6863      	ldr	r3, [r4, #4]
 8005cc8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005cca:	6963      	ldr	r3, [r4, #20]
 8005ccc:	630b      	str	r3, [r1, #48]	; 0x30
 8005cce:	e7cf      	b.n	8005c70 <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8005cd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005cd4:	f7ff ff82 	bl	8005bdc <HAL_TIM_PWM_MspInit>
 8005cd8:	e78c      	b.n	8005bf4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cda:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cdc:	69a2      	ldr	r2, [r4, #24]
 8005cde:	e7e9      	b.n	8005cb4 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8005ce0:	2001      	movs	r0, #1
}
 8005ce2:	4770      	bx	lr
 8005ce4:	40012c00 	.word	0x40012c00

08005ce8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005ce8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d04d      	beq.n	8005d8c <HAL_TIM_SlaveConfigSynchro+0xa4>
 8005cf0:	4602      	mov	r2, r0
{
 8005cf2:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 8005cf6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8005cfa:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfe:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005d02:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d04:	e9d1 5400 	ldrd	r5, r4, [r1]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005d10:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d16:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005d1a:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005d1c:	2c60      	cmp	r4, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005d1e:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005d20:	d051      	beq.n	8005dc6 <HAL_TIM_SlaveConfigSynchro+0xde>
 8005d22:	d825      	bhi.n	8005d70 <HAL_TIM_SlaveConfigSynchro+0x88>
 8005d24:	2c40      	cmp	r4, #64	; 0x40
 8005d26:	d033      	beq.n	8005d90 <HAL_TIM_SlaveConfigSynchro+0xa8>
 8005d28:	2c50      	cmp	r4, #80	; 0x50
 8005d2a:	d110      	bne.n	8005d4e <HAL_TIM_SlaveConfigSynchro+0x66>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d2c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d2e:	6a06      	ldr	r6, [r0, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d30:	688c      	ldr	r4, [r1, #8]
 8005d32:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d34:	f026 0601 	bic.w	r6, r6, #1
 8005d38:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3a:	6983      	ldr	r3, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d3c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8005d44:	4321      	orrs	r1, r4
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d46:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d4a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	6201      	str	r1, [r0, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005d4e:	68c3      	ldr	r3, [r0, #12]
 8005d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d54:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d56:	68c3      	ldr	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	2401      	movs	r4, #1
  __HAL_UNLOCK(htim);
 8005d5a:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d60:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005d62:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005d66:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8005d6a:	4608      	mov	r0, r1
}
 8005d6c:	bcf0      	pop	{r4, r5, r6, r7}
 8005d6e:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005d70:	2c70      	cmp	r4, #112	; 0x70
 8005d72:	d1ec      	bne.n	8005d4e <HAL_TIM_SlaveConfigSynchro+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d74:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8005d78:	690c      	ldr	r4, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8005d7a:	6881      	ldr	r1, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d7c:	432b      	orrs	r3, r5
 8005d7e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d82:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d86:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d88:	6083      	str	r3, [r0, #8]
 8005d8a:	e7e0      	b.n	8005d4e <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005d8c:	2002      	movs	r0, #2
}
 8005d8e:	4770      	bx	lr
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005d90:	2d05      	cmp	r5, #5
 8005d92:	d010      	beq.n	8005db6 <HAL_TIM_SlaveConfigSynchro+0xce>
 8005d94:	f1b5 1f01 	cmp.w	r5, #65537	; 0x10001
 8005d98:	d00d      	beq.n	8005db6 <HAL_TIM_SlaveConfigSynchro+0xce>
      tmpccer = htim->Instance->CCER;
 8005d9a:	6a05      	ldr	r5, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005d9c:	6a04      	ldr	r4, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005d9e:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005da0:	f024 0401 	bic.w	r4, r4, #1
 8005da4:	6204      	str	r4, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005da6:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005dac:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005db0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8005db2:	6205      	str	r5, [r0, #32]
      break;
 8005db4:	e7cb      	b.n	8005d4e <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8005db6:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005db8:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005dba:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005dbe:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8005dc4:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc6:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dc8:	688d      	ldr	r5, [r1, #8]
 8005dca:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dcc:	f024 0410 	bic.w	r4, r4, #16
 8005dd0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dd2:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 8005dd4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dde:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8005de6:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8005de8:	6203      	str	r3, [r0, #32]
 8005dea:	e7b0      	b.n	8005d4e <HAL_TIM_SlaveConfigSynchro+0x66>

08005dec <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dec:	6a03      	ldr	r3, [r0, #32]
 8005dee:	f023 0310 	bic.w	r3, r3, #16
 8005df2:	6203      	str	r3, [r0, #32]
{
 8005df4:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8005df6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005df8:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005dfa:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dfc:	4f19      	ldr	r7, [pc, #100]	; (8005e64 <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dfe:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e02:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8005e06:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e0a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e0e:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e18:	d00f      	beq.n	8005e3a <TIM_OC2_SetConfig+0x4e>
 8005e1a:	4c13      	ldr	r4, [pc, #76]	; (8005e68 <TIM_OC2_SetConfig+0x7c>)
 8005e1c:	42a0      	cmp	r0, r4
 8005e1e:	d00c      	beq.n	8005e3a <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e20:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005e24:	42a0      	cmp	r0, r4
 8005e26:	d00f      	beq.n	8005e48 <TIM_OC2_SetConfig+0x5c>
 8005e28:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005e2c:	42a0      	cmp	r0, r4
 8005e2e:	d00b      	beq.n	8005e48 <TIM_OC2_SetConfig+0x5c>
 8005e30:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d10e      	bne.n	8005e56 <TIM_OC2_SetConfig+0x6a>
 8005e38:	e006      	b.n	8005e48 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e3a:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e40:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e48:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e4c:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e50:	432c      	orrs	r4, r5
 8005e52:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005e56:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e58:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e5a:	6182      	str	r2, [r0, #24]
}
 8005e5c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8005e5e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e60:	6203      	str	r3, [r0, #32]
}
 8005e62:	4770      	bx	lr
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	40013400 	.word	0x40013400

08005e6c <HAL_TIM_PWM_ConfigChannel>:
{
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005e6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	f000 80e4 	beq.w	8006040 <HAL_TIM_PWM_ConfigChannel+0x1d4>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005e82:	2a14      	cmp	r2, #20
 8005e84:	d844      	bhi.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8005e86:	e8df f002 	tbb	[pc, r2]
 8005e8a:	4347      	.short	0x4347
 8005e8c:	435b4343 	.word	0x435b4343
 8005e90:	43704343 	.word	0x43704343
 8005e94:	43844343 	.word	0x43844343
 8005e98:	43994343 	.word	0x43994343
 8005e9c:	4343      	.short	0x4343
 8005e9e:	0b          	.byte	0x0b
 8005e9f:	00          	.byte	0x00
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ea0:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ea2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ea6:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	4e6c      	ldr	r6, [pc, #432]	; (800605c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eac:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8005eb0:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8005eb2:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005eb4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005eb8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ebc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ec0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ec6:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ece:	d008      	beq.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x76>
 8005ed0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005ed4:	42b3      	cmp	r3, r6
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x76>
 8005ed8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005edc:	42b3      	cmp	r3, r6
 8005ede:	f040 80b1 	bne.w	8006044 <HAL_TIM_PWM_ConfigChannel+0x1d8>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ee2:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ee4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ee8:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8005eec:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8005eee:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005ef2:	64de      	str	r6, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8005ef4:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ef6:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ef8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005efa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005efe:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f02:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005f06:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f0a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005f0e:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005f10:	2000      	movs	r0, #0
 8005f12:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f18:	6800      	ldr	r0, [r0, #0]
 8005f1a:	f7ff fd1d 	bl	8005958 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f1e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f20:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f22:	6999      	ldr	r1, [r3, #24]
 8005f24:	f041 0108 	orr.w	r1, r1, #8
 8005f28:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f2a:	6999      	ldr	r1, [r3, #24]
 8005f2c:	f021 0104 	bic.w	r1, r1, #4
 8005f30:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8005f36:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f38:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005f3a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005f3e:	e7ea      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f40:	6800      	ldr	r0, [r0, #0]
 8005f42:	f7ff ff53 	bl	8005dec <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f46:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f48:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f4a:	6999      	ldr	r1, [r3, #24]
 8005f4c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005f50:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f52:	6999      	ldr	r1, [r3, #24]
 8005f54:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005f58:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8005f60:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f62:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005f64:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005f68:	e7d5      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f6a:	6800      	ldr	r0, [r0, #0]
 8005f6c:	f7ff fd32 	bl	80059d4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f70:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f72:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f74:	69d9      	ldr	r1, [r3, #28]
 8005f76:	f041 0108 	orr.w	r1, r1, #8
 8005f7a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7c:	69d9      	ldr	r1, [r3, #28]
 8005f7e:	f021 0104 	bic.w	r1, r1, #4
 8005f82:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f84:	69da      	ldr	r2, [r3, #28]
 8005f86:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8005f88:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005f8c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005f90:	e7c1      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f92:	6800      	ldr	r0, [r0, #0]
 8005f94:	f7ff fd5e 	bl	8005a54 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f98:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f9a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f9c:	69d9      	ldr	r1, [r3, #28]
 8005f9e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005fa2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fa4:	69d9      	ldr	r1, [r3, #28]
 8005fa6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005faa:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8005fb2:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fb4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005fb6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005fba:	e7ac      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fbc:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fbe:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fc2:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005fc4:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc6:	4e25      	ldr	r6, [pc, #148]	; (800605c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fc8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 8005fcc:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8005fce:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005fd0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8005fd8:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe0:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fe2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8005fe6:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	d00f      	beq.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8005fec:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005ff0:	42b3      	cmp	r3, r6
 8005ff2:	d00b      	beq.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8005ff4:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	d007      	beq.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8005ffc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006000:	42b3      	cmp	r3, r6
 8006002:	d003      	beq.n	800600c <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8006004:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006008:	42b3      	cmp	r3, r6
 800600a:	d104      	bne.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x1aa>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800600c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800600e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006012:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8006016:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8006018:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800601a:	651a      	str	r2, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 800601c:	649e      	str	r6, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800601e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006020:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006022:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006024:	f041 0108 	orr.w	r1, r1, #8
 8006028:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800602a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800602c:	f021 0104 	bic.w	r1, r1, #4
 8006030:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006034:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8006036:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006038:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 800603a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800603e:	e76a      	b.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0xaa>
  __HAL_LOCK(htim);
 8006040:	2002      	movs	r0, #2
}
 8006042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006044:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006048:	42b3      	cmp	r3, r6
 800604a:	f43f af4a 	beq.w	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x76>
 800604e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006052:	42b3      	cmp	r3, r6
 8006054:	f47f af4a 	bne.w	8005eec <HAL_TIM_PWM_ConfigChannel+0x80>
 8006058:	e743      	b.n	8005ee2 <HAL_TIM_PWM_ConfigChannel+0x76>
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00

08006060 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006060:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d03c      	beq.n	80060e2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8006068:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800606a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800606c:	4c1e      	ldr	r4, [pc, #120]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 800606e:	2302      	movs	r3, #2
 8006070:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006074:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8006076:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006078:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800607a:	d026      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800607c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006080:	42a2      	cmp	r2, r4
 8006082:	d022      	beq.n	80060ca <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006084:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006086:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800608e:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006090:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006094:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006096:	d00a      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8006098:	4b14      	ldr	r3, [pc, #80]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800609a:	429a      	cmp	r2, r3
 800609c:	d007      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800609e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d003      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80060a6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d104      	bne.n	80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ae:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060b0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060b4:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060b6:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80060b8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80060ba:	2201      	movs	r2, #1
 80060bc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80060c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80060c4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80060c6:	4618      	mov	r0, r3
}
 80060c8:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ca:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d2:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060dc:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80060de:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e0:	e7e5      	b.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 80060e2:	2002      	movs	r0, #2
}
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40000400 	.word	0x40000400

080060f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d044      	beq.n	8006182 <HAL_TIMEx_ConfigBreakDeadTime+0x92>
{
 80060f8:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060fa:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80060fe:	4602      	mov	r2, r0
 8006100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006104:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006108:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800610a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800610e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006114:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006118:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800611a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006120:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006124:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006126:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006128:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800612a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800612e:	4303      	orrs	r3, r0

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006130:	4c15      	ldr	r4, [pc, #84]	; (8006188 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8006132:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006134:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006138:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800613a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800613e:	d00a      	beq.n	8006156 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8006140:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006144:	42a0      	cmp	r0, r4
 8006146:	d006      	beq.n	8006156 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006148:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800614a:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800614c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8006150:	4608      	mov	r0, r1
}
 8006152:	bc30      	pop	{r4, r5}
 8006154:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006156:	69cd      	ldr	r5, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006158:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800615a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800615e:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006160:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006164:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006168:	e9d1 5408 	ldrd	r5, r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800616c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006170:	432b      	orrs	r3, r5
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006172:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006176:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006178:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800617a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800617e:	430b      	orrs	r3, r1
 8006180:	e7e2      	b.n	8006148 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006182:	2002      	movs	r0, #2
}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40012c00 	.word	0x40012c00

0800618c <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800618c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006190:	2b01      	cmp	r3, #1
 8006192:	d048      	beq.n	8006226 <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8006194:	6813      	ldr	r3, [r2, #0]
 8006196:	3b01      	subs	r3, #1
 8006198:	2b0f      	cmp	r3, #15
{
 800619a:	b4f0      	push	{r4, r5, r6, r7}
 800619c:	d826      	bhi.n	80061ec <HAL_TIMEx_ConfigBreakInput+0x60>
 800619e:	4e23      	ldr	r6, [pc, #140]	; (800622c <HAL_TIMEx_ConfigBreakInput+0xa0>)
 80061a0:	4c23      	ldr	r4, [pc, #140]	; (8006230 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 80061a2:	4f24      	ldr	r7, [pc, #144]	; (8006234 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 80061a4:	4d24      	ldr	r5, [pc, #144]	; (8006238 <HAL_TIMEx_ConfigBreakInput+0xac>)
 80061a6:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
 80061aa:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80061ae:	f857 7023 	ldr.w	r7, [r7, r3, lsl #2]
 80061b2:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 80061b6:	2901      	cmp	r1, #1
 80061b8:	d01e      	beq.n	80061f8 <HAL_TIMEx_ConfigBreakInput+0x6c>
 80061ba:	2902      	cmp	r1, #2
 80061bc:	d110      	bne.n	80061e0 <HAL_TIMEx_ConfigBreakInput+0x54>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 80061be:	6801      	ldr	r1, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80061c0:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF2;
 80061c2:	f8d1 c064 	ldr.w	ip, [r1, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80061c6:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80061c8:	40bb      	lsls	r3, r7
 80061ca:	ea83 030c 	eor.w	r3, r3, ip
 80061ce:	4033      	ands	r3, r6
 80061d0:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80061d4:	fa02 f505 	lsl.w	r5, r2, r5
 80061d8:	405d      	eors	r5, r3
 80061da:	402c      	ands	r4, r5
 80061dc:	4063      	eors	r3, r4

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 80061de:	664b      	str	r3, [r1, #100]	; 0x64
    }
    default:
      break;
  }

  __HAL_UNLOCK(htim);
 80061e0:	2300      	movs	r3, #0
 80061e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80061e6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80061e8:	4618      	mov	r0, r3
}
 80061ea:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80061ec:	2500      	movs	r5, #0
  switch (BreakInput)
 80061ee:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 80061f0:	462f      	mov	r7, r5
 80061f2:	462c      	mov	r4, r5
 80061f4:	462e      	mov	r6, r5
  switch (BreakInput)
 80061f6:	d1e0      	bne.n	80061ba <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 80061f8:	6801      	ldr	r1, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80061fa:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 80061fc:	f8d1 c060 	ldr.w	ip, [r1, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006200:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006202:	40bb      	lsls	r3, r7
 8006204:	ea83 030c 	eor.w	r3, r3, ip
 8006208:	4033      	ands	r3, r6
 800620a:	ea83 030c 	eor.w	r3, r3, ip
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800620e:	fa02 f505 	lsl.w	r5, r2, r5
 8006212:	405d      	eors	r5, r3
 8006214:	402c      	ands	r4, r5
 8006216:	4063      	eors	r3, r4
      htim->Instance->AF1 = tmporx;
 8006218:	660b      	str	r3, [r1, #96]	; 0x60
  __HAL_UNLOCK(htim);
 800621a:	2300      	movs	r3, #0
 800621c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006220:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8006222:	4618      	mov	r0, r3
}
 8006224:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006226:	2002      	movs	r0, #2
}
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	080092b8 	.word	0x080092b8
 8006230:	080092f8 	.word	0x080092f8
 8006234:	08009338 	.word	0x08009338
 8006238:	08009378 	.word	0x08009378

0800623c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800623c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800623e:	07da      	lsls	r2, r3, #31
{
 8006240:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006242:	d506      	bpl.n	8006252 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006244:	6801      	ldr	r1, [r0, #0]
 8006246:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006248:	684a      	ldr	r2, [r1, #4]
 800624a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800624e:	4322      	orrs	r2, r4
 8006250:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006252:	079c      	lsls	r4, r3, #30
 8006254:	d506      	bpl.n	8006264 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006256:	6801      	ldr	r1, [r0, #0]
 8006258:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800625a:	684a      	ldr	r2, [r1, #4]
 800625c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006260:	4322      	orrs	r2, r4
 8006262:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006264:	0759      	lsls	r1, r3, #29
 8006266:	d506      	bpl.n	8006276 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006268:	6801      	ldr	r1, [r0, #0]
 800626a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800626c:	684a      	ldr	r2, [r1, #4]
 800626e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006272:	4322      	orrs	r2, r4
 8006274:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006276:	071a      	lsls	r2, r3, #28
 8006278:	d506      	bpl.n	8006288 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800627a:	6801      	ldr	r1, [r0, #0]
 800627c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800627e:	684a      	ldr	r2, [r1, #4]
 8006280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006284:	4322      	orrs	r2, r4
 8006286:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006288:	06dc      	lsls	r4, r3, #27
 800628a:	d506      	bpl.n	800629a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800628c:	6801      	ldr	r1, [r0, #0]
 800628e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006290:	688a      	ldr	r2, [r1, #8]
 8006292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006296:	4322      	orrs	r2, r4
 8006298:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629a:	0699      	lsls	r1, r3, #26
 800629c:	d506      	bpl.n	80062ac <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800629e:	6801      	ldr	r1, [r0, #0]
 80062a0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80062a2:	688a      	ldr	r2, [r1, #8]
 80062a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062a8:	4322      	orrs	r2, r4
 80062aa:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062ac:	065a      	lsls	r2, r3, #25
 80062ae:	d509      	bpl.n	80062c4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062b0:	6801      	ldr	r1, [r0, #0]
 80062b2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80062b4:	684a      	ldr	r2, [r1, #4]
 80062b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80062ba:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062c2:	d00b      	beq.n	80062dc <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c4:	061b      	lsls	r3, r3, #24
 80062c6:	d506      	bpl.n	80062d6 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062c8:	6802      	ldr	r2, [r0, #0]
 80062ca:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80062cc:	6853      	ldr	r3, [r2, #4]
 80062ce:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80062d2:	430b      	orrs	r3, r1
 80062d4:	6053      	str	r3, [r2, #4]
  }
}
 80062d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062da:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062dc:	684a      	ldr	r2, [r1, #4]
 80062de:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80062e0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80062e4:	4322      	orrs	r2, r4
 80062e6:	604a      	str	r2, [r1, #4]
 80062e8:	e7ec      	b.n	80062c4 <UART_AdvFeatureConfig+0x88>
 80062ea:	bf00      	nop

080062ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ee:	2300      	movs	r3, #0
{
 80062f0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f6:	f7fd fb03 	bl	8003900 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8006300:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006302:	d40b      	bmi.n	800631c <UART_CheckIdleState+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	0752      	lsls	r2, r2, #29
 8006308:	d42f      	bmi.n	800636a <UART_CheckIdleState+0x7e>

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 800630a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800630c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800630e:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_READY;
 8006312:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006316:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

  return HAL_OK;
}
 800631a:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631c:	69da      	ldr	r2, [r3, #28]
 800631e:	0292      	lsls	r2, r2, #10
 8006320:	d4f0      	bmi.n	8006304 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006322:	f7fd faed 	bl	8003900 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006326:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006328:	1b40      	subs	r0, r0, r5
 800632a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800632e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006330:	d22c      	bcs.n	800638c <UART_CheckIdleState+0xa0>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006332:	0750      	lsls	r0, r2, #29
 8006334:	d5f2      	bpl.n	800631c <UART_CheckIdleState+0x30>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	0511      	lsls	r1, r2, #20
 800633a:	d5ef      	bpl.n	800631c <UART_CheckIdleState+0x30>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800633c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006340:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006348:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634a:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634c:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	f021 0101 	bic.w	r1, r1, #1
 8006352:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006354:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8006356:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->gState = HAL_UART_STATE_READY;
 800635a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 800635e:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8006360:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006364:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8006368:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	0258      	lsls	r0, r3, #9
 800636e:	d4cc      	bmi.n	800630a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006370:	f7fd fac6 	bl	8003900 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006374:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006376:	1b40      	subs	r0, r0, r5
 8006378:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800637c:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800637e:	d205      	bcs.n	800638c <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006380:	0751      	lsls	r1, r2, #29
 8006382:	d5f2      	bpl.n	800636a <UART_CheckIdleState+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	0512      	lsls	r2, r2, #20
 8006388:	d5ef      	bpl.n	800636a <UART_CheckIdleState+0x7e>
 800638a:	e7d7      	b.n	800633c <UART_CheckIdleState+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800638c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006390:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006392:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 8006394:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	f022 0201 	bic.w	r2, r2, #1
 800639a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800639c:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800639e:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80063a2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 80063a6:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80063a8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
}
 80063ac:	bd38      	pop	{r3, r4, r5, pc}
 80063ae:	bf00      	nop

080063b0 <HAL_UART_Init>:
  if (huart == NULL)
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f000 8181 	beq.w	80066b8 <HAL_UART_Init+0x308>
  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80063ba:	b570      	push	{r4, r5, r6, lr}
 80063bc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d058      	beq.n	8006474 <HAL_UART_Init+0xc4>
  __HAL_UART_DISABLE(huart);
 80063c2:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063c4:	49c2      	ldr	r1, [pc, #776]	; (80066d0 <HAL_UART_Init+0x320>)
  huart->gState = HAL_UART_STATE_BUSY;
 80063c6:	2224      	movs	r2, #36	; 0x24
 80063c8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063cc:	e9d4 6504 	ldrd	r6, r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80063d0:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80063d4:	f020 0001 	bic.w	r0, r0, #1
 80063d8:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063da:	4332      	orrs	r2, r6
 80063dc:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063de:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063e0:	432a      	orrs	r2, r5
  tmpreg |= (uint32_t)huart->FifoMode;
 80063e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063e4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e6:	4031      	ands	r1, r6
  tmpreg |= (uint32_t)huart->FifoMode;
 80063e8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063ea:	430a      	orrs	r2, r1
 80063ec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063f2:	4db8      	ldr	r5, [pc, #736]	; (80066d4 <HAL_UART_Init+0x324>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063f4:	69a6      	ldr	r6, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063fe:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006400:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006402:	d03c      	beq.n	800647e <HAL_UART_Init+0xce>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006404:	e9d4 2508 	ldrd	r2, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006408:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800640c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006410:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006412:	430a      	orrs	r2, r1
 8006414:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006418:	49af      	ldr	r1, [pc, #700]	; (80066d8 <HAL_UART_Init+0x328>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800641a:	f022 020f 	bic.w	r2, r2, #15
 800641e:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006420:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006422:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006424:	d012      	beq.n	800644c <HAL_UART_Init+0x9c>
 8006426:	4aad      	ldr	r2, [pc, #692]	; (80066dc <HAL_UART_Init+0x32c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d07b      	beq.n	8006524 <HAL_UART_Init+0x174>
 800642c:	4aac      	ldr	r2, [pc, #688]	; (80066e0 <HAL_UART_Init+0x330>)
 800642e:	4293      	cmp	r3, r2
 8006430:	f000 8130 	beq.w	8006694 <HAL_UART_Init+0x2e4>
 8006434:	4aab      	ldr	r2, [pc, #684]	; (80066e4 <HAL_UART_Init+0x334>)
 8006436:	4293      	cmp	r3, r2
 8006438:	f000 80cf 	beq.w	80065da <HAL_UART_Init+0x22a>
  huart->RxISR = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006442:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006446:	6723      	str	r3, [r4, #112]	; 0x70
}
 8006448:	2001      	movs	r0, #1
 800644a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800644c:	4ba6      	ldr	r3, [pc, #664]	; (80066e8 <HAL_UART_Init+0x338>)
 800644e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	3b01      	subs	r3, #1
 8006458:	2b02      	cmp	r3, #2
 800645a:	f240 80d7 	bls.w	800660c <HAL_UART_Init+0x25c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800645e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006462:	f000 8131 	beq.w	80066c8 <HAL_UART_Init+0x318>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006466:	f7ff f919 	bl	800569c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800646a:	2800      	cmp	r0, #0
 800646c:	f000 80d1 	beq.w	8006612 <HAL_UART_Init+0x262>
 8006470:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006472:	e081      	b.n	8006578 <HAL_UART_Init+0x1c8>
    huart->Lock = HAL_UNLOCKED;
 8006474:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8006478:	f7fc faf6 	bl	8002a68 <HAL_UART_MspInit>
 800647c:	e7a1      	b.n	80063c2 <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800647e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006482:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006486:	4331      	orrs	r1, r6
 8006488:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800648e:	4896      	ldr	r0, [pc, #600]	; (80066e8 <HAL_UART_Init+0x338>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006490:	f022 020f 	bic.w	r2, r2, #15
 8006494:	430a      	orrs	r2, r1
 8006496:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006498:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800649c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a4:	f000 8134 	beq.w	8006710 <HAL_UART_Init+0x360>
 80064a8:	d80c      	bhi.n	80064c4 <HAL_UART_Init+0x114>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 812b 	beq.w	8006706 <HAL_UART_Init+0x356>
 80064b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b4:	d1c2      	bne.n	800643c <HAL_UART_Init+0x8c>
        pclk = HAL_RCC_GetSysClockFreq();
 80064b6:	f7fe ff8f 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80064ba:	2800      	cmp	r0, #0
 80064bc:	f000 80a9 	beq.w	8006612 <HAL_UART_Init+0x262>
 80064c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064c2:	e004      	b.n	80064ce <HAL_UART_Init+0x11e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064c8:	d1b8      	bne.n	800643c <HAL_UART_Init+0x8c>
        pclk = (uint32_t) LSE_VALUE;
 80064ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ce:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064d0:	4b86      	ldr	r3, [pc, #536]	; (80066ec <HAL_UART_Init+0x33c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064d2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064d6:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80064da:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064de:	42b3      	cmp	r3, r6
 80064e0:	d3ac      	bcc.n	800643c <HAL_UART_Init+0x8c>
 80064e2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80064e6:	d8a9      	bhi.n	800643c <HAL_UART_Init+0x8c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064e8:	2600      	movs	r6, #0
 80064ea:	2300      	movs	r3, #0
 80064ec:	4631      	mov	r1, r6
 80064ee:	f7f9 fe93 	bl	8000218 <__aeabi_uldivmod>
 80064f2:	020b      	lsls	r3, r1, #8
 80064f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064f8:	0202      	lsls	r2, r0, #8
 80064fa:	0868      	lsrs	r0, r5, #1
 80064fc:	1810      	adds	r0, r2, r0
 80064fe:	f143 0100 	adc.w	r1, r3, #0
 8006502:	462a      	mov	r2, r5
 8006504:	4633      	mov	r3, r6
 8006506:	f7f9 fe87 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800650a:	4b79      	ldr	r3, [pc, #484]	; (80066f0 <HAL_UART_Init+0x340>)
 800650c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006510:	429a      	cmp	r2, r3
 8006512:	d893      	bhi.n	800643c <HAL_UART_Init+0x8c>
          huart->Instance->BRR = usartdiv;
 8006514:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8006516:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800651a:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 800651c:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
  huart->NbRxDataToProcess = 1;
 8006520:	66a3      	str	r3, [r4, #104]	; 0x68
 8006522:	e043      	b.n	80065ac <HAL_UART_Init+0x1fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006524:	4b70      	ldr	r3, [pc, #448]	; (80066e8 <HAL_UART_Init+0x338>)
 8006526:	4a73      	ldr	r2, [pc, #460]	; (80066f4 <HAL_UART_Init+0x344>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f003 030c 	and.w	r3, r3, #12
 8006530:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006532:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006536:	d079      	beq.n	800662c <HAL_UART_Init+0x27c>
    switch (clocksource)
 8006538:	2b08      	cmp	r3, #8
 800653a:	f63f af7f 	bhi.w	800643c <HAL_UART_Init+0x8c>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <HAL_UART_Init+0x194>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006607 	.word	0x08006607
 8006548:	08006467 	.word	0x08006467
 800654c:	080065d7 	.word	0x080065d7
 8006550:	0800643d 	.word	0x0800643d
 8006554:	080065fb 	.word	0x080065fb
 8006558:	0800643d 	.word	0x0800643d
 800655c:	0800643d 	.word	0x0800643d
 8006560:	0800643d 	.word	0x0800643d
 8006564:	08006575 	.word	0x08006575
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006568:	2b30      	cmp	r3, #48	; 0x30
 800656a:	f47f af67 	bne.w	800643c <HAL_UART_Init+0x8c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800656e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006572:	d074      	beq.n	800665e <HAL_UART_Init+0x2ae>
 8006574:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006578:	6862      	ldr	r2, [r4, #4]
 800657a:	4b5c      	ldr	r3, [pc, #368]	; (80066ec <HAL_UART_Init+0x33c>)
 800657c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8006580:	fbb0 f3f3 	udiv	r3, r0, r3
 8006584:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006588:	fbb3 f3f2 	udiv	r3, r3, r2
 800658c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658e:	f1a3 0110 	sub.w	r1, r3, #16
 8006592:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006596:	4291      	cmp	r1, r2
 8006598:	f63f af50 	bhi.w	800643c <HAL_UART_Init+0x8c>
        huart->Instance->BRR = usartdiv;
 800659c:	6820      	ldr	r0, [r4, #0]
 800659e:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 80065a0:	2200      	movs	r2, #0
  huart->NbRxDataToProcess = 1;
 80065a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  huart->RxISR = NULL;
 80065a6:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80065aa:	6722      	str	r2, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d138      	bne.n	8006624 <HAL_UART_Init+0x274>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065c2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80065ca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80065cc:	601a      	str	r2, [r3, #0]
}
 80065ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 80065d2:	f7ff be8b 	b.w	80062ec <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 80065d6:	4848      	ldr	r0, [pc, #288]	; (80066f8 <HAL_UART_Init+0x348>)
 80065d8:	e7ce      	b.n	8006578 <HAL_UART_Init+0x1c8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065da:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <HAL_UART_Init+0x338>)
 80065dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065e4:	2b80      	cmp	r3, #128	; 0x80
 80065e6:	f000 8095 	beq.w	8006714 <HAL_UART_Init+0x364>
 80065ea:	d861      	bhi.n	80066b0 <HAL_UART_Init+0x300>
 80065ec:	b143      	cbz	r3, 8006600 <HAL_UART_Init+0x250>
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	f47f af24 	bne.w	800643c <HAL_UART_Init+0x8c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80065f8:	d060      	beq.n	80066bc <HAL_UART_Init+0x30c>
        pclk = HAL_RCC_GetSysClockFreq();
 80065fa:	f7fe feed 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
        break;
 80065fe:	e734      	b.n	800646a <HAL_UART_Init+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006600:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006604:	d07c      	beq.n	8006700 <HAL_UART_Init+0x350>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006606:	f7ff f837 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
        break;
 800660a:	e72e      	b.n	800646a <HAL_UART_Init+0xba>
 800660c:	4a3b      	ldr	r2, [pc, #236]	; (80066fc <HAL_UART_Init+0x34c>)
 800660e:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8006610:	e78f      	b.n	8006532 <HAL_UART_Init+0x182>
  huart->RxISR = NULL;
 8006612:	2300      	movs	r3, #0
 8006614:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006618:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800661c:	6723      	str	r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800661e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0c6      	beq.n	80065b2 <HAL_UART_Init+0x202>
    UART_AdvFeatureConfig(huart);
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff fe09 	bl	800623c <UART_AdvFeatureConfig>
 800662a:	e7c2      	b.n	80065b2 <HAL_UART_Init+0x202>
    switch (clocksource)
 800662c:	2b08      	cmp	r3, #8
 800662e:	f63f af05 	bhi.w	800643c <HAL_UART_Init+0x8c>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <HAL_UART_Init+0x288>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006701 	.word	0x08006701
 800663c:	080066c9 	.word	0x080066c9
 8006640:	0800665d 	.word	0x0800665d
 8006644:	0800643d 	.word	0x0800643d
 8006648:	080066bd 	.word	0x080066bd
 800664c:	0800643d 	.word	0x0800643d
 8006650:	0800643d 	.word	0x0800643d
 8006654:	0800643d 	.word	0x0800643d
 8006658:	0800665f 	.word	0x0800665f
        pclk = (uint32_t) HSI_VALUE;
 800665c:	4826      	ldr	r0, [pc, #152]	; (80066f8 <HAL_UART_Init+0x348>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800665e:	6862      	ldr	r2, [r4, #4]
 8006660:	4922      	ldr	r1, [pc, #136]	; (80066ec <HAL_UART_Init+0x33c>)
 8006662:	0853      	lsrs	r3, r2, #1
 8006664:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8006668:	fbb0 f0f1 	udiv	r0, r0, r1
 800666c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006670:	fbb0 f0f2 	udiv	r0, r0, r2
 8006674:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006676:	f1a2 0110 	sub.w	r1, r2, #16
 800667a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800667e:	4299      	cmp	r1, r3
 8006680:	f63f aedc 	bhi.w	800643c <HAL_UART_Init+0x8c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006684:	f020 030f 	bic.w	r3, r0, #15
 8006688:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800668a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800668e:	6820      	ldr	r0, [r4, #0]
 8006690:	4313      	orrs	r3, r2
 8006692:	e784      	b.n	800659e <HAL_UART_Init+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006694:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <HAL_UART_Init+0x338>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d038      	beq.n	8006714 <HAL_UART_Init+0x364>
 80066a2:	f63f af61 	bhi.w	8006568 <HAL_UART_Init+0x1b8>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0aa      	beq.n	8006600 <HAL_UART_Init+0x250>
 80066aa:	2b10      	cmp	r3, #16
 80066ac:	d0a2      	beq.n	80065f4 <HAL_UART_Init+0x244>
 80066ae:	e6c5      	b.n	800643c <HAL_UART_Init+0x8c>
 80066b0:	2bc0      	cmp	r3, #192	; 0xc0
 80066b2:	f43f af5c 	beq.w	800656e <HAL_UART_Init+0x1be>
 80066b6:	e6c1      	b.n	800643c <HAL_UART_Init+0x8c>
}
 80066b8:	2001      	movs	r0, #1
 80066ba:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 80066bc:	f7fe fe8c 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d0a6      	beq.n	8006612 <HAL_UART_Init+0x262>
 80066c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80066c6:	e7ca      	b.n	800665e <HAL_UART_Init+0x2ae>
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c8:	f7fe ffe8 	bl	800569c <HAL_RCC_GetPCLK2Freq>
        break;
 80066cc:	e7f8      	b.n	80066c0 <HAL_UART_Init+0x310>
 80066ce:	bf00      	nop
 80066d0:	cfff69f3 	.word	0xcfff69f3
 80066d4:	40008000 	.word	0x40008000
 80066d8:	40013800 	.word	0x40013800
 80066dc:	40004400 	.word	0x40004400
 80066e0:	40004800 	.word	0x40004800
 80066e4:	40004c00 	.word	0x40004c00
 80066e8:	40021000 	.word	0x40021000
 80066ec:	080093cc 	.word	0x080093cc
 80066f0:	000ffcff 	.word	0x000ffcff
 80066f4:	080093bc 	.word	0x080093bc
 80066f8:	00f42400 	.word	0x00f42400
 80066fc:	080093b8 	.word	0x080093b8
        pclk = HAL_RCC_GetPCLK1Freq();
 8006700:	f7fe ffba 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
        break;
 8006704:	e7dc      	b.n	80066c0 <HAL_UART_Init+0x310>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006706:	f7fe ffb7 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800670a:	2800      	cmp	r0, #0
 800670c:	d081      	beq.n	8006612 <HAL_UART_Init+0x262>
 800670e:	e6d7      	b.n	80064c0 <HAL_UART_Init+0x110>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006710:	4803      	ldr	r0, [pc, #12]	; (8006720 <HAL_UART_Init+0x370>)
 8006712:	e6dc      	b.n	80064ce <HAL_UART_Init+0x11e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006714:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <HAL_UART_Init+0x370>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671a:	f47f af2d 	bne.w	8006578 <HAL_UART_Init+0x1c8>
 800671e:	e79e      	b.n	800665e <HAL_UART_Init+0x2ae>
 8006720:	00f42400 	.word	0x00f42400

08006724 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006724:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8006728:	2a01      	cmp	r2, #1
 800672a:	d017      	beq.n	800675c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800672c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800672e:	2124      	movs	r1, #36	; 0x24
{
 8006730:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8006732:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 8006736:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006738:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800673a:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800673c:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800673e:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006742:	f024 0401 	bic.w	r4, r4, #1
 8006746:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8006748:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800674a:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800674c:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800674e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c

  return HAL_OK;
 8006752:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006754:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
}
 8006758:	bc30      	pop	{r4, r5}
 800675a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800675c:	2002      	movs	r0, #2
}
 800675e:	4770      	bx	lr

08006760 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006760:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8006764:	2a01      	cmp	r2, #1
 8006766:	d046      	beq.n	80067f6 <HAL_UARTEx_SetTxFifoThreshold+0x96>
{
 8006768:	b4f0      	push	{r4, r5, r6, r7}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800676a:	6802      	ldr	r2, [r0, #0]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800676c:	4f23      	ldr	r7, [pc, #140]	; (80067fc <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
 800676e:	460c      	mov	r4, r1
  huart->gState = HAL_UART_STATE_BUSY;
 8006770:	2124      	movs	r1, #36	; 0x24
 8006772:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006776:	6816      	ldr	r6, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006778:	6811      	ldr	r1, [r2, #0]
 800677a:	f021 0101 	bic.w	r1, r1, #1
 800677e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006780:	4603      	mov	r3, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006782:	481f      	ldr	r0, [pc, #124]	; (8006800 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006784:	6895      	ldr	r5, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006786:	c803      	ldmia	r0, {r0, r1}
{
 8006788:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800678a:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 800678e:	432c      	orrs	r4, r5
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006790:	466d      	mov	r5, sp
 8006792:	e885 0003 	stmia.w	r5, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006796:	e897 0003 	ldmia.w	r7, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800679a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800679c:	6094      	str	r4, [r2, #8]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800679e:	ac04      	add	r4, sp, #16
 80067a0:	e904 0003 	stmdb	r4, {r0, r1}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067a4:	b325      	cbz	r5, 80067f0 <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80067a6:	6894      	ldr	r4, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80067a8:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067aa:	a904      	add	r1, sp, #16
 80067ac:	f3c4 6442 	ubfx	r4, r4, #25, #3
 80067b0:	440c      	add	r4, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067b2:	eb01 7555 	add.w	r5, r1, r5, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067b6:	f814 1c10 	ldrb.w	r1, [r4, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ba:	f815 0c10 	ldrb.w	r0, [r5, #-16]
                               (uint16_t)denominator[rx_fifo_threshold];
 80067be:	f814 7c08 	ldrb.w	r7, [r4, #-8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80067c2:	f815 4c08 	ldrb.w	r4, [r5, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067c6:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067c8:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067ca:	fbb1 f1f7 	udiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067ce:	fbb0 f0f4 	udiv	r0, r0, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067d2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80067d6:	2100      	movs	r1, #0
 80067d8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80067dc:	2420      	movs	r4, #32
  return HAL_OK;
 80067de:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067e0:	6016      	str	r6, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80067e2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80067e6:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 80067ea:	b004      	add	sp, #16
 80067ec:	bcf0      	pop	{r4, r5, r6, r7}
 80067ee:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80067f0:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80067f2:	4608      	mov	r0, r1
 80067f4:	e7ed      	b.n	80067d2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 80067f6:	2002      	movs	r0, #2
}
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	080093e4 	.word	0x080093e4
 8006800:	08009148 	.word	0x08009148

08006804 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006804:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8006808:	2a01      	cmp	r2, #1
 800680a:	d046      	beq.n	800689a <HAL_UARTEx_SetRxFifoThreshold+0x96>
{
 800680c:	b4f0      	push	{r4, r5, r6, r7}
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800680e:	6802      	ldr	r2, [r0, #0]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006810:	4f23      	ldr	r7, [pc, #140]	; (80068a0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
 8006812:	460c      	mov	r4, r1
  huart->gState = HAL_UART_STATE_BUSY;
 8006814:	2124      	movs	r1, #36	; 0x24
 8006816:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800681a:	6816      	ldr	r6, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800681c:	6811      	ldr	r1, [r2, #0]
 800681e:	f021 0101 	bic.w	r1, r1, #1
 8006822:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006824:	4603      	mov	r3, r0
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006826:	481f      	ldr	r0, [pc, #124]	; (80068a4 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006828:	6895      	ldr	r5, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800682a:	c803      	ldmia	r0, {r0, r1}
{
 800682c:	b084      	sub	sp, #16
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800682e:	f025 6560 	bic.w	r5, r5, #234881024	; 0xe000000
 8006832:	432c      	orrs	r4, r5
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006834:	466d      	mov	r5, sp
 8006836:	e885 0003 	stmia.w	r5, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800683a:	e897 0003 	ldmia.w	r7, {r0, r1}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800683e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006840:	6094      	str	r4, [r2, #8]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006842:	ac04      	add	r4, sp, #16
 8006844:	e904 0003 	stmdb	r4, {r0, r1}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006848:	b325      	cbz	r5, 8006894 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800684a:	6894      	ldr	r4, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800684c:	6895      	ldr	r5, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800684e:	a904      	add	r1, sp, #16
 8006850:	f3c4 6442 	ubfx	r4, r4, #25, #3
 8006854:	440c      	add	r4, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006856:	eb01 7555 	add.w	r5, r1, r5, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800685a:	f814 1c10 	ldrb.w	r1, [r4, #-16]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800685e:	f815 0c10 	ldrb.w	r0, [r5, #-16]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006862:	f814 7c08 	ldrb.w	r7, [r4, #-8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006866:	f815 4c08 	ldrb.w	r4, [r5, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800686c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686e:	fbb1 f1f7 	udiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006872:	fbb0 f0f4 	udiv	r0, r0, r4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006876:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800687a:	2100      	movs	r1, #0
 800687c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8006880:	2420      	movs	r4, #32
  return HAL_OK;
 8006882:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006884:	6016      	str	r6, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006886:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800688a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800688e:	b004      	add	sp, #16
 8006890:	bcf0      	pop	{r4, r5, r6, r7}
 8006892:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8006894:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006896:	4608      	mov	r0, r1
 8006898:	e7ed      	b.n	8006876 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 800689a:	2002      	movs	r0, #2
}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	080093e4 	.word	0x080093e4
 80068a4:	08009148 	.word	0x08009148

080068a8 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80068a8:	88c0      	ldrh	r0, [r0, #6]
 80068aa:	4770      	bx	lr

080068ac <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80068ac:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80068ae:	8840      	ldrh	r0, [r0, #2]
 80068b0:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80068b4:	0c00      	lsrs	r0, r0, #16
 80068b6:	4770      	bx	lr

080068b8 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80068b8:	b410      	push	{r4}
 80068ba:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80068bc:	8802      	ldrh	r2, [r0, #0]
 80068be:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 80068c0:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80068c4:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80068c8:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80068cc:	42a2      	cmp	r2, r4
{
 80068ce:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80068d0:	d219      	bcs.n	8006906 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80068d2:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80068d6:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80068da:	b2e4      	uxtb	r4, r4
 80068dc:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80068e0:	8882      	ldrh	r2, [r0, #4]
 80068e2:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80068e6:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80068ec:	bfbc      	itt	lt
 80068ee:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80068f2:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	bfbc      	itt	lt
 80068f8:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80068fc:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80068fe:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8006902:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8006906:	b289      	uxth	r1, r1
 8006908:	2000      	movs	r0, #0
 800690a:	b29b      	uxth	r3, r3
 800690c:	f361 000f 	bfi	r0, r1, #0, #16
 8006910:	f363 401f 	bfi	r0, r3, #16, #16
}
 8006914:	b005      	add	sp, #20
 8006916:	f85d 4b04 	ldr.w	r4, [sp], #4
 800691a:	4770      	bx	lr

0800691c <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8006920:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8006922:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8006926:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800692a:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800692e:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 8006932:	4770      	bx	lr

08006934 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006934:	b120      	cbz	r0, 8006940 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8006936:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800693a:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800693c:	9b00      	ldr	r3, [sp, #0]
 800693e:	60c3      	str	r3, [r0, #12]
  }
}
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop

08006944 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006944:	b190      	cbz	r0, 800696c <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8006946:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8006948:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800694a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800694c:	b151      	cbz	r1, 8006964 <FCP_CalcCRC+0x20>
 800694e:	1c82      	adds	r2, r0, #2
 8006950:	3901      	subs	r1, #1
 8006952:	fa52 f181 	uxtab	r1, r2, r1
 8006956:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8006958:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800695c:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800695e:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8006960:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8006962:	d1f9      	bne.n	8006958 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8006964:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8006968:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8006970:	b510      	push	{r4, lr}
 8006972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006976:	4604      	mov	r4, r0
 8006978:	2100      	movs	r1, #0
 800697a:	f002 fbd1 	bl	8009120 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800697e:	2300      	movs	r3, #0
 8006980:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop

08006988 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006988:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 800698c:	1c53      	adds	r3, r2, #1
 800698e:	b29b      	uxth	r3, r3
{
 8006990:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8006992:	2b7f      	cmp	r3, #127	; 0x7f
{
 8006994:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8006996:	bf88      	it	hi
 8006998:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800699a:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 800699e:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80069a0:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80069a4:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80069a8:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 80069ac:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 80069ae:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80069b0:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80069b4:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 80069b6:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 80069b8:	d1fa      	bne.n	80069b0 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	bfb8      	it	lt
 80069be:	327f      	addlt	r2, #127	; 0x7f
 80069c0:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80069c2:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80069c6:	bc70      	pop	{r4, r5, r6}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop

080069cc <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 80069cc:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop

080069d4 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80069d4:	8a03      	ldrh	r3, [r0, #16]
 80069d6:	8b42      	ldrh	r2, [r0, #26]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d306      	bcc.n	80069ea <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80069dc:	8b82      	ldrh	r2, [r0, #28]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d901      	bls.n	80069e6 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80069e2:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80069e4:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80069e6:	8ac0      	ldrh	r0, [r0, #22]
 80069e8:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80069ea:	2008      	movs	r0, #8
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop

080069f0 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80069f0:	2300      	movs	r3, #0
 80069f2:	8203      	strh	r3, [r0, #16]
}
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop

080069f8 <NTC_Init>:
{
 80069f8:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80069fa:	7803      	ldrb	r3, [r0, #0]
{
 80069fc:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80069fe:	b123      	cbz	r3, 8006a0a <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006a00:	8a43      	ldrh	r3, [r0, #18]
 8006a02:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006a04:	2200      	movs	r2, #0
 8006a06:	82c2      	strh	r2, [r0, #22]
}
 8006a08:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006a0a:	3004      	adds	r0, #4
 8006a0c:	f7fb fbf6 	bl	80021fc <RCM_RegisterRegConv>
 8006a10:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8006a14:	4620      	mov	r0, r4
 8006a16:	f7ff ffeb 	bl	80069f0 <NTC_Clear>
}
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006a1c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a1e:	7803      	ldrb	r3, [r0, #0]
{
 8006a20:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a22:	b113      	cbz	r3, 8006a2a <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8006a24:	2000      	movs	r0, #0
 8006a26:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8006a28:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006a2a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006a2e:	f7fb fcb9 	bl	80023a4 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a36:	4298      	cmp	r0, r3
 8006a38:	d007      	beq.n	8006a4a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a3a:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006a3c:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a3e:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8006a40:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006a44:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006a48:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f7ff ffc2 	bl	80069d4 <NTC_SetFaultState>
 8006a50:	82e0      	strh	r0, [r4, #22]
}
 8006a52:	bd10      	pop	{r4, pc}

08006a54 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a54:	7803      	ldrb	r3, [r0, #0]
 8006a56:	b983      	cbnz	r3, 8006a7a <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8006a58:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006a5a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006a5c:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006a60:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006a62:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8006a64:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bfbc      	itt	lt
 8006a6c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006a70:	33ff      	addlt	r3, #255	; 0xff
 8006a72:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8006a76:	b200      	sxth	r0, r0
 8006a78:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8006a7a:	8a80      	ldrh	r0, [r0, #20]
}
 8006a7c:	b200      	sxth	r0, r0
 8006a7e:	4770      	bx	lr

08006a80 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006a80:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006a82:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006a84:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006a86:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006a88:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006a8a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006a8c:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006a8e:	4770      	bx	lr

08006a90 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006a90:	8081      	strh	r1, [r0, #4]
}
 8006a92:	4770      	bx	lr

08006a94 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006a94:	80c1      	strh	r1, [r0, #6]
}
 8006a96:	4770      	bx	lr

08006a98 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006a98:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop

08006aa0 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006aa0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop

08006aa8 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006aa8:	6081      	str	r1, [r0, #8]

  return;
}
 8006aaa:	4770      	bx	lr

08006aac <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006aac:	8b00      	ldrh	r0, [r0, #24]
 8006aae:	4770      	bx	lr

08006ab0 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006ab0:	8b40      	ldrh	r0, [r0, #26]
 8006ab2:	4770      	bx	lr

08006ab4 <PID_SetLowerIntegralTermLimit>:
 * @param  wLowerLimit: new lower integral term limit value
 * @retval None
 */
__weak void PID_SetLowerIntegralTermLimit( PID_Handle_t * pHandle, int32_t wLowerLimit )
{
  pHandle->wLowerIntegralLimit = wLowerLimit;
 8006ab4:	6101      	str	r1, [r0, #16]
}
 8006ab6:	4770      	bx	lr

08006ab8 <PID_SetUpperIntegralTermLimit>:
 * @param  wUpperLimit: new upper integral term limit value
 * @retval None
 */
__weak void PID_SetUpperIntegralTermLimit( PID_Handle_t * pHandle, int32_t wUpperLimit )
{
  pHandle->wUpperIntegralLimit = wUpperLimit;
 8006ab8:	60c1      	str	r1, [r0, #12]
}
 8006aba:	4770      	bx	lr

08006abc <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006abc:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8006abe:	4770      	bx	lr

08006ac0 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006ac0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006ac8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006acc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8006ad0:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006ad6:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006ada:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8006ade:	b162      	cbz	r2, 8006afa <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006ae0:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006ae2:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 8006ae6:	1872      	adds	r2, r6, r1
 8006ae8:	d420      	bmi.n	8006b2c <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	db29      	blt.n	8006b42 <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006aee:	68c1      	ldr	r1, [r0, #12]
 8006af0:	4291      	cmp	r1, r2
 8006af2:	db03      	blt.n	8006afc <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006af4:	6901      	ldr	r1, [r0, #16]
 8006af6:	4291      	cmp	r1, r2
 8006af8:	dc00      	bgt.n	8006afc <PI_Controller+0x34>
 8006afa:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006afc:	8b86      	ldrh	r6, [r0, #28]
 8006afe:	8bc2      	ldrh	r2, [r0, #30]
 8006b00:	4133      	asrs	r3, r6
 8006b02:	fa41 f202 	asr.w	r2, r1, r2
 8006b06:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	da05      	bge.n	8006b18 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006b0c:	1ae3      	subs	r3, r4, r3
 8006b0e:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006b10:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006b12:	4620      	mov	r0, r4
 8006b14:	bc70      	pop	{r4, r5, r6}
 8006b16:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8006b18:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006b1a:	bfc9      	itett	gt
 8006b1c:	1aeb      	subgt	r3, r5, r3
 8006b1e:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 8006b20:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 8006b22:	18c9      	addgt	r1, r1, r3
 8006b24:	6081      	str	r1, [r0, #8]
}
 8006b26:	4620      	mov	r0, r4
 8006b28:	bc70      	pop	{r4, r5, r6}
 8006b2a:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8006b2c:	2e00      	cmp	r6, #0
 8006b2e:	ddde      	ble.n	8006aee <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8006b30:	2900      	cmp	r1, #0
 8006b32:	dddc      	ble.n	8006aee <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006b34:	68c1      	ldr	r1, [r0, #12]
 8006b36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006b3a:	4291      	cmp	r1, r2
 8006b3c:	d1de      	bne.n	8006afc <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 8006b3e:	460a      	mov	r2, r1
 8006b40:	e7db      	b.n	8006afa <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8006b42:	4e03      	ldr	r6, [pc, #12]	; (8006b50 <PI_Controller+0x88>)
 8006b44:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8006b48:	bf28      	it	cs
 8006b4a:	4632      	movcs	r2, r6
 8006b4c:	e7cf      	b.n	8006aee <PI_Controller+0x26>
 8006b4e:	bf00      	nop
 8006b50:	80000001 	.word	0x80000001

08006b54 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8006b54:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006b56:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006b5a:	8b11      	ldrh	r1, [r2, #24]
 8006b5c:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006b5e:	8995      	ldrh	r5, [r2, #12]
 8006b60:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006b62:	fb13 f301 	smulbb	r3, r3, r1
{
 8006b66:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006b68:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006b6c:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006b70:	f7ff fe9c 	bl	80068ac <VBS_GetAvBusVoltage_V>
 8006b74:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8006b78:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b7a:	480e      	ldr	r0, [pc, #56]	; (8006bb4 <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006b7c:	490e      	ldr	r1, [pc, #56]	; (8006bb8 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8006b7e:	bfb8      	it	lt
 8006b80:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b84:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8006b88:	bfb8      	it	lt
 8006b8a:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b8c:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8006b8e:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006b90:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 8006b94:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006b98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006b9c:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006b9e:	fb81 2103 	smull	r2, r1, r1, r3
 8006ba2:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006bae:	f7ff beeb 	b.w	8006988 <MPM_CalcElMotorPower>
 8006bb2:	bf00      	nop
 8006bb4:	1b4e81b5 	.word	0x1b4e81b5
 8006bb8:	66666667 	.word	0x66666667

08006bbc <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8006bbc:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8006bbe:	4b18      	ldr	r3, [pc, #96]	; (8006c20 <startTimers+0x64>)
 8006bc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bc2:	07d2      	lsls	r2, r2, #31
 8006bc4:	b082      	sub	sp, #8
 8006bc6:	d415      	bmi.n	8006bf4 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006bc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bca:	f042 0201 	orr.w	r2, r2, #1
 8006bce:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006bd2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006bd6:	f002 0201 	and.w	r2, r2, #1
 8006bda:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006bdc:	9a01      	ldr	r2, [sp, #4]
 8006bde:	694a      	ldr	r2, [r1, #20]
 8006be0:	f042 0201 	orr.w	r2, r2, #1
 8006be4:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8006be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8006bee:	b002      	add	sp, #8
 8006bf0:	bc30      	pop	{r4, r5}
 8006bf2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006bf8:	4c0a      	ldr	r4, [pc, #40]	; (8006c24 <startTimers+0x68>)
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	6859      	ldr	r1, [r3, #4]
 8006bfe:	4d0a      	ldr	r5, [pc, #40]	; (8006c28 <startTimers+0x6c>)
 8006c00:	4021      	ands	r1, r4
 8006c02:	f041 0120 	orr.w	r1, r1, #32
 8006c06:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c08:	6958      	ldr	r0, [r3, #20]
 8006c0a:	f040 0001 	orr.w	r0, r0, #1
 8006c0e:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006c10:	6859      	ldr	r1, [r3, #4]
 8006c12:	402a      	ands	r2, r5
 8006c14:	4021      	ands	r1, r4
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
}
 8006c1a:	b002      	add	sp, #8
 8006c1c:	bc30      	pop	{r4, r5}
 8006c1e:	4770      	bx	lr
 8006c20:	40021000 	.word	0x40021000
 8006c24:	fdffff8f 	.word	0xfdffff8f
 8006c28:	02000070 	.word	0x02000070

08006c2c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006c2c:	b4f0      	push	{r4, r5, r6, r7}
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 8006c2e:	6804      	ldr	r4, [r0, #0]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8006c30:	f004 0460 	and.w	r4, r4, #96	; 0x60
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006c34:	3201      	adds	r2, #1
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8006c36:	2c60      	cmp	r4, #96	; 0x60
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006c38:	bf18      	it	ne
 8006c3a:	0856      	lsrne	r6, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006c3c:	f06f 0702 	mvn.w	r7, #2
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006c40:	bf0c      	ite	eq
 8006c42:	0156      	lsleq	r6, r2, #5
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006c44:	0176      	lslne	r6, r6, #5
 8006c46:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006c48:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006c4a:	781c      	ldrb	r4, [r3, #0]
 8006c4c:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006c4e:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006c52:	d80b      	bhi.n	8006c6c <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006c54:	6904      	ldr	r4, [r0, #16]
 8006c56:	07a4      	lsls	r4, r4, #30
 8006c58:	d5f7      	bpl.n	8006c4a <waitForPolarizationEnd+0x1e>
      hCalibrationPeriodCounter++;
 8006c5a:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006c5c:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006c5e:	6107      	str	r7, [r0, #16]
 8006c60:	d8f3      	bhi.n	8006c4a <waitForPolarizationEnd+0x1e>
      {
        if (*cnt < NB_CONVERSIONS)
 8006c62:	781c      	ldrb	r4, [r3, #0]
 8006c64:	2c0f      	cmp	r4, #15
 8006c66:	d8f0      	bhi.n	8006c4a <waitForPolarizationEnd+0x1e>
        {
          *SWerror = 1u;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8006c6e:	4770      	bx	lr

08006c70 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006c70:	6843      	ldr	r3, [r0, #4]
 8006c72:	4718      	bx	r3

08006c74 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006c74:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c76:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c7a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8006c7c:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c7e:	140c      	asrs	r4, r1, #16
{
 8006c80:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c82:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c86:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006c88:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006c8c:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c90:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c94:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006c98:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006c9c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006ca4:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006ca8:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006cac:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006cb0:	db77      	blt.n	8006da2 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006cb2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006cb6:	db4e      	blt.n	8006d56 <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006cb8:	1aad      	subs	r5, r5, r2
 8006cba:	bf44      	itt	mi
 8006cbc:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006cc0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	bfbc      	itt	lt
 8006cc8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006ccc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfb8      	it	lt
 8006cd4:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006cd8:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006cdc:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006ce0:	bfb8      	it	lt
 8006ce2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8006ce6:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006ce8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006cec:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8006cf0:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8006cf4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8006cf8:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006cfa:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006cfc:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8006d00:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006d04:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006d08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006d0c:	b292      	uxth	r2, r2
 8006d0e:	b289      	uxth	r1, r1
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006d14:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006d16:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006d18:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006d1a:	d118      	bne.n	8006d4e <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006d1c:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8006d20:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8006d24:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006d26:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006d2a:	bfcc      	ite	gt
 8006d2c:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006d2e:	1b12      	suble	r2, r2, r4
 8006d30:	b292      	uxth	r2, r2
 8006d32:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006d34:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8006d38:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006d3a:	bfcc      	ite	gt
 8006d3c:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006d3e:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8006d40:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006d42:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006d44:	bfcc      	ite	gt
 8006d46:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006d48:	1b1b      	suble	r3, r3, r4
 8006d4a:	8681      	strh	r1, [r0, #52]	; 0x34
 8006d4c:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006d4e:	6983      	ldr	r3, [r0, #24]
}
 8006d50:	b003      	add	sp, #12
 8006d52:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006d54:	4718      	bx	r3
      if ( wX <= 0 )
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	dd47      	ble.n	8006dea <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d5a:	1aa5      	subs	r5, r4, r2
 8006d5c:	bf44      	itt	mi
 8006d5e:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006d62:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006d66:	2900      	cmp	r1, #0
 8006d68:	bfb8      	it	lt
 8006d6a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8006d6e:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006d72:	bfb8      	it	lt
 8006d74:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006d78:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d7c:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006d7e:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006d80:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006d84:	bfb8      	it	lt
 8006d86:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006d8a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006d8e:	bfb8      	it	lt
 8006d90:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006d94:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8006d98:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8006d9c:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006d9e:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8006da0:	e7ac      	b.n	8006cfc <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8006da2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006da6:	db69      	blt.n	8006e7c <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8006da8:	2c00      	cmp	r4, #0
 8006daa:	dd43      	ble.n	8006e34 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006dac:	1b2d      	subs	r5, r5, r4
 8006dae:	bf48      	it	mi
 8006db0:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006db4:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006db8:	bf48      	it	mi
 8006dba:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfb8      	it	lt
 8006dc2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006dc6:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006dca:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006dce:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006dd2:	bfb8      	it	lt
 8006dd4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006dd8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006ddc:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8006de0:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006de2:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006de4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006de8:	e788      	b.n	8006cfc <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006dea:	1b2d      	subs	r5, r5, r4
 8006dec:	bf44      	itt	mi
 8006dee:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006df2:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	bfb8      	it	lt
 8006dfa:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8006dfe:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8006e02:	bfb8      	it	lt
 8006e04:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8006e08:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8006e0c:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006e0e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006e12:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006e16:	bfb8      	it	lt
 8006e18:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006e1c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006e20:	bfb8      	it	lt
 8006e22:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8006e26:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8006e2a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8006e2e:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006e30:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8006e32:	e763      	b.n	8006cfc <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e34:	1aa5      	subs	r5, r4, r2
 8006e36:	bf44      	itt	mi
 8006e38:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006e3c:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006e40:	2900      	cmp	r1, #0
 8006e42:	bfb8      	it	lt
 8006e44:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006e48:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8006e4c:	bfb8      	it	lt
 8006e4e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8006e52:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e56:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006e58:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e5a:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e5e:	bfb8      	it	lt
 8006e60:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006e64:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e68:	bfb8      	it	lt
 8006e6a:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006e6e:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8006e72:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006e74:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006e76:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006e7a:	e73f      	b.n	8006cfc <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e7c:	1aad      	subs	r5, r5, r2
 8006e7e:	bf44      	itt	mi
 8006e80:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8006e84:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006e88:	2900      	cmp	r1, #0
 8006e8a:	bfbc      	itt	lt
 8006e8c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006e90:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfb8      	it	lt
 8006e98:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006e9c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8006ea0:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006ea4:	bfb8      	it	lt
 8006ea6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8006eaa:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8006eac:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006eb0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006eb4:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8006eb8:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006eba:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8006ebc:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006ec0:	e71c      	b.n	8006cfc <PWMC_SetPhaseVoltage+0x88>
 8006ec2:	bf00      	nop

08006ec4 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006ec4:	6883      	ldr	r3, [r0, #8]
 8006ec6:	4718      	bx	r3

08006ec8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8006ece:	b199      	cbz	r1, 8006ef8 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006ed0:	2901      	cmp	r1, #1
 8006ed2:	d002      	beq.n	8006eda <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006ed4:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006ed6:	b002      	add	sp, #8
 8006ed8:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006eda:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006ede:	b1cb      	cbz	r3, 8006f14 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	9101      	str	r1, [sp, #4]
 8006ee6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f2      	bne.n	8006ed4 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006eee:	6903      	ldr	r3, [r0, #16]
 8006ef0:	4798      	blx	r3
        retVal = true;
 8006ef2:	9901      	ldr	r1, [sp, #4]
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	e7ee      	b.n	8006ed6 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006ef8:	f7ff ffe4 	bl	8006ec4 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006efc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006f00:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006f08:	4620      	mov	r0, r4
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	4798      	blx	r3
      retVal = true;
 8006f0e:	2001      	movs	r0, #1
}
 8006f10:	b002      	add	sp, #8
 8006f12:	bd10      	pop	{r4, pc}
      retVal = true;
 8006f14:	4608      	mov	r0, r1
}
 8006f16:	b002      	add	sp, #8
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	bf00      	nop

08006f1c <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006f1c:	69c3      	ldr	r3, [r0, #28]
 8006f1e:	4718      	bx	r3

08006f20 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006f20:	6883      	ldr	r3, [r0, #8]
 8006f22:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006f26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f2a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006f2c:	6883      	ldr	r3, [r0, #8]
 8006f2e:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8006f30:	b082      	sub	sp, #8
 8006f32:	d417      	bmi.n	8006f64 <R3_2_ADCxInit+0x44>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006f34:	4b24      	ldr	r3, [pc, #144]	; (8006fc8 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8006f36:	6882      	ldr	r2, [r0, #8]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4924      	ldr	r1, [pc, #144]	; (8006fcc <R3_2_ADCxInit+0xac>)
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8006f42:	fba1 1303 	umull	r1, r3, r1, r3
 8006f46:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006f4a:	099b      	lsrs	r3, r3, #6
 8006f4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006f50:	6082      	str	r2, [r0, #8]
 8006f52:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	b12b      	cbz	r3, 8006f64 <R3_2_ADCxInit+0x44>
    {
      wait_loop_index--;
 8006f58:	9b01      	ldr	r3, [sp, #4]
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f9      	bne.n	8006f58 <R3_2_ADCxInit+0x38>
  MODIFY_REG(ADCx->CR,
 8006f64:	6883      	ldr	r3, [r0, #8]
 8006f66:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006f6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f72:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006f74:	6883      	ldr	r3, [r0, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	dbfc      	blt.n	8006f74 <R3_2_ADCxInit+0x54>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006f7a:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 8006f7c:	07da      	lsls	r2, r3, #31
 8006f7e:	d408      	bmi.n	8006f92 <R3_2_ADCxInit+0x72>
  MODIFY_REG(ADCx->CR,
 8006f80:	4a13      	ldr	r2, [pc, #76]	; (8006fd0 <R3_2_ADCxInit+0xb0>)
 8006f82:	6883      	ldr	r3, [r0, #8]
 8006f84:	4013      	ands	r3, r2
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8006f8c:	6803      	ldr	r3, [r0, #0]
 8006f8e:	07db      	lsls	r3, r3, #31
 8006f90:	d5f7      	bpl.n	8006f82 <R3_2_ADCxInit+0x62>
  MODIFY_REG(ADCx->CR,
 8006f92:	6882      	ldr	r2, [r0, #8]
 8006f94:	490e      	ldr	r1, [pc, #56]	; (8006fd0 <R3_2_ADCxInit+0xb0>)
 8006f96:	400a      	ands	r2, r1
 8006f98:	f042 0208 	orr.w	r2, r2, #8
 8006f9c:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8006f9e:	6882      	ldr	r2, [r0, #8]
 8006fa0:	400a      	ands	r2, r1
 8006fa2:	f042 0220 	orr.w	r2, r2, #32
 8006fa6:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8006fa8:	68c3      	ldr	r3, [r0, #12]
 8006faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fb6:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8006fb8:	6883      	ldr	r3, [r0, #8]
 8006fba:	400b      	ands	r3, r1
 8006fbc:	f043 0304 	orr.w	r3, r3, #4
 8006fc0:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 8006fc2:	b002      	add	sp, #8
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000718 	.word	0x20000718
 8006fcc:	053e2d63 	.word	0x053e2d63
 8006fd0:	7fffffc0 	.word	0x7fffffc0

08006fd4 <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fd4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8006fd6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8006fda:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006fdc:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006fde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006fe2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8006fe6:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8006fe8:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff4:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8006ff6:	2a05      	cmp	r2, #5
 8006ff8:	f200 8099 	bhi.w	800712e <R3_2_GetPhaseCurrents+0x15a>
 8006ffc:	e8df f002 	tbb	[pc, r2]
 8007000:	031e1e38 	.word	0x031e1e38
 8007004:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007006:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8007008:	4b4c      	ldr	r3, [pc, #304]	; (800713c <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800700a:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 800700c:	429c      	cmp	r4, r3
 800700e:	da55      	bge.n	80070bc <R3_2_GetPhaseCurrents+0xe8>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8007010:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8007012:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8007014:	4f49      	ldr	r7, [pc, #292]	; (800713c <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8007016:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8007018:	42ba      	cmp	r2, r7
 800701a:	da55      	bge.n	80070c8 <R3_2_GetPhaseCurrents+0xf4>
      {
        Iab->b = -INT16_MAX;
 800701c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8007020:	804f      	strh	r7, [r1, #2]
 8007022:	b2ab      	uxth	r3, r5
 8007024:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007028:	4413      	add	r3, r2
 800702a:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 800702c:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 8007030:	f8a0 704a 	strh.w	r7, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007034:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8007038:	bcf0      	pop	{r4, r5, r6, r7}
 800703a:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800703c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 800703e:	4b3f      	ldr	r3, [pc, #252]	; (800713c <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8007040:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8007042:	429c      	cmp	r4, r3
 8007044:	db34      	blt.n	80070b0 <R3_2_GetPhaseCurrents+0xdc>
      else  if ( Aux > INT16_MAX )
 8007046:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800704a:	db68      	blt.n	800711e <R3_2_GetPhaseCurrents+0x14a>
        Iab->a = INT16_MAX;
 800704c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007050:	4613      	mov	r3, r2
 8007052:	800a      	strh	r2, [r1, #0]
 8007054:	4614      	mov	r4, r2
 8007056:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8007058:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800705a:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800705c:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 800705e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007062:	db44      	blt.n	80070ee <R3_2_GetPhaseCurrents+0x11a>
        Iab->b = INT16_MAX;
 8007064:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007068:	4622      	mov	r2, r4
 800706a:	804c      	strh	r4, [r1, #2]
 800706c:	4627      	mov	r7, r4
 800706e:	e7db      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8007070:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8007072:	4b32      	ldr	r3, [pc, #200]	; (800713c <R3_2_GetPhaseCurrents+0x168>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8007074:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8007076:	429c      	cmp	r4, r3
 8007078:	db14      	blt.n	80070a4 <R3_2_GetPhaseCurrents+0xd0>
      else  if ( Aux > INT16_MAX )
 800707a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800707e:	db43      	blt.n	8007108 <R3_2_GetPhaseCurrents+0x134>
        Iab->b = INT16_MAX;
 8007080:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007084:	461a      	mov	r2, r3
 8007086:	804b      	strh	r3, [r1, #2]
 8007088:	461c      	mov	r4, r3
 800708a:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800708c:	6e45      	ldr	r5, [r0, #100]	; 0x64
 800708e:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8007090:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8007092:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007096:	db23      	blt.n	80070e0 <R3_2_GetPhaseCurrents+0x10c>
        Iab->a = INT16_MAX;
 8007098:	f647 74ff 	movw	r4, #32767	; 0x7fff
 800709c:	4623      	mov	r3, r4
 800709e:	800c      	strh	r4, [r1, #0]
 80070a0:	4625      	mov	r5, r4
 80070a2:	e7c1      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
        Iab->b = -INT16_MAX;
 80070a4:	461c      	mov	r4, r3
 80070a6:	804b      	strh	r3, [r1, #2]
 80070a8:	461f      	mov	r7, r3
 80070aa:	f248 0201 	movw	r2, #32769	; 0x8001
 80070ae:	e7ed      	b.n	800708c <R3_2_GetPhaseCurrents+0xb8>
        Iab->a = -INT16_MAX;
 80070b0:	461c      	mov	r4, r3
 80070b2:	800b      	strh	r3, [r1, #0]
 80070b4:	461d      	mov	r5, r3
 80070b6:	f248 0301 	movw	r3, #32769	; 0x8001
 80070ba:	e7cd      	b.n	8007058 <R3_2_GetPhaseCurrents+0x84>
      else  if ( Aux > INT16_MAX )
 80070bc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80070c0:	db1c      	blt.n	80070fc <R3_2_GetPhaseCurrents+0x128>
        Iab->a = INT16_MAX;
 80070c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80070c6:	e7a3      	b.n	8007010 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 80070c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80070cc:	db20      	blt.n	8007110 <R3_2_GetPhaseCurrents+0x13c>
        Iab->b = INT16_MAX;
 80070ce:	f9b1 5000 	ldrsh.w	r5, [r1]
 80070d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80070d6:	804b      	strh	r3, [r1, #2]
 80070d8:	461a      	mov	r2, r3
 80070da:	461f      	mov	r7, r3
 80070dc:	b2ab      	uxth	r3, r5
 80070de:	e7a3      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 80070e0:	4d16      	ldr	r5, [pc, #88]	; (800713c <R3_2_GetPhaseCurrents+0x168>)
 80070e2:	42ac      	cmp	r4, r5
 80070e4:	da1f      	bge.n	8007126 <R3_2_GetPhaseCurrents+0x152>
        Iab->a = -INT16_MAX;
 80070e6:	800d      	strh	r5, [r1, #0]
 80070e8:	f248 0301 	movw	r3, #32769	; 0x8001
 80070ec:	e79c      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
      else  if ( Aux < -INT16_MAX )
 80070ee:	4f13      	ldr	r7, [pc, #76]	; (800713c <R3_2_GetPhaseCurrents+0x168>)
 80070f0:	42ba      	cmp	r2, r7
 80070f2:	da05      	bge.n	8007100 <R3_2_GetPhaseCurrents+0x12c>
        Iab->b = -INT16_MAX;
 80070f4:	804f      	strh	r7, [r1, #2]
 80070f6:	f248 0201 	movw	r2, #32769	; 0x8001
 80070fa:	e795      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 80070fc:	800c      	strh	r4, [r1, #0]
 80070fe:	e788      	b.n	8007012 <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 8007100:	b217      	sxth	r7, r2
 8007102:	804f      	strh	r7, [r1, #2]
 8007104:	b292      	uxth	r2, r2
 8007106:	e78f      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
        Iab->b = ( int16_t )Aux;
 8007108:	b227      	sxth	r7, r4
 800710a:	804f      	strh	r7, [r1, #2]
 800710c:	b2a2      	uxth	r2, r4
 800710e:	e7bd      	b.n	800708c <R3_2_GetPhaseCurrents+0xb8>
        Iab->b = ( int16_t )Aux;
 8007110:	f9b1 5000 	ldrsh.w	r5, [r1]
 8007114:	b217      	sxth	r7, r2
 8007116:	b2ab      	uxth	r3, r5
 8007118:	804f      	strh	r7, [r1, #2]
 800711a:	b292      	uxth	r2, r2
 800711c:	e784      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
        Iab->a = ( int16_t )Aux;
 800711e:	b225      	sxth	r5, r4
 8007120:	800d      	strh	r5, [r1, #0]
 8007122:	b2a3      	uxth	r3, r4
 8007124:	e798      	b.n	8007058 <R3_2_GetPhaseCurrents+0x84>
        Iab->a = ( int16_t )Aux;
 8007126:	b225      	sxth	r5, r4
 8007128:	800d      	strh	r5, [r1, #0]
 800712a:	b2a3      	uxth	r3, r4
 800712c:	e77c      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
 800712e:	f9b1 5000 	ldrsh.w	r5, [r1]
 8007132:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8007136:	880b      	ldrh	r3, [r1, #0]
 8007138:	884a      	ldrh	r2, [r1, #2]
 800713a:	e775      	b.n	8007028 <R3_2_GetPhaseCurrents+0x54>
 800713c:	ffff8001 	.word	0xffff8001

08007140 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8007140:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007142:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007144:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 8007148:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800714c:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007150:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007152:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007154:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007156:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8007158:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800715a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 800715c:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800715e:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007160:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007162:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007164:	4904      	ldr	r1, [pc, #16]	; (8007178 <R3_2_SetADCSampPointPolarization+0x38>)
 8007166:	685b      	ldr	r3, [r3, #4]
}
 8007168:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800716c:	420b      	tst	r3, r1
}
 800716e:	bf14      	ite	ne
 8007170:	2001      	movne	r0, #1
 8007172:	2000      	moveq	r0, #0
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	02000070 	.word	0x02000070

0800717c <R3_2_SetADCSampPointSectX>:
{
 800717c:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800717e:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8007182:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8007184:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007186:	1aca      	subs	r2, r1, r3
 8007188:	f8b4 60b2 	ldrh.w	r6, [r4, #178]	; 0xb2
 800718c:	b292      	uxth	r2, r2
 800718e:	42b2      	cmp	r2, r6
 8007190:	d914      	bls.n	80071bc <R3_2_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8007192:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8007194:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8007196:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8007198:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800719c:	68a2      	ldr	r2, [r4, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800719e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 80071a0:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 80071a2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 80071a4:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80071a6:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80071a8:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80071aa:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 80071ac:	6852      	ldr	r2, [r2, #4]
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <R3_2_SetADCSampPointSectX+0x70>)
 80071b0:	421a      	tst	r2, r3
}
 80071b2:	bf14      	ite	ne
 80071b4:	2001      	movne	r0, #1
 80071b6:	2000      	moveq	r0, #0
 80071b8:	bc70      	pop	{r4, r5, r6}
 80071ba:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 80071bc:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 80071be:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 80071c0:	b2ad      	uxth	r5, r5
 80071c2:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 80071c6:	d904      	bls.n	80071d2 <R3_2_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 80071c8:	f8b4 20b4 	ldrh.w	r2, [r4, #180]	; 0xb4
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	e7e4      	b.n	800719c <R3_2_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 80071d2:	4433      	add	r3, r6
 80071d4:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 80071d6:	4299      	cmp	r1, r3
 80071d8:	d8e0      	bhi.n	800719c <R3_2_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80071da:	43db      	mvns	r3, r3
 80071dc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80071e0:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80071e4:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80071e6:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80071ea:	e7d7      	b.n	800719c <R3_2_SetADCSampPointSectX+0x20>
 80071ec:	02000070 	.word	0x02000070

080071f0 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80071f0:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80071f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80071f4:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80071f8:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80071fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80071fe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8007202:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007204:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007206:	6853      	ldr	r3, [r2, #4]
 8007208:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800720c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007210:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8007212:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d80b      	bhi.n	8007232 <R3_2_HFCurrentsPolarizationAB+0x42>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 800721a:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800721e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseAOffset += ADCDataReg1;
 8007222:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007224:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8007226:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8007228:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007232:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8007234:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 8007236:	600b      	str	r3, [r1, #0]
}
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop

0800723c <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800723c:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800723e:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007240:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007244:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007246:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800724a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800724c:	681c      	ldr	r4, [r3, #0]
 800724e:	6853      	ldr	r3, [r2, #4]
 8007250:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007258:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800725a:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800725e:	2b0f      	cmp	r3, #15
 8007260:	d808      	bhi.n	8007274 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8007262:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007266:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8007268:	3301      	adds	r3, #1
 800726a:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800726c:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800726e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007272:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007274:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8007276:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 800727a:	600b      	str	r3, [r1, #0]
}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop

08007280 <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007280:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8007282:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007284:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007286:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800728a:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800728c:	f06f 0001 	mvn.w	r0, #1
 8007290:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007292:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007294:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007296:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007298:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800729a:	07db      	lsls	r3, r3, #31
 800729c:	d5fc      	bpl.n	8007298 <R3_2_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800729e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80072a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a4:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80072a6:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d000      	beq.n	80072b0 <R3_2_TurnOnLowSides+0x30>
 80072ae:	4770      	bx	lr
{
 80072b0:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80072b2:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80072b6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80072b8:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80072bc:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80072c0:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80072c4:	61ae      	str	r6, [r5, #24]
 80072c6:	6184      	str	r4, [r0, #24]
  }
  return;
}
 80072c8:	bc70      	pop	{r4, r5, r6}
 80072ca:	619a      	str	r2, [r3, #24]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072d0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80072d2:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072d6:	688b      	ldr	r3, [r1, #8]
{
 80072d8:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 80072da:	2401      	movs	r4, #1
  pHandle->_Super.TurnOnLowSidesAction = false;
 80072dc:	2500      	movs	r5, #0
  pHandle->ADCRegularLocked=true; 
 80072de:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 80072e2:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80072e6:	fa22 f404 	lsr.w	r4, r2, r4
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80072ea:	f06f 0001 	mvn.w	r0, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 80072ee:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80072f0:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80072f2:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80072f4:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80072f6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80072f8:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80072fa:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80072fc:	07d2      	lsls	r2, r2, #31
 80072fe:	d5fc      	bpl.n	80072fa <R3_2_SwitchOnPWM+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007300:	f06f 0201 	mvn.w	r2, #1
 8007304:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800730c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800730e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007314:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007316:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 800731a:	2a02      	cmp	r2, #2
 800731c:	d008      	beq.n	8007330 <R3_2_SwitchOnPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800731e:	f06f 0201 	mvn.w	r2, #1
 8007322:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 800732a:	bc30      	pop	{r4, r5}
 800732c:	60da      	str	r2, [r3, #12]
 800732e:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007330:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007332:	6a0c      	ldr	r4, [r1, #32]
 8007334:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007338:	f240 5255 	movw	r2, #1365	; 0x555
 800733c:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800733e:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007342:	d007      	beq.n	8007354 <R3_2_SwitchOnPWM+0x84>
 8007344:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007346:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800734a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800734e:	6184      	str	r4, [r0, #24]
 8007350:	6191      	str	r1, [r2, #24]
}
 8007352:	e7e4      	b.n	800731e <R3_2_SwitchOnPWM+0x4e>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007354:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007356:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800735a:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 800735e:	6284      	str	r4, [r0, #40]	; 0x28
 8007360:	6291      	str	r1, [r2, #40]	; 0x28
}
 8007362:	e7dc      	b.n	800731e <R3_2_SwitchOnPWM+0x4e>

08007364 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007364:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8007366:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007368:	68d3      	ldr	r3, [r2, #12]
 800736a:	f023 0301 	bic.w	r3, r3, #1
{
 800736e:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8007370:	f890 4070 	ldrb.w	r4, [r0, #112]	; 0x70
 8007374:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007376:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007378:	2500      	movs	r5, #0
 800737a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800737e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8007382:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8007384:	b91c      	cbnz	r4, 800738e <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007386:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800738a:	2b02      	cmp	r3, #2
 800738c:	d00d      	beq.n	80073aa <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800738e:	f06f 0301 	mvn.w	r3, #1
 8007392:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007394:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d5fc      	bpl.n	8007394 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800739a:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 800739e:	2300      	movs	r3, #0
 80073a0:	6111      	str	r1, [r2, #16]
}
 80073a2:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked=false; 
 80073a4:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 80073a8:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80073aa:	e9d1 3408 	ldrd	r3, r4, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80073ae:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 80073b2:	629d      	str	r5, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80073b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80073b6:	f8b1 50ae 	ldrh.w	r5, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80073ba:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80073be:	62a5      	str	r5, [r4, #40]	; 0x28
 80073c0:	6299      	str	r1, [r3, #40]	; 0x28
}
 80073c2:	e7e4      	b.n	800738e <R3_2_SwitchOffPWM+0x2a>

080073c4 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 80073c4:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073c6:	6f44      	ldr	r4, [r0, #116]	; 0x74
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80073c8:	6e03      	ldr	r3, [r0, #96]	; 0x60
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073ca:	68a5      	ldr	r5, [r4, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80073cc:	686a      	ldr	r2, [r5, #4]
 80073ce:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80073d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80073d6:	606a      	str	r2, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80073d8:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 80073dc:	4a0c      	ldr	r2, [pc, #48]	; (8007410 <R3_2_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80073de:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80073e2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80073e4:	6800      	ldr	r0, [r0, #0]
 80073e6:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 80073e8:	4293      	cmp	r3, r2
 80073ea:	db05      	blt.n	80073f8 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 80073ec:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80073f0:	4293      	cmp	r3, r2
 80073f2:	dc0a      	bgt.n	800740a <R3_2_RLGetPhaseCurrents+0x46>
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	e000      	b.n	80073fa <R3_2_RLGetPhaseCurrents+0x36>
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <R3_2_RLGetPhaseCurrents+0x50>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80073fa:	2200      	movs	r2, #0
 80073fc:	f363 020f 	bfi	r2, r3, #0, #16
 8007400:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 8007404:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 8007406:	600a      	str	r2, [r1, #0]
}
 8007408:	4770      	bx	lr
 800740a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800740e:	e7f4      	b.n	80073fa <R3_2_RLGetPhaseCurrents+0x36>
 8007410:	ffff8002 	.word	0xffff8002
 8007414:	ffff8001 	.word	0xffff8001

08007418 <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007418:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 800741a:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800741c:	688a      	ldr	r2, [r1, #8]
  pHandle->ADCRegularLocked=true;
 800741e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007422:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007424:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007428:	6350      	str	r0, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800742a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800742c:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800742e:	07db      	lsls	r3, r3, #31
 8007430:	d5fc      	bpl.n	800742c <R3_2_RLTurnOnLowSides+0x14>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007432:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007438:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800743a:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800743e:	2b02      	cmp	r3, #2
 8007440:	d000      	beq.n	8007444 <R3_2_RLTurnOnLowSides+0x2c>
 8007442:	4770      	bx	lr
{
 8007444:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007446:	e9d1 5008 	ldrd	r5, r0, [r1, #32]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800744a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800744c:	f8b1 60ac 	ldrh.w	r6, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007450:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007454:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007458:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800745a:	6284      	str	r4, [r0, #40]	; 0x28
  }
  return;
}
 800745c:	bc70      	pop	{r4, r5, r6}
 800745e:	629a      	str	r2, [r3, #40]	; 0x28
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007464:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 8007466:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007468:	688b      	ldr	r3, [r1, #8]
{
 800746a:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800746c:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8007470:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007474:	f06f 0201 	mvn.w	r2, #1
 8007478:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800747a:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800747c:	07d6      	lsls	r6, r2, #31
 800747e:	d5fc      	bpl.n	800747a <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8007480:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007484:	f06f 0701 	mvn.w	r7, #1
 8007488:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800748a:	2601      	movs	r6, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800748c:	611f      	str	r7, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800748e:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007490:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007492:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007494:	07d2      	lsls	r2, r2, #31
 8007496:	d5fc      	bpl.n	8007492 <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 80074a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074a6:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80074a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074ae:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80074b0:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 80074b4:	2a02      	cmp	r2, #2
 80074b6:	d00f      	beq.n	80074d8 <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 80074b8:	2303      	movs	r3, #3
 80074ba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 80074be:	68aa      	ldr	r2, [r5, #8]
 80074c0:	4913      	ldr	r1, [pc, #76]	; (8007510 <R3_2_RLSwitchOnPWM+0xac>)
 80074c2:	400a      	ands	r2, r1
 80074c4:	f042 0208 	orr.w	r2, r2, #8
 80074c8:	60aa      	str	r2, [r5, #8]
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	400b      	ands	r3, r1
 80074ce:	f043 0308 	orr.w	r3, r3, #8
 80074d2:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 80074d4:	bcf0      	pop	{r4, r5, r6, r7}
 80074d6:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80074d8:	6a1a      	ldr	r2, [r3, #32]
 80074da:	f240 5355 	movw	r3, #1365	; 0x555
 80074de:	421a      	tst	r2, r3
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80074e0:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80074e4:	f8b1 20ac 	ldrh.w	r2, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80074e8:	d008      	beq.n	80074fc <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80074ea:	619a      	str	r2, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80074ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80074ee:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80074f2:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80074f6:	61b7      	str	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80074f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80074fa:	e7dd      	b.n	80074b8 <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80074fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007500:	f8b1 70ae 	ldrh.w	r7, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007504:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8007508:	62b7      	str	r7, [r6, #40]	; 0x28
 800750a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800750c:	e7d4      	b.n	80074b8 <R3_2_RLSwitchOnPWM+0x54>
 800750e:	bf00      	nop
 8007510:	7fffffc0 	.word	0x7fffffc0

08007514 <R3_2_SetAOReferenceVoltage>:
{
 8007514:	b430      	push	{r4, r5}
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 8007516:	0c84      	lsrs	r4, r0, #18
 8007518:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 800751c:	f101 0508 	add.w	r5, r1, #8
 8007520:	b082      	sub	sp, #8

  MODIFY_REG(*preg,
 8007522:	5963      	ldr	r3, [r4, r5]
 8007524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800752c:	431a      	orrs	r2, r3
 800752e:	5162      	str	r2, [r4, r5]
  SET_BIT(DACx->SWTRIGR,
 8007530:	684a      	ldr	r2, [r1, #4]
 8007532:	f000 0303 	and.w	r3, r0, #3
 8007536:	4313      	orrs	r3, r2
 8007538:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800753a:	680a      	ldr	r2, [r1, #0]
 800753c:	2301      	movs	r3, #1
 800753e:	f000 0010 	and.w	r0, r0, #16
 8007542:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007546:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800754a:	4b15      	ldr	r3, [pc, #84]	; (80075a0 <R3_2_SetAOReferenceVoltage+0x8c>)
 800754c:	d014      	beq.n	8007578 <R3_2_SetAOReferenceVoltage+0x64>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4c14      	ldr	r4, [pc, #80]	; (80075a4 <R3_2_SetAOReferenceVoltage+0x90>)
  SET_BIT(DACx->CR,
 8007552:	680a      	ldr	r2, [r1, #0]
 8007554:	fba4 4303 	umull	r4, r3, r4, r3
 8007558:	0cdb      	lsrs	r3, r3, #19
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4310      	orrs	r0, r2
 800755e:	6008      	str	r0, [r1, #0]
 8007560:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007562:	9b00      	ldr	r3, [sp, #0]
 8007564:	b12b      	cbz	r3, 8007572 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	3b01      	subs	r3, #1
 800756a:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 800756c:	9b00      	ldr	r3, [sp, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f9      	bne.n	8007566 <R3_2_SetAOReferenceVoltage+0x52>
}
 8007572:	b002      	add	sp, #8
 8007574:	bc30      	pop	{r4, r5}
 8007576:	4770      	bx	lr
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007578:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <R3_2_SetAOReferenceVoltage+0x90>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	fba2 2303 	umull	r2, r3, r2, r3
 8007580:	0cdb      	lsrs	r3, r3, #19
 8007582:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007586:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007588:	9b01      	ldr	r3, [sp, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0f1      	beq.n	8007572 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	3b01      	subs	r3, #1
 8007592:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007594:	9b01      	ldr	r3, [sp, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1f9      	bne.n	800758e <R3_2_SetAOReferenceVoltage+0x7a>
}
 800759a:	b002      	add	sp, #8
 800759c:	bc30      	pop	{r4, r5}
 800759e:	4770      	bx	lr
 80075a0:	20000718 	.word	0x20000718
 80075a4:	431bde83 	.word	0x431bde83

080075a8 <R3_2_Init>:
{
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	4607      	mov	r7, r0
 80075ae:	b087      	sub	sp, #28
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80075b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    if ( TIMx == TIM1 )
 80075b2:	f8df e284 	ldr.w	lr, [pc, #644]	; 8007838 <R3_2_Init+0x290>
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 80075b6:	681d      	ldr	r5, [r3, #0]
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 80075b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80075ba:	686a      	ldr	r2, [r5, #4]
 80075bc:	9100      	str	r1, [sp, #0]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80075be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075c0:	9101      	str	r1, [sp, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80075c2:	2004      	movs	r0, #4
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80075c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80075c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80075ca:	9102      	str	r1, [sp, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80075cc:	f022 0204 	bic.w	r2, r2, #4
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80075d0:	e9d3 6401 	ldrd	r6, r4, [r3, #4]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80075d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80075d6:	9103      	str	r1, [sp, #12]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80075d8:	e9d3 ba04 	ldrd	fp, sl, [r3, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80075dc:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 80075e0:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80075e2:	6028      	str	r0, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80075e4:	686a      	ldr	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80075e6:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80075e8:	f022 0220 	bic.w	r2, r2, #32
 80075ec:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80075ee:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80075f0:	6872      	ldr	r2, [r6, #4]
 80075f2:	f022 0204 	bic.w	r2, r2, #4
 80075f6:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80075f8:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80075fa:	6872      	ldr	r2, [r6, #4]
 80075fc:	f022 0220 	bic.w	r2, r2, #32
 8007600:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007602:	6031      	str	r1, [r6, #0]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007604:	498b      	ldr	r1, [pc, #556]	; (8007834 <R3_2_Init+0x28c>)
 8007606:	690a      	ldr	r2, [r1, #16]
    if ( TIMx == TIM1 )
 8007608:	4574      	cmp	r4, lr
 800760a:	bf0c      	ite	eq
 800760c:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8007610:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8007614:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 8007616:	f1bc 0f00 	cmp.w	ip, #0
 800761a:	d014      	beq.n	8007646 <R3_2_Init+0x9e>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 800761c:	f8dc 2000 	ldr.w	r2, [ip]
 8007620:	b11a      	cbz	r2, 800762a <R3_2_Init+0x82>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8007622:	6811      	ldr	r1, [r2, #0]
 8007624:	f041 0101 	orr.w	r1, r1, #1
 8007628:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800762a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800762e:	b11a      	cbz	r2, 8007638 <R3_2_Init+0x90>
 8007630:	6811      	ldr	r1, [r2, #0]
 8007632:	f041 0101 	orr.w	r1, r1, #1
 8007636:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8007638:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800763c:	b11a      	cbz	r2, 8007646 <R3_2_Init+0x9e>
 800763e:	6811      	ldr	r1, [r2, #0]
 8007640:	f041 0101 	orr.w	r1, r1, #1
 8007644:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8007646:	f1bb 0f00 	cmp.w	fp, #0
 800764a:	d017      	beq.n	800767c <R3_2_Init+0xd4>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 800764c:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 8007650:	2a01      	cmp	r2, #1
 8007652:	d007      	beq.n	8007664 <R3_2_Init+0xbc>
 8007654:	9a00      	ldr	r2, [sp, #0]
 8007656:	b12a      	cbz	r2, 8007664 <R3_2_Init+0xbc>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007658:	4611      	mov	r1, r2
 800765a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800765c:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007660:	f7ff ff58 	bl	8007514 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007664:	f8db 3000 	ldr.w	r3, [fp]
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007670:	f8db 3000 	ldr.w	r3, [fp]
 8007674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007678:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 800767c:	f1ba 0f00 	cmp.w	sl, #0
 8007680:	d018      	beq.n	80076b4 <R3_2_Init+0x10c>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8007682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007684:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8007688:	2a01      	cmp	r2, #1
 800768a:	d007      	beq.n	800769c <R3_2_Init+0xf4>
 800768c:	9a01      	ldr	r2, [sp, #4]
 800768e:	b12a      	cbz	r2, 800769c <R3_2_Init+0xf4>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007690:	4611      	mov	r1, r2
 8007692:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007694:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 8007698:	f7ff ff3c 	bl	8007514 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800769c:	f8da 3000 	ldr.w	r3, [sl]
 80076a0:	f043 0301 	orr.w	r3, r3, #1
 80076a4:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80076a8:	f8da 3000 	ldr.w	r3, [sl]
 80076ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076b0:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 80076b4:	f1b9 0f00 	cmp.w	r9, #0
 80076b8:	d018      	beq.n	80076ec <R3_2_Init+0x144>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 80076ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076bc:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 80076c0:	2a01      	cmp	r2, #1
 80076c2:	d007      	beq.n	80076d4 <R3_2_Init+0x12c>
 80076c4:	9a02      	ldr	r2, [sp, #8]
 80076c6:	b12a      	cbz	r2, 80076d4 <R3_2_Init+0x12c>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80076c8:	4611      	mov	r1, r2
 80076ca:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80076cc:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 80076d0:	f7ff ff20 	bl	8007514 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80076d4:	f8d9 3000 	ldr.w	r3, [r9]
 80076d8:	f043 0301 	orr.w	r3, r3, #1
 80076dc:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80076e0:	f8d9 3000 	ldr.w	r3, [r9]
 80076e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076e8:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 80076ec:	f1b8 0f00 	cmp.w	r8, #0
 80076f0:	d018      	beq.n	8007724 <R3_2_Init+0x17c>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 80076f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f4:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 80076f8:	2a01      	cmp	r2, #1
 80076fa:	d007      	beq.n	800770c <R3_2_Init+0x164>
 80076fc:	9a03      	ldr	r2, [sp, #12]
 80076fe:	b12a      	cbz	r2, 800770c <R3_2_Init+0x164>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 8007700:	4611      	mov	r1, r2
 8007702:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007704:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 8007708:	f7ff ff04 	bl	8007514 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800770c:	f8d8 3000 	ldr.w	r3, [r8]
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007718:	f8d8 3000 	ldr.w	r3, [r8]
 800771c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007720:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007724:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 8007726:	07d8      	lsls	r0, r3, #31
 8007728:	d56c      	bpl.n	8007804 <R3_2_Init+0x25c>
 800772a:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800772c:	07d9      	lsls	r1, r3, #31
 800772e:	d575      	bpl.n	800781c <R3_2_Init+0x274>
  volatile uint32_t Brk2Timeout = 1000;
 8007730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007734:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007736:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8007738:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007740:	6863      	ldr	r3, [r4, #4]
 8007742:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800774a:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800774c:	69a3      	ldr	r3, [r4, #24]
 800774e:	f043 0308 	orr.w	r3, r3, #8
 8007752:	61a3      	str	r3, [r4, #24]
 8007754:	69a3      	ldr	r3, [r4, #24]
 8007756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800775a:	61a3      	str	r3, [r4, #24]
 800775c:	69e3      	ldr	r3, [r4, #28]
 800775e:	f043 0308 	orr.w	r3, r3, #8
 8007762:	61e3      	str	r3, [r4, #28]
 8007764:	69e3      	ldr	r3, [r4, #28]
 8007766:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800776a:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800776c:	6963      	ldr	r3, [r4, #20]
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	6163      	str	r3, [r4, #20]
 8007774:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8007778:	2b02      	cmp	r3, #2
 800777a:	d029      	beq.n	80077d0 <R3_2_Init+0x228>
    if ( pHandle->_Super.Motor == M1 )
 800777c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007780:	b92b      	cbnz	r3, 800778e <R3_2_Init+0x1e6>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8007782:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 8007786:	2b01      	cmp	r3, #1
 8007788:	d030      	beq.n	80077ec <R3_2_Init+0x244>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800778a:	2b03      	cmp	r3, #3
 800778c:	d04a      	beq.n	8007824 <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800778e:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007792:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8007794:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 8007798:	b16b      	cbz	r3, 80077b6 <R3_2_Init+0x20e>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800779a:	6923      	ldr	r3, [r4, #16]
 800779c:	05da      	lsls	r2, r3, #23
 800779e:	d50a      	bpl.n	80077b6 <R3_2_Init+0x20e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80077a0:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 80077a4:	9b05      	ldr	r3, [sp, #20]
 80077a6:	b133      	cbz	r3, 80077b6 <R3_2_Init+0x20e>
 80077a8:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	05db      	lsls	r3, r3, #23
 80077b4:	d4f6      	bmi.n	80077a4 <R3_2_Init+0x1fc>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077bc:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80077be:	6a23      	ldr	r3, [r4, #32]
 80077c0:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80077c4:	f043 0305 	orr.w	r3, r3, #5
 80077c8:	6223      	str	r3, [r4, #32]
}
 80077ca:	b007      	add	sp, #28
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80077d0:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d109      	bne.n	80077ec <R3_2_Init+0x244>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80077d8:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 80077dc:	2903      	cmp	r1, #3
 80077de:	d105      	bne.n	80077ec <R3_2_Init+0x244>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077e0:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80077e2:	6963      	ldr	r3, [r4, #20]
 80077e4:	f043 0301 	orr.w	r3, r3, #1
 80077e8:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80077ea:	6321      	str	r1, [r4, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80077ec:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80077f0:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80077f2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80077f4:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80077f8:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80077fa:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1cb      	bne.n	800779a <R3_2_Init+0x1f2>
 8007802:	e7d8      	b.n	80077b6 <R3_2_Init+0x20e>
      R3_2_ADCxInit (ADCx_1);
 8007804:	4628      	mov	r0, r5
 8007806:	f7ff fb8b 	bl	8006f20 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800780a:	2340      	movs	r3, #64	; 0x40
 800780c:	602b      	str	r3, [r5, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800780e:	686b      	ldr	r3, [r5, #4]
 8007810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007814:	606b      	str	r3, [r5, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007816:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 8007818:	07d9      	lsls	r1, r3, #31
 800781a:	d489      	bmi.n	8007730 <R3_2_Init+0x188>
      R3_2_ADCxInit (ADCx_2);
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff fb7f 	bl	8006f20 <R3_2_ADCxInit>
 8007822:	e785      	b.n	8007730 <R3_2_Init+0x188>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007824:	2101      	movs	r1, #1
 8007826:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007828:	6961      	ldr	r1, [r4, #20]
 800782a:	f041 0101 	orr.w	r1, r1, #1
 800782e:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007830:	6323      	str	r3, [r4, #48]	; 0x30
}
 8007832:	e7ac      	b.n	800778e <R3_2_Init+0x1e6>
 8007834:	e0042000 	.word	0xe0042000
 8007838:	40012c00 	.word	0x40012c00

0800783c <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800783c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800783e:	4946      	ldr	r1, [pc, #280]	; (8007958 <R3_2_CurrentReadingPolarization+0x11c>)
{
 8007840:	b5f0      	push	{r4, r5, r6, r7, lr}
  pHandle->PhaseAOffset = 0u;
 8007842:	2200      	movs	r2, #0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007844:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007846:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PolarizationCounter = 0u;
 800784a:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
  CLEAR_BIT(TIMx->CCER, Channels);
 800784e:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 8007850:	65c2      	str	r2, [r0, #92]	; 0x5c
 8007852:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8007856:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 800785a:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 800785e:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8007860:	4b3e      	ldr	r3, [pc, #248]	; (800795c <R3_2_CurrentReadingPolarization+0x120>)
 8007862:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007864:	2280      	movs	r2, #128	; 0x80
  pHandle->PolarizationSector=SECTOR_5;
 8007866:	2304      	movs	r3, #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007868:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
{
 800786c:	b083      	sub	sp, #12
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800786e:	6041      	str	r1, [r0, #4]
  pHandle->PolarizationSector=SECTOR_5;
 8007870:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8007874:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 8007878:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800787a:	f7ff fd29 	bl	80072d0 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800787e:	4a38      	ldr	r2, [pc, #224]	; (8007960 <R3_2_CurrentReadingPolarization+0x124>)
 8007880:	686b      	ldr	r3, [r5, #4]
 8007882:	4013      	ands	r3, r2
 8007884:	2b70      	cmp	r3, #112	; 0x70
 8007886:	d1fb      	bne.n	8007880 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	4936      	ldr	r1, [pc, #216]	; (8007964 <R3_2_CurrentReadingPolarization+0x128>)
  waitForPolarizationEnd( TIMx,
 800788c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800788e:	400a      	ands	r2, r1
 8007890:	f042 0208 	orr.w	r2, r2, #8
 8007894:	60ba      	str	r2, [r7, #8]
 8007896:	68b3      	ldr	r3, [r6, #8]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007898:	4f33      	ldr	r7, [pc, #204]	; (8007968 <R3_2_CurrentReadingPolarization+0x12c>)
 800789a:	400b      	ands	r3, r1
 800789c:	f043 0308 	orr.w	r3, r3, #8
 80078a0:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 80078a2:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80078a6:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80078aa:	f890 20bb 	ldrb.w	r2, [r0, #187]	; 0xbb
 80078ae:	4628      	mov	r0, r5
 80078b0:	e9cd 3100 	strd	r3, r1, [sp]
 80078b4:	f7ff f9ba 	bl	8006c2c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80078b8:	4620      	mov	r0, r4
 80078ba:	f7ff fd53 	bl	8007364 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 80078be:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80078c0:	4a2a      	ldr	r2, [pc, #168]	; (800796c <R3_2_CurrentReadingPolarization+0x130>)
 80078c2:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80078c4:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 80078c6:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 80078ca:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 80078ce:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80078d2:	f7ff fcfd 	bl	80072d0 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80078d6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80078d8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80078dc:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 80078e0:	4628      	mov	r0, r5
 80078e2:	f7ff f9a3 	bl	8006c2c <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7ff fd3c 	bl	8007364 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80078ec:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80078f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 80078f2:	481f      	ldr	r0, [pc, #124]	; (8007970 <R3_2_CurrentReadingPolarization+0x134>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80078f4:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80078f6:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80078f8:	0912      	lsrs	r2, r2, #4
 80078fa:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80078fe:	091b      	lsrs	r3, r3, #4
 8007900:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007902:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8007904:	61a0      	str	r0, [r4, #24]
 8007906:	f023 0308 	bic.w	r3, r3, #8
 800790a:	61ab      	str	r3, [r5, #24]
 800790c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800790e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8007912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007916:	61aa      	str	r2, [r5, #24]
 8007918:	69ea      	ldr	r2, [r5, #28]
 800791a:	f022 0208 	bic.w	r2, r2, #8
 800791e:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007920:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007922:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007924:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007926:	69ab      	ldr	r3, [r5, #24]
 8007928:	f043 0308 	orr.w	r3, r3, #8
 800792c:	61ab      	str	r3, [r5, #24]
 800792e:	69ab      	ldr	r3, [r5, #24]
 8007930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007934:	61ab      	str	r3, [r5, #24]
 8007936:	69eb      	ldr	r3, [r5, #28]
 8007938:	f043 0308 	orr.w	r3, r3, #8
 800793c:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800793e:	6a2b      	ldr	r3, [r5, #32]
 8007940:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007944:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 8007948:	2204      	movs	r2, #4
 800794a:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 800794c:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
  pHandle->_Super.Sector=SECTOR_5;
 8007950:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
}
 8007954:	b003      	add	sp, #12
 8007956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007958:	080071f1 	.word	0x080071f1
 800795c:	08007141 	.word	0x08007141
 8007960:	02000070 	.word	0x02000070
 8007964:	7fffffc0 	.word	0x7fffffc0
 8007968:	08006fd5 	.word	0x08006fd5
 800796c:	0800723d 	.word	0x0800723d
 8007970:	0800717d 	.word	0x0800717d

08007974 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007974:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797a:	4604      	mov	r4, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800797c:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007980:	e9d2 1800 	ldrd	r1, r8, [r2]
  if ( OPAMPParams != NULL )
 8007984:	2800      	cmp	r0, #0
 8007986:	d033      	beq.n	80079f0 <R3_2_TIMx_UP_IRQHandler+0x7c>
    while (ADCx_1->JSQR != 0x0u)
 8007988:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1fc      	bne.n	8007988 <R3_2_TIMx_UP_IRQHandler+0x14>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800798e:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 8007992:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8007996:	68df      	ldr	r7, [r3, #12]
    if (Opamp != NULL )
 8007998:	b12f      	cbz	r7, 80079a6 <R3_2_TIMx_UP_IRQHandler+0x32>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800799a:	6838      	ldr	r0, [r7, #0]
 800799c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800799e:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 80079a2:	4330      	orrs	r0, r6
 80079a4:	6038      	str	r0, [r7, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 80079a6:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    if (Opamp != NULL )
 80079a8:	b13f      	cbz	r7, 80079ba <R3_2_TIMx_UP_IRQHandler+0x46>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 80079aa:	6838      	ldr	r0, [r7, #0]
 80079ac:	f8d3 e054 	ldr.w	lr, [r3, #84]	; 0x54
 80079b0:	f420 7386 	bic.w	r3, r0, #268	; 0x10c
 80079b4:	ea43 030e 	orr.w	r3, r3, lr
 80079b8:	603b      	str	r3, [r7, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079ba:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 80079be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80079c2:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079c4:	f8d2 7094 	ldr.w	r7, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079c8:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079ca:	433b      	orrs	r3, r7
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079cc:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80079ce:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80079d2:	686b      	ldr	r3, [r5, #4]
 80079d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80079d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079dc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80079e0:	2280      	movs	r2, #128	; 0x80
 80079e2:	606b      	str	r3, [r5, #4]
}
 80079e4:	f104 0046 	add.w	r0, r4, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80079e8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
}
 80079ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f0:	f894 c03a 	ldrb.w	ip, [r4, #58]	; 0x3a
 80079f4:	e7e1      	b.n	80079ba <R3_2_TIMx_UP_IRQHandler+0x46>
 80079f6:	bf00      	nop

080079f8 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80079f8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80079fc:	b923      	cbnz	r3, 8007a08 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80079fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007a00:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8007a04:	2a02      	cmp	r2, #2
 8007a06:	d004      	beq.n	8007a12 <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007a0e:	3046      	adds	r0, #70	; 0x46
 8007a10:	4770      	bx	lr
{
 8007a12:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a14:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007a18:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8007a1e:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007a20:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007a24:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8007a28:	628c      	str	r4, [r1, #40]	; 0x28
 8007a2a:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007a32:	bc30      	pop	{r4, r5}
 8007a34:	3046      	adds	r0, #70	; 0x46
 8007a36:	4770      	bx	lr

08007a38 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007a38:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007a3a:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007a3c:	6890      	ldr	r0, [r2, #8]
 8007a3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8007a40:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a46:	6442      	str	r2, [r0, #68]	; 0x44
}
 8007a48:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8007a4c:	f883 106f 	strb.w	r1, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 8007a50:	f883 1070 	strb.w	r1, [r3, #112]	; 0x70
}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop

08007a58 <R3_2_IsOverCurrentOccurred>:
{
 8007a58:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8007a5a:	f890 006f 	ldrb.w	r0, [r0, #111]	; 0x6f
 8007a5e:	b160      	cbz	r0, 8007a7a <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
 8007a66:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8007a68:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 8007a6a:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 8007a6e:	b11a      	cbz	r2, 8007a78 <R3_2_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8007a70:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8007a72:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8007a74:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
}
 8007a78:	4770      	bx	lr
 8007a7a:	2140      	movs	r1, #64	; 0x40
 8007a7c:	e7f5      	b.n	8007a6a <R3_2_IsOverCurrentOccurred+0x12>
 8007a7e:	bf00      	nop

08007a80 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8007a80:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8007a84:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8007a86:	2900      	cmp	r1, #0
 8007a88:	d13c      	bne.n	8007b04 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a8a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007a8c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007a8e:	699a      	ldr	r2, [r3, #24]
 8007a90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a94:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007a98:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007a9c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007a9e:	6a1a      	ldr	r2, [r3, #32]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007aa6:	6a1a      	ldr	r2, [r3, #32]
 8007aa8:	f022 0204 	bic.w	r2, r2, #4
 8007aac:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007aae:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007ab0:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007ab4:	2a01      	cmp	r2, #1
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007ab6:	f103 0118 	add.w	r1, r3, #24
 8007aba:	d031      	beq.n	8007b20 <R3_2_RLDetectionModeEnable+0xa0>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007abc:	2a02      	cmp	r2, #2
 8007abe:	d10f      	bne.n	8007ae0 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007ac6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ace:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	f042 0210 	orr.w	r2, r2, #16
 8007ad6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007ad8:	6a1a      	ldr	r2, [r3, #32]
 8007ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ade:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ae0:	684a      	ldr	r2, [r1, #4]
 8007ae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ae6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007aea:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007aee:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007af0:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007af2:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8007af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007af8:	621a      	str	r2, [r3, #32]
 8007afa:	6a1a      	ldr	r2, [r3, #32]
 8007afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b00:	621a      	str	r2, [r3, #32]
 8007b02:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007b04:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8007b06:	4910      	ldr	r1, [pc, #64]	; (8007b48 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007b08:	4a10      	ldr	r2, [pc, #64]	; (8007b4c <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007b0a:	4c11      	ldr	r4, [pc, #68]	; (8007b50 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007b0c:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8007b0e:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007b10:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007b12:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007b16:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8007b1a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007b1e:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007b26:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007b2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b2e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	f022 0210 	bic.w	r2, r2, #16
 8007b36:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007b38:	6a1a      	ldr	r2, [r3, #32]
 8007b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b3e:	621a      	str	r2, [r3, #32]
}
 8007b40:	e7ce      	b.n	8007ae0 <R3_2_RLDetectionModeEnable+0x60>
 8007b42:	bf00      	nop
 8007b44:	080073c5 	.word	0x080073c5
 8007b48:	08007465 	.word	0x08007465
 8007b4c:	08007365 	.word	0x08007365
 8007b50:	08007419 	.word	0x08007419

08007b54 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8007b54:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d059      	beq.n	8007c10 <R3_2_RLDetectionModeDisable+0xbc>
{
 8007b5c:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b5e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8007b60:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b68:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007b6c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007b70:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	f042 0201 	orr.w	r2, r2, #1
 8007b78:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007b7a:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007b7e:	2a01      	cmp	r2, #1
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007b80:	f103 0518 	add.w	r5, r3, #24
 8007b84:	d045      	beq.n	8007c12 <R3_2_RLDetectionModeDisable+0xbe>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007b86:	2a02      	cmp	r2, #2
 8007b88:	d103      	bne.n	8007b92 <R3_2_RLDetectionModeDisable+0x3e>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b8a:	6a1a      	ldr	r2, [r3, #32]
 8007b8c:	f022 0204 	bic.w	r2, r2, #4
 8007b90:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007b92:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8007b96:	0849      	lsrs	r1, r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b98:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b9a:	699a      	ldr	r2, [r3, #24]
 8007b9c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007ba0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007ba4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8007ba8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007baa:	6a1a      	ldr	r2, [r3, #32]
 8007bac:	f042 0210 	orr.w	r2, r2, #16
 8007bb0:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007bb2:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007bb6:	2a01      	cmp	r2, #1
 8007bb8:	d035      	beq.n	8007c26 <R3_2_RLDetectionModeDisable+0xd2>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007bba:	2a02      	cmp	r2, #2
 8007bbc:	d103      	bne.n	8007bc6 <R3_2_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bbe:	6a1a      	ldr	r2, [r3, #32]
 8007bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc4:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007bc6:	6399      	str	r1, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007bc8:	686a      	ldr	r2, [r5, #4]
 8007bca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007bce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007bd2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007bd6:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 8007bd8:	6a1a      	ldr	r2, [r3, #32]
 8007bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bde:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007be0:	f894 20ba 	ldrb.w	r2, [r4, #186]	; 0xba
 8007be4:	2a01      	cmp	r2, #1
 8007be6:	d019      	beq.n	8007c1c <R3_2_RLDetectionModeDisable+0xc8>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007be8:	2a02      	cmp	r2, #2
 8007bea:	d103      	bne.n	8007bf4 <R3_2_RLDetectionModeDisable+0xa0>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bf2:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007bf4:	4c0e      	ldr	r4, [pc, #56]	; (8007c30 <R3_2_RLDetectionModeDisable+0xdc>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007bf6:	4a0f      	ldr	r2, [pc, #60]	; (8007c34 <R3_2_RLDetectionModeDisable+0xe0>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007bf8:	63d9      	str	r1, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007bfa:	4e0f      	ldr	r6, [pc, #60]	; (8007c38 <R3_2_RLDetectionModeDisable+0xe4>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007bfc:	4d0f      	ldr	r5, [pc, #60]	; (8007c3c <R3_2_RLDetectionModeDisable+0xe8>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007bfe:	6046      	str	r6, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8007c00:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007c02:	e9c0 2402 	strd	r2, r4, [r0, #8]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007c06:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8007c08:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007c0c:	bc70      	pop	{r4, r5, r6}
 8007c0e:	4770      	bx	lr
 8007c10:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007c12:	6a1a      	ldr	r2, [r3, #32]
 8007c14:	f042 0204 	orr.w	r2, r2, #4
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	e7ba      	b.n	8007b92 <R3_2_RLDetectionModeDisable+0x3e>
  SET_BIT(TIMx->CCER, Channels);
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c22:	621a      	str	r2, [r3, #32]
}
 8007c24:	e7e6      	b.n	8007bf4 <R3_2_RLDetectionModeDisable+0xa0>
  SET_BIT(TIMx->CCER, Channels);
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	e7ca      	b.n	8007bc6 <R3_2_RLDetectionModeDisable+0x72>
 8007c30:	080072d1 	.word	0x080072d1
 8007c34:	08007365 	.word	0x08007365
 8007c38:	08006fd5 	.word	0x08006fd5
 8007c3c:	08007281 	.word	0x08007281

08007c40 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007c40:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007c42:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c44:	69da      	ldr	r2, [r3, #28]
{
 8007c46:	b470      	push	{r4, r5, r6}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c48:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007c4c:	f8b0 6056 	ldrh.w	r6, [r0, #86]	; 0x56
 8007c50:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c54:	fb01 f104 	mul.w	r1, r1, r4
  pHandle->ADCRegularLocked=true;
 8007c58:	2501      	movs	r5, #1
 8007c5a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007c5e:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007c62:	0c09      	lsrs	r1, r1, #16
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8007c64:	f8b0 5058 	ldrh.w	r5, [r0, #88]	; 0x58
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007c68:	8641      	strh	r1, [r0, #50]	; 0x32
 8007c6a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007c6e:	1ba4      	subs	r4, r4, r6
 8007c70:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007c72:	641c      	str	r4, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c74:	63dd      	str	r5, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c76:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007c78:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c7a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8007c7c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007c80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007c84:	f042 0270 	orr.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8007c88:	2403      	movs	r4, #3
 8007c8a:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c8c:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 8007c8e:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007c92:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007c94:	d007      	beq.n	8007ca6 <R3_2_RLDetectionModeSetDuty+0x66>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007c96:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <R3_2_RLDetectionModeSetDuty+0x70>)
 8007c98:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8007c9a:	bf14      	ite	ne
 8007c9c:	2101      	movne	r1, #1
 8007c9e:	2100      	moveq	r1, #0
}
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	bc70      	pop	{r4, r5, r6}
 8007ca4:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	8703      	strh	r3, [r0, #56]	; 0x38
}
 8007caa:	bc70      	pop	{r4, r5, r6}
 8007cac:	4608      	mov	r0, r1
 8007cae:	4770      	bx	lr
 8007cb0:	02000070 	.word	0x02000070

08007cb4 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 8007cb4:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007cb6:	8b82      	ldrh	r2, [r0, #28]
 8007cb8:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007cba:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007cbc:	4414      	add	r4, r2
 8007cbe:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007cc0:	b14b      	cbz	r3, 8007cd6 <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 8007cc2:	6a05      	ldr	r5, [r0, #32]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	3301      	adds	r3, #1
 8007cca:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007cce:	8b01      	ldrh	r1, [r0, #24]
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	d8f7      	bhi.n	8007cc6 <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f364 030f 	bfi	r3, r4, #0, #16
 8007cdc:	f364 431f 	bfi	r3, r4, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8007ce0:	2200      	movs	r2, #0
}
 8007ce2:	bc30      	pop	{r4, r5}
  pHandle->_Super.LatestConv = aux;
 8007ce4:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8007ce6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8007cea:	4770      	bx	lr

08007cec <RVBS_Init>:
{
 8007cec:	b510      	push	{r4, lr}
 8007cee:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8007cf0:	300c      	adds	r0, #12
 8007cf2:	f7fa fa83 	bl	80021fc <RCM_RegisterRegConv>
 8007cf6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7ff ffda 	bl	8007cb4 <RVBS_Clear>
}
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	bf00      	nop

08007d04 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007d04:	88c3      	ldrh	r3, [r0, #6]
 8007d06:	8b42      	ldrh	r2, [r0, #26]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d305      	bcc.n	8007d18 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007d0c:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8007d0e:	4298      	cmp	r0, r3
 8007d10:	bf8c      	ite	hi
 8007d12:	2004      	movhi	r0, #4
 8007d14:	2000      	movls	r0, #0
 8007d16:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007d18:	2002      	movs	r0, #2
  }
  return fault;
}
 8007d1a:	4770      	bx	lr

08007d1c <RVBS_CalcAvVbus>:
{
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007d20:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007d24:	f7fa fb3e 	bl	80023a4 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d2c:	4298      	cmp	r0, r3
 8007d2e:	d01c      	beq.n	8007d6a <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007d30:	6a2f      	ldr	r7, [r5, #32]
 8007d32:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8007d36:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d3a:	8b2e      	ldrh	r6, [r5, #24]
 8007d3c:	b1d6      	cbz	r6, 8007d74 <RVBS_CalcAvVbus+0x58>
 8007d3e:	2300      	movs	r3, #0
    wtemp = 0;
 8007d40:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007d42:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d46:	3301      	adds	r3, #1
 8007d48:	b2d9      	uxtb	r1, r3
 8007d4a:	42b1      	cmp	r1, r6
      wtemp += pHandle->aBuffer[i];
 8007d4c:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007d4e:	460b      	mov	r3, r1
 8007d50:	d3f7      	bcc.n	8007d42 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007d52:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d56:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007d5a:	80ea      	strh	r2, [r5, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d5c:	3e01      	subs	r6, #1
 8007d5e:	42b3      	cmp	r3, r6
    pHandle->_Super.LatestConv = hAux;
 8007d60:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007d62:	da09      	bge.n	8007d78 <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8007d64:	3301      	adds	r3, #1
 8007d66:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	f7ff ffca 	bl	8007d04 <RVBS_CheckFaultState>
 8007d70:	8128      	strh	r0, [r5, #8]
}
 8007d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007d74:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8007d76:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f7ff ffc0 	bl	8007d04 <RVBS_CheckFaultState>
 8007d84:	8128      	strh	r0, [r5, #8]
}
 8007d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d88 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007d88:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007d8a:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007d8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007d94:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007d96:	4770      	bx	lr

08007d98 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 8007d98:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007d9c:	2901      	cmp	r1, #1
 8007d9e:	d90c      	bls.n	8007dba <REMNG_Calc+0x22>
{
 8007da0:	b410      	push	{r4}
 8007da2:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 8007da6:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 8007da8:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 8007daa:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 8007dac:	6083      	str	r3, [r0, #8]
 8007dae:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 8007db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007db6:	4610      	mov	r0, r2
 8007db8:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 8007dba:	d005      	beq.n	8007dc8 <REMNG_Calc+0x30>
 8007dbc:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 8007dbe:	6083      	str	r3, [r0, #8]
 8007dc0:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007dc8:	6842      	ldr	r2, [r0, #4]
 8007dca:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 8007dcc:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007dce:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 8007dd2:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 8007dd4:	6083      	str	r3, [r0, #8]
}
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop

08007ddc <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 8007ddc:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 8007dde:	fab0 f080 	clz	r0, r0
 8007de2:	0940      	lsrs	r0, r0, #5
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop

08007de8 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 8007de8:	2800      	cmp	r0, #0
 8007dea:	bfb8      	it	lt
 8007dec:	4240      	neglt	r0, r0
{
 8007dee:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007df0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007df4:	e002      	b.n	8007dfc <getScalingFactor+0x14>
 8007df6:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d007      	beq.n	8007e0c <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8007dfc:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8007e00:	4290      	cmp	r0, r2
 8007e02:	d3f8      	bcc.n	8007df6 <getScalingFactor+0xe>
 8007e04:	3b01      	subs	r3, #1
 8007e06:	2001      	movs	r0, #1
 8007e08:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8007e0a:	4770      	bx	lr
 8007e0c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop

08007e14 <REMNG_ExecRamp>:
{
 8007e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e18:	4604      	mov	r4, r0
 8007e1a:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8007e1c:	4690      	mov	r8, r2
 8007e1e:	b95a      	cbnz	r2, 8007e38 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007e20:	4608      	mov	r0, r1
 8007e22:	f7ff ffe1 	bl	8007de8 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007e26:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8007e2a:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 8007e2c:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8007e30:	60a5      	str	r5, [r4, #8]
}
 8007e32:	2001      	movs	r0, #1
 8007e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8007e38:	6943      	ldr	r3, [r0, #20]
 8007e3a:	6887      	ldr	r7, [r0, #8]
 8007e3c:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8007e40:	1bce      	subs	r6, r1, r7
 8007e42:	4630      	mov	r0, r6
 8007e44:	f7ff ffd0 	bl	8007de8 <getScalingFactor>
 8007e48:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	f7ff ffcc 	bl	8007de8 <getScalingFactor>
 8007e50:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007e52:	4628      	mov	r0, r5
 8007e54:	f7ff ffc8 	bl	8007de8 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8007e58:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8007e5a:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007e5c:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 8007e5e:	6065      	str	r5, [r4, #4]
 8007e60:	bf2c      	ite	cs
 8007e62:	4648      	movcs	r0, r9
 8007e64:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8007e66:	4298      	cmp	r0, r3
 8007e68:	bf28      	it	cs
 8007e6a:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8007e6c:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 8007e70:	4908      	ldr	r1, [pc, #32]	; (8007e94 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8007e72:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 8007e74:	fba1 2303 	umull	r2, r3, r1, r3
 8007e78:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007e7a:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 8007e7e:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8007e80:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8007e84:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8007e86:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 8007e8a:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8007e8e:	2001      	movs	r0, #1
 8007e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e94:	10624dd3 	.word	0x10624dd3

08007e98 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8007e98:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop

08007ea0 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8007ea0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop

08007ea8 <SPD_GetElSpeedDpp>:
  * @retval int16_t rotor electrical speed (Dpp)
  */
__weak int16_t SPD_GetElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElSpeedDpp );
}
 8007ea8:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8007eb0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop

08007eb8 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8007eb8:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007ebc:	8a81      	ldrh	r1, [r0, #20]
{
 8007ebe:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8007ec0:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8007ec2:	bfb8      	it	lt
 8007ec4:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007ec6:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007ec8:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007eca:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8007ecc:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007ece:	429d      	cmp	r5, r3
 8007ed0:	d817      	bhi.n	8007f02 <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	bf2c      	ite	cs
 8007ed6:	2300      	movcs	r3, #0
 8007ed8:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8007eda:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007ede:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8007ee0:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8007ee2:	bfb8      	it	lt
 8007ee4:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8007ee6:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007ee8:	428d      	cmp	r5, r1
 8007eea:	d300      	bcc.n	8007eee <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8007eec:	b15b      	cbz	r3, 8007f06 <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8007eee:	4294      	cmp	r4, r2
 8007ef0:	d901      	bls.n	8007ef6 <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007ef6:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8007ef8:	1b10      	subs	r0, r2, r4
 8007efa:	bf18      	it	ne
 8007efc:	2001      	movne	r0, #1
 8007efe:	bc30      	pop	{r4, r5}
 8007f00:	4770      	bx	lr
    SpeedError = true;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e7e9      	b.n	8007eda <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8007f06:	4294      	cmp	r4, r2
 8007f08:	bf88      	it	hi
 8007f0a:	2200      	movhi	r2, #0
 8007f0c:	e7f3      	b.n	8007ef6 <SPD_IsMecSpeedReliable+0x3e>
 8007f0e:	bf00      	nop

08007f10 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8007f10:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007f14:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8007f18:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007f1c:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8007f20:	b200      	sxth	r0, r0
 8007f22:	4770      	bx	lr

08007f24 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8007f24:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007f26:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007f2a:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8007f2e:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 8007f32:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007f34:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007f36:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8007f38:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007f3a:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8007f3e:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8007f40:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8007f42:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8007f44:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8007f46:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007f48:	6183      	str	r3, [r0, #24]
}
 8007f4a:	4770      	bx	lr

08007f4c <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8007f4c:	6141      	str	r1, [r0, #20]
}
 8007f4e:	4770      	bx	lr

08007f50 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8007f50:	6940      	ldr	r0, [r0, #20]
 8007f52:	4770      	bx	lr

08007f54 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007f54:	7803      	ldrb	r3, [r0, #0]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d000      	beq.n	8007f5c <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8007f5a:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8007f5c:	6900      	ldr	r0, [r0, #16]
 8007f5e:	2100      	movs	r1, #0
 8007f60:	f7fe bda2 	b.w	8006aa8 <PID_SetIntegralTerm>

08007f64 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8007f64:	6840      	ldr	r0, [r0, #4]
 8007f66:	2800      	cmp	r0, #0
 8007f68:	bfbc      	itt	lt
 8007f6a:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007f6e:	30ff      	addlt	r0, #255	; 0xff
}
 8007f70:	1400      	asrs	r0, r0, #16
 8007f72:	4770      	bx	lr

08007f74 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8007f74:	6880      	ldr	r0, [r0, #8]
 8007f76:	2800      	cmp	r0, #0
 8007f78:	bfbc      	itt	lt
 8007f7a:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007f7e:	30ff      	addlt	r0, #255	; 0xff
}
 8007f80:	1400      	asrs	r0, r0, #16
 8007f82:	4770      	bx	lr

08007f84 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007f84:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8007f86:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007f88:	60c3      	str	r3, [r0, #12]
}
 8007f8a:	4770      	bx	lr

08007f8c <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007f8e:	7806      	ldrb	r6, [r0, #0]
{
 8007f90:	4604      	mov	r4, r0
 8007f92:	460d      	mov	r5, r1
 8007f94:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007f96:	b326      	cbz	r6, 8007fe2 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007f98:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007f9a:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	bfbc      	itt	lt
 8007fa0:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007fa4:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007fa6:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007fa8:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8007fac:	dd01      	ble.n	8007fb2 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8007fae:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8007fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8007fb2:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 8007fb6:	42a9      	cmp	r1, r5
 8007fb8:	dcf9      	bgt.n	8007fae <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8007fba:	8c23      	ldrh	r3, [r4, #32]
 8007fbc:	429d      	cmp	r5, r3
 8007fbe:	da03      	bge.n	8007fc8 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8007fc0:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8007fc4:	42ab      	cmp	r3, r5
 8007fc6:	dbf2      	blt.n	8007fae <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8007fc8:	b9af      	cbnz	r7, 8007ff6 <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007fca:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007fcc:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8007fce:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8007fd0:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8007fd4:	bf0c      	ite	eq
 8007fd6:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8007fd8:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8007fda:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8007fdc:	61a3      	str	r3, [r4, #24]
 8007fde:	2001      	movs	r0, #1
}
 8007fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8007fe2:	f7ff ffc7 	bl	8007f74 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8007fe6:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8007fe8:	42b5      	cmp	r5, r6
 8007fea:	dce0      	bgt.n	8007fae <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8007fec:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	dcdc      	bgt.n	8007fae <STC_ExecRamp+0x22>
 8007ff4:	e7e8      	b.n	8007fc8 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8007ff6:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8007ff8:	4a07      	ldr	r2, [pc, #28]	; (8008018 <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8007ffa:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8007ffc:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8008000:	fba2 2303 	umull	r2, r3, r2, r3
 8008004:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8008006:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8008008:	1a2d      	subs	r5, r5, r0
 800800a:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 800800c:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800800e:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8008012:	2001      	movs	r0, #1
 8008014:	61a5      	str	r5, [r4, #24]
}
 8008016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008018:	10624dd3 	.word	0x10624dd3

0800801c <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 800801c:	2300      	movs	r3, #0
 800801e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8008020:	6183      	str	r3, [r0, #24]
}
 8008022:	4770      	bx	lr

08008024 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8008024:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8008026:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800802a:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800802c:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 800802e:	2a00      	cmp	r2, #0
 8008030:	bf08      	it	eq
 8008032:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8008034:	2b01      	cmp	r3, #1
{
 8008036:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8008038:	d90c      	bls.n	8008054 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800803a:	6981      	ldr	r1, [r0, #24]
 800803c:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800803e:	3b01      	subs	r3, #1
 8008040:	2e00      	cmp	r6, #0
 8008042:	60c3      	str	r3, [r0, #12]
 8008044:	4630      	mov	r0, r6
 8008046:	db09      	blt.n	800805c <STC_CalcTorqueReference+0x38>
 8008048:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800804a:	2a01      	cmp	r2, #1
 800804c:	d00a      	beq.n	8008064 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800804e:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8008050:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8008052:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8008054:	d012      	beq.n	800807c <STC_CalcTorqueReference+0x58>
 8008056:	2e00      	cmp	r6, #0
 8008058:	4630      	mov	r0, r6
 800805a:	daf5      	bge.n	8008048 <STC_CalcTorqueReference+0x24>
 800805c:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8008060:	30ff      	adds	r0, #255	; 0xff
 8008062:	e7f1      	b.n	8008048 <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008064:	6960      	ldr	r0, [r4, #20]
 8008066:	f7ff ff1b 	bl	8007ea0 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800806a:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800806c:	b201      	sxth	r1, r0
 800806e:	6920      	ldr	r0, [r4, #16]
 8008070:	f7fe fd2a 	bl	8006ac8 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008074:	0403      	lsls	r3, r0, #16
 8008076:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800807a:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800807c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008080:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008082:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008084:	60c3      	str	r3, [r0, #12]
 8008086:	e7e0      	b.n	800804a <STC_CalcTorqueReference+0x26>

08008088 <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8008088:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop

08008090 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008090:	8bc0      	ldrh	r0, [r0, #30]
 8008092:	4770      	bx	lr

08008094 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008094:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop

0800809c <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800809c:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 80080a0:	2200      	movs	r2, #0
 80080a2:	b299      	uxth	r1, r3
 80080a4:	f361 020f 	bfi	r2, r1, #0, #16
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	f363 421f 	bfi	r2, r3, #16, #16
{
 80080ae:	b082      	sub	sp, #8
}
 80080b0:	4610      	mov	r0, r2
 80080b2:	b002      	add	sp, #8
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop

080080b8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80080b8:	b510      	push	{r4, lr}
 80080ba:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80080bc:	6940      	ldr	r0, [r0, #20]
 80080be:	f7ff feef 	bl	8007ea0 <SPD_GetAvrgMecSpeedUnit>
 80080c2:	0400      	lsls	r0, r0, #16
 80080c4:	6060      	str	r0, [r4, #4]
}
 80080c6:	bd10      	pop	{r4, pc}

080080c8 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80080cc:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop

080080d4 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 80080d4:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80080d6:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80080d8:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 80080da:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80080dc:	430b      	orrs	r3, r1
 80080de:	ea23 0202 	bic.w	r2, r3, r2
 80080e2:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80080e4:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80080e6:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80080e8:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80080ea:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80080ec:	d008      	beq.n	8008100 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80080ee:	b912      	cbnz	r2, 80080f6 <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80080f0:	4620      	mov	r0, r4
 80080f2:	bc30      	pop	{r4, r5}
 80080f4:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80080f6:	240a      	movs	r4, #10
 80080f8:	7004      	strb	r4, [r0, #0]
}
 80080fa:	4620      	mov	r0, r4
 80080fc:	bc30      	pop	{r4, r5}
 80080fe:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8008100:	2a00      	cmp	r2, #0
 8008102:	d1f5      	bne.n	80080f0 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8008104:	240b      	movs	r4, #11
 8008106:	7004      	strb	r4, [r0, #0]
}
 8008108:	4620      	mov	r0, r4
 800810a:	bc30      	pop	{r4, r5}
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop

08008110 <STM_NextState>:
{
 8008110:	b508      	push	{r3, lr}
 8008112:	7803      	ldrb	r3, [r0, #0]
 8008114:	2b14      	cmp	r3, #20
 8008116:	d810      	bhi.n	800813a <STM_NextState+0x2a>
 8008118:	e8df f003 	tbb	[pc, r3]
 800811c:	240d545e 	.word	0x240d545e
 8008120:	390d352e 	.word	0x390d352e
 8008124:	0f0f3f3c 	.word	0x0f0f3f3c
 8008128:	47650b44 	.word	0x47650b44
 800812c:	504d1b4a 	.word	0x504d1b4a
 8008130:	5b          	.byte	0x5b
 8008131:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008132:	290e      	cmp	r1, #14
 8008134:	d013      	beq.n	800815e <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8008136:	2907      	cmp	r1, #7
 8008138:	d011      	beq.n	800815e <STM_NextState+0x4e>
 800813a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800813e:	2b01      	cmp	r3, #1
 8008140:	d018      	beq.n	8008174 <STM_NextState+0x64>
 8008142:	2907      	cmp	r1, #7
 8008144:	d016      	beq.n	8008174 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8008146:	2200      	movs	r2, #0
 8008148:	2180      	movs	r1, #128	; 0x80
 800814a:	f7ff ffc3 	bl	80080d4 <STM_FaultProcessing>
 800814e:	2000      	movs	r0, #0
}
 8008150:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8008152:	2914      	cmp	r1, #20
 8008154:	d8f1      	bhi.n	800813a <STM_NextState+0x2a>
 8008156:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <STM_NextState+0xe0>)
 8008158:	40cb      	lsrs	r3, r1
 800815a:	07db      	lsls	r3, r3, #31
 800815c:	d5ed      	bpl.n	800813a <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 800815e:	7001      	strb	r1, [r0, #0]
 8008160:	2001      	movs	r0, #1
}
 8008162:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8008164:	2911      	cmp	r1, #17
 8008166:	d8ee      	bhi.n	8008146 <STM_NextState+0x36>
 8008168:	4b22      	ldr	r3, [pc, #136]	; (80081f4 <STM_NextState+0xe4>)
 800816a:	40cb      	lsrs	r3, r1
 800816c:	07da      	lsls	r2, r3, #31
 800816e:	d4f6      	bmi.n	800815e <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008170:	2903      	cmp	r1, #3
 8008172:	d1e8      	bne.n	8008146 <STM_NextState+0x36>
 8008174:	2000      	movs	r0, #0
}
 8008176:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008178:	2913      	cmp	r1, #19
 800817a:	d0f0      	beq.n	800815e <STM_NextState+0x4e>
 800817c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008180:	2b05      	cmp	r3, #5
 8008182:	d1dc      	bne.n	800813e <STM_NextState+0x2e>
 8008184:	e7eb      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008186:	1f8b      	subs	r3, r1, #6
 8008188:	2b01      	cmp	r3, #1
 800818a:	d8d6      	bhi.n	800813a <STM_NextState+0x2a>
 800818c:	e7e7      	b.n	800815e <STM_NextState+0x4e>
      if ( bState == STOP )
 800818e:	2908      	cmp	r1, #8
 8008190:	d1d3      	bne.n	800813a <STM_NextState+0x2a>
 8008192:	e7e4      	b.n	800815e <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8008194:	2909      	cmp	r1, #9
 8008196:	d1d0      	bne.n	800813a <STM_NextState+0x2a>
 8008198:	e7e1      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800819a:	2900      	cmp	r1, #0
 800819c:	d0df      	beq.n	800815e <STM_NextState+0x4e>
 800819e:	290c      	cmp	r1, #12
 80081a0:	d1cb      	bne.n	800813a <STM_NextState+0x2a>
 80081a2:	e7dc      	b.n	800815e <STM_NextState+0x4e>
      if ( bState == IDLE )
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d0da      	beq.n	800815e <STM_NextState+0x4e>
 80081a8:	e7c7      	b.n	800813a <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 80081aa:	2902      	cmp	r1, #2
 80081ac:	d1c3      	bne.n	8008136 <STM_NextState+0x26>
 80081ae:	e7d6      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80081b0:	2911      	cmp	r1, #17
 80081b2:	d1c0      	bne.n	8008136 <STM_NextState+0x26>
 80081b4:	e7d3      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 80081b6:	2904      	cmp	r1, #4
 80081b8:	d1bd      	bne.n	8008136 <STM_NextState+0x26>
 80081ba:	e7d0      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 80081bc:	1f0b      	subs	r3, r1, #4
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d8b9      	bhi.n	8008136 <STM_NextState+0x26>
 80081c2:	e7cc      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80081c4:	2907      	cmp	r1, #7
 80081c6:	d0ca      	beq.n	800815e <STM_NextState+0x4e>
 80081c8:	f1a1 030d 	sub.w	r3, r1, #13
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d8b4      	bhi.n	800813a <STM_NextState+0x2a>
 80081d0:	e7c5      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 80081d2:	2912      	cmp	r1, #18
 80081d4:	d1af      	bne.n	8008136 <STM_NextState+0x26>
 80081d6:	e7c2      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80081d8:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d0be      	beq.n	800815e <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 80081e0:	290c      	cmp	r1, #12
 80081e2:	d1ae      	bne.n	8008142 <STM_NextState+0x32>
 80081e4:	e7bb      	b.n	800815e <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80081e6:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80081ea:	2b07      	cmp	r3, #7
 80081ec:	d1a5      	bne.n	800813a <STM_NextState+0x2a>
 80081ee:	e7b6      	b.n	800815e <STM_NextState+0x4e>
 80081f0:	00140080 	.word	0x00140080
 80081f4:	00030092 	.word	0x00030092

080081f8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80081f8:	7800      	ldrb	r0, [r0, #0]
 80081fa:	4770      	bx	lr

080081fc <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80081fc:	7803      	ldrb	r3, [r0, #0]
 80081fe:	2b0b      	cmp	r3, #11
 8008200:	d001      	beq.n	8008206 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8008202:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8008204:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8008206:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8008208:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 800820a:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800820c:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 800820e:	2001      	movs	r0, #1
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop

08008214 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8008214:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8008216:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8008218:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop

08008220 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8008220:	f7fe bb7c 	b.w	800691c <FCP_Init>

08008224 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8008224:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8008228:	b16a      	cbz	r2, 8008246 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800822a:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 800822e:	4603      	mov	r3, r0
 8008230:	b1a2      	cbz	r2, 800825c <UFCP_TX_IRQ_Handler+0x38>
 8008232:	2a01      	cmp	r2, #1
 8008234:	d108      	bne.n	8008248 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8008236:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008238:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800823c:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 800823e:	3201      	adds	r2, #1
 8008240:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8008244:	4770      	bx	lr
 8008246:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008248:	7d41      	ldrb	r1, [r0, #21]
 800824a:	3101      	adds	r1, #1
 800824c:	428a      	cmp	r2, r1
 800824e:	dc07      	bgt.n	8008260 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8008250:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008252:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8008256:	7d09      	ldrb	r1, [r1, #20]
 8008258:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800825a:	e7f0      	b.n	800823e <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800825c:	7d01      	ldrb	r1, [r0, #20]
        break;
 800825e:	e7eb      	b.n	8008238 <UFCP_TX_IRQ_Handler+0x14>
{
 8008260:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008262:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8008266:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 800826a:	6291      	str	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800826c:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800826e:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008272:	2500      	movs	r5, #0
 8008274:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800827e:	4623      	mov	r3, r4
}
 8008280:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008282:	4718      	bx	r3

08008284 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008284:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008288:	b10b      	cbz	r3, 800828e <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800828a:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800828c:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800828e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8008292:	2301      	movs	r3, #1
 8008294:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008298:	6813      	ldr	r3, [r2, #0]
 800829a:	f043 0320 	orr.w	r3, r3, #32
 800829e:	6013      	str	r3, [r2, #0]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 80082a0:	2002      	movs	r0, #2
 80082a2:	4770      	bx	lr

080082a4 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 80082a8:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 80082ac:	b108      	cbz	r0, 80082b2 <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 80082ae:	2001      	movs	r0, #1
  }

  return ret_val;
}
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 80082b2:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 80082b4:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 80082b6:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 80082b8:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 80082ba:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 80082be:	b34b      	cbz	r3, 8008314 <UFCP_Send+0x70>
 80082c0:	f104 011a 	add.w	r1, r4, #26
 80082c4:	1d17      	adds	r7, r2, #4
 80082c6:	45bc      	cmp	ip, r7
 80082c8:	bf38      	it	cc
 80082ca:	428a      	cmpcc	r2, r1
 80082cc:	d336      	bcc.n	800833c <UFCP_Send+0x98>
 80082ce:	2807      	cmp	r0, #7
 80082d0:	d934      	bls.n	800833c <UFCP_Send+0x98>
 80082d2:	0899      	lsrs	r1, r3, #2
 80082d4:	3901      	subs	r1, #1
 80082d6:	b2c9      	uxtb	r1, r1
 80082d8:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80082dc:	4665      	mov	r5, ip
 80082de:	4611      	mov	r1, r2
 80082e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80082e4:	f845 6b04 	str.w	r6, [r5], #4
 80082e8:	42b9      	cmp	r1, r7
 80082ea:	d1f9      	bne.n	80082e0 <UFCP_Send+0x3c>
 80082ec:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 80082f0:	1a40      	subs	r0, r0, r1
 80082f2:	428b      	cmp	r3, r1
 80082f4:	b2c0      	uxtb	r0, r0
 80082f6:	eb02 0601 	add.w	r6, r2, r1
 80082fa:	eb0c 0501 	add.w	r5, ip, r1
 80082fe:	d009      	beq.n	8008314 <UFCP_Send+0x70>
 8008300:	5c53      	ldrb	r3, [r2, r1]
 8008302:	f80c 3001 	strb.w	r3, [ip, r1]
 8008306:	b128      	cbz	r0, 8008314 <UFCP_Send+0x70>
 8008308:	7873      	ldrb	r3, [r6, #1]
 800830a:	706b      	strb	r3, [r5, #1]
 800830c:	2801      	cmp	r0, #1
 800830e:	d001      	beq.n	8008314 <UFCP_Send+0x70>
 8008310:	78b3      	ldrb	r3, [r6, #2]
 8008312:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008314:	f104 0014 	add.w	r0, r4, #20
 8008318:	f7fe fb14 	bl	8006944 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800831c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8008320:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8008324:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008326:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8008328:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800832c:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008330:	6813      	ldr	r3, [r2, #0]
 8008332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	2002      	movs	r0, #2
}
 800833a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800833c:	3001      	adds	r0, #1
 800833e:	4410      	add	r0, r2
 8008340:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8008344:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008348:	f803 1f01 	strb.w	r1, [r3, #1]!
 800834c:	4282      	cmp	r2, r0
 800834e:	d1f9      	bne.n	8008344 <UFCP_Send+0xa0>
 8008350:	e7e0      	b.n	8008314 <UFCP_Send+0x70>
 8008352:	bf00      	nop

08008354 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008354:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008358:	b90b      	cbnz	r3, 800835e <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800835a:	482c      	ldr	r0, [pc, #176]	; (800840c <UFCP_RX_IRQ_Handler+0xb8>)
}
 800835c:	4770      	bx	lr
{
 800835e:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008360:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008364:	b083      	sub	sp, #12
 8008366:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008368:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 800836a:	b1d3      	cbz	r3, 80083a2 <UFCP_RX_IRQ_Handler+0x4e>
 800836c:	2b01      	cmp	r3, #1
 800836e:	d00d      	beq.n	800838c <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008370:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8008374:	3101      	adds	r1, #1
 8008376:	428b      	cmp	r3, r1
 8008378:	dc1d      	bgt.n	80083b6 <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800837a:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800837c:	4823      	ldr	r0, [pc, #140]	; (800840c <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800837e:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8008382:	3301      	adds	r3, #1
 8008384:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008388:	b003      	add	sp, #12
 800838a:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800838c:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 800838e:	bf54      	ite	pl
 8008390:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8008392:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8008394:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8008398:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800839c:	481b      	ldr	r0, [pc, #108]	; (800840c <UFCP_RX_IRQ_Handler+0xb8>)
}
 800839e:	b003      	add	sp, #12
 80083a0:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80083a2:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 80083a4:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 80083a8:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80083aa:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 80083ac:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80083b0:	4817      	ldr	r0, [pc, #92]	; (8008410 <UFCP_RX_IRQ_Handler+0xbc>)
}
 80083b2:	b003      	add	sp, #12
 80083b4:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 80083b6:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 80083ba:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083be:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 80083c0:	2200      	movs	r2, #0
 80083c2:	f023 0320 	bic.w	r3, r3, #32
 80083c6:	8242      	strh	r2, [r0, #18]
 80083c8:	600b      	str	r3, [r1, #0]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80083ca:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80083cc:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 80083d0:	f7fe fab8 	bl	8006944 <FCP_CalcCRC>
 80083d4:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 80083d8:	4283      	cmp	r3, r0
 80083da:	d10a      	bne.n	80083f2 <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	68a5      	ldr	r5, [r4, #8]
 80083e0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80083e4:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80083e8:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80083ec:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80083ee:	4809      	ldr	r0, [pc, #36]	; (8008414 <UFCP_RX_IRQ_Handler+0xc0>)
 80083f0:	e7d5      	b.n	800839e <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80083f2:	4620      	mov	r0, r4
 80083f4:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 80083f6:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80083f8:	f10d 0207 	add.w	r2, sp, #7
 80083fc:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 80083fe:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008402:	f7ff ff4f 	bl	80082a4 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8008406:	4803      	ldr	r0, [pc, #12]	; (8008414 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 8008408:	e7c9      	b.n	800839e <UFCP_RX_IRQ_Handler+0x4a>
 800840a:	bf00      	nop
 800840c:	080093ee 	.word	0x080093ee
 8008410:	080093f0 	.word	0x080093f0
 8008414:	080093f2 	.word	0x080093f2

08008418 <UFCP_OVR_IRQ_Handler>:
{
 8008418:	b510      	push	{r4, lr}
 800841a:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 800841c:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800841e:	2301      	movs	r3, #1
 8008420:	f10d 0207 	add.w	r2, sp, #7
 8008424:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008426:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800842a:	f7ff ff3b 	bl	80082a4 <UFCP_Send>
}
 800842e:	b002      	add	sp, #8
 8008430:	bd10      	pop	{r4, pc}
 8008432:	bf00      	nop

08008434 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008434:	2300      	movs	r3, #0
 8008436:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800843a:	4770      	bx	lr

0800843c <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800843c:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800843e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8008440:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 8008442:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008446:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8008448:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800844a:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 800844c:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 800844e:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8008450:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8008452:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop

08008458 <VSS_Init>:
{
 8008458:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 800845a:	f7ff ffef 	bl	800843c <VSS_Clear>
}
 800845e:	bd08      	pop	{r3, pc}

08008460 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8008460:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8008464:	b123      	cbz	r3, 8008470 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8008466:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800846a:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 800846c:	4610      	mov	r0, r2
 800846e:	4770      	bx	lr
{
 8008470:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008472:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8008474:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008478:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 800847a:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800847e:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008480:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008484:	442b      	add	r3, r5
 8008486:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8008488:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800848a:	8602      	strh	r2, [r0, #48]	; 0x30
 800848c:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800848e:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8008490:	b1de      	cbz	r6, 80084ca <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8008492:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 8008496:	b1e4      	cbz	r4, 80084d2 <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 8008498:	3c01      	subs	r4, #1
 800849a:	b224      	sxth	r4, r4
 800849c:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800849e:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80084a0:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80084a2:	db27      	blt.n	80084f4 <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80084a4:	1acb      	subs	r3, r1, r3
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80084aa:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 80084ae:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 80084b2:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80084b4:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 80084b8:	fb14 f406 	smulbb	r4, r4, r6
 80084bc:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 80084be:	db12      	blt.n	80084e6 <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80084c0:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 80084c2:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80084c4:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 80084c6:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 80084ca:	8082      	strh	r2, [r0, #4]
}
 80084cc:	bcf0      	pop	{r4, r5, r6, r7}
 80084ce:	4610      	mov	r0, r2
 80084d0:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 80084d2:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80084d6:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 80084d8:	2301      	movs	r3, #1
 80084da:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 80084de:	8082      	strh	r2, [r0, #4]
}
 80084e0:	bcf0      	pop	{r4, r5, r6, r7}
 80084e2:	4610      	mov	r0, r2
 80084e4:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 80084e6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d0ed      	beq.n	80084ca <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 80084ee:	440c      	add	r4, r1
 80084f0:	b222      	sxth	r2, r4
 80084f2:	e7ea      	b.n	80084ca <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 80084f4:	1a5b      	subs	r3, r3, r1
 80084f6:	b21b      	sxth	r3, r3
 80084f8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80084fc:	e7d5      	b.n	80084aa <VSS_CalcElAngle+0x4a>
 80084fe:	bf00      	nop

08008500 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8008500:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8008502:	2b01      	cmp	r3, #1
{
 8008504:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 8008506:	d925      	bls.n	8008554 <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008508:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 800850c:	4413      	add	r3, r2
 800850e:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008510:	2b00      	cmp	r3, #0
 8008512:	bfb8      	it	lt
 8008514:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008518:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800851a:	7846      	ldrb	r6, [r0, #1]
 800851c:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800851e:	bfb8      	it	lt
 8008520:	33ff      	addlt	r3, #255	; 0xff
 8008522:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008524:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008528:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800852c:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800852e:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8008532:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8008536:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8008538:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800853a:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 800853c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800853e:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8008540:	1e53      	subs	r3, r2, #1
 8008542:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 8008544:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008548:	b963      	cbnz	r3, 8008564 <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800854a:	78c2      	ldrb	r2, [r0, #3]
 800854c:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 800854e:	bc70      	pop	{r4, r5, r6}
 8008550:	4618      	mov	r0, r3
 8008552:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 8008554:	d009      	beq.n	800856a <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008556:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800855a:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 800855c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0f2      	beq.n	800854a <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 8008564:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 8008566:	f7ff bca7 	b.w	8007eb8 <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800856a:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 800856e:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008570:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8008572:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008574:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008576:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008578:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800857c:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008580:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 8008582:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 8008586:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008588:	fb14 f303 	smulbb	r3, r4, r3
 800858c:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 800858e:	8502      	strh	r2, [r0, #40]	; 0x28
 8008590:	e7d8      	b.n	8008544 <VSS_CalcAvrgMecSpeedUnit+0x44>
 8008592:	bf00      	nop

08008594 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008594:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008596:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 8008598:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800859a:	fb91 f1f3 	sdiv	r1, r1, r3
 800859e:	80c1      	strh	r1, [r0, #6]
}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 80085a4:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 80085a6:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80085aa:	b984      	cbnz	r4, 80085ce <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 80085ac:	b98a      	cbnz	r2, 80085d2 <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80085ae:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80085b0:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80085b2:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80085b4:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80085b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80085ba:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80085bc:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80085c0:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80085c4:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 80085c8:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80085ca:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80085cc:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 80085ce:	bc70      	pop	{r4, r5, r6}
 80085d0:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80085d2:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80085d4:	4d11      	ldr	r5, [pc, #68]	; (800861c <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80085d6:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80085d8:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80085dc:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80085de:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80085e2:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80085e6:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 80085e8:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80085ea:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80085ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80085f2:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80085f4:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 80085f8:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80085fa:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80085fe:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008602:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 8008604:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008606:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008608:	0412      	lsls	r2, r2, #16
 800860a:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800860e:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008612:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 8008616:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8008618:	bc70      	pop	{r4, r5, r6}
 800861a:	4770      	bx	lr
 800861c:	10624dd3 	.word	0x10624dd3

08008620 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8008620:	b151      	cbz	r1, 8008638 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 8008622:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 8008626:	2201      	movs	r2, #1
 8008628:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 800862c:	b923      	cbnz	r3, 8008638 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 800862e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 8008632:	7003      	strb	r3, [r0, #0]
      bAux = false;
 8008634:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 8008636:	4770      	bx	lr
  bool bAux = true;
 8008638:	2001      	movs	r0, #1
 800863a:	4770      	bx	lr

0800863c <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 800863c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop

08008644 <FF_Init>:
 8008644:	b430      	push	{r4, r5}
 8008646:	e9d0 540a 	ldrd	r5, r4, [r0, #40]	; 0x28
 800864a:	6181      	str	r1, [r0, #24]
 800864c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800864e:	6141      	str	r1, [r0, #20]
 8008650:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8008654:	e9c0 3207 	strd	r3, r2, [r0, #28]
 8008658:	bc30      	pop	{r4, r5}
 800865a:	4770      	bx	lr

0800865c <FF_Clear>:
 800865c:	2300      	movs	r3, #0
 800865e:	6003      	str	r3, [r0, #0]
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop

08008664 <FF_VqdffComputation>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	4604      	mov	r4, r0
 800866a:	4610      	mov	r0, r2
 800866c:	9101      	str	r1, [sp, #4]
 800866e:	f7ff fc6f 	bl	8007f50 <STC_GetSpeedSensor>
 8008672:	f7ff fc19 	bl	8007ea8 <SPD_GetElSpeedDpp>
 8008676:	4b26      	ldr	r3, [pc, #152]	; (8008710 <FF_VqdffComputation+0xac>)
 8008678:	4605      	mov	r5, r0
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	f7fe f914 	bl	80068a8 <VBS_GetAvBusVoltage_d>
 8008680:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8008684:	2800      	cmp	r0, #0
 8008686:	d040      	beq.n	800870a <FF_VqdffComputation+0xa6>
 8008688:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800868c:	68e3      	ldr	r3, [r4, #12]
 800868e:	6961      	ldr	r1, [r4, #20]
 8008690:	4e20      	ldr	r6, [pc, #128]	; (8008714 <FF_VqdffComputation+0xb0>)
 8008692:	fb12 f205 	smulbb	r2, r2, r5
 8008696:	2a00      	cmp	r2, #0
 8008698:	bfbc      	itt	lt
 800869a:	f502 42ff 	addlt.w	r2, r2, #32640	; 0x7f80
 800869e:	327f      	addlt	r2, #127	; 0x7f
 80086a0:	13d2      	asrs	r2, r2, #15
 80086a2:	fb03 f302 	mul.w	r3, r3, r2
 80086a6:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80086aa:	fb93 f3f0 	sdiv	r3, r3, r0
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	fb01 f105 	mul.w	r1, r1, r5
 80086b4:	fb91 f1f0 	sdiv	r1, r1, r0
 80086b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80086bc:	4413      	add	r3, r2
 80086be:	42b3      	cmp	r3, r6
 80086c0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80086c4:	bfb8      	it	lt
 80086c6:	4633      	movlt	r3, r6
 80086c8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80086cc:	428b      	cmp	r3, r1
 80086ce:	fb12 f505 	smulbb	r5, r2, r5
 80086d2:	bfa8      	it	ge
 80086d4:	460b      	movge	r3, r1
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	bfb8      	it	lt
 80086da:	186d      	addlt	r5, r5, r1
 80086dc:	8023      	strh	r3, [r4, #0]
 80086de:	6922      	ldr	r2, [r4, #16]
 80086e0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80086e4:	490b      	ldr	r1, [pc, #44]	; (8008714 <FF_VqdffComputation+0xb0>)
 80086e6:	13ed      	asrs	r5, r5, #15
 80086e8:	fb02 f505 	mul.w	r5, r2, r5
 80086ec:	fb95 f0f0 	sdiv	r0, r5, r0
 80086f0:	eba3 0040 	sub.w	r0, r3, r0, lsl #1
 80086f4:	4288      	cmp	r0, r1
 80086f6:	bfb8      	it	lt
 80086f8:	4608      	movlt	r0, r1
 80086fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80086fe:	4298      	cmp	r0, r3
 8008700:	bfa8      	it	ge
 8008702:	4618      	movge	r0, r3
 8008704:	8060      	strh	r0, [r4, #2]
 8008706:	b002      	add	sp, #8
 8008708:	bd70      	pop	{r4, r5, r6, pc}
 800870a:	6020      	str	r0, [r4, #0]
 800870c:	b002      	add	sp, #8
 800870e:	bd70      	pop	{r4, r5, r6, pc}
 8008710:	20000b2c 	.word	0x20000b2c
 8008714:	ffff8001 	.word	0xffff8001

08008718 <FF_VqdConditioning>:
 8008718:	f9b0 2000 	ldrsh.w	r2, [r0]
 800871c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008720:	b410      	push	{r4}
 8008722:	4c10      	ldr	r4, [pc, #64]	; (8008764 <FF_VqdConditioning+0x4c>)
 8008724:	6041      	str	r1, [r0, #4]
 8008726:	fa02 f281 	sxtah	r2, r2, r1
 800872a:	42a2      	cmp	r2, r4
 800872c:	eb03 4121 	add.w	r1, r3, r1, asr #16
 8008730:	bfb8      	it	lt
 8008732:	4622      	movlt	r2, r4
 8008734:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008738:	42a1      	cmp	r1, r4
 800873a:	bfb8      	it	lt
 800873c:	4621      	movlt	r1, r4
 800873e:	429a      	cmp	r2, r3
 8008740:	bfa8      	it	ge
 8008742:	461a      	movge	r2, r3
 8008744:	4299      	cmp	r1, r3
 8008746:	b292      	uxth	r2, r2
 8008748:	bfa8      	it	ge
 800874a:	4619      	movge	r1, r3
 800874c:	2000      	movs	r0, #0
 800874e:	b289      	uxth	r1, r1
 8008750:	f362 000f 	bfi	r0, r2, #0, #16
 8008754:	b085      	sub	sp, #20
 8008756:	f361 401f 	bfi	r0, r1, #16, #16
 800875a:	b005      	add	sp, #20
 800875c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	ffff8001 	.word	0xffff8001

08008768 <FF_DataProcess>:
 8008768:	b470      	push	{r4, r5, r6}
 800876a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
 800876c:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8008770:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8008774:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8008778:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 800877c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
 800877e:	3901      	subs	r1, #1
 8008780:	fb01 6202 	mla	r2, r1, r2, r6
 8008784:	fb01 5303 	mla	r3, r1, r3, r5
 8008788:	4122      	asrs	r2, r4
 800878a:	4123      	asrs	r3, r4
 800878c:	8102      	strh	r2, [r0, #8]
 800878e:	8143      	strh	r3, [r0, #10]
 8008790:	bc70      	pop	{r4, r5, r6}
 8008792:	4770      	bx	lr

08008794 <FF_InitFOCAdditionalMethods>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	2500      	movs	r5, #0
 8008798:	4604      	mov	r4, r0
 800879a:	6085      	str	r5, [r0, #8]
 800879c:	4629      	mov	r1, r5
 800879e:	69c0      	ldr	r0, [r0, #28]
 80087a0:	f7fe f982 	bl	8006aa8 <PID_SetIntegralTerm>
 80087a4:	4629      	mov	r1, r5
 80087a6:	6a20      	ldr	r0, [r4, #32]
 80087a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ac:	f7fe b97c 	b.w	8006aa8 <PID_SetIntegralTerm>

080087b0 <FF_SetFFConstants>:
 80087b0:	b084      	sub	sp, #16
 80087b2:	f10d 0c10 	add.w	ip, sp, #16
 80087b6:	e90c 000e 	stmdb	ip, {r1, r2, r3}
 80087ba:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 80087be:	9b03      	ldr	r3, [sp, #12]
 80087c0:	6143      	str	r3, [r0, #20]
 80087c2:	e9c0 1203 	strd	r1, r2, [r0, #12]
 80087c6:	b004      	add	sp, #16
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop

080087cc <FF_GetFFConstants>:
 80087cc:	b430      	push	{r4, r5}
 80087ce:	e9d1 4503 	ldrd	r4, r5, [r1, #12]
 80087d2:	694a      	ldr	r2, [r1, #20]
 80087d4:	6082      	str	r2, [r0, #8]
 80087d6:	e9c0 4500 	strd	r4, r5, [r0]
 80087da:	bc30      	pop	{r4, r5}
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop

080087e0 <FF_GetVqdff>:
 80087e0:	6803      	ldr	r3, [r0, #0]
 80087e2:	2000      	movs	r0, #0
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	f362 000f 	bfi	r0, r2, #0, #16
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	b082      	sub	sp, #8
 80087ee:	f363 401f 	bfi	r0, r3, #16, #16
 80087f2:	b002      	add	sp, #8
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop

080087f8 <FF_GetVqdAvPIout>:
 80087f8:	6803      	ldr	r3, [r0, #0]
 80087fa:	2000      	movs	r0, #0
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	f362 000f 	bfi	r0, r2, #0, #16
 8008802:	0c1b      	lsrs	r3, r3, #16
 8008804:	b082      	sub	sp, #8
 8008806:	f363 401f 	bfi	r0, r3, #16, #16
 800880a:	b002      	add	sp, #8
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop

08008810 <FW_Init>:
 8008810:	8a83      	ldrh	r3, [r0, #20]
 8008812:	8103      	strh	r3, [r0, #8]
 8008814:	e9c0 2100 	strd	r2, r1, [r0]
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop

0800881c <FW_Clear>:
 800881c:	b510      	push	{r4, lr}
 800881e:	2100      	movs	r1, #0
 8008820:	4604      	mov	r4, r0
 8008822:	6800      	ldr	r0, [r0, #0]
 8008824:	f7fe f940 	bl	8006aa8 <PID_SetIntegralTerm>
 8008828:	2300      	movs	r3, #0
 800882a:	f8c4 300a 	str.w	r3, [r4, #10]
 800882e:	f8c4 300e 	str.w	r3, [r4, #14]
 8008832:	bd10      	pop	{r4, pc}

08008834 <FW_CalcCurrRef>:
 8008834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008838:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800883c:	8906      	ldrh	r6, [r0, #8]
 800883e:	8a45      	ldrh	r5, [r0, #18]
 8008840:	4a27      	ldr	r2, [pc, #156]	; (80088e0 <FW_CalcCurrRef+0xac>)
 8008842:	4604      	mov	r4, r0
 8008844:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8008848:	b084      	sub	sp, #16
 800884a:	fb03 f303 	mul.w	r3, r3, r3
 800884e:	fb00 3000 	mla	r0, r0, r0, r3
 8008852:	fb05 f506 	mul.w	r5, r5, r6
 8008856:	140f      	asrs	r7, r1, #16
 8008858:	fba2 2505 	umull	r2, r5, r2, r5
 800885c:	b20e      	sxth	r6, r1
 800885e:	9101      	str	r1, [sp, #4]
 8008860:	f7f8 fbd0 	bl	8001004 <MCM_Sqrt>
 8008864:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008868:	4288      	cmp	r0, r1
 800886a:	ea4f 1595 	mov.w	r5, r5, lsr #6
 800886e:	bfd4      	ite	le
 8008870:	1a29      	suble	r1, r5, r0
 8008872:	1a69      	subgt	r1, r5, r1
 8008874:	81e0      	strh	r0, [r4, #14]
 8008876:	6820      	ldr	r0, [r4, #0]
 8008878:	f7fe f926 	bl	8006ac8 <PI_Controller>
 800887c:	2800      	cmp	r0, #0
 800887e:	bfb8      	it	lt
 8008880:	f9b4 7010 	ldrshlt.w	r7, [r4, #16]
 8008884:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 8008888:	bfac      	ite	ge
 800888a:	8227      	strhge	r7, [r4, #16]
 800888c:	183f      	addlt	r7, r7, r0
 800888e:	42bb      	cmp	r3, r7
 8008890:	69a0      	ldr	r0, [r4, #24]
 8008892:	bfb8      	it	lt
 8008894:	463b      	movlt	r3, r7
 8008896:	fb03 0013 	mls	r0, r3, r3, r0
 800889a:	b21d      	sxth	r5, r3
 800889c:	f7f8 fbb2 	bl	8001004 <MCM_Sqrt>
 80088a0:	4607      	mov	r7, r0
 80088a2:	6860      	ldr	r0, [r4, #4]
 80088a4:	f7fe f904 	bl	8006ab0 <PID_GetKIDivisor>
 80088a8:	fb07 f800 	mul.w	r8, r7, r0
 80088ac:	f1c8 0100 	rsb	r1, r8, #0
 80088b0:	6860      	ldr	r0, [r4, #4]
 80088b2:	f7fe f8ff 	bl	8006ab4 <PID_SetLowerIntegralTermLimit>
 80088b6:	4641      	mov	r1, r8
 80088b8:	6860      	ldr	r0, [r4, #4]
 80088ba:	f7fe f8fd 	bl	8006ab8 <PID_SetUpperIntegralTermLimit>
 80088be:	42be      	cmp	r6, r7
 80088c0:	dc02      	bgt.n	80088c8 <FW_CalcCurrRef+0x94>
 80088c2:	427f      	negs	r7, r7
 80088c4:	42be      	cmp	r6, r7
 80088c6:	da00      	bge.n	80088ca <FW_CalcCurrRef+0x96>
 80088c8:	b23e      	sxth	r6, r7
 80088ca:	b2b6      	uxth	r6, r6
 80088cc:	2000      	movs	r0, #0
 80088ce:	b2ab      	uxth	r3, r5
 80088d0:	f366 000f 	bfi	r0, r6, #0, #16
 80088d4:	f363 401f 	bfi	r0, r3, #16, #16
 80088d8:	b004      	add	sp, #16
 80088da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088de:	bf00      	nop
 80088e0:	10624dd3 	.word	0x10624dd3

080088e4 <FW_DataProcess>:
 80088e4:	b470      	push	{r4, r5, r6}
 80088e6:	8b84      	ldrh	r4, [r0, #28]
 80088e8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80088ec:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80088f0:	8bc5      	ldrh	r5, [r0, #30]
 80088f2:	b20e      	sxth	r6, r1
 80088f4:	3c01      	subs	r4, #1
 80088f6:	1409      	asrs	r1, r1, #16
 80088f8:	fb04 6202 	mla	r2, r4, r2, r6
 80088fc:	fb04 1303 	mla	r3, r4, r3, r1
 8008900:	b083      	sub	sp, #12
 8008902:	412a      	asrs	r2, r5
 8008904:	412b      	asrs	r3, r5
 8008906:	8142      	strh	r2, [r0, #10]
 8008908:	8183      	strh	r3, [r0, #12]
 800890a:	b003      	add	sp, #12
 800890c:	bc70      	pop	{r4, r5, r6}
 800890e:	4770      	bx	lr

08008910 <FW_SetVref>:
 8008910:	8101      	strh	r1, [r0, #8]
 8008912:	4770      	bx	lr

08008914 <FW_GetVref>:
 8008914:	8900      	ldrh	r0, [r0, #8]
 8008916:	4770      	bx	lr

08008918 <FW_GetAvVPercentage>:
 8008918:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800891c:	8a42      	ldrh	r2, [r0, #18]
 800891e:	ebc3 1043 	rsb	r0, r3, r3, lsl #5
 8008922:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008926:	00c0      	lsls	r0, r0, #3
 8008928:	fbb0 f0f2 	udiv	r0, r0, r2
 800892c:	b280      	uxth	r0, r0
 800892e:	4770      	bx	lr

08008930 <RUC_Init>:
 8008930:	b430      	push	{r4, r5}
 8008932:	6681      	str	r1, [r0, #104]	; 0x68
 8008934:	2100      	movs	r1, #0
 8008936:	9c02      	ldr	r4, [sp, #8]
 8008938:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800893c:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 8008940:	f110 010c 	adds.w	r1, r0, #12
 8008944:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8008948:	6744      	str	r4, [r0, #116]	; 0x74
 800894a:	d023      	beq.n	8008994 <RUC_Init+0x64>
 800894c:	6943      	ldr	r3, [r0, #20]
 800894e:	b323      	cbz	r3, 800899a <RUC_Init+0x6a>
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	b323      	cbz	r3, 800899e <RUC_Init+0x6e>
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	b323      	cbz	r3, 80089a2 <RUC_Init+0x72>
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	b1c3      	cbz	r3, 800898e <RUC_Init+0x5e>
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	2105      	movs	r1, #5
 8008960:	b1b3      	cbz	r3, 8008990 <RUC_Init+0x60>
 8008962:	2204      	movs	r2, #4
 8008964:	2105      	movs	r1, #5
 8008966:	8805      	ldrh	r5, [r0, #0]
 8008968:	4c0f      	ldr	r4, [pc, #60]	; (80089a8 <RUC_Init+0x78>)
 800896a:	2364      	movs	r3, #100	; 0x64
 800896c:	fb03 f305 	mul.w	r3, r3, r5
 8008970:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008974:	fba4 4303 	umull	r4, r3, r4, r3
 8008978:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800897c:	2400      	movs	r4, #0
 800897e:	099b      	lsrs	r3, r3, #6
 8008980:	6154      	str	r4, [r2, #20]
 8008982:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 8008986:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800898a:	bc30      	pop	{r4, r5}
 800898c:	4770      	bx	lr
 800898e:	2104      	movs	r1, #4
 8008990:	1e4a      	subs	r2, r1, #1
 8008992:	e7e8      	b.n	8008966 <RUC_Init+0x36>
 8008994:	f04f 32ff 	mov.w	r2, #4294967295
 8008998:	e7e5      	b.n	8008966 <RUC_Init+0x36>
 800899a:	2101      	movs	r1, #1
 800899c:	e7f8      	b.n	8008990 <RUC_Init+0x60>
 800899e:	2102      	movs	r1, #2
 80089a0:	e7f6      	b.n	8008990 <RUC_Init+0x60>
 80089a2:	2103      	movs	r1, #3
 80089a4:	e7f4      	b.n	8008990 <RUC_Init+0x60>
 80089a6:	bf00      	nop
 80089a8:	10624dd3 	.word	0x10624dd3

080089ac <RUC_Clear>:
 80089ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b0:	4604      	mov	r4, r0
 80089b2:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 80089b4:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 80089b8:	80e1      	strh	r1, [r4, #6]
 80089ba:	2500      	movs	r5, #0
 80089bc:	4638      	mov	r0, r7
 80089be:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 80089c2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80089c6:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80089ca:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80089ce:	460e      	mov	r6, r1
 80089d0:	f7ff fd34 	bl	800843c <VSS_Clear>
 80089d4:	4629      	mov	r1, r5
 80089d6:	4640      	mov	r0, r8
 80089d8:	f7ff fad4 	bl	8007f84 <STC_SetControlMode>
 80089dc:	8861      	ldrh	r1, [r4, #2]
 80089de:	b2b6      	uxth	r6, r6
 80089e0:	fb11 f106 	smulbb	r1, r1, r6
 80089e4:	b209      	sxth	r1, r1
 80089e6:	4638      	mov	r0, r7
 80089e8:	f7ff fdd4 	bl	8008594 <VSS_SetMecAngle>
 80089ec:	462a      	mov	r2, r5
 80089ee:	4629      	mov	r1, r5
 80089f0:	4640      	mov	r0, r8
 80089f2:	f7ff facb 	bl	8007f8c <STC_ExecRamp>
 80089f6:	8a21      	ldrh	r1, [r4, #16]
 80089f8:	89a2      	ldrh	r2, [r4, #12]
 80089fa:	fb11 f106 	smulbb	r1, r1, r6
 80089fe:	b209      	sxth	r1, r1
 8008a00:	4640      	mov	r0, r8
 8008a02:	f7ff fac3 	bl	8007f8c <STC_ExecRamp>
 8008a06:	89e1      	ldrh	r1, [r4, #14]
 8008a08:	89a2      	ldrh	r2, [r4, #12]
 8008a0a:	fb11 f106 	smulbb	r1, r1, r6
 8008a0e:	4638      	mov	r0, r7
 8008a10:	b209      	sxth	r1, r1
 8008a12:	f7ff fdc7 	bl	80085a4 <VSS_SetMecAcceleration>
 8008a16:	89a0      	ldrh	r0, [r4, #12]
 8008a18:	8823      	ldrh	r3, [r4, #0]
 8008a1a:	4907      	ldr	r1, [pc, #28]	; (8008a38 <RUC_Clear+0x8c>)
 8008a1c:	6962      	ldr	r2, [r4, #20]
 8008a1e:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8008a22:	fb03 f300 	mul.w	r3, r3, r0
 8008a26:	fba1 1303 	umull	r1, r3, r1, r3
 8008a2a:	099b      	lsrs	r3, r3, #6
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	80a3      	strh	r3, [r4, #4]
 8008a30:	60a2      	str	r2, [r4, #8]
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a36:	bf00      	nop
 8008a38:	10624dd3 	.word	0x10624dd3

08008a3c <RUC_Exec>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	8883      	ldrh	r3, [r0, #4]
 8008a40:	bb53      	cbnz	r3, 8008a98 <RUC_Exec+0x5c>
 8008a42:	6883      	ldr	r3, [r0, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d02e      	beq.n	8008aa6 <RUC_Exec+0x6a>
 8008a48:	88c5      	ldrh	r5, [r0, #6]
 8008a4a:	8899      	ldrh	r1, [r3, #4]
 8008a4c:	881a      	ldrh	r2, [r3, #0]
 8008a4e:	4604      	mov	r4, r0
 8008a50:	fb11 f105 	smulbb	r1, r1, r5
 8008a54:	b209      	sxth	r1, r1
 8008a56:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8008a58:	f7ff fa98 	bl	8007f8c <STC_ExecRamp>
 8008a5c:	68a3      	ldr	r3, [r4, #8]
 8008a5e:	88e5      	ldrh	r5, [r4, #6]
 8008a60:	8859      	ldrh	r1, [r3, #2]
 8008a62:	881a      	ldrh	r2, [r3, #0]
 8008a64:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008a66:	fb11 f105 	smulbb	r1, r1, r5
 8008a6a:	b209      	sxth	r1, r1
 8008a6c:	f7ff fd9a 	bl	80085a4 <VSS_SetMecAcceleration>
 8008a70:	68a2      	ldr	r2, [r4, #8]
 8008a72:	8823      	ldrh	r3, [r4, #0]
 8008a74:	8810      	ldrh	r0, [r2, #0]
 8008a76:	490d      	ldr	r1, [pc, #52]	; (8008aac <RUC_Exec+0x70>)
 8008a78:	6892      	ldr	r2, [r2, #8]
 8008a7a:	60a2      	str	r2, [r4, #8]
 8008a7c:	fb03 f300 	mul.w	r3, r3, r0
 8008a80:	fba1 2303 	umull	r2, r3, r1, r3
 8008a84:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8008a88:	099b      	lsrs	r3, r3, #6
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	80a3      	strh	r3, [r4, #4]
 8008a90:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8008a94:	2001      	movs	r0, #1
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	8083      	strh	r3, [r0, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0cf      	beq.n	8008a42 <RUC_Exec+0x6>
 8008aa2:	2001      	movs	r0, #1
 8008aa4:	e7f7      	b.n	8008a96 <RUC_Exec+0x5a>
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	bd38      	pop	{r3, r4, r5, pc}
 8008aaa:	bf00      	nop
 8008aac:	10624dd3 	.word	0x10624dd3

08008ab0 <RUC_FirstAccelerationStageReached>:
 8008ab0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8008ab4:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 8008ab8:	4282      	cmp	r2, r0
 8008aba:	bf34      	ite	cc
 8008abc:	2000      	movcc	r0, #0
 8008abe:	2001      	movcs	r0, #1
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop

08008ac4 <RUC_SetPhaseDurationms>:
 8008ac4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ac8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008acc:	818a      	strh	r2, [r1, #12]
 8008ace:	4770      	bx	lr

08008ad0 <RUC_SetPhaseFinalMecSpeedUnit>:
 8008ad0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ad4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ad8:	81ca      	strh	r2, [r1, #14]
 8008ada:	4770      	bx	lr

08008adc <RUC_SetPhaseFinalTorque>:
 8008adc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008ae0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ae4:	820a      	strh	r2, [r1, #16]
 8008ae6:	4770      	bx	lr

08008ae8 <RUC_GetPhaseDurationms>:
 8008ae8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008aec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008af0:	8988      	ldrh	r0, [r1, #12]
 8008af2:	4770      	bx	lr

08008af4 <RUC_GetPhaseFinalMecSpeedUnit>:
 8008af4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008af8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008afc:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop

08008b04 <RUC_GetPhaseFinalTorque>:
 8008b04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008b08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b0c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop

08008b14 <RUC_GetNumberOfPhases>:
 8008b14:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop

08008b1c <STO_PLL_CalcElAngle>:
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b20:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8008b24:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8008b28:	4604      	mov	r4, r0
 8008b2a:	03d8      	lsls	r0, r3, #15
 8008b2c:	1ac2      	subs	r2, r0, r3
 8008b2e:	4596      	cmp	lr, r2
 8008b30:	b089      	sub	sp, #36	; 0x24
 8008b32:	f340 80c1 	ble.w	8008cb8 <STO_PLL_CalcElAngle+0x19c>
 8008b36:	66a2      	str	r2, [r4, #104]	; 0x68
 8008b38:	4696      	mov	lr, r2
 8008b3a:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 8008b3e:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 8008b42:	fa4e f605 	asr.w	r6, lr, r5
 8008b46:	9603      	str	r6, [sp, #12]
 8008b48:	4562      	cmp	r2, ip
 8008b4a:	b236      	sxth	r6, r6
 8008b4c:	9601      	str	r6, [sp, #4]
 8008b4e:	f280 80c8 	bge.w	8008ce2 <STO_PLL_CalcElAngle+0x1c6>
 8008b52:	66e2      	str	r2, [r4, #108]	; 0x6c
 8008b54:	4694      	mov	ip, r2
 8008b56:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8008b5a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008b5c:	03de      	lsls	r6, r3, #15
 8008b5e:	fa4c f205 	asr.w	r2, ip, r5
 8008b62:	1af5      	subs	r5, r6, r3
 8008b64:	9204      	str	r2, [sp, #16]
 8008b66:	42a8      	cmp	r0, r5
 8008b68:	b212      	sxth	r2, r2
 8008b6a:	9202      	str	r2, [sp, #8]
 8008b6c:	f340 80b3 	ble.w	8008cd6 <STO_PLL_CalcElAngle+0x1ba>
 8008b70:	6625      	str	r5, [r4, #96]	; 0x60
 8008b72:	4628      	mov	r0, r5
 8008b74:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b76:	4295      	cmp	r5, r2
 8008b78:	f280 80a7 	bge.w	8008cca <STO_PLL_CalcElAngle+0x1ae>
 8008b7c:	6665      	str	r5, [r4, #100]	; 0x64
 8008b7e:	462a      	mov	r2, r5
 8008b80:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 8008b84:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8008b88:	890d      	ldrh	r5, [r1, #8]
 8008b8a:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 8008b8e:	888e      	ldrh	r6, [r1, #4]
 8008b90:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008b94:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 8008b98:	9901      	ldr	r1, [sp, #4]
 8008b9a:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 8008b9e:	fa40 f103 	asr.w	r1, r0, r3
 8008ba2:	fa42 f303 	asr.w	r3, r2, r3
 8008ba6:	1b8e      	subs	r6, r1, r6
 8008ba8:	fb11 f109 	smulbb	r1, r1, r9
 8008bac:	fb13 f909 	smulbb	r9, r3, r9
 8008bb0:	eba3 030a 	sub.w	r3, r3, sl
 8008bb4:	9305      	str	r3, [sp, #20]
 8008bb6:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 8008bba:	9b02      	ldr	r3, [sp, #8]
 8008bbc:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 8008bc0:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8008bc4:	b236      	sxth	r6, r6
 8008bc6:	1a41      	subs	r1, r0, r1
 8008bc8:	fb05 f707 	mul.w	r7, r5, r7
 8008bcc:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8008bd0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8008bd2:	eba2 0209 	sub.w	r2, r2, r9
 8008bd6:	fb0b 1106 	mla	r1, fp, r6, r1
 8008bda:	143f      	asrs	r7, r7, #16
 8008bdc:	fb0b 2b03 	mla	fp, fp, r3, r2
 8008be0:	fb0a 1107 	mla	r1, sl, r7, r1
 8008be4:	fb05 f508 	mul.w	r5, r5, r8
 8008be8:	9a01      	ldr	r2, [sp, #4]
 8008bea:	9f02      	ldr	r7, [sp, #8]
 8008bec:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 8008bf0:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8008bf4:	142d      	asrs	r5, r5, #16
 8008bf6:	fb0a b505 	mla	r5, sl, r5, fp
 8008bfa:	4107      	asrs	r7, r0
 8008bfc:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 8008c00:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8008c04:	fa42 f000 	asr.w	r0, r2, r0
 8008c08:	fb06 e609 	mla	r6, r6, r9, lr
 8008c0c:	fb09 c303 	mla	r3, r9, r3, ip
 8008c10:	fb07 f708 	mul.w	r7, r7, r8
 8008c14:	fb00 f008 	mul.w	r0, r0, r8
 8008c18:	fb07 670a 	mla	r7, r7, sl, r6
 8008c1c:	fb00 361a 	mls	r6, r0, sl, r3
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 8008c26:	fb0b 1813 	mls	r8, fp, r3, r1
 8008c2a:	9b02      	ldr	r3, [sp, #8]
 8008c2c:	fb0b 5513 	mls	r5, fp, r3, r5
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	d147      	bne.n	8008cc4 <STO_PLL_CalcElAngle+0x1a8>
 8008c34:	f1ba 0f00 	cmp.w	sl, #0
 8008c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c3c:	bfb4      	ite	lt
 8008c3e:	4691      	movlt	r9, r2
 8008c40:	f04f 0901 	movge.w	r9, #1
 8008c44:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8008c48:	f7f8 f962 	bl	8000f10 <MCM_Trig_Functions>
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	9a03      	ldr	r2, [sp, #12]
 8008c50:	fb13 f309 	smulbb	r3, r3, r9
 8008c54:	fb12 f109 	smulbb	r1, r2, r9
 8008c58:	425b      	negs	r3, r3
 8008c5a:	fb10 f303 	smulbb	r3, r0, r3
 8008c5e:	fb10 f021 	smultb	r0, r0, r1
 8008c62:	f343 33cf 	sbfx	r3, r3, #15, #16
 8008c66:	f340 31cf 	sbfx	r1, r0, #15, #16
 8008c6a:	1a59      	subs	r1, r3, r1
 8008c6c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008c70:	f7fd ff2a 	bl	8006ac8 <PI_Controller>
 8008c74:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 8008c78:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 8008c7c:	8220      	strh	r0, [r4, #16]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	429a      	cmp	r2, r3
 8008c84:	bf0a      	itet	eq
 8008c86:	2200      	moveq	r2, #0
 8008c88:	461a      	movne	r2, r3
 8008c8a:	4613      	moveq	r3, r2
 8008c8c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8008c90:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8008c94:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8008c98:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 8008c9c:	88a2      	ldrh	r2, [r4, #4]
 8008c9e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 8008ca2:	4410      	add	r0, r2
 8008ca4:	b200      	sxth	r0, r0
 8008ca6:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 8008caa:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 8008cae:	66e6      	str	r6, [r4, #108]	; 0x6c
 8008cb0:	80a0      	strh	r0, [r4, #4]
 8008cb2:	b009      	add	sp, #36	; 0x24
 8008cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb8:	1a1d      	subs	r5, r3, r0
 8008cba:	45ae      	cmp	lr, r5
 8008cbc:	bfdc      	itt	le
 8008cbe:	66a5      	strle	r5, [r4, #104]	; 0x68
 8008cc0:	46ae      	movle	lr, r5
 8008cc2:	e73a      	b.n	8008b3a <STO_PLL_CalcElAngle+0x1e>
 8008cc4:	fa1f f982 	uxth.w	r9, r2
 8008cc8:	e7bc      	b.n	8008c44 <STO_PLL_CalcElAngle+0x128>
 8008cca:	1b9b      	subs	r3, r3, r6
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	bfdc      	itt	le
 8008cd0:	6663      	strle	r3, [r4, #100]	; 0x64
 8008cd2:	461a      	movle	r2, r3
 8008cd4:	e754      	b.n	8008b80 <STO_PLL_CalcElAngle+0x64>
 8008cd6:	1b9a      	subs	r2, r3, r6
 8008cd8:	4290      	cmp	r0, r2
 8008cda:	bfdc      	itt	le
 8008cdc:	6622      	strle	r2, [r4, #96]	; 0x60
 8008cde:	4610      	movle	r0, r2
 8008ce0:	e748      	b.n	8008b74 <STO_PLL_CalcElAngle+0x58>
 8008ce2:	1a1b      	subs	r3, r3, r0
 8008ce4:	459c      	cmp	ip, r3
 8008ce6:	bfdc      	itt	le
 8008ce8:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8008cea:	469c      	movle	ip, r3
 8008cec:	e733      	b.n	8008b56 <STO_PLL_CalcElAngle+0x3a>
 8008cee:	bf00      	nop

08008cf0 <STO_PLL_CalcAvrgMecSpeedUnit>:
 8008cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf2:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8008cf6:	f1bc 0f00 	cmp.w	ip, #0
 8008cfa:	f000 8095 	beq.w	8008e28 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 8008cfe:	f10c 37ff 	add.w	r7, ip, #4294967295
 8008d02:	b2fb      	uxtb	r3, r7
 8008d04:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8008d08:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8008d0c:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8008d10:	4632      	mov	r2, r6
 8008d12:	2300      	movs	r3, #0
 8008d14:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8008d18:	4297      	cmp	r7, r2
 8008d1a:	442b      	add	r3, r5
 8008d1c:	d1fa      	bne.n	8008d14 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 8008d1e:	fb93 f5fc 	sdiv	r5, r3, ip
 8008d22:	2400      	movs	r4, #0
 8008d24:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8008d28:	1b5b      	subs	r3, r3, r5
 8008d2a:	42b2      	cmp	r2, r6
 8008d2c:	fb03 4403 	mla	r4, r3, r3, r4
 8008d30:	d1f8      	bne.n	8008d24 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 8008d32:	fb94 f4fc 	sdiv	r4, r4, ip
 8008d36:	fb05 fc05 	mul.w	ip, r5, r5
 8008d3a:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 8008d3e:	8b43      	ldrh	r3, [r0, #26]
 8008d40:	7887      	ldrb	r7, [r0, #2]
 8008d42:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8008d46:	fb0c fc02 	mul.w	ip, ip, r2
 8008d4a:	ea4f 1cec 	mov.w	ip, ip, asr #7
 8008d4e:	fb05 f303 	mul.w	r3, r5, r3
 8008d52:	45a4      	cmp	ip, r4
 8008d54:	69c2      	ldr	r2, [r0, #28]
 8008d56:	bfd4      	ite	le
 8008d58:	2500      	movle	r5, #0
 8008d5a:	2501      	movgt	r5, #1
 8008d5c:	fb03 f307 	mul.w	r3, r3, r7
 8008d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d64:	7842      	ldrb	r2, [r0, #1]
 8008d66:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d6a:	b21a      	sxth	r2, r3
 8008d6c:	800a      	strh	r2, [r1, #0]
 8008d6e:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 8008d72:	8182      	strh	r2, [r0, #12]
 8008d74:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 8008d78:	b99e      	cbnz	r6, 8008da2 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 8008d7a:	b355      	cbz	r5, 8008dd2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8008d7c:	45a4      	cmp	ip, r4
 8008d7e:	dc25      	bgt.n	8008dcc <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 8008d80:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 8008d84:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 8008d88:	3301      	adds	r3, #1
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8008d92:	d81e      	bhi.n	8008dd2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8008d94:	2300      	movs	r3, #0
 8008d96:	78c2      	ldrb	r2, [r0, #3]
 8008d98:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8008d9c:	7002      	strb	r2, [r0, #0]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 8008da8:	bfb8      	it	lt
 8008daa:	425b      	neglt	r3, r3
 8008dac:	429a      	cmp	r2, r3
 8008dae:	dc14      	bgt.n	8008dda <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 8008db0:	2200      	movs	r2, #0
 8008db2:	4613      	mov	r3, r2
 8008db4:	4616      	mov	r6, r2
 8008db6:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 8008dba:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 8008dbe:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8008dc2:	b135      	cbz	r5, 8008dd2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 8008dc4:	45a4      	cmp	ip, r4
 8008dc6:	dddb      	ble.n	8008d80 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	d0d9      	beq.n	8008d80 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 8008dd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008dd6:	f7ff b86f 	b.w	8007eb8 <SPD_IsMecSpeedReliable>
 8008dda:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 8008dde:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 8008de2:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 8008de6:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8008dea:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8008dee:	fb93 f3fe 	sdiv	r3, r3, lr
 8008df2:	fb03 f202 	mul.w	r2, r3, r2
 8008df6:	2a00      	cmp	r2, #0
 8008df8:	bfb8      	it	lt
 8008dfa:	323f      	addlt	r2, #63	; 0x3f
 8008dfc:	1192      	asrs	r2, r2, #6
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	fb07 f707 	mul.w	r7, r7, r7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	fb06 7606 	mla	r6, r6, r6, r7
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 8008e12:	bfb8      	it	lt
 8008e14:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8008e18:	1192      	asrs	r2, r2, #6
 8008e1a:	fb07 3212 	mls	r2, r7, r2, r3
 8008e1e:	4296      	cmp	r6, r2
 8008e20:	bfd4      	ite	le
 8008e22:	2200      	movle	r2, #0
 8008e24:	2201      	movgt	r2, #1
 8008e26:	e7c6      	b.n	8008db6 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8008e28:	4664      	mov	r4, ip
 8008e2a:	4665      	mov	r5, ip
 8008e2c:	e785      	b.n	8008d3a <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 8008e2e:	bf00      	nop

08008e30 <STO_PLL_CalcAvrgElSpeedDpp>:
 8008e30:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8008e34:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8008e38:	b470      	push	{r4, r5, r6}
 8008e3a:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 8008e3e:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 8008e42:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8008e46:	b2a6      	uxth	r6, r4
 8008e48:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8008e4c:	1af3      	subs	r3, r6, r3
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	442a      	add	r2, r5
 8008e52:	b19b      	cbz	r3, 8008e7c <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8008e54:	440b      	add	r3, r1
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	b219      	sxth	r1, r3
 8008e5a:	428c      	cmp	r4, r1
 8008e5c:	bfdc      	itt	le
 8008e5e:	1b9b      	suble	r3, r3, r6
 8008e60:	b219      	sxthle	r1, r3
 8008e62:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8008e66:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 8008e70:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8008e74:	4113      	asrs	r3, r2
 8008e76:	81c3      	strh	r3, [r0, #14]
 8008e78:	bc70      	pop	{r4, r5, r6}
 8008e7a:	4770      	bx	lr
 8008e7c:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	e7f3      	b.n	8008e6c <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

08008e84 <STO_PLL_Clear>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 8008e92:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 8008e96:	8081      	strh	r1, [r0, #4]
 8008e98:	81c1      	strh	r1, [r0, #14]
 8008e9a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 8008e9e:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 8008ea2:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 8008ea6:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 8008eaa:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 8008eae:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 8008eb2:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 8008eb6:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 8008eba:	b132      	cbz	r2, 8008eca <STO_PLL_Clear+0x46>
 8008ebc:	3a01      	subs	r2, #1
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	3201      	adds	r2, #1
 8008ec2:	0052      	lsls	r2, r2, #1
 8008ec4:	3074      	adds	r0, #116	; 0x74
 8008ec6:	f000 f92b 	bl	8009120 <memset>
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 8008ed0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8008ed4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008edc:	f7fd bde4 	b.w	8006aa8 <PID_SetIntegralTerm>

08008ee0 <STO_PLL_Init>:
 8008ee0:	b538      	push	{r3, r4, r5, lr}
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 8008ee8:	4b18      	ldr	r3, [pc, #96]	; (8008f4c <STO_PLL_Init+0x6c>)
 8008eea:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 8008eee:	fb93 f3f5 	sdiv	r3, r3, r5
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	b21b      	sxth	r3, r3
 8008ef8:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8008efc:	8662      	strh	r2, [r4, #50]	; 0x32
 8008efe:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 8008f02:	b303      	cbz	r3, 8008f46 <STO_PLL_Init+0x66>
 8008f04:	4608      	mov	r0, r1
 8008f06:	e000      	b.n	8008f0a <STO_PLL_Init+0x2a>
 8008f08:	4611      	mov	r1, r2
 8008f0a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008f0e:	1c4a      	adds	r2, r1, #1
 8008f10:	105b      	asrs	r3, r3, #1
 8008f12:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8008f16:	b292      	uxth	r2, r2
 8008f18:	d1f6      	bne.n	8008f08 <STO_PLL_Init+0x28>
 8008f1a:	b200      	sxth	r0, r0
 8008f1c:	fb05 f200 	mul.w	r2, r5, r0
 8008f20:	8661      	strh	r1, [r4, #50]	; 0x32
 8008f22:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <STO_PLL_Init+0x70>)
 8008f24:	8620      	strh	r0, [r4, #48]	; 0x30
 8008f26:	fb83 1302 	smull	r1, r3, r3, r2
 8008f2a:	17d2      	asrs	r2, r2, #31
 8008f2c:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 8008f30:	8562      	strh	r2, [r4, #42]	; 0x2a
 8008f32:	4620      	mov	r0, r4
 8008f34:	f7ff ffa6 	bl	8008e84 <STO_PLL_Clear>
 8008f38:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008f3c:	f7fd fda0 	bl	8006a80 <PID_HandleInit>
 8008f40:	2300      	movs	r3, #0
 8008f42:	8263      	strh	r3, [r4, #18]
 8008f44:	bd38      	pop	{r3, r4, r5, pc}
 8008f46:	462a      	mov	r2, r5
 8008f48:	4608      	mov	r0, r1
 8008f4a:	e7ea      	b.n	8008f22 <STO_PLL_Init+0x42>
 8008f4c:	000fea5e 	.word	0x000fea5e
 8008f50:	06488dc5 	.word	0x06488dc5

08008f54 <STO_PLL_IsObserverConverged>:
 8008f54:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 8008f58:	4603      	mov	r3, r0
 8008f5a:	b10a      	cbz	r2, 8008f60 <STO_PLL_IsObserverConverged+0xc>
 8008f5c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8008f60:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d143      	bne.n	8008ff0 <STO_PLL_IsObserverConverged+0x9c>
 8008f68:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008f6c:	b430      	push	{r4, r5}
 8008f6e:	fb02 f501 	mul.w	r5, r2, r1
 8008f72:	2d00      	cmp	r5, #0
 8008f74:	460c      	mov	r4, r1
 8008f76:	dd34      	ble.n	8008fe2 <STO_PLL_IsObserverConverged+0x8e>
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	bfbc      	itt	lt
 8008f7c:	4252      	neglt	r2, r2
 8008f7e:	b212      	sxthlt	r2, r2
 8008f80:	2900      	cmp	r1, #0
 8008f82:	bfbc      	itt	lt
 8008f84:	4249      	neglt	r1, r1
 8008f86:	b20c      	sxthlt	r4, r1
 8008f88:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 8008f8c:	b359      	cbz	r1, 8008fe6 <STO_PLL_IsObserverConverged+0x92>
 8008f8e:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 8008f92:	b291      	uxth	r1, r2
 8008f94:	428d      	cmp	r5, r1
 8008f96:	d226      	bcs.n	8008fe6 <STO_PLL_IsObserverConverged+0x92>
 8008f98:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 8008f9c:	fb04 f101 	mul.w	r1, r4, r1
 8008fa0:	2900      	cmp	r1, #0
 8008fa2:	bfb8      	it	lt
 8008fa4:	310f      	addlt	r1, #15
 8008fa6:	f341 110f 	sbfx	r1, r1, #4, #16
 8008faa:	428a      	cmp	r2, r1
 8008fac:	db1b      	blt.n	8008fe6 <STO_PLL_IsObserverConverged+0x92>
 8008fae:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 8008fb2:	fb04 f101 	mul.w	r1, r4, r1
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	bfb8      	it	lt
 8008fba:	310f      	addlt	r1, #15
 8008fbc:	f341 110f 	sbfx	r1, r1, #4, #16
 8008fc0:	428a      	cmp	r2, r1
 8008fc2:	dc10      	bgt.n	8008fe6 <STO_PLL_IsObserverConverged+0x92>
 8008fc4:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8008fc8:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 8008fcc:	3201      	adds	r2, #1
 8008fce:	b2d2      	uxtb	r2, r2
 8008fd0:	4291      	cmp	r1, r2
 8008fd2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8008fd6:	d804      	bhi.n	8008fe2 <STO_PLL_IsObserverConverged+0x8e>
 8008fd8:	2001      	movs	r0, #1
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8008fe0:	701a      	strb	r2, [r3, #0]
 8008fe2:	bc30      	pop	{r4, r5}
 8008fe4:	4770      	bx	lr
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8008fec:	bc30      	pop	{r4, r5}
 8008fee:	4770      	bx	lr
 8008ff0:	2001      	movs	r0, #1
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	4770      	bx	lr

08008ffc <STO_PLL_GetEstimatedBemf>:
 8008ffc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8008ffe:	2000      	movs	r0, #0
 8009000:	b29a      	uxth	r2, r3
 8009002:	f362 000f 	bfi	r0, r2, #0, #16
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	b082      	sub	sp, #8
 800900a:	f363 401f 	bfi	r0, r3, #16, #16
 800900e:	b002      	add	sp, #8
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop

08009014 <STO_PLL_GetEstimatedCurrent>:
 8009014:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8009018:	b410      	push	{r4}
 800901a:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800901e:	4122      	asrs	r2, r4
 8009020:	b292      	uxth	r2, r2
 8009022:	4123      	asrs	r3, r4
 8009024:	2100      	movs	r1, #0
 8009026:	b29b      	uxth	r3, r3
 8009028:	f362 010f 	bfi	r1, r2, #0, #16
 800902c:	f363 411f 	bfi	r1, r3, #16, #16
 8009030:	b083      	sub	sp, #12
 8009032:	4608      	mov	r0, r1
 8009034:	b003      	add	sp, #12
 8009036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903a:	4770      	bx	lr

0800903c <STO_PLL_GetObserverGains>:
 800903c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8009040:	800b      	strh	r3, [r1, #0]
 8009042:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8009046:	8013      	strh	r3, [r2, #0]
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop

0800904c <STO_PLL_SetObserverGains>:
 800904c:	8441      	strh	r1, [r0, #34]	; 0x22
 800904e:	84c2      	strh	r2, [r0, #38]	; 0x26
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop

08009054 <STO_GetPLLGains>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800905a:	4620      	mov	r0, r4
 800905c:	460e      	mov	r6, r1
 800905e:	4615      	mov	r5, r2
 8009060:	f7fd fd1a 	bl	8006a98 <PID_GetKP>
 8009064:	8030      	strh	r0, [r6, #0]
 8009066:	4620      	mov	r0, r4
 8009068:	f7fd fd1a 	bl	8006aa0 <PID_GetKI>
 800906c:	8028      	strh	r0, [r5, #0]
 800906e:	bd70      	pop	{r4, r5, r6, pc}

08009070 <STO_SetPLLGains>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8009076:	4615      	mov	r5, r2
 8009078:	4620      	mov	r0, r4
 800907a:	f7fd fd09 	bl	8006a90 <PID_SetKP>
 800907e:	4629      	mov	r1, r5
 8009080:	4620      	mov	r0, r4
 8009082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009086:	f7fd bd05 	b.w	8006a94 <PID_SetKI>
 800908a:	bf00      	nop

0800908c <STO_OTF_ResetPLL>:
 800908c:	6800      	ldr	r0, [r0, #0]
 800908e:	2100      	movs	r1, #0
 8009090:	3034      	adds	r0, #52	; 0x34
 8009092:	f7fd bd09 	b.w	8006aa8 <PID_SetIntegralTerm>
 8009096:	bf00      	nop

08009098 <STO_ResetPLL>:
 8009098:	3034      	adds	r0, #52	; 0x34
 800909a:	2100      	movs	r1, #0
 800909c:	f7fd bd04 	b.w	8006aa8 <PID_SetIntegralTerm>

080090a0 <STO_PLL_GetEstimatedBemfLevel>:
 80090a0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop

080090a8 <STO_PLL_GetObservedBemfLevel>:
 80090a8:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop

080090b0 <STO_PLL_IsVarianceTight>:
 80090b0:	6803      	ldr	r3, [r0, #0]
 80090b2:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80090b6:	4770      	bx	lr

080090b8 <STO_PLL_ForceConvergency1>:
 80090b8:	6803      	ldr	r3, [r0, #0]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop

080090c4 <STO_PLL_ForceConvergency2>:
 80090c4:	6803      	ldr	r3, [r0, #0]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop

080090d0 <STO_SetDirection>:
 80090d0:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4d0d      	ldr	r5, [pc, #52]	; (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090de:	1b64      	subs	r4, r4, r5
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2600      	movs	r6, #0
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4d0b      	ldr	r5, [pc, #44]	; (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	; (800911c <__libc_init_array+0x44>)
 80090ec:	f000 f820 	bl	8009130 <_init>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2600      	movs	r6, #0
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	080093fc 	.word	0x080093fc
 8009114:	080093fc 	.word	0x080093fc
 8009118:	080093fc 	.word	0x080093fc
 800911c:	08009400 	.word	0x08009400

08009120 <memset>:
 8009120:	4402      	add	r2, r0
 8009122:	4603      	mov	r3, r0
 8009124:	4293      	cmp	r3, r2
 8009126:	d100      	bne.n	800912a <memset+0xa>
 8009128:	4770      	bx	lr
 800912a:	f803 1b01 	strb.w	r1, [r3], #1
 800912e:	e7f9      	b.n	8009124 <memset+0x4>

08009130 <_init>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr

0800913c <_fini>:
 800913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913e:	bf00      	nop
 8009140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009142:	bc08      	pop	{r3}
 8009144:	469e      	mov	lr, r3
 8009146:	4770      	bx	lr
