
custom_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d5c  08007d5c  0002068c  2**0
                  CONTENTS
  4 .ARM          00000000  08007d5c  08007d5c  0002068c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d5c  08007d5c  0002068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d5c  08007d5c  00017d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d60  08007d60  00017d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000068c  20000000  08007d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  2000068c  080083f0  0002068c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a30  080083f0  00020a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003468e  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00046dec  00000000  00000000  00054d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a93  00000000  00000000  0009bb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  000a25d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e4952  00000000  00000000  000a3c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003998  00000000  00000000  001885d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0001f2cd  00000000  00000000  0018bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000282ac  00000000  00000000  001ab235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d2  00000000  00000000  001d34e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046f0  00000000  00000000  001d35b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000068c 	.word	0x2000068c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a5c 	.word	0x08007a5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000690 	.word	0x20000690
 80001c4:	08007a5c 	.word	0x08007a5c

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001cc:	480d      	ldr	r0, [pc, #52]	; (8000204 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ce:	490e      	ldr	r1, [pc, #56]	; (8000208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001d0:	4a0e      	ldr	r2, [pc, #56]	; (800020c <LoopForever+0xe>)
  movs r3, #0
 80001d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001d4:	e002      	b.n	80001dc <LoopCopyDataInit>

080001d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001da:	3304      	adds	r3, #4

080001dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001e0:	d3f9      	bcc.n	80001d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001e4:	4c0b      	ldr	r4, [pc, #44]	; (8000214 <LoopForever+0x16>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001e8:	e001      	b.n	80001ee <LoopFillZerobss>

080001ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001ec:	3204      	adds	r2, #4

080001ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001f0:	d3fb      	bcc.n	80001ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f002 fd99 	bl	8002d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f007 fc05 	bl	8007a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 f907 	bl	800040c <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000208:	2000068c 	.word	0x2000068c
  ldr r2, =_sidata
 800020c:	08007d64 	.word	0x08007d64
  ldr r2, =_sbss
 8000210:	2000068c 	.word	0x2000068c
  ldr r4, =_ebss
 8000214:	20000a30 	.word	0x20000a30

08000218 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC3_IRQHandler>
	...

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	2400      	movs	r4, #0
{
 8000220:	b0a1      	sub	sp, #132	; 0x84
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000222:	4621      	mov	r1, r4
 8000224:	223c      	movs	r2, #60	; 0x3c
 8000226:	a811      	add	r0, sp, #68	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	e9cd 4400 	strd	r4, r4, [sp]
 800022c:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000230:	940b      	str	r4, [sp, #44]	; 0x2c
 8000232:	9409      	str	r4, [sp, #36]	; 0x24
 8000234:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000236:	9404      	str	r4, [sp, #16]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000238:	2502      	movs	r5, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023a:	f007 fc07 	bl	8007a4c <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023e:	2601      	movs	r6, #1
 8000240:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000246:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	e9cd 520d 	strd	r5, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000258:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f003 fb85 	bl	800396c <HAL_RCC_OscConfig>
 8000262:	b108      	cbz	r0, 8000268 <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000264:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000266:	e7fe      	b.n	8000266 <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026a:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000274:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000276:	240f      	movs	r4, #15
 8000278:	2502      	movs	r5, #2
 800027a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800027e:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000282:	f003 fe5f 	bl	8003f44 <HAL_RCC_ClockConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	b108      	cbz	r0, 800028e <SystemClock_Config+0x72>
 800028a:	b672      	cpsid	i
  while (1)
 800028c:	e7fe      	b.n	800028c <SystemClock_Config+0x70>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800028e:	f241 0101 	movw	r1, #4097	; 0x1001
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000292:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000296:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000298:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 800029a:	9111      	str	r1, [sp, #68]	; 0x44
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 800029c:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	f003 ffb1 	bl	8004204 <HAL_RCCEx_PeriphCLKConfig>
 80002a2:	b108      	cbz	r0, 80002a8 <SystemClock_Config+0x8c>
 80002a4:	b672      	cpsid	i
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <SystemClock_Config+0x8a>
}
 80002a8:	b021      	add	sp, #132	; 0x84
 80002aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002ac <SPIread>:
void SPIread (uint8_t address, uint8_t *inputBuffer) {
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	b085      	sub	sp, #20
 80002b0:	4605      	mov	r5, r0
	uint8_t outputBuffer [5] = {address, 0x00, 0x00, 0x00, 0x00};
 80002b2:	2200      	movs	r2, #0
void SPIread (uint8_t address, uint8_t *inputBuffer) {
 80002b4:	460c      	mov	r4, r1
	uint8_t outputBuffer [5] = {address, 0x00, 0x00, 0x00, 0x00};
 80002b6:	f88d 5008 	strb.w	r5, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002ba:	2110      	movs	r1, #16
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 80002bc:	2501      	movs	r5, #1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	uint8_t outputBuffer [5] = {address, 0x00, 0x00, 0x00, 0x00};
 80002c2:	f88d 2009 	strb.w	r2, [sp, #9]
 80002c6:	f8ad 200a 	strh.w	r2, [sp, #10]
 80002ca:	f88d 200c 	strb.w	r2, [sp, #12]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80002ce:	f003 fb47 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 80002d2:	4622      	mov	r2, r4
 80002d4:	2305      	movs	r3, #5
 80002d6:	a902      	add	r1, sp, #8
 80002d8:	9500      	str	r5, [sp, #0]
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <SPIread+0x44>)
 80002dc:	f004 fa2a 	bl	8004734 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80002e0:	462a      	mov	r2, r5
 80002e2:	2110      	movs	r1, #16
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f003 fb3a 	bl	8003960 <HAL_GPIO_WritePin>
}
 80002ec:	b005      	add	sp, #20
 80002ee:	bd30      	pop	{r4, r5, pc}
 80002f0:	20000800 	.word	0x20000800

080002f4 <configureDriver>:
void configureDriver (void) {
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 80002f6:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <configureDriver+0xe0>)
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 80002f8:	4d37      	ldr	r5, [pc, #220]	; (80003d8 <configureDriver+0xe4>)
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 80002fa:	781a      	ldrb	r2, [r3, #0]
 80002fc:	789c      	ldrb	r4, [r3, #2]
 80002fe:	785f      	ldrb	r7, [r3, #1]
 8000300:	78de      	ldrb	r6, [r3, #3]
void configureDriver (void) {
 8000302:	b087      	sub	sp, #28
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 8000304:	2380      	movs	r3, #128	; 0x80
 8000306:	f88d 2009 	strb.w	r2, [sp, #9]
 800030a:	f88d 400b 	strb.w	r4, [sp, #11]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 8000310:	2401      	movs	r4, #1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000312:	2110      	movs	r1, #16
 8000314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 8000318:	f88d 600c 	strb.w	r6, [sp, #12]
 800031c:	f88d 3008 	strb.w	r3, [sp, #8]
 8000320:	f88d 700a 	strb.w	r7, [sp, #10]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000324:	f003 fb1c 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 8000328:	aa04      	add	r2, sp, #16
 800032a:	a902      	add	r1, sp, #8
 800032c:	2305      	movs	r3, #5
 800032e:	4628      	mov	r0, r5
 8000330:	9400      	str	r4, [sp, #0]
 8000332:	f004 f9ff 	bl	8004734 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000336:	4622      	mov	r2, r4
 8000338:	2110      	movs	r1, #16
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f003 fb0f 	bl	8003960 <HAL_GPIO_WritePin>
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 8000342:	4b26      	ldr	r3, [pc, #152]	; (80003dc <configureDriver+0xe8>)
 8000344:	781a      	ldrb	r2, [r3, #0]
 8000346:	7859      	ldrb	r1, [r3, #1]
 8000348:	7898      	ldrb	r0, [r3, #2]
 800034a:	f88d 2009 	strb.w	r2, [sp, #9]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	f88d 100a 	strb.w	r1, [sp, #10]
 8000354:	f88d 000b 	strb.w	r0, [sp, #11]
 8000358:	2689      	movs	r6, #137	; 0x89
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2110      	movs	r1, #16
 800035e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 8000362:	f88d 300c 	strb.w	r3, [sp, #12]
 8000366:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800036a:	f003 faf9 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 800036e:	aa04      	add	r2, sp, #16
 8000370:	a902      	add	r1, sp, #8
 8000372:	2305      	movs	r3, #5
 8000374:	9400      	str	r4, [sp, #0]
 8000376:	4628      	mov	r0, r5
 8000378:	f004 f9dc 	bl	8004734 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800037c:	4622      	mov	r2, r4
 800037e:	2110      	movs	r1, #16
 8000380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000384:	f003 faec 	bl	8003960 <HAL_GPIO_WritePin>
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <configureDriver+0xec>)
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	7859      	ldrb	r1, [r3, #1]
 800038e:	7898      	ldrb	r0, [r3, #2]
 8000390:	f88d 2009 	strb.w	r2, [sp, #9]
 8000394:	78db      	ldrb	r3, [r3, #3]
 8000396:	f88d 100a 	strb.w	r1, [sp, #10]
 800039a:	f88d 000b 	strb.w	r0, [sp, #11]
 800039e:	268a      	movs	r6, #138	; 0x8a
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2110      	movs	r1, #16
 80003a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 80003a8:	f88d 300c 	strb.w	r3, [sp, #12]
 80003ac:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003b0:	f003 fad6 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 80003b4:	aa04      	add	r2, sp, #16
 80003b6:	a902      	add	r1, sp, #8
 80003b8:	2305      	movs	r3, #5
 80003ba:	9400      	str	r4, [sp, #0]
 80003bc:	4628      	mov	r0, r5
 80003be:	f004 f9b9 	bl	8004734 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80003c2:	4622      	mov	r2, r4
 80003c4:	2110      	movs	r1, #16
 80003c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ca:	f003 fac9 	bl	8003960 <HAL_GPIO_WritePin>
}
 80003ce:	b007      	add	sp, #28
 80003d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000004 	.word	0x20000004
 80003d8:	20000800 	.word	0x20000800
 80003dc:	20000008 	.word	0x20000008
 80003e0:	20000000 	.word	0x20000000

080003e4 <resetDriver>:
void resetDriver (void) {
 80003e4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80003e6:	4c08      	ldr	r4, [pc, #32]	; (8000408 <resetDriver+0x24>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	4620      	mov	r0, r4
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	f003 fab7 	bl	8003960 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 80003f2:	2032      	movs	r0, #50	; 0x32
 80003f4:	f002 fcea 	bl	8002dcc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80003f8:	4620      	mov	r0, r4
 80003fa:	2201      	movs	r2, #1
}
 80003fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	f003 baad 	b.w	8003960 <HAL_GPIO_WritePin>
 8000406:	bf00      	nop
 8000408:	48000400 	.word	0x48000400

0800040c <main>:
{
 800040c:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	2500      	movs	r5, #0
{
 8000410:	b0a2      	sub	sp, #136	; 0x88
  HAL_Init();
 8000412:	f002 fcb7 	bl	8002d84 <HAL_Init>
  SystemClock_Config();
 8000416:	f7ff ff01 	bl	800021c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
 800041e:	e9cd 5518 	strd	r5, r5, [sp, #96]	; 0x60
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000422:	4bb0      	ldr	r3, [pc, #704]	; (80006e4 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	951a      	str	r5, [sp, #104]	; 0x68
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000426:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8000428:	48af      	ldr	r0, [pc, #700]	; (80006e8 <main+0x2dc>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800042a:	4cb0      	ldr	r4, [pc, #704]	; (80006ec <main+0x2e0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000430:	615a      	str	r2, [r3, #20]
 8000432:	695a      	ldr	r2, [r3, #20]
 8000434:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000442:	615a      	str	r2, [r3, #20]
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800044a:	9202      	str	r2, [sp, #8]
 800044c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044e:	695a      	ldr	r2, [r3, #20]
 8000450:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000454:	615a      	str	r2, [r3, #20]
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800045c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	f44f 6180 	mov.w	r1, #1024	; 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8000466:	f003 fa7b 	bl	8003960 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI1_NSS_SOFT_GPIO_Port, SPI1_NSS_SOFT_Pin, GPIO_PIN_RESET);
 800046a:	462a      	mov	r2, r5
 800046c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f003 fa74 	bl	8003960 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8000478:	2601      	movs	r6, #1
 800047a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800047e:	2301      	movs	r3, #1
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8000480:	4899      	ldr	r0, [pc, #612]	; (80006e8 <main+0x2dc>)
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8000482:	2703      	movs	r7, #3
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8000484:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 8000486:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800048a:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 800048e:	f003 f97d 	bl	800378c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8000492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000496:	2300      	movs	r3, #0
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8000498:	4893      	ldr	r0, [pc, #588]	; (80006e8 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 800049c:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 800049e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 80004a2:	f003 f973 	bl	800378c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI1_NSS_SOFT_Pin;
 80004a6:	2301      	movs	r3, #1
 80004a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  HAL_GPIO_Init(SPI1_NSS_SOFT_GPIO_Port, &GPIO_InitStruct);
 80004ac:	a916      	add	r1, sp, #88	; 0x58
 80004ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = SPI1_NSS_SOFT_Pin;
 80004b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80004b6:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  HAL_GPIO_Init(SPI1_NSS_SOFT_GPIO_Port, &GPIO_InitStruct);
 80004ba:	f003 f967 	bl	800378c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80004be:	4629      	mov	r1, r5
 80004c0:	2228      	movs	r2, #40	; 0x28
 80004c2:	a816      	add	r0, sp, #88	; 0x58
  hadc1.Init.NbrOfConversion = 1;
 80004c4:	f04f 0801 	mov.w	r8, #1
  ADC_MultiModeTypeDef multimode = {0};
 80004c8:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
 80004cc:	9510      	str	r5, [sp, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80004ce:	f04f 0920 	mov.w	r9, #32
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80004d2:	f007 fabb 	bl	8007a4c <memset>
  hadc1.Instance = ADC1;
 80004d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004de:	2304      	movs	r3, #4
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004e0:	8325      	strh	r5, [r4, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004e2:	4620      	mov	r0, r4
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e4:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004e8:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004ec:	60a5      	str	r5, [r4, #8]
  hadc1.Instance = ADC1;
 80004ee:	6021      	str	r1, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80004f0:	6062      	str	r2, [r4, #4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f2:	6163      	str	r3, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 80004f4:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004f8:	f8c4 8010 	str.w	r8, [r4, #16]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004fc:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000500:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000504:	f002 fcac 	bl	8002e60 <HAL_ADC_Init>
 8000508:	b108      	cbz	r0, 800050e <main+0x102>
 800050a:	b672      	cpsid	i
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x100>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800050e:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000510:	a90e      	add	r1, sp, #56	; 0x38
 8000512:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000514:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000516:	f003 f82f 	bl	8003578 <HAL_ADCEx_MultiModeConfigChannel>
 800051a:	b108      	cbz	r0, 8000520 <main+0x114>
 800051c:	b672      	cpsid	i
  while (1)
 800051e:	e7fe      	b.n	800051e <main+0x112>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000520:	2200      	movs	r2, #0
 8000522:	2340      	movs	r3, #64	; 0x40
 8000524:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000528:	2201      	movs	r2, #1
 800052a:	2301      	movs	r3, #1
 800052c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000530:	2503      	movs	r5, #3
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000532:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000536:	2203      	movs	r2, #3
 8000538:	2300      	movs	r3, #0
 800053a:	2600      	movs	r6, #0
 800053c:	2700      	movs	r7, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800053e:	a916      	add	r1, sp, #88	; 0x58
 8000540:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000542:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8000546:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  sConfigInjected.QueueInjectedContext = ENABLE;
 800054a:	f88d 8076 	strb.w	r8, [sp, #118]	; 0x76
  sConfigInjected.InjectedNbrOfConversion = 3;
 800054e:	951c      	str	r5, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000550:	f002 fdc8 	bl	80030e4 <HAL_ADCEx_InjectedConfigChannel>
 8000554:	b108      	cbz	r0, 800055a <main+0x14e>
 8000556:	b672      	cpsid	i
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x14c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800055a:	2202      	movs	r2, #2
 800055c:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800055e:	a916      	add	r1, sp, #88	; 0x58
 8000560:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000562:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000566:	f002 fdbd 	bl	80030e4 <HAL_ADCEx_InjectedConfigChannel>
 800056a:	b108      	cbz	r0, 8000570 <main+0x164>
 800056c:	b672      	cpsid	i
  while (1)
 800056e:	e7fe      	b.n	800056e <main+0x162>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000570:	4620      	mov	r0, r4
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000572:	2203      	movs	r2, #3
 8000574:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000576:	a916      	add	r1, sp, #88	; 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000578:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800057c:	f002 fdb2 	bl	80030e4 <HAL_ADCEx_InjectedConfigChannel>
 8000580:	4604      	mov	r4, r0
 8000582:	b108      	cbz	r0, 8000588 <main+0x17c>
 8000584:	b672      	cpsid	i
  while (1)
 8000586:	e7fe      	b.n	8000586 <main+0x17a>
  htim1.Instance = TIM1;
 8000588:	4d59      	ldr	r5, [pc, #356]	; (80006f0 <main+0x2e4>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800058a:	9008      	str	r0, [sp, #32]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800058c:	4601      	mov	r1, r0
 800058e:	222c      	movs	r2, #44	; 0x2c
 8000590:	a816      	add	r0, sp, #88	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000592:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000596:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 800059a:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800059e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80005a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80005aa:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ac:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005ae:	f007 fa4d 	bl	8007a4c <memset>
  htim1.Instance = TIM1;
 80005b2:	4950      	ldr	r1, [pc, #320]	; (80006f4 <main+0x2e8>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80005b4:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80005b6:	f44f 6216 	mov.w	r2, #2400	; 0x960
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005ba:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005be:	4628      	mov	r0, r5
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c0:	e9c5 8405 	strd	r8, r4, [r5, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005c4:	e9c5 2303 	strd	r2, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80005c8:	f8c5 9008 	str.w	r9, [r5, #8]
  htim1.Instance = TIM1;
 80005cc:	6029      	str	r1, [r5, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005ce:	f004 fabb 	bl	8004b48 <HAL_TIM_Base_Init>
 80005d2:	b108      	cbz	r0, 80005d8 <main+0x1cc>
 80005d4:	b672      	cpsid	i
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x1ca>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005d8:	4628      	mov	r0, r5
 80005da:	f004 fb3b 	bl	8004c54 <HAL_TIM_PWM_Init>
 80005de:	b108      	cbz	r0, 80005e4 <main+0x1d8>
 80005e0:	b672      	cpsid	i
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x1d6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80005e4:	2206      	movs	r2, #6
 80005e6:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80005e8:	a908      	add	r1, sp, #32
 80005ea:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80005ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80005f0:	f004 fbb4 	bl	8004d5c <HAL_TIM_SlaveConfigSynchro>
 80005f4:	b108      	cbz	r0, 80005fa <main+0x1ee>
 80005f6:	b672      	cpsid	i
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x1ec>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80005fa:	2270      	movs	r2, #112	; 0x70
 80005fc:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fe:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000600:	a904      	add	r1, sp, #16
 8000602:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000604:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000608:	f004 fd96 	bl	8005138 <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	4602      	mov	r2, r0
 800060e:	b108      	cbz	r0, 8000614 <main+0x208>
 8000610:	b672      	cpsid	i
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0x206>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000614:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000616:	2460      	movs	r4, #96	; 0x60
 8000618:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800061a:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061c:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8000620:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8000624:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000628:	9214      	str	r2, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800062a:	f004 fc53 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 800062e:	b108      	cbz	r0, 8000634 <main+0x228>
 8000630:	b672      	cpsid	i
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0x226>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000634:	482e      	ldr	r0, [pc, #184]	; (80006f0 <main+0x2e4>)
 8000636:	2204      	movs	r2, #4
 8000638:	a90e      	add	r1, sp, #56	; 0x38
 800063a:	f004 fc4b 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 800063e:	b108      	cbz	r0, 8000644 <main+0x238>
 8000640:	b672      	cpsid	i
  while (1)
 8000642:	e7fe      	b.n	8000642 <main+0x236>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000644:	482a      	ldr	r0, [pc, #168]	; (80006f0 <main+0x2e4>)
 8000646:	2208      	movs	r2, #8
 8000648:	a90e      	add	r1, sp, #56	; 0x38
 800064a:	f004 fc43 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 800064e:	b108      	cbz	r0, 8000654 <main+0x248>
 8000650:	b672      	cpsid	i
  while (1)
 8000652:	e7fe      	b.n	8000652 <main+0x246>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000654:	4826      	ldr	r0, [pc, #152]	; (80006f0 <main+0x2e4>)
 8000656:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000658:	2470      	movs	r4, #112	; 0x70
 800065a:	f640 155f 	movw	r5, #2399	; 0x95f
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800065e:	220c      	movs	r2, #12
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000660:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000664:	f004 fc36 	bl	8004ed4 <HAL_TIM_PWM_ConfigChannel>
 8000668:	4603      	mov	r3, r0
 800066a:	b108      	cbz	r0, 8000670 <main+0x264>
 800066c:	b672      	cpsid	i
  while (1)
 800066e:	e7fe      	b.n	800066e <main+0x262>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000670:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000672:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000676:	2519      	movs	r5, #25
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8000682:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000686:	2400      	movs	r4, #0
 8000688:	2200      	movs	r2, #0
 800068a:	2303      	movs	r3, #3
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800068c:	4818      	ldr	r0, [pc, #96]	; (80006f0 <main+0x2e4>)
 800068e:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000690:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8000694:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8000698:	2500      	movs	r5, #0
 800069a:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 800069e:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 80006a2:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006a6:	f004 fd8b 	bl	80051c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006aa:	4604      	mov	r4, r0
 80006ac:	b108      	cbz	r0, 80006b2 <main+0x2a6>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <main+0x2a4>
  HAL_TIM_MspPostInit(&htim1);
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <main+0x2e4>)
  huart1.Instance = USART1;
 80006b4:	4d10      	ldr	r5, [pc, #64]	; (80006f8 <main+0x2ec>)
  HAL_TIM_MspPostInit(&htim1);
 80006b6:	f001 fd1d 	bl	80020f4 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <main+0x2f0>)
  huart1.Init.BaudRate = 115200;
 80006bc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	220c      	movs	r2, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 80006c2:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 80006d0:	e9c0 5100 	strd	r5, r1, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	6142      	str	r2, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d6:	f004 fe6f 	bl	80053b8 <HAL_UART_Init>
 80006da:	4604      	mov	r4, r0
 80006dc:	b180      	cbz	r0, 8000700 <main+0x2f4>
 80006de:	b672      	cpsid	i
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0x2d4>
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000400 	.word	0x48000400
 80006ec:	200006e0 	.word	0x200006e0
 80006f0:	200007b4 	.word	0x200007b4
 80006f4:	40012c00 	.word	0x40012c00
 80006f8:	40013800 	.word	0x40013800
 80006fc:	20000730 	.word	0x20000730
  MX_MotorControl_Init();
 8000700:	f001 fa38 	bl	8001b74 <MX_MotorControl_Init>
  hspi1.Instance = SPI1;
 8000704:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <main+0x3bc>)
 8000706:	4a31      	ldr	r2, [pc, #196]	; (80007cc <main+0x3c0>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070a:	f44f 7082 	mov.w	r0, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800070e:	f44f 66e0 	mov.w	r6, #1792	; 0x700
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000712:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000716:	2128      	movs	r1, #40	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000718:	2207      	movs	r2, #7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	6058      	str	r0, [r3, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	60de      	str	r6, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071e:	619d      	str	r5, [r3, #24]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000720:	4618      	mov	r0, r3
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000722:	2602      	movs	r6, #2
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000724:	2501      	movs	r5, #1
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000726:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800072a:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	609c      	str	r4, [r3, #8]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	629c      	str	r4, [r3, #40]	; 0x28
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000732:	e9c3 6504 	strd	r6, r5, [r3, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000736:	61d9      	str	r1, [r3, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073a:	f003 ff75 	bl	8004628 <HAL_SPI_Init>
 800073e:	4604      	mov	r4, r0
 8000740:	b108      	cbz	r0, 8000746 <main+0x33a>
 8000742:	b672      	cpsid	i
  while (1)
 8000744:	e7fe      	b.n	8000744 <main+0x338>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000746:	462a      	mov	r2, r5
 8000748:	2104      	movs	r1, #4
 800074a:	2018      	movs	r0, #24
 800074c:	f002 ffb8 	bl	80036c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000750:	2018      	movs	r0, #24
 8000752:	f002 ffed 	bl	8003730 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000756:	4622      	mov	r2, r4
 8000758:	4621      	mov	r1, r4
 800075a:	2019      	movs	r0, #25
 800075c:	f002 ffb0 	bl	80036c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000760:	2019      	movs	r0, #25
 8000762:	f002 ffe5 	bl	8003730 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000766:	4622      	mov	r2, r4
 8000768:	4631      	mov	r1, r6
 800076a:	2012      	movs	r0, #18
 800076c:	f002 ffa8 	bl	80036c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000770:	2012      	movs	r0, #18
 8000772:	f002 ffdd 	bl	8003730 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 8000776:	462a      	mov	r2, r5
 8000778:	2103      	movs	r1, #3
 800077a:	2025      	movs	r0, #37	; 0x25
 800077c:	f002 ffa0 	bl	80036c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000780:	2025      	movs	r0, #37	; 0x25
 8000782:	f002 ffd5 	bl	8003730 <HAL_NVIC_EnableIRQ>
  resetDriver ();
 8000786:	f7ff fe2d 	bl	80003e4 <resetDriver>
  SPIread (TMC6100_GCONF, SPIRxBuf);
 800078a:	4911      	ldr	r1, [pc, #68]	; (80007d0 <main+0x3c4>)
 800078c:	4620      	mov	r0, r4
 800078e:	f7ff fd8d 	bl	80002ac <SPIread>
  SPIread (TMC6100_SHORT_CONF, SPIRxBuf);
 8000792:	490f      	ldr	r1, [pc, #60]	; (80007d0 <main+0x3c4>)
 8000794:	2009      	movs	r0, #9
 8000796:	f7ff fd89 	bl	80002ac <SPIread>
  SPIread (TMC6100_DRV_CONF, SPIRxBuf);
 800079a:	490d      	ldr	r1, [pc, #52]	; (80007d0 <main+0x3c4>)
 800079c:	200a      	movs	r0, #10
 800079e:	f7ff fd85 	bl	80002ac <SPIread>
  configureDriver ();
 80007a2:	f7ff fda7 	bl	80002f4 <configureDriver>
  SPIread (TMC6100_IOIN, SPIRxBuf);
 80007a6:	490a      	ldr	r1, [pc, #40]	; (80007d0 <main+0x3c4>)
 80007a8:	2004      	movs	r0, #4
 80007aa:	f7ff fd7f 	bl	80002ac <SPIread>
  SPIread (TMC6100_GCONF, SPIRxBuf);
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <main+0x3c4>)
 80007b0:	4620      	mov	r0, r4
 80007b2:	f7ff fd7b 	bl	80002ac <SPIread>
  SPIread (TMC6100_SHORT_CONF, SPIRxBuf);
 80007b6:	4906      	ldr	r1, [pc, #24]	; (80007d0 <main+0x3c4>)
 80007b8:	2009      	movs	r0, #9
 80007ba:	f7ff fd77 	bl	80002ac <SPIread>
  SPIread (TMC6100_DRV_CONF, SPIRxBuf);
 80007be:	4904      	ldr	r1, [pc, #16]	; (80007d0 <main+0x3c4>)
 80007c0:	200a      	movs	r0, #10
 80007c2:	f7ff fd73 	bl	80002ac <SPIread>
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <main+0x3ba>
 80007c8:	20000800 	.word	0x20000800
 80007cc:	40013000 	.word	0x40013000
 80007d0:	200006d8 	.word	0x200006d8

080007d4 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80007d4:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80007d6:	2400      	movs	r4, #0
 80007d8:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 80007da:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 80007dc:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 80007de:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80007e0:	7604      	strb	r4, [r0, #24]
  pHandle->pSTC = pSTC;
 80007e2:	e9c0 1200 	strd	r1, r2, [r0]
}
 80007e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->pFOCVars = pFOCVars;
 80007ea:	6083      	str	r3, [r0, #8]
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop

080007f0 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 80007f0:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80007f2:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80007f6:	2401      	movs	r4, #1
 80007f8:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 80007fa:	81c1      	strh	r1, [r0, #14]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 80007fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000800:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000802:	8303      	strh	r3, [r0, #24]
}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8000808:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800080a:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800080c:	2402      	movs	r4, #2
 800080e:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000810:	8201      	strh	r1, [r0, #16]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000812:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->hDurationms = hDurationms;
 8000816:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000818:	8303      	strh	r3, [r0, #24]
}
 800081a:	4770      	bx	lr

0800081c <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 800081c:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800081e:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000820:	2301      	movs	r3, #1
  pHandle->Iqdref.q = Iqdref.q;
 8000822:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000826:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000828:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800082a:	b002      	add	sp, #8
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000830:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000832:	2103      	movs	r1, #3
{
 8000834:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000836:	6800      	ldr	r0, [r0, #0]
 8000838:	f006 fa6c 	bl	8006d14 <STM_NextState>

  if ( RetVal == true )
 800083c:	b108      	cbz	r0, 8000842 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800083e:	2301      	movs	r3, #1
 8000840:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000842:	bd10      	pop	{r4, pc}

08000844 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000844:	6800      	ldr	r0, [r0, #0]
 8000846:	2107      	movs	r1, #7
 8000848:	f006 ba64 	b.w	8006d14 <STM_NextState>

0800084c <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 800084c:	6800      	ldr	r0, [r0, #0]
 800084e:	f006 bad7 	b.w	8006e00 <STM_FaultAcknowledged>
 8000852:	bf00      	nop

08000854 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000854:	6800      	ldr	r0, [r0, #0]
 8000856:	2101      	movs	r1, #1
 8000858:	f006 ba5c 	b.w	8006d14 <STM_NextState>

0800085c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 800085c:	b178      	cbz	r0, 800087e <MCI_ExecBufferedCommands+0x22>
{
 800085e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000860:	7e03      	ldrb	r3, [r0, #24]
 8000862:	2b01      	cmp	r3, #1
 8000864:	4604      	mov	r4, r0
 8000866:	d000      	beq.n	800086a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000868:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 800086a:	7b01      	ldrb	r1, [r0, #12]
 800086c:	2902      	cmp	r1, #2
 800086e:	d020      	beq.n	80008b2 <MCI_ExecBufferedCommands+0x56>
 8000870:	2903      	cmp	r1, #3
 8000872:	d005      	beq.n	8000880 <MCI_ExecBufferedCommands+0x24>
 8000874:	2901      	cmp	r1, #1
 8000876:	d00c      	beq.n	8000892 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000878:	2303      	movs	r3, #3
 800087a:	7623      	strb	r3, [r4, #24]
}
 800087c:	bd10      	pop	{r4, pc}
 800087e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000880:	6882      	ldr	r2, [r0, #8]
 8000882:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000886:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800088a:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800088c:	2302      	movs	r3, #2
 800088e:	7623      	strb	r3, [r4, #24]
}
 8000890:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000892:	6883      	ldr	r3, [r0, #8]
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800089a:	6840      	ldr	r0, [r0, #4]
 800089c:	f006 f974 	bl	8006b88 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80008a0:	8ae2      	ldrh	r2, [r4, #22]
 80008a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008a6:	6860      	ldr	r0, [r4, #4]
 80008a8:	f006 f972 	bl	8006b90 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80008ac:	2800      	cmp	r0, #0
 80008ae:	d0e3      	beq.n	8000878 <MCI_ExecBufferedCommands+0x1c>
 80008b0:	e7ec      	b.n	800088c <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80008b2:	6883      	ldr	r3, [r0, #8]
 80008b4:	2100      	movs	r1, #0
 80008b6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80008ba:	6840      	ldr	r0, [r0, #4]
 80008bc:	f006 f964 	bl	8006b88 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80008c0:	8ae2      	ldrh	r2, [r4, #22]
 80008c2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80008c6:	6860      	ldr	r0, [r4, #4]
 80008c8:	f006 f962 	bl	8006b90 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d0d3      	beq.n	8000878 <MCI_ExecBufferedCommands+0x1c>
 80008d0:	e7dc      	b.n	800088c <MCI_ExecBufferedCommands+0x30>
 80008d2:	bf00      	nop

080008d4 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 80008d4:	6800      	ldr	r0, [r0, #0]
 80008d6:	f006 ba91 	b.w	8006dfc <STM_GetState>
 80008da:	bf00      	nop

080008dc <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 80008dc:	7e40      	ldrb	r0, [r0, #25]
 80008de:	4770      	bx	lr

080008e0 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 80008e0:	7b03      	ldrb	r3, [r0, #12]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d005      	beq.n	80008f2 <MCI_GetImposedMotorDirection+0x12>
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d013      	beq.n	8000912 <MCI_GetImposedMotorDirection+0x32>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d009      	beq.n	8000902 <MCI_GetImposedMotorDirection+0x22>
 80008ee:	2001      	movs	r0, #1
      break;
    default:
      break;
  }
  return retVal;
}
 80008f0:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 80008f2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80008f6:	2b00      	cmp	r3, #0
        retVal = -1;
 80008f8:	bfac      	ite	ge
 80008fa:	2001      	movge	r0, #1
 80008fc:	f04f 30ff 	movlt.w	r0, #4294967295
 8000900:	4770      	bx	lr
      if ( pHandle->hFinalSpeed < 0 )
 8000902:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8000906:	2b00      	cmp	r3, #0
        retVal = -1;
 8000908:	bfac      	ite	ge
 800090a:	2001      	movge	r0, #1
 800090c:	f04f 30ff 	movlt.w	r0, #4294967295
 8000910:	4770      	bx	lr
      if ( pHandle->Iqdref.q < 0 )
 8000912:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
 8000916:	2b00      	cmp	r3, #0
        retVal = -1;
 8000918:	bfac      	ite	ge
 800091a:	2001      	movge	r0, #1
 800091c:	f04f 30ff 	movlt.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000924:	7b03      	ldrb	r3, [r0, #12]
 8000926:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000928:	bf0c      	ite	eq
 800092a:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 800092e:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000934:	6840      	ldr	r0, [r0, #4]
 8000936:	f006 b973 	b.w	8006c20 <STC_StopRamp>
 800093a:	bf00      	nop

0800093c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 800093c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800093e:	6840      	ldr	r0, [r0, #4]
 8000940:	f006 f908 	bl	8006b54 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000948:	f006 b8b0 	b.w	8006aac <SPD_GetAvrgMecSpeedUnit>

0800094c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 800094c:	6840      	ldr	r0, [r0, #4]
 800094e:	f006 b90b 	b.w	8006b68 <STC_GetMecSpeedRefUnit>
 8000952:	bf00      	nop

08000954 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000954:	6882      	ldr	r2, [r0, #8]
 8000956:	6810      	ldr	r0, [r2, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	b282      	uxth	r2, r0
 800095c:	f362 030f 	bfi	r3, r2, #0, #16
 8000960:	0c00      	lsrs	r0, r0, #16
 8000962:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000966:	b082      	sub	sp, #8
}
 8000968:	4618      	mov	r0, r3
 800096a:	b002      	add	sp, #8
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000970:	6882      	ldr	r2, [r0, #8]
 8000972:	6850      	ldr	r0, [r2, #4]
 8000974:	2300      	movs	r3, #0
 8000976:	b282      	uxth	r2, r0
 8000978:	f362 030f 	bfi	r3, r2, #0, #16
 800097c:	0c00      	lsrs	r0, r0, #16
 800097e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000982:	b082      	sub	sp, #8
}
 8000984:	4618      	mov	r0, r3
 8000986:	b002      	add	sp, #8
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 800098c:	6882      	ldr	r2, [r0, #8]
 800098e:	68d0      	ldr	r0, [r2, #12]
 8000990:	2300      	movs	r3, #0
 8000992:	b282      	uxth	r2, r0
 8000994:	f362 030f 	bfi	r3, r2, #0, #16
 8000998:	0c00      	lsrs	r0, r0, #16
 800099a:	f360 431f 	bfi	r3, r0, #16, #16
{
 800099e:	b082      	sub	sp, #8
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	b002      	add	sp, #8
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 80009a8:	6882      	ldr	r2, [r0, #8]
 80009aa:	6910      	ldr	r0, [r2, #16]
 80009ac:	2300      	movs	r3, #0
 80009ae:	b282      	uxth	r2, r0
 80009b0:	f362 030f 	bfi	r3, r2, #0, #16
 80009b4:	0c00      	lsrs	r0, r0, #16
 80009b6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80009ba:	b082      	sub	sp, #8
}
 80009bc:	4618      	mov	r0, r3
 80009be:	b002      	add	sp, #8
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 80009c4:	6882      	ldr	r2, [r0, #8]
 80009c6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80009ca:	2300      	movs	r3, #0
 80009cc:	b282      	uxth	r2, r0
 80009ce:	f362 030f 	bfi	r3, r2, #0, #16
 80009d2:	0c00      	lsrs	r0, r0, #16
 80009d4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80009d8:	b082      	sub	sp, #8
}
 80009da:	4618      	mov	r0, r3
 80009dc:	b002      	add	sp, #8
 80009de:	4770      	bx	lr

080009e0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 80009e0:	6882      	ldr	r2, [r0, #8]
 80009e2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80009e6:	2300      	movs	r3, #0
 80009e8:	b282      	uxth	r2, r0
 80009ea:	f362 030f 	bfi	r3, r2, #0, #16
 80009ee:	0c00      	lsrs	r0, r0, #16
 80009f0:	f360 431f 	bfi	r3, r0, #16, #16
{
 80009f4:	b082      	sub	sp, #8
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	b002      	add	sp, #8
 80009fa:	4770      	bx	lr

080009fc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 80009fc:	6883      	ldr	r3, [r0, #8]
}
 80009fe:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000a02:	4770      	bx	lr

08000a04 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000a04:	2300      	movs	r3, #0
 8000a06:	6882      	ldr	r2, [r0, #8]
 8000a08:	f361 030f 	bfi	r3, r1, #0, #16
 8000a0c:	f361 431f 	bfi	r3, r1, #16, #16
 8000a10:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000a18:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000a1a:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000a1e:	f006 f93f 	bl	8006ca0 <STC_GetDefaultIqdref>
 8000a22:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000a26:	8220      	strh	r0, [r4, #16]
 8000a28:	8263      	strh	r3, [r4, #18]
}
 8000a2a:	bd10      	pop	{r4, pc}

08000a2c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8000a2c:	b203      	sxth	r3, r0
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000a2e:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000a32:	f3c0 400f 	ubfx	r0, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000a36:	fb13 f201 	smulbb	r2, r3, r1
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000a3a:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000a3e:	4250      	negs	r0, r2
 8000a40:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000a44:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000a48:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000a4a:	da05      	bge.n	8000a58 <MCM_Clarke+0x2c>
 8000a4c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000a4e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000a52:	da0c      	bge.n	8000a6e <MCM_Clarke+0x42>
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <MCM_Clarke+0x50>)
 8000a56:	e001      	b.n	8000a5c <MCM_Clarke+0x30>
 8000a58:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	2000      	movs	r0, #0
 8000a60:	b292      	uxth	r2, r2
 8000a62:	f363 000f 	bfi	r0, r3, #0, #16
 8000a66:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000a6a:	b004      	add	sp, #16
 8000a6c:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <MCM_Clarke+0x50>)
 8000a70:	b20a      	sxth	r2, r1
 8000a72:	4282      	cmp	r2, r0
 8000a74:	bfb8      	it	lt
 8000a76:	4602      	movlt	r2, r0
 8000a78:	e7f0      	b.n	8000a5c <MCM_Clarke+0x30>
 8000a7a:	bf00      	nop
 8000a7c:	ffff8001 	.word	0xffff8001

08000a80 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000a80:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000a84:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000a88:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000a8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000a90:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000a92:	d028      	beq.n	8000ae6 <MCM_Trig_Functions+0x66>
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	461a      	mov	r2, r3
 8000a9a:	d816      	bhi.n	8000aca <MCM_Trig_Functions+0x4a>
 8000a9c:	b361      	cbz	r1, 8000af8 <MCM_Trig_Functions+0x78>
 8000a9e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000aa2:	d109      	bne.n	8000ab8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aa4:	b2c0      	uxtb	r0, r0
 8000aa6:	43c3      	mvns	r3, r0
 8000aa8:	491a      	ldr	r1, [pc, #104]	; (8000b14 <MCM_Trig_Functions+0x94>)
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ab0:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ab4:	4252      	negs	r2, r2
 8000ab6:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2000      	movs	r0, #0
 8000abc:	b292      	uxth	r2, r2
 8000abe:	f363 000f 	bfi	r0, r3, #0, #16
 8000ac2:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000ac6:	b002      	add	sp, #8
 8000ac8:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000aca:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000ace:	d1f3      	bne.n	8000ab8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ad0:	4910      	ldr	r1, [pc, #64]	; (8000b14 <MCM_Trig_Functions+0x94>)
 8000ad2:	b2c0      	uxtb	r0, r0
 8000ad4:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ad6:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ada:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000adc:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ade:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ae2:	b21b      	sxth	r3, r3
      break;
 8000ae4:	e7e8      	b.n	8000ab8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000ae6:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ae8:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aea:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000af2:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8000af6:	e7df      	b.n	8000ab8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000af8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000afa:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b04:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b08:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b0a:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b0c:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b0e:	b212      	sxth	r2, r2
      break;
 8000b10:	e7d2      	b.n	8000ab8 <MCM_Trig_Functions+0x38>
 8000b12:	bf00      	nop
 8000b14:	08007a74 	.word	0x08007a74

08000b18 <MCM_Park>:
{
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	4605      	mov	r5, r0
 8000b1e:	9001      	str	r0, [sp, #4]
 8000b20:	4606      	mov	r6, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000b22:	4608      	mov	r0, r1
 8000b24:	f7ff ffac 	bl	8000a80 <MCM_Trig_Functions>
 8000b28:	b22d      	sxth	r5, r5
 8000b2a:	b204      	sxth	r4, r0
 8000b2c:	1436      	asrs	r6, r6, #16
 8000b2e:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000b30:	fb05 f204 	mul.w	r2, r5, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000b34:	fb06 2210 	mls	r2, r6, r0, r2
  if ( wqd_tmp > INT16_MAX )
 8000b38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000b3c:	da12      	bge.n	8000b64 <MCM_Park+0x4c>
 8000b3e:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000b40:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000b44:	4914      	ldr	r1, [pc, #80]	; (8000b98 <MCM_Park+0x80>)
 8000b46:	da21      	bge.n	8000b8c <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000b48:	fb04 f406 	mul.w	r4, r4, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000b4c:	fb05 4000 	mla	r0, r5, r0, r4
  if ( wqd_tmp > INT16_MAX )
 8000b50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000b54:	ea4f 32e0 	mov.w	r2, r0, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000b58:	da07      	bge.n	8000b6a <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8000b5a:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000b5e:	da0f      	bge.n	8000b80 <MCM_Park+0x68>
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <MCM_Park+0x80>)
 8000b62:	e004      	b.n	8000b6e <MCM_Park+0x56>
 8000b64:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000b68:	e7ee      	b.n	8000b48 <MCM_Park+0x30>
 8000b6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000b6e:	b28a      	uxth	r2, r1
 8000b70:	2000      	movs	r0, #0
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	f362 000f 	bfi	r0, r2, #0, #16
 8000b78:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MCM_Park+0x80>)
 8000b82:	b213      	sxth	r3, r2
 8000b84:	4283      	cmp	r3, r0
 8000b86:	bfb8      	it	lt
 8000b88:	4603      	movlt	r3, r0
 8000b8a:	e7f0      	b.n	8000b6e <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	4291      	cmp	r1, r2
 8000b90:	bfb8      	it	lt
 8000b92:	4611      	movlt	r1, r2
 8000b94:	e7d8      	b.n	8000b48 <MCM_Park+0x30>
 8000b96:	bf00      	nop
 8000b98:	ffff8001 	.word	0xffff8001

08000b9c <MCM_Rev_Park>:
{
 8000b9c:	b530      	push	{r4, r5, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	4604      	mov	r4, r0
 8000ba2:	9001      	str	r0, [sp, #4]
 8000ba4:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	f7ff ff6a 	bl	8000a80 <MCM_Trig_Functions>
 8000bac:	142d      	asrs	r5, r5, #16
 8000bae:	1403      	asrs	r3, r0, #16
 8000bb0:	b224      	sxth	r4, r4
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000bb2:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000bb6:	b200      	sxth	r0, r0
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000bb8:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000bbc:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000bc0:	fb04 0313 	mls	r3, r4, r3, r0
  return ( Output );
 8000bc4:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8000bce:	f362 000f 	bfi	r0, r2, #0, #16
 8000bd2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000bd6:	b005      	add	sp, #20
 8000bd8:	bd30      	pop	{r4, r5, pc}
 8000bda:	bf00      	nop

08000bdc <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <FOC_Clear+0x74>)
 8000be4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8000be8:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000bec:	004a      	lsls	r2, r1, #1
  FOCVars[bMotor].Iab = NULL_ab;
 8000bee:	2500      	movs	r5, #0
{
 8000bf0:	4604      	mov	r4, r0
  FOCVars[bMotor].Iqd = NULL_qd;
 8000bf2:	f102 070c 	add.w	r7, r2, #12
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000bf6:	2626      	movs	r6, #38	; 0x26
  FOCVars[bMotor].Vqd = NULL_qd;
 8000bf8:	3216      	adds	r2, #22
  FOCVars[bMotor].Iab = NULL_ab;
 8000bfa:	f843 5011 	str.w	r5, [r3, r1, lsl #1]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000bfe:	eb07 0e03 	add.w	lr, r7, r3
  FOCVars[bMotor].Iab = NULL_ab;
 8000c02:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000c06:	fb06 3604 	mla	r6, r6, r4, r3
  FOCVars[bMotor].Vqd = NULL_qd;
 8000c0a:	eb02 0c03 	add.w	ip, r2, r3
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c0e:	4811      	ldr	r0, [pc, #68]	; (8000c54 <FOC_Clear+0x78>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8000c10:	50fd      	str	r5, [r7, r3]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c12:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000c16:	f8ce 5004 	str.w	r5, [lr, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c1a:	4629      	mov	r1, r5
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000c1c:	83f5      	strh	r5, [r6, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000c1e:	50d5      	str	r5, [r2, r3]
 8000c20:	f8cc 5004 	str.w	r5, [ip, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000c24:	8435      	strh	r5, [r6, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c26:	f004 fe1f 	bl	8005868 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <FOC_Clear+0x7c>)
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000c32:	f004 fe19 	bl	8005868 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <FOC_Clear+0x80>)
 8000c38:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8000c3c:	f005 ff8c 	bl	8006b58 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <FOC_Clear+0x84>)
 8000c42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c4a:	f005 b815 	b.w	8005c78 <PWMC_SwitchOffPWM>
 8000c4e:	bf00      	nop
 8000c50:	20000880 	.word	0x20000880
 8000c54:	20000874 	.word	0x20000874
 8000c58:	20000930 	.word	0x20000930
 8000c5c:	20000934 	.word	0x20000934
 8000c60:	2000086c 	.word	0x2000086c

08000c64 <MCboot>:
{
 8000c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c68:	ed2d 8b02 	vpush	{d8}
  STM_Init(&STM[M1]);
 8000c6c:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8000e64 <MCboot+0x200>
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c70:	4c63      	ldr	r4, [pc, #396]	; (8000e00 <MCboot+0x19c>)
  STO_PLL_Init (&STO_PLL_M1);
 8000c72:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8000e04 <MCboot+0x1a0>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000c76:	4d64      	ldr	r5, [pc, #400]	; (8000e08 <MCboot+0x1a4>)
  PID_HandleInit(&PIDIqHandle_M1);
 8000c78:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8000e68 <MCboot+0x204>
  PID_HandleInit(&PIDIdHandle_M1);
 8000c7c:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8000e6c <MCboot+0x208>
  NTC_Init(&TempSensorParamsM1);
 8000c80:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8000e70 <MCboot+0x20c>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000c84:	4e61      	ldr	r6, [pc, #388]	; (8000e0c <MCboot+0x1a8>)
{
 8000c86:	b087      	sub	sp, #28
 8000c88:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 8000c8a:	4658      	mov	r0, fp
{
 8000c8c:	461f      	mov	r7, r3
 8000c8e:	9103      	str	r1, [sp, #12]
  STM_Init(&STM[M1]);
 8000c90:	f006 f81c 	bl	8006ccc <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8000c94:	4b5e      	ldr	r3, [pc, #376]	; (8000e10 <MCboot+0x1ac>)
  bMCBootCompleted = 0;
 8000c96:	495f      	ldr	r1, [pc, #380]	; (8000e14 <MCboot+0x1b0>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c98:	485f      	ldr	r0, [pc, #380]	; (8000e18 <MCboot+0x1b4>)
  pCLM[M1] = &CircleLimitationM1;
 8000c9a:	4a60      	ldr	r2, [pc, #384]	; (8000e1c <MCboot+0x1b8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000c9c:	6020      	str	r0, [r4, #0]
  bMCBootCompleted = 0;
 8000c9e:	2400      	movs	r4, #0
 8000ca0:	700c      	strb	r4, [r1, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000ca2:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000ca4:	f005 fa9c 	bl	80061e0 <R3_1_Init>
  startTimers();
 8000ca8:	f004 fe64 	bl	8005974 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000cac:	485c      	ldr	r0, [pc, #368]	; (8000e20 <MCboot+0x1bc>)
 8000cae:	f004 fdc7 	bl	8005840 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000cb2:	4a5c      	ldr	r2, [pc, #368]	; (8000e24 <MCboot+0x1c0>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000cb4:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <MCboot+0x1c4>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000cb6:	495a      	ldr	r1, [pc, #360]	; (8000e20 <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000cb8:	602b      	str	r3, [r5, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8000cba:	ee18 0a10 	vmov	r0, s16
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000cbe:	6011      	str	r1, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8000cc0:	f006 fda4 	bl	800780c <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000cc4:	4857      	ldr	r0, [pc, #348]	; (8000e24 <MCboot+0x1c0>)
 8000cc6:	ee18 2a10 	vmov	r2, s16
 8000cca:	6801      	ldr	r1, [r0, #0]
 8000ccc:	6828      	ldr	r0, [r5, #0]
 8000cce:	f005 ff2b 	bl	8006b28 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000cd2:	4856      	ldr	r0, [pc, #344]	; (8000e2c <MCboot+0x1c8>)
 8000cd4:	f006 f9cc 	bl	8007070 <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8000cd8:	4a49      	ldr	r2, [pc, #292]	; (8000e00 <MCboot+0x19c>)
 8000cda:	4855      	ldr	r0, [pc, #340]	; (8000e30 <MCboot+0x1cc>)
 8000cdc:	6813      	ldr	r3, [r2, #0]
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	6829      	ldr	r1, [r5, #0]
 8000ce2:	4a52      	ldr	r2, [pc, #328]	; (8000e2c <MCboot+0x1c8>)
 8000ce4:	4b53      	ldr	r3, [pc, #332]	; (8000e34 <MCboot+0x1d0>)
 8000ce6:	f006 fab9 	bl	800725c <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000cea:	4650      	mov	r0, sl
 8000cec:	f004 fda8 	bl	8005840 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000cf0:	4648      	mov	r0, r9
 8000cf2:	f004 fda5 	bl	8005840 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000cf6:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <MCboot+0x1d4>)
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000cf8:	4850      	ldr	r0, [pc, #320]	; (8000e3c <MCboot+0x1d8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000cfa:	f8c3 a000 	str.w	sl, [r3]
  pPIDId[M1] = &PIDIdHandle_M1;
 8000cfe:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <MCboot+0x1dc>)
 8000d00:	f8c3 9000 	str.w	r9, [r3]
  pBusSensorM1 = &VirtualBusVoltageSensorParamsM1;
 8000d04:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <MCboot+0x1e0>)
 8000d06:	6018      	str	r0, [r3, #0]
  VVBS_Init(pBusSensorM1);
 8000d08:	f006 f99a 	bl	8007040 <VVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d0c:	494d      	ldr	r1, [pc, #308]	; (8000e44 <MCboot+0x1e0>)
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d0e:	4b4e      	ldr	r3, [pc, #312]	; (8000e48 <MCboot+0x1e4>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d10:	680a      	ldr	r2, [r1, #0]
 8000d12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d16:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <MCboot+0x1e8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000d18:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8000d1c:	4640      	mov	r0, r8
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d1e:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 8000d20:	f004 fd4a 	bl	80057b8 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d24:	494a      	ldr	r1, [pc, #296]	; (8000e50 <MCboot+0x1ec>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d26:	4b4b      	ldr	r3, [pc, #300]	; (8000e54 <MCboot+0x1f0>)
 8000d28:	484b      	ldr	r0, [pc, #300]	; (8000e58 <MCboot+0x1f4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d2a:	f8c1 8000 	str.w	r8, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d2e:	6018      	str	r0, [r3, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000d30:	f04f 0901 	mov.w	r9, #1
  REMNG_Init(pREMNG[M1]);
 8000d34:	f005 fe2e 	bl	8006994 <REMNG_Init>
  FOC_Clear(M1);
 8000d38:	4620      	mov	r0, r4
 8000d3a:	f7ff ff4f 	bl	8000bdc <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000d3e:	f886 9024 	strb.w	r9, [r6, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000d42:	6828      	ldr	r0, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000d44:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8000e74 <MCboot+0x210>
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000d48:	f005 ffaa 	bl	8006ca0 <STC_GetDefaultIqdref>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8000d52:	8233      	strh	r3, [r6, #16]
 8000d54:	8272      	strh	r2, [r6, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d56:	6828      	ldr	r0, [r5, #0]
 8000d58:	f005 ffa2 	bl	8006ca0 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8000d5c:	493f      	ldr	r1, [pc, #252]	; (8000e5c <MCboot+0x1f8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000d5e:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8000d60:	f8c8 1000 	str.w	r1, [r8]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d64:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000d68:	4633      	mov	r3, r6
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d6a:	f8a6 c014 	strh.w	ip, [r6, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000d6e:	4608      	mov	r0, r1
 8000d70:	4659      	mov	r1, fp
 8000d72:	f7ff fd2f 	bl	80007d4 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000d76:	6828      	ldr	r0, [r5, #0]
 8000d78:	f8d8 6000 	ldr.w	r6, [r8]
 8000d7c:	f005 ff86 	bl	8006c8c <STC_GetMecSpeedRefUnitDefault>
 8000d80:	4622      	mov	r2, r4
 8000d82:	4601      	mov	r1, r0
 8000d84:	4630      	mov	r0, r6
 8000d86:	f7ff fd33 	bl	80007f0 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000d8a:	4826      	ldr	r0, [pc, #152]	; (8000e24 <MCboot+0x1c0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <MCboot+0x19c>)
  pMCIList[M1] = oMCInterface[M1];
 8000d8e:	f8d8 a000 	ldr.w	sl, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000d92:	f8d0 8000 	ldr.w	r8, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000d96:	4828      	ldr	r0, [pc, #160]	; (8000e38 <MCboot+0x1d4>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000d98:	6816      	ldr	r6, [r2, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000d9a:	4a2a      	ldr	r2, [pc, #168]	; (8000e44 <MCboot+0x1e0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000d9c:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000da0:	4827      	ldr	r0, [pc, #156]	; (8000e40 <MCboot+0x1dc>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000da2:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000da4:	4a29      	ldr	r2, [pc, #164]	; (8000e4c <MCboot+0x1e8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MCboot+0x1fc>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000da8:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000dac:	4828      	ldr	r0, [pc, #160]	; (8000e50 <MCboot+0x1ec>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000dae:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000db0:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000db2:	6800      	ldr	r0, [r0, #0]
  pMCIList[M1] = oMCInterface[M1];
 8000db4:	f8c7 a000 	str.w	sl, [r7]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000db8:	63da      	str	r2, [r3, #60]	; 0x3c
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <MCboot+0x1cc>)
 8000dbc:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8000dbe:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <MCboot+0x1c8>)
 8000dc0:	621a      	str	r2, [r3, #32]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000dc2:	e9c3 010b 	strd	r0, r1, [r3, #44]	; 0x2c
  pMCTList[M1] = &MCT[M1];
 8000dc6:	9a03      	ldr	r2, [sp, #12]
  bMCBootCompleted = 1;
 8000dc8:	4912      	ldr	r1, [pc, #72]	; (8000e14 <MCboot+0x1b0>)
  MCT[M1].pPIDId = pPIDId[M1];
 8000dca:	f8c3 c008 	str.w	ip, [r3, #8]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000dce:	e9c3 8e00 	strd	r8, lr, [r3]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000dd2:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8000dd6:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8000dda:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000dde:	611e      	str	r6, [r3, #16]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000de0:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000de2:	60dc      	str	r4, [r3, #12]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8000de4:	ed83 8a06 	vstr	s16, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000de8:	61dc      	str	r4, [r3, #28]
  MCT[M1].pStateMachine = &STM[M1];
 8000dea:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
  MCT[M1].pOTT = MC_NULL;
 8000dee:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000df0:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000df2:	f881 9000 	strb.w	r9, [r1]
}
 8000df6:	b007      	add	sp, #28
 8000df8:	ecbd 8b02 	vpop	{d8}
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e00:	2000086c 	.word	0x2000086c
 8000e04:	20000374 	.word	0x20000374
 8000e08:	20000934 	.word	0x20000934
 8000e0c:	20000880 	.word	0x20000880
 8000e10:	200008fc 	.word	0x200008fc
 8000e14:	200006c0 	.word	0x200006c0
 8000e18:	20000258 	.word	0x20000258
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000118 	.word	0x20000118
 8000e24:	20000870 	.word	0x20000870
 8000e28:	2000049c 	.word	0x2000049c
 8000e2c:	20000504 	.word	0x20000504
 8000e30:	200002e8 	.word	0x200002e8
 8000e34:	20000360 	.word	0x20000360
 8000e38:	20000874 	.word	0x20000874
 8000e3c:	200004f8 	.word	0x200004f8
 8000e40:	20000930 	.word	0x20000930
 8000e44:	20000900 	.word	0x20000900
 8000e48:	20000144 	.word	0x20000144
 8000e4c:	2000092c 	.word	0x2000092c
 8000e50:	20000868 	.word	0x20000868
 8000e54:	20000928 	.word	0x20000928
 8000e58:	200002d0 	.word	0x200002d0
 8000e5c:	20000904 	.word	0x20000904
 8000e60:	200008a8 	.word	0x200008a8
 8000e64:	20000920 	.word	0x20000920
 8000e68:	200000ec 	.word	0x200000ec
 8000e6c:	200000c0 	.word	0x200000c0
 8000e70:	200004d0 	.word	0x200004d0
 8000e74:	20000878 	.word	0x20000878

08000e78 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8000e7c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <FOC_CalcCurrRef+0x24>)
 8000e80:	2426      	movs	r4, #38	; 0x26
 8000e82:	fb04 3400 	mla	r4, r4, r0, r3
 8000e86:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e8a:	b103      	cbz	r3, 8000e8e <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000e8c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <FOC_CalcCurrRef+0x28>)
 8000e90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000e94:	f005 fec8 	bl	8006c28 <STC_CalcTorqueReference>
 8000e98:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000e9a:	8220      	strh	r0, [r4, #16]
}
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000880 	.word	0x20000880
 8000ea4:	20000934 	.word	0x20000934

08000ea8 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000ea8:	4b01      	ldr	r3, [pc, #4]	; (8000eb0 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000eaa:	8018      	strh	r0, [r3, #0]
}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200006c2 	.word	0x200006c2

08000eb4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8000eb6:	8818      	ldrh	r0, [r3, #0]
 8000eb8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000eba:	fab0 f080 	clz	r0, r0
 8000ebe:	0940      	lsrs	r0, r0, #5
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200006c2 	.word	0x200006c2

08000ec8 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <TSK_SetStopPermanencyTimeM1+0x8>)
 8000eca:	8018      	strh	r0, [r3, #0]
}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200006c6 	.word	0x200006c6

08000ed4 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8000ed6:	8818      	ldrh	r0, [r3, #0]
 8000ed8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8000eda:	fab0 f080 	clz	r0, r0
 8000ede:	0940      	lsrs	r0, r0, #5
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	200006c6 	.word	0x200006c6

08000ee8 <TSK_MediumFrequencyTaskM1>:
{
 8000ee8:	b530      	push	{r4, r5, lr}
 8000eea:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8000eec:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000eee:	4669      	mov	r1, sp
 8000ef0:	489a      	ldr	r0, [pc, #616]	; (800115c <TSK_MediumFrequencyTaskM1+0x274>)
  int16_t wAux = 0;
 8000ef2:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000ef6:	f006 fb91 	bl	800761c <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000efa:	4d99      	ldr	r5, [pc, #612]	; (8001160 <TSK_MediumFrequencyTaskM1+0x278>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000efc:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000efe:	6828      	ldr	r0, [r5, #0]
 8000f00:	f004 fd04 	bl	800590c <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000f04:	4897      	ldr	r0, [pc, #604]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 8000f06:	f005 ff79 	bl	8006dfc <STM_GetState>
  switch ( StateM1 )
 8000f0a:	1ec3      	subs	r3, r0, #3
 8000f0c:	2b10      	cmp	r3, #16
 8000f0e:	d85a      	bhi.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
 8000f10:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000f14:	0011007e 	.word	0x0011007e
 8000f18:	00a90092 	.word	0x00a90092
 8000f1c:	00cb00b8 	.word	0x00cb00b8
 8000f20:	005900d4 	.word	0x005900d4
 8000f24:	00590059 	.word	0x00590059
 8000f28:	00590059 	.word	0x00590059
 8000f2c:	00e10059 	.word	0x00e10059
 8000f30:	00fd00f0 	.word	0x00fd00f0
 8000f34:	005b      	.short	0x005b
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000f36:	488c      	ldr	r0, [pc, #560]	; (8001168 <TSK_MediumFrequencyTaskM1+0x280>)
 8000f38:	f006 fa16 	bl	8007368 <RUC_Exec>
 8000f3c:	2800      	cmp	r0, #0
 8000f3e:	f000 8101 	beq.w	8001144 <TSK_MediumFrequencyTaskM1+0x25c>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8000f42:	4b8a      	ldr	r3, [pc, #552]	; (800116c <TSK_MediumFrequencyTaskM1+0x284>)
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	f005 fe6f 	bl	8006c28 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8000f4a:	4b89      	ldr	r3, [pc, #548]	; (8001170 <TSK_MediumFrequencyTaskM1+0x288>)
 8000f4c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
        FOCVars[M1].Iqdref = IqdRef;
 8000f50:	8218      	strh	r0, [r3, #16]
 8000f52:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8000f54:	4887      	ldr	r0, [pc, #540]	; (8001174 <TSK_MediumFrequencyTaskM1+0x28c>)
 8000f56:	f10d 0102 	add.w	r1, sp, #2
 8000f5a:	f006 f8dd 	bl	8007118 <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 8000f5e:	4882      	ldr	r0, [pc, #520]	; (8001168 <TSK_MediumFrequencyTaskM1+0x280>)
 8000f60:	f006 fa3c 	bl	80073dc <RUC_FirstAccelerationStageReached>
 8000f64:	b378      	cbz	r0, 8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8000f66:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8000f6a:	487c      	ldr	r0, [pc, #496]	; (800115c <TSK_MediumFrequencyTaskM1+0x274>)
 8000f6c:	f006 fc88 	bl	8007880 <STO_PLL_IsObserverConverged>
 8000f70:	4604      	mov	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8000f72:	4881      	ldr	r0, [pc, #516]	; (8001178 <TSK_MediumFrequencyTaskM1+0x290>)
 8000f74:	f7ff fcb4 	bl	80008e0 <MCI_GetImposedMotorDirection>
 8000f78:	b2c1      	uxtb	r1, r0
 8000f7a:	4878      	ldr	r0, [pc, #480]	; (800115c <TSK_MediumFrequencyTaskM1+0x274>)
 8000f7c:	f006 fd3e 	bl	80079fc <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 8000f80:	487c      	ldr	r0, [pc, #496]	; (8001174 <TSK_MediumFrequencyTaskM1+0x28c>)
 8000f82:	4621      	mov	r1, r4
 8000f84:	f006 f958 	bl	8007238 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8000f88:	b1ec      	cbz	r4, 8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000f8a:	4874      	ldr	r0, [pc, #464]	; (800115c <TSK_MediumFrequencyTaskM1+0x274>)
 8000f8c:	4d78      	ldr	r5, [pc, #480]	; (8001170 <TSK_MediumFrequencyTaskM1+0x288>)
        REMNG_Init( pREMNG[M1] );
 8000f8e:	4c7b      	ldr	r4, [pc, #492]	; (800117c <TSK_MediumFrequencyTaskM1+0x294>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000f90:	f005 fd88 	bl	8006aa4 <SPD_GetElAngle>
 8000f94:	4601      	mov	r1, r0
 8000f96:	6868      	ldr	r0, [r5, #4]
 8000f98:	f7ff fdbe 	bl	8000b18 <MCM_Park>
 8000f9c:	4603      	mov	r3, r0
        REMNG_Init( pREMNG[M1] );
 8000f9e:	6820      	ldr	r0, [r4, #0]
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8000fa0:	9301      	str	r3, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 8000fa2:	f005 fcf7 	bl	8006994 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8000fa6:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
 8000faa:	6820      	ldr	r0, [r4, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f005 fd37 	bl	8006a20 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8000fb2:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8000fb6:	6820      	ldr	r0, [r4, #0]
 8000fb8:	2219      	movs	r2, #25
 8000fba:	f005 fd31 	bl	8006a20 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 8000fbe:	4869      	ldr	r0, [pc, #420]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 8000fc0:	2113      	movs	r1, #19
 8000fc2:	f005 fea7 	bl	8006d14 <STM_NextState>
}
 8000fc6:	b003      	add	sp, #12
 8000fc8:	bd30      	pop	{r4, r5, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000fca:	4867      	ldr	r0, [pc, #412]	; (8001168 <TSK_MediumFrequencyTaskM1+0x280>)
 8000fcc:	f006 f9cc 	bl	8007368 <RUC_Exec>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	f000 80bd 	beq.w	8001150 <TSK_MediumFrequencyTaskM1+0x268>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8000fd6:	4867      	ldr	r0, [pc, #412]	; (8001174 <TSK_MediumFrequencyTaskM1+0x28c>)
 8000fd8:	a901      	add	r1, sp, #4
 8000fda:	f006 f89d 	bl	8007118 <VSS_CalcAvrgMecSpeedUnit>
 8000fde:	4604      	mov	r4, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8000fe0:	4864      	ldr	r0, [pc, #400]	; (8001174 <TSK_MediumFrequencyTaskM1+0x28c>)
 8000fe2:	f006 f937 	bl	8007254 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 8000fe6:	b90c      	cbnz	r4, 8000fec <TSK_MediumFrequencyTaskM1+0x104>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d0ec      	beq.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000fec:	4a64      	ldr	r2, [pc, #400]	; (8001180 <TSK_MediumFrequencyTaskM1+0x298>)
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000fee:	4b60      	ldr	r3, [pc, #384]	; (8001170 <TSK_MediumFrequencyTaskM1+0x288>)
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000ff0:	6814      	ldr	r4, [r2, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000ff2:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f004 fc3a 	bl	8005870 <PID_GetKIDivisor>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000ffc:	fb05 f100 	mul.w	r1, r5, r0
 8001000:	4620      	mov	r0, r4
 8001002:	f004 fc31 	bl	8005868 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8001006:	2105      	movs	r1, #5
 8001008:	4856      	ldr	r0, [pc, #344]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 800100a:	f005 fe83 	bl	8006d14 <STM_NextState>
    break;
 800100e:	e7da      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001010:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	f7ff fc64 	bl	80008e0 <MCI_GetImposedMotorDirection>
 8001018:	4601      	mov	r1, r0
 800101a:	4853      	ldr	r0, [pc, #332]	; (8001168 <TSK_MediumFrequencyTaskM1+0x280>)
 800101c:	f006 f95c 	bl	80072d8 <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8001020:	4b59      	ldr	r3, [pc, #356]	; (8001188 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	f004 ffa0 	bl	8005f68 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001028:	2014      	movs	r0, #20
 800102a:	f7ff ff3d 	bl	8000ea8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800102e:	2110      	movs	r1, #16
 8001030:	484c      	ldr	r0, [pc, #304]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001032:	f005 fe6f 	bl	8006d14 <STM_NextState>
    break;
 8001036:	e7c6      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001038:	4c4c      	ldr	r4, [pc, #304]	; (800116c <TSK_MediumFrequencyTaskM1+0x284>)
 800103a:	4948      	ldr	r1, [pc, #288]	; (800115c <TSK_MediumFrequencyTaskM1+0x274>)
 800103c:	6820      	ldr	r0, [r4, #0]
 800103e:	f005 fd87 	bl	8006b50 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff18 	bl	8000e78 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff ff17 	bl	8000e7c <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800104e:	2106      	movs	r1, #6
 8001050:	4844      	ldr	r0, [pc, #272]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001052:	f005 fe5f 	bl	8006d14 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001056:	6820      	ldr	r0, [r4, #0]
 8001058:	f005 fe30 	bl	8006cbc <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800105c:	4b49      	ldr	r3, [pc, #292]	; (8001184 <TSK_MediumFrequencyTaskM1+0x29c>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	f7ff fbfc 	bl	800085c <MCI_ExecBufferedCommands>
    break;
 8001064:	e7af      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001066:	4b47      	ldr	r3, [pc, #284]	; (8001184 <TSK_MediumFrequencyTaskM1+0x29c>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f7ff fbf7 	bl	800085c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff ff04 	bl	8000e7c <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001074:	2c00      	cmp	r4, #0
 8001076:	d1a6      	bne.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001078:	4622      	mov	r2, r4
 800107a:	2120      	movs	r1, #32
 800107c:	4839      	ldr	r0, [pc, #228]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 800107e:	f005 fe2b 	bl	8006cd8 <STM_FaultProcessing>
 8001082:	e7a0      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	f004 ffdc 	bl	8006044 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fda5 	bl	8000bdc <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001092:	6828      	ldr	r0, [r5, #0]
 8001094:	f004 fb4c 	bl	8005730 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001098:	f44f 7048 	mov.w	r0, #800	; 0x320
 800109c:	f7ff ff14 	bl	8000ec8 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80010a0:	2108      	movs	r1, #8
 80010a2:	4830      	ldr	r0, [pc, #192]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 80010a4:	f005 fe36 	bl	8006d14 <STM_NextState>
    break;
 80010a8:	e78d      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80010aa:	f7ff ff13 	bl	8000ed4 <TSK_StopPermanencyTimeHasElapsedM1>
 80010ae:	2800      	cmp	r0, #0
 80010b0:	d089      	beq.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], STOP_IDLE );
 80010b2:	2109      	movs	r1, #9
 80010b4:	482b      	ldr	r0, [pc, #172]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 80010b6:	f005 fe2d 	bl	8006d14 <STM_NextState>
 80010ba:	e784      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <TSK_MediumFrequencyTaskM1+0x284>)
 80010be:	492d      	ldr	r1, [pc, #180]	; (8001174 <TSK_MediumFrequencyTaskM1+0x28c>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f005 fd45 	bl	8006b50 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 80010c6:	482b      	ldr	r0, [pc, #172]	; (8001174 <TSK_MediumFrequencyTaskM1+0x28c>)
 80010c8:	f005 ffc4 	bl	8007054 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 80010cc:	2100      	movs	r1, #0
 80010ce:	4825      	ldr	r0, [pc, #148]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 80010d0:	f005 fe20 	bl	8006d14 <STM_NextState>
}
 80010d4:	e777      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80010d6:	f7ff feed 	bl	8000eb4 <TSK_ChargeBootCapDelayHasElapsedM1>
 80010da:	2800      	cmp	r0, #0
 80010dc:	f43f af73 	beq.w	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <TSK_MediumFrequencyTaskM1+0x2a0>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f004 fdc9 	bl	8005c7c <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80010ea:	2111      	movs	r1, #17
 80010ec:	481d      	ldr	r0, [pc, #116]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 80010ee:	f005 fe11 	bl	8006d14 <STM_NextState>
 80010f2:	e768      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <TSK_MediumFrequencyTaskM1+0x2a0>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	f004 fdbf 	bl	8005c7c <PWMC_CurrentReadingCalibr>
 80010fe:	2800      	cmp	r0, #0
 8001100:	f43f af61 	beq.w	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
      STM_NextState( &STM[M1], CLEAR );
 8001104:	2112      	movs	r1, #18
 8001106:	4817      	ldr	r0, [pc, #92]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001108:	f005 fe04 	bl	8006d14 <STM_NextState>
 800110c:	e75b      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <TSK_MediumFrequencyTaskM1+0x284>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <TSK_MediumFrequencyTaskM1+0x288>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001112:	6810      	ldr	r0, [r2, #0]
 8001114:	4917      	ldr	r1, [pc, #92]	; (8001174 <TSK_MediumFrequencyTaskM1+0x28c>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001116:	2201      	movs	r2, #1
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800111c:	f005 fd18 	bl	8006b50 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001120:	480e      	ldr	r0, [pc, #56]	; (800115c <TSK_MediumFrequencyTaskM1+0x274>)
 8001122:	f006 fb45 	bl	80077b0 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001128:	2104      	movs	r1, #4
 800112a:	f005 fdf3 	bl	8006d14 <STM_NextState>
 800112e:	2800      	cmp	r0, #0
 8001130:	f43f af49 	beq.w	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
      FOC_Clear( M1 );
 8001134:	2000      	movs	r0, #0
 8001136:	f7ff fd51 	bl	8000bdc <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f004 ff3b 	bl	8005fb8 <R3_1_SwitchOnPWM>
 8001142:	e740      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001144:	4602      	mov	r2, r0
 8001146:	2110      	movs	r1, #16
 8001148:	4806      	ldr	r0, [pc, #24]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 800114a:	f005 fdc5 	bl	8006cd8 <STM_FaultProcessing>
 800114e:	e701      	b.n	8000f54 <TSK_MediumFrequencyTaskM1+0x6c>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001150:	4602      	mov	r2, r0
 8001152:	2110      	movs	r1, #16
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <TSK_MediumFrequencyTaskM1+0x27c>)
 8001156:	f005 fdbf 	bl	8006cd8 <STM_FaultProcessing>
 800115a:	e734      	b.n	8000fc6 <TSK_MediumFrequencyTaskM1+0xde>
 800115c:	20000374 	.word	0x20000374
 8001160:	2000092c 	.word	0x2000092c
 8001164:	20000920 	.word	0x20000920
 8001168:	200002e8 	.word	0x200002e8
 800116c:	20000934 	.word	0x20000934
 8001170:	20000880 	.word	0x20000880
 8001174:	20000504 	.word	0x20000504
 8001178:	20000904 	.word	0x20000904
 800117c:	20000928 	.word	0x20000928
 8001180:	20000870 	.word	0x20000870
 8001184:	20000878 	.word	0x20000878
 8001188:	2000086c 	.word	0x2000086c

0800118c <MC_Scheduler>:
{
 800118c:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MC_Scheduler+0x48>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d000      	beq.n	8001198 <MC_Scheduler+0xc>
}
 8001196:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001198:	4d0f      	ldr	r5, [pc, #60]	; (80011d8 <MC_Scheduler+0x4c>)
 800119a:	882c      	ldrh	r4, [r5, #0]
 800119c:	b2a4      	uxth	r4, r4
 800119e:	b1ac      	cbz	r4, 80011cc <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80011a0:	882b      	ldrh	r3, [r5, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <MC_Scheduler+0x50>)
 80011aa:	8813      	ldrh	r3, [r2, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b11b      	cbz	r3, 80011b8 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80011b0:	8813      	ldrh	r3, [r2, #0]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <MC_Scheduler+0x54>)
 80011ba:	8813      	ldrh	r3, [r2, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0e9      	beq.n	8001196 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80011c2:	8813      	ldrh	r3, [r2, #0]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	8013      	strh	r3, [r2, #0]
}
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80011cc:	f7ff fe8c 	bl	8000ee8 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80011d0:	802c      	strh	r4, [r5, #0]
 80011d2:	e7e9      	b.n	80011a8 <MC_Scheduler+0x1c>
 80011d4:	200006c0 	.word	0x200006c0
 80011d8:	200006c4 	.word	0x200006c4
 80011dc:	200006c2 	.word	0x200006c2
 80011e0:	200006c6 	.word	0x200006c6

080011e4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80011e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if ( STM[M1].bState == SWITCH_OVER )
 80011e8:	4b54      	ldr	r3, [pc, #336]	; (800133c <TSK_HighFrequencyTask+0x158>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80011ea:	4c55      	ldr	r4, [pc, #340]	; (8001340 <TSK_HighFrequencyTask+0x15c>)
  if ( STM[M1].bState == SWITCH_OVER )
 80011ec:	781b      	ldrb	r3, [r3, #0]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80011ee:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 80011f2:	b089      	sub	sp, #36	; 0x24
  if ( STM[M1].bState == SWITCH_OVER )
 80011f4:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80011f6:	9005      	str	r0, [sp, #20]
  if ( STM[M1].bState == SWITCH_OVER )
 80011f8:	f000 8093 	beq.w	8001322 <TSK_HighFrequencyTask+0x13e>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80011fc:	4b51      	ldr	r3, [pc, #324]	; (8001344 <TSK_HighFrequencyTask+0x160>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80011fe:	4f52      	ldr	r7, [pc, #328]	; (8001348 <TSK_HighFrequencyTask+0x164>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001200:	6818      	ldr	r0, [r3, #0]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001202:	f8df 8168 	ldr.w	r8, [pc, #360]	; 800136c <TSK_HighFrequencyTask+0x188>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001206:	f005 fca5 	bl	8006b54 <STC_GetSpeedSensor>
 800120a:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800120c:	f005 fc4a 	bl	8006aa4 <SPD_GetElAngle>
 8001210:	4606      	mov	r6, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001212:	4628      	mov	r0, r5
 8001214:	f005 fc4e 	bl	8006ab4 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001218:	a902      	add	r1, sp, #8
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f004 fc02 	bl	8005a24 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001220:	9802      	ldr	r0, [sp, #8]
 8001222:	f7ff fc03 	bl	8000a2c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001226:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001228:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800122a:	f7ff fc75 	bl	8000b18 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1],
 800122e:	4a47      	ldr	r2, [pc, #284]	; (800134c <TSK_HighFrequencyTask+0x168>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001230:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001234:	9000      	str	r0, [sp, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001236:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001238:	1ac9      	subs	r1, r1, r3
 800123a:	6810      	ldr	r0, [r2, #0]
 800123c:	f004 fb20 	bl	8005880 <PI_Controller>
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001240:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <TSK_HighFrequencyTask+0x16c>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001246:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800124a:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800124c:	1a89      	subs	r1, r1, r2
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f004 fb16 	bl	8005880 <PI_Controller>
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001254:	4b3f      	ldr	r3, [pc, #252]	; (8001354 <TSK_HighFrequencyTask+0x170>)
 8001256:	f8ad 9004 	strh.w	r9, [sp, #4]
 800125a:	f8ad 0006 	strh.w	r0, [sp, #6]
 800125e:	9901      	ldr	r1, [sp, #4]
 8001260:	6818      	ldr	r0, [r3, #0]
 8001262:	f004 fa09 	bl	8005678 <Circle_Limitation>
 8001266:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001268:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800126a:	fa0f f983 	sxth.w	r9, r3
 800126e:	141d      	asrs	r5, r3, #16
 8001270:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001272:	f005 fc1f 	bl	8006ab4 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001276:	4631      	mov	r1, r6
 8001278:	9801      	ldr	r0, [sp, #4]
 800127a:	f7ff fc8f 	bl	8000b9c <MCM_Rev_Park>
 800127e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001280:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001282:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001284:	f004 fbd0 	bl	8005a28 <PWMC_SetPhaseVoltage>
 8001288:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 800128a:	9802      	ldr	r0, [sp, #8]
 800128c:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800128e:	9803      	ldr	r0, [sp, #12]
 8001290:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001292:	9800      	ldr	r0, [sp, #0]
 8001294:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001296:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8001298:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 800129a:	f8a4 9016 	strh.w	r9, [r4, #22]
 800129e:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 80012a0:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80012a2:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_FOC_DURATION)
 80012a6:	d034      	beq.n	8001312 <TSK_HighFrequencyTask+0x12e>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80012a8:	482b      	ldr	r0, [pc, #172]	; (8001358 <TSK_HighFrequencyTask+0x174>)
 80012aa:	f006 f897 	bl	80073dc <RUC_FirstAccelerationStageReached>
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <TSK_HighFrequencyTask+0x178>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80012b0:	4604      	mov	r4, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 80012b2:	f8d8 0000 	ldr.w	r0, [r8]
 80012b6:	9006      	str	r0, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f004 f9d5 	bl	8005668 <VBS_GetAvBusVoltage_d>
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80012be:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80012c0:	4603      	mov	r3, r0
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80012c2:	4827      	ldr	r0, [pc, #156]	; (8001360 <TSK_HighFrequencyTask+0x17c>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80012c4:	f8ad 301c 	strh.w	r3, [sp, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80012c8:	f006 f8be 	bl	8007448 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 80012cc:	4824      	ldr	r0, [pc, #144]	; (8001360 <TSK_HighFrequencyTask+0x17c>)
 80012ce:	f006 fa45 	bl	800775c <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 80012d2:	b164      	cbz	r4, 80012ee <TSK_HighFrequencyTask+0x10a>
    hState = STM_GetState(&STM[M1]);
 80012d4:	4819      	ldr	r0, [pc, #100]	; (800133c <TSK_HighFrequencyTask+0x158>)
 80012d6:	f005 fd91 	bl	8006dfc <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 80012da:	1f03      	subs	r3, r0, #4
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d909      	bls.n	80012f6 <TSK_HighFrequencyTask+0x112>
 80012e2:	2813      	cmp	r0, #19
 80012e4:	d007      	beq.n	80012f6 <TSK_HighFrequencyTask+0x112>
}
 80012e6:	2000      	movs	r0, #0
 80012e8:	b009      	add	sp, #36	; 0x24
 80012ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      STO_ResetPLL(&STO_PLL_M1);
 80012ee:	481c      	ldr	r0, [pc, #112]	; (8001360 <TSK_HighFrequencyTask+0x17c>)
 80012f0:	f006 fb68 	bl	80079c4 <STO_ResetPLL>
 80012f4:	e7ee      	b.n	80012d4 <TSK_HighFrequencyTask+0xf0>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80012f6:	481a      	ldr	r0, [pc, #104]	; (8001360 <TSK_HighFrequencyTask+0x17c>)
 80012f8:	f005 fbd4 	bl	8006aa4 <SPD_GetElAngle>
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 80012fc:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 80012fe:	4603      	mov	r3, r0
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <TSK_HighFrequencyTask+0x180>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001302:	f8ad 3010 	strh.w	r3, [sp, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001306:	f005 feb7 	bl	8007078 <VSS_CalcElAngle>
}
 800130a:	2000      	movs	r0, #0
 800130c:	b009      	add	sp, #36	; 0x24
 800130e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <TSK_HighFrequencyTask+0x158>)
 8001316:	f005 fcdf 	bl	8006cd8 <STM_FaultProcessing>
}
 800131a:	2000      	movs	r0, #0
 800131c:	b009      	add	sp, #36	; 0x24
 800131e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001322:	4d11      	ldr	r5, [pc, #68]	; (8001368 <TSK_HighFrequencyTask+0x184>)
 8001324:	6828      	ldr	r0, [r5, #0]
 8001326:	f005 fb5f 	bl	80069e8 <REMNG_RampCompleted>
 800132a:	2800      	cmp	r0, #0
 800132c:	f47f af66 	bne.w	80011fc <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001330:	6828      	ldr	r0, [r5, #0]
 8001332:	f005 fb37 	bl	80069a4 <REMNG_Calc>
 8001336:	8220      	strh	r0, [r4, #16]
 8001338:	e760      	b.n	80011fc <TSK_HighFrequencyTask+0x18>
 800133a:	bf00      	nop
 800133c:	20000920 	.word	0x20000920
 8001340:	20000880 	.word	0x20000880
 8001344:	20000934 	.word	0x20000934
 8001348:	2000086c 	.word	0x2000086c
 800134c:	20000874 	.word	0x20000874
 8001350:	20000930 	.word	0x20000930
 8001354:	200008fc 	.word	0x200008fc
 8001358:	200002e8 	.word	0x200002e8
 800135c:	20000900 	.word	0x20000900
 8001360:	20000374 	.word	0x20000374
 8001364:	20000504 	.word	0x20000504
 8001368:	20000928 	.word	0x20000928
 800136c:	20000884 	.word	0x20000884

08001370 <TSK_SafetyTask_PWMOFF>:
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <TSK_SafetyTask_PWMOFF+0x70>)
{
 8001372:	b570      	push	{r4, r5, r6, lr}
 8001374:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001376:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800137a:	4e1a      	ldr	r6, [pc, #104]	; (80013e4 <TSK_SafetyTask_PWMOFF+0x74>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800137c:	f004 fa2e 	bl	80057dc <NTC_CalcAvTemp>
 8001380:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001382:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001386:	f004 fca3 	bl	8005cd0 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800138a:	f025 010e 	bic.w	r1, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800138e:	4301      	orrs	r1, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001390:	4d15      	ldr	r5, [pc, #84]	; (80013e8 <TSK_SafetyTask_PWMOFF+0x78>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001392:	b289      	uxth	r1, r1
  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8001394:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001398:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 800139c:	43ca      	mvns	r2, r1
 800139e:	b292      	uxth	r2, r2
 80013a0:	4628      	mov	r0, r5
 80013a2:	f005 fc99 	bl	8006cd8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80013a6:	4628      	mov	r0, r5
 80013a8:	f005 fd28 	bl	8006dfc <STM_GetState>
 80013ac:	280a      	cmp	r0, #10
 80013ae:	d002      	beq.n	80013b6 <TSK_SafetyTask_PWMOFF+0x46>
 80013b0:	280b      	cmp	r0, #11
 80013b2:	d00e      	beq.n	80013d2 <TSK_SafetyTask_PWMOFF+0x62>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80013b4:	bd70      	pop	{r4, r5, r6, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013b6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80013ba:	f004 fc5d 	bl	8005c78 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fc0c 	bl	8000bdc <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <TSK_SafetyTask_PWMOFF+0x7c>)
 80013c6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80013ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80013ce:	f004 b9af 	b.w	8005730 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80013d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013da:	f004 bc4d 	b.w	8005c78 <PWMC_SwitchOffPWM>
 80013de:	bf00      	nop
 80013e0:	20000868 	.word	0x20000868
 80013e4:	2000086c 	.word	0x2000086c
 80013e8:	20000920 	.word	0x20000920
 80013ec:	2000092c 	.word	0x2000092c

080013f0 <TSK_SafetyTask>:
{
 80013f0:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <TSK_SafetyTask+0x1c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d000      	beq.n	80013fc <TSK_SafetyTask+0xc>
}
 80013fa:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff ffb7 	bl	8001370 <TSK_SafetyTask_PWMOFF>
}
 8001402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 8001406:	f000 bd01 	b.w	8001e0c <RCM_ExecUserConv>
 800140a:	bf00      	nop
 800140c:	200006c0 	.word	0x200006c0

08001410 <MC_RunMotorControlTasks>:
{
 8001410:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MC_RunMotorControlTasks+0x1c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b903      	cbnz	r3, 800141a <MC_RunMotorControlTasks+0xa>
}
 8001418:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800141a:	f7ff feb7 	bl	800118c <MC_Scheduler>
    TSK_SafetyTask();
 800141e:	f7ff ffe7 	bl	80013f0 <TSK_SafetyTask>
}
 8001422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001426:	f000 bf31 	b.w	800228c <UI_Scheduler>
 800142a:	bf00      	nop
 800142c:	200006c0 	.word	0x200006c0

08001430 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <TSK_HardwareFaultTask+0x18>)
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	f004 fe05 	bl	8006044 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800143a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <TSK_HardwareFaultTask+0x1c>)
 8001440:	2200      	movs	r2, #0
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	f005 bc48 	b.w	8006cd8 <STM_FaultProcessing>
 8001448:	2000086c 	.word	0x2000086c
 800144c:	20000920 	.word	0x20000920

08001450 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001450:	b410      	push	{r4}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001452:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001456:	4a2d      	ldr	r2, [pc, #180]	; (800150c <mc_lock_pins+0xbc>)
 8001458:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	61d9      	str	r1, [r3, #28]
 8001460:	b08b      	sub	sp, #44	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001462:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	9209      	str	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001468:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800146c:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8001470:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001472:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001474:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001476:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001478:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800147a:	4a25      	ldr	r2, [pc, #148]	; (8001510 <mc_lock_pins+0xc0>)
  temp = READ_REG(GPIOx->LCKR);
 800147c:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800147e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001482:	f44f 31a0 	mov.w	r1, #81920	; 0x14000
  (void) temp;
 8001486:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001488:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800148a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800148c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800148e:	69d1      	ldr	r1, [r2, #28]
 8001490:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001492:	f44f 6080 	mov.w	r0, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001496:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  (void) temp;
 800149a:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800149c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800149e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014a2:	69d9      	ldr	r1, [r3, #28]
 80014a4:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014aa:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  (void) temp;
 80014ae:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014b6:	69d2      	ldr	r2, [r2, #28]
 80014b8:	9205      	str	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014be:	f44f 3284 	mov.w	r2, #67584	; 0x10800
  (void) temp;
 80014c2:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	9204      	str	r2, [sp, #16]
  (void) temp;
 80014ce:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d0:	4a10      	ldr	r2, [pc, #64]	; (8001514 <mc_lock_pins+0xc4>)
 80014d2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014d4:	2104      	movs	r1, #4
 80014d6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	9203      	str	r2, [sp, #12]
  (void) temp;
 80014de:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <mc_lock_pins+0xc8>)
 80014e2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014e4:	2102      	movs	r1, #2
 80014e6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ee:	2101      	movs	r1, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  (void) temp;
 80014f4:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014f8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014fa:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001500:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8001502:	b00b      	add	sp, #44	; 0x2c
 8001504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	00010100 	.word	0x00010100
 8001510:	48000400 	.word	0x48000400
 8001514:	00010004 	.word	0x00010004
 8001518:	00010002 	.word	0x00010002

0800151c <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	460c      	mov	r4, r1
 8001520:	b08d      	sub	sp, #52	; 0x34
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001522:	2100      	movs	r1, #0
{
 8001524:	4616      	mov	r6, r2
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001526:	0962      	lsrs	r2, r4, #5
{
 8001528:	461f      	mov	r7, r3
 800152a:	4605      	mov	r5, r0
  bool bNoError = false; // Default is error
 800152c:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 8001530:	d122      	bne.n	8001578 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 8001532:	2c12      	cmp	r4, #18
 8001534:	d814      	bhi.n	8001560 <MCP_ReceivedFrame+0x44>
 8001536:	e8df f014 	tbh	[pc, r4, lsl #1]
 800153a:	0016      	.short	0x0016
 800153c:	00d1003f 	.word	0x00d1003f
 8001540:	00130163 	.word	0x00130163
 8001544:	01700013 	.word	0x01700013
 8001548:	01f80241 	.word	0x01f80241
 800154c:	019d021c 	.word	0x019d021c
 8001550:	01cc01b5 	.word	0x01cc01b5
 8001554:	001301e5 	.word	0x001301e5
 8001558:	00130013 	.word	0x00130013
 800155c:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001560:	2301      	movs	r3, #1
 8001562:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001566:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800156a:	2301      	movs	r3, #1
 800156c:	f10d 020e 	add.w	r2, sp, #14
 8001570:	21ff      	movs	r1, #255	; 0xff
 8001572:	47a0      	blx	r4
    }
  }
}
 8001574:	b00d      	add	sp, #52	; 0x34
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001578:	3a01      	subs	r2, #1
 800157a:	f000 fec9 	bl	8002310 <UI_SetReg>
 800157e:	2800      	cmp	r0, #0
 8001580:	f000 8234 	beq.w	80019ec <MCP_ReceivedFrame+0x4d0>
  switch (Code)
 8001584:	f004 041f 	and.w	r4, r4, #31
 8001588:	2c12      	cmp	r4, #18
 800158a:	f200 8238 	bhi.w	80019fe <MCP_ReceivedFrame+0x4e2>
 800158e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001592:	01ea      	.short	0x01ea
 8001594:	00a50013 	.word	0x00a50013
 8001598:	02360137 	.word	0x02360137
 800159c:	01440236 	.word	0x01440236
 80015a0:	01cc0215 	.word	0x01cc0215
 80015a4:	017101f0 	.word	0x017101f0
 80015a8:	01a00189 	.word	0x01a00189
 80015ac:	023601b9 	.word	0x023601b9
 80015b0:	02360236 	.word	0x02360236
 80015b4:	01ea0236 	.word	0x01ea0236
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80015b8:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 80015ba:	2305      	movs	r3, #5
 80015bc:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80015c0:	2988      	cmp	r1, #136	; 0x88
 80015c2:	f200 8237 	bhi.w	8001a34 <MCP_ReceivedFrame+0x518>
 80015c6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80015ca:	028c      	.short	0x028c
 80015cc:	02350235 	.word	0x02350235
 80015d0:	02350282 	.word	0x02350282
 80015d4:	023e023e 	.word	0x023e023e
 80015d8:	023e023e 	.word	0x023e023e
 80015dc:	023e023e 	.word	0x023e023e
 80015e0:	023e023e 	.word	0x023e023e
 80015e4:	023e023e 	.word	0x023e023e
 80015e8:	025d023e 	.word	0x025d023e
 80015ec:	0235025d 	.word	0x0235025d
 80015f0:	023e0235 	.word	0x023e0235
 80015f4:	023e023e 	.word	0x023e023e
 80015f8:	023e023e 	.word	0x023e023e
 80015fc:	02350235 	.word	0x02350235
 8001600:	01510235 	.word	0x01510235
 8001604:	02350151 	.word	0x02350151
 8001608:	02350235 	.word	0x02350235
 800160c:	02350235 	.word	0x02350235
 8001610:	02350235 	.word	0x02350235
 8001614:	02350235 	.word	0x02350235
 8001618:	02350235 	.word	0x02350235
 800161c:	02350235 	.word	0x02350235
 8001620:	02350235 	.word	0x02350235
 8001624:	02350235 	.word	0x02350235
 8001628:	02350235 	.word	0x02350235
 800162c:	02350235 	.word	0x02350235
 8001630:	02350235 	.word	0x02350235
 8001634:	02350235 	.word	0x02350235
 8001638:	02350235 	.word	0x02350235
 800163c:	02350235 	.word	0x02350235
 8001640:	02350235 	.word	0x02350235
 8001644:	02350235 	.word	0x02350235
 8001648:	02350235 	.word	0x02350235
 800164c:	0235023e 	.word	0x0235023e
 8001650:	02350235 	.word	0x02350235
 8001654:	025d0235 	.word	0x025d0235
 8001658:	025d025d 	.word	0x025d025d
 800165c:	02350235 	.word	0x02350235
 8001660:	02350235 	.word	0x02350235
 8001664:	02350235 	.word	0x02350235
 8001668:	0235023e 	.word	0x0235023e
 800166c:	02350235 	.word	0x02350235
 8001670:	023e023e 	.word	0x023e023e
 8001674:	023e023e 	.word	0x023e023e
 8001678:	023e023e 	.word	0x023e023e
 800167c:	0235023e 	.word	0x0235023e
 8001680:	0235025d 	.word	0x0235025d
 8001684:	02350235 	.word	0x02350235
 8001688:	02350235 	.word	0x02350235
 800168c:	0235023e 	.word	0x0235023e
 8001690:	023e0235 	.word	0x023e0235
 8001694:	0235023e 	.word	0x0235023e
 8001698:	02350235 	.word	0x02350235
 800169c:	02350235 	.word	0x02350235
 80016a0:	02350235 	.word	0x02350235
 80016a4:	02350235 	.word	0x02350235
 80016a8:	02350235 	.word	0x02350235
 80016ac:	02350235 	.word	0x02350235
 80016b0:	02820235 	.word	0x02820235
 80016b4:	025d025d 	.word	0x025d025d
 80016b8:	025d025d 	.word	0x025d025d
 80016bc:	0235025d 	.word	0x0235025d
 80016c0:	02350235 	.word	0x02350235
 80016c4:	025d025d 	.word	0x025d025d
 80016c8:	02350235 	.word	0x02350235
 80016cc:	02350235 	.word	0x02350235
 80016d0:	02350235 	.word	0x02350235
 80016d4:	023e0235 	.word	0x023e0235
 80016d8:	023e023e 	.word	0x023e023e
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80016dc:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80016de:	2303      	movs	r3, #3
 80016e0:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 80016e4:	2988      	cmp	r1, #136	; 0x88
 80016e6:	f200 813e 	bhi.w	8001966 <MCP_ReceivedFrame+0x44a>
 80016ea:	e8df f011 	tbh	[pc, r1, lsl #1]
 80016ee:	01de      	.short	0x01de
 80016f0:	01de01b9 	.word	0x01de01b9
 80016f4:	01b901de 	.word	0x01b901de
 80016f8:	01910191 	.word	0x01910191
 80016fc:	01910191 	.word	0x01910191
 8001700:	01910191 	.word	0x01910191
 8001704:	01910191 	.word	0x01910191
 8001708:	01910191 	.word	0x01910191
 800170c:	01910191 	.word	0x01910191
 8001710:	01910191 	.word	0x01910191
 8001714:	01910191 	.word	0x01910191
 8001718:	01910191 	.word	0x01910191
 800171c:	01910191 	.word	0x01910191
 8001720:	01910191 	.word	0x01910191
 8001724:	013c0191 	.word	0x013c0191
 8001728:	01b9013c 	.word	0x01b9013c
 800172c:	01910191 	.word	0x01910191
 8001730:	01de0191 	.word	0x01de0191
 8001734:	013c013c 	.word	0x013c013c
 8001738:	013c013c 	.word	0x013c013c
 800173c:	013c013c 	.word	0x013c013c
 8001740:	013c013c 	.word	0x013c013c
 8001744:	013c013c 	.word	0x013c013c
 8001748:	013c013c 	.word	0x013c013c
 800174c:	013c013c 	.word	0x013c013c
 8001750:	013c013c 	.word	0x013c013c
 8001754:	013c013c 	.word	0x013c013c
 8001758:	013c013c 	.word	0x013c013c
 800175c:	013c013c 	.word	0x013c013c
 8001760:	013c013c 	.word	0x013c013c
 8001764:	013c013c 	.word	0x013c013c
 8001768:	013c013c 	.word	0x013c013c
 800176c:	013c013c 	.word	0x013c013c
 8001770:	013c0191 	.word	0x013c0191
 8001774:	013c013c 	.word	0x013c013c
 8001778:	01b9013c 	.word	0x01b9013c
 800177c:	01b901b9 	.word	0x01b901b9
 8001780:	01910191 	.word	0x01910191
 8001784:	01910191 	.word	0x01910191
 8001788:	01b901de 	.word	0x01b901de
 800178c:	01910191 	.word	0x01910191
 8001790:	01910191 	.word	0x01910191
 8001794:	01910191 	.word	0x01910191
 8001798:	01910191 	.word	0x01910191
 800179c:	01910191 	.word	0x01910191
 80017a0:	01de0191 	.word	0x01de0191
 80017a4:	013c01b9 	.word	0x013c01b9
 80017a8:	01910191 	.word	0x01910191
 80017ac:	01910191 	.word	0x01910191
 80017b0:	013c0191 	.word	0x013c0191
 80017b4:	0191013c 	.word	0x0191013c
 80017b8:	01de0191 	.word	0x01de0191
 80017bc:	01b901de 	.word	0x01b901de
 80017c0:	01b901b9 	.word	0x01b901b9
 80017c4:	01b901b9 	.word	0x01b901b9
 80017c8:	019101de 	.word	0x019101de
 80017cc:	01b90191 	.word	0x01b90191
 80017d0:	0191013c 	.word	0x0191013c
 80017d4:	01de0191 	.word	0x01de0191
 80017d8:	01b901b9 	.word	0x01b901b9
 80017dc:	01b901b9 	.word	0x01b901b9
 80017e0:	01b901b9 	.word	0x01b901b9
 80017e4:	01b901b9 	.word	0x01b901b9
 80017e8:	01b901b9 	.word	0x01b901b9
 80017ec:	01de01b9 	.word	0x01de01b9
 80017f0:	01de013c 	.word	0x01de013c
 80017f4:	01b901b9 	.word	0x01b901b9
 80017f8:	019101b9 	.word	0x019101b9
 80017fc:	01910191 	.word	0x01910191
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001800:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001802:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001804:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001808:	4628      	mov	r0, r5
 800180a:	f001 f9e9 	bl	8002be0 <UI_ExecCmd>
 800180e:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001812:	2800      	cmp	r0, #0
 8001814:	f43f aea7 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001818:	e03c      	b.n	8001894 <MCP_ReceivedFrame+0x378>
 800181a:	ac04      	add	r4, sp, #16
 800181c:	2100      	movs	r1, #0
 800181e:	4620      	mov	r0, r4
 8001820:	2220      	movs	r2, #32
 8001822:	f006 f913 	bl	8007a4c <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001826:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 800182a:	f10d 0012 	add.w	r0, sp, #18
 800182e:	1e71      	subs	r1, r6, #1
 8001830:	2300      	movs	r3, #0
 8001832:	e005      	b.n	8001840 <MCP_ReceivedFrame+0x324>
 8001834:	3301      	adds	r3, #1
 8001836:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001838:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800183c:	f000 815c 	beq.w	8001af8 <MCP_ReceivedFrame+0x5dc>
 8001840:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001844:	2a09      	cmp	r2, #9
 8001846:	d1f5      	bne.n	8001834 <MCP_ReceivedFrame+0x318>
 8001848:	1d5a      	adds	r2, r3, #5
 800184a:	1dd9      	adds	r1, r3, #7
 800184c:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 800184e:	5cb2      	ldrb	r2, [r6, r2]
 8001850:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001854:	5c72      	ldrb	r2, [r6, r1]
 8001856:	f88d 2011 	strb.w	r2, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 800185a:	5cf3      	ldrb	r3, [r6, r3]
 800185c:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001860:	4622      	mov	r2, r4
 8001862:	2320      	movs	r3, #32
 8001864:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001868:	21f0      	movs	r1, #240	; 0xf0
 800186a:	47a0      	blx	r4
      bNoError = true;
 800186c:	2301      	movs	r3, #1
 800186e:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001872:	e00f      	b.n	8001894 <MCP_ReceivedFrame+0x378>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001874:	78f0      	ldrb	r0, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001876:	7873      	ldrb	r3, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001878:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 800187a:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 800187c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001880:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001884:	b212      	sxth	r2, r2
 8001886:	b209      	sxth	r1, r1
 8001888:	4628      	mov	r0, r5
 800188a:	f001 fa3b 	bl	8002d04 <UI_SetCurrentReferences>
      bNoError = true;
 800188e:	2301      	movs	r3, #1
 8001890:	f88d 3009 	strb.w	r3, [sp, #9]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001894:	2300      	movs	r3, #0
 8001896:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800189a:	461a      	mov	r2, r3
 800189c:	21f0      	movs	r1, #240	; 0xf0
 800189e:	47a0      	blx	r4
}
 80018a0:	b00d      	add	sp, #52	; 0x34
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80018a4:	4c96      	ldr	r4, [pc, #600]	; (8001b00 <MCP_ReceivedFrame+0x5e4>)
      stepList.data = buffer;
 80018a6:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80018a8:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80018aa:	4621      	mov	r1, r4
 80018ac:	a804      	add	r0, sp, #16
      stepList.len = Size;
 80018ae:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80018b2:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80018b6:	f001 fa35 	bl	8002d24 <UI_GetMPInfo>
 80018ba:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 80018be:	2800      	cmp	r0, #0
 80018c0:	f43f ae51 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80018c4:	e9d5 0606 	ldrd	r0, r6, [r5, #24]
 80018c8:	7923      	ldrb	r3, [r4, #4]
 80018ca:	6822      	ldr	r2, [r4, #0]
 80018cc:	21f0      	movs	r1, #240	; 0xf0
 80018ce:	47b0      	blx	r6
  if (RequireAck)
 80018d0:	e650      	b.n	8001574 <MCP_ReceivedFrame+0x58>
 80018d2:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80018d6:	ac04      	add	r4, sp, #16
 80018d8:	3b01      	subs	r3, #1
 80018da:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80018dc:	2000      	movs	r0, #0
 80018de:	e004      	b.n	80018ea <MCP_ReceivedFrame+0x3ce>
 80018e0:	3001      	adds	r0, #1
 80018e2:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 80018e4:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80018e8:	d0ba      	beq.n	8001860 <MCP_ReceivedFrame+0x344>
 80018ea:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80018ee:	b2c6      	uxtb	r6, r0
 80018f0:	2900      	cmp	r1, #0
 80018f2:	d1f5      	bne.n	80018e0 <MCP_ReceivedFrame+0x3c4>
        outBuff[i] = 0;
 80018f4:	f1c6 021f 	rsb	r2, r6, #31
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	3201      	adds	r2, #1
 80018fc:	4420      	add	r0, r4
 80018fe:	f006 f8a5 	bl	8007a4c <memset>
 8001902:	e7ad      	b.n	8001860 <MCP_ReceivedFrame+0x344>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001904:	7970      	ldrb	r0, [r6, #5]
 8001906:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001908:	7873      	ldrb	r3, [r6, #1]
 800190a:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800190c:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001910:	eb01 2103 	add.w	r1, r1, r3, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001914:	b292      	uxth	r2, r2
 8001916:	b209      	sxth	r1, r1
 8001918:	4628      	mov	r0, r5
 800191a:	f001 f9af 	bl	8002c7c <UI_ExecTorqueRamp>
 800191e:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001922:	2800      	cmp	r0, #0
 8001924:	f43f ae1f 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001928:	e7b4      	b.n	8001894 <MCP_ReceivedFrame+0x378>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800192a:	f10d 030e 	add.w	r3, sp, #14
 800192e:	7831      	ldrb	r1, [r6, #0]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	f10d 020a 	add.w	r2, sp, #10
 8001936:	ab03      	add	r3, sp, #12
 8001938:	4628      	mov	r0, r5
 800193a:	f001 f9a9 	bl	8002c90 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800193e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001942:	f8bd 100e 	ldrh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001946:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 800194a:	f8ad 1014 	strh.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800194e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001952:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 8001954:	9304      	str	r3, [sp, #16]
      outBuff[6] = (uint8_t)(Durationms);
 8001956:	f8ad 2016 	strh.w	r2, [sp, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800195a:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 800195e:	2308      	movs	r3, #8
 8001960:	aa04      	add	r2, sp, #16
 8001962:	21f0      	movs	r1, #240	; 0xf0
 8001964:	47a0      	blx	r4
  if (RequireAck)
 8001966:	f89d 0009 	ldrb.w	r0, [sp, #9]
    if (bNoError)
 800196a:	2800      	cmp	r0, #0
 800196c:	f43f adfb 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001970:	e790      	b.n	8001894 <MCP_ReceivedFrame+0x378>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001972:	78b1      	ldrb	r1, [r6, #2]
 8001974:	7873      	ldrb	r3, [r6, #1]
 8001976:	78f2      	ldrb	r2, [r6, #3]
 8001978:	7934      	ldrb	r4, [r6, #4]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800197a:	7970      	ldrb	r0, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 800197c:	7a37      	ldrb	r7, [r6, #8]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800197e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001982:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001986:	4a5f      	ldr	r2, [pc, #380]	; (8001b04 <MCP_ReceivedFrame+0x5e8>)
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001988:	79b1      	ldrb	r1, [r6, #6]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800198a:	eb03 6304 	add.w	r3, r3, r4, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800198e:	fb82 4203 	smull	r4, r2, r2, r3
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001992:	79f4      	ldrb	r4, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001994:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001998:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800199c:	b200      	sxth	r0, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 800199e:	eb04 2207 	add.w	r2, r4, r7, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80019a2:	7831      	ldrb	r1, [r6, #0]
 80019a4:	9000      	str	r0, [sp, #0]
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	b292      	uxth	r2, r2
 80019aa:	4628      	mov	r0, r5
 80019ac:	f001 f98e 	bl	8002ccc <UI_SetRevupData>
 80019b0:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80019b4:	2800      	cmp	r0, #0
 80019b6:	f43f add6 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 80019ba:	e76b      	b.n	8001894 <MCP_ReceivedFrame+0x378>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019bc:	7877      	ldrb	r7, [r6, #1]
 80019be:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019c0:	7970      	ldrb	r0, [r6, #5]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019c2:	78b4      	ldrb	r4, [r6, #2]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019c4:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80019c6:	78f1      	ldrb	r1, [r6, #3]
 80019c8:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80019cc:	eb03 4304 	add.w	r3, r3, r4, lsl #16
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80019d0:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80019d4:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 80019d8:	b292      	uxth	r2, r2
 80019da:	4628      	mov	r0, r5
 80019dc:	f001 f93c 	bl	8002c58 <UI_ExecSpeedRamp>
 80019e0:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 80019e4:	2800      	cmp	r0, #0
 80019e6:	f43f adbe 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 80019ea:	e753      	b.n	8001894 <MCP_ReceivedFrame+0x378>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80019ec:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80019f0:	230b      	movs	r3, #11
 80019f2:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80019f6:	2800      	cmp	r0, #0
 80019f8:	f43f adb5 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 80019fc:	e74a      	b.n	8001894 <MCP_ReceivedFrame+0x378>
 80019fe:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	f43f adac 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001a0e:	e741      	b.n	8001894 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a10:	f10d 0209 	add.w	r2, sp, #9
 8001a14:	4628      	mov	r0, r5
 8001a16:	f000 fde9 	bl	80025ec <UI_GetReg>
          if ( bNoError == true )
 8001a1a:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001a1e:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f43f ada0 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001a26:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	aa04      	add	r2, sp, #16
 8001a2e:	21f0      	movs	r1, #240	; 0xf0
 8001a30:	47a0      	blx	r4
  if (RequireAck)
 8001a32:	e59f      	b.n	8001574 <MCP_ReceivedFrame+0x58>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001a34:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 8001a3e:	2800      	cmp	r0, #0
 8001a40:	f43f ad91 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001a44:	e726      	b.n	8001894 <MCP_ReceivedFrame+0x378>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001a46:	78b2      	ldrb	r2, [r6, #2]
 8001a48:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001a50:	f000 fc5e 	bl	8002310 <UI_SetReg>
 8001a54:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	f43f ad84 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001a5e:	e719      	b.n	8001894 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001a60:	f10d 0209 	add.w	r2, sp, #9
 8001a64:	4628      	mov	r0, r5
 8001a66:	f000 fdc1 	bl	80025ec <UI_GetReg>
          if ( bNoError == true )
 8001a6a:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001a6e:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f43f ad78 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001a76:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	aa04      	add	r2, sp, #16
 8001a7e:	21f0      	movs	r1, #240	; 0xf0
 8001a80:	47a0      	blx	r4
  if (RequireAck)
 8001a82:	e577      	b.n	8001574 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001a84:	78b4      	ldrb	r4, [r6, #2]
 8001a86:	7873      	ldrb	r3, [r6, #1]
 8001a88:	78f0      	ldrb	r0, [r6, #3]
 8001a8a:	7932      	ldrb	r2, [r6, #4]
 8001a8c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8001a90:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001a94:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 fc39 	bl	8002310 <UI_SetReg>
 8001a9e:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	f43f ad5f 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001aa8:	e6f4      	b.n	8001894 <MCP_ReceivedFrame+0x378>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001aaa:	f10d 0209 	add.w	r2, sp, #9
 8001aae:	4628      	mov	r0, r5
 8001ab0:	f000 fd9c 	bl	80025ec <UI_GetReg>
           if ( bNoError == true )
 8001ab4:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ab8:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f43f ad53 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001ac0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	aa04      	add	r2, sp, #16
 8001ac8:	21f0      	movs	r1, #240	; 0xf0
 8001aca:	47a0      	blx	r4
  if (RequireAck)
 8001acc:	e552      	b.n	8001574 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001ace:	7872      	ldrb	r2, [r6, #1]
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f000 fc1d 	bl	8002310 <UI_SetReg>
 8001ad6:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001ada:	2800      	cmp	r0, #0
 8001adc:	f43f ad43 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001ae0:	e6d8      	b.n	8001894 <MCP_ReceivedFrame+0x378>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001ae2:	7872      	ldrb	r2, [r6, #1]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 fc12 	bl	8002310 <UI_SetReg>
 8001aec:	f88d 0009 	strb.w	r0, [sp, #9]
    if (bNoError)
 8001af0:	2800      	cmp	r0, #0
 8001af2:	f43f ad38 	beq.w	8001566 <MCP_ReceivedFrame+0x4a>
 8001af6:	e6cd      	b.n	8001894 <MCP_ReceivedFrame+0x378>
 8001af8:	2326      	movs	r3, #38	; 0x26
 8001afa:	2124      	movs	r1, #36	; 0x24
 8001afc:	2222      	movs	r2, #34	; 0x22
 8001afe:	e6a6      	b.n	800184e <MCP_ReceivedFrame+0x332>
 8001b00:	200006c8 	.word	0x200006c8
 8001b04:	2aaaaaab 	.word	0x2aaaaaab

08001b08 <MCP_WaitNextFrame>:
{
 8001b08:	b510      	push	{r4, lr}
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001b0c:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001b0e:	6980      	ldr	r0, [r0, #24]
 8001b10:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b18:	69a0      	ldr	r0, [r4, #24]
 8001b1a:	6a23      	ldr	r3, [r4, #32]
}
 8001b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001b20:	4718      	bx	r3
 8001b22:	bf00      	nop

08001b24 <MCP_Init>:
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b26:	b083      	sub	sp, #12
 8001b28:	4604      	mov	r4, r0
  FCP_SetClient( pFCP, pHandle,
 8001b2a:	4f0b      	ldr	r7, [pc, #44]	; (8001b58 <MCP_Init+0x34>)
{
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
  pHandle->pFCP = pFCP;
 8001b30:	61a0      	str	r0, [r4, #24]
  pHandle->s_fwVer = s_fwVer;
 8001b32:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
{
 8001b36:	4616      	mov	r6, r2
 8001b38:	461d      	mov	r5, r3
  FCP_SetClient( pFCP, pHandle,
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <MCP_Init+0x38>)
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MCP_Init+0x3c>)
 8001b3e:	9700      	str	r7, [sp, #0]
 8001b40:	4621      	mov	r1, r4
{
 8001b42:	9f08      	ldr	r7, [sp, #32]
  FCP_SetClient( pFCP, pHandle,
 8001b44:	f003 fdd6 	bl	80056f4 <FCP_SetClient>
  pHandle->fFcpReceive = fFcpReceive;
 8001b48:	e9c4 6507 	strd	r6, r5, [r4, #28]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001b4c:	6267      	str	r7, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff ffda 	bl	8001b08 <MCP_WaitNextFrame>
}
 8001b54:	b003      	add	sp, #12
 8001b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b58:	08001b65 	.word	0x08001b65
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	0800151d 	.word	0x0800151d

08001b64 <MCP_OnTimeOut>:
{
 8001b64:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001b66:	f7ff ffcf 	bl	8001b08 <MCP_WaitNextFrame>
}
 8001b6a:	bd08      	pop	{r3, pc}

08001b6c <MCP_SentFrame>:
{
 8001b6c:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001b6e:	f7ff ffcb 	bl	8001b08 <MCP_WaitNextFrame>
}
 8001b72:	bd08      	pop	{r3, pc}

08001b74 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001b74:	b530      	push	{r4, r5, lr}
 8001b76:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001b78:	f002 fb0e 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001b7e:	4d0c      	ldr	r5, [pc, #48]	; (8001bb0 <MX_MotorControl_Init+0x3c>)
 8001b80:	4c0c      	ldr	r4, [pc, #48]	; (8001bb4 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001b82:	fba3 3000 	umull	r3, r0, r3, r0
 8001b86:	09c0      	lsrs	r0, r0, #7
 8001b88:	f001 fde0 	bl	800374c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff f868 	bl	8000c64 <MCboot>
  mc_lock_pins();
 8001b94:	f7ff fc5c 	bl	8001450 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <MX_MotorControl_Init+0x44>)
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4807      	ldr	r0, [pc, #28]	; (8001bbc <MX_MotorControl_Init+0x48>)
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	f000 fb32 	bl	800220c <UI_TaskInit>
}
 8001ba8:	b003      	add	sp, #12
 8001baa:	bd30      	pop	{r4, r5, pc}
 8001bac:	10624dd3 	.word	0x10624dd3
 8001bb0:	2000093c 	.word	0x2000093c
 8001bb4:	20000938 	.word	0x20000938
 8001bb8:	08007cf8 	.word	0x08007cf8
 8001bbc:	20000678 	.word	0x20000678

08001bc0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bc0:	4971      	ldr	r1, [pc, #452]	; (8001d88 <RCM_RegisterRegConv+0x1c8>)
 8001bc2:	680b      	ldr	r3, [r1, #0]
{
 8001bc4:	b4f0      	push	{r4, r5, r6, r7}
 8001bc6:	4602      	mov	r2, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 809f 	beq.w	8001d0c <RCM_RegisterRegConv+0x14c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bce:	7904      	ldrb	r4, [r0, #4]
 8001bd0:	7918      	ldrb	r0, [r3, #4]
 8001bd2:	4284      	cmp	r4, r0
 8001bd4:	d01e      	beq.n	8001c14 <RCM_RegisterRegConv+0x54>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bd6:	684d      	ldr	r5, [r1, #4]
 8001bd8:	2d00      	cmp	r5, #0
 8001bda:	f000 80c4 	beq.w	8001d66 <RCM_RegisterRegConv+0x1a6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bde:	792b      	ldrb	r3, [r5, #4]
 8001be0:	42a3      	cmp	r3, r4
  uint8_t handle=255;
 8001be2:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001be6:	f000 8099 	beq.w	8001d1c <RCM_RegisterRegConv+0x15c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bea:	688e      	ldr	r6, [r1, #8]
 8001bec:	b1fe      	cbz	r6, 8001c2e <RCM_RegisterRegConv+0x6e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bee:	7933      	ldrb	r3, [r6, #4]
 8001bf0:	42a3      	cmp	r3, r4
 8001bf2:	f000 80aa 	beq.w	8001d4a <RCM_RegisterRegConv+0x18a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bf6:	68cd      	ldr	r5, [r1, #12]
 8001bf8:	2d00      	cmp	r5, #0
 8001bfa:	f000 80af 	beq.w	8001d5c <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bfe:	792b      	ldrb	r3, [r5, #4]
 8001c00:	42a3      	cmp	r3, r4
 8001c02:	f000 80bf 	beq.w	8001d84 <RCM_RegisterRegConv+0x1c4>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001c06:	2803      	cmp	r0, #3
 8001c08:	bf98      	it	ls
 8001c0a:	6813      	ldrls	r3, [r2, #0]
 8001c0c:	d91e      	bls.n	8001c4c <RCM_RegisterRegConv+0x8c>
 8001c0e:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001c10:	bcf0      	pop	{r4, r5, r6, r7}
 8001c12:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	4283      	cmp	r3, r0
 8001c1a:	f000 809d 	beq.w	8001d58 <RCM_RegisterRegConv+0x198>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c1e:	684d      	ldr	r5, [r1, #4]
 8001c20:	2d00      	cmp	r5, #0
 8001c22:	d1dc      	bne.n	8001bde <RCM_RegisterRegConv+0x1e>
 8001c24:	688e      	ldr	r6, [r1, #8]
      i++;
 8001c26:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c28:	2e00      	cmp	r6, #0
 8001c2a:	d1e0      	bne.n	8001bee <RCM_RegisterRegConv+0x2e>
 8001c2c:	e004      	b.n	8001c38 <RCM_RegisterRegConv+0x78>
 8001c2e:	2804      	cmp	r0, #4
 8001c30:	f240 80a5 	bls.w	8001d7e <RCM_RegisterRegConv+0x1be>
 8001c34:	6813      	ldr	r3, [r2, #0]
      i++;
 8001c36:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001c38:	68cd      	ldr	r5, [r1, #12]
 8001c3a:	b13d      	cbz	r5, 8001c4c <RCM_RegisterRegConv+0x8c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001c3c:	792e      	ldrb	r6, [r5, #4]
 8001c3e:	7914      	ldrb	r4, [r2, #4]
 8001c40:	42a6      	cmp	r6, r4
 8001c42:	d103      	bne.n	8001c4c <RCM_RegisterRegConv+0x8c>
 8001c44:	682c      	ldr	r4, [r5, #0]
 8001c46:	429c      	cmp	r4, r3
 8001c48:	d1dd      	bne.n	8001c06 <RCM_RegisterRegConv+0x46>
      i++;
 8001c4a:	2003      	movs	r0, #3
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001c4c:	689c      	ldr	r4, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c4e:	4d4f      	ldr	r5, [pc, #316]	; (8001d8c <RCM_RegisterRegConv+0x1cc>)
      RCM_handle_array [handle] = regConv;
 8001c50:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001c54:	2100      	movs	r1, #0
 8001c56:	f845 1030 	str.w	r1, [r5, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001c5a:	07e1      	lsls	r1, r4, #31
 8001c5c:	d41e      	bmi.n	8001c9c <RCM_RegisterRegConv+0xdc>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001c5e:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c60:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8001c62:	f021 0104 	bic.w	r1, r1, #4
 8001c66:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001c68:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001c6a:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001c6c:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8001c6e:	f021 0120 	bic.w	r1, r1, #32
 8001c72:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8001c74:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001c7c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001c80:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001c84:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001c86:	6899      	ldr	r1, [r3, #8]
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 8001c88:	2900      	cmp	r1, #0
 8001c8a:	dbfc      	blt.n	8001c86 <RCM_RegisterRegConv+0xc6>
  MODIFY_REG(ADCx->CR,
 8001c8c:	6899      	ldr	r1, [r3, #8]
 8001c8e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001c92:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001c96:	f041 0101 	orr.w	r1, r1, #1
 8001c9a:	6099      	str	r1, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8001c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c9e:	f021 010f 	bic.w	r1, r1, #15
 8001ca2:	6319      	str	r1, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001ca4:	7914      	ldrb	r4, [r2, #4]
 8001ca6:	2c09      	cmp	r4, #9
 8001ca8:	d83f      	bhi.n	8001d2a <RCM_RegisterRegConv+0x16a>
 8001caa:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001cae:	06a1      	lsls	r1, r4, #26
 8001cb0:	2502      	movs	r5, #2
 8001cb2:	ea41 5106 	orr.w	r1, r1, r6, lsl #20
 8001cb6:	fa05 f404 	lsl.w	r4, r5, r4
 8001cba:	4321      	orrs	r1, r4
 8001cbc:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001cc4:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001cc8:	fab4 f484 	clz	r4, r4
 8001ccc:	40e6      	lsrs	r6, r4
 8001cce:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8001cd0:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001cd4:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 8001cd8:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 8001cdc:	fa94 f7a4 	rbit	r7, r4
 8001ce0:	fab7 f787 	clz	r7, r7
 8001ce4:	fa94 f4a4 	rbit	r4, r4
 8001ce8:	f04f 0c07 	mov.w	ip, #7
 8001cec:	6892      	ldr	r2, [r2, #8]
 8001cee:	fab4 f484 	clz	r4, r4
 8001cf2:	fa21 f707 	lsr.w	r7, r1, r7
 8001cf6:	fa0c f707 	lsl.w	r7, ip, r7
 8001cfa:	40e1      	lsrs	r1, r4
 8001cfc:	408a      	lsls	r2, r1
 8001cfe:	ea25 0107 	bic.w	r1, r5, r7
 8001d02:	4311      	orrs	r1, r2
 8001d04:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
}
 8001d08:	bcf0      	pop	{r4, r5, r6, r7}
 8001d0a:	4770      	bx	lr
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d0c:	684d      	ldr	r5, [r1, #4]
 8001d0e:	b38d      	cbz	r5, 8001d74 <RCM_RegisterRegConv+0x1b4>
 8001d10:	7914      	ldrb	r4, [r2, #4]
  uint8_t i=0;
 8001d12:	4618      	mov	r0, r3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d14:	792b      	ldrb	r3, [r5, #4]
 8001d16:	42a3      	cmp	r3, r4
 8001d18:	f47f af67 	bne.w	8001bea <RCM_RegisterRegConv+0x2a>
 8001d1c:	682d      	ldr	r5, [r5, #0]
 8001d1e:	6813      	ldr	r3, [r2, #0]
 8001d20:	429d      	cmp	r5, r3
 8001d22:	f47f af62 	bne.w	8001bea <RCM_RegisterRegConv+0x2a>
 8001d26:	2001      	movs	r0, #1
 8001d28:	e790      	b.n	8001c4c <RCM_RegisterRegConv+0x8c>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8001d2a:	f06f 061d 	mvn.w	r6, #29
 8001d2e:	2503      	movs	r5, #3
 8001d30:	2102      	movs	r1, #2
 8001d32:	fb15 6504 	smlabb	r5, r5, r4, r6
 8001d36:	40a1      	lsls	r1, r4
 8001d38:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 8001d3c:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8001d40:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001d44:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001d48:	e7ba      	b.n	8001cc0 <RCM_RegisterRegConv+0x100>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001d4a:	6835      	ldr	r5, [r6, #0]
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	429d      	cmp	r5, r3
 8001d50:	f47f af51 	bne.w	8001bf6 <RCM_RegisterRegConv+0x36>
      i++;
 8001d54:	2002      	movs	r0, #2
 8001d56:	e779      	b.n	8001c4c <RCM_RegisterRegConv+0x8c>
  uint8_t i=0;
 8001d58:	2000      	movs	r0, #0
 8001d5a:	e777      	b.n	8001c4c <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d5c:	2804      	cmp	r0, #4
 8001d5e:	6813      	ldr	r3, [r2, #0]
 8001d60:	f63f af73 	bhi.w	8001c4a <RCM_RegisterRegConv+0x8a>
 8001d64:	e772      	b.n	8001c4c <RCM_RegisterRegConv+0x8c>
 8001d66:	688e      	ldr	r6, [r1, #8]
      i++;
 8001d68:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	f47f af3f 	bne.w	8001bee <RCM_RegisterRegConv+0x2e>
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	e761      	b.n	8001c38 <RCM_RegisterRegConv+0x78>
 8001d74:	688e      	ldr	r6, [r1, #8]
 8001d76:	b116      	cbz	r6, 8001d7e <RCM_RegisterRegConv+0x1be>
 8001d78:	7914      	ldrb	r4, [r2, #4]
  uint8_t i=0;
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	e737      	b.n	8001bee <RCM_RegisterRegConv+0x2e>
 8001d7e:	6813      	ldr	r3, [r2, #0]
 8001d80:	4630      	mov	r0, r6
 8001d82:	e759      	b.n	8001c38 <RCM_RegisterRegConv+0x78>
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	e75d      	b.n	8001c44 <RCM_RegisterRegConv+0x84>
 8001d88:	20000968 	.word	0x20000968
 8001d8c:	20000944 	.word	0x20000944

08001d90 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8001d90:	b410      	push	{r4}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <RCM_ExecRegularConv+0x78>)
 8001d94:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001d98:	7919      	ldrb	r1, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2909      	cmp	r1, #9
 8001d9e:	d825      	bhi.n	8001dec <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001da0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001da4:	068b      	lsls	r3, r1, #26
 8001da6:	2002      	movs	r0, #2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001da8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dac:	fa00 f101 	lsl.w	r1, r0, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001db0:	430b      	orrs	r3, r1
 8001db2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001db6:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8001dba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dbc:	0d1b      	lsrs	r3, r3, #20
 8001dbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dc2:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001dca:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8001dcc:	6893      	ldr	r3, [r2, #8]
 8001dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001ddc:	6813      	ldr	r3, [r2, #0]

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8001dde:	075b      	lsls	r3, r3, #29
 8001de0:	d5fc      	bpl.n	8001ddc <RCM_ExecRegularConv+0x4c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8001de2:	6c10      	ldr	r0, [r2, #64]	; 0x40
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8001de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001de8:	b280      	uxth	r0, r0
 8001dea:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8001dec:	2003      	movs	r0, #3
 8001dee:	f06f 041d 	mvn.w	r4, #29
 8001df2:	2302      	movs	r3, #2
 8001df4:	fb10 4001 	smlabb	r0, r0, r1, r4
 8001df8:	408b      	lsls	r3, r1
 8001dfa:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8001dfe:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8001e02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e06:	e7d4      	b.n	8001db2 <RCM_ExecRegularConv+0x22>
 8001e08:	20000968 	.word	0x20000968

08001e0c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001e10:	4c0f      	ldr	r4, [pc, #60]	; (8001e50 <RCM_ExecUserConv+0x44>)
 8001e12:	7823      	ldrb	r3, [r4, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d001      	beq.n	8001e1c <RCM_ExecUserConv+0x10>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e1c:	4d0d      	ldr	r5, [pc, #52]	; (8001e54 <RCM_ExecUserConv+0x48>)
 8001e1e:	4f0e      	ldr	r7, [pc, #56]	; (8001e58 <RCM_ExecUserConv+0x4c>)
 8001e20:	7828      	ldrb	r0, [r5, #0]
 8001e22:	f7ff ffb5 	bl	8001d90 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e26:	782d      	ldrb	r5, [r5, #0]
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <RCM_ExecUserConv+0x50>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e2a:	8038      	strh	r0, [r7, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e2c:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e30:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001e32:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8001e34:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001e36:	2e00      	cmp	r6, #0
 8001e38:	d0ee      	beq.n	8001e18 <RCM_ExecUserConv+0xc>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001e3e:	2000      	movs	r0, #0
 8001e40:	7020      	strb	r0, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4628      	mov	r0, r5
 8001e46:	4633      	mov	r3, r6
}
 8001e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001e4c:	4718      	bx	r3
 8001e4e:	bf00      	nop
 8001e50:	20000964 	.word	0x20000964
 8001e54:	20000940 	.word	0x20000940
 8001e58:	20000978 	.word	0x20000978
 8001e5c:	20000944 	.word	0x20000944

08001e60 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8001e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8001e68:	f7ff b9bc 	b.w	80011e4 <TSK_HighFrequencyTask>

08001e6c <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8001e6e:	4804      	ldr	r0, [pc, #16]	; (8001e80 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001e70:	f06f 0201 	mvn.w	r2, #1
 8001e74:	611a      	str	r2, [r3, #16]
 8001e76:	f004 bc25 	b.w	80066c4 <R3_1_TIMx_UP_IRQHandler>
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	20000258 	.word	0x20000258

08001e84 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8001e84:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	0611      	lsls	r1, r2, #24
 8001e8c:	d505      	bpl.n	8001e9a <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8001e8e:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	f004 fc4f 	bl	8006738 <R3_1_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	05d2      	lsls	r2, r2, #23
 8001ea0:	d505      	bpl.n	8001eae <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8001ea2:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	f004 fc25 	bl	80066f8 <R3_1_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8001eae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8001eb2:	f7ff b96b 	b.w	800118c <MC_Scheduler>
 8001eb6:	bf00      	nop
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	20000258 	.word	0x20000258

08001ec0 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8001ec0:	b510      	push	{r4, lr}

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8001ec2:	4c18      	ldr	r4, [pc, #96]	; (8001f24 <USART1_IRQHandler+0x64>)
 8001ec4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	0691      	lsls	r1, r2, #26
 8001ecc:	d50b      	bpl.n	8001ee6 <USART1_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001ece:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	b2c9      	uxtb	r1, r1
 8001ed4:	f005 f840 	bl	8006f58 <UFCP_RX_IRQ_Handler>
 8001ed8:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d01a      	beq.n	8001f14 <USART1_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d01d      	beq.n	8001f1e <USART1_IRQHandler+0x5e>
 8001ee2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001ee6:	69da      	ldr	r2, [r3, #28]
 8001ee8:	0612      	lsls	r2, r2, #24
 8001eea:	d504      	bpl.n	8001ef6 <USART1_IRQHandler+0x36>
  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8001eec:	480d      	ldr	r0, [pc, #52]	; (8001f24 <USART1_IRQHandler+0x64>)
 8001eee:	f004 ff9b 	bl	8006e28 <UFCP_TX_IRQ_Handler>
 8001ef2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	071b      	lsls	r3, r3, #28
 8001efa:	d50a      	bpl.n	8001f12 <USART1_IRQHandler+0x52>
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <USART1_IRQHandler+0x64>)
 8001efe:	f005 f88d 	bl	800701c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001f02:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001f06:	2208      	movs	r2, #8
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */

}
 8001f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f0c:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8001f0e:	f000 b9df 	b.w	80022d0 <UI_SerialCommunicationTimeOutStop>
}
 8001f12:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8001f14:	f000 f9e2 	bl	80022dc <UI_SerialCommunicationTimeOutStart>
    if (retVal == 2)
 8001f18:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8001f1c:	e7e3      	b.n	8001ee6 <USART1_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8001f1e:	f000 f9d7 	bl	80022d0 <UI_SerialCommunicationTimeOutStop>
 8001f22:	e7de      	b.n	8001ee2 <USART1_IRQHandler+0x22>
 8001f24:	2000053c 	.word	0x2000053c

08001f28 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8001f2a:	f7ff fa81 	bl	8001430 <TSK_HardwareFaultTask>
 8001f2e:	4d18      	ldr	r5, [pc, #96]	; (8001f90 <HardFault_Handler+0x68>)
 8001f30:	2608      	movs	r6, #8
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8001f32:	462c      	mov	r4, r5
 8001f34:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	0711      	lsls	r1, r2, #28
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	d508      	bpl.n	8001f52 <HardFault_Handler+0x2a>
 8001f40:	f005 f86c 	bl	800701c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8001f44:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8001f48:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8001f4a:	f000 f9c1 	bl	80022d0 <UI_SerialCommunicationTimeOutStop>
 8001f4e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	0612      	lsls	r2, r2, #24
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8001f56:	4620      	mov	r0, r4
 8001f58:	d513      	bpl.n	8001f82 <HardFault_Handler+0x5a>
 8001f5a:	f004 ff65 	bl	8006e28 <UFCP_TX_IRQ_Handler>
 8001f5e:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001f62:	69da      	ldr	r2, [r3, #28]
 8001f64:	0691      	lsls	r1, r2, #26
 8001f66:	d5e7      	bpl.n	8001f38 <HardFault_Handler+0x10>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001f68:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	b2c9      	uxtb	r1, r1
 8001f6e:	f004 fff3 	bl	8006f58 <UFCP_RX_IRQ_Handler>
 8001f72:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d008      	beq.n	8001f8a <HardFault_Handler+0x62>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d1db      	bne.n	8001f34 <HardFault_Handler+0xc>
        {
          UI_SerialCommunicationTimeOutStop();
 8001f7c:	f000 f9a8 	bl	80022d0 <UI_SerialCommunicationTimeOutStop>
 8001f80:	e7d8      	b.n	8001f34 <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	0692      	lsls	r2, r2, #26
 8001f86:	d5d7      	bpl.n	8001f38 <HardFault_Handler+0x10>
 8001f88:	e7ee      	b.n	8001f68 <HardFault_Handler+0x40>
          UI_SerialCommunicationTimeOutStart();
 8001f8a:	f000 f9a7 	bl	80022dc <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8001f8e:	e7d1      	b.n	8001f34 <HardFault_Handler+0xc>
 8001f90:	2000053c 	.word	0x2000053c

08001f94 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8001f94:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8001f96:	4c0a      	ldr	r4, [pc, #40]	; (8001fc0 <SysTick_Handler+0x2c>)
 8001f98:	7823      	ldrb	r3, [r4, #0]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d006      	beq.n	8001fac <SysTick_Handler+0x18>
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	b2db      	uxtb	r3, r3
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8001fa2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8001fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001fa8:	f7ff ba32 	b.w	8001410 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8001fac:	f000 fefc 	bl	8002da8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8001fb0:	f001 fbe8 	bl	8003784 <HAL_SYSTICK_IRQHandler>
 8001fb4:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8001fb6:	7023      	strb	r3, [r4, #0]
}
 8001fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8001fbc:	f7ff ba28 	b.w	8001410 <MC_RunMotorControlTasks>
 8001fc0:	2000067c 	.word	0x2000067c

08001fc4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_MspInit+0x30>)
 8001fc6:	699a      	ldr	r2, [r3, #24]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	619a      	str	r2, [r3, #24]
 8001fce:	699a      	ldr	r2, [r3, #24]
{
 8001fd0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	f002 0201 	and.w	r2, r2, #1
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fe0:	61da      	str	r2, [r3, #28]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001fec:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001ff0:	f001 bb52 	b.w	8003698 <HAL_NVIC_SetPriorityGrouping>
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001ffa:	6802      	ldr	r2, [r0, #0]
{
 8001ffc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffe:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002000:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002008:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800200c:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 800200e:	d001      	beq.n	8002014 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002010:	b008      	add	sp, #32
 8002012:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002014:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8002018:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002020:	6951      	ldr	r1, [r2, #20]
 8002022:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002026:	6151      	str	r1, [r2, #20]
 8002028:	6951      	ldr	r1, [r2, #20]
 800202a:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800202e:	9100      	str	r1, [sp, #0]
 8002030:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	6951      	ldr	r1, [r2, #20]
 8002034:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002038:	6151      	str	r1, [r2, #20]
 800203a:	6952      	ldr	r2, [r2, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002042:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 8002044:	2303      	movs	r3, #3
 8002046:	2207      	movs	r2, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 800204a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f001 fb9c 	bl	800378c <HAL_GPIO_Init>
}
 8002054:	b008      	add	sp, #32
 8002056:	bd10      	pop	{r4, pc}

08002058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002058:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800205a:	6801      	ldr	r1, [r0, #0]
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_SPI_MspInit+0x68>)
{
 800205e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8002062:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002068:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800206c:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 800206e:	d001      	beq.n	8002074 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002070:	b009      	add	sp, #36	; 0x24
 8002072:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002074:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002078:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	4811      	ldr	r0, [pc, #68]	; (80020c4 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002084:	619a      	str	r2, [r3, #24]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800208c:	9200      	str	r2, [sp, #0]
 800208e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002096:	615a      	str	r2, [r3, #20]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020a0:	2305      	movs	r3, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020a6:	2201      	movs	r2, #1
 80020a8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80020ac:	2438      	movs	r4, #56	; 0x38
 80020ae:	2502      	movs	r5, #2
 80020b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80020b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b8:	f001 fb68 	bl	800378c <HAL_GPIO_Init>
}
 80020bc:	b009      	add	sp, #36	; 0x24
 80020be:	bd30      	pop	{r4, r5, pc}
 80020c0:	40013000 	.word	0x40013000
 80020c4:	48000400 	.word	0x48000400

080020c8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_TIM_Base_MspInit+0x28>)
 80020ca:	6802      	ldr	r2, [r0, #0]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d000      	beq.n	80020d2 <HAL_TIM_Base_MspInit+0xa>
 80020d0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 80020d6:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020d8:	699a      	ldr	r2, [r3, #24]
 80020da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020de:	619a      	str	r2, [r3, #24]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020ea:	b002      	add	sp, #8
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00

080020f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80020f6:	6801      	ldr	r1, [r0, #0]
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <HAL_TIM_MspPostInit+0xa0>)
{
 80020fa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80020fe:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002104:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002108:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800210a:	d001      	beq.n	8002110 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800210c:	b008      	add	sp, #32
 800210e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002110:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002114:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 8002118:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 800211c:	481e      	ldr	r0, [pc, #120]	; (8002198 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002122:	615a      	str	r2, [r3, #20]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800212a:	9200      	str	r2, [sp, #0]
 800212c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	695a      	ldr	r2, [r3, #20]
 8002130:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002134:	615a      	str	r2, [r3, #20]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 800213e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002142:	2503      	movs	r5, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 8002146:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002148:	2606      	movs	r6, #6
    HAL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 800214a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 800214c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002150:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002154:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 8002156:	f001 fb19 	bl	800378c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 800215a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800215e:	2102      	movs	r1, #2
 8002160:	e9cd 0102 	strd	r0, r1, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002164:	2304      	movs	r3, #4
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002166:	a902      	add	r1, sp, #8
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800216a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 800216c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8002170:	f001 fb0c 	bl	800378c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_UL_Pin;
 8002174:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002178:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	a902      	add	r1, sp, #8
 800217c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_UL_Pin;
 8002180:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002184:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002188:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218a:	f001 faff 	bl	800378c <HAL_GPIO_Init>
}
 800218e:	b008      	add	sp, #32
 8002190:	bd70      	pop	{r4, r5, r6, pc}
 8002192:	bf00      	nop
 8002194:	40012c00 	.word	0x40012c00
 8002198:	48000400 	.word	0x48000400

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800219e:	6801      	ldr	r1, [r0, #0]
 80021a0:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_UART_MspInit+0x68>)
{
 80021a2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 80021a6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80021ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80021b0:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 80021b2:	d001      	beq.n	80021b8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021b4:	b009      	add	sp, #36	; 0x24
 80021b6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	4811      	ldr	r0, [pc, #68]	; (8002208 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c8:	619a      	str	r2, [r3, #24]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021d0:	9200      	str	r2, [sp, #0]
 80021d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021da:	615a      	str	r2, [r3, #20]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e4:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80021ea:	2200      	movs	r2, #0
 80021ec:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80021f0:	24c0      	movs	r4, #192	; 0xc0
 80021f2:	2502      	movs	r5, #2
 80021f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80021f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f001 fac6 	bl	800378c <HAL_GPIO_Init>
}
 8002200:	b009      	add	sp, #36	; 0x24
 8002202:	bd30      	pop	{r4, r5, pc}
 8002204:	40013800 	.word	0x40013800
 8002208:	48000400 	.word	0x48000400

0800220c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800220c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
    pMCP->_Super = UI_Params;
 8002210:	4d17      	ldr	r5, [pc, #92]	; (8002270 <UI_TaskInit+0x64>)
    pMCP = &MCP_UI_Params;
 8002212:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002284 <UI_TaskInit+0x78>

    UFCP_Init( & pUSART );
 8002216:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002288 <UI_TaskInit+0x7c>
{
 800221a:	468e      	mov	lr, r1
 800221c:	4681      	mov	r9, r0
 800221e:	4616      	mov	r6, r2
 8002220:	461f      	mov	r7, r3
    pMCP->_Super = UI_Params;
 8002222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002224:	4664      	mov	r4, ip
 8002226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002228:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 800222c:	b082      	sub	sp, #8
    pMCP = &MCP_UI_Params;
 800222e:	4d11      	ldr	r5, [pc, #68]	; (8002274 <UI_TaskInit+0x68>)
{
 8002230:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    pMCP = &MCP_UI_Params;
 8002234:	f8c5 c000 	str.w	ip, [r5]
    pMCP->_Super = UI_Params;
 8002238:	e884 0003 	stmia.w	r4, {r0, r1}
    UFCP_Init( & pUSART );
 800223c:	4640      	mov	r0, r8
{
 800223e:	4674      	mov	r4, lr
    UFCP_Init( & pUSART );
 8002240:	f004 fdf0 	bl	8006e24 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002244:	f8cd a004 	str.w	sl, [sp, #4]
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <UI_TaskInit+0x6c>)
 800224a:	6828      	ldr	r0, [r5, #0]
 800224c:	4a0b      	ldr	r2, [pc, #44]	; (800227c <UI_TaskInit+0x70>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	4641      	mov	r1, r8
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <UI_TaskInit+0x74>)
 8002254:	f7ff fc66 	bl	8001b24 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002258:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800225c:	6828      	ldr	r0, [r5, #0]
 800225e:	463b      	mov	r3, r7
 8002260:	4632      	mov	r2, r6
 8002262:	4621      	mov	r1, r4

}
 8002264:	b002      	add	sp, #8
 8002266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800226a:	f000 b83d 	b.w	80022e8 <UI_Init>
 800226e:	bf00      	nop
 8002270:	200006a8 	.word	0x200006a8
 8002274:	200006d4 	.word	0x200006d4
 8002278:	08007039 	.word	0x08007039
 800227c:	08006ea9 	.word	0x08006ea9
 8002280:	08006e89 	.word	0x08006e89
 8002284:	2000097c 	.word	0x2000097c
 8002288:	2000053c 	.word	0x2000053c

0800228c <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <UI_Scheduler+0x38>)
 800228e:	8813      	ldrh	r3, [r2, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	b11b      	cbz	r3, 800229c <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002294:	8813      	ldrh	r3, [r2, #0]
 8002296:	3b01      	subs	r3, #1
 8002298:	b29b      	uxth	r3, r3
 800229a:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <UI_Scheduler+0x3c>)
 800229e:	8813      	ldrh	r3, [r2, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d903      	bls.n	80022ae <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 80022a6:	8813      	ldrh	r3, [r2, #0]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80022ae:	4a07      	ldr	r2, [pc, #28]	; (80022cc <UI_Scheduler+0x40>)
 80022b0:	8813      	ldrh	r3, [r2, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d903      	bls.n	80022c0 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80022b8:	8813      	ldrh	r3, [r2, #0]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29b      	uxth	r3, r3
 80022be:	8013      	strh	r3, [r2, #0]
  }
}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	200006d2 	.word	0x200006d2
 80022c8:	200006d0 	.word	0x200006d0
 80022cc:	2000067e 	.word	0x2000067e

080022d0 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 80022d0:	4b01      	ldr	r3, [pc, #4]	; (80022d8 <UI_SerialCommunicationTimeOutStop+0x8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	801a      	strh	r2, [r3, #0]
}
 80022d6:	4770      	bx	lr
 80022d8:	200006d0 	.word	0x200006d0

080022dc <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 80022dc:	4b01      	ldr	r3, [pc, #4]	; (80022e4 <UI_SerialCommunicationTimeOutStart+0x8>)
 80022de:	224f      	movs	r2, #79	; 0x4f
 80022e0:	801a      	strh	r2, [r3, #0]
}
 80022e2:	4770      	bx	lr
 80022e4:	200006d0 	.word	0x200006d0

080022e8 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 80022e8:	b430      	push	{r4, r5}
 80022ea:	9c02      	ldr	r4, [sp, #8]
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 80022ec:	6104      	str	r4, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 80022ee:	2500      	movs	r5, #0
 80022f0:	7505      	strb	r5, [r0, #20]
  pHandle->pMCT = pMCT;
 80022f2:	e9c0 2302 	strd	r2, r3, [r0, #8]
}
 80022f6:	bc30      	pop	{r4, r5}
  pHandle->bDriveNum = bMCNum;
 80022f8:	7101      	strb	r1, [r0, #4]
}
 80022fa:	4770      	bx	lr

080022fc <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 80022fc:	7903      	ldrb	r3, [r0, #4]
 80022fe:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002300:	bf86      	itte	hi
 8002302:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 8002304:	2001      	movhi	r0, #1
    retVal = false;
 8002306:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop

0800230c <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 800230c:	7d00      	ldrb	r0, [r0, #20]
 800230e:	4770      	bx	lr

08002310 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002310:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002312:	e9d0 5402 	ldrd	r5, r4, [r0, #8]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002316:	7d03      	ldrb	r3, [r0, #20]
{
 8002318:	b082      	sub	sp, #8
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800231a:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800231e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002322:	4614      	mov	r4, r2
 8002324:	295b      	cmp	r1, #91	; 0x5b
 8002326:	d85d      	bhi.n	80023e4 <UI_SetReg+0xd4>
 8002328:	e8df f011 	tbh	[pc, r1, lsl #1]
 800232c:	005c006b 	.word	0x005c006b
 8002330:	006f005c 	.word	0x006f005c
 8002334:	0079005c 	.word	0x0079005c
 8002338:	0085007f 	.word	0x0085007f
 800233c:	0097008b 	.word	0x0097008b
 8002340:	00a3009d 	.word	0x00a3009d
 8002344:	00b500a9 	.word	0x00b500a9
 8002348:	00c100bb 	.word	0x00c100bb
 800234c:	00e100c7 	.word	0x00e100c7
 8002350:	005c005c 	.word	0x005c005c
 8002354:	011700fb 	.word	0x011700fb
 8002358:	005c005c 	.word	0x005c005c
 800235c:	005c005c 	.word	0x005c005c
 8002360:	005c005c 	.word	0x005c005c
 8002364:	005c005c 	.word	0x005c005c
 8002368:	005c005c 	.word	0x005c005c
 800236c:	005c005c 	.word	0x005c005c
 8002370:	005c005c 	.word	0x005c005c
 8002374:	005c005c 	.word	0x005c005c
 8002378:	005c005c 	.word	0x005c005c
 800237c:	005c005c 	.word	0x005c005c
 8002380:	005c005c 	.word	0x005c005c
 8002384:	005c005c 	.word	0x005c005c
 8002388:	005c005c 	.word	0x005c005c
 800238c:	005c005c 	.word	0x005c005c
 8002390:	005c005c 	.word	0x005c005c
 8002394:	005c005c 	.word	0x005c005c
 8002398:	005c005c 	.word	0x005c005c
 800239c:	005c005c 	.word	0x005c005c
 80023a0:	005c005c 	.word	0x005c005c
 80023a4:	005c005c 	.word	0x005c005c
 80023a8:	005c005c 	.word	0x005c005c
 80023ac:	0133005c 	.word	0x0133005c
 80023b0:	005c005c 	.word	0x005c005c
 80023b4:	005c005c 	.word	0x005c005c
 80023b8:	005c005c 	.word	0x005c005c
 80023bc:	005c005c 	.word	0x005c005c
 80023c0:	005c005c 	.word	0x005c005c
 80023c4:	005c005c 	.word	0x005c005c
 80023c8:	005c005c 	.word	0x005c005c
 80023cc:	005c005c 	.word	0x005c005c
 80023d0:	005c005c 	.word	0x005c005c
 80023d4:	005c005c 	.word	0x005c005c
 80023d8:	005c005c 	.word	0x005c005c
 80023dc:	005c005c 	.word	0x005c005c
 80023e0:	005f005c 	.word	0x005f005c
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80023e4:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 80023e6:	b002      	add	sp, #8
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80023ea:	4a7f      	ldr	r2, [pc, #508]	; (80025e8 <UI_SetReg+0x2d8>)
 80023ec:	fb82 3204 	smull	r3, r2, r2, r4
 80023f0:	eba2 74e4 	sub.w	r4, r2, r4, asr #31
 80023f4:	4630      	mov	r0, r6
 80023f6:	b221      	sxth	r1, r4
 80023f8:	2200      	movs	r2, #0
 80023fa:	f7fe f9f9 	bl	80007f0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80023fe:	2001      	movs	r0, #1
    break;
 8002400:	e7f1      	b.n	80023e6 <UI_SetReg+0xd6>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002402:	b2e1      	uxtb	r1, r4
 8002404:	f7ff ff7a 	bl	80022fc <UI_SelectMC>
    break;
 8002408:	e7ed      	b.n	80023e6 <UI_SetReg+0xd6>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800240a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800240e:	f000 80d6 	beq.w	80025be <UI_SetReg+0x2ae>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002412:	2c01      	cmp	r4, #1
 8002414:	f000 80dd 	beq.w	80025d2 <UI_SetReg+0x2c2>
  bool retVal = true;
 8002418:	2001      	movs	r0, #1
}
 800241a:	b002      	add	sp, #8
 800241c:	bd70      	pop	{r4, r5, r6, pc}
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800241e:	6828      	ldr	r0, [r5, #0]
 8002420:	b221      	sxth	r1, r4
 8002422:	f003 fa15 	bl	8005850 <PID_SetKP>
  bool retVal = true;
 8002426:	2001      	movs	r0, #1
    break;
 8002428:	e7dd      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 800242a:	6828      	ldr	r0, [r5, #0]
 800242c:	b221      	sxth	r1, r4
 800242e:	f003 fa11 	bl	8005854 <PID_SetKI>
  bool retVal = true;
 8002432:	2001      	movs	r0, #1
    break;
 8002434:	e7d7      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002436:	6828      	ldr	r0, [r5, #0]
 8002438:	b221      	sxth	r1, r4
 800243a:	f003 fa1b 	bl	8005874 <PID_SetKD>
  bool retVal = true;
 800243e:	2001      	movs	r0, #1
    break;
 8002440:	e7d1      	b.n	80023e6 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 8002442:	4630      	mov	r0, r6
 8002444:	f7fe fab0 	bl	80009a8 <MCI_GetIqdref>
 8002448:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 800244a:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 800244e:	4630      	mov	r0, r6
 8002450:	9901      	ldr	r1, [sp, #4]
 8002452:	f7fe f9e3 	bl	800081c <MCI_SetCurrentReferences>
  bool retVal = true;
 8002456:	2001      	movs	r0, #1
    break;
 8002458:	e7c5      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 800245a:	6868      	ldr	r0, [r5, #4]
 800245c:	b221      	sxth	r1, r4
 800245e:	f003 f9f7 	bl	8005850 <PID_SetKP>
  bool retVal = true;
 8002462:	2001      	movs	r0, #1
    break;
 8002464:	e7bf      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002466:	6868      	ldr	r0, [r5, #4]
 8002468:	b221      	sxth	r1, r4
 800246a:	f003 f9f3 	bl	8005854 <PID_SetKI>
  bool retVal = true;
 800246e:	2001      	movs	r0, #1
    break;
 8002470:	e7b9      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002472:	6868      	ldr	r0, [r5, #4]
 8002474:	b221      	sxth	r1, r4
 8002476:	f003 f9fd 	bl	8005874 <PID_SetKD>
  bool retVal = true;
 800247a:	2001      	movs	r0, #1
    break;
 800247c:	e7b3      	b.n	80023e6 <UI_SetReg+0xd6>
      currComp = MCI_GetIqdref(pMCI);
 800247e:	4630      	mov	r0, r6
 8002480:	f7fe fa92 	bl	80009a8 <MCI_GetIqdref>
 8002484:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002486:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 800248a:	4630      	mov	r0, r6
 800248c:	9901      	ldr	r1, [sp, #4]
 800248e:	f7fe f9c5 	bl	800081c <MCI_SetCurrentReferences>
  bool retVal = true;
 8002492:	2001      	movs	r0, #1
    break;
 8002494:	e7a7      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002496:	68a8      	ldr	r0, [r5, #8]
 8002498:	b221      	sxth	r1, r4
 800249a:	f003 f9d9 	bl	8005850 <PID_SetKP>
  bool retVal = true;
 800249e:	2001      	movs	r0, #1
    break;
 80024a0:	e7a1      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80024a2:	68a8      	ldr	r0, [r5, #8]
 80024a4:	b221      	sxth	r1, r4
 80024a6:	f003 f9d5 	bl	8005854 <PID_SetKI>
  bool retVal = true;
 80024aa:	2001      	movs	r0, #1
    break;
 80024ac:	e79b      	b.n	80023e6 <UI_SetReg+0xd6>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80024ae:	68a8      	ldr	r0, [r5, #8]
 80024b0:	b221      	sxth	r1, r4
 80024b2:	f003 f9df 	bl	8005874 <PID_SetKD>
  bool retVal = true;
 80024b6:	2001      	movs	r0, #1
    break;
 80024b8:	e795      	b.n	80023e6 <UI_SetReg+0xd6>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80024ba:	6902      	ldr	r2, [r0, #16]
 80024bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024c0:	0f1a      	lsrs	r2, r3, #28
 80024c2:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024c4:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024c8:	d06d      	beq.n	80025a6 <UI_SetReg+0x296>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024ca:	2b09      	cmp	r3, #9
 80024cc:	d1a4      	bne.n	8002418 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 80024ce:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 80024d0:	2e00      	cmp	r6, #0
 80024d2:	d0a1      	beq.n	8002418 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80024d4:	aa01      	add	r2, sp, #4
 80024d6:	f10d 0102 	add.w	r1, sp, #2
 80024da:	4630      	mov	r0, r6
 80024dc:	f005 fa44 	bl	8007968 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 80024e0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80024e4:	b221      	sxth	r1, r4
 80024e6:	4630      	mov	r0, r6
 80024e8:	f005 fa46 	bl	8007978 <STO_PLL_SetObserverGains>
    break;
 80024ec:	e794      	b.n	8002418 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80024ee:	6902      	ldr	r2, [r0, #16]
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024f4:	0f1a      	lsrs	r2, r3, #28
 80024f6:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024f8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024fc:	d04f      	beq.n	800259e <UI_SetReg+0x28e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024fe:	2b09      	cmp	r3, #9
 8002500:	d18a      	bne.n	8002418 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002502:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002504:	2e00      	cmp	r6, #0
 8002506:	d087      	beq.n	8002418 <UI_SetReg+0x108>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002508:	aa01      	add	r2, sp, #4
 800250a:	f10d 0102 	add.w	r1, sp, #2
 800250e:	4630      	mov	r0, r6
 8002510:	f005 fa2a 	bl	8007968 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8002514:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002518:	b222      	sxth	r2, r4
 800251a:	4630      	mov	r0, r6
 800251c:	f005 fa2c 	bl	8007978 <STO_PLL_SetObserverGains>
    break;
 8002520:	e77a      	b.n	8002418 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002522:	6902      	ldr	r2, [r0, #16]
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002528:	0f1a      	lsrs	r2, r3, #28
 800252a:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800252c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002530:	d03d      	beq.n	80025ae <UI_SetReg+0x29e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002532:	2b09      	cmp	r3, #9
 8002534:	f47f af70 	bne.w	8002418 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002538:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 800253a:	2e00      	cmp	r6, #0
 800253c:	f43f af6c 	beq.w	8002418 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002540:	aa01      	add	r2, sp, #4
 8002542:	f10d 0102 	add.w	r1, sp, #2
 8002546:	4630      	mov	r0, r6
 8002548:	f005 fa1a 	bl	8007980 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 800254c:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8002550:	b222      	sxth	r2, r4
 8002552:	4630      	mov	r0, r6
 8002554:	f005 fa22 	bl	800799c <STO_SetPLLGains>
    break;
 8002558:	e75e      	b.n	8002418 <UI_SetReg+0x108>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800255a:	6902      	ldr	r2, [r0, #16]
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002560:	0f1a      	lsrs	r2, r3, #28
 8002562:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002564:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002568:	d025      	beq.n	80025b6 <UI_SetReg+0x2a6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800256a:	2b09      	cmp	r3, #9
 800256c:	f47f af54 	bne.w	8002418 <UI_SetReg+0x108>
        pSPD = pMCT->pSpeedSensorAux;
 8002570:	69ee      	ldr	r6, [r5, #28]
      if (pSPD != MC_NULL)
 8002572:	2e00      	cmp	r6, #0
 8002574:	f43f af50 	beq.w	8002418 <UI_SetReg+0x108>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002578:	aa01      	add	r2, sp, #4
 800257a:	f10d 0102 	add.w	r1, sp, #2
 800257e:	4630      	mov	r0, r6
 8002580:	f005 f9fe 	bl	8007980 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8002584:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8002588:	b221      	sxth	r1, r4
 800258a:	4630      	mov	r0, r6
 800258c:	f005 fa06 	bl	800799c <STO_SetPLLGains>
    break;
 8002590:	e742      	b.n	8002418 <UI_SetReg+0x108>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002592:	4630      	mov	r0, r6
 8002594:	b221      	sxth	r1, r4
 8002596:	f7fe fa35 	bl	8000a04 <MCI_SetIdref>
  bool retVal = true;
 800259a:	2001      	movs	r0, #1
    break;
 800259c:	e723      	b.n	80023e6 <UI_SetReg+0xd6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800259e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025a0:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025a2:	d1af      	bne.n	8002504 <UI_SetReg+0x1f4>
 80025a4:	e7ad      	b.n	8002502 <UI_SetReg+0x1f2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025a6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025a8:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025aa:	d191      	bne.n	80024d0 <UI_SetReg+0x1c0>
 80025ac:	e78f      	b.n	80024ce <UI_SetReg+0x1be>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025ae:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025b0:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025b2:	d1c2      	bne.n	800253a <UI_SetReg+0x22a>
 80025b4:	e7c0      	b.n	8002538 <UI_SetReg+0x228>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025b6:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 80025b8:	69ae      	ldr	r6, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80025ba:	d1da      	bne.n	8002572 <UI_SetReg+0x262>
 80025bc:	e7d8      	b.n	8002570 <UI_SetReg+0x260>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80025be:	4630      	mov	r0, r6
 80025c0:	f7fe fa1c 	bl	80009fc <MCI_GetTeref>
 80025c4:	4622      	mov	r2, r4
 80025c6:	4601      	mov	r1, r0
 80025c8:	4630      	mov	r0, r6
 80025ca:	f7fe f91d 	bl	8000808 <MCI_ExecTorqueRamp>
  bool retVal = true;
 80025ce:	2001      	movs	r0, #1
 80025d0:	e709      	b.n	80023e6 <UI_SetReg+0xd6>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80025d2:	4630      	mov	r0, r6
 80025d4:	f7fe f9ba 	bl	800094c <MCI_GetMecSpeedRefUnit>
 80025d8:	2200      	movs	r2, #0
 80025da:	4601      	mov	r1, r0
 80025dc:	4630      	mov	r0, r6
 80025de:	f7fe f907 	bl	80007f0 <MCI_ExecSpeedRamp>
  bool retVal = true;
 80025e2:	4620      	mov	r0, r4
 80025e4:	e6ff      	b.n	80023e6 <UI_SetReg+0xd6>
 80025e6:	bf00      	nop
 80025e8:	2aaaaaab 	.word	0x2aaaaaab

080025ec <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80025ec:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025ee:	e9d0 4502 	ldrd	r4, r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025f2:	7d03      	ldrb	r3, [r0, #20]
{
 80025f4:	b090      	sub	sp, #64	; 0x40
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025f6:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025fa:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 80025fe:	2a00      	cmp	r2, #0
 8002600:	f000 8089 	beq.w	8002716 <UI_GetReg+0x12a>
  {
    *success = true;
 8002604:	2401      	movs	r4, #1
 8002606:	7014      	strb	r4, [r2, #0]
  }

  switch (bRegID)
 8002608:	2981      	cmp	r1, #129	; 0x81
 800260a:	f200 8295 	bhi.w	8002b38 <UI_GetReg+0x54c>
 800260e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002612:	01d7      	.short	0x01d7
 8002614:	01cf01d3 	.word	0x01cf01d3
 8002618:	01df01cb 	.word	0x01df01cb
 800261c:	01af01b3 	.word	0x01af01b3
 8002620:	0102011c 	.word	0x0102011c
 8002624:	01240128 	.word	0x01240128
 8002628:	00fd0120 	.word	0x00fd0120
 800262c:	013f0143 	.word	0x013f0143
 8002630:	012c013b 	.word	0x012c013b
 8002634:	029301e6 	.word	0x029301e6
 8002638:	01770293 	.word	0x01770293
 800263c:	0293015f 	.word	0x0293015f
 8002640:	02930293 	.word	0x02930293
 8002644:	0157015b 	.word	0x0157015b
 8002648:	02930153 	.word	0x02930153
 800264c:	014c0293 	.word	0x014c0293
 8002650:	028c0147 	.word	0x028c0147
 8002654:	02850293 	.word	0x02850293
 8002658:	02430248 	.word	0x02430248
 800265c:	027b0280 	.word	0x027b0280
 8002660:	028c0147 	.word	0x028c0147
 8002664:	00fd0102 	.word	0x00fd0102
 8002668:	017201da 	.word	0x017201da
 800266c:	024d0252 	.word	0x024d0252
 8002670:	02930293 	.word	0x02930293
 8002674:	02570269 	.word	0x02570269
 8002678:	021b022f 	.word	0x021b022f
 800267c:	01b7010a 	.word	0x01b7010a
 8002680:	02930293 	.word	0x02930293
 8002684:	02930293 	.word	0x02930293
 8002688:	02930293 	.word	0x02930293
 800268c:	02930293 	.word	0x02930293
 8002690:	01f90200 	.word	0x01f90200
 8002694:	020700fd 	.word	0x020700fd
 8002698:	0293019b 	.word	0x0293019b
 800269c:	02930293 	.word	0x02930293
 80026a0:	02930293 	.word	0x02930293
 80026a4:	02930293 	.word	0x02930293
 80026a8:	02930293 	.word	0x02930293
 80026ac:	02930293 	.word	0x02930293
 80026b0:	02930293 	.word	0x02930293
 80026b4:	02930293 	.word	0x02930293
 80026b8:	02930293 	.word	0x02930293
 80026bc:	02930293 	.word	0x02930293
 80026c0:	02930293 	.word	0x02930293
 80026c4:	02930293 	.word	0x02930293
 80026c8:	0293018e 	.word	0x0293018e
 80026cc:	02930293 	.word	0x02930293
 80026d0:	02930293 	.word	0x02930293
 80026d4:	02930293 	.word	0x02930293
 80026d8:	02930293 	.word	0x02930293
 80026dc:	02930293 	.word	0x02930293
 80026e0:	02930293 	.word	0x02930293
 80026e4:	02930293 	.word	0x02930293
 80026e8:	02930293 	.word	0x02930293
 80026ec:	018a0293 	.word	0x018a0293
 80026f0:	02910186 	.word	0x02910186
 80026f4:	01070293 	.word	0x01070293
 80026f8:	02930107 	.word	0x02930107
 80026fc:	02930293 	.word	0x02930293
 8002700:	02930293 	.word	0x02930293
 8002704:	02930293 	.word	0x02930293
 8002708:	02930293 	.word	0x02930293
 800270c:	02930293 	.word	0x02930293
 8002710:	02930293 	.word	0x02930293
 8002714:	00fa      	.short	0x00fa
 8002716:	2973      	cmp	r1, #115	; 0x73
 8002718:	d875      	bhi.n	8002806 <UI_GetReg+0x21a>
 800271a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800271e:	0151      	.short	0x0151
 8002720:	0149014d 	.word	0x0149014d
 8002724:	01590145 	.word	0x01590145
 8002728:	0129012d 	.word	0x0129012d
 800272c:	007c0096 	.word	0x007c0096
 8002730:	009e00a2 	.word	0x009e00a2
 8002734:	0077009a 	.word	0x0077009a
 8002738:	00b900bd 	.word	0x00b900bd
 800273c:	00a600b5 	.word	0x00a600b5
 8002740:	00740160 	.word	0x00740160
 8002744:	00f10074 	.word	0x00f10074
 8002748:	007400d9 	.word	0x007400d9
 800274c:	00740074 	.word	0x00740074
 8002750:	00d100d5 	.word	0x00d100d5
 8002754:	007400cd 	.word	0x007400cd
 8002758:	00c60074 	.word	0x00c60074
 800275c:	020600c1 	.word	0x020600c1
 8002760:	01ff0074 	.word	0x01ff0074
 8002764:	01bd01c2 	.word	0x01bd01c2
 8002768:	01f501fa 	.word	0x01f501fa
 800276c:	020600c1 	.word	0x020600c1
 8002770:	0077007c 	.word	0x0077007c
 8002774:	00ec0154 	.word	0x00ec0154
 8002778:	01c701cc 	.word	0x01c701cc
 800277c:	00740074 	.word	0x00740074
 8002780:	01d101e3 	.word	0x01d101e3
 8002784:	019501a9 	.word	0x019501a9
 8002788:	01310084 	.word	0x01310084
 800278c:	00740074 	.word	0x00740074
 8002790:	00740074 	.word	0x00740074
 8002794:	00740074 	.word	0x00740074
 8002798:	00740074 	.word	0x00740074
 800279c:	0173017a 	.word	0x0173017a
 80027a0:	01810077 	.word	0x01810077
 80027a4:	00740115 	.word	0x00740115
 80027a8:	00740074 	.word	0x00740074
 80027ac:	00740074 	.word	0x00740074
 80027b0:	00740074 	.word	0x00740074
 80027b4:	00740074 	.word	0x00740074
 80027b8:	00740074 	.word	0x00740074
 80027bc:	00740074 	.word	0x00740074
 80027c0:	00740074 	.word	0x00740074
 80027c4:	00740074 	.word	0x00740074
 80027c8:	00740074 	.word	0x00740074
 80027cc:	00740074 	.word	0x00740074
 80027d0:	00740074 	.word	0x00740074
 80027d4:	00740108 	.word	0x00740108
 80027d8:	00740074 	.word	0x00740074
 80027dc:	00740074 	.word	0x00740074
 80027e0:	00740074 	.word	0x00740074
 80027e4:	00740074 	.word	0x00740074
 80027e8:	00740074 	.word	0x00740074
 80027ec:	00740074 	.word	0x00740074
 80027f0:	00740074 	.word	0x00740074
 80027f4:	00740074 	.word	0x00740074
 80027f8:	01040074 	.word	0x01040074
 80027fc:	020b0100 	.word	0x020b0100
 8002800:	00810074 	.word	0x00810074
 8002804:	0081      	.short	0x0081
  int32_t bRetVal = 0;
 8002806:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8002808:	b010      	add	sp, #64	; 0x40
 800280a:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800280c:	4630      	mov	r0, r6
 800280e:	f7fe f8cb 	bl	80009a8 <MCI_GetIqdref>
 8002812:	1400      	asrs	r0, r0, #16
    break;
 8002814:	e7f8      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002816:	4630      	mov	r0, r6
 8002818:	f7fe f8c6 	bl	80009a8 <MCI_GetIqdref>
 800281c:	b200      	sxth	r0, r0
    break;
 800281e:	e7f3      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = CTRBDID;
 8002820:	f242 701d 	movw	r0, #10013	; 0x271d
 8002824:	e7f0      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002826:	6902      	ldr	r2, [r0, #16]
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800282c:	0f1a      	lsrs	r2, r3, #28
 800282e:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002830:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002834:	f000 8191 	beq.w	8002b5a <UI_GetReg+0x56e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002838:	2b09      	cmp	r3, #9
 800283a:	d1e4      	bne.n	8002806 <UI_GetReg+0x21a>
        pSPD =  pMCT->pSpeedSensorAux;
 800283c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800283e:	2800      	cmp	r0, #0
 8002840:	d0e1      	beq.n	8002806 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8002842:	f005 f871 	bl	8007928 <STO_PLL_GetEstimatedBemf>
 8002846:	b200      	sxth	r0, r0
 8002848:	e7de      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800284a:	6828      	ldr	r0, [r5, #0]
 800284c:	f003 f814 	bl	8005878 <PID_GetKD>
    break;
 8002850:	e7da      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002852:	6868      	ldr	r0, [r5, #4]
 8002854:	f003 f810 	bl	8005878 <PID_GetKD>
    break;
 8002858:	e7d6      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 800285a:	6868      	ldr	r0, [r5, #4]
 800285c:	f003 f800 	bl	8005860 <PID_GetKI>
    break;
 8002860:	e7d2      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002862:	6868      	ldr	r0, [r5, #4]
 8002864:	f002 fff8 	bl	8005858 <PID_GetKP>
    break;
 8002868:	e7ce      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800286a:	6902      	ldr	r2, [r0, #16]
 800286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002870:	0f1a      	lsrs	r2, r3, #28
 8002872:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002874:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002878:	f000 81a3 	beq.w	8002bc2 <UI_GetReg+0x5d6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800287c:	2b09      	cmp	r3, #9
 800287e:	f000 81a3 	beq.w	8002bc8 <UI_GetReg+0x5dc>
      bRetVal = (int32_t)hPgain;
 8002882:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
    break;
 8002886:	e7bf      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002888:	68a8      	ldr	r0, [r5, #8]
 800288a:	f002 fff5 	bl	8005878 <PID_GetKD>
    break;
 800288e:	e7bb      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002890:	68a8      	ldr	r0, [r5, #8]
 8002892:	f002 ffe5 	bl	8005860 <PID_GetKI>
    break;
 8002896:	e7b7      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002898:	68a8      	ldr	r0, [r5, #8]
 800289a:	f002 ffdd 	bl	8005858 <PID_GetKP>
    break;
 800289e:	e7b3      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqd(pMCI).q;
 80028a0:	4630      	mov	r0, r6
 80028a2:	f7fe f873 	bl	800098c <MCI_GetIqd>
 80028a6:	b200      	sxth	r0, r0
    break;
 80028a8:	e7ae      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80028aa:	4630      	mov	r0, r6
 80028ac:	f7fe f846 	bl	800093c <MCI_GetAvrgMecSpeedUnit>
 80028b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80028b4:	0040      	lsls	r0, r0, #1
    break;
 80028b6:	e7a7      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80028b8:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80028ba:	f002 ff67 	bl	800578c <MPM_GetAvrgElMotorPowerW>
    break;
 80028be:	e7a3      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80028c0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80028c2:	f002 ffa7 	bl	8005814 <NTC_GetAvTemp_C>
    break;
 80028c6:	e79f      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80028c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80028ca:	f002 fecf 	bl	800566c <VBS_GetAvBusVoltage_V>
    break;
 80028ce:	e79b      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80028d0:	6902      	ldr	r2, [r0, #16]
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028d6:	0f1a      	lsrs	r2, r3, #28
 80028d8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028da:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028de:	f000 8132 	beq.w	8002b46 <UI_GetReg+0x55a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	d1cd      	bne.n	8002882 <UI_GetReg+0x296>
        pSPD = pMCT->pSpeedSensorAux;
 80028e6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d0ca      	beq.n	8002882 <UI_GetReg+0x296>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80028ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80028ee:	a90e      	add	r1, sp, #56	; 0x38
 80028f0:	f005 f846 	bl	8007980 <STO_GetPLLGains>
 80028f4:	e7c5      	b.n	8002882 <UI_GetReg+0x296>
      bRetVal = MCI_GetVqd(pMCI).d;
 80028f6:	4630      	mov	r0, r6
 80028f8:	f7fe f864 	bl	80009c4 <MCI_GetVqd>
 80028fc:	1400      	asrs	r0, r0, #16
    break;
 80028fe:	e783      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002900:	6902      	ldr	r2, [r0, #16]
 8002902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002906:	0f1a      	lsrs	r2, r3, #28
 8002908:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800290a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800290e:	f000 8142 	beq.w	8002b96 <UI_GetReg+0x5aa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002912:	2b09      	cmp	r3, #9
 8002914:	f000 8142 	beq.w	8002b9c <UI_GetReg+0x5b0>
      bRetVal = (int32_t)hIgain;
 8002918:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
    break;
 800291c:	e774      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800291e:	6828      	ldr	r0, [r5, #0]
 8002920:	f002 ffa6 	bl	8005870 <PID_GetKIDivisor>
    break;
 8002924:	e770      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002926:	6828      	ldr	r0, [r5, #0]
 8002928:	f002 ffa0 	bl	800586c <PID_GetKPDivisor>
    break;
 800292c:	e76c      	b.n	8002808 <UI_GetReg+0x21c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 800292e:	4630      	mov	r0, r6
 8002930:	f7fd ffd4 	bl	80008dc <MCI_GetControlMode>
 8002934:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002936:	4630      	mov	r0, r6
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002938:	f000 8122 	beq.w	8002b80 <UI_GetReg+0x594>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800293c:	f7fe f806 	bl	800094c <MCI_GetMecSpeedRefUnit>
 8002940:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002944:	0040      	lsls	r0, r0, #1
 8002946:	e75f      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002948:	6902      	ldr	r2, [r0, #16]
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800294e:	0f1a      	lsrs	r2, r3, #28
 8002950:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002952:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002956:	f000 8105 	beq.w	8002b64 <UI_GetReg+0x578>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800295a:	2b09      	cmp	r3, #9
 800295c:	f47f af53 	bne.w	8002806 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8002960:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002962:	2800      	cmp	r0, #0
 8002964:	f43f af4f 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002968:	f005 f834 	bl	80079d4 <STO_PLL_GetObservedBemfLevel>
 800296c:	1400      	asrs	r0, r0, #16
 800296e:	e74b      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002970:	6828      	ldr	r0, [r5, #0]
 8002972:	f002 ff75 	bl	8005860 <PID_GetKI>
    break;
 8002976:	e747      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002978:	6828      	ldr	r0, [r5, #0]
 800297a:	f002 ff6d 	bl	8005858 <PID_GetKP>
    break;
 800297e:	e743      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002980:	6902      	ldr	r2, [r0, #16]
 8002982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002986:	0f1a      	lsrs	r2, r3, #28
 8002988:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800298a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800298e:	f000 810e 	beq.w	8002bae <UI_GetReg+0x5c2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002992:	2b09      	cmp	r3, #9
 8002994:	f47f af37 	bne.w	8002806 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8002998:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800299a:	2800      	cmp	r0, #0
 800299c:	f43f af33 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80029a0:	f004 ffc2 	bl	8007928 <STO_PLL_GetEstimatedBemf>
 80029a4:	1400      	asrs	r0, r0, #16
 80029a6:	e72f      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80029a8:	4630      	mov	r0, r6
 80029aa:	f7fd ff97 	bl	80008dc <MCI_GetControlMode>
    break;
 80029ae:	e72b      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 80029b0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80029b2:	f004 fa23 	bl	8006dfc <STM_GetState>
	break;
 80029b6:	e727      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80029b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80029ba:	f004 fa2d 	bl	8006e18 <STM_GetFaultState>
	break;
 80029be:	e723      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80029c0:	f7ff fca4 	bl	800230c <UI_GetSelectedMC>
    break;
 80029c4:	e720      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetVqd(pMCI).q;
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7fd fffc 	bl	80009c4 <MCI_GetVqd>
 80029cc:	b200      	sxth	r0, r0
    break;
 80029ce:	e71b      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 80029d0:	4630      	mov	r0, r6
 80029d2:	f7fd ffbb 	bl	800094c <MCI_GetMecSpeedRefUnit>
 80029d6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80029da:	0040      	lsls	r0, r0, #1
    break;
 80029dc:	e714      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80029de:	6902      	ldr	r2, [r0, #16]
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029e4:	0f1a      	lsrs	r2, r3, #28
 80029e6:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029e8:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029ec:	f000 80e4 	beq.w	8002bb8 <UI_GetReg+0x5cc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d191      	bne.n	8002918 <UI_GetReg+0x32c>
        pSPD = pMCT->pSpeedSensorAux;
 80029f4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d08e      	beq.n	8002918 <UI_GetReg+0x32c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80029fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80029fc:	a90e      	add	r1, sp, #56	; 0x38
 80029fe:	f004 ffb3 	bl	8007968 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8002a02:	e789      	b.n	8002918 <UI_GetReg+0x32c>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002a04:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002a06:	f004 f947 	bl	8006c98 <STC_GetMinAppNegativeMecSpeedUnit>
 8002a0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a0e:	0040      	lsls	r0, r0, #1
    break;
 8002a10:	e6fa      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002a12:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002a14:	f004 f93e 	bl	8006c94 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002a18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a1c:	0040      	lsls	r0, r0, #1
    break;
 8002a1e:	e6f3      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a20:	6902      	ldr	r2, [r0, #16]
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a26:	0f1a      	lsrs	r2, r3, #28
 8002a28:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a2a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a2e:	f000 808f 	beq.w	8002b50 <UI_GetReg+0x564>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	f47f aee7 	bne.w	8002806 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8002a38:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	f43f aee3 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002a40:	f004 ffc4 	bl	80079cc <STO_PLL_GetEstimatedBemfLevel>
 8002a44:	1400      	asrs	r0, r0, #16
 8002a46:	e6df      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a48:	6902      	ldr	r2, [r0, #16]
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a4e:	0f1a      	lsrs	r2, r3, #28
 8002a50:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a52:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a56:	f000 808e 	beq.w	8002b76 <UI_GetReg+0x58a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	f47f aed3 	bne.w	8002806 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8002a60:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002a62:	2800      	cmp	r0, #0
 8002a64:	f43f aecf 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8002a68:	f004 ff6a 	bl	8007940 <STO_PLL_GetEstimatedCurrent>
 8002a6c:	1400      	asrs	r0, r0, #16
 8002a6e:	e6cb      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002a70:	6902      	ldr	r2, [r0, #16]
 8002a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a76:	0f1a      	lsrs	r2, r3, #28
 8002a78:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a7a:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a7e:	f000 8085 	beq.w	8002b8c <UI_GetReg+0x5a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	f47f aebf 	bne.w	8002806 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8002a88:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f43f aebb 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 8002a90:	f004 ff56 	bl	8007940 <STO_PLL_GetEstimatedCurrent>
 8002a94:	b200      	sxth	r0, r0
 8002a96:	e6b7      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIab(pMCI).b;
 8002a98:	4630      	mov	r0, r6
 8002a9a:	f7fd ff5b 	bl	8000954 <MCI_GetIab>
 8002a9e:	1400      	asrs	r0, r0, #16
    break;
 8002aa0:	e6b2      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIab(pMCI).a;
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	f7fd ff56 	bl	8000954 <MCI_GetIab>
 8002aa8:	b200      	sxth	r0, r0
    break;
 8002aaa:	e6ad      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002aac:	4630      	mov	r0, r6
 8002aae:	f7fd ff97 	bl	80009e0 <MCI_GetValphabeta>
 8002ab2:	1400      	asrs	r0, r0, #16
    break;
 8002ab4:	e6a8      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002ab6:	4630      	mov	r0, r6
 8002ab8:	f7fd ff92 	bl	80009e0 <MCI_GetValphabeta>
 8002abc:	b200      	sxth	r0, r0
    break;
 8002abe:	e6a3      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ac0:	6902      	ldr	r2, [r0, #16]
 8002ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ac6:	0f1a      	lsrs	r2, r3, #28
 8002ac8:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aca:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ace:	d036      	beq.n	8002b3e <UI_GetReg+0x552>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002ad0:	2b09      	cmp	r3, #9
 8002ad2:	f47f ae98 	bne.w	8002806 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8002ad6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002ad8:	2800      	cmp	r0, #0
 8002ada:	f43f ae94 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002ade:	f004 f819 	bl	8006b14 <SPD_GetS16Speed>
 8002ae2:	e691      	b.n	8002808 <UI_GetReg+0x21c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002ae4:	6902      	ldr	r2, [r0, #16]
 8002ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aea:	0f1a      	lsrs	r2, r3, #28
 8002aec:	2a09      	cmp	r2, #9
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002aee:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002af2:	d03c      	beq.n	8002b6e <UI_GetReg+0x582>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	f47f ae86 	bne.w	8002806 <UI_GetReg+0x21a>
        pSPD = pMCT->pSpeedSensorAux;
 8002afa:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002afc:	2800      	cmp	r0, #0
 8002afe:	f43f ae82 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = SPD_GetElAngle(pSPD);
 8002b02:	f003 ffcf 	bl	8006aa4 <SPD_GetElAngle>
 8002b06:	e67f      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f7fd ff31 	bl	8000970 <MCI_GetIalphabeta>
 8002b0e:	1400      	asrs	r0, r0, #16
    break;
 8002b10:	e67a      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002b12:	4630      	mov	r0, r6
 8002b14:	f7fd ff2c 	bl	8000970 <MCI_GetIalphabeta>
 8002b18:	b200      	sxth	r0, r0
    break;
 8002b1a:	e675      	b.n	8002808 <UI_GetReg+0x21c>
      if (pMCT->pRevupCtrl)
 8002b1c:	6968      	ldr	r0, [r5, #20]
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	f43f ae71 	beq.w	8002806 <UI_GetReg+0x21a>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002b24:	f004 fc8c 	bl	8007440 <RUC_GetNumberOfPhases>
 8002b28:	e66e      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002b2a:	4630      	mov	r0, r6
 8002b2c:	f7fd ff2e 	bl	800098c <MCI_GetIqd>
 8002b30:	1400      	asrs	r0, r0, #16
    break;
 8002b32:	e669      	b.n	8002808 <UI_GetReg+0x21c>
      bRetVal = (int32_t)(MC_UID);
 8002b34:	4829      	ldr	r0, [pc, #164]	; (8002bdc <UI_GetReg+0x5f0>)
 8002b36:	e667      	b.n	8002808 <UI_GetReg+0x21c>
        *success = false;
 8002b38:	2000      	movs	r0, #0
 8002b3a:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002b3c:	e664      	b.n	8002808 <UI_GetReg+0x21c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b3e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b40:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b42:	d1c9      	bne.n	8002ad8 <UI_GetReg+0x4ec>
 8002b44:	e7c7      	b.n	8002ad6 <UI_GetReg+0x4ea>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b46:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b48:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b4a:	f47f aecd 	bne.w	80028e8 <UI_GetReg+0x2fc>
 8002b4e:	e6ca      	b.n	80028e6 <UI_GetReg+0x2fa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b50:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b52:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b54:	f47f af71 	bne.w	8002a3a <UI_GetReg+0x44e>
 8002b58:	e76e      	b.n	8002a38 <UI_GetReg+0x44c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b5a:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b5c:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b5e:	f47f ae6e 	bne.w	800283e <UI_GetReg+0x252>
 8002b62:	e66b      	b.n	800283c <UI_GetReg+0x250>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b64:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b66:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b68:	f47f aefb 	bne.w	8002962 <UI_GetReg+0x376>
 8002b6c:	e6f8      	b.n	8002960 <UI_GetReg+0x374>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b6e:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b70:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b72:	d1c3      	bne.n	8002afc <UI_GetReg+0x510>
 8002b74:	e7c1      	b.n	8002afa <UI_GetReg+0x50e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b76:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b78:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b7a:	f47f af72 	bne.w	8002a62 <UI_GetReg+0x476>
 8002b7e:	e76f      	b.n	8002a60 <UI_GetReg+0x474>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002b80:	f7fd fed0 	bl	8000924 <MCI_GetLastRampFinalSpeed>
 8002b84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b88:	0040      	lsls	r0, r0, #1
 8002b8a:	e63d      	b.n	8002808 <UI_GetReg+0x21c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b8c:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b8e:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b90:	f47f af7b 	bne.w	8002a8a <UI_GetReg+0x49e>
 8002b94:	e778      	b.n	8002a88 <UI_GetReg+0x49c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b96:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002b98:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002b9a:	d100      	bne.n	8002b9e <UI_GetReg+0x5b2>
        pSPD = pMCT->pSpeedSensorAux;
 8002b9c:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	f43f aeba 	beq.w	8002918 <UI_GetReg+0x32c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002ba4:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ba6:	a90e      	add	r1, sp, #56	; 0x38
 8002ba8:	f004 feea 	bl	8007980 <STO_GetPLLGains>
 8002bac:	e6b4      	b.n	8002918 <UI_GetReg+0x32c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bae:	2b09      	cmp	r3, #9
       pSPD = pMCT->pSpeedSensorMain;
 8002bb0:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bb2:	f47f aef2 	bne.w	800299a <UI_GetReg+0x3ae>
 8002bb6:	e6ef      	b.n	8002998 <UI_GetReg+0x3ac>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bb8:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002bba:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bbc:	f47f af1b 	bne.w	80029f6 <UI_GetReg+0x40a>
 8002bc0:	e718      	b.n	80029f4 <UI_GetReg+0x408>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bc2:	2b09      	cmp	r3, #9
        pSPD = pMCT->pSpeedSensorMain;
 8002bc4:	69a8      	ldr	r0, [r5, #24]
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002bc6:	d100      	bne.n	8002bca <UI_GetReg+0x5de>
        pSPD = pMCT->pSpeedSensorAux;
 8002bc8:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	f43f ae59 	beq.w	8002882 <UI_GetReg+0x296>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002bd0:	aa0f      	add	r2, sp, #60	; 0x3c
 8002bd2:	a90e      	add	r1, sp, #56	; 0x38
 8002bd4:	f004 fec8 	bl	8007968 <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 8002bd8:	e653      	b.n	8002882 <UI_GetReg+0x296>
 8002bda:	bf00      	nop
 8002bdc:	34a6847a 	.word	0x34a6847a

08002be0 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002be0:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002be2:	6883      	ldr	r3, [r0, #8]
 8002be4:	7d02      	ldrb	r2, [r0, #20]
 8002be6:	3901      	subs	r1, #1
 8002be8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]

  switch (bCmdID)
 8002bec:	290d      	cmp	r1, #13
 8002bee:	d808      	bhi.n	8002c02 <UI_ExecCmd+0x22>
 8002bf0:	e8df f001 	tbb	[pc, r1]
 8002bf4:	0e091419 	.word	0x0e091419
 8002bf8:	231e100e 	.word	0x231e100e
 8002bfc:	07070728 	.word	0x07070728
 8002c00:	1407      	.short	0x1407
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c02:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002c04:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7fd fe64 	bl	80008d4 <MCI_GetSTMState>
 8002c0c:	2806      	cmp	r0, #6
 8002c0e:	d01e      	beq.n	8002c4e <UI_ExecCmd+0x6e>
  bool retVal = true;
 8002c10:	2001      	movs	r0, #1
}
 8002c12:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7fd fe5d 	bl	80008d4 <MCI_GetSTMState>
 8002c1a:	b120      	cbz	r0, 8002c26 <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7fd fe11 	bl	8000844 <MCI_StopMotor>
  bool retVal = true;
 8002c22:	2001      	movs	r0, #1
}
 8002c24:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7fd fe02 	bl	8000830 <MCI_StartMotor>
  bool retVal = true;
 8002c2c:	2001      	movs	r0, #1
}
 8002c2e:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7fd fe0b 	bl	800084c <MCI_FaultAcknowledged>
  bool retVal = true;
 8002c36:	2001      	movs	r0, #1
}
 8002c38:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7fd fe0a 	bl	8000854 <MCI_EncoderAlign>
  bool retVal = true;
 8002c40:	2001      	movs	r0, #1
}
 8002c42:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7fd fee7 	bl	8000a18 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002c4a:	2001      	movs	r0, #1
}
 8002c4c:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7fd fe70 	bl	8000934 <MCI_StopRamp>
  bool retVal = true;
 8002c54:	2001      	movs	r0, #1
}
 8002c56:	bd10      	pop	{r4, pc}

08002c58 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002c58:	b510      	push	{r4, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c5c:	7d04      	ldrb	r4, [r0, #20]
 8002c5e:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002c60:	fb83 c301 	smull	ip, r3, r3, r1
 8002c64:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002c68:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002c6c:	b209      	sxth	r1, r1
 8002c6e:	f7fd fdbf 	bl	80007f0 <MCI_ExecSpeedRamp>
  return true;
}
 8002c72:	2001      	movs	r0, #1
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	bf00      	nop
 8002c78:	2aaaaaab 	.word	0x2aaaaaab

08002c7c <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002c7c:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c7e:	6883      	ldr	r3, [r0, #8]
 8002c80:	7d04      	ldrb	r4, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002c82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002c86:	f7fd fdbf 	bl	8000808 <MCI_ExecTorqueRamp>
  return true;
}
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	bd10      	pop	{r4, pc}
 8002c8e:	bf00      	nop

08002c90 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c92:	7d04      	ldrb	r4, [r0, #20]
 8002c94:	68c0      	ldr	r0, [r0, #12]
 8002c96:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8002c9a:	6944      	ldr	r4, [r0, #20]
  if (pRevupCtrl)
 8002c9c:	b19c      	cbz	r4, 8002cc6 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	461e      	mov	r6, r3
 8002ca2:	4617      	mov	r7, r2
 8002ca4:	460d      	mov	r5, r1
 8002ca6:	f004 fbb5 	bl	8007414 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002caa:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002cac:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f004 fbb6 	bl	8007420 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002cb4:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002cb6:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f004 fbb9 	bl	8007430 <RUC_GetPhaseFinalTorque>
 8002cbe:	9b06      	ldr	r3, [sp, #24]
 8002cc0:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002cc2:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002cc6:	4620      	mov	r0, r4
}
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cca:	bf00      	nop

08002ccc <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002ccc:	b570      	push	{r4, r5, r6, lr}
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002cce:	7d04      	ldrb	r4, [r0, #20]
 8002cd0:	68c0      	ldr	r0, [r0, #12]
{
 8002cd2:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002cd4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
{
 8002cd8:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002cdc:	6940      	ldr	r0, [r0, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002cde:	9001      	str	r0, [sp, #4]
{
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002ce4:	f004 fb84 	bl	80073f0 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002ce8:	9801      	ldr	r0, [sp, #4]
 8002cea:	462a      	mov	r2, r5
 8002cec:	4621      	mov	r1, r4
 8002cee:	f004 fb85 	bl	80073fc <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002cf2:	9801      	ldr	r0, [sp, #4]
 8002cf4:	4632      	mov	r2, r6
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	f004 fb86 	bl	8007408 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
 8002d02:	bf00      	nop

08002d04 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002d04:	b410      	push	{r4}
 8002d06:	b083      	sub	sp, #12

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d08:	7d04      	ldrb	r4, [r0, #20]
 8002d0a:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8002d0c:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002d10:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002d14:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002d18:	9901      	ldr	r1, [sp, #4]
}
 8002d1a:	b003      	add	sp, #12
 8002d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
  MCI_SetCurrentReferences(pMCI,currComp);
 8002d20:	f7fd bd7c 	b.w	800081c <MCI_SetCurrentReferences>

08002d24 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002d24:	2000      	movs	r0, #0
 8002d26:	4770      	bx	lr

08002d28 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d28:	4a03      	ldr	r2, [pc, #12]	; (8002d38 <SystemInit+0x10>)
 8002d2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d32:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <HAL_InitTick+0x3c>)
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_InitTick+0x40>)
 8002d42:	7812      	ldrb	r2, [r2, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
{
 8002d46:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d4c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002d50:	fbb3 f0f0 	udiv	r0, r3, r0
 8002d54:	f000 fcfa 	bl	800374c <HAL_SYSTICK_Config>
 8002d58:	b908      	cbnz	r0, 8002d5e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d5a:	2d0f      	cmp	r5, #15
 8002d5c:	d901      	bls.n	8002d62 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002d5e:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8002d60:	bd38      	pop	{r3, r4, r5, pc}
 8002d62:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d64:	4602      	mov	r2, r0
 8002d66:	4629      	mov	r1, r5
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f000 fca8 	bl	80036c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_InitTick+0x44>)
 8002d72:	4620      	mov	r0, r4
 8002d74:	601d      	str	r5, [r3, #0]
}
 8002d76:	bd38      	pop	{r3, r4, r5, pc}
 8002d78:	20000684 	.word	0x20000684
 8002d7c:	20000680 	.word	0x20000680
 8002d80:	20000688 	.word	0x20000688

08002d84 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d84:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <HAL_Init+0x20>)
{
 8002d86:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d88:	6813      	ldr	r3, [r2, #0]
 8002d8a:	f043 0310 	orr.w	r3, r3, #16
 8002d8e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f000 fc81 	bl	8003698 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d96:	2004      	movs	r0, #4
 8002d98:	f7ff ffd0 	bl	8002d3c <HAL_InitTick>
  HAL_MspInit();
 8002d9c:	f7ff f912 	bl	8001fc4 <HAL_MspInit>
}
 8002da0:	2000      	movs	r0, #0
 8002da2:	bd08      	pop	{r3, pc}
 8002da4:	40022000 	.word	0x40022000

08002da8 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002da8:	4a03      	ldr	r2, [pc, #12]	; (8002db8 <HAL_IncTick+0x10>)
 8002daa:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <HAL_IncTick+0x14>)
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	440b      	add	r3, r1
 8002db2:	6013      	str	r3, [r2, #0]
}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000a2c 	.word	0x20000a2c
 8002dbc:	20000684 	.word	0x20000684

08002dc0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002dc0:	4b01      	ldr	r3, [pc, #4]	; (8002dc8 <HAL_GetTick+0x8>)
 8002dc2:	6818      	ldr	r0, [r3, #0]
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000a2c 	.word	0x20000a2c

08002dcc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff fff6 	bl	8002dc0 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002dd6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002dd8:	d002      	beq.n	8002de0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_Delay+0x20>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002de0:	f7ff ffee 	bl	8002dc0 <HAL_GetTick>
 8002de4:	1b43      	subs	r3, r0, r5
 8002de6:	42a3      	cmp	r3, r4
 8002de8:	d3fa      	bcc.n	8002de0 <HAL_Delay+0x14>
  {
  }
}
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	20000684 	.word	0x20000684

08002df0 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002df0:	6802      	ldr	r2, [r0, #0]
{
 8002df2:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002df4:	6893      	ldr	r3, [r2, #8]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dfe:	2000      	movs	r0, #0
}
 8002e00:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002e02:	6811      	ldr	r1, [r2, #0]
 8002e04:	07c9      	lsls	r1, r1, #31
 8002e06:	d5fa      	bpl.n	8002dfe <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002e08:	6891      	ldr	r1, [r2, #8]
 8002e0a:	f001 010d 	and.w	r1, r1, #13
 8002e0e:	2901      	cmp	r1, #1
 8002e10:	4604      	mov	r4, r0
 8002e12:	d009      	beq.n	8002e28 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e14:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002e16:	f042 0210 	orr.w	r2, r2, #16
 8002e1a:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 8002e22:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e24:	6462      	str	r2, [r4, #68]	; 0x44
}
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8002e28:	6893      	ldr	r3, [r2, #8]
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6093      	str	r3, [r2, #8]
 8002e32:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8002e34:	f7ff ffc4 	bl	8002dc0 <HAL_GetTick>
 8002e38:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	07db      	lsls	r3, r3, #31
 8002e40:	d5dd      	bpl.n	8002dfe <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e42:	f7ff ffbd 	bl	8002dc0 <HAL_GetTick>
 8002e46:	1b40      	subs	r0, r0, r5
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	d9f6      	bls.n	8002e3a <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e4e:	f043 0310 	orr.w	r3, r3, #16
 8002e52:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6463      	str	r3, [r4, #68]	; 0x44
 8002e5c:	2001      	movs	r0, #1
}
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}

08002e60 <HAL_ADC_Init>:
{
 8002e60:	b570      	push	{r4, r5, r6, lr}
 8002e62:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	f000 809b 	beq.w	8002fa4 <HAL_ADC_Init+0x144>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e70:	f013 0310 	ands.w	r3, r3, #16
 8002e74:	4604      	mov	r4, r0
 8002e76:	d118      	bne.n	8002eaa <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002e78:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	f000 8095 	beq.w	8002faa <HAL_ADC_Init+0x14a>
 8002e80:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e82:	6891      	ldr	r1, [r2, #8]
 8002e84:	00cd      	lsls	r5, r1, #3
 8002e86:	f140 8081 	bpl.w	8002f8c <HAL_ADC_Init+0x12c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002e8a:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002e8c:	0088      	lsls	r0, r1, #2
 8002e8e:	d47d      	bmi.n	8002f8c <HAL_ADC_Init+0x12c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002e92:	06c9      	lsls	r1, r1, #27
 8002e94:	d400      	bmi.n	8002e98 <HAL_ADC_Init+0x38>
 8002e96:	b163      	cbz	r3, 8002eb2 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8002e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e9a:	f023 0312 	bic.w	r3, r3, #18
 8002e9e:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 8002ea2:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8002ea4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002eac:	06da      	lsls	r2, r3, #27
 8002eae:	d4f3      	bmi.n	8002e98 <HAL_ADC_Init+0x38>
 8002eb0:	6802      	ldr	r2, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002eb2:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002eb4:	f010 0004 	ands.w	r0, r0, #4
 8002eb8:	d1ee      	bne.n	8002e98 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8002eba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002ebc:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002ec0:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8002ec8:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eca:	f000 80d8 	beq.w	800307e <HAL_ADC_Init+0x21e>
 8002ece:	4b7d      	ldr	r3, [pc, #500]	; (80030c4 <HAL_ADC_Init+0x264>)
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f000 80dc 	beq.w	800308e <HAL_ADC_Init+0x22e>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ed6:	497c      	ldr	r1, [pc, #496]	; (80030c8 <HAL_ADC_Init+0x268>)
 8002ed8:	428a      	cmp	r2, r1
 8002eda:	d073      	beq.n	8002fc4 <HAL_ADC_Init+0x164>
 8002edc:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <HAL_ADC_Init+0x26c>)
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d071      	beq.n	8002fc6 <HAL_ADC_Init+0x166>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ee2:	6893      	ldr	r3, [r2, #8]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	f000 80e2 	beq.w	80030b2 <HAL_ADC_Init+0x252>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eee:	4d78      	ldr	r5, [pc, #480]	; (80030d0 <HAL_ADC_Init+0x270>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002ef0:	68ab      	ldr	r3, [r5, #8]
 8002ef2:	6861      	ldr	r1, [r4, #4]
 8002ef4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002efc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8002f00:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002f02:	7e65      	ldrb	r5, [r4, #25]
 8002f04:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f06:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002f0a:	2e01      	cmp	r6, #1
 8002f0c:	bf18      	it	ne
 8002f0e:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002f12:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f16:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002f18:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f1c:	f000 8093 	beq.w	8003046 <HAL_ADC_Init+0x1e6>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f20:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f22:	2901      	cmp	r1, #1
 8002f24:	d00b      	beq.n	8002f3e <HAL_ADC_Init+0xde>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002f26:	4868      	ldr	r0, [pc, #416]	; (80030c8 <HAL_ADC_Init+0x268>)
 8002f28:	4282      	cmp	r2, r0
 8002f2a:	f000 809c 	beq.w	8003066 <HAL_ADC_Init+0x206>
 8002f2e:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002f32:	4282      	cmp	r2, r0
 8002f34:	f000 8097 	beq.w	8003066 <HAL_ADC_Init+0x206>
 8002f38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f3a:	4303      	orrs	r3, r0
 8002f3c:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f3e:	6891      	ldr	r1, [r2, #8]
 8002f40:	f011 0f0c 	tst.w	r1, #12
 8002f44:	d10c      	bne.n	8002f60 <HAL_ADC_Init+0x100>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002f46:	68d1      	ldr	r1, [r2, #12]
 8002f48:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002f4c:	f021 0102 	bic.w	r1, r1, #2
 8002f50:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002f52:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002f56:	7e20      	ldrb	r0, [r4, #24]
 8002f58:	0049      	lsls	r1, r1, #1
 8002f5a:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8002f5e:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8002f60:	68d5      	ldr	r5, [r2, #12]
 8002f62:	495c      	ldr	r1, [pc, #368]	; (80030d4 <HAL_ADC_Init+0x274>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f64:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8002f66:	4029      	ands	r1, r5
 8002f68:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f6a:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8002f6c:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f6e:	d072      	beq.n	8003056 <HAL_ADC_Init+0x1f6>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f70:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f72:	f023 030f 	bic.w	r3, r3, #15
 8002f76:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002f7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f7e:	f023 0303 	bic.w	r3, r3, #3
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8002f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f8e:	f023 0312 	bic.w	r3, r3, #18
 8002f92:	f043 0310 	orr.w	r3, r3, #16
 8002f96:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f98:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa2:	e779      	b.n	8002e98 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	b002      	add	sp, #8
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8002faa:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8002fae:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8002fb0:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8002fb4:	f7ff f820 	bl	8001ff8 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	6893      	ldr	r3, [r2, #8]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	d511      	bpl.n	8002fe4 <HAL_ADC_Init+0x184>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	e75e      	b.n	8002e82 <HAL_ADC_Init+0x22>
 8002fc4:	4941      	ldr	r1, [pc, #260]	; (80030cc <HAL_ADC_Init+0x26c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc6:	4d42      	ldr	r5, [pc, #264]	; (80030d0 <HAL_ADC_Init+0x270>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002fc8:	6893      	ldr	r3, [r2, #8]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d058      	beq.n	8003084 <HAL_ADC_Init+0x224>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fd2:	688b      	ldr	r3, [r1, #8]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d189      	bne.n	8002ef0 <HAL_ADC_Init+0x90>
 8002fdc:	680b      	ldr	r3, [r1, #0]
 8002fde:	07db      	lsls	r3, r3, #31
 8002fe0:	d48c      	bmi.n	8002efc <HAL_ADC_Init+0x9c>
 8002fe2:	e785      	b.n	8002ef0 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff ff03 	bl	8002df0 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fec:	06d6      	lsls	r6, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8002fee:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ff0:	f53f af46 	bmi.w	8002e80 <HAL_ADC_Init+0x20>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	f47f af43 	bne.w	8002e80 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002ffc:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ffe:	4936      	ldr	r1, [pc, #216]	; (80030d8 <HAL_ADC_Init+0x278>)
 8003000:	4d36      	ldr	r5, [pc, #216]	; (80030dc <HAL_ADC_Init+0x27c>)
 8003002:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8003004:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 8003008:	f020 0002 	bic.w	r0, r0, #2
 800300c:	f040 0002 	orr.w	r0, r0, #2
 8003010:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003012:	6890      	ldr	r0, [r2, #8]
 8003014:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8003018:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800301a:	fba5 0101 	umull	r0, r1, r5, r1
 800301e:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003020:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003022:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003026:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003028:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800302c:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800302e:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8003030:	9901      	ldr	r1, [sp, #4]
 8003032:	2900      	cmp	r1, #0
 8003034:	f43f af25 	beq.w	8002e82 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8003038:	9901      	ldr	r1, [sp, #4]
 800303a:	3901      	subs	r1, #1
 800303c:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800303e:	9901      	ldr	r1, [sp, #4]
 8003040:	2900      	cmp	r1, #0
 8003042:	d1f9      	bne.n	8003038 <HAL_ADC_Init+0x1d8>
 8003044:	e71d      	b.n	8002e82 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003046:	bb35      	cbnz	r5, 8003096 <HAL_ADC_Init+0x236>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003048:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800304a:	3901      	subs	r1, #1
 800304c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	e764      	b.n	8002f20 <HAL_ADC_Init+0xc0>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003056:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003058:	69e3      	ldr	r3, [r4, #28]
 800305a:	f021 010f 	bic.w	r1, r1, #15
 800305e:	3b01      	subs	r3, #1
 8003060:	430b      	orrs	r3, r1
 8003062:	6313      	str	r3, [r2, #48]	; 0x30
 8003064:	e788      	b.n	8002f78 <HAL_ADC_Init+0x118>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003066:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800306a:	d01f      	beq.n	80030ac <HAL_ADC_Init+0x24c>
 800306c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003070:	d024      	beq.n	80030bc <HAL_ADC_Init+0x25c>
 8003072:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8003076:	bf08      	it	eq
 8003078:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800307c:	e75c      	b.n	8002f38 <HAL_ADC_Init+0xd8>
 800307e:	4911      	ldr	r1, [pc, #68]	; (80030c4 <HAL_ADC_Init+0x264>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003080:	4d17      	ldr	r5, [pc, #92]	; (80030e0 <HAL_ADC_Init+0x280>)
 8003082:	e7a1      	b.n	8002fc8 <HAL_ADC_Init+0x168>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003084:	6813      	ldr	r3, [r2, #0]
 8003086:	07de      	lsls	r6, r3, #31
 8003088:	f53f af38 	bmi.w	8002efc <HAL_ADC_Init+0x9c>
 800308c:	e7a1      	b.n	8002fd2 <HAL_ADC_Init+0x172>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308e:	4d14      	ldr	r5, [pc, #80]	; (80030e0 <HAL_ADC_Init+0x280>)
 8003090:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003094:	e798      	b.n	8002fc8 <HAL_ADC_Init+0x168>
        ADC_STATE_CLR_SET(hadc->State,
 8003096:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003098:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800309c:	f041 0120 	orr.w	r1, r1, #32
 80030a0:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80030a4:	f041 0101 	orr.w	r1, r1, #1
 80030a8:	6461      	str	r1, [r4, #68]	; 0x44
 80030aa:	e739      	b.n	8002f20 <HAL_ADC_Init+0xc0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80030ac:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80030b0:	e742      	b.n	8002f38 <HAL_ADC_Init+0xd8>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	07db      	lsls	r3, r3, #31
 80030b6:	f53f af21 	bmi.w	8002efc <HAL_ADC_Init+0x9c>
 80030ba:	e718      	b.n	8002eee <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80030bc:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80030c0:	e73a      	b.n	8002f38 <HAL_ADC_Init+0xd8>
 80030c2:	bf00      	nop
 80030c4:	50000100 	.word	0x50000100
 80030c8:	50000400 	.word	0x50000400
 80030cc:	50000500 	.word	0x50000500
 80030d0:	50000700 	.word	0x50000700
 80030d4:	fff0c007 	.word	0xfff0c007
 80030d8:	20000680 	.word	0x20000680
 80030dc:	431bde83 	.word	0x431bde83
 80030e0:	50000300 	.word	0x50000300

080030e4 <HAL_ADCEx_InjectedConfigChannel>:
{
 80030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80030e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030ea:	6904      	ldr	r4, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030ec:	68cf      	ldr	r7, [r1, #12]
{
 80030ee:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80030f0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80030f2:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 80030f4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80030f6:	f000 81ac 	beq.w	8003452 <HAL_ADCEx_InjectedConfigChannel+0x36e>
 80030fa:	2301      	movs	r3, #1
 80030fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003100:	b35c      	cbz	r4, 800315a <HAL_ADCEx_InjectedConfigChannel+0x76>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8003102:	698c      	ldr	r4, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003104:	429c      	cmp	r4, r3
 8003106:	d028      	beq.n	800315a <HAL_ADCEx_InjectedConfigChannel+0x76>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003108:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 800310a:	2e00      	cmp	r6, #0
 800310c:	f040 8127 	bne.w	800335e <HAL_ADCEx_InjectedConfigChannel+0x27a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003110:	6a0e      	ldr	r6, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003112:	64c4      	str	r4, [r0, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003114:	2e01      	cmp	r6, #1
 8003116:	f000 81ef 	beq.w	80034f8 <HAL_ADCEx_InjectedConfigChannel+0x414>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800311a:	6803      	ldr	r3, [r0, #0]
 800311c:	4ab6      	ldr	r2, [pc, #728]	; (80033f8 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 800311e:	4293      	cmp	r3, r2
 8003120:	f104 34ff 	add.w	r4, r4, #4294967295
 8003124:	f000 81e0 	beq.w	80034e8 <HAL_ADCEx_InjectedConfigChannel+0x404>
 8003128:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800312c:	4293      	cmp	r3, r2
 800312e:	f000 81db 	beq.w	80034e8 <HAL_ADCEx_InjectedConfigChannel+0x404>
 8003132:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003134:	4322      	orrs	r2, r4
 8003136:	4316      	orrs	r6, r2
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003138:	e9d1 c500 	ldrd	ip, r5, [r1]
 800313c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003140:	006a      	lsls	r2, r5, #1
 8003142:	3202      	adds	r2, #2
      hadc->InjectionConfig.ChannelCount --;
 8003144:	64c4      	str	r4, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003146:	241f      	movs	r4, #31
 8003148:	4094      	lsls	r4, r2
 800314a:	ea26 0404 	bic.w	r4, r6, r4
 800314e:	fa0c f202 	lsl.w	r2, ip, r2
 8003152:	4314      	orrs	r4, r2
 8003154:	6484      	str	r4, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003156:	2600      	movs	r6, #0
 8003158:	e009      	b.n	800316e <HAL_ADCEx_InjectedConfigChannel+0x8a>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800315a:	684b      	ldr	r3, [r1, #4]
 800315c:	2b01      	cmp	r3, #1
 800315e:	f000 80e3 	beq.w	8003328 <HAL_ADCEx_InjectedConfigChannel+0x244>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003162:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003164:	6803      	ldr	r3, [r0, #0]
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	6402      	str	r2, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 800316c:	2601      	movs	r6, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	0714      	lsls	r4, r2, #28
 8003172:	d40d      	bmi.n	8003190 <HAL_ADCEx_InjectedConfigChannel+0xac>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003174:	7f4a      	ldrb	r2, [r1, #29]
 8003176:	2a00      	cmp	r2, #0
 8003178:	f040 80bf 	bne.w	80032fa <HAL_ADCEx_InjectedConfigChannel+0x216>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 800317c:	7f0a      	ldrb	r2, [r1, #28]
 800317e:	7f8d      	ldrb	r5, [r1, #30]
 8003180:	68dc      	ldr	r4, [r3, #12]
 8003182:	0512      	lsls	r2, r2, #20
 8003184:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8003188:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 800318c:	4322      	orrs	r2, r4
 800318e:	60da      	str	r2, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	f012 0f0c 	tst.w	r2, #12
 8003196:	d13a      	bne.n	800320e <HAL_ADCEx_InjectedConfigChannel+0x12a>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003198:	6a0a      	ldr	r2, [r1, #32]
 800319a:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 800319c:	68da      	ldr	r2, [r3, #12]
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800319e:	f000 8151 	beq.w	8003444 <HAL_ADCEx_InjectedConfigChannel+0x360>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80031a2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80031a6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80031a8:	7f4a      	ldrb	r2, [r1, #29]
 80031aa:	2a01      	cmp	r2, #1
 80031ac:	f000 811d 	beq.w	80033ea <HAL_ADCEx_InjectedConfigChannel+0x306>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80031b0:	f8d1 c000 	ldr.w	ip, [r1]
 80031b4:	f1bc 0f09 	cmp.w	ip, #9
 80031b8:	f240 8091 	bls.w	80032de <HAL_ADCEx_InjectedConfigChannel+0x1fa>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80031bc:	eb0c 054c 	add.w	r5, ip, ip, lsl #1
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	688c      	ldr	r4, [r1, #8]
 80031c4:	3d1e      	subs	r5, #30
 80031c6:	f04f 0e07 	mov.w	lr, #7
 80031ca:	fa0e fe05 	lsl.w	lr, lr, r5
 80031ce:	ea22 020e 	bic.w	r2, r2, lr
 80031d2:	40ac      	lsls	r4, r5
 80031d4:	4322      	orrs	r2, r4
 80031d6:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80031d8:	e9d1 4504 	ldrd	r4, r5, [r1, #16]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80031e2:	0052      	lsls	r2, r2, #1
 80031e4:	3c01      	subs	r4, #1
 80031e6:	fa05 f202 	lsl.w	r2, r5, r2
    switch (sConfigInjected->InjectedOffsetNumber)
 80031ea:	2c03      	cmp	r4, #3
 80031ec:	f200 8190 	bhi.w	8003510 <HAL_ADCEx_InjectedConfigChannel+0x42c>
 80031f0:	e8df f014 	tbh	[pc, r4, lsl #1]
 80031f4:	00f10004 	.word	0x00f10004
 80031f8:	00dd00e7 	.word	0x00dd00e7
      MODIFY_REG(hadc->Instance->OFR1                               ,
 80031fc:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80031fe:	4c7f      	ldr	r4, [pc, #508]	; (80033fc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8003200:	ea42 628c 	orr.w	r2, r2, ip, lsl #26
 8003204:	402c      	ands	r4, r5
 8003206:	4322      	orrs	r2, r4
 8003208:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800320c:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	f002 0203 	and.w	r2, r2, #3
 8003214:	2a01      	cmp	r2, #1
 8003216:	d041      	beq.n	800329c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003218:	2f01      	cmp	r7, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800321a:	680c      	ldr	r4, [r1, #0]
 800321c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003220:	d044      	beq.n	80032ac <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003222:	2101      	movs	r1, #1
 8003224:	40a1      	lsls	r1, r4
 8003226:	ea22 0201 	bic.w	r2, r2, r1
 800322a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003232:	d02c      	beq.n	800328e <HAL_ADCEx_InjectedConfigChannel+0x1aa>
 8003234:	4a72      	ldr	r2, [pc, #456]	; (8003400 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d029      	beq.n	800328e <HAL_ADCEx_InjectedConfigChannel+0x1aa>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800323a:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800323c:	4d71      	ldr	r5, [pc, #452]	; (8003404 <HAL_ADCEx_InjectedConfigChannel+0x320>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800323e:	d029      	beq.n	8003294 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003240:	2c11      	cmp	r4, #17
 8003242:	d16b      	bne.n	800331c <HAL_ADCEx_InjectedConfigChannel+0x238>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003244:	68aa      	ldr	r2, [r5, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003246:	01d1      	lsls	r1, r2, #7
 8003248:	d41b      	bmi.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800324e:	f000 8104 	beq.w	800345a <HAL_ADCEx_InjectedConfigChannel+0x376>
 8003252:	4a6b      	ldr	r2, [pc, #428]	; (8003400 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f000 80dd 	beq.w	8003414 <HAL_ADCEx_InjectedConfigChannel+0x330>
 800325a:	4967      	ldr	r1, [pc, #412]	; (80033f8 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 800325c:	428b      	cmp	r3, r1
 800325e:	f000 814f 	beq.w	8003500 <HAL_ADCEx_InjectedConfigChannel+0x41c>
 8003262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003266:	4293      	cmp	r3, r2
 8003268:	f000 80d6 	beq.w	8003418 <HAL_ADCEx_InjectedConfigChannel+0x334>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	f002 0203 	and.w	r2, r2, #3
 8003272:	2a01      	cmp	r2, #1
 8003274:	f000 8132 	beq.w	80034dc <HAL_ADCEx_InjectedConfigChannel+0x3f8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003278:	2c10      	cmp	r4, #16
 800327a:	d002      	beq.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800327c:	2c11      	cmp	r4, #17
 800327e:	f040 80d9 	bne.w	8003434 <HAL_ADCEx_InjectedConfigChannel+0x350>
  __HAL_UNLOCK(hadc);
 8003282:	2300      	movs	r3, #0
 8003284:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003288:	4630      	mov	r0, r6
 800328a:	b003      	add	sp, #12
 800328c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800328e:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003290:	4d5d      	ldr	r5, [pc, #372]	; (8003408 <HAL_ADCEx_InjectedConfigChannel+0x324>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003292:	d1d5      	bne.n	8003240 <HAL_ADCEx_InjectedConfigChannel+0x15c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003294:	68aa      	ldr	r2, [r5, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003296:	0217      	lsls	r7, r2, #8
 8003298:	d5d7      	bpl.n	800324a <HAL_ADCEx_InjectedConfigChannel+0x166>
 800329a:	e7f2      	b.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	07d2      	lsls	r2, r2, #31
 80032a0:	d4ef      	bmi.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032a2:	2f01      	cmp	r7, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80032a4:	680c      	ldr	r4, [r1, #0]
 80032a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80032aa:	d1ba      	bne.n	8003222 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80032ac:	40a7      	lsls	r7, r4
 80032ae:	4317      	orrs	r7, r2
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80032b0:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80032b2:	f8c3 70b0 	str.w	r7, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80032b6:	d86d      	bhi.n	8003394 <HAL_ADCEx_InjectedConfigChannel+0x2b0>
        MODIFY_REG(hadc->Instance->SMPR1,
 80032b8:	1c62      	adds	r2, r4, #1
 80032ba:	688d      	ldr	r5, [r1, #8]
 80032bc:	6959      	ldr	r1, [r3, #20]
 80032be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80032c2:	2707      	movs	r7, #7
 80032c4:	4097      	lsls	r7, r2
 80032c6:	4095      	lsls	r5, r2
 80032c8:	ea21 0207 	bic.w	r2, r1, r7
 80032cc:	432a      	orrs	r2, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80032d2:	615a      	str	r2, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d4:	d0d5      	beq.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 80032d6:	4a4a      	ldr	r2, [pc, #296]	; (8003400 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d1ae      	bne.n	800323a <HAL_ADCEx_InjectedConfigChannel+0x156>
 80032dc:	e7d1      	b.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	688c      	ldr	r4, [r1, #8]
 80032e2:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
 80032e6:	2507      	movs	r5, #7
 80032e8:	fa05 f50e 	lsl.w	r5, r5, lr
 80032ec:	ea22 0205 	bic.w	r2, r2, r5
 80032f0:	fa04 f40e 	lsl.w	r4, r4, lr
 80032f4:	4322      	orrs	r2, r4
 80032f6:	615a      	str	r2, [r3, #20]
 80032f8:	e76e      	b.n	80031d8 <HAL_ADCEx_InjectedConfigChannel+0xf4>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	7f8c      	ldrb	r4, [r1, #30]
 80032fe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003302:	ea42 5244 	orr.w	r2, r2, r4, lsl #21
 8003306:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003308:	7f0a      	ldrb	r2, [r1, #28]
 800330a:	2a01      	cmp	r2, #1
 800330c:	f47f af40 	bne.w	8003190 <HAL_ADCEx_InjectedConfigChannel+0xac>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003312:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 8003316:	4616      	mov	r6, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003318:	6404      	str	r4, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800331a:	e739      	b.n	8003190 <HAL_ADCEx_InjectedConfigChannel+0xac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800331c:	2c12      	cmp	r4, #18
 800331e:	d1b0      	bne.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003320:	68aa      	ldr	r2, [r5, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003322:	0252      	lsls	r2, r2, #9
 8003324:	d4ad      	bmi.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8003326:	e790      	b.n	800324a <HAL_ADCEx_InjectedConfigChannel+0x166>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003328:	6a0d      	ldr	r5, [r1, #32]
 800332a:	2d01      	cmp	r5, #1
 800332c:	f000 80a0 	beq.w	8003470 <HAL_ADCEx_InjectedConfigChannel+0x38c>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003330:	6803      	ldr	r3, [r0, #0]
 8003332:	4e31      	ldr	r6, [pc, #196]	; (80033f8 <HAL_ADCEx_InjectedConfigChannel+0x314>)
 8003334:	680c      	ldr	r4, [r1, #0]
 8003336:	42b3      	cmp	r3, r6
 8003338:	ea4f 2204 	mov.w	r2, r4, lsl #8
 800333c:	f000 809c 	beq.w	8003478 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003340:	4c32      	ldr	r4, [pc, #200]	; (800340c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003342:	42a3      	cmp	r3, r4
 8003344:	f000 8098 	beq.w	8003478 <HAL_ADCEx_InjectedConfigChannel+0x394>
 8003348:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800334a:	4322      	orrs	r2, r4
 800334c:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->JSQR           ,
 800334e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003350:	4d2f      	ldr	r5, [pc, #188]	; (8003410 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8003352:	402c      	ands	r4, r5
 8003354:	4314      	orrs	r4, r2
 8003356:	64dc      	str	r4, [r3, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003358:	2600      	movs	r6, #0
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800335a:	6482      	str	r2, [r0, #72]	; 0x48
 800335c:	e707      	b.n	800316e <HAL_ADCEx_InjectedConfigChannel+0x8a>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800335e:	684b      	ldr	r3, [r1, #4]
 8003360:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8003362:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	3302      	adds	r3, #2
 800336a:	241f      	movs	r4, #31
 800336c:	409c      	lsls	r4, r3
 800336e:	ea25 0504 	bic.w	r5, r5, r4
 8003372:	680c      	ldr	r4, [r1, #0]
 8003374:	fa04 f303 	lsl.w	r3, r4, r3
 8003378:	431d      	orrs	r5, r3
 800337a:	3e01      	subs	r6, #1
      hadc->InjectionConfig.ChannelCount --;
 800337c:	e9c0 5612 	strd	r5, r6, [r0, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003380:	6803      	ldr	r3, [r0, #0]
 8003382:	2e00      	cmp	r6, #0
 8003384:	f47f aee7 	bne.w	8003156 <HAL_ADCEx_InjectedConfigChannel+0x72>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800338a:	4c21      	ldr	r4, [pc, #132]	; (8003410 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800338c:	4022      	ands	r2, r4
 800338e:	4315      	orrs	r5, r2
 8003390:	64dd      	str	r5, [r3, #76]	; 0x4c
 8003392:	e6ec      	b.n	800316e <HAL_ADCEx_InjectedConfigChannel+0x8a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003394:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003398:	688d      	ldr	r5, [r1, #8]
 800339a:	6999      	ldr	r1, [r3, #24]
 800339c:	3a1b      	subs	r2, #27
 800339e:	2707      	movs	r7, #7
 80033a0:	4097      	lsls	r7, r2
 80033a2:	4095      	lsls	r5, r2
 80033a4:	ea21 0207 	bic.w	r2, r1, r7
 80033a8:	432a      	orrs	r2, r5
 80033aa:	619a      	str	r2, [r3, #24]
 80033ac:	e73f      	b.n	800322e <HAL_ADCEx_InjectedConfigChannel+0x14a>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80033ae:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 80033b0:	4c12      	ldr	r4, [pc, #72]	; (80033fc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80033b2:	ea42 628c 	orr.w	r2, r2, ip, lsl #26
 80033b6:	402c      	ands	r4, r5
 80033b8:	4322      	orrs	r2, r4
 80033ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033be:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80033c0:	e725      	b.n	800320e <HAL_ADCEx_InjectedConfigChannel+0x12a>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80033c2:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 80033c4:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80033c6:	ea42 628c 	orr.w	r2, r2, ip, lsl #26
 80033ca:	402c      	ands	r4, r5
 80033cc:	4322      	orrs	r2, r4
 80033ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033d2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80033d4:	e71b      	b.n	800320e <HAL_ADCEx_InjectedConfigChannel+0x12a>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80033d6:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80033d8:	4c08      	ldr	r4, [pc, #32]	; (80033fc <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80033da:	ea42 628c 	orr.w	r2, r2, ip, lsl #26
 80033de:	402c      	ands	r4, r5
 80033e0:	4322      	orrs	r2, r4
 80033e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033e6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80033e8:	e711      	b.n	800320e <HAL_ADCEx_InjectedConfigChannel+0x12a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80033ec:	f044 0420 	orr.w	r4, r4, #32
        tmp_hal_status = HAL_ERROR;
 80033f0:	4616      	mov	r6, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f2:	6404      	str	r4, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80033f4:	e6dc      	b.n	80031b0 <HAL_ADCEx_InjectedConfigChannel+0xcc>
 80033f6:	bf00      	nop
 80033f8:	50000400 	.word	0x50000400
 80033fc:	83fff000 	.word	0x83fff000
 8003400:	50000100 	.word	0x50000100
 8003404:	50000700 	.word	0x50000700
 8003408:	50000300 	.word	0x50000300
 800340c:	50000500 	.word	0x50000500
 8003410:	82082000 	.word	0x82082000
 8003414:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	f002 0203 	and.w	r2, r2, #3
 800341e:	2a01      	cmp	r2, #1
 8003420:	d01d      	beq.n	800345e <HAL_ADCEx_InjectedConfigChannel+0x37a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003422:	688a      	ldr	r2, [r1, #8]
 8003424:	f002 0203 	and.w	r2, r2, #3
 8003428:	2a01      	cmp	r2, #1
 800342a:	d02d      	beq.n	8003488 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800342c:	2c10      	cmp	r4, #16
 800342e:	d02f      	beq.n	8003490 <HAL_ADCEx_InjectedConfigChannel+0x3ac>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003430:	2c11      	cmp	r4, #17
 8003432:	d04a      	beq.n	80034ca <HAL_ADCEx_InjectedConfigChannel+0x3e6>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003434:	2c12      	cmp	r4, #18
 8003436:	f47f af24 	bne.w	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800343a:	68ab      	ldr	r3, [r5, #8]
 800343c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003440:	60ab      	str	r3, [r5, #8]
 8003442:	e71e      	b.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003444:	7f4c      	ldrb	r4, [r1, #29]
 8003446:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800344a:	ea42 6244 	orr.w	r2, r2, r4, lsl #25
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	e6ae      	b.n	80031b0 <HAL_ADCEx_InjectedConfigChannel+0xcc>
  __HAL_LOCK(hadc);
 8003452:	2602      	movs	r6, #2
}
 8003454:	4630      	mov	r0, r6
 8003456:	b003      	add	sp, #12
 8003458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800345a:	4943      	ldr	r1, [pc, #268]	; (8003568 <HAL_ADCEx_InjectedConfigChannel+0x484>)
 800345c:	e7dc      	b.n	8003418 <HAL_ADCEx_InjectedConfigChannel+0x334>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	07d7      	lsls	r7, r2, #31
 8003462:	d5de      	bpl.n	8003422 <HAL_ADCEx_InjectedConfigChannel+0x33e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003466:	f043 0320 	orr.w	r3, r3, #32
 800346a:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800346c:	2601      	movs	r6, #1
 800346e:	e708      	b.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003470:	680a      	ldr	r2, [r1, #0]
 8003472:	6803      	ldr	r3, [r0, #0]
 8003474:	0212      	lsls	r2, r2, #8
 8003476:	e76a      	b.n	800334e <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003478:	2d08      	cmp	r5, #8
 800347a:	d033      	beq.n	80034e4 <HAL_ADCEx_InjectedConfigChannel+0x400>
 800347c:	2d14      	cmp	r5, #20
 800347e:	d043      	beq.n	8003508 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8003480:	2d1c      	cmp	r5, #28
 8003482:	bf08      	it	eq
 8003484:	2510      	moveq	r5, #16
 8003486:	e75f      	b.n	8003348 <HAL_ADCEx_InjectedConfigChannel+0x264>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003488:	680a      	ldr	r2, [r1, #0]
 800348a:	07d2      	lsls	r2, r2, #31
 800348c:	d4ea      	bmi.n	8003464 <HAL_ADCEx_InjectedConfigChannel+0x380>
 800348e:	e7cd      	b.n	800342c <HAL_ADCEx_InjectedConfigChannel+0x348>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003494:	f47f aef5 	bne.w	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_ADCEx_InjectedConfigChannel+0x488>)
 800349a:	4935      	ldr	r1, [pc, #212]	; (8003570 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 800349c:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800349e:	68aa      	ldr	r2, [r5, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034a0:	fba1 1303 	umull	r1, r3, r1, r3
 80034a4:	0c9b      	lsrs	r3, r3, #18
 80034a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034aa:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034b0:	60aa      	str	r2, [r5, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034b2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80034b4:	9b01      	ldr	r3, [sp, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f43f aee3 	beq.w	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
            wait_loop_index--;
 80034bc:	9b01      	ldr	r3, [sp, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80034c2:	9b01      	ldr	r3, [sp, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f9      	bne.n	80034bc <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 80034c8:	e6db      	b.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80034ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ce:	f47f aed8 	bne.w	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034d2:	68ab      	ldr	r3, [r5, #8]
 80034d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d8:	60ab      	str	r3, [r5, #8]
 80034da:	e6d2      	b.n	8003282 <HAL_ADCEx_InjectedConfigChannel+0x19e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	07db      	lsls	r3, r3, #31
 80034e0:	d4c0      	bmi.n	8003464 <HAL_ADCEx_InjectedConfigChannel+0x380>
 80034e2:	e6c9      	b.n	8003278 <HAL_ADCEx_InjectedConfigChannel+0x194>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80034e4:	2534      	movs	r5, #52	; 0x34
 80034e6:	e72f      	b.n	8003348 <HAL_ADCEx_InjectedConfigChannel+0x264>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80034e8:	2e08      	cmp	r6, #8
 80034ea:	d00b      	beq.n	8003504 <HAL_ADCEx_InjectedConfigChannel+0x420>
 80034ec:	2e14      	cmp	r6, #20
 80034ee:	d00d      	beq.n	800350c <HAL_ADCEx_InjectedConfigChannel+0x428>
 80034f0:	2e1c      	cmp	r6, #28
 80034f2:	bf08      	it	eq
 80034f4:	2610      	moveq	r6, #16
 80034f6:	e61c      	b.n	8003132 <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80034f8:	1e66      	subs	r6, r4, #1
 80034fa:	6803      	ldr	r3, [r0, #0]
 80034fc:	4634      	mov	r4, r6
 80034fe:	e61b      	b.n	8003138 <HAL_ADCEx_InjectedConfigChannel+0x54>
 8003500:	491c      	ldr	r1, [pc, #112]	; (8003574 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8003502:	e789      	b.n	8003418 <HAL_ADCEx_InjectedConfigChannel+0x334>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003504:	2634      	movs	r6, #52	; 0x34
 8003506:	e614      	b.n	8003132 <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003508:	251c      	movs	r5, #28
 800350a:	e71d      	b.n	8003348 <HAL_ADCEx_InjectedConfigChannel+0x264>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800350c:	261c      	movs	r6, #28
 800350e:	e610      	b.n	8003132 <HAL_ADCEx_InjectedConfigChannel+0x4e>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003510:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003512:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003516:	ebb2 6f8c 	cmp.w	r2, ip, lsl #26
 800351a:	ea4f 648c 	mov.w	r4, ip, lsl #26
 800351e:	d014      	beq.n	800354a <HAL_ADCEx_InjectedConfigChannel+0x466>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003520:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003522:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003526:	4294      	cmp	r4, r2
 8003528:	d014      	beq.n	8003554 <HAL_ADCEx_InjectedConfigChannel+0x470>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800352a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800352c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003530:	4294      	cmp	r4, r2
 8003532:	d014      	beq.n	800355e <HAL_ADCEx_InjectedConfigChannel+0x47a>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003534:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003536:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800353a:	4294      	cmp	r4, r2
 800353c:	f47f ae67 	bne.w	800320e <HAL_ADCEx_InjectedConfigChannel+0x12a>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003540:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003546:	66da      	str	r2, [r3, #108]	; 0x6c
 8003548:	e661      	b.n	800320e <HAL_ADCEx_InjectedConfigChannel+0x12a>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800354a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800354c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003550:	661a      	str	r2, [r3, #96]	; 0x60
 8003552:	e7e5      	b.n	8003520 <HAL_ADCEx_InjectedConfigChannel+0x43c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003554:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003556:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800355a:	665a      	str	r2, [r3, #100]	; 0x64
 800355c:	e7e5      	b.n	800352a <HAL_ADCEx_InjectedConfigChannel+0x446>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800355e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003560:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003564:	669a      	str	r2, [r3, #104]	; 0x68
 8003566:	e7e5      	b.n	8003534 <HAL_ADCEx_InjectedConfigChannel+0x450>
 8003568:	50000100 	.word	0x50000100
 800356c:	20000680 	.word	0x20000680
 8003570:	431bde83 	.word	0x431bde83
 8003574:	50000500 	.word	0x50000500

08003578 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	4a43      	ldr	r2, [pc, #268]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003580:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003582:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003584:	d00e      	beq.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8003586:	4293      	cmp	r3, r2
 8003588:	d00a      	beq.n	80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 800358a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800358e:	4293      	cmp	r3, r2
 8003590:	d049      	beq.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003592:	4c3e      	ldr	r4, [pc, #248]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8003594:	42a3      	cmp	r3, r4
 8003596:	d005      	beq.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
} 
 800359a:	4618      	mov	r0, r3
 800359c:	bcf0      	pop	{r4, r5, r6, r7}
 800359e:	4770      	bx	lr
 80035a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 80035a4:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80035a8:	2c01      	cmp	r4, #1
 80035aa:	d041      	beq.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0xb8>
 80035ac:	2401      	movs	r4, #1
 80035ae:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80035b2:	689c      	ldr	r4, [r3, #8]
 80035b4:	0766      	lsls	r6, r4, #29
 80035b6:	d50a      	bpl.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035ba:	f043 0320 	orr.w	r3, r3, #32
 80035be:	6403      	str	r3, [r0, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 80035c2:	2200      	movs	r2, #0
 80035c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
} 
 80035c8:	bcf0      	pop	{r4, r5, r6, r7}
 80035ca:	4618      	mov	r0, r3
 80035cc:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80035ce:	6894      	ldr	r4, [r2, #8]
 80035d0:	0764      	lsls	r4, r4, #29
 80035d2:	d4f1      	bmi.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d8:	d044      	beq.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 80035da:	4f2b      	ldr	r7, [pc, #172]	; (8003688 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 80035dc:	4c2c      	ldr	r4, [pc, #176]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80035de:	4e2d      	ldr	r6, [pc, #180]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80035e0:	42bb      	cmp	r3, r7
 80035e2:	bf18      	it	ne
 80035e4:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035e6:	b33d      	cbz	r5, 8003638 <HAL_ADCEx_MultiModeConfigChannel+0xc0>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035e8:	68a7      	ldr	r7, [r4, #8]
 80035ea:	f890 c030 	ldrb.w	ip, [r0, #48]	; 0x30
 80035ee:	684e      	ldr	r6, [r1, #4]
 80035f0:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 80035f4:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 80035f8:	433e      	orrs	r6, r7
 80035fa:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035fc:	689e      	ldr	r6, [r3, #8]
 80035fe:	f006 0603 	and.w	r6, r6, #3
 8003602:	2e01      	cmp	r6, #1
 8003604:	d03c      	beq.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x108>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003606:	6893      	ldr	r3, [r2, #8]
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d02f      	beq.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003610:	68a2      	ldr	r2, [r4, #8]
 8003612:	688b      	ldr	r3, [r1, #8]
 8003614:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8003618:	431d      	orrs	r5, r3
 800361a:	f022 020f 	bic.w	r2, r2, #15
 800361e:	4315      	orrs	r5, r2
 8003620:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e7cd      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8003626:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800362a:	4a18      	ldr	r2, [pc, #96]	; (800368c <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 800362c:	2c01      	cmp	r4, #1
 800362e:	d1bd      	bne.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x34>
 8003630:	2302      	movs	r3, #2
} 
 8003632:	4618      	mov	r0, r3
 8003634:	bcf0      	pop	{r4, r5, r6, r7}
 8003636:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003638:	68a1      	ldr	r1, [r4, #8]
 800363a:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 800363e:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	f001 0103 	and.w	r1, r1, #3
 8003646:	2901      	cmp	r1, #1
 8003648:	d016      	beq.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x100>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800364a:	6893      	ldr	r3, [r2, #8]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d009      	beq.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003654:	68a3      	ldr	r3, [r4, #8]
 8003656:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800365a:	f023 030f 	bic.w	r3, r3, #15
 800365e:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003660:	2300      	movs	r3, #0
 8003662:	e7ae      	b.n	80035c2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003664:	4c0a      	ldr	r4, [pc, #40]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8003666:	e7be      	b.n	80035e6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003668:	6813      	ldr	r3, [r2, #0]
 800366a:	07db      	lsls	r3, r3, #31
 800366c:	d4d9      	bmi.n	8003622 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800366e:	e7f1      	b.n	8003654 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	07de      	lsls	r6, r3, #31
 8003674:	d4d5      	bmi.n	8003622 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003676:	e7cb      	b.n	8003610 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	07d9      	lsls	r1, r3, #31
 800367c:	d4d1      	bmi.n	8003622 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800367e:	e7e4      	b.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0xd2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	07df      	lsls	r7, r3, #31
 8003684:	d5bf      	bpl.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8003686:	e7cc      	b.n	8003622 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003688:	50000100 	.word	0x50000100
 800368c:	50000500 	.word	0x50000500
 8003690:	50000300 	.word	0x50000300
 8003694:	50000700 	.word	0x50000700

08003698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003698:	4908      	ldr	r1, [pc, #32]	; (80036bc <HAL_NVIC_SetPriorityGrouping+0x24>)
 800369a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800369c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800369e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a0:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80036a4:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a6:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80036b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80036b8:	60cb      	str	r3, [r1, #12]
 80036ba:	4770      	bx	lr
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_NVIC_SetPriority+0x68>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ca:	f1c3 0507 	rsb	r5, r3, #7
 80036ce:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	bf28      	it	cs
 80036d6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d8:	2c06      	cmp	r4, #6
 80036da:	d919      	bls.n	8003710 <HAL_NVIC_SetPriority+0x50>
 80036dc:	3b03      	subs	r3, #3
 80036de:	f04f 34ff 	mov.w	r4, #4294967295
 80036e2:	409c      	lsls	r4, r3
 80036e4:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 34ff 	mov.w	r4, #4294967295
 80036ec:	40ac      	lsls	r4, r5
 80036ee:	ea21 0104 	bic.w	r1, r1, r4
 80036f2:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80036f4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80036fa:	db0c      	blt.n	8003716 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003700:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003704:	0109      	lsls	r1, r1, #4
 8003706:	b2c9      	uxtb	r1, r1
 8003708:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800370c:	bc30      	pop	{r4, r5}
 800370e:	4770      	bx	lr
 8003710:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003712:	4613      	mov	r3, r2
 8003714:	e7e8      	b.n	80036e8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_NVIC_SetPriority+0x6c>)
 8003718:	f000 000f 	and.w	r0, r0, #15
 800371c:	0109      	lsls	r1, r1, #4
 800371e:	4403      	add	r3, r0
 8003720:	b2c9      	uxtb	r1, r1
 8003722:	7619      	strb	r1, [r3, #24]
 8003724:	bc30      	pop	{r4, r5}
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00
 800372c:	e000ecfc 	.word	0xe000ecfc

08003730 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003730:	2800      	cmp	r0, #0
 8003732:	db07      	blt.n	8003744 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003734:	f000 011f 	and.w	r1, r0, #31
 8003738:	4a03      	ldr	r2, [pc, #12]	; (8003748 <HAL_NVIC_EnableIRQ+0x18>)
 800373a:	0940      	lsrs	r0, r0, #5
 800373c:	2301      	movs	r3, #1
 800373e:	408b      	lsls	r3, r1
 8003740:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000e100 	.word	0xe000e100

0800374c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800374c:	3801      	subs	r0, #1
 800374e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003752:	d20e      	bcs.n	8003772 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003754:	4b08      	ldr	r3, [pc, #32]	; (8003778 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003758:	4c08      	ldr	r4, [pc, #32]	; (800377c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800375a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375c:	20f0      	movs	r0, #240	; 0xf0
 800375e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003762:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003764:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003766:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003768:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800376a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376e:	6019      	str	r1, [r3, #0]
 8003770:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003772:	2001      	movs	r0, #1
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop

08003784 <HAL_SYSTICK_IRQHandler>:
{
 8003784:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003786:	f7ff fffb 	bl	8003780 <HAL_SYSTICK_Callback>
}
 800378a:	bd08      	pop	{r3, pc}

0800378c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003790:	680e      	ldr	r6, [r1, #0]
{
 8003792:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003794:	2e00      	cmp	r6, #0
 8003796:	f000 8088 	beq.w	80038aa <HAL_GPIO_Init+0x11e>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800379a:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 800395c <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 800379e:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a0:	2201      	movs	r2, #1
 80037a2:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 80037a6:	ea14 0c06 	ands.w	ip, r4, r6
 80037aa:	d079      	beq.n	80038a0 <HAL_GPIO_Init+0x114>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ac:	684d      	ldr	r5, [r1, #4]
 80037ae:	f025 0a10 	bic.w	sl, r5, #16
 80037b2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80037b6:	2a01      	cmp	r2, #1
 80037b8:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037bc:	f04f 0203 	mov.w	r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037c0:	d976      	bls.n	80038b0 <HAL_GPIO_Init+0x124>
      temp = GPIOx->PUPDR;
 80037c2:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037c4:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037c6:	fa02 f208 	lsl.w	r2, r2, r8
 80037ca:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037ce:	fa04 f408 	lsl.w	r4, r4, r8
 80037d2:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 80037d4:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037d6:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 80037d8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037da:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037de:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037e0:	fa02 f208 	lsl.w	r2, r2, r8
 80037e4:	433a      	orrs	r2, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037e6:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 80037e8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ea:	d559      	bpl.n	80038a0 <HAL_GPIO_Init+0x114>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ec:	4c56      	ldr	r4, [pc, #344]	; (8003948 <HAL_GPIO_Init+0x1bc>)
 80037ee:	69a2      	ldr	r2, [r4, #24]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	61a2      	str	r2, [r4, #24]
 80037f6:	69a2      	ldr	r2, [r4, #24]
 80037f8:	f023 0403 	bic.w	r4, r3, #3
 80037fc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8003800:	f002 0201 	and.w	r2, r2, #1
 8003804:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8003808:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800380a:	f003 0203 	and.w	r2, r3, #3
 800380e:	ea4f 0a82 	mov.w	sl, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003812:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003814:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f80a 	lsl.w	r8, r2, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800381c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003820:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003824:	d015      	beq.n	8003852 <HAL_GPIO_Init+0xc6>
 8003826:	4a49      	ldr	r2, [pc, #292]	; (800394c <HAL_GPIO_Init+0x1c0>)
 8003828:	4290      	cmp	r0, r2
 800382a:	f000 8081 	beq.w	8003930 <HAL_GPIO_Init+0x1a4>
 800382e:	4a48      	ldr	r2, [pc, #288]	; (8003950 <HAL_GPIO_Init+0x1c4>)
 8003830:	4290      	cmp	r0, r2
 8003832:	f000 8082 	beq.w	800393a <HAL_GPIO_Init+0x1ae>
 8003836:	4a47      	ldr	r2, [pc, #284]	; (8003954 <HAL_GPIO_Init+0x1c8>)
 8003838:	4290      	cmp	r0, r2
 800383a:	d073      	beq.n	8003924 <HAL_GPIO_Init+0x198>
 800383c:	4a46      	ldr	r2, [pc, #280]	; (8003958 <HAL_GPIO_Init+0x1cc>)
 800383e:	4290      	cmp	r0, r2
 8003840:	bf13      	iteet	ne
 8003842:	2205      	movne	r2, #5
 8003844:	f04f 0804 	moveq.w	r8, #4
 8003848:	fa08 f20a 	lsleq.w	r2, r8, sl
 800384c:	fa02 f20a 	lslne.w	r2, r2, sl
 8003850:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003852:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR;
 8003854:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 8003858:	ea6f 070c 	mvn.w	r7, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800385c:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 800385e:	bf54      	ite	pl
 8003860:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003862:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003866:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR;
 800386a:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800386e:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 8003870:	bf54      	ite	pl
 8003872:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003874:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8003878:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800387c:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003880:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8003882:	bf54      	ite	pl
 8003884:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8003886:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800388a:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR;
 800388e:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003892:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8003894:	bf54      	ite	pl
 8003896:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 8003898:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR = temp;
 800389c:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 80038a0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a2:	fa36 f203 	lsrs.w	r2, r6, r3
 80038a6:	f47f af7b 	bne.w	80037a0 <HAL_GPIO_Init+0x14>
  }
}
 80038aa:	b003      	add	sp, #12
 80038ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80038b0:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038b2:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038b6:	fa02 f208 	lsl.w	r2, r2, r8
 80038ba:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038be:	68cf      	ldr	r7, [r1, #12]
 80038c0:	fa07 f708 	lsl.w	r7, r7, r8
 80038c4:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 80038c8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80038ca:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80038cc:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80038d4:	465c      	mov	r4, fp
 80038d6:	409c      	lsls	r4, r3
 80038d8:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 80038da:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80038dc:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038de:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038e2:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038e6:	ea49 0404 	orr.w	r4, r9, r4
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ea:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038ee:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 80038f2:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f4:	f47f af70 	bne.w	80037d8 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3u];
 80038f8:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80038fc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003900:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003904:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003908:	0092      	lsls	r2, r2, #2
 800390a:	f04f 0a0f 	mov.w	sl, #15
 800390e:	fa0a fb02 	lsl.w	fp, sl, r2
 8003912:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003916:	690c      	ldr	r4, [r1, #16]
 8003918:	4094      	lsls	r4, r2
 800391a:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3u] = temp;
 800391e:	f8c9 4020 	str.w	r4, [r9, #32]
 8003922:	e759      	b.n	80037d8 <HAL_GPIO_Init+0x4c>
 8003924:	f04f 0803 	mov.w	r8, #3
 8003928:	fa08 f20a 	lsl.w	r2, r8, sl
 800392c:	4317      	orrs	r7, r2
 800392e:	e790      	b.n	8003852 <HAL_GPIO_Init+0xc6>
 8003930:	2201      	movs	r2, #1
 8003932:	fa02 f20a 	lsl.w	r2, r2, sl
 8003936:	4317      	orrs	r7, r2
 8003938:	e78b      	b.n	8003852 <HAL_GPIO_Init+0xc6>
 800393a:	f04f 0902 	mov.w	r9, #2
 800393e:	fa09 f20a 	lsl.w	r2, r9, sl
 8003942:	4317      	orrs	r7, r2
 8003944:	e785      	b.n	8003852 <HAL_GPIO_Init+0xc6>
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	48000400 	.word	0x48000400
 8003950:	48000800 	.word	0x48000800
 8003954:	48000c00 	.word	0x48000c00
 8003958:	48001000 	.word	0x48001000
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003960:	b10a      	cbz	r2, 8003966 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003962:	6181      	str	r1, [r0, #24]
 8003964:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003966:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop

0800396c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800396c:	2800      	cmp	r0, #0
 800396e:	f000 8290 	beq.w	8003e92 <HAL_RCC_OscConfig+0x526>
{
 8003972:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003976:	6803      	ldr	r3, [r0, #0]
 8003978:	07d9      	lsls	r1, r3, #31
{
 800397a:	b083      	sub	sp, #12
 800397c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	d54f      	bpl.n	8003a20 <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003980:	49b6      	ldr	r1, [pc, #728]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 8003982:	684a      	ldr	r2, [r1, #4]
 8003984:	f002 020c 	and.w	r2, r2, #12
 8003988:	2a04      	cmp	r2, #4
 800398a:	f000 8171 	beq.w	8003c70 <HAL_RCC_OscConfig+0x304>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800398e:	684a      	ldr	r2, [r1, #4]
 8003990:	f002 020c 	and.w	r2, r2, #12
 8003994:	2a08      	cmp	r2, #8
 8003996:	f000 8167 	beq.w	8003c68 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399a:	6863      	ldr	r3, [r4, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d017      	beq.n	80039d2 <HAL_RCC_OscConfig+0x66>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 81a0 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x37c>
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	f000 825c 	beq.w	8003e68 <HAL_RCC_OscConfig+0x4fc>
 80039b0:	4baa      	ldr	r3, [pc, #680]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039c0:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039c2:	4aa6      	ldr	r2, [pc, #664]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 80039c4:	68a1      	ldr	r1, [r4, #8]
 80039c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	430b      	orrs	r3, r1
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d2:	4aa2      	ldr	r2, [pc, #648]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 80039d4:	6813      	ldr	r3, [r2, #0]
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039de:	68a1      	ldr	r1, [r4, #8]
 80039e0:	f023 030f 	bic.w	r3, r3, #15
 80039e4:	430b      	orrs	r3, r1
 80039e6:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7ff f9ea 	bl	8002dc0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ec:	4f9b      	ldr	r7, [pc, #620]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
        tickstart = HAL_GetTick();
 80039ee:	4605      	mov	r5, r0
 80039f0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f4:	2601      	movs	r6, #1
 80039f6:	e005      	b.n	8003a04 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f8:	f7ff f9e2 	bl	8002dc0 <HAL_GetTick>
 80039fc:	1b40      	subs	r0, r0, r5
 80039fe:	2864      	cmp	r0, #100	; 0x64
 8003a00:	f200 816e 	bhi.w	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003a04:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	fa98 f3a8 	rbit	r3, r8
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	fa06 f303 	lsl.w	r3, r6, r3
 8003a1a:	4213      	tst	r3, r2
 8003a1c:	d0ec      	beq.n	80039f8 <HAL_RCC_OscConfig+0x8c>
 8003a1e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a20:	079f      	lsls	r7, r3, #30
 8003a22:	d542      	bpl.n	8003aaa <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a24:	4a8d      	ldr	r2, [pc, #564]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 8003a26:	6851      	ldr	r1, [r2, #4]
 8003a28:	f011 0f0c 	tst.w	r1, #12
 8003a2c:	f000 80cb 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x25a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a30:	6851      	ldr	r1, [r2, #4]
 8003a32:	f001 010c 	and.w	r1, r1, #12
 8003a36:	2908      	cmp	r1, #8
 8003a38:	f000 80c1 	beq.w	8003bbe <HAL_RCC_OscConfig+0x252>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3c:	6922      	ldr	r2, [r4, #16]
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	f000 81b1 	beq.w	8003da6 <HAL_RCC_OscConfig+0x43a>
 8003a44:	2201      	movs	r2, #1
 8003a46:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a52:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a56:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	4617      	mov	r7, r2
        __HAL_RCC_HSI_ENABLE();
 8003a5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a5c:	f7ff f9b0 	bl	8002dc0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a60:	4e7e      	ldr	r6, [pc, #504]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
        tickstart = HAL_GetTick();
 8003a62:	4605      	mov	r5, r0
 8003a64:	f04f 0802 	mov.w	r8, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e005      	b.n	8003a76 <HAL_RCC_OscConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7ff f9a9 	bl	8002dc0 <HAL_GetTick>
 8003a6e:	1b40      	subs	r0, r0, r5
 8003a70:	2802      	cmp	r0, #2
 8003a72:	f200 8135 	bhi.w	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003a76:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7a:	6832      	ldr	r2, [r6, #0]
 8003a7c:	fa98 f3a8 	rbit	r3, r8
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa07 f303 	lsl.w	r3, r7, r3
 8003a8c:	4213      	tst	r3, r2
 8003a8e:	d0ec      	beq.n	8003a6a <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	6831      	ldr	r1, [r6, #0]
 8003a92:	22f8      	movs	r2, #248	; 0xf8
 8003a94:	fa92 f2a2 	rbit	r2, r2
 8003a98:	6963      	ldr	r3, [r4, #20]
 8003a9a:	fab2 f282 	clz	r2, r2
 8003a9e:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8003aa2:	4093      	lsls	r3, r2
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6033      	str	r3, [r6, #0]
 8003aa8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	071d      	lsls	r5, r3, #28
 8003aac:	d421      	bmi.n	8003af2 <HAL_RCC_OscConfig+0x186>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aae:	0758      	lsls	r0, r3, #29
 8003ab0:	d54d      	bpl.n	8003b4e <HAL_RCC_OscConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	00d1      	lsls	r1, r2, #3
 8003ab8:	f140 80c3 	bpl.w	8003c42 <HAL_RCC_OscConfig+0x2d6>
    FlagStatus       pwrclkchanged = RESET;
 8003abc:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	4d67      	ldr	r5, [pc, #412]	; (8003c60 <HAL_RCC_OscConfig+0x2f4>)
 8003ac2:	682b      	ldr	r3, [r5, #0]
 8003ac4:	05da      	lsls	r2, r3, #23
 8003ac6:	f140 80fb 	bpl.w	8003cc0 <HAL_RCC_OscConfig+0x354>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f000 8190 	beq.w	8003df2 <HAL_RCC_OscConfig+0x486>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8131 	beq.w	8003d3a <HAL_RCC_OscConfig+0x3ce>
 8003ad8:	2b05      	cmp	r3, #5
 8003ada:	4b60      	ldr	r3, [pc, #384]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	f000 81d0 	beq.w	8003e82 <HAL_RCC_OscConfig+0x516>
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	621a      	str	r2, [r3, #32]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	f022 0204 	bic.w	r2, r2, #4
 8003aee:	621a      	str	r2, [r3, #32]
 8003af0:	e184      	b.n	8003dfc <HAL_RCC_OscConfig+0x490>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003af2:	69a2      	ldr	r2, [r4, #24]
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	d07d      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x288>
 8003af8:	2201      	movs	r2, #1
 8003afa:	fa92 f1a2 	rbit	r1, r2
      __HAL_RCC_LSI_ENABLE();
 8003afe:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_OscConfig+0x2f8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b00:	4f56      	ldr	r7, [pc, #344]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
      __HAL_RCC_LSI_ENABLE();
 8003b02:	fab1 f181 	clz	r1, r1
 8003b06:	440b      	add	r3, r1
 8003b08:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4616      	mov	r6, r2
      __HAL_RCC_LSI_ENABLE();
 8003b0c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003b0e:	f7ff f957 	bl	8002dc0 <HAL_GetTick>
 8003b12:	f04f 0802 	mov.w	r8, #2
 8003b16:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b18:	e005      	b.n	8003b26 <HAL_RCC_OscConfig+0x1ba>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7ff f951 	bl	8002dc0 <HAL_GetTick>
 8003b1e:	1b40      	subs	r0, r0, r5
 8003b20:	2802      	cmp	r0, #2
 8003b22:	f200 80dd 	bhi.w	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003b26:	fa98 f3a8 	rbit	r3, r8
 8003b2a:	fa98 f3a8 	rbit	r3, r8
 8003b2e:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	fa98 f3a8 	rbit	r3, r8
 8003b38:	fab3 f383 	clz	r3, r3
 8003b3c:	f003 031f 	and.w	r3, r3, #31
 8003b40:	fa06 f303 	lsl.w	r3, r6, r3
 8003b44:	4213      	tst	r3, r2
 8003b46:	d0e8      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1ae>
 8003b48:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4a:	0758      	lsls	r0, r3, #29
 8003b4c:	d4b1      	bmi.n	8003ab2 <HAL_RCC_OscConfig+0x146>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4e:	69e0      	ldr	r0, [r4, #28]
 8003b50:	b388      	cbz	r0, 8003bb6 <HAL_RCC_OscConfig+0x24a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b52:	4d42      	ldr	r5, [pc, #264]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 8003b54:	686b      	ldr	r3, [r5, #4]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	f000 8173 	beq.w	8003e46 <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b60:	2802      	cmp	r0, #2
 8003b62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b66:	f000 8196 	beq.w	8003e96 <HAL_RCC_OscConfig+0x52a>
 8003b6a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7ff f91e 	bl	8002dc0 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b84:	462c      	mov	r4, r5
 8003b86:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        tickstart = HAL_GetTick();
 8003b8a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8c:	2601      	movs	r6, #1
 8003b8e:	e005      	b.n	8003b9c <HAL_RCC_OscConfig+0x230>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b90:	f7ff f916 	bl	8002dc0 <HAL_GetTick>
 8003b94:	1b40      	subs	r0, r0, r5
 8003b96:	2802      	cmp	r0, #2
 8003b98:	f200 80a2 	bhi.w	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003b9c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ba0:	6822      	ldr	r2, [r4, #0]
 8003ba2:	fa97 f3a7 	rbit	r3, r7
 8003ba6:	fab3 f383 	clz	r3, r3
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	fa06 f303 	lsl.w	r3, r6, r3
 8003bb2:	4213      	tst	r3, r2
 8003bb4:	d1ec      	bne.n	8003b90 <HAL_RCC_OscConfig+0x224>
        }
      }
    }
  }

  return HAL_OK;
 8003bb6:	2000      	movs	r0, #0
}
 8003bb8:	b003      	add	sp, #12
 8003bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bbe:	6852      	ldr	r2, [r2, #4]
 8003bc0:	03d6      	lsls	r6, r2, #15
 8003bc2:	f53f af3b 	bmi.w	8003a3c <HAL_RCC_OscConfig+0xd0>
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bcc:	4923      	ldr	r1, [pc, #140]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
 8003bce:	6808      	ldr	r0, [r1, #0]
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	fab2 f282 	clz	r2, r2
 8003bd8:	f002 021f 	and.w	r2, r2, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	4202      	tst	r2, r0
 8003be4:	d05b      	beq.n	8003c9e <HAL_RCC_OscConfig+0x332>
 8003be6:	6922      	ldr	r2, [r4, #16]
 8003be8:	428a      	cmp	r2, r1
 8003bea:	d058      	beq.n	8003c9e <HAL_RCC_OscConfig+0x332>
        return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
}
 8003bee:	b003      	add	sp, #12
 8003bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bf4:	2501      	movs	r5, #1
 8003bf6:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8003bfa:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_RCC_OscConfig+0x2f8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	4f17      	ldr	r7, [pc, #92]	; (8003c5c <HAL_RCC_OscConfig+0x2f0>)
      __HAL_RCC_LSI_DISABLE();
 8003bfe:	fab1 f181 	clz	r1, r1
 8003c02:	440b      	add	r3, r1
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	f04f 0802 	mov.w	r8, #2
 8003c0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003c0c:	f7ff f8d8 	bl	8002dc0 <HAL_GetTick>
 8003c10:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c12:	e004      	b.n	8003c1e <HAL_RCC_OscConfig+0x2b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c14:	f7ff f8d4 	bl	8002dc0 <HAL_GetTick>
 8003c18:	1b80      	subs	r0, r0, r6
 8003c1a:	2802      	cmp	r0, #2
 8003c1c:	d860      	bhi.n	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003c1e:	fa98 f3a8 	rbit	r3, r8
 8003c22:	fa98 f3a8 	rbit	r3, r8
 8003c26:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	fa98 f3a8 	rbit	r3, r8
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa05 f303 	lsl.w	r3, r5, r3
 8003c3c:	4213      	tst	r3, r2
 8003c3e:	d1e9      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2a8>
 8003c40:	e782      	b.n	8003b48 <HAL_RCC_OscConfig+0x1dc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c48:	61da      	str	r2, [r3, #28]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c54:	f04f 0801 	mov.w	r8, #1
 8003c58:	e732      	b.n	8003ac0 <HAL_RCC_OscConfig+0x154>
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
 8003c64:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c68:	684a      	ldr	r2, [r1, #4]
 8003c6a:	03d2      	lsls	r2, r2, #15
 8003c6c:	f57f ae95 	bpl.w	800399a <HAL_RCC_OscConfig+0x2e>
 8003c70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c74:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	49b1      	ldr	r1, [pc, #708]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
 8003c7a:	6808      	ldr	r0, [r1, #0]
 8003c7c:	fa92 f2a2 	rbit	r2, r2
 8003c80:	fab2 f282 	clz	r2, r2
 8003c84:	f002 021f 	and.w	r2, r2, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8e:	4202      	tst	r2, r0
 8003c90:	f43f aec6 	beq.w	8003a20 <HAL_RCC_OscConfig+0xb4>
 8003c94:	6862      	ldr	r2, [r4, #4]
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	f47f aec2 	bne.w	8003a20 <HAL_RCC_OscConfig+0xb4>
 8003c9c:	e7a6      	b.n	8003bec <HAL_RCC_OscConfig+0x280>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c9e:	4da8      	ldr	r5, [pc, #672]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
 8003ca0:	21f8      	movs	r1, #248	; 0xf8
 8003ca2:	6828      	ldr	r0, [r5, #0]
 8003ca4:	fa91 f1a1 	rbit	r1, r1
 8003ca8:	6962      	ldr	r2, [r4, #20]
 8003caa:	fab1 f181 	clz	r1, r1
 8003cae:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003cb2:	408a      	lsls	r2, r1
 8003cb4:	4302      	orrs	r2, r0
 8003cb6:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb8:	071d      	lsls	r5, r3, #28
 8003cba:	f57f aef8 	bpl.w	8003aae <HAL_RCC_OscConfig+0x142>
 8003cbe:	e718      	b.n	8003af2 <HAL_RCC_OscConfig+0x186>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003cc8:	f7ff f87a 	bl	8002dc0 <HAL_GetTick>
 8003ccc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	05db      	lsls	r3, r3, #23
 8003cd2:	f53f aefa 	bmi.w	8003aca <HAL_RCC_OscConfig+0x15e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd6:	f7ff f873 	bl	8002dc0 <HAL_GetTick>
 8003cda:	1b80      	subs	r0, r0, r6
 8003cdc:	2864      	cmp	r0, #100	; 0x64
 8003cde:	d9f6      	bls.n	8003cce <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 8003ce0:	2003      	movs	r0, #3
}
 8003ce2:	b003      	add	sp, #12
 8003ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce8:	4d95      	ldr	r5, [pc, #596]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
 8003cea:	682b      	ldr	r3, [r5, #0]
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf0:	602b      	str	r3, [r5, #0]
 8003cf2:	682b      	ldr	r3, [r5, #0]
 8003cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf8:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003cfc:	68a2      	ldr	r2, [r4, #8]
 8003cfe:	f023 030f 	bic.w	r3, r3, #15
 8003d02:	4313      	orrs	r3, r2
 8003d04:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8003d06:	f7ff f85b 	bl	8002dc0 <HAL_GetTick>
 8003d0a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8003d0e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d10:	2701      	movs	r7, #1
 8003d12:	e004      	b.n	8003d1e <HAL_RCC_OscConfig+0x3b2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d14:	f7ff f854 	bl	8002dc0 <HAL_GetTick>
 8003d18:	1b80      	subs	r0, r0, r6
 8003d1a:	2864      	cmp	r0, #100	; 0x64
 8003d1c:	d8e0      	bhi.n	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003d1e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d22:	682a      	ldr	r2, [r5, #0]
 8003d24:	fa98 f3a8 	rbit	r3, r8
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	fa07 f303 	lsl.w	r3, r7, r3
 8003d34:	4213      	tst	r3, r2
 8003d36:	d1ed      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3a8>
 8003d38:	e671      	b.n	8003a1e <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3a:	4d81      	ldr	r5, [pc, #516]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
 8003d3c:	6a2b      	ldr	r3, [r5, #32]
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	622b      	str	r3, [r5, #32]
 8003d44:	6a2b      	ldr	r3, [r5, #32]
 8003d46:	f023 0304 	bic.w	r3, r3, #4
 8003d4a:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003d4c:	f7ff f838 	bl	8002dc0 <HAL_GetTick>
 8003d50:	f04f 0902 	mov.w	r9, #2
 8003d54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d56:	2701      	movs	r7, #1
 8003d58:	e013      	b.n	8003d82 <HAL_RCC_OscConfig+0x416>
 8003d5a:	fa99 f3a9 	rbit	r3, r9
 8003d5e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003d60:	fa99 f3a9 	rbit	r3, r9
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	fa07 f303 	lsl.w	r3, r7, r3
 8003d70:	4213      	tst	r3, r2
 8003d72:	d00e      	beq.n	8003d92 <HAL_RCC_OscConfig+0x426>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d74:	f7ff f824 	bl	8002dc0 <HAL_GetTick>
 8003d78:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d7c:	1b80      	subs	r0, r0, r6
 8003d7e:	4298      	cmp	r0, r3
 8003d80:	d8ae      	bhi.n	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003d82:	fa99 f3a9 	rbit	r3, r9
 8003d86:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0e5      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3ee>
 8003d8e:	6a2a      	ldr	r2, [r5, #32]
 8003d90:	e7e6      	b.n	8003d60 <HAL_RCC_OscConfig+0x3f4>
    if(pwrclkchanged == SET)
 8003d92:	f1b8 0f00 	cmp.w	r8, #0
 8003d96:	f43f aeda 	beq.w	8003b4e <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d9a:	4a69      	ldr	r2, [pc, #420]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
 8003d9c:	69d3      	ldr	r3, [r2, #28]
 8003d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da2:	61d3      	str	r3, [r2, #28]
 8003da4:	e6d3      	b.n	8003b4e <HAL_RCC_OscConfig+0x1e2>
 8003da6:	2501      	movs	r5, #1
 8003da8:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003db4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003db8:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	4f61      	ldr	r7, [pc, #388]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
        __HAL_RCC_HSI_DISABLE();
 8003dbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003dbe:	f7fe ffff 	bl	8002dc0 <HAL_GetTick>
 8003dc2:	f04f 0802 	mov.w	r8, #2
 8003dc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc8:	e004      	b.n	8003dd4 <HAL_RCC_OscConfig+0x468>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fe fff9 	bl	8002dc0 <HAL_GetTick>
 8003dce:	1b80      	subs	r0, r0, r6
 8003dd0:	2802      	cmp	r0, #2
 8003dd2:	d885      	bhi.n	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003dd4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	fa98 f3a8 	rbit	r3, r8
 8003dde:	fab3 f383 	clz	r3, r3
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	fa05 f303 	lsl.w	r3, r5, r3
 8003dea:	4213      	tst	r3, r2
 8003dec:	d1ed      	bne.n	8003dca <HAL_RCC_OscConfig+0x45e>
 8003dee:	6823      	ldr	r3, [r4, #0]
 8003df0:	e65b      	b.n	8003aaa <HAL_RCC_OscConfig+0x13e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df2:	4a53      	ldr	r2, [pc, #332]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
 8003df4:	6a13      	ldr	r3, [r2, #32]
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003dfc:	f7fe ffe0 	bl	8002dc0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	4f4f      	ldr	r7, [pc, #316]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
      tickstart = HAL_GetTick();
 8003e02:	4605      	mov	r5, r0
 8003e04:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e08:	2601      	movs	r6, #1
 8003e0a:	e014      	b.n	8003e36 <HAL_RCC_OscConfig+0x4ca>
 8003e0c:	fa99 f3a9 	rbit	r3, r9
 8003e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e12:	fa99 f3a9 	rbit	r3, r9
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	f003 031f 	and.w	r3, r3, #31
 8003e1e:	fa06 f303 	lsl.w	r3, r6, r3
 8003e22:	4213      	tst	r3, r2
 8003e24:	d1b5      	bne.n	8003d92 <HAL_RCC_OscConfig+0x426>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fe ffcb 	bl	8002dc0 <HAL_GetTick>
 8003e2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e2e:	1b40      	subs	r0, r0, r5
 8003e30:	4298      	cmp	r0, r3
 8003e32:	f63f af55 	bhi.w	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003e36:	fa99 f3a9 	rbit	r3, r9
 8003e3a:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0e4      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4a0>
 8003e42:	6a3a      	ldr	r2, [r7, #32]
 8003e44:	e7e5      	b.n	8003e12 <HAL_RCC_OscConfig+0x4a6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e46:	2801      	cmp	r0, #1
 8003e48:	f43f aeb6 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x24c>
        pll_config = RCC->CFGR;
 8003e4c:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e4e:	6a22      	ldr	r2, [r4, #32]
 8003e50:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003e54:	4291      	cmp	r1, r2
 8003e56:	f47f aec9 	bne.w	8003bec <HAL_RCC_OscConfig+0x280>
 8003e5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003e60:	1a18      	subs	r0, r3, r0
 8003e62:	bf18      	it	ne
 8003e64:	2001      	movne	r0, #1
 8003e66:	e6a7      	b.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e59f      	b.n	80039c2 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e82:	f042 0204 	orr.w	r2, r2, #4
 8003e86:	621a      	str	r2, [r3, #32]
 8003e88:	6a1a      	ldr	r2, [r3, #32]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	621a      	str	r2, [r3, #32]
 8003e90:	e7b4      	b.n	8003dfc <HAL_RCC_OscConfig+0x490>
    return HAL_ERROR;
 8003e92:	2001      	movs	r0, #1
}
 8003e94:	4770      	bx	lr
 8003e96:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ea2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003eac:	f7fe ff88 	bl	8002dc0 <HAL_GetTick>
 8003eb0:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003eb4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb6:	2701      	movs	r7, #1
 8003eb8:	e005      	b.n	8003ec6 <HAL_RCC_OscConfig+0x55a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fe ff81 	bl	8002dc0 <HAL_GetTick>
 8003ebe:	1b80      	subs	r0, r0, r6
 8003ec0:	2802      	cmp	r0, #2
 8003ec2:	f63f af0d 	bhi.w	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003ec6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eca:	682a      	ldr	r2, [r5, #0]
 8003ecc:	fa98 f3a8 	rbit	r3, r8
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	f003 031f 	and.w	r3, r3, #31
 8003ed8:	fa07 f303 	lsl.w	r3, r7, r3
 8003edc:	4213      	tst	r3, r2
 8003ede:	d1ec      	bne.n	8003eba <HAL_RCC_OscConfig+0x54e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ee0:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8003ee4:	686a      	ldr	r2, [r5, #4]
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003eec:	4313      	orrs	r3, r2
 8003eee:	606b      	str	r3, [r5, #4]
 8003ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	fab3 f383 	clz	r3, r3
 8003efc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f04:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f06:	4e0e      	ldr	r6, [pc, #56]	; (8003f40 <HAL_RCC_OscConfig+0x5d4>)
        __HAL_RCC_PLL_ENABLE();
 8003f08:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8003f0a:	f7fe ff59 	bl	8002dc0 <HAL_GetTick>
 8003f0e:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003f12:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f14:	2501      	movs	r5, #1
 8003f16:	e005      	b.n	8003f24 <HAL_RCC_OscConfig+0x5b8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f18:	f7fe ff52 	bl	8002dc0 <HAL_GetTick>
 8003f1c:	1b00      	subs	r0, r0, r4
 8003f1e:	2802      	cmp	r0, #2
 8003f20:	f63f aede 	bhi.w	8003ce0 <HAL_RCC_OscConfig+0x374>
 8003f24:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f28:	6832      	ldr	r2, [r6, #0]
 8003f2a:	fa98 f3a8 	rbit	r3, r8
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	fa05 f303 	lsl.w	r3, r5, r3
 8003f3a:	4213      	tst	r3, r2
 8003f3c:	d0ec      	beq.n	8003f18 <HAL_RCC_OscConfig+0x5ac>
 8003f3e:	e63a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x24a>
 8003f40:	40021000 	.word	0x40021000

08003f44 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f44:	2800      	cmp	r0, #0
 8003f46:	f000 80c8 	beq.w	80040da <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f4a:	4a6f      	ldr	r2, [pc, #444]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	428b      	cmp	r3, r1
{
 8003f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f58:	460d      	mov	r5, r1
 8003f5a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f5c:	d20c      	bcs.n	8003f78 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	f023 0307 	bic.w	r3, r3, #7
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	428b      	cmp	r3, r1
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003f72:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	079f      	lsls	r7, r3, #30
 8003f7c:	d506      	bpl.n	8003f8c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7e:	4963      	ldr	r1, [pc, #396]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	68a0      	ldr	r0, [r4, #8]
 8003f82:	684a      	ldr	r2, [r1, #4]
 8003f84:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f88:	4302      	orrs	r2, r0
 8003f8a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8c:	07de      	lsls	r6, r3, #31
 8003f8e:	d52f      	bpl.n	8003ff0 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f90:	6861      	ldr	r1, [r4, #4]
 8003f92:	2901      	cmp	r1, #1
 8003f94:	f000 80a3 	beq.w	80040de <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f98:	2902      	cmp	r1, #2
 8003f9a:	f000 808b 	beq.w	80040b4 <HAL_RCC_ClockConfig+0x170>
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	fa92 f2a2 	rbit	r2, r2
 8003fac:	fab2 f282 	clz	r2, r2
 8003fb0:	f002 021f 	and.w	r2, r2, #31
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	fa03 f202 	lsl.w	r2, r3, r2
 8003fba:	4202      	tst	r2, r0
 8003fbc:	d0d9      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fbe:	4e53      	ldr	r6, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	6873      	ldr	r3, [r6, #4]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003fca:	f7fe fef9 	bl	8002dc0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003fd2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd4:	e005      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fd6:	f7fe fef3 	bl	8002dc0 <HAL_GetTick>
 8003fda:	1bc0      	subs	r0, r0, r7
 8003fdc:	4540      	cmp	r0, r8
 8003fde:	f200 8090 	bhi.w	8004102 <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	6873      	ldr	r3, [r6, #4]
 8003fe4:	6862      	ldr	r2, [r4, #4]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
 8003fea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003fee:	d1f2      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4a45      	ldr	r2, [pc, #276]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	6813      	ldr	r3, [r2, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	42ab      	cmp	r3, r5
 8003ffa:	d909      	bls.n	8004010 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffc:	6813      	ldr	r3, [r2, #0]
 8003ffe:	f023 0307 	bic.w	r3, r3, #7
 8004002:	432b      	orrs	r3, r5
 8004004:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	42ab      	cmp	r3, r5
 800400e:	d1b0      	bne.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	0758      	lsls	r0, r3, #29
 8004014:	d506      	bpl.n	8004024 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004016:	493d      	ldr	r1, [pc, #244]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	68e0      	ldr	r0, [r4, #12]
 800401a:	684a      	ldr	r2, [r1, #4]
 800401c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004020:	4302      	orrs	r2, r0
 8004022:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004024:	0719      	lsls	r1, r3, #28
 8004026:	d507      	bpl.n	8004038 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004028:	4a38      	ldr	r2, [pc, #224]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 800402a:	6921      	ldr	r1, [r4, #16]
 800402c:	6853      	ldr	r3, [r2, #4]
 800402e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004032:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004036:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004038:	4934      	ldr	r1, [pc, #208]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 800403a:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800403c:	f002 030c 	and.w	r3, r2, #12
 8004040:	2b08      	cmp	r3, #8
 8004042:	d017      	beq.n	8004074 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004044:	4932      	ldr	r1, [pc, #200]	; (8004110 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004046:	4b31      	ldr	r3, [pc, #196]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004048:	22f0      	movs	r2, #240	; 0xf0
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	fa92 f2a2 	rbit	r2, r2
 8004050:	fab2 f282 	clz	r2, r2
 8004054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004058:	40d3      	lsrs	r3, r2
 800405a:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 800405c:	482e      	ldr	r0, [pc, #184]	; (8004118 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	4a2e      	ldr	r2, [pc, #184]	; (800411c <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 8004062:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004064:	fa21 f303 	lsr.w	r3, r1, r3
 8004068:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800406a:	f7fe fe67 	bl	8002d3c <HAL_InitTick>
  return HAL_OK;
 800406e:	2000      	movs	r0, #0
}
 8004070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004074:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004078:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800407c:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8004080:	fab3 f383 	clz	r3, r3
 8004084:	fa20 f303 	lsr.w	r3, r0, r3
 8004088:	4825      	ldr	r0, [pc, #148]	; (8004120 <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800408a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800408c:	5cc3      	ldrb	r3, [r0, r3]
 800408e:	200f      	movs	r0, #15
 8004090:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004094:	fab0 f080 	clz	r0, r0
 8004098:	f001 010f 	and.w	r1, r1, #15
 800409c:	40c1      	lsrs	r1, r0
 800409e:	4821      	ldr	r0, [pc, #132]	; (8004124 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040a0:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040a2:	5c40      	ldrb	r0, [r0, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040a4:	bf4a      	itet	mi
 80040a6:	491a      	ldrmi	r1, [pc, #104]	; (8004110 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040a8:	491f      	ldrpl	r1, [pc, #124]	; (8004128 <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040aa:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040ae:	fb01 f103 	mul.w	r1, r1, r3
 80040b2:	e7c8      	b.n	8004046 <HAL_RCC_ClockConfig+0x102>
 80040b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040b8:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040bc:	4a13      	ldr	r2, [pc, #76]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	6810      	ldr	r0, [r2, #0]
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2201      	movs	r2, #1
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	4203      	tst	r3, r0
 80040d4:	f47f af73 	bne.w	8003fbe <HAL_RCC_ClockConfig+0x7a>
 80040d8:	e74b      	b.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80040da:	2001      	movs	r0, #1
}
 80040dc:	4770      	bx	lr
 80040de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040e2:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b09      	ldr	r3, [pc, #36]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	fa92 f2a2 	rbit	r2, r2
 80040ee:	fab2 f282 	clz	r2, r2
 80040f2:	f002 021f 	and.w	r2, r2, #31
 80040f6:	fa01 f202 	lsl.w	r2, r1, r2
 80040fa:	421a      	tst	r2, r3
 80040fc:	f47f af5f 	bne.w	8003fbe <HAL_RCC_ClockConfig+0x7a>
 8004100:	e737      	b.n	8003f72 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004102:	2003      	movs	r0, #3
 8004104:	e736      	b.n	8003f74 <HAL_RCC_ClockConfig+0x30>
 8004106:	bf00      	nop
 8004108:	40022000 	.word	0x40022000
 800410c:	40021000 	.word	0x40021000
 8004110:	007a1200 	.word	0x007a1200
 8004114:	08007d18 	.word	0x08007d18
 8004118:	20000688 	.word	0x20000688
 800411c:	20000680 	.word	0x20000680
 8004120:	08007d30 	.word	0x08007d30
 8004124:	08007d40 	.word	0x08007d40
 8004128:	003d0900 	.word	0x003d0900

0800412c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800412c:	4915      	ldr	r1, [pc, #84]	; (8004184 <HAL_RCC_GetSysClockFreq+0x58>)
 800412e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004130:	f003 020c 	and.w	r2, r3, #12
 8004134:	2a08      	cmp	r2, #8
 8004136:	d001      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004138:	4813      	ldr	r0, [pc, #76]	; (8004188 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800413a:	4770      	bx	lr
{
 800413c:	b410      	push	{r4}
 800413e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004142:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004146:	fab2 f282 	clz	r2, r2
 800414a:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 800414e:	4c0f      	ldr	r4, [pc, #60]	; (800418c <HAL_RCC_GetSysClockFreq+0x60>)
 8004150:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004152:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004154:	5c20      	ldrb	r0, [r4, r0]
 8004156:	210f      	movs	r1, #15
 8004158:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800415c:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800415e:	fab1 f181 	clz	r1, r1
 8004162:	f002 020f 	and.w	r2, r2, #15
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004166:	bf4c      	ite	mi
 8004168:	4b07      	ldrmi	r3, [pc, #28]	; (8004188 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800416a:	4b09      	ldrpl	r3, [pc, #36]	; (8004190 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800416c:	f85d 4b04 	ldr.w	r4, [sp], #4
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004170:	fa22 f201 	lsr.w	r2, r2, r1
 8004174:	4907      	ldr	r1, [pc, #28]	; (8004194 <HAL_RCC_GetSysClockFreq+0x68>)
 8004176:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004178:	bf48      	it	mi
 800417a:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800417e:	fb03 f000 	mul.w	r0, r3, r0
}
 8004182:	4770      	bx	lr
 8004184:	40021000 	.word	0x40021000
 8004188:	007a1200 	.word	0x007a1200
 800418c:	08007d30 	.word	0x08007d30
 8004190:	003d0900 	.word	0x003d0900
 8004194:	08007d40 	.word	0x08007d40

08004198 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004198:	4b01      	ldr	r3, [pc, #4]	; (80041a0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	20000680 	.word	0x20000680

080041a4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041a4:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	fa92 f2a2 	rbit	r2, r2
 80041b0:	fab2 f282 	clz	r2, r2
 80041b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b8:	4904      	ldr	r1, [pc, #16]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ba:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	6810      	ldr	r0, [r2, #0]
}    
 80041c2:	40d8      	lsrs	r0, r3
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	08007d28 	.word	0x08007d28
 80041d0:	20000680 	.word	0x20000680

080041d4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	fa92 f2a2 	rbit	r2, r2
 80041e0:	fab2 f282 	clz	r2, r2
 80041e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80041e8:	4904      	ldr	r1, [pc, #16]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80041ea:	40d3      	lsrs	r3, r2
  return SystemCoreClock;
 80041ec:	4a04      	ldr	r2, [pc, #16]	; (8004200 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	6810      	ldr	r0, [r2, #0]
} 
 80041f2:	40d8      	lsrs	r0, r3
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	08007d28 	.word	0x08007d28
 8004200:	20000680 	.word	0x20000680

08004204 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004208:	6803      	ldr	r3, [r0, #0]
 800420a:	03dd      	lsls	r5, r3, #15
{
 800420c:	b083      	sub	sp, #12
 800420e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004210:	d53d      	bpl.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x8a>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b82      	ldr	r3, [pc, #520]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	00d0      	lsls	r0, r2, #3
 8004218:	f140 80b7 	bpl.w	800438a <HAL_RCCEx_PeriphCLKConfig+0x186>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4d80      	ldr	r5, [pc, #512]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800421e:	682b      	ldr	r3, [r5, #0]
 8004220:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8004222:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	f140 80c0 	bpl.w	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422a:	4d7c      	ldr	r5, [pc, #496]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800422c:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800422e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004232:	d01f      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004234:	6861      	ldr	r1, [r4, #4]
 8004236:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800423a:	429a      	cmp	r2, r3
 800423c:	d01b      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800423e:	6a29      	ldr	r1, [r5, #32]
 8004240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004244:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8004248:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800424c:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 8004424 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004250:	fab2 f282 	clz	r2, r2
 8004254:	4462      	add	r2, ip
 8004256:	0092      	lsls	r2, r2, #2
 8004258:	2701      	movs	r7, #1
 800425a:	6017      	str	r7, [r2, #0]
 800425c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004260:	fab3 f383 	clz	r3, r3
 8004264:	4463      	add	r3, ip
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800426c:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 800426e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004270:	f100 80af 	bmi.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004274:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004276:	4a69      	ldr	r2, [pc, #420]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004278:	6a13      	ldr	r3, [r2, #32]
 800427a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427e:	430b      	orrs	r3, r1
 8004280:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004282:	b11e      	cbz	r6, 800428c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004284:	69d3      	ldr	r3, [r2, #28]
 8004286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800428a:	61d3      	str	r3, [r2, #28]
 800428c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800428e:	07df      	lsls	r7, r3, #31
 8004290:	d506      	bpl.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004292:	4962      	ldr	r1, [pc, #392]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004294:	68a0      	ldr	r0, [r4, #8]
 8004296:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004298:	f022 0203 	bic.w	r2, r2, #3
 800429c:	4302      	orrs	r2, r0
 800429e:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042a0:	079e      	lsls	r6, r3, #30
 80042a2:	d506      	bpl.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042a4:	495d      	ldr	r1, [pc, #372]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80042a6:	68e0      	ldr	r0, [r4, #12]
 80042a8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042aa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80042ae:	4302      	orrs	r2, r0
 80042b0:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042b2:	075d      	lsls	r5, r3, #29
 80042b4:	d506      	bpl.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042b6:	4959      	ldr	r1, [pc, #356]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80042b8:	6920      	ldr	r0, [r4, #16]
 80042ba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042bc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80042c0:	4302      	orrs	r2, r0
 80042c2:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042c4:	0698      	lsls	r0, r3, #26
 80042c6:	d506      	bpl.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c8:	4954      	ldr	r1, [pc, #336]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80042ca:	69e0      	ldr	r0, [r4, #28]
 80042cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042ce:	f022 0210 	bic.w	r2, r2, #16
 80042d2:	4302      	orrs	r2, r0
 80042d4:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042d6:	0399      	lsls	r1, r3, #14
 80042d8:	d506      	bpl.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042da:	4950      	ldr	r1, [pc, #320]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80042dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80042de:	684a      	ldr	r2, [r1, #4]
 80042e0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80042e4:	4302      	orrs	r2, r0
 80042e6:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042e8:	065a      	lsls	r2, r3, #25
 80042ea:	d506      	bpl.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ec:	494b      	ldr	r1, [pc, #300]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80042ee:	6a20      	ldr	r0, [r4, #32]
 80042f0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042f2:	f022 0220 	bic.w	r2, r2, #32
 80042f6:	4302      	orrs	r2, r0
 80042f8:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042fa:	071f      	lsls	r7, r3, #28
 80042fc:	d506      	bpl.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042fe:	4947      	ldr	r1, [pc, #284]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004300:	6960      	ldr	r0, [r4, #20]
 8004302:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004304:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004308:	4302      	orrs	r2, r0
 800430a:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800430c:	06de      	lsls	r6, r3, #27
 800430e:	d506      	bpl.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004310:	4942      	ldr	r1, [pc, #264]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004312:	69a0      	ldr	r0, [r4, #24]
 8004314:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004316:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800431a:	4302      	orrs	r2, r0
 800431c:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800431e:	059d      	lsls	r5, r3, #22
 8004320:	d506      	bpl.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004322:	493e      	ldr	r1, [pc, #248]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004324:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004326:	684a      	ldr	r2, [r1, #4]
 8004328:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800432c:	4302      	orrs	r2, r0
 800432e:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004330:	0618      	lsls	r0, r3, #24
 8004332:	d506      	bpl.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004334:	4939      	ldr	r1, [pc, #228]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004336:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004338:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800433a:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800433e:	4302      	orrs	r2, r0
 8004340:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004342:	05d9      	lsls	r1, r3, #23
 8004344:	d506      	bpl.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004346:	4935      	ldr	r1, [pc, #212]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004348:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800434a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800434c:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8004350:	4302      	orrs	r2, r0
 8004352:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004354:	04da      	lsls	r2, r3, #19
 8004356:	d506      	bpl.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004358:	4930      	ldr	r1, [pc, #192]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800435a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800435c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800435e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004362:	4302      	orrs	r2, r0
 8004364:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004366:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800436a:	d103      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800436c:	4618      	mov	r0, r3
}
 800436e:	b003      	add	sp, #12
 8004370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004374:	4a29      	ldr	r2, [pc, #164]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004376:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004378:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800437a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800437e:	430b      	orrs	r3, r1
  return HAL_OK;
 8004380:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004384:	b003      	add	sp, #12
 8004386:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800438a:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438c:	4d24      	ldr	r5, [pc, #144]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004392:	61da      	str	r2, [r3, #28]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 80043a2:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a6:	f53f af40 	bmi.w	800422a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043aa:	682b      	ldr	r3, [r5, #0]
 80043ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80043b2:	f7fe fd05 	bl	8002dc0 <HAL_GetTick>
 80043b6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	05da      	lsls	r2, r3, #23
 80043bc:	f53f af35 	bmi.w	800422a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c0:	f7fe fcfe 	bl	8002dc0 <HAL_GetTick>
 80043c4:	1bc0      	subs	r0, r0, r7
 80043c6:	2864      	cmp	r0, #100	; 0x64
 80043c8:	d9f6      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
          return HAL_TIMEOUT;
 80043ca:	2003      	movs	r0, #3
}
 80043cc:	b003      	add	sp, #12
 80043ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80043d2:	f7fe fcf5 	bl	8002dc0 <HAL_GetTick>
 80043d6:	f04f 0902 	mov.w	r9, #2
 80043da:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043dc:	e015      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80043de:	fa99 f3a9 	rbit	r3, r9
 80043e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80043e4:	fa99 f3a9 	rbit	r3, r9
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	fa07 f303 	lsl.w	r3, r7, r3
 80043f4:	4213      	tst	r3, r2
 80043f6:	f47f af3d 	bne.w	8004274 <HAL_RCCEx_PeriphCLKConfig+0x70>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fa:	f7fe fce1 	bl	8002dc0 <HAL_GetTick>
 80043fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004402:	eba0 0008 	sub.w	r0, r0, r8
 8004406:	4298      	cmp	r0, r3
 8004408:	d8df      	bhi.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800440a:	fa99 f3a9 	rbit	r3, r9
 800440e:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0e3      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1da>
 8004416:	6a2a      	ldr	r2, [r5, #32]
 8004418:	e7e4      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800441a:	bf00      	nop
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
 8004424:	10908100 	.word	0x10908100

08004428 <SPI_WaitFifoStateUntilTimeout.constprop.1>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442a:	b083      	sub	sp, #12
 800442c:	460c      	mov	r4, r1
 800442e:	4617      	mov	r7, r2
 8004430:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004432:	f7fe fcc5 	bl	8002dc0 <HAL_GetTick>
 8004436:	4427      	add	r7, r4
 8004438:	1a3e      	subs	r6, r7, r0
  tmp_tickstart = HAL_GetTick();
 800443a:	f7fe fcc1 	bl	8002dc0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xc8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004446:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800444a:	0d1b      	lsrs	r3, r3, #20
 800444c:	fb06 f303 	mul.w	r3, r6, r3
  tmp_tickstart = HAL_GetTick();
 8004450:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004452:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8004454:	1c63      	adds	r3, r4, #1
 8004456:	682a      	ldr	r2, [r5, #0]
 8004458:	d10a      	bne.n	8004470 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x48>
 800445a:	6890      	ldr	r0, [r2, #8]
 800445c:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8004460:	d004      	beq.n	800446c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x44>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004462:	7b13      	ldrb	r3, [r2, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8004464:	6890      	ldr	r0, [r2, #8]
 8004466:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 800446a:	d1fa      	bne.n	8004462 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x3a>
      count--;
    }
  }

  return HAL_OK;
}
 800446c:	b003      	add	sp, #12
 800446e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8004470:	6893      	ldr	r3, [r2, #8]
 8004472:	f413 63c0 	ands.w	r3, r3, #1536	; 0x600
 8004476:	d023      	beq.n	80044c0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x98>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004478:	7b13      	ldrb	r3, [r2, #12]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800447a:	f7fe fca1 	bl	8002dc0 <HAL_GetTick>
 800447e:	1bc0      	subs	r0, r0, r7
 8004480:	42b0      	cmp	r0, r6
 8004482:	d208      	bcs.n	8004496 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x6e>
      if(count == 0U)
 8004484:	9a01      	ldr	r2, [sp, #4]
      count--;
 8004486:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004488:	2a00      	cmp	r2, #0
      count--;
 800448a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800448e:	bf08      	it	eq
 8004490:	2600      	moveq	r6, #0
      count--;
 8004492:	9301      	str	r3, [sp, #4]
 8004494:	e7de      	b.n	8004454 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x2c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004496:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800449a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800449c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044a4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a6:	d016      	beq.n	80044d6 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xae>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80044aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80044ae:	d009      	beq.n	80044c4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x9c>
        hspi->State = HAL_SPI_STATE_READY;
 80044b0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80044b2:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80044b4:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80044b8:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80044bc:	2003      	movs	r0, #3
 80044be:	e7d5      	b.n	800446c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x44>
  return HAL_OK;
 80044c0:	4618      	mov	r0, r3
 80044c2:	e7d3      	b.n	800446c <SPI_WaitFifoStateUntilTimeout.constprop.1+0x44>
          SPI_RESET_CRC(hspi);
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e7ec      	b.n	80044b0 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x88>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d6:	68aa      	ldr	r2, [r5, #8]
 80044d8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80044dc:	d002      	beq.n	80044e4 <SPI_WaitFifoStateUntilTimeout.constprop.1+0xbc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80044e2:	d1e1      	bne.n	80044a8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x80>
          __HAL_SPI_DISABLE(hspi);
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e7dc      	b.n	80044a8 <SPI_WaitFifoStateUntilTimeout.constprop.1+0x80>
 80044ee:	bf00      	nop
 80044f0:	20000680 	.word	0x20000680

080044f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	eb01 0802 	add.w	r8, r1, r2
 80044fe:	460d      	mov	r5, r1
 8004500:	4616      	mov	r6, r2
 8004502:	4604      	mov	r4, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004504:	f7fe fc5c 	bl	8002dc0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004508:	4f46      	ldr	r7, [pc, #280]	; (8004624 <SPI_EndRxTxTransaction+0x130>)
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800450a:	eba8 0900 	sub.w	r9, r8, r0
  tmp_tickstart = HAL_GetTick();
 800450e:	f7fe fc57 	bl	8002dc0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004518:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800451c:	0d1b      	lsrs	r3, r3, #20
 800451e:	fb09 f303 	mul.w	r3, r9, r3
  tmp_tickstart = HAL_GetTick();
 8004522:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004524:	9300      	str	r3, [sp, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004526:	1c68      	adds	r0, r5, #1
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	d11f      	bne.n	800456c <SPI_EndRxTxTransaction+0x78>
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8004532:	d1fb      	bne.n	800452c <SPI_EndRxTxTransaction+0x38>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004534:	f7fe fc44 	bl	8002dc0 <HAL_GetTick>
 8004538:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 800453c:	f7fe fc40 	bl	8002dc0 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004546:	fb08 f303 	mul.w	r3, r8, r3
 800454a:	9301      	str	r3, [sp, #4]
  tmp_tickstart = HAL_GetTick();
 800454c:	4607      	mov	r7, r0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800454e:	1c69      	adds	r1, r5, #1
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	d11f      	bne.n	8004594 <SPI_EndRxTxTransaction+0xa0>
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	0612      	lsls	r2, r2, #24
 8004558:	d4fc      	bmi.n	8004554 <SPI_EndRxTxTransaction+0x60>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800455a:	4632      	mov	r2, r6
 800455c:	4629      	mov	r1, r5
 800455e:	4620      	mov	r0, r4
 8004560:	f7ff ff62 	bl	8004428 <SPI_WaitFifoStateUntilTimeout.constprop.1>
 8004564:	bb40      	cbnz	r0, 80045b8 <SPI_EndRxTxTransaction+0xc4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8004566:	b002      	add	sp, #8
 8004568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
 8004572:	d0df      	beq.n	8004534 <SPI_EndRxTxTransaction+0x40>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004574:	f7fe fc24 	bl	8002dc0 <HAL_GetTick>
 8004578:	eba0 000a 	sub.w	r0, r0, sl
 800457c:	4548      	cmp	r0, r9
 800457e:	d221      	bcs.n	80045c4 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 8004580:	9a00      	ldr	r2, [sp, #0]
      count--;
 8004582:	9b00      	ldr	r3, [sp, #0]
        tmp_timeout = 0U;
 8004584:	2a00      	cmp	r2, #0
      count--;
 8004586:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800458a:	bf08      	it	eq
 800458c:	f04f 0900 	moveq.w	r9, #0
      count--;
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	e7c8      	b.n	8004526 <SPI_EndRxTxTransaction+0x32>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	d5df      	bpl.n	800455a <SPI_EndRxTxTransaction+0x66>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800459a:	f7fe fc11 	bl	8002dc0 <HAL_GetTick>
 800459e:	1bc3      	subs	r3, r0, r7
 80045a0:	4543      	cmp	r3, r8
 80045a2:	d20f      	bcs.n	80045c4 <SPI_EndRxTxTransaction+0xd0>
      if(count == 0U)
 80045a4:	9a01      	ldr	r2, [sp, #4]
      count--;
 80045a6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80045a8:	2a00      	cmp	r2, #0
      count--;
 80045aa:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80045ae:	bf08      	it	eq
 80045b0:	f04f 0800 	moveq.w	r8, #0
      count--;
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	e7ca      	b.n	800454e <SPI_EndRxTxTransaction+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80045ba:	f043 0320 	orr.w	r3, r3, #32
 80045be:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80045c0:	2003      	movs	r0, #3
 80045c2:	e7d0      	b.n	8004566 <SPI_EndRxTxTransaction+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c4:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045c8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045ca:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045d2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045d4:	d019      	beq.n	800460a <SPI_EndRxTxTransaction+0x116>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80045d8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80045dc:	d107      	bne.n	80045ee <SPI_EndRxTxTransaction+0xfa>
          SPI_RESET_CRC(hspi);
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ec:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80045f6:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_TIMEOUT;
 80045fc:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045fe:	6623      	str	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8004600:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
}
 8004604:	b002      	add	sp, #8
 8004606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460a:	68a2      	ldr	r2, [r4, #8]
 800460c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004610:	d002      	beq.n	8004618 <SPI_EndRxTxTransaction+0x124>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004612:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004616:	d1de      	bne.n	80045d6 <SPI_EndRxTxTransaction+0xe2>
          __HAL_SPI_DISABLE(hspi);
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e7d9      	b.n	80045d6 <SPI_EndRxTxTransaction+0xe2>
 8004622:	bf00      	nop
 8004624:	20000680 	.word	0x20000680

08004628 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004628:	2800      	cmp	r0, #0
 800462a:	d07f      	beq.n	800472c <HAL_SPI_Init+0x104>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462c:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8004630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004634:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004636:	f1bc 0f00 	cmp.w	ip, #0
 800463a:	d05c      	beq.n	80046f6 <HAL_SPI_Init+0xce>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800463c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800463e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004642:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004646:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004648:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800464e:	2b00      	cmp	r3, #0
 8004650:	d05e      	beq.n	8004710 <HAL_SPI_Init+0xe8>
  __HAL_SPI_DISABLE(hspi);
 8004652:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004654:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004656:	2302      	movs	r3, #2
 8004658:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800465c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004666:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004668:	d94c      	bls.n	8004704 <HAL_SPI_Init+0xdc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800466a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800466e:	d15f      	bne.n	8004730 <HAL_SPI_Init+0x108>
 8004670:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004672:	2700      	movs	r7, #0
 8004674:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004678:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800467c:	6925      	ldr	r5, [r4, #16]
 800467e:	f8d4 e018 	ldr.w	lr, [r4, #24]
 8004682:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8004686:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800468a:	4333      	orrs	r3, r6
 800468c:	f005 0502 	and.w	r5, r5, #2
 8004690:	432b      	orrs	r3, r5
 8004692:	6965      	ldr	r5, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004694:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004698:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800469c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800469e:	432b      	orrs	r3, r5
 80046a0:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046a4:	f002 0208 	and.w	r2, r2, #8
 80046a8:	ea42 0208 	orr.w	r2, r2, r8
 80046ac:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b0:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046b4:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046b8:	ea43 030e 	orr.w	r3, r3, lr
 80046bc:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046c0:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046c4:	4333      	orrs	r3, r6
 80046c6:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046ca:	f00c 0c10 	and.w	ip, ip, #16
 80046ce:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046d2:	432b      	orrs	r3, r5
 80046d4:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046d6:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046da:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046dc:	604f      	str	r7, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046de:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046e0:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80046e6:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046ea:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046ec:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  return HAL_OK;
 80046f0:	4610      	mov	r0, r2
}
 80046f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046f6:	6843      	ldr	r3, [r0, #4]
 80046f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046fc:	d0a1      	beq.n	8004642 <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046fe:	f8c0 c01c 	str.w	ip, [r0, #28]
 8004702:	e79e      	b.n	8004642 <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004704:	d00c      	beq.n	8004720 <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004706:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470a:	2000      	movs	r0, #0
 800470c:	62a0      	str	r0, [r4, #40]	; 0x28
 800470e:	e7b3      	b.n	8004678 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 8004710:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004714:	4620      	mov	r0, r4
 8004716:	f7fd fc9f 	bl	8002058 <HAL_SPI_MspInit>
 800471a:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800471e:	e798      	b.n	8004652 <HAL_SPI_Init+0x2a>
 8004720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004722:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8004726:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 800472a:	e7a5      	b.n	8004678 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 800472c:	2001      	movs	r0, #1
}
 800472e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004730:	2700      	movs	r7, #0
 8004732:	e7ea      	b.n	800470a <HAL_SPI_Init+0xe2>

08004734 <HAL_SPI_TransmitReceive>:
{
 8004734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004738:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800473a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
{
 800473e:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8004740:	2801      	cmp	r0, #1
 8004742:	f000 809d 	beq.w	8004880 <HAL_SPI_TransmitReceive+0x14c>
 8004746:	4698      	mov	r8, r3
 8004748:	2301      	movs	r3, #1
 800474a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800474e:	468a      	mov	sl, r1
 8004750:	4691      	mov	r9, r2
 8004752:	f7fe fb35 	bl	8002dc0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004756:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800475a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800475c:	2f01      	cmp	r7, #1
  tickstart = HAL_GetTick();
 800475e:	4605      	mov	r5, r0
  tmp_state           = hspi->State;
 8004760:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004762:	d010      	beq.n	8004786 <HAL_SPI_TransmitReceive+0x52>
 8004764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004768:	d008      	beq.n	800477c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800476a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800476c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800476e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004770:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004774:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8004778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800477c:	68a2      	ldr	r2, [r4, #8]
 800477e:	2a00      	cmp	r2, #0
 8004780:	d1f3      	bne.n	800476a <HAL_SPI_TransmitReceive+0x36>
 8004782:	2904      	cmp	r1, #4
 8004784:	d1f1      	bne.n	800476a <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004786:	f1ba 0f00 	cmp.w	sl, #0
 800478a:	d07c      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x152>
 800478c:	f1b9 0f00 	cmp.w	r9, #0
 8004790:	d079      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x152>
 8004792:	f1b8 0f00 	cmp.w	r8, #0
 8004796:	d076      	beq.n	8004886 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004798:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800479c:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80047a0:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80047a2:	bf1c      	itt	ne
 80047a4:	2205      	movne	r2, #5
 80047a6:	f884 205d 	strbne.w	r2, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047aa:	68e2      	ldr	r2, [r4, #12]
  hspi->RxXferSize  = Size;
 80047ac:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b0:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047b2:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047b6:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b8:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80047ba:	f8a4 8046 	strh.w	r8, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80047be:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047c2:	e9c4 1113 	strd	r1, r1, [r4, #76]	; 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80047c6:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047ca:	6851      	ldr	r1, [r2, #4]
  hspi->TxXferSize  = Size;
 80047cc:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80047d0:	d85b      	bhi.n	800488a <HAL_SPI_TransmitReceive+0x156>
 80047d2:	f1b8 0f01 	cmp.w	r8, #1
 80047d6:	f240 80ea 	bls.w	80049ae <HAL_SPI_TransmitReceive+0x27a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047da:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80047de:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e0:	6811      	ldr	r1, [r2, #0]
 80047e2:	0649      	lsls	r1, r1, #25
 80047e4:	f140 80ea 	bpl.w	80049bc <HAL_SPI_TransmitReceive+0x288>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e8:	b96b      	cbnz	r3, 8004806 <HAL_SPI_TransmitReceive+0xd2>
      if (hspi->TxXferCount > 1U)
 80047ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f240 8120 	bls.w	8004a34 <HAL_SPI_TransmitReceive+0x300>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f4:	4651      	mov	r1, sl
 80047f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80047fa:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 80047fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047fe:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004800:	3b02      	subs	r3, #2
 8004802:	b29b      	uxth	r3, r3
 8004804:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004806:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004808:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800480a:	b29b      	uxth	r3, r3
 800480c:	b92b      	cbnz	r3, 800481a <HAL_SPI_TransmitReceive+0xe6>
 800480e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8084 	beq.w	8004922 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6893      	ldr	r3, [r2, #8]
 800481e:	0799      	lsls	r1, r3, #30
 8004820:	d505      	bpl.n	800482e <HAL_SPI_TransmitReceive+0xfa>
 8004822:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	b113      	cbz	r3, 800482e <HAL_SPI_TransmitReceive+0xfa>
 8004828:	2f00      	cmp	r7, #0
 800482a:	f040 80e1 	bne.w	80049f0 <HAL_SPI_TransmitReceive+0x2bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800482e:	6893      	ldr	r3, [r2, #8]
 8004830:	f013 0301 	ands.w	r3, r3, #1
 8004834:	d01b      	beq.n	800486e <HAL_SPI_TransmitReceive+0x13a>
 8004836:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800483a:	b289      	uxth	r1, r1
 800483c:	b1b9      	cbz	r1, 800486e <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->RxXferCount > 1U)
 800483e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8004842:	b289      	uxth	r1, r1
 8004844:	2901      	cmp	r1, #1
 8004846:	f240 80c5 	bls.w	80049d4 <HAL_SPI_TransmitReceive+0x2a0>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800484a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800484c:	68d1      	ldr	r1, [r2, #12]
 800484e:	f820 1b02 	strh.w	r1, [r0], #2
          hspi->RxXferCount -= 2U;
 8004852:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004856:	6420      	str	r0, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004858:	3902      	subs	r1, #2
 800485a:	b289      	uxth	r1, r1
 800485c:	f8a4 1046 	strh.w	r1, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004860:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8004864:	b289      	uxth	r1, r1
 8004866:	2901      	cmp	r1, #1
 8004868:	f240 80d1 	bls.w	8004a0e <HAL_SPI_TransmitReceive+0x2da>
        txallowed = 1U;
 800486c:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800486e:	f7fe faa7 	bl	8002dc0 <HAL_GetTick>
 8004872:	1b40      	subs	r0, r0, r5
 8004874:	42b0      	cmp	r0, r6
 8004876:	d3c7      	bcc.n	8004808 <HAL_SPI_TransmitReceive+0xd4>
 8004878:	1c73      	adds	r3, r6, #1
 800487a:	d0c5      	beq.n	8004808 <HAL_SPI_TransmitReceive+0xd4>
        errorcode = HAL_TIMEOUT;
 800487c:	2003      	movs	r0, #3
 800487e:	e775      	b.n	800476c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8004880:	2002      	movs	r0, #2
}
 8004882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 8004886:	2001      	movs	r0, #1
 8004888:	e770      	b.n	800476c <HAL_SPI_TransmitReceive+0x38>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800488a:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800488e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004890:	6811      	ldr	r1, [r2, #0]
 8004892:	0648      	lsls	r0, r1, #25
 8004894:	d403      	bmi.n	800489e <HAL_SPI_TransmitReceive+0x16a>
    __HAL_SPI_ENABLE(hspi);
 8004896:	6811      	ldr	r1, [r2, #0]
 8004898:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800489c:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 8081 	bne.w	80049a6 <HAL_SPI_TransmitReceive+0x272>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048a4:	4651      	mov	r1, sl
 80048a6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80048aa:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80048ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048ae:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80048b6:	1c72      	adds	r2, r6, #1
{
 80048b8:	f04f 0701 	mov.w	r7, #1
 80048bc:	d028      	beq.n	8004910 <HAL_SPI_TransmitReceive+0x1dc>
 80048be:	e06d      	b.n	800499c <HAL_SPI_TransmitReceive+0x268>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048c0:	6822      	ldr	r2, [r4, #0]
 80048c2:	6893      	ldr	r3, [r2, #8]
 80048c4:	079b      	lsls	r3, r3, #30
 80048c6:	d50d      	bpl.n	80048e4 <HAL_SPI_TransmitReceive+0x1b0>
 80048c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	b153      	cbz	r3, 80048e4 <HAL_SPI_TransmitReceive+0x1b0>
 80048ce:	b14f      	cbz	r7, 80048e4 <HAL_SPI_TransmitReceive+0x1b0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80048d6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80048d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048da:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80048e2:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e4:	6893      	ldr	r3, [r2, #8]
 80048e6:	f013 0301 	ands.w	r3, r3, #1
 80048ea:	d00f      	beq.n	800490c <HAL_SPI_TransmitReceive+0x1d8>
 80048ec:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 80048f0:	b289      	uxth	r1, r1
 80048f2:	b159      	cbz	r1, 800490c <HAL_SPI_TransmitReceive+0x1d8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80048f6:	68d2      	ldr	r2, [r2, #12]
 80048f8:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 80048fc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004900:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004902:	3a01      	subs	r2, #1
 8004904:	b292      	uxth	r2, r2
        txallowed = 1U;
 8004906:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8004908:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800490c:	f7fe fa58 	bl	8002dc0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004910:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1d3      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x18c>
 8004918:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ce      	bne.n	80048c0 <HAL_SPI_TransmitReceive+0x18c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004922:	462a      	mov	r2, r5
 8004924:	4631      	mov	r1, r6
 8004926:	4620      	mov	r0, r4
 8004928:	f7ff fde4 	bl	80044f4 <SPI_EndRxTxTransaction>
 800492c:	2800      	cmp	r0, #0
 800492e:	f43f af1d 	beq.w	800476c <HAL_SPI_TransmitReceive+0x38>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004932:	2320      	movs	r3, #32
 8004934:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004936:	2001      	movs	r0, #1
 8004938:	e718      	b.n	800476c <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800493a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800493e:	b29b      	uxth	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ee      	beq.n	8004922 <HAL_SPI_TransmitReceive+0x1ee>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	6893      	ldr	r3, [r2, #8]
 8004948:	0798      	lsls	r0, r3, #30
 800494a:	d50d      	bpl.n	8004968 <HAL_SPI_TransmitReceive+0x234>
 800494c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800494e:	b29b      	uxth	r3, r3
 8004950:	b153      	cbz	r3, 8004968 <HAL_SPI_TransmitReceive+0x234>
 8004952:	b14f      	cbz	r7, 8004968 <HAL_SPI_TransmitReceive+0x234>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004954:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004956:	f831 3b02 	ldrh.w	r3, [r1], #2
 800495a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800495c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800495e:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004960:	3b01      	subs	r3, #1
 8004962:	b29b      	uxth	r3, r3
 8004964:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004966:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004968:	6893      	ldr	r3, [r2, #8]
 800496a:	f013 0301 	ands.w	r3, r3, #1
 800496e:	d00f      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x25c>
 8004970:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8004974:	b289      	uxth	r1, r1
 8004976:	b159      	cbz	r1, 8004990 <HAL_SPI_TransmitReceive+0x25c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004978:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800497a:	68d2      	ldr	r2, [r2, #12]
 800497c:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8004980:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004984:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004986:	3a01      	subs	r2, #1
 8004988:	b292      	uxth	r2, r2
        txallowed = 1U;
 800498a:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800498c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004990:	f7fe fa16 	bl	8002dc0 <HAL_GetTick>
 8004994:	1b40      	subs	r0, r0, r5
 8004996:	42b0      	cmp	r0, r6
 8004998:	f4bf af70 	bcs.w	800487c <HAL_SPI_TransmitReceive+0x148>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800499c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1cf      	bne.n	8004944 <HAL_SPI_TransmitReceive+0x210>
 80049a4:	e7c9      	b.n	800493a <HAL_SPI_TransmitReceive+0x206>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a6:	f1b8 0f01 	cmp.w	r8, #1
 80049aa:	d184      	bne.n	80048b6 <HAL_SPI_TransmitReceive+0x182>
 80049ac:	e77a      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x170>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049ae:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80049b2:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049b4:	6811      	ldr	r1, [r2, #0]
 80049b6:	0649      	lsls	r1, r1, #25
 80049b8:	f53f af17 	bmi.w	80047ea <HAL_SPI_TransmitReceive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80049c2:	6011      	str	r1, [r2, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f43f af10 	beq.w	80047ea <HAL_SPI_TransmitReceive+0xb6>
 80049ca:	f1b8 0f01 	cmp.w	r8, #1
 80049ce:	f47f af1a 	bne.w	8004806 <HAL_SPI_TransmitReceive+0xd2>
 80049d2:	e70a      	b.n	80047ea <HAL_SPI_TransmitReceive+0xb6>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80049d6:	7b12      	ldrb	r2, [r2, #12]
 80049d8:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 80049da:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 80049de:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80049e0:	3a01      	subs	r2, #1
 80049e2:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 80049e4:	3101      	adds	r1, #1
        txallowed = 1U;
 80049e6:	461f      	mov	r7, r3
          hspi->RxXferCount--;
 80049e8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 80049ec:	6421      	str	r1, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80049ee:	e73e      	b.n	800486e <HAL_SPI_TransmitReceive+0x13a>
        if (hspi->TxXferCount > 1U)
 80049f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d910      	bls.n	8004a1a <HAL_SPI_TransmitReceive+0x2e6>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049fa:	f831 3b02 	ldrh.w	r3, [r1], #2
 80049fe:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 8004a00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a02:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a04:	3b02      	subs	r3, #2
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8004a0a:	2700      	movs	r7, #0
 8004a0c:	e70f      	b.n	800482e <HAL_SPI_TransmitReceive+0xfa>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a0e:	6851      	ldr	r1, [r2, #4]
 8004a10:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
        txallowed = 1U;
 8004a14:	461f      	mov	r7, r3
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a16:	6051      	str	r1, [r2, #4]
 8004a18:	e729      	b.n	800486e <HAL_SPI_TransmitReceive+0x13a>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8004a20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8004a22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a24:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 8004a2a:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8004a2c:	87e3      	strh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8004a2e:	63a1      	str	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8004a30:	2700      	movs	r7, #0
 8004a32:	e6fc      	b.n	800482e <HAL_SPI_TransmitReceive+0xfa>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a34:	f89a 3000 	ldrb.w	r3, [sl]
 8004a38:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8004a3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8004a3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004a42:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004a44:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8004a46:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004a48:	e6dd      	b.n	8004806 <HAL_SPI_TransmitReceive+0xd2>
 8004a4a:	bf00      	nop

08004a4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a4c:	6a03      	ldr	r3, [r0, #32]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	6203      	str	r3, [r0, #32]
{
 8004a54:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a58:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a5c:	4f18      	ldr	r7, [pc, #96]	; (8004ac0 <TIM_OC1_SetConfig+0x74>)
  tmpccer |= OC_Config->OCPolarity;
 8004a5e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8004a66:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a6a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a6e:	42b8      	cmp	r0, r7
  tmpccer |= OC_Config->OCPolarity;
 8004a70:	ea43 0305 	orr.w	r3, r3, r5
  tmpccmrx |= OC_Config->OCMode;
 8004a74:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a78:	d00e      	beq.n	8004a98 <TIM_OC1_SetConfig+0x4c>
 8004a7a:	4c12      	ldr	r4, [pc, #72]	; (8004ac4 <TIM_OC1_SetConfig+0x78>)
 8004a7c:	42a0      	cmp	r0, r4
 8004a7e:	d00b      	beq.n	8004a98 <TIM_OC1_SetConfig+0x4c>
 8004a80:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004a84:	42a0      	cmp	r0, r4
 8004a86:	d007      	beq.n	8004a98 <TIM_OC1_SetConfig+0x4c>
 8004a88:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d003      	beq.n	8004a98 <TIM_OC1_SetConfig+0x4c>
 8004a90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d10b      	bne.n	8004ab0 <TIM_OC1_SetConfig+0x64>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a98:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a9a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004a9e:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aa0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa4:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aa8:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aaa:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aae:	4326      	orrs	r6, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ab0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ab2:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ab4:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004ab6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8004ab8:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004aba:	6203      	str	r3, [r0, #32]
}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40013400 	.word	0x40013400

08004ac8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ac8:	6a03      	ldr	r3, [r0, #32]
 8004aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ace:	6203      	str	r3, [r0, #32]
{
 8004ad0:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ad8:	4f19      	ldr	r7, [pc, #100]	; (8004b40 <TIM_OC3_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ada:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8004adc:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ade:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8004ae2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aea:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004af0:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004af4:	d00f      	beq.n	8004b16 <TIM_OC3_SetConfig+0x4e>
 8004af6:	4c13      	ldr	r4, [pc, #76]	; (8004b44 <TIM_OC3_SetConfig+0x7c>)
 8004af8:	42a0      	cmp	r0, r4
 8004afa:	d00c      	beq.n	8004b16 <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afc:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004b00:	42a0      	cmp	r0, r4
 8004b02:	d00f      	beq.n	8004b24 <TIM_OC3_SetConfig+0x5c>
 8004b04:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d00b      	beq.n	8004b24 <TIM_OC3_SetConfig+0x5c>
 8004b0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b10:	42a0      	cmp	r0, r4
 8004b12:	d10e      	bne.n	8004b32 <TIM_OC3_SetConfig+0x6a>
 8004b14:	e006      	b.n	8004b24 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b16:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b1c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b24:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b28:	f426 5640 	bic.w	r6, r6, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b2c:	432c      	orrs	r4, r5
 8004b2e:	ea46 1604 	orr.w	r6, r6, r4, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b32:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b34:	6046      	str	r6, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004b36:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004b38:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8004b3a:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004b3c:	6203      	str	r3, [r0, #32]
}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40013400 	.word	0x40013400

08004b48 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d07d      	beq.n	8004c48 <HAL_TIM_Base_Init+0x100>
{
 8004b4c:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b4e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b52:	4604      	mov	r4, r0
 8004b54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d06d      	beq.n	8004c38 <HAL_TIM_Base_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5c:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b5e:	4a3b      	ldr	r2, [pc, #236]	; (8004c4c <HAL_TIM_Base_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004b60:	2302      	movs	r3, #2
 8004b62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b66:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8004b68:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b6a:	d051      	beq.n	8004c10 <HAL_TIM_Base_Init+0xc8>
 8004b6c:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004b70:	d021      	beq.n	8004bb6 <HAL_TIM_Base_Init+0x6e>
 8004b72:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004b76:	4291      	cmp	r1, r2
 8004b78:	d01d      	beq.n	8004bb6 <HAL_TIM_Base_Init+0x6e>
 8004b7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b7e:	4291      	cmp	r1, r2
 8004b80:	d019      	beq.n	8004bb6 <HAL_TIM_Base_Init+0x6e>
 8004b82:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004b86:	4291      	cmp	r1, r2
 8004b88:	d042      	beq.n	8004c10 <HAL_TIM_Base_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004b8e:	4291      	cmp	r1, r2
 8004b90:	d057      	beq.n	8004c42 <HAL_TIM_Base_Init+0xfa>
 8004b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b96:	4291      	cmp	r1, r2
 8004b98:	d053      	beq.n	8004c42 <HAL_TIM_Base_Init+0xfa>
 8004b9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b9e:	4291      	cmp	r1, r2
 8004ba0:	d04f      	beq.n	8004c42 <HAL_TIM_Base_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba2:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba4:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004ba6:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bac:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004bae:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bb0:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bb2:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb4:	e010      	b.n	8004bd8 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004bb6:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb8:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bba:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bc0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc6:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bce:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004bd0:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004bd2:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bd6:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bdc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004be4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004be8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004bec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004bfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c00:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004c04:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c0c:	2000      	movs	r0, #0
}
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004c10:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c12:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c14:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c1a:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c20:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c26:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c28:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2a:	68e3      	ldr	r3, [r4, #12]
 8004c2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c2e:	6863      	ldr	r3, [r4, #4]
 8004c30:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004c32:	6963      	ldr	r3, [r4, #20]
 8004c34:	630b      	str	r3, [r1, #48]	; 0x30
 8004c36:	e7cf      	b.n	8004bd8 <HAL_TIM_Base_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8004c38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c3c:	f7fd fa44 	bl	80020c8 <HAL_TIM_Base_MspInit>
 8004c40:	e78c      	b.n	8004b5c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c42:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	69a2      	ldr	r2, [r4, #24]
 8004c46:	e7e9      	b.n	8004c1c <HAL_TIM_Base_Init+0xd4>
    return HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
}
 8004c4a:	4770      	bx	lr
 8004c4c:	40012c00 	.word	0x40012c00

08004c50 <HAL_TIM_PWM_MspInit>:
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop

08004c54 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d07d      	beq.n	8004d54 <HAL_TIM_PWM_Init+0x100>
{
 8004c58:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c5e:	4604      	mov	r4, r0
 8004c60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d06d      	beq.n	8004d44 <HAL_TIM_PWM_Init+0xf0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	6821      	ldr	r1, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6a:	4a3b      	ldr	r2, [pc, #236]	; (8004d58 <HAL_TIM_PWM_Init+0x104>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c72:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 8004c74:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c76:	d051      	beq.n	8004d1c <HAL_TIM_PWM_Init+0xc8>
 8004c78:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004c7c:	d021      	beq.n	8004cc2 <HAL_TIM_PWM_Init+0x6e>
 8004c7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004c82:	4291      	cmp	r1, r2
 8004c84:	d01d      	beq.n	8004cc2 <HAL_TIM_PWM_Init+0x6e>
 8004c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c8a:	4291      	cmp	r1, r2
 8004c8c:	d019      	beq.n	8004cc2 <HAL_TIM_PWM_Init+0x6e>
 8004c8e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004c92:	4291      	cmp	r1, r2
 8004c94:	d042      	beq.n	8004d1c <HAL_TIM_PWM_Init+0xc8>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c96:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004c9a:	4291      	cmp	r1, r2
 8004c9c:	d057      	beq.n	8004d4e <HAL_TIM_PWM_Init+0xfa>
 8004c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ca2:	4291      	cmp	r1, r2
 8004ca4:	d053      	beq.n	8004d4e <HAL_TIM_PWM_Init+0xfa>
 8004ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004caa:	4291      	cmp	r1, r2
 8004cac:	d04f      	beq.n	8004d4e <HAL_TIM_PWM_Init+0xfa>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cae:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cb0:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004cb2:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004cba:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cbc:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cbe:	628a      	str	r2, [r1, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc0:	e010      	b.n	8004ce4 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004cc2:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc4:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc6:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ccc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd2:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd4:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cda:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004cdc:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004cde:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ce2:	628a      	str	r2, [r1, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ce8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004cf0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004cf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004cf8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d0c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004d10:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d18:	2000      	movs	r0, #0
}
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004d1c:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d20:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d26:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d32:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004d34:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d36:	68e3      	ldr	r3, [r4, #12]
 8004d38:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d3a:	6863      	ldr	r3, [r4, #4]
 8004d3c:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3e:	6963      	ldr	r3, [r4, #20]
 8004d40:	630b      	str	r3, [r1, #48]	; 0x30
 8004d42:	e7cf      	b.n	8004ce4 <HAL_TIM_PWM_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 8004d44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004d48:	f7ff ff82 	bl	8004c50 <HAL_TIM_PWM_MspInit>
 8004d4c:	e78c      	b.n	8004c68 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d50:	69a2      	ldr	r2, [r4, #24]
 8004d52:	e7e9      	b.n	8004d28 <HAL_TIM_PWM_Init+0xd4>
    return HAL_ERROR;
 8004d54:	2001      	movs	r0, #1
}
 8004d56:	4770      	bx	lr
 8004d58:	40012c00 	.word	0x40012c00

08004d5c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004d5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d04b      	beq.n	8004dfc <HAL_TIM_SlaveConfigSynchro+0xa0>
 8004d64:	4602      	mov	r2, r0
{
 8004d66:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	2302      	movs	r3, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d6a:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004d70:	2001      	movs	r0, #1
 8004d72:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d76:	e9d1 6500 	ldrd	r6, r5, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8004d7a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d80:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d86:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d8a:	4333      	orrs	r3, r6

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004d8c:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004d8e:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004d90:	d04d      	beq.n	8004e2e <HAL_TIM_SlaveConfigSynchro+0xd2>
 8004d92:	d825      	bhi.n	8004de0 <HAL_TIM_SlaveConfigSynchro+0x84>
 8004d94:	2d40      	cmp	r5, #64	; 0x40
 8004d96:	d033      	beq.n	8004e00 <HAL_TIM_SlaveConfigSynchro+0xa4>
 8004d98:	2d50      	cmp	r5, #80	; 0x50
 8004d9a:	d110      	bne.n	8004dbe <HAL_TIM_SlaveConfigSynchro+0x62>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d9c:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9e:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da0:	6888      	ldr	r0, [r1, #8]
 8004da2:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da4:	f026 0601 	bic.w	r6, r6, #1
 8004da8:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dac:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004db4:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dba:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004dbc:	6221      	str	r1, [r4, #32]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004dbe:	68e3      	ldr	r3, [r4, #12]
 8004dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc4:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dc6:	68e3      	ldr	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8004dca:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd0:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	f882 503d 	strb.w	r5, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004dd6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8004dda:	4608      	mov	r0, r1
}
 8004ddc:	bcf0      	pop	{r4, r5, r6, r7}
 8004dde:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004de0:	2d70      	cmp	r5, #112	; 0x70
 8004de2:	d1ec      	bne.n	8004dbe <HAL_TIM_SlaveConfigSynchro+0x62>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de4:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8004de8:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8004dea:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dec:	432b      	orrs	r3, r5
 8004dee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df6:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	e7e0      	b.n	8004dbe <HAL_TIM_SlaveConfigSynchro+0x62>
  __HAL_LOCK(htim);
 8004dfc:	2002      	movs	r0, #2
}
 8004dfe:	4770      	bx	lr
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e00:	2e05      	cmp	r6, #5
 8004e02:	d00d      	beq.n	8004e20 <HAL_TIM_SlaveConfigSynchro+0xc4>
      tmpccer = htim->Instance->CCER;
 8004e04:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e06:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e08:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e0a:	f020 0001 	bic.w	r0, r0, #1
 8004e0e:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e10:	69a3      	ldr	r3, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e16:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004e1a:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004e1c:	6225      	str	r5, [r4, #32]
      break;
 8004e1e:	e7ce      	b.n	8004dbe <HAL_TIM_SlaveConfigSynchro+0x62>
    __HAL_UNLOCK(htim);
 8004e20:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004e22:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004e26:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8004e2c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e2e:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e30:	688d      	ldr	r5, [r1, #8]
 8004e32:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e34:	f020 0010 	bic.w	r0, r0, #16
 8004e38:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3a:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004e3c:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e3e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e46:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e4a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4e:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e50:	6223      	str	r3, [r4, #32]
 8004e52:	e7b4      	b.n	8004dbe <HAL_TIM_SlaveConfigSynchro+0x62>

08004e54 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e54:	6a03      	ldr	r3, [r0, #32]
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	6203      	str	r3, [r0, #32]
{
 8004e5c:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer = TIMx->CCER;
 8004e5e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004e60:	6846      	ldr	r6, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e62:	6982      	ldr	r2, [r0, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e64:	4f19      	ldr	r7, [pc, #100]	; (8004ecc <TIM_OC2_SetConfig+0x78>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e66:	688d      	ldr	r5, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e68:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e6a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8004e6e:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e72:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e76:	42b8      	cmp	r0, r7
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e80:	d00f      	beq.n	8004ea2 <TIM_OC2_SetConfig+0x4e>
 8004e82:	4c13      	ldr	r4, [pc, #76]	; (8004ed0 <TIM_OC2_SetConfig+0x7c>)
 8004e84:	42a0      	cmp	r0, r4
 8004e86:	d00c      	beq.n	8004ea2 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e88:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_OC2_SetConfig+0x5c>
 8004e90:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d00b      	beq.n	8004eb0 <TIM_OC2_SetConfig+0x5c>
 8004e98:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004e9c:	42a0      	cmp	r0, r4
 8004e9e:	d10e      	bne.n	8004ebe <TIM_OC2_SetConfig+0x6a>
 8004ea0:	e006      	b.n	8004eb0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ea2:	68cc      	ldr	r4, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ea8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb0:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eb4:	f426 6640 	bic.w	r6, r6, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb8:	432c      	orrs	r4, r5
 8004eba:	ea46 0684 	orr.w	r6, r6, r4, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004ebe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ec0:	6046      	str	r6, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ec2:	6182      	str	r2, [r0, #24]
}
 8004ec4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8004ec6:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004ec8:	6203      	str	r3, [r0, #32]
}
 8004eca:	4770      	bx	lr
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40013400 	.word	0x40013400

08004ed4 <HAL_TIM_PWM_ConfigChannel>:
{
 8004ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004ed6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f000 811c 	beq.w	8005118 <HAL_TIM_PWM_ConfigChannel+0x244>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004eea:	2a14      	cmp	r2, #20
 8004eec:	d84e      	bhi.n	8004f8c <HAL_TIM_PWM_ConfigChannel+0xb8>
 8004eee:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004ef2:	0094      	.short	0x0094
 8004ef4:	004d004d 	.word	0x004d004d
 8004ef8:	00a8004d 	.word	0x00a8004d
 8004efc:	004d004d 	.word	0x004d004d
 8004f00:	00bd004d 	.word	0x00bd004d
 8004f04:	004d004d 	.word	0x004d004d
 8004f08:	0015004d 	.word	0x0015004d
 8004f0c:	004d004d 	.word	0x004d004d
 8004f10:	00d1004d 	.word	0x00d1004d
 8004f14:	004d004d 	.word	0x004d004d
 8004f18:	0051004d 	.word	0x0051004d
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f1c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f1e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f22:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f26:	4e83      	ldr	r6, [pc, #524]	; (8005134 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f28:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8004f2c:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004f2e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004f30:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004f32:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f34:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8004f38:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f3c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f42:	ea41 310c 	orr.w	r1, r1, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f46:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	d008      	beq.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x8a>
 8004f4c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004f50:	42b3      	cmp	r3, r6
 8004f52:	d004      	beq.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x8a>
 8004f54:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004f58:	42b3      	cmp	r3, r6
 8004f5a:	f040 80df 	bne.w	800511c <HAL_TIM_PWM_ConfigChannel+0x248>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f5e:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f60:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f64:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8004f68:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004f6a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004f6c:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004f6e:	641e      	str	r6, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004f70:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f72:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f74:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f76:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004f7a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f7c:	69d9      	ldr	r1, [r3, #28]
 8004f7e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004f82:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004f8a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f94:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f96:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f9a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f9c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9e:	4e65      	ldr	r6, [pc, #404]	; (8005134 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fa0:	f420 1080 	bic.w	r0, r0, #1048576	; 0x100000
 8004fa4:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 8004fa6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004fa8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004faa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fac:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fb0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fb4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fba:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fbe:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc2:	d00f      	beq.n	8004fe4 <HAL_TIM_PWM_ConfigChannel+0x110>
 8004fc4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004fc8:	42b3      	cmp	r3, r6
 8004fca:	d00b      	beq.n	8004fe4 <HAL_TIM_PWM_ConfigChannel+0x110>
 8004fcc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004fd0:	42b3      	cmp	r3, r6
 8004fd2:	d007      	beq.n	8004fe4 <HAL_TIM_PWM_ConfigChannel+0x110>
 8004fd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004fd8:	42b3      	cmp	r3, r6
 8004fda:	d003      	beq.n	8004fe4 <HAL_TIM_PWM_ConfigChannel+0x110>
 8004fdc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004fe0:	42b3      	cmp	r3, r6
 8004fe2:	d104      	bne.n	8004fee <HAL_TIM_PWM_ConfigChannel+0x11a>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fe4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fe6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fea:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
 8004fee:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8004ff0:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004ff4:	65de      	str	r6, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8004ff6:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ff8:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ffa:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ffc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005000:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005002:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005004:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005008:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800500a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800500c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8005010:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005012:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005014:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005018:	e7bb      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	f7ff fd16 	bl	8004a4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005020:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005022:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005024:	6999      	ldr	r1, [r3, #24]
 8005026:	f041 0108 	orr.w	r1, r1, #8
 800502a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800502c:	6999      	ldr	r1, [r3, #24]
 800502e:	f021 0104 	bic.w	r1, r1, #4
 8005032:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 8005038:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800503a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800503c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005040:	e7a7      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005042:	6800      	ldr	r0, [r0, #0]
 8005044:	f7ff ff06 	bl	8004e54 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005048:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800504a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800504c:	6999      	ldr	r1, [r3, #24]
 800504e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005052:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005054:	6999      	ldr	r1, [r3, #24]
 8005056:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800505a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  __HAL_UNLOCK(htim);
 8005062:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005064:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005066:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800506a:	e792      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	f7ff fd2b 	bl	8004ac8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005072:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005074:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005076:	69d9      	ldr	r1, [r3, #28]
 8005078:	f041 0108 	orr.w	r1, r1, #8
 800507c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	f021 0104 	bic.w	r1, r1, #4
 8005084:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800508a:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800508c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800508e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005092:	e77e      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0xbe>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005094:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005096:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800509a:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800509c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	4e25      	ldr	r6, [pc, #148]	; (8005134 <HAL_TIM_PWM_ConfigChannel+0x260>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050a0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80050a4:	6218      	str	r0, [r3, #32]
  tmpccer = TIMx->CCER;
 80050a6:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050a8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80050aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 80050b0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 80050be:	ea42 0207 	orr.w	r2, r2, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c2:	d00f      	beq.n	80050e4 <HAL_TIM_PWM_ConfigChannel+0x210>
 80050c4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80050c8:	42b3      	cmp	r3, r6
 80050ca:	d00b      	beq.n	80050e4 <HAL_TIM_PWM_ConfigChannel+0x210>
 80050cc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80050d0:	42b3      	cmp	r3, r6
 80050d2:	d007      	beq.n	80050e4 <HAL_TIM_PWM_ConfigChannel+0x210>
 80050d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050d8:	42b3      	cmp	r3, r6
 80050da:	d003      	beq.n	80050e4 <HAL_TIM_PWM_ConfigChannel+0x210>
 80050dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050e0:	42b3      	cmp	r3, r6
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_ConfigChannel+0x21a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050e4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050e6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050ea:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 80050ee:	686e      	ldr	r6, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80050f0:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80050f4:	659e      	str	r6, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 80050f6:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050fa:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050fc:	f041 0108 	orr.w	r1, r1, #8
 8005100:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005102:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005104:	f021 0104 	bic.w	r1, r1, #4
 8005108:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800510a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800510c:	4302      	orrs	r2, r0
  __HAL_UNLOCK(htim);
 800510e:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005112:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8005116:	e73c      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0xbe>
  __HAL_LOCK(htim);
 8005118:	2002      	movs	r0, #2
}
 800511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005120:	42b3      	cmp	r3, r6
 8005122:	f43f af1c 	beq.w	8004f5e <HAL_TIM_PWM_ConfigChannel+0x8a>
 8005126:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800512a:	42b3      	cmp	r3, r6
 800512c:	f47f af1c 	bne.w	8004f68 <HAL_TIM_PWM_ConfigChannel+0x94>
 8005130:	e715      	b.n	8004f5e <HAL_TIM_PWM_ConfigChannel+0x8a>
 8005132:	bf00      	nop
 8005134:	40012c00 	.word	0x40012c00

08005138 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005138:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d038      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
{
 8005140:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005142:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005144:	4c1c      	ldr	r4, [pc, #112]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005146:	2302      	movs	r3, #2
 8005148:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800514c:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 800514e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005150:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005152:	d024      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8005154:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005158:	42a2      	cmp	r2, r4
 800515a:	d020      	beq.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0x66>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800515c:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005162:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005164:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005168:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516a:	d00a      	beq.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800516e:	429a      	cmp	r2, r3
 8005170:	d007      	beq.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005176:	429a      	cmp	r2, r3
 8005178:	d003      	beq.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800517a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800517e:	429a      	cmp	r2, r3
 8005180:	d104      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005182:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005184:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005188:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800518a:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800518c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800518e:	2201      	movs	r2, #1
 8005190:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005194:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005198:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800519a:	4618      	mov	r0, r3
}
 800519c:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800519e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051a6:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80051a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ac:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80051ae:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	e7e7      	b.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  __HAL_LOCK(htim);
 80051b2:	2002      	movs	r0, #2
}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40000400 	.word	0x40000400

080051c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d03c      	beq.n	8005242 <HAL_TIMEx_ConfigBreakDeadTime+0x82>
{
 80051c8:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ca:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 80051ce:	4602      	mov	r2, r0
 80051d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051d4:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051d8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051de:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051e4:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051e8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ee:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051f4:	6a88      	ldr	r0, [r1, #40]	; 0x28
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051f6:	698d      	ldr	r5, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051f8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fe:	4303      	orrs	r3, r0
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005200:	4c11      	ldr	r4, [pc, #68]	; (8005248 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8005202:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005204:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005208:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800520a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800520e:	d00a      	beq.n	8005226 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
 8005210:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005214:	42a0      	cmp	r0, r4
 8005216:	d006      	beq.n	8005226 <HAL_TIMEx_ConfigBreakDeadTime+0x66>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005218:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800521a:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800521c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005220:	4608      	mov	r0, r1
}
 8005222:	bc30      	pop	{r4, r5}
 8005224:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005226:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8005228:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800522c:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005230:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005238:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800523a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800523e:	430b      	orrs	r3, r1
 8005240:	e7ea      	b.n	8005218 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005242:	2002      	movs	r0, #2
}
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40012c00 	.word	0x40012c00

0800524c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800524c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800524e:	07da      	lsls	r2, r3, #31
{
 8005250:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005252:	d506      	bpl.n	8005262 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005254:	6801      	ldr	r1, [r0, #0]
 8005256:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005258:	684a      	ldr	r2, [r1, #4]
 800525a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800525e:	4322      	orrs	r2, r4
 8005260:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005262:	079c      	lsls	r4, r3, #30
 8005264:	d506      	bpl.n	8005274 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005266:	6801      	ldr	r1, [r0, #0]
 8005268:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800526a:	684a      	ldr	r2, [r1, #4]
 800526c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005270:	4322      	orrs	r2, r4
 8005272:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005274:	0759      	lsls	r1, r3, #29
 8005276:	d506      	bpl.n	8005286 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005278:	6801      	ldr	r1, [r0, #0]
 800527a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800527c:	684a      	ldr	r2, [r1, #4]
 800527e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005282:	4322      	orrs	r2, r4
 8005284:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005286:	071a      	lsls	r2, r3, #28
 8005288:	d506      	bpl.n	8005298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800528a:	6801      	ldr	r1, [r0, #0]
 800528c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800528e:	684a      	ldr	r2, [r1, #4]
 8005290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005294:	4322      	orrs	r2, r4
 8005296:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005298:	06dc      	lsls	r4, r3, #27
 800529a:	d506      	bpl.n	80052aa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800529c:	6801      	ldr	r1, [r0, #0]
 800529e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80052a0:	688a      	ldr	r2, [r1, #8]
 80052a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052a6:	4322      	orrs	r2, r4
 80052a8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052aa:	0699      	lsls	r1, r3, #26
 80052ac:	d506      	bpl.n	80052bc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ae:	6801      	ldr	r1, [r0, #0]
 80052b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80052b2:	688a      	ldr	r2, [r1, #8]
 80052b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b8:	4322      	orrs	r2, r4
 80052ba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052bc:	065a      	lsls	r2, r3, #25
 80052be:	d509      	bpl.n	80052d4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c0:	6801      	ldr	r1, [r0, #0]
 80052c2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80052c4:	684a      	ldr	r2, [r1, #4]
 80052c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80052ca:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052cc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052d0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052d2:	d00b      	beq.n	80052ec <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	d506      	bpl.n	80052e6 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052d8:	6802      	ldr	r2, [r0, #0]
 80052da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80052dc:	6853      	ldr	r3, [r2, #4]
 80052de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6053      	str	r3, [r2, #4]
  }
}
 80052e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ea:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052ec:	684a      	ldr	r2, [r1, #4]
 80052ee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80052f0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80052f4:	4322      	orrs	r2, r4
 80052f6:	604a      	str	r2, [r1, #4]
 80052f8:	e7ec      	b.n	80052d4 <UART_AdvFeatureConfig+0x88>
 80052fa:	bf00      	nop

080052fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	2300      	movs	r3, #0
{
 8005300:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005302:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005306:	f7fd fd5b 	bl	8002dc0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005310:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005312:	d40b      	bmi.n	800532c <UART_CheckIdleState+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	0752      	lsls	r2, r2, #29
 8005318:	d42d      	bmi.n	8005376 <UART_CheckIdleState+0x7a>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800531c:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);
 800531e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8005322:	67a2      	str	r2, [r4, #120]	; 0x78

  return HAL_OK;
 8005324:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8005326:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005328:	6623      	str	r3, [r4, #96]	; 0x60
}
 800532a:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	0292      	lsls	r2, r2, #10
 8005330:	d4f0      	bmi.n	8005314 <UART_CheckIdleState+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005332:	f7fd fd45 	bl	8002dc0 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005336:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005338:	1b40      	subs	r0, r0, r5
 800533a:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800533e:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005340:	d22a      	bcs.n	8005398 <UART_CheckIdleState+0x9c>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005342:	0750      	lsls	r0, r2, #29
 8005344:	d5f2      	bpl.n	800532c <UART_CheckIdleState+0x30>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	0511      	lsls	r1, r2, #20
 800534a:	d5ef      	bpl.n	800532c <UART_CheckIdleState+0x30>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800534c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005350:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005358:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535a:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800535c:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	f021 0101 	bic.w	r1, r1, #1
 8005362:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8005364:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 8005366:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 800536a:	67a2      	str	r2, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 800536c:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 800536e:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005370:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
}
 8005374:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	0258      	lsls	r0, r3, #9
 800537a:	d4ce      	bmi.n	800531a <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537c:	f7fd fd20 	bl	8002dc0 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005380:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	1b40      	subs	r0, r0, r5
 8005384:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005388:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538a:	d205      	bcs.n	8005398 <UART_CheckIdleState+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800538c:	0751      	lsls	r1, r2, #29
 800538e:	d5f2      	bpl.n	8005376 <UART_CheckIdleState+0x7a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005390:	69da      	ldr	r2, [r3, #28]
 8005392:	0512      	lsls	r2, r2, #20
 8005394:	d5ef      	bpl.n	8005376 <UART_CheckIdleState+0x7a>
 8005396:	e7d9      	b.n	800534c <UART_CheckIdleState+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800539c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 80053a0:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80053a8:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80053aa:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 80053ae:	67a1      	str	r1, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 80053b0:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80053b2:	67e1      	str	r1, [r4, #124]	; 0x7c
}
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
 80053b6:	bf00      	nop

080053b8 <HAL_UART_Init>:
  if (huart == NULL)
 80053b8:	2800      	cmp	r0, #0
 80053ba:	f000 812a 	beq.w	8005612 <HAL_UART_Init+0x25a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80053be:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d038      	beq.n	800543a <HAL_UART_Init+0x82>
  __HAL_UART_DISABLE(huart);
 80053c8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ca:	69e0      	ldr	r0, [r4, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 80053cc:	2224      	movs	r2, #36	; 0x24
 80053ce:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80053d0:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d2:	68a2      	ldr	r2, [r4, #8]
 80053d4:	e9d4 6504 	ldrd	r6, r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80053d8:	f021 0101 	bic.w	r1, r1, #1
 80053dc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053de:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e0:	4332      	orrs	r2, r6
 80053e2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053e4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80053e8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053ec:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053ee:	430a      	orrs	r2, r1
 80053f0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053f6:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80053f8:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fa:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80053fe:	4329      	orrs	r1, r5
 8005400:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005402:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005404:	4d8f      	ldr	r5, [pc, #572]	; (8005644 <HAL_UART_Init+0x28c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005406:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800540a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800540c:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800540e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005410:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005412:	d017      	beq.n	8005444 <HAL_UART_Init+0x8c>
 8005414:	4a8c      	ldr	r2, [pc, #560]	; (8005648 <HAL_UART_Init+0x290>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d038      	beq.n	800548c <HAL_UART_Init+0xd4>
 800541a:	4a8c      	ldr	r2, [pc, #560]	; (800564c <HAL_UART_Init+0x294>)
 800541c:	4293      	cmp	r3, r2
 800541e:	f000 80e0 	beq.w	80055e2 <HAL_UART_Init+0x22a>
 8005422:	4a8b      	ldr	r2, [pc, #556]	; (8005650 <HAL_UART_Init+0x298>)
 8005424:	4293      	cmp	r3, r2
 8005426:	f000 8098 	beq.w	800555a <HAL_UART_Init+0x1a2>
 800542a:	4a8a      	ldr	r2, [pc, #552]	; (8005654 <HAL_UART_Init+0x29c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d04a      	beq.n	80054c6 <HAL_UART_Init+0x10e>
  huart->RxISR = NULL;
 8005430:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005432:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8005436:	2001      	movs	r0, #1
 8005438:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800543a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800543e:	f7fc fead 	bl	800219c <HAL_UART_MspInit>
 8005442:	e7c1      	b.n	80053c8 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005444:	4b84      	ldr	r3, [pc, #528]	; (8005658 <HAL_UART_Init+0x2a0>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	3b01      	subs	r3, #1
 800544e:	2b02      	cmp	r3, #2
 8005450:	d874      	bhi.n	800553c <HAL_UART_Init+0x184>
 8005452:	4a82      	ldr	r2, [pc, #520]	; (800565c <HAL_UART_Init+0x2a4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005454:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005458:	5cd3      	ldrb	r3, [r2, r3]
 800545a:	f000 808c 	beq.w	8005576 <HAL_UART_Init+0x1be>
    switch (clocksource)
 800545e:	2b08      	cmp	r3, #8
 8005460:	d8e6      	bhi.n	8005430 <HAL_UART_Init+0x78>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <HAL_UART_Init+0xb0>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	08005555 	.word	0x08005555
 800546c:	08005543 	.word	0x08005543
 8005470:	08005539 	.word	0x08005539
 8005474:	08005431 	.word	0x08005431
 8005478:	080054af 	.word	0x080054af
 800547c:	08005431 	.word	0x08005431
 8005480:	08005431 	.word	0x08005431
 8005484:	08005431 	.word	0x08005431
 8005488:	080054db 	.word	0x080054db
  UART_GETCLOCKSOURCE(huart, clocksource);
 800548c:	4b72      	ldr	r3, [pc, #456]	; (8005658 <HAL_UART_Init+0x2a0>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005498:	d01c      	beq.n	80054d4 <HAL_UART_Init+0x11c>
 800549a:	d846      	bhi.n	800552a <HAL_UART_Init+0x172>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d056      	beq.n	800554e <HAL_UART_Init+0x196>
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a4:	d1c4      	bne.n	8005430 <HAL_UART_Init+0x78>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054aa:	f000 80bd 	beq.w	8005628 <HAL_UART_Init+0x270>
        pclk = HAL_RCC_GetSysClockFreq();
 80054ae:	f7fe fe3d 	bl	800412c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80054b2:	b9a0      	cbnz	r0, 80054de <HAL_UART_Init+0x126>
  huart->RxISR = NULL;
 80054b4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80054b6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054bc:	b31b      	cbz	r3, 8005506 <HAL_UART_Init+0x14e>
    UART_AdvFeatureConfig(huart);
 80054be:	4620      	mov	r0, r4
 80054c0:	f7ff fec4 	bl	800524c <UART_AdvFeatureConfig>
 80054c4:	e01f      	b.n	8005506 <HAL_UART_Init+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054c6:	4b64      	ldr	r3, [pc, #400]	; (8005658 <HAL_UART_Init+0x2a0>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d2:	d139      	bne.n	8005548 <HAL_UART_Init+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054d8:	d066      	beq.n	80055a8 <HAL_UART_Init+0x1f0>
        pclk = (uint32_t) LSE_VALUE;
 80054da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80054e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80054e8:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ea:	f1a0 0210 	sub.w	r2, r0, #16
 80054ee:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d89c      	bhi.n	8005430 <HAL_UART_Init+0x78>
        huart->Instance->BRR = usartdiv;
 80054f6:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 80054f8:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 80054fa:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80054fc:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1db      	bne.n	80054be <HAL_UART_Init+0x106>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800550e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005516:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800551e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005520:	601a      	str	r2, [r3, #0]
}
 8005522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 8005526:	f7ff bee9 	b.w	80052fc <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800552a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800552e:	f47f af7f 	bne.w	8005430 <HAL_UART_Init+0x78>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005532:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005536:	d052      	beq.n	80055de <HAL_UART_Init+0x226>
 8005538:	4849      	ldr	r0, [pc, #292]	; (8005660 <HAL_UART_Init+0x2a8>)
 800553a:	e7d0      	b.n	80054de <HAL_UART_Init+0x126>
 800553c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005540:	d07c      	beq.n	800563c <HAL_UART_Init+0x284>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005542:	f7fe fe47 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005546:	e7b4      	b.n	80054b2 <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005548:	d86a      	bhi.n	8005620 <HAL_UART_Init+0x268>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d163      	bne.n	8005616 <HAL_UART_Init+0x25e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005552:	d070      	beq.n	8005636 <HAL_UART_Init+0x27e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7fe fe26 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
        break;
 8005558:	e7ab      	b.n	80054b2 <HAL_UART_Init+0xfa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800555a:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <HAL_UART_Init+0x2a0>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005566:	d0b5      	beq.n	80054d4 <HAL_UART_Init+0x11c>
 8005568:	d84f      	bhi.n	800560a <HAL_UART_Init+0x252>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ef      	beq.n	800554e <HAL_UART_Init+0x196>
 800556e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005572:	d098      	beq.n	80054a6 <HAL_UART_Init+0xee>
 8005574:	e75c      	b.n	8005430 <HAL_UART_Init+0x78>
    switch (clocksource)
 8005576:	2b08      	cmp	r3, #8
 8005578:	f63f af5a 	bhi.w	8005430 <HAL_UART_Init+0x78>
 800557c:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <HAL_UART_Init+0x1cc>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	08005637 	.word	0x08005637
 8005588:	0800563d 	.word	0x0800563d
 800558c:	080055df 	.word	0x080055df
 8005590:	08005431 	.word	0x08005431
 8005594:	08005629 	.word	0x08005629
 8005598:	08005431 	.word	0x08005431
 800559c:	08005431 	.word	0x08005431
 80055a0:	08005431 	.word	0x08005431
 80055a4:	080055a9 	.word	0x080055a9
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055ac:	6863      	ldr	r3, [r4, #4]
 80055ae:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80055b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80055b6:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055b8:	f1a3 0110 	sub.w	r1, r3, #16
 80055bc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80055c0:	4291      	cmp	r1, r2
 80055c2:	f63f af35 	bhi.w	8005430 <HAL_UART_Init+0x78>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055c6:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ca:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80055ce:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055d0:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80055d2:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 80055d4:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 80055d6:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80055d8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  return ret;
 80055dc:	e790      	b.n	8005500 <HAL_UART_Init+0x148>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055de:	4821      	ldr	r0, [pc, #132]	; (8005664 <HAL_UART_Init+0x2ac>)
 80055e0:	e7e4      	b.n	80055ac <HAL_UART_Init+0x1f4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055e2:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <HAL_UART_Init+0x2a0>)
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80055ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055ee:	f43f af71 	beq.w	80054d4 <HAL_UART_Init+0x11c>
 80055f2:	d806      	bhi.n	8005602 <HAL_UART_Init+0x24a>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0aa      	beq.n	800554e <HAL_UART_Init+0x196>
 80055f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055fc:	f43f af53 	beq.w	80054a6 <HAL_UART_Init+0xee>
 8005600:	e716      	b.n	8005430 <HAL_UART_Init+0x78>
 8005602:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005606:	d094      	beq.n	8005532 <HAL_UART_Init+0x17a>
 8005608:	e712      	b.n	8005430 <HAL_UART_Init+0x78>
 800560a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800560e:	d090      	beq.n	8005532 <HAL_UART_Init+0x17a>
 8005610:	e70e      	b.n	8005430 <HAL_UART_Init+0x78>
}
 8005612:	2001      	movs	r0, #1
 8005614:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561a:	f43f af44 	beq.w	80054a6 <HAL_UART_Init+0xee>
 800561e:	e707      	b.n	8005430 <HAL_UART_Init+0x78>
 8005620:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005624:	d085      	beq.n	8005532 <HAL_UART_Init+0x17a>
 8005626:	e703      	b.n	8005430 <HAL_UART_Init+0x78>
        pclk = HAL_RCC_GetSysClockFreq();
 8005628:	f7fe fd80 	bl	800412c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800562c:	2800      	cmp	r0, #0
 800562e:	f43f af41 	beq.w	80054b4 <HAL_UART_Init+0xfc>
 8005632:	0040      	lsls	r0, r0, #1
 8005634:	e7ba      	b.n	80055ac <HAL_UART_Init+0x1f4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005636:	f7fe fdb5 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
        break;
 800563a:	e7f7      	b.n	800562c <HAL_UART_Init+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 800563c:	f7fe fdca 	bl	80041d4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005640:	e7f4      	b.n	800562c <HAL_UART_Init+0x274>
 8005642:	bf00      	nop
 8005644:	40013800 	.word	0x40013800
 8005648:	40004400 	.word	0x40004400
 800564c:	40004800 	.word	0x40004800
 8005650:	40004c00 	.word	0x40004c00
 8005654:	40005000 	.word	0x40005000
 8005658:	40021000 	.word	0x40021000
 800565c:	08007d50 	.word	0x08007d50
 8005660:	007a1200 	.word	0x007a1200
 8005664:	00f42400 	.word	0x00f42400

08005668 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 8005668:	88c0      	ldrh	r0, [r0, #6]
 800566a:	4770      	bx	lr

0800566c <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 800566c:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 800566e:	8840      	ldrh	r0, [r0, #2]
 8005670:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8005674:	0c00      	lsrs	r0, r0, #16
 8005676:	4770      	bx	lr

08005678 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8005678:	b410      	push	{r4}
 800567a:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800567c:	8802      	ldrh	r2, [r0, #0]
 800567e:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8005680:	fb03 f403 	mul.w	r4, r3, r3
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005684:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8005688:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800568c:	42a2      	cmp	r2, r4
{
 800568e:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005690:	d219      	bcs.n	80056c6 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8005692:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8005696:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800569a:	b2e4      	uxtb	r4, r4
 800569c:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80056a0:	8882      	ldrh	r2, [r0, #4]
 80056a2:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80056a6:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80056a8:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80056ac:	bfbc      	itt	lt
 80056ae:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80056b2:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfbc      	itt	lt
 80056b8:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80056bc:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80056be:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80056c2:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80056c6:	b289      	uxth	r1, r1
 80056c8:	2000      	movs	r0, #0
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f361 000f 	bfi	r0, r1, #0, #16
 80056d0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80056d4:	b005      	add	sp, #20
 80056d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056da:	4770      	bx	lr

080056dc <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 80056e0:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80056e2:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80056e6:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 80056ea:	f880 311b 	strb.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80056ee:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
}
 80056f2:	4770      	bx	lr

080056f4 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 80056f4:	b120      	cbz	r0, 8005700 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 80056f6:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 80056fa:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 80056fc:	9b00      	ldr	r3, [sp, #0]
 80056fe:	60c3      	str	r3, [r0, #12]
  }
}
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop

08005704 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8005704:	b190      	cbz	r0, 800572c <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8005706:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8005708:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800570a:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800570c:	b151      	cbz	r1, 8005724 <FCP_CalcCRC+0x20>
 800570e:	1c82      	adds	r2, r0, #2
 8005710:	3901      	subs	r1, #1
 8005712:	fa52 f181 	uxtab	r1, r2, r1
 8005716:	3001      	adds	r0, #1
    {
      nSum += pFrame->Buffer[idx];
 8005718:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800571c:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800571e:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8005720:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005722:	d1f9      	bne.n	8005718 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8005724:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8005728:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop

08005730 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8005730:	b510      	push	{r4, lr}
 8005732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005736:	4604      	mov	r4, r0
 8005738:	2100      	movs	r1, #0
 800573a:	f002 f987 	bl	8007a4c <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800573e:	2300      	movs	r3, #0
 8005740:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8005744:	bd10      	pop	{r4, pc}
 8005746:	bf00      	nop

08005748 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8005748:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 800574c:	1c53      	adds	r3, r2, #1
 800574e:	b29b      	uxth	r3, r3
{
 8005750:	b470      	push	{r4, r5, r6}
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8005752:	2b7f      	cmp	r3, #127	; 0x7f
{
 8005754:	4606      	mov	r6, r0
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8005756:	bf88      	it	hi
 8005758:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800575a:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
{
 800575e:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8005760:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8005764:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005768:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 800576c:	1eb3      	subs	r3, r6, #2
  int32_t wAux = 0;
 800576e:	2200      	movs	r2, #0
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005770:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005774:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005776:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005778:	d1fa      	bne.n	8005770 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800577a:	2a00      	cmp	r2, #0
 800577c:	bfb8      	it	lt
 800577e:	327f      	addlt	r2, #127	; 0x7f
 8005780:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005782:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005786:	bc70      	pop	{r4, r5, r6}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop

0800578c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 800578c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop

08005794 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005794:	8a03      	ldrh	r3, [r0, #16]
 8005796:	8b42      	ldrh	r2, [r0, #26]
 8005798:	429a      	cmp	r2, r3
 800579a:	d306      	bcc.n	80057aa <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800579c:	8b82      	ldrh	r2, [r0, #28]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d901      	bls.n	80057a6 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 80057a2:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80057a4:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80057a6:	8ac0      	ldrh	r0, [r0, #22]
 80057a8:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 80057aa:	2008      	movs	r0, #8
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop

080057b0 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80057b0:	2300      	movs	r3, #0
 80057b2:	8203      	strh	r3, [r0, #16]
}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <NTC_Init>:
{
 80057b8:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 80057ba:	7803      	ldrb	r3, [r0, #0]
{
 80057bc:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80057be:	b123      	cbz	r3, 80057ca <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80057c0:	8a43      	ldrh	r3, [r0, #18]
 80057c2:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 80057c4:	2200      	movs	r2, #0
 80057c6:	82c2      	strh	r2, [r0, #22]
}
 80057c8:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80057ca:	3004      	adds	r0, #4
 80057cc:	f7fc f9f8 	bl	8001bc0 <RCM_RegisterRegConv>
 80057d0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7ff ffeb 	bl	80057b0 <NTC_Clear>
}
 80057da:	bd10      	pop	{r4, pc}

080057dc <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 80057dc:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80057de:	7803      	ldrb	r3, [r0, #0]
{
 80057e0:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80057e2:	b113      	cbz	r3, 80057ea <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80057e4:	2000      	movs	r0, #0
 80057e6:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 80057e8:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80057ea:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80057ee:	f7fc facf 	bl	8001d90 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80057f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057f6:	4298      	cmp	r0, r3
 80057f8:	d007      	beq.n	800580a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80057fa:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80057fc:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80057fe:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 8005800:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005804:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8005808:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800580a:	4620      	mov	r0, r4
 800580c:	f7ff ffc2 	bl	8005794 <NTC_SetFaultState>
 8005810:	82e0      	strh	r0, [r4, #22]
}
 8005812:	bd10      	pop	{r4, pc}

08005814 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005814:	7803      	ldrb	r3, [r0, #0]
 8005816:	b983      	cbnz	r3, 800583a <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8005818:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800581a:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 800581c:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005820:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8005822:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 8005824:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8005828:	2b00      	cmp	r3, #0
 800582a:	bfbc      	itt	lt
 800582c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005830:	33ff      	addlt	r3, #255	; 0xff
 8005832:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8005836:	b200      	sxth	r0, r0
 8005838:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800583a:	8a80      	ldrh	r0, [r0, #20]
}
 800583c:	b200      	sxth	r0, r0
 800583e:	4770      	bx	lr

08005840 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8005840:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005842:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005844:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8005846:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8005848:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800584a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800584c:	6283      	str	r3, [r0, #40]	; 0x28
}
 800584e:	4770      	bx	lr

08005850 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8005850:	8081      	strh	r1, [r0, #4]
}
 8005852:	4770      	bx	lr

08005854 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8005854:	80c1      	strh	r1, [r0, #6]
}
 8005856:	4770      	bx	lr

08005858 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8005858:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop

08005860 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8005860:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop

08005868 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8005868:	6081      	str	r1, [r0, #8]

  return;
}
 800586a:	4770      	bx	lr

0800586c <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 800586c:	8b00      	ldrh	r0, [r0, #24]
 800586e:	4770      	bx	lr

08005870 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8005870:	8b40      	ldrh	r0, [r0, #26]
 8005872:	4770      	bx	lr

08005874 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005874:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8005876:	4770      	bx	lr

08005878 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005878:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop

08005880 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005880:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005884:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
{
 8005888:	b470      	push	{r4, r5, r6}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800588a:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800588e:	f9b0 4014 	ldrsh.w	r4, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005892:	f9b0 5016 	ldrsh.w	r5, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8005896:	b162      	cbz	r2, 80058b2 <PI_Controller+0x32>
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005898:	6886      	ldr	r6, [r0, #8]
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800589a:	fb01 f102 	mul.w	r1, r1, r2

    if ( wIntegral_sum_temp < 0 )
 800589e:	1872      	adds	r2, r6, r1
 80058a0:	d420      	bmi.n	80058e4 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80058a2:	2e00      	cmp	r6, #0
 80058a4:	db29      	blt.n	80058fa <PI_Controller+0x7a>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80058a6:	68c1      	ldr	r1, [r0, #12]
 80058a8:	4291      	cmp	r1, r2
 80058aa:	db03      	blt.n	80058b4 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80058ac:	6901      	ldr	r1, [r0, #16]
 80058ae:	4291      	cmp	r1, r2
 80058b0:	dc00      	bgt.n	80058b4 <PI_Controller+0x34>
 80058b2:	4611      	mov	r1, r2
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80058b4:	8b86      	ldrh	r6, [r0, #28]
 80058b6:	8bc2      	ldrh	r2, [r0, #30]
 80058b8:	4133      	asrs	r3, r6
 80058ba:	fa41 f202 	asr.w	r2, r1, r2
 80058be:	4413      	add	r3, r2
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80058c0:	429c      	cmp	r4, r3
 80058c2:	da05      	bge.n	80058d0 <PI_Controller+0x50>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80058c4:	1ae3      	subs	r3, r4, r3
 80058c6:	4419      	add	r1, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80058c8:	6081      	str	r1, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80058ca:	4620      	mov	r0, r4
 80058cc:	bc70      	pop	{r4, r5, r6}
 80058ce:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 80058d0:	429d      	cmp	r5, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 80058d2:	bfc9      	itett	gt
 80058d4:	1aeb      	subgt	r3, r5, r3
 80058d6:	b21c      	sxthle	r4, r3
    wOutput_32 = hLowerOutputLimit;
 80058d8:	462c      	movgt	r4, r5
  pHandle->wIntegralTerm += wDischarge;
 80058da:	18c9      	addgt	r1, r1, r3
 80058dc:	6081      	str	r1, [r0, #8]
}
 80058de:	4620      	mov	r0, r4
 80058e0:	bc70      	pop	{r4, r5, r6}
 80058e2:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 80058e4:	2e00      	cmp	r6, #0
 80058e6:	ddde      	ble.n	80058a6 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80058e8:	2900      	cmp	r1, #0
 80058ea:	dddc      	ble.n	80058a6 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80058ec:	68c1      	ldr	r1, [r0, #12]
 80058ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80058f2:	4291      	cmp	r1, r2
 80058f4:	d1de      	bne.n	80058b4 <PI_Controller+0x34>
          wIntegral_sum_temp = INT32_MAX;
 80058f6:	460a      	mov	r2, r1
 80058f8:	e7db      	b.n	80058b2 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80058fa:	4e03      	ldr	r6, [pc, #12]	; (8005908 <PI_Controller+0x88>)
 80058fc:	ea32 0221 	bics.w	r2, r2, r1, asr #32
 8005900:	bf28      	it	cs
 8005902:	4632      	movcs	r2, r6
 8005904:	e7cf      	b.n	80058a6 <PI_Controller+0x26>
 8005906:	bf00      	nop
 8005908:	80000001 	.word	0x80000001

0800590c <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 800590c:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800590e:	e9d0 4242 	ldrd	r4, r2, [r0, #264]	; 0x108
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005912:	8b11      	ldrh	r1, [r2, #24]
 8005914:	89d3      	ldrh	r3, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005916:	8995      	ldrh	r5, [r2, #12]
 8005918:	8ad2      	ldrh	r2, [r2, #22]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800591a:	fb13 f301 	smulbb	r3, r3, r1
{
 800591e:	4606      	mov	r6, r0
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005920:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005924:	fb15 3502 	smlabb	r5, r5, r2, r3
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005928:	f7ff fea0 	bl	800566c <VBS_GetAvBusVoltage_V>
 800592c:	fb04 f200 	mul.w	r2, r4, r0
  wAux /= 65536;
 8005930:	1e2c      	subs	r4, r5, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005932:	480e      	ldr	r0, [pc, #56]	; (800596c <PQD_CalcElMotorPower+0x60>)

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8005934:	490e      	ldr	r1, [pc, #56]	; (8005970 <PQD_CalcElMotorPower+0x64>)
  wAux /= 65536;
 8005936:	bfb8      	it	lt
 8005938:	f504 447f 	addlt.w	r4, r4, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800593c:	fb80 3002 	smull	r3, r0, r0, r2
  wAux /= 65536;
 8005940:	bfb8      	it	lt
 8005942:	34ff      	addlt	r4, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005944:	17d3      	asrs	r3, r2, #31
  wAux /= 65536;
 8005946:	1424      	asrs	r4, r4, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005948:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
  wAux3 = wAux * wAux2;
 800594c:	fb03 f304 	mul.w	r3, r3, r4
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005950:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005954:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8005956:	fb81 2103 	smull	r2, r1, r1, r3
 800595a:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800595c:	4630      	mov	r0, r6
 800595e:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8005962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005966:	f7ff beef 	b.w	8005748 <MPM_CalcElMotorPower>
 800596a:	bf00      	nop
 800596c:	1b4e81b5 	.word	0x1b4e81b5
 8005970:	66666667 	.word	0x66666667

08005974 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005974:	4b17      	ldr	r3, [pc, #92]	; (80059d4 <startTimers+0x60>)
 8005976:	69da      	ldr	r2, [r3, #28]
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005978:	07d2      	lsls	r2, r2, #31
 800597a:	d415      	bmi.n	80059a8 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 800597c:	69da      	ldr	r2, [r3, #28]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005984:	69da      	ldr	r2, [r3, #28]
{
 8005986:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005988:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800598c:	f002 0201 	and.w	r2, r2, #1
 8005990:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005992:	9a01      	ldr	r2, [sp, #4]
 8005994:	694a      	ldr	r2, [r1, #20]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	61da      	str	r2, [r3, #28]
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 80059a4:	b002      	add	sp, #8
 80059a6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 80059a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80059ac:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80059b4:	f041 0120 	orr.w	r1, r1, #32
 80059b8:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80059ba:	6959      	ldr	r1, [r3, #20]
 80059bc:	f041 0101 	orr.w	r1, r1, #1
 80059c0:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80059c8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000

080059d8 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 80059d8:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 80059da:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 80059dc:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 80059e0:	d11a      	bne.n	8005a18 <waitForPolarizationEnd+0x40>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80059e2:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80059e4:	3201      	adds	r2, #1
 80059e6:	0856      	lsrs	r6, r2, #1
 80059e8:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80059ea:	f06f 0702 	mvn.w	r7, #2
 80059ee:	6107      	str	r7, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80059f0:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80059f2:	781c      	ldrb	r4, [r3, #0]
 80059f4:	2c0f      	cmp	r4, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80059f6:	f102 0501 	add.w	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 80059fa:	d80b      	bhi.n	8005a14 <waitForPolarizationEnd+0x3c>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80059fc:	6904      	ldr	r4, [r0, #16]
 80059fe:	07a4      	lsls	r4, r4, #30
 8005a00:	d5f7      	bpl.n	80059f2 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8005a02:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005a04:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005a06:	6107      	str	r7, [r0, #16]
 8005a08:	d8f3      	bhi.n	80059f2 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8005a0a:	781c      	ldrb	r4, [r3, #0]
 8005a0c:	2c0f      	cmp	r4, #15
 8005a0e:	d8f0      	bhi.n	80059f2 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8005a10:	2301      	movs	r3, #1
 8005a12:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8005a14:	bcf0      	pop	{r4, r5, r6, r7}
 8005a16:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8005a18:	2c60      	cmp	r4, #96	; 0x60
 8005a1a:	d1e3      	bne.n	80059e4 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8005a1c:	3201      	adds	r2, #1
 8005a1e:	0156      	lsls	r6, r2, #5
 8005a20:	e7e3      	b.n	80059ea <waitForPolarizationEnd+0x12>
 8005a22:	bf00      	nop

08005a24 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8005a24:	6843      	ldr	r3, [r0, #4]
 8005a26:	4718      	bx	r3

08005a28 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8005a28:	b470      	push	{r4, r5, r6}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005a2a:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005a2e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8005a30:	b083      	sub	sp, #12
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005a32:	140c      	asrs	r4, r1, #16
{
 8005a34:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005a36:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005a3a:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005a3c:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005a40:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8005a44:	eb01 0344 	add.w	r3, r1, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005a48:	ebc1 0144 	rsb	r1, r1, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005a4c:	eb03 75d3 	add.w	r5, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005a50:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005a58:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005a5c:	ea4f 0565 	mov.w	r5, r5, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005a60:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8005a64:	db77      	blt.n	8005b56 <PWMC_SetPhaseVoltage+0x12e>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8005a66:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005a6a:	db4e      	blt.n	8005b0a <PWMC_SetPhaseVoltage+0xe2>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005a6c:	1aad      	subs	r5, r5, r2
 8005a6e:	bf44      	itt	mi
 8005a70:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005a74:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	bfbc      	itt	lt
 8005a7c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005a80:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bfb8      	it	lt
 8005a88:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005a8c:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005a90:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005a94:	bfb8      	it	lt
 8005a96:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8005a9a:	2401      	movs	r4, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8005a9c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005aa0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8005aa4:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8005aa8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8005aac:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005aae:	87c2      	strh	r2, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8005ab0:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8005ab4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005ab8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005abc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005ac0:	b292      	uxth	r2, r2
 8005ac2:	b289      	uxth	r1, r1
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005ac8:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005aca:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8005acc:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8005ace:	d118      	bne.n	8005b02 <PWMC_SetPhaseVoltage+0xda>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8005ad0:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8005ad4:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8005ad8:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005ada:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8005ade:	bfcc      	ite	gt
 8005ae0:	1912      	addgt	r2, r2, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8005ae2:	1b12      	suble	r2, r2, r4
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	8642      	strh	r2, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8005ae8:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8005aec:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8005aee:	bfcc      	ite	gt
 8005af0:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005af2:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8005af4:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005af6:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8005af8:	bfcc      	ite	gt
 8005afa:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8005afc:	1b1b      	suble	r3, r3, r4
 8005afe:	8681      	strh	r1, [r0, #52]	; 0x34
 8005b00:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005b02:	6983      	ldr	r3, [r0, #24]
}
 8005b04:	b003      	add	sp, #12
 8005b06:	bc70      	pop	{r4, r5, r6}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005b08:	4718      	bx	r3
      if ( wX <= 0 )
 8005b0a:	2c00      	cmp	r4, #0
 8005b0c:	dd47      	ble.n	8005b9e <PWMC_SetPhaseVoltage+0x176>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005b0e:	1aa5      	subs	r5, r4, r2
 8005b10:	bf44      	itt	mi
 8005b12:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005b16:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	bfb8      	it	lt
 8005b1e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8005b22:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8005b26:	bfb8      	it	lt
 8005b28:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8005b2c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005b30:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005b32:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005b34:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005b38:	bfb8      	it	lt
 8005b3a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005b3e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005b42:	bfb8      	it	lt
 8005b44:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005b48:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->highDuty = wTimePhC;
 8005b4c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005b50:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005b52:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8005b54:	e7ac      	b.n	8005ab0 <PWMC_SetPhaseVoltage+0x88>
    if ( wZ < 0 )
 8005b56:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005b5a:	db69      	blt.n	8005c30 <PWMC_SetPhaseVoltage+0x208>
      if ( wX <= 0 )
 8005b5c:	2c00      	cmp	r4, #0
 8005b5e:	dd43      	ble.n	8005be8 <PWMC_SetPhaseVoltage+0x1c0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005b60:	1b2d      	subs	r5, r5, r4
 8005b62:	bf48      	it	mi
 8005b64:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8005b68:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005b6c:	bf48      	it	mi
 8005b6e:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bfb8      	it	lt
 8005b76:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8005b7a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005b7e:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005b82:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8005b86:	bfb8      	it	lt
 8005b88:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8005b8c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005b90:	eb03 4164 	add.w	r1, r3, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8005b94:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005b96:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005b98:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005b9c:	e788      	b.n	8005ab0 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005b9e:	1b2d      	subs	r5, r5, r4
 8005ba0:	bf44      	itt	mi
 8005ba2:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005ba6:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bfb8      	it	lt
 8005bae:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8005bb2:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8005bb6:	bfb8      	it	lt
 8005bb8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8005bbc:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8005bc0:	1e21      	subs	r1, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005bc2:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005bc6:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005bca:	bfb8      	it	lt
 8005bcc:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8005bd0:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005bd4:	bfb8      	it	lt
 8005bd6:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8005bda:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->highDuty = wTimePhB;
 8005bde:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8005be2:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005be4:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8005be6:	e763      	b.n	8005ab0 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005be8:	1aa5      	subs	r5, r4, r2
 8005bea:	bf44      	itt	mi
 8005bec:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005bf0:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	bfb8      	it	lt
 8005bf8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8005bfc:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8005c00:	bfb8      	it	lt
 8005c02:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8005c06:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005c0a:	08b2      	lsrs	r2, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005c0c:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005c0e:	eb02 42a5 	add.w	r2, r2, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005c12:	bfb8      	it	lt
 8005c14:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005c18:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005c1c:	bfb8      	it	lt
 8005c1e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005c22:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8005c26:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005c28:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005c2a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005c2e:	e73f      	b.n	8005ab0 <PWMC_SetPhaseVoltage+0x88>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005c30:	1aad      	subs	r5, r5, r2
 8005c32:	bf44      	itt	mi
 8005c34:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8005c38:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	bfbc      	itt	lt
 8005c40:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005c44:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	bfb8      	it	lt
 8005c4c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005c50:	ea4f 0296 	mov.w	r2, r6, lsr #2
 8005c54:	eb02 42a5 	add.w	r2, r2, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005c58:	bfb8      	it	lt
 8005c5a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8005c5e:	2404      	movs	r4, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8005c60:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005c64:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8005c68:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8005c6c:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005c6e:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8005c70:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8005c74:	e71c      	b.n	8005ab0 <PWMC_SetPhaseVoltage+0x88>
 8005c76:	bf00      	nop

08005c78 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8005c78:	6883      	ldr	r3, [r0, #8]
 8005c7a:	4718      	bx	r3

08005c7c <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	4604      	mov	r4, r0
 8005c80:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8005c82:	b199      	cbz	r1, 8005cac <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8005c84:	2901      	cmp	r1, #1
 8005c86:	d002      	beq.n	8005c8e <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8005c88:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8005c8a:	b002      	add	sp, #8
 8005c8c:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8005c8e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005c92:	b1cb      	cbz	r3, 8005cc8 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	9101      	str	r1, [sp, #4]
 8005c9a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f2      	bne.n	8005c88 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8005ca2:	6903      	ldr	r3, [r0, #16]
 8005ca4:	4798      	blx	r3
        retVal = true;
 8005ca6:	9901      	ldr	r1, [sp, #4]
 8005ca8:	4608      	mov	r0, r1
 8005caa:	e7ee      	b.n	8005c8a <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8005cac:	f7ff ffe4 	bl	8005c78 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8005cb0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005cb4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e5      	bne.n	8005c88 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	4798      	blx	r3
      retVal = true;
 8005cc2:	2001      	movs	r0, #1
}
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd10      	pop	{r4, pc}
      retVal = true;
 8005cc8:	4608      	mov	r0, r1
}
 8005cca:	b002      	add	sp, #8
 8005ccc:	bd10      	pop	{r4, pc}
 8005cce:	bf00      	nop

08005cd0 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005cd0:	69c3      	ldr	r3, [r0, #28]
 8005cd2:	4718      	bx	r3

08005cd4 <R3_1_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005cd4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8005cd6:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8005cda:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005cdc:	685c      	ldr	r4, [r3, #4]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8005cde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005ce2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8005ce6:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 8005ce8:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005cea:	6863      	ldr	r3, [r4, #4]
 8005cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf0:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8005cf2:	2a05      	cmp	r2, #5
 8005cf4:	f200 8099 	bhi.w	8005e2a <R3_1_GetPhaseCurrents+0x156>
 8005cf8:	e8df f002 	tbb	[pc, r2]
 8005cfc:	031e1e38 	.word	0x031e1e38
 8005d00:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005d02:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8005d04:	4b4c      	ldr	r3, [pc, #304]	; (8005e38 <R3_1_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005d06:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8005d08:	429c      	cmp	r4, r3
 8005d0a:	da55      	bge.n	8005db8 <R3_1_GetPhaseCurrents+0xe4>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8005d0c:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8005d0e:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8005d10:	4f49      	ldr	r7, [pc, #292]	; (8005e38 <R3_1_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8005d12:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8005d14:	42ba      	cmp	r2, r7
 8005d16:	da55      	bge.n	8005dc4 <R3_1_GetPhaseCurrents+0xf0>
      {
        Iab->b = -INT16_MAX;
 8005d18:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005d1c:	804f      	strh	r7, [r1, #2]
 8005d1e:	b2ab      	uxth	r3, r5
 8005d20:	f248 0201 	movw	r2, #32769	; 0x8001
      break;
  }

  pHandle->_Super.Ia = Iab->a;
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005d24:	4413      	add	r3, r2
 8005d26:	425b      	negs	r3, r3
  pHandle->_Super.Ia = Iab->a;
 8005d28:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 8005d2c:	f8a0 704a 	strh.w	r7, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005d30:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8005d34:	bcf0      	pop	{r4, r5, r6, r7}
 8005d36:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005d38:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8005d3a:	4b3f      	ldr	r3, [pc, #252]	; (8005e38 <R3_1_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005d3c:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	db34      	blt.n	8005dac <R3_1_GetPhaseCurrents+0xd8>
      else  if ( Aux > INT16_MAX )
 8005d42:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005d46:	db68      	blt.n	8005e1a <R3_1_GetPhaseCurrents+0x146>
        Iab->a = INT16_MAX;
 8005d48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	800a      	strh	r2, [r1, #0]
 8005d50:	4614      	mov	r4, r2
 8005d52:	4615      	mov	r5, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8005d54:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005d56:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8005d58:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8005d5a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005d5e:	db44      	blt.n	8005dea <R3_1_GetPhaseCurrents+0x116>
        Iab->b = INT16_MAX;
 8005d60:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005d64:	4622      	mov	r2, r4
 8005d66:	804c      	strh	r4, [r1, #2]
 8005d68:	4627      	mov	r7, r4
 8005d6a:	e7db      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8005d6c:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8005d6e:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <R3_1_GetPhaseCurrents+0x164>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8005d70:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8005d72:	429c      	cmp	r4, r3
 8005d74:	db14      	blt.n	8005da0 <R3_1_GetPhaseCurrents+0xcc>
      else  if ( Aux > INT16_MAX )
 8005d76:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005d7a:	db43      	blt.n	8005e04 <R3_1_GetPhaseCurrents+0x130>
        Iab->b = INT16_MAX;
 8005d7c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005d80:	461a      	mov	r2, r3
 8005d82:	804b      	strh	r3, [r1, #2]
 8005d84:	461c      	mov	r4, r3
 8005d86:	461f      	mov	r7, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8005d88:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8005d8a:	1b73      	subs	r3, r6, r5
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8005d8c:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8005d8e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005d92:	db23      	blt.n	8005ddc <R3_1_GetPhaseCurrents+0x108>
        Iab->a = INT16_MAX;
 8005d94:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8005d98:	4623      	mov	r3, r4
 8005d9a:	800c      	strh	r4, [r1, #0]
 8005d9c:	4625      	mov	r5, r4
 8005d9e:	e7c1      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
        Iab->b = -INT16_MAX;
 8005da0:	461c      	mov	r4, r3
 8005da2:	804b      	strh	r3, [r1, #2]
 8005da4:	461f      	mov	r7, r3
 8005da6:	f248 0201 	movw	r2, #32769	; 0x8001
 8005daa:	e7ed      	b.n	8005d88 <R3_1_GetPhaseCurrents+0xb4>
        Iab->a = -INT16_MAX;
 8005dac:	461c      	mov	r4, r3
 8005dae:	800b      	strh	r3, [r1, #0]
 8005db0:	461d      	mov	r5, r3
 8005db2:	f248 0301 	movw	r3, #32769	; 0x8001
 8005db6:	e7cd      	b.n	8005d54 <R3_1_GetPhaseCurrents+0x80>
      else  if ( Aux > INT16_MAX )
 8005db8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005dbc:	db1c      	blt.n	8005df8 <R3_1_GetPhaseCurrents+0x124>
        Iab->a = INT16_MAX;
 8005dbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005dc2:	e7a3      	b.n	8005d0c <R3_1_GetPhaseCurrents+0x38>
      else  if ( Aux > INT16_MAX )
 8005dc4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005dc8:	db20      	blt.n	8005e0c <R3_1_GetPhaseCurrents+0x138>
        Iab->b = INT16_MAX;
 8005dca:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005dce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005dd2:	804b      	strh	r3, [r1, #2]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	b2ab      	uxth	r3, r5
 8005dda:	e7a3      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
      else  if ( Aux < -INT16_MAX )
 8005ddc:	4d16      	ldr	r5, [pc, #88]	; (8005e38 <R3_1_GetPhaseCurrents+0x164>)
 8005dde:	42ac      	cmp	r4, r5
 8005de0:	da1f      	bge.n	8005e22 <R3_1_GetPhaseCurrents+0x14e>
        Iab->a = -INT16_MAX;
 8005de2:	800d      	strh	r5, [r1, #0]
 8005de4:	f248 0301 	movw	r3, #32769	; 0x8001
 8005de8:	e79c      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
      else  if ( Aux < -INT16_MAX )
 8005dea:	4f13      	ldr	r7, [pc, #76]	; (8005e38 <R3_1_GetPhaseCurrents+0x164>)
 8005dec:	42ba      	cmp	r2, r7
 8005dee:	da05      	bge.n	8005dfc <R3_1_GetPhaseCurrents+0x128>
        Iab->b = -INT16_MAX;
 8005df0:	804f      	strh	r7, [r1, #2]
 8005df2:	f248 0201 	movw	r2, #32769	; 0x8001
 8005df6:	e795      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
        Iab->a = ( int16_t )Aux;
 8005df8:	800c      	strh	r4, [r1, #0]
 8005dfa:	e788      	b.n	8005d0e <R3_1_GetPhaseCurrents+0x3a>
        Iab->b = ( int16_t )Aux;
 8005dfc:	b217      	sxth	r7, r2
 8005dfe:	804f      	strh	r7, [r1, #2]
 8005e00:	b292      	uxth	r2, r2
 8005e02:	e78f      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
        Iab->b = ( int16_t )Aux;
 8005e04:	b227      	sxth	r7, r4
 8005e06:	804f      	strh	r7, [r1, #2]
 8005e08:	b2a2      	uxth	r2, r4
 8005e0a:	e7bd      	b.n	8005d88 <R3_1_GetPhaseCurrents+0xb4>
        Iab->b = ( int16_t )Aux;
 8005e0c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005e10:	b217      	sxth	r7, r2
 8005e12:	b2ab      	uxth	r3, r5
 8005e14:	804f      	strh	r7, [r1, #2]
 8005e16:	b292      	uxth	r2, r2
 8005e18:	e784      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
        Iab->a = ( int16_t )Aux;
 8005e1a:	b225      	sxth	r5, r4
 8005e1c:	800d      	strh	r5, [r1, #0]
 8005e1e:	b2a3      	uxth	r3, r4
 8005e20:	e798      	b.n	8005d54 <R3_1_GetPhaseCurrents+0x80>
        Iab->a = ( int16_t )Aux;
 8005e22:	b225      	sxth	r5, r4
 8005e24:	800d      	strh	r5, [r1, #0]
 8005e26:	b2a3      	uxth	r3, r4
 8005e28:	e77c      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
 8005e2a:	f9b1 5000 	ldrsh.w	r5, [r1]
 8005e2e:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8005e32:	880b      	ldrh	r3, [r1, #0]
 8005e34:	884a      	ldrh	r2, [r1, #2]
 8005e36:	e775      	b.n	8005d24 <R3_1_GetPhaseCurrents+0x50>
 8005e38:	ffff8001 	.word	0xffff8001

08005e3c <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8005e3c:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e3e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8005e40:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8005e44:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8005e48:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e4c:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8005e4e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8005e50:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8005e52:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005e54:	635d      	str	r5, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8005e56:	3a01      	subs	r2, #1
 8005e58:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005e5a:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005e5c:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 8005e66:	bf14      	ite	ne
 8005e68:	2001      	movne	r0, #1
 8005e6a:	2000      	moveq	r0, #0
 8005e6c:	bc30      	pop	{r4, r5}
 8005e6e:	4770      	bx	lr

08005e70 <R3_1_SetADCSampPointSectX>:
{
 8005e70:	b470      	push	{r4, r5, r6}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8005e72:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
 8005e76:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8005e78:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8005e7a:	1aca      	subs	r2, r1, r3
 8005e7c:	f8b4 6072 	ldrh.w	r6, [r4, #114]	; 0x72
 8005e80:	b292      	uxth	r2, r2
 8005e82:	42b2      	cmp	r2, r6
 8005e84:	d914      	bls.n	8005eb0 <R3_1_SetADCSampPointSectX+0x40>
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8005e86:	1e4b      	subs	r3, r1, #1
    pHandle->_Super.Sector = SECTOR_5;
 8005e88:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8005e8a:	b29b      	uxth	r3, r3
    pHandle->_Super.Sector = SECTOR_5;
 8005e8c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e90:	6862      	ldr	r2, [r4, #4]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8005e92:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8005e94:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8005e96:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005e98:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005e9a:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005e9c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005e9e:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005ea0:	6853      	ldr	r3, [r2, #4]
 8005ea2:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 8005ea6:	bf14      	ite	ne
 8005ea8:	2001      	movne	r0, #1
 8005eaa:	2000      	moveq	r0, #0
 8005eac:	bc70      	pop	{r4, r5, r6}
 8005eae:	4770      	bx	lr
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8005eb0:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
 8005eb2:	1b5d      	subs	r5, r3, r5
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8005eb4:	b2ad      	uxth	r5, r5
 8005eb6:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8005eba:	d904      	bls.n	8005ec6 <R3_1_SetADCSampPointSectX+0x56>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8005ebc:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	e7e4      	b.n	8005e90 <R3_1_SetADCSampPointSectX+0x20>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8005ec6:	4433      	add	r3, r6
 8005ec8:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8005eca:	4299      	cmp	r1, r3
 8005ecc:	d8e0      	bhi.n	8005e90 <R3_1_SetADCSampPointSectX+0x20>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8005ed4:	2280      	movs	r2, #128	; 0x80
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8005ed6:	b29b      	uxth	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8005ed8:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8005edc:	e7d8      	b.n	8005e90 <R3_1_SetADCSampPointSectX+0x20>
 8005ede:	bf00      	nop

08005ee0 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8005ee0:	b470      	push	{r4, r5, r6}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005ee2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8005ee4:	f890 406f 	ldrb.w	r4, [r0, #111]	; 0x6f
 8005ee8:	685a      	ldr	r2, [r3, #4]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8005eea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005eee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8005ef2:	6826      	ldr	r6, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005ef4:	681d      	ldr	r5, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005ef6:	6853      	ldr	r3, [r2, #4]
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efc:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005efe:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8005f02:	2b0f      	cmp	r3, #15
 8005f04:	d80b      	bhi.n	8005f1e <R3_1_HFCurrentsPolarizationAB+0x3e>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005f06:	e9d0 4217 	ldrd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8005f0a:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
    pHandle-> PhaseAOffset += ADCDataReg1;
 8005f0e:	4434      	add	r4, r6
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005f10:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8005f12:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005f14:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8005f1e:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8005f20:	bc70      	pop	{r4, r5, r6}
  Iab->a = 0;
 8005f22:	600b      	str	r3, [r1, #0]
}
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop

08005f28 <R3_1_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f28:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8005f2a:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005f2c:	f890 406f 	ldrb.w	r4, [r0, #111]	; 0x6f
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f30:	685a      	ldr	r2, [r3, #4]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8005f32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	681c      	ldr	r4, [r3, #0]
 8005f3a:	6853      	ldr	r3, [r2, #4]
 8005f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f40:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005f42:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d808      	bhi.n	8005f5c <R3_1_HFCurrentsPolarizationC+0x34>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8005f4a:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005f4e:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8005f50:	3301      	adds	r3, #1
 8005f52:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005f54:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005f56:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005f5a:	6642      	str	r2, [r0, #100]	; 0x64
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8005f5c:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8005f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8005f62:	600b      	str	r3, [r1, #0]
}
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <R3_1_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f68:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005f6a:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f6c:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005f6e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005f72:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005f74:	f06f 0001 	mvn.w	r0, #1
 8005f78:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005f7a:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005f7c:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005f7e:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005f80:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8005f82:	07db      	lsls	r3, r3, #31
 8005f84:	d5fc      	bpl.n	8005f80 <R3_1_TurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005f86:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f8c:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005f8e:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d000      	beq.n	8005f98 <R3_1_TurnOnLowSides+0x30>
 8005f96:	4770      	bx	lr
{
 8005f98:	b470      	push	{r4, r5, r6}
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005f9a:	e9d1 5006 	ldrd	r5, r0, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005f9e:	6a0b      	ldr	r3, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8005fa0:	f8b1 606c 	ldrh.w	r6, [r1, #108]	; 0x6c
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8005fa4:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8005fa8:	f8b1 2070 	ldrh.w	r2, [r1, #112]	; 0x70
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005fac:	61ae      	str	r6, [r5, #24]
 8005fae:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8005fb0:	bc70      	pop	{r4, r5, r6}
 8005fb2:	619a      	str	r2, [r3, #24]
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop

08005fb8 <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005fb8:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8005fba:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005fbe:	684b      	ldr	r3, [r1, #4]
{
 8005fc0:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005fc2:	2400      	movs	r4, #0
 8005fc4:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8005fc8:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005fca:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8005fce:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005fd0:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005fd2:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005fd4:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005fd8:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005fda:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8005fdc:	07d2      	lsls	r2, r2, #31
 8005fde:	d5fc      	bpl.n	8005fda <R3_1_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005fe0:	f06f 0201 	mvn.w	r2, #1
 8005fe4:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005ff6:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 8005ffa:	2a02      	cmp	r2, #2
 8005ffc:	d008      	beq.n	8006010 <R3_1_SwitchOnPWM+0x58>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005ffe:	f06f 0201 	mvn.w	r2, #1
 8006002:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 800600a:	bc30      	pop	{r4, r5}
 800600c:	60da      	str	r2, [r3, #12]
 800600e:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006010:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006012:	698c      	ldr	r4, [r1, #24]
 8006014:	f8b1 506c 	ldrh.w	r5, [r1, #108]	; 0x6c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006018:	f240 5255 	movw	r2, #1365	; 0x555
 800601c:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800601e:	e9d1 0207 	ldrd	r0, r2, [r1, #28]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006022:	d007      	beq.n	8006034 <R3_1_SwitchOnPWM+0x7c>
 8006024:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006026:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800602a:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 800602e:	6184      	str	r4, [r0, #24]
 8006030:	6191      	str	r1, [r2, #24]
}
 8006032:	e7e4      	b.n	8005ffe <R3_1_SwitchOnPWM+0x46>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8006034:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006036:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800603a:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 800603e:	6284      	str	r4, [r0, #40]	; 0x28
 8006040:	6291      	str	r1, [r2, #40]	; 0x28
}
 8006042:	e7dc      	b.n	8005ffe <R3_1_SwitchOnPWM+0x46>

08006044 <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006044:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8006046:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006048:	68d3      	ldr	r3, [r2, #12]
 800604a:	f023 0301 	bic.w	r3, r3, #1
{
 800604e:	b430      	push	{r4, r5}

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8006050:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 8006054:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006056:	6c53      	ldr	r3, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006058:	2500      	movs	r5, #0
 800605a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800605e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 8006062:	6453      	str	r3, [r2, #68]	; 0x44
  if ( pHandle->BrakeActionLock == true )
 8006064:	b91c      	cbnz	r4, 800606e <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006066:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 800606a:	2b02      	cmp	r3, #2
 800606c:	d00a      	beq.n	8006084 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800606e:	f06f 0301 	mvn.w	r3, #1
 8006072:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006074:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006076:	07db      	lsls	r3, r3, #31
 8006078:	d5fc      	bpl.n	8006074 <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800607a:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

}
 800607e:	bc30      	pop	{r4, r5}
 8006080:	6113      	str	r3, [r2, #16]
 8006082:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006084:	e9d1 4006 	ldrd	r4, r0, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006088:	6a0b      	ldr	r3, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800608a:	f8b1 506c 	ldrh.w	r5, [r1, #108]	; 0x6c
  WRITE_REG(GPIOx->BRR, PinMask);
 800608e:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006090:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006094:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8006098:	6284      	str	r4, [r0, #40]	; 0x28
 800609a:	6299      	str	r1, [r3, #40]	; 0x28
}
 800609c:	e7e7      	b.n	800606e <R3_1_SwitchOffPWM+0x2a>
 800609e:	bf00      	nop

080060a0 <R3_1_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80060a0:	6f42      	ldr	r2, [r0, #116]	; 0x74
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 80060a2:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 80060a4:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80060a6:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80060a8:	686c      	ldr	r4, [r5, #4]
 80060aa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80060ae:	606c      	str	r4, [r5, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 80060b0:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 80060b4:	480c      	ldr	r0, [pc, #48]	; (80060e8 <R3_1_RLGetPhaseCurrents+0x48>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 80060b6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80060ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	1a9b      	subs	r3, r3, r2
  if ( wAux > -INT16_MAX )
 80060c0:	4283      	cmp	r3, r0
 80060c2:	db05      	blt.n	80060d0 <R3_1_RLGetPhaseCurrents+0x30>
  {
    if ( wAux < INT16_MAX )
 80060c4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80060c8:	4293      	cmp	r3, r2
 80060ca:	dc0a      	bgt.n	80060e2 <R3_1_RLGetPhaseCurrents+0x42>
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	e000      	b.n	80060d2 <R3_1_RLGetPhaseCurrents+0x32>
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <R3_1_RLGetPhaseCurrents+0x4c>)
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80060d2:	2200      	movs	r2, #0
 80060d4:	f363 020f 	bfi	r2, r3, #0, #16
 80060d8:	f363 421f 	bfi	r2, r3, #16, #16
  pStator_Currents->b = (int16_t)wAux;
}
 80060dc:	bc30      	pop	{r4, r5}
  pStator_Currents->a = (int16_t)wAux;
 80060de:	600a      	str	r2, [r1, #0]
}
 80060e0:	4770      	bx	lr
 80060e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80060e6:	e7f4      	b.n	80060d2 <R3_1_RLGetPhaseCurrents+0x32>
 80060e8:	ffff8002 	.word	0xffff8002
 80060ec:	ffff8001 	.word	0xffff8001

080060f0 <R3_1_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80060f0:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80060f2:	684a      	ldr	r2, [r1, #4]
{
 80060f4:	b470      	push	{r4, r5, r6}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060f6:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80060fa:	2400      	movs	r4, #0
 80060fc:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060fe:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006100:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006102:	07db      	lsls	r3, r3, #31
 8006104:	d5fc      	bpl.n	8006100 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006106:	f06f 0301 	mvn.w	r3, #1
 800610a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800610c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800610e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006112:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006114:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 8006118:	2b02      	cmp	r3, #2
 800611a:	d10b      	bne.n	8006134 <R3_1_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800611c:	e9d1 5006 	ldrd	r5, r0, [r1, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006120:	6a0b      	ldr	r3, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006122:	f8b1 606c 	ldrh.w	r6, [r1, #108]	; 0x6c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006126:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800612a:	f8b1 2070 	ldrh.w	r2, [r1, #112]	; 0x70
  WRITE_REG(GPIOx->BSRR, PinMask);
 800612e:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006130:	6284      	str	r4, [r0, #40]	; 0x28
 8006132:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 8006134:	bc70      	pop	{r4, r5, r6}
 8006136:	4770      	bx	lr

08006138 <R3_1_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006138:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800613a:	2200      	movs	r2, #0
{
 800613c:	b470      	push	{r4, r5, r6}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800613e:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006142:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	06d6      	lsls	r6, r2, #27
 800614a:	d4fc      	bmi.n	8006146 <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	06d5      	lsls	r5, r2, #27
 8006150:	d5fc      	bpl.n	800614c <R3_1_RLSwitchOnPWM+0x14>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8006152:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006156:	2601      	movs	r6, #1
 8006158:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800615a:	f06f 0501 	mvn.w	r5, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800615e:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006160:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006162:	611d      	str	r5, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006164:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006166:	07d2      	lsls	r2, r2, #31
 8006168:	d5fc      	bpl.n	8006164 <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800616a:	f06f 0201 	mvn.w	r2, #1
 800616e:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006176:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800617e:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006180:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 8006184:	2a02      	cmp	r2, #2
 8006186:	d010      	beq.n	80061aa <R3_1_RLSwitchOnPWM+0x72>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8006188:	2203      	movs	r2, #3
 800618a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 800618e:	68a2      	ldr	r2, [r4, #8]
 8006190:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006194:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006198:	f042 0208 	orr.w	r2, r2, #8
 800619c:	60a2      	str	r2, [r4, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_EnableIT_UPDATE( TIMx );



  return;
}
 80061a4:	bc70      	pop	{r4, r5, r6}
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80061aa:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80061ac:	f8b1 606c 	ldrh.w	r6, [r1, #108]	; 0x6c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80061b0:	f240 5255 	movw	r2, #1365	; 0x555
 80061b4:	4215      	tst	r5, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061b6:	e9d1 2506 	ldrd	r2, r5, [r1, #24]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80061ba:	d008      	beq.n	80061ce <R3_1_RLSwitchOnPWM+0x96>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80061bc:	6196      	str	r6, [r2, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061be:	6a0a      	ldr	r2, [r1, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061c0:	f8b1 606e 	ldrh.w	r6, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061c4:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 80061c8:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80061ca:	6291      	str	r1, [r2, #40]	; 0x28
}
 80061cc:	e7dc      	b.n	8006188 <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BRR, PinMask);
 80061ce:	6296      	str	r6, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061d0:	6a0a      	ldr	r2, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061d2:	f8b1 606e 	ldrh.w	r6, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061d6:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 80061da:	62ae      	str	r6, [r5, #40]	; 0x28
 80061dc:	6291      	str	r1, [r2, #40]	; 0x28
}
 80061de:	e7d3      	b.n	8006188 <R3_1_RLSwitchOnPWM+0x50>

080061e0 <R3_1_Init>:
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 80061e0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80061e2:	680b      	ldr	r3, [r1, #0]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80061e4:	684a      	ldr	r2, [r1, #4]
{
 80061e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80061ea:	685c      	ldr	r4, [r3, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 80061ec:	688e      	ldr	r6, [r1, #8]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80061ee:	694d      	ldr	r5, [r1, #20]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80061f0:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80061f4:	f024 0404 	bic.w	r4, r4, #4
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 80061f8:	e9d1 c703 	ldrd	ip, r7, [r1, #12]
 80061fc:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80061fe:	f8c3 e000 	str.w	lr, [r3]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006202:	685c      	ldr	r4, [r3, #4]
    if ( TIMx == TIM1 )
 8006204:	f8df e388 	ldr.w	lr, [pc, #904]	; 8006590 <R3_1_Init+0x3b0>
 8006208:	f024 0420 	bic.w	r4, r4, #32
 800620c:	605c      	str	r4, [r3, #4]
 800620e:	4572      	cmp	r2, lr
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006210:	f04f 0420 	mov.w	r4, #32
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006214:	f8df e37c 	ldr.w	lr, [pc, #892]	; 8006594 <R3_1_Init+0x3b4>
 8006218:	601c      	str	r4, [r3, #0]
 800621a:	f8de 400c 	ldr.w	r4, [lr, #12]
 800621e:	bf0c      	ite	eq
 8006220:	f044 0401 	orreq.w	r4, r4, #1
 8006224:	f044 0402 	orrne.w	r4, r4, #2
{
 8006228:	b082      	sub	sp, #8
 800622a:	f8ce 400c 	str.w	r4, [lr, #12]
    if ( COMP_OCPAx != NULL )
 800622e:	b1be      	cbz	r6, 8006260 <R3_1_Init+0x80>
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 8006230:	f891 407d 	ldrb.w	r4, [r1, #125]	; 0x7d
 8006234:	2c01      	cmp	r4, #1
 8006236:	d00b      	beq.n	8006250 <R3_1_Init+0x70>
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8006238:	6834      	ldr	r4, [r6, #0]
 800623a:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800623e:	2c40      	cmp	r4, #64	; 0x40
 8006240:	f000 8172 	beq.w	8006528 <R3_1_Init+0x348>
 8006244:	6834      	ldr	r4, [r6, #0]
 8006246:	f004 0470 	and.w	r4, r4, #112	; 0x70
        else if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800624a:	2c50      	cmp	r4, #80	; 0x50
 800624c:	f000 80ee 	beq.w	800642c <R3_1_Init+0x24c>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006250:	6834      	ldr	r4, [r6, #0]
 8006252:	f044 0401 	orr.w	r4, r4, #1
 8006256:	6034      	str	r4, [r6, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006258:	6834      	ldr	r4, [r6, #0]
 800625a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800625e:	6034      	str	r4, [r6, #0]
    if ( COMP_OCPBx != NULL )
 8006260:	f1bc 0f00 	cmp.w	ip, #0
 8006264:	d00b      	beq.n	800627e <R3_1_Init+0x9e>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006266:	f8dc 4000 	ldr.w	r4, [ip]
 800626a:	f044 0401 	orr.w	r4, r4, #1
 800626e:	f8cc 4000 	str.w	r4, [ip]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006272:	f8dc 4000 	ldr.w	r4, [ip]
 8006276:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800627a:	f8cc 4000 	str.w	r4, [ip]
    if ( COMP_OCPCx != NULL )
 800627e:	b13f      	cbz	r7, 8006290 <R3_1_Init+0xb0>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006280:	683c      	ldr	r4, [r7, #0]
 8006282:	f044 0401 	orr.w	r4, r4, #1
 8006286:	603c      	str	r4, [r7, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006288:	683c      	ldr	r4, [r7, #0]
 800628a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800628e:	603c      	str	r4, [r7, #0]
    if ( COMP_OVPx != NULL )
 8006290:	b1bd      	cbz	r5, 80062c2 <R3_1_Init+0xe2>
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 8006292:	f891 4080 	ldrb.w	r4, [r1, #128]	; 0x80
 8006296:	2c01      	cmp	r4, #1
 8006298:	d00b      	beq.n	80062b2 <R3_1_Init+0xd2>
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 800629a:	682c      	ldr	r4, [r5, #0]
 800629c:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 80062a0:	2c40      	cmp	r4, #64	; 0x40
 80062a2:	f000 811c 	beq.w	80064de <R3_1_Init+0x2fe>
 80062a6:	682c      	ldr	r4, [r5, #0]
 80062a8:	f004 0470 	and.w	r4, r4, #112	; 0x70
        else if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 80062ac:	2c50      	cmp	r4, #80	; 0x50
 80062ae:	f000 80e9 	beq.w	8006484 <R3_1_Init+0x2a4>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 80062b2:	682c      	ldr	r4, [r5, #0]
 80062b4:	f044 0401 	orr.w	r4, r4, #1
 80062b8:	602c      	str	r4, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 80062ba:	682c      	ldr	r4, [r5, #0]
 80062bc:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80062c0:	602c      	str	r4, [r5, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80062c2:	689c      	ldr	r4, [r3, #8]
    if (LL_ADC_IsEnabled (ADCx) == 0)
 80062c4:	07e6      	lsls	r6, r4, #31
 80062c6:	d563      	bpl.n	8006390 <R3_1_Init+0x1b0>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80062c8:	6813      	ldr	r3, [r2, #0]
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80062d0:	6853      	ldr	r3, [r2, #4]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	6053      	str	r3, [r2, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80062d8:	6993      	ldr	r3, [r2, #24]
 80062da:	f043 0308 	orr.w	r3, r3, #8
 80062de:	6193      	str	r3, [r2, #24]
 80062e0:	6993      	ldr	r3, [r2, #24]
 80062e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062e6:	6193      	str	r3, [r2, #24]
 80062e8:	69d3      	ldr	r3, [r2, #28]
 80062ea:	f043 0308 	orr.w	r3, r3, #8
 80062ee:	61d3      	str	r3, [r2, #28]
 80062f0:	69d3      	ldr	r3, [r2, #28]
 80062f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062f6:	61d3      	str	r3, [r2, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80062f8:	6953      	ldr	r3, [r2, #20]
 80062fa:	f043 0301 	orr.w	r3, r3, #1
 80062fe:	6153      	str	r3, [r2, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8006300:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 8006304:	2b02      	cmp	r3, #2
 8006306:	d029      	beq.n	800635c <R3_1_Init+0x17c>
    if ( pHandle->_Super.Motor == M1 )
 8006308:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800630c:	b933      	cbnz	r3, 800631c <R3_1_Init+0x13c>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800630e:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
 8006312:	2b01      	cmp	r3, #1
 8006314:	d030      	beq.n	8006378 <R3_1_Init+0x198>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006316:	2b03      	cmp	r3, #3
 8006318:	f000 80d9 	beq.w	80064ce <R3_1_Init+0x2ee>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800631c:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8006320:	6113      	str	r3, [r2, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8006322:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 8006326:	b163      	cbz	r3, 8006342 <R3_1_Init+0x162>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8006328:	6913      	ldr	r3, [r2, #16]
 800632a:	05d8      	lsls	r0, r3, #23
 800632c:	d509      	bpl.n	8006342 <R3_1_Init+0x162>
 800632e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8006332:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8006336:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8006338:	6911      	ldr	r1, [r2, #16]
 800633a:	05c9      	lsls	r1, r1, #23
 800633c:	d501      	bpl.n	8006342 <R3_1_Init+0x162>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800633e:	3b01      	subs	r3, #1
 8006340:	d1f9      	bne.n	8006336 <R3_1_Init+0x156>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006342:	68d3      	ldr	r3, [r2, #12]
 8006344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006348:	60d3      	str	r3, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 800634a:	6a13      	ldr	r3, [r2, #32]
 800634c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8006350:	f043 0305 	orr.w	r3, r3, #5
 8006354:	6213      	str	r3, [r2, #32]
}
 8006356:	b002      	add	sp, #8
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800635c:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 8006360:	2b01      	cmp	r3, #1
 8006362:	d109      	bne.n	8006378 <R3_1_Init+0x198>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8006364:	f891 407b 	ldrb.w	r4, [r1, #123]	; 0x7b
 8006368:	2c03      	cmp	r4, #3
 800636a:	d105      	bne.n	8006378 <R3_1_Init+0x198>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800636c:	6313      	str	r3, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800636e:	6953      	ldr	r3, [r2, #20]
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	6153      	str	r3, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006376:	6314      	str	r4, [r2, #48]	; 0x30
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8006378:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800637c:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800637e:	6253      	str	r3, [r2, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8006380:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8006384:	6113      	str	r3, [r2, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8006386:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0d9      	beq.n	8006342 <R3_1_Init+0x162>
 800638e:	e7cb      	b.n	8006328 <R3_1_Init+0x148>
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 8006390:	689c      	ldr	r4, [r3, #8]
 8006392:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 8006396:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800639a:	d01b      	beq.n	80063d4 <R3_1_Init+0x1f4>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800639c:	689d      	ldr	r5, [r3, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800639e:	4c78      	ldr	r4, [pc, #480]	; (8006580 <R3_1_Init+0x3a0>)
 80063a0:	4e78      	ldr	r6, [pc, #480]	; (8006584 <R3_1_Init+0x3a4>)
 80063a2:	6824      	ldr	r4, [r4, #0]
 80063a4:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 80063a8:	609d      	str	r5, [r3, #8]
  MODIFY_REG(ADCx->CR,
 80063aa:	689d      	ldr	r5, [r3, #8]
 80063ac:	09a4      	lsrs	r4, r4, #6
 80063ae:	f025 4510 	bic.w	r5, r5, #2415919104	; 0x90000000
 80063b2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80063b6:	fba6 6404 	umull	r6, r4, r6, r4
 80063ba:	09a4      	lsrs	r4, r4, #6
 80063bc:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 80063c0:	609d      	str	r5, [r3, #8]
 80063c2:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 80063c4:	9c01      	ldr	r4, [sp, #4]
 80063c6:	b12c      	cbz	r4, 80063d4 <R3_1_Init+0x1f4>
      wait_loop_index--;
 80063c8:	9c01      	ldr	r4, [sp, #4]
 80063ca:	3c01      	subs	r4, #1
 80063cc:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 80063ce:	9c01      	ldr	r4, [sp, #4]
 80063d0:	2c00      	cmp	r4, #0
 80063d2:	d1f9      	bne.n	80063c8 <R3_1_Init+0x1e8>
  MODIFY_REG(ADCx->CR,
 80063d4:	689c      	ldr	r4, [r3, #8]
 80063d6:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 80063da:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80063de:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80063e2:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80063e4:	689c      	ldr	r4, [r3, #8]
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	dbfc      	blt.n	80063e4 <R3_1_Init+0x204>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80063ea:	681c      	ldr	r4, [r3, #0]
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 80063ec:	07e5      	lsls	r5, r4, #31
 80063ee:	d408      	bmi.n	8006402 <R3_1_Init+0x222>
  MODIFY_REG(ADCx->CR,
 80063f0:	4d65      	ldr	r5, [pc, #404]	; (8006588 <R3_1_Init+0x3a8>)
 80063f2:	689c      	ldr	r4, [r3, #8]
 80063f4:	402c      	ands	r4, r5
 80063f6:	f044 0401 	orr.w	r4, r4, #1
 80063fa:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80063fc:	681c      	ldr	r4, [r3, #0]
 80063fe:	07e4      	lsls	r4, r4, #31
 8006400:	d5f7      	bpl.n	80063f2 <R3_1_Init+0x212>
  MODIFY_REG(ADCx->CR,
 8006402:	689d      	ldr	r5, [r3, #8]
 8006404:	4e60      	ldr	r6, [pc, #384]	; (8006588 <R3_1_Init+0x3a8>)
 8006406:	4035      	ands	r5, r6
 8006408:	f045 0508 	orr.w	r5, r5, #8
 800640c:	609d      	str	r5, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800640e:	689c      	ldr	r4, [r3, #8]
 8006410:	4034      	ands	r4, r6
 8006412:	f044 0420 	orr.w	r4, r4, #32
 8006416:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 8006418:	68dc      	ldr	r4, [r3, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800641a:	2540      	movs	r5, #64	; 0x40
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800641c:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8006420:	60dc      	str	r4, [r3, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8006422:	601d      	str	r5, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8006424:	685c      	ldr	r4, [r3, #4]
 8006426:	432c      	orrs	r4, r5
 8006428:	605c      	str	r4, [r3, #4]
}
 800642a:	e74d      	b.n	80062c8 <R3_1_Init+0xe8>
 800642c:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 8006430:	fa94 f4a4 	rbit	r4, r4
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8006434:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
 8006438:	fab4 f484 	clz	r4, r4
 800643c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8006598 <R3_1_Init+0x3b8>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 8006440:	f8b1 a076 	ldrh.w	sl, [r1, #118]	; 0x76
  SET_BIT(DACx->SWTRIGR,
 8006444:	f8df e144 	ldr.w	lr, [pc, #324]	; 800658c <R3_1_Init+0x3ac>
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8006448:	fa28 f804 	lsr.w	r8, r8, r4
  
  MODIFY_REG(*preg,
 800644c:	f859 4028 	ldr.w	r4, [r9, r8, lsl #2]
 8006450:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8006454:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8006458:	ea4a 0404 	orr.w	r4, sl, r4
 800645c:	f849 4028 	str.w	r4, [r9, r8, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8006460:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006464:	f044 0402 	orr.w	r4, r4, #2
 8006468:	f8ce 4004 	str.w	r4, [lr, #4]
  return (READ_BIT(DACx->CR,
 800646c:	f8de 4000 	ldr.w	r4, [lr]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 8006470:	03e4      	lsls	r4, r4, #15
 8006472:	f53f aeed 	bmi.w	8006250 <R3_1_Init+0x70>
  SET_BIT(DACx->CR,
 8006476:	f8de 4000 	ldr.w	r4, [lr]
 800647a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800647e:	f8ce 4000 	str.w	r4, [lr]
    while(wait_loop_index != 0UL)
 8006482:	e6e5      	b.n	8006250 <R3_1_Init+0x70>
 8006484:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 8006488:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 800648c:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
 8006490:	fab4 f484 	clz	r4, r4
 8006494:	40e7      	lsrs	r7, r4
 8006496:	f8df e100 	ldr.w	lr, [pc, #256]	; 8006598 <R3_1_Init+0x3b8>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800649a:	f8b1 c078 	ldrh.w	ip, [r1, #120]	; 0x78
  MODIFY_REG(*preg,
 800649e:	f85e 4027 	ldr.w	r4, [lr, r7, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80064a2:	4e3a      	ldr	r6, [pc, #232]	; (800658c <R3_1_Init+0x3ac>)
  MODIFY_REG(*preg,
 80064a4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80064a8:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80064ac:	ea4c 0404 	orr.w	r4, ip, r4
 80064b0:	f84e 4027 	str.w	r4, [lr, r7, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80064b4:	6874      	ldr	r4, [r6, #4]
 80064b6:	f044 0402 	orr.w	r4, r4, #2
 80064ba:	6074      	str	r4, [r6, #4]
  return (READ_BIT(DACx->CR,
 80064bc:	6834      	ldr	r4, [r6, #0]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 80064be:	03e7      	lsls	r7, r4, #15
 80064c0:	f53f aef7 	bmi.w	80062b2 <R3_1_Init+0xd2>
  SET_BIT(DACx->CR,
 80064c4:	6834      	ldr	r4, [r6, #0]
 80064c6:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80064ca:	6034      	str	r4, [r6, #0]
    while(wait_loop_index != 0UL)
 80064cc:	e6f1      	b.n	80062b2 <R3_1_Init+0xd2>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80064ce:	2001      	movs	r0, #1
 80064d0:	6310      	str	r0, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80064d2:	6950      	ldr	r0, [r2, #20]
 80064d4:	f040 0001 	orr.w	r0, r0, #1
 80064d8:	6150      	str	r0, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80064da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80064dc:	e71e      	b.n	800631c <R3_1_Init+0x13c>
 80064de:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 80064e2:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80064e6:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 80064ea:	fab4 f484 	clz	r4, r4
 80064ee:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8006598 <R3_1_Init+0x3b8>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 80064f2:	f8b1 c078 	ldrh.w	ip, [r1, #120]	; 0x78
  SET_BIT(DACx->SWTRIGR,
 80064f6:	4e25      	ldr	r6, [pc, #148]	; (800658c <R3_1_Init+0x3ac>)
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80064f8:	40e7      	lsrs	r7, r4
  MODIFY_REG(*preg,
 80064fa:	f85e 4027 	ldr.w	r4, [lr, r7, lsl #2]
 80064fe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8006502:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8006506:	ea4c 0404 	orr.w	r4, ip, r4
 800650a:	f84e 4027 	str.w	r4, [lr, r7, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 800650e:	6874      	ldr	r4, [r6, #4]
 8006510:	f044 0401 	orr.w	r4, r4, #1
 8006514:	6074      	str	r4, [r6, #4]
  return (READ_BIT(DACx->CR,
 8006516:	6834      	ldr	r4, [r6, #0]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 8006518:	07e4      	lsls	r4, r4, #31
 800651a:	f53f aeca 	bmi.w	80062b2 <R3_1_Init+0xd2>
  SET_BIT(DACx->CR,
 800651e:	6834      	ldr	r4, [r6, #0]
 8006520:	f044 0401 	orr.w	r4, r4, #1
 8006524:	6034      	str	r4, [r6, #0]
    while(wait_loop_index != 0UL)
 8006526:	e6c4      	b.n	80062b2 <R3_1_Init+0xd2>
 8006528:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 800652c:	fa94 f4a4 	rbit	r4, r4
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8006530:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 8006534:	fab4 f484 	clz	r4, r4
 8006538:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006598 <R3_1_Init+0x3b8>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800653c:	f8b1 a076 	ldrh.w	sl, [r1, #118]	; 0x76
  SET_BIT(DACx->SWTRIGR,
 8006540:	f8df e048 	ldr.w	lr, [pc, #72]	; 800658c <R3_1_Init+0x3ac>
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8006544:	fa28 f804 	lsr.w	r8, r8, r4
  MODIFY_REG(*preg,
 8006548:	f859 4028 	ldr.w	r4, [r9, r8, lsl #2]
 800654c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8006550:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8006554:	ea4a 0404 	orr.w	r4, sl, r4
 8006558:	f849 4028 	str.w	r4, [r9, r8, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 800655c:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006560:	f044 0401 	orr.w	r4, r4, #1
 8006564:	f8ce 4004 	str.w	r4, [lr, #4]
  return (READ_BIT(DACx->CR,
 8006568:	f8de 4000 	ldr.w	r4, [lr]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 800656c:	07e4      	lsls	r4, r4, #31
 800656e:	f53f ae6f 	bmi.w	8006250 <R3_1_Init+0x70>
  SET_BIT(DACx->CR,
 8006572:	f8de 4000 	ldr.w	r4, [lr]
 8006576:	f044 0401 	orr.w	r4, r4, #1
 800657a:	f8ce 4000 	str.w	r4, [lr]
    while(wait_loop_index != 0UL)
 800657e:	e667      	b.n	8006250 <R3_1_Init+0x70>
 8006580:	20000680 	.word	0x20000680
 8006584:	053e2d63 	.word	0x053e2d63
 8006588:	7fffffc0 	.word	0x7fffffc0
 800658c:	40007400 	.word	0x40007400
 8006590:	40012c00 	.word	0x40012c00
 8006594:	e0042000 	.word	0xe0042000
 8006598:	40007408 	.word	0x40007408

0800659c <R3_1_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800659c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800659e:	4944      	ldr	r1, [pc, #272]	; (80066b0 <R3_1_CurrentReadingPolarization+0x114>)
{
 80065a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80065a2:	e9d3 6500 	ldrd	r6, r5, [r3]
  pHandle->PhaseAOffset = 0u;
 80065a6:	2200      	movs	r2, #0
  pHandle->PolarizationCounter = 0u;
 80065a8:	f880 206e 	strb.w	r2, [r0, #110]	; 0x6e
  CLEAR_BIT(TIMx->CCER, Channels);
 80065ac:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 80065ae:	65c2      	str	r2, [r0, #92]	; 0x5c
 80065b0:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80065b4:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 80065b8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80065bc:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 80065be:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <R3_1_CurrentReadingPolarization+0x118>)
 80065c0:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80065c2:	2240      	movs	r2, #64	; 0x40
  pHandle->PolarizationSector=SECTOR_5;
 80065c4:	2304      	movs	r3, #4
{
 80065c6:	b083      	sub	sp, #12
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 80065c8:	6041      	str	r1, [r0, #4]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80065ca:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_5;
 80065ce:	f880 306f 	strb.w	r3, [r0, #111]	; 0x6f
  pHandle->_Super.Sector = SECTOR_5;   
 80065d2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 80065d6:	4604      	mov	r4, r0
  R3_1_SwitchOnPWM( &pHandle->_Super );
 80065d8:	f7ff fcee 	bl	8005fb8 <R3_1_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 80065dc:	686b      	ldr	r3, [r5, #4]
 80065de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e2:	2b70      	cmp	r3, #112	; 0x70
 80065e4:	d1fa      	bne.n	80065dc <R3_1_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 80065e6:	68b3      	ldr	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 80065e8:	6f62      	ldr	r2, [r4, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80065ea:	4f33      	ldr	r7, [pc, #204]	; (80066b8 <R3_1_CurrentReadingPolarization+0x11c>)
 80065ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065f4:	f043 0308 	orr.w	r3, r3, #8
 80065f8:	60b3      	str	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 80065fa:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80065fe:	f104 036e 	add.w	r3, r4, #110	; 0x6e
 8006602:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 8006606:	4628      	mov	r0, r5
 8006608:	e9cd 3100 	strd	r3, r1, [sp]
 800660c:	f7ff f9e4 	bl	80059d8 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8006610:	4620      	mov	r0, r4
 8006612:	f7ff fd17 	bl	8006044 <R3_1_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8006616:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 8006618:	4a28      	ldr	r2, [pc, #160]	; (80066bc <R3_1_CurrentReadingPolarization+0x120>)
 800661a:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800661c:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 800661e:	f884 606e 	strb.w	r6, [r4, #110]	; 0x6e
  pHandle->PolarizationSector=SECTOR_1;
 8006622:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  pHandle->_Super.Sector = SECTOR_1; 
 8006626:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800662a:	f7ff fcc5 	bl	8005fb8 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 800662e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006630:	e9dd 3100 	ldrd	r3, r1, [sp]
 8006634:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 8006638:	4628      	mov	r0, r5
 800663a:	f7ff f9cd 	bl	80059d8 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800663e:	4620      	mov	r0, r4
 8006640:	f7ff fd00 	bl	8006044 <R3_1_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8006644:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8006648:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800664a:	481d      	ldr	r0, [pc, #116]	; (80066c0 <R3_1_CurrentReadingPolarization+0x124>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800664c:	6067      	str	r7, [r4, #4]
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800664e:	0909      	lsrs	r1, r1, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8006650:	0912      	lsrs	r2, r2, #4
 8006652:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800665a:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800665c:	61a0      	str	r0, [r4, #24]
 800665e:	f023 0308 	bic.w	r3, r3, #8
 8006662:	61ab      	str	r3, [r5, #24]
 8006664:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8006666:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800666a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800666e:	61aa      	str	r2, [r5, #24]
 8006670:	69ea      	ldr	r2, [r5, #28]
 8006672:	f022 0208 	bic.w	r2, r2, #8
 8006676:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006678:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800667a:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800667c:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800667e:	69ab      	ldr	r3, [r5, #24]
 8006680:	f043 0308 	orr.w	r3, r3, #8
 8006684:	61ab      	str	r3, [r5, #24]
 8006686:	69ab      	ldr	r3, [r5, #24]
 8006688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800668c:	61ab      	str	r3, [r5, #24]
 800668e:	69eb      	ldr	r3, [r5, #28]
 8006690:	f043 0308 	orr.w	r3, r3, #8
 8006694:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006696:	6a2b      	ldr	r3, [r5, #32]
 8006698:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800669c:	f043 0305 	orr.w	r3, r3, #5
  pHandle->_Super.Sector=SECTOR_5;
 80066a0:	2204      	movs	r2, #4
 80066a2:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 80066a4:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  pHandle->_Super.Sector=SECTOR_5;
 80066a8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
}
 80066ac:	b003      	add	sp, #12
 80066ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b0:	08005ee1 	.word	0x08005ee1
 80066b4:	08005e3d 	.word	0x08005e3d
 80066b8:	08005cd5 	.word	0x08005cd5
 80066bc:	08005f29 	.word	0x08005f29
 80066c0:	08005e71 	.word	0x08005e71

080066c4 <R3_1_TIMx_UP_IRQHandler>:
{
 80066c4:	b430      	push	{r4, r5}
 80066c6:	4603      	mov	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80066c8:	6f40      	ldr	r0, [r0, #116]	; 0x74
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80066ca:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 80066ce:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80066d2:	6805      	ldr	r5, [r0, #0]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80066d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80066d8:	6840      	ldr	r0, [r0, #4]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80066da:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80066dc:	430a      	orrs	r2, r1
 80066de:	64ea      	str	r2, [r5, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80066e0:	6842      	ldr	r2, [r0, #4]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80066e2:	2440      	movs	r4, #64	; 0x40
 80066e4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80066e8:	6042      	str	r2, [r0, #4]
}
 80066ea:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80066ee:	f8a3 406c 	strh.w	r4, [r3, #108]	; 0x6c
}
 80066f2:	bc30      	pop	{r4, r5}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop

080066f8 <R3_1_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80066f8:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80066fc:	b923      	cbnz	r3, 8006708 <R3_1_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80066fe:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006700:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8006704:	2a02      	cmp	r2, #2
 8006706:	d004      	beq.n	8006712 <R3_1_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8006708:	2301      	movs	r3, #1
 800670a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 800670e:	3046      	adds	r0, #70	; 0x46
 8006710:	4770      	bx	lr
{
 8006712:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006714:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006718:	f8b3 506c 	ldrh.w	r5, [r3, #108]	; 0x6c
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800671c:	6a1a      	ldr	r2, [r3, #32]
  WRITE_REG(GPIOx->BRR, PinMask);
 800671e:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006720:	f8b3 406e 	ldrh.w	r4, [r3, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006724:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8006728:	628c      	str	r4, [r1, #40]	; 0x28
 800672a:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 800672c:	2301      	movs	r3, #1
 800672e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 8006732:	bc30      	pop	{r4, r5}
 8006734:	3046      	adds	r0, #70	; 0x46
 8006736:	4770      	bx	lr

08006738 <R3_1_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006738:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800673a:	4603      	mov	r3, r0
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800673c:	6850      	ldr	r0, [r2, #4]
 800673e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 8006740:	2101      	movs	r1, #1
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006742:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006746:	6442      	str	r2, [r0, #68]	; 0x44
}
 8006748:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 800674c:	f883 1071 	strb.w	r1, [r3, #113]	; 0x71
  pHandle->BrakeActionLock = true;
 8006750:	f883 1072 	strb.w	r1, [r3, #114]	; 0x72
}
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop

08006758 <R3_1_IsOverCurrentOccurred>:
{
 8006758:	4603      	mov	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 800675a:	f890 0071 	ldrb.w	r0, [r0, #113]	; 0x71
 800675e:	b160      	cbz	r0, 800677a <R3_1_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8006766:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8006768:	2002      	movs	r0, #2
  if ( pHandle->OverCurrentFlag == true )
 800676a:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 800676e:	b11a      	cbz	r2, 8006778 <R3_1_IsOverCurrentOccurred+0x20>
    pHandle->OverCurrentFlag = false;
 8006770:	2200      	movs	r2, #0
    retVal |= MC_BREAK_IN;
 8006772:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8006774:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 8006778:	4770      	bx	lr
 800677a:	2140      	movs	r1, #64	; 0x40
 800677c:	e7f5      	b.n	800676a <R3_1_IsOverCurrentOccurred+0x12>
 800677e:	bf00      	nop

08006780 <R3_1_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8006780:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8006784:	b410      	push	{r4}
  if ( pHandle->_Super.RLDetectionMode == false )
 8006786:	2900      	cmp	r1, #0
 8006788:	d13a      	bne.n	8006800 <R3_1_RLDetectionModeEnable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800678a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800678c:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006794:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006798:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800679c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	f042 0201 	orr.w	r2, r2, #1
 80067a4:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80067a6:	6a1a      	ldr	r2, [r3, #32]
 80067a8:	f022 0204 	bic.w	r2, r2, #4
 80067ac:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80067ae:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80067b0:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 80067b4:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80067b6:	f103 0118 	add.w	r1, r3, #24
 80067ba:	d02f      	beq.n	800681c <R3_1_RLDetectionModeEnable+0x9c>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80067bc:	2a02      	cmp	r2, #2
 80067be:	d10f      	bne.n	80067e0 <R3_1_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80067c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80067ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ce:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80067d0:	6a1a      	ldr	r2, [r3, #32]
 80067d2:	f042 0210 	orr.w	r2, r2, #16
 80067d6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067de:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80067e0:	684a      	ldr	r2, [r1, #4]
 80067e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80067e6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80067ea:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80067ee:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067f6:	621a      	str	r2, [r3, #32]
 80067f8:	6a1a      	ldr	r2, [r3, #32]
 80067fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067fe:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <R3_1_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006802:	4910      	ldr	r1, [pc, #64]	; (8006844 <R3_1_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006804:	4a10      	ldr	r2, [pc, #64]	; (8006848 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006806:	4c11      	ldr	r4, [pc, #68]	; (800684c <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006808:	6043      	str	r3, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 800680a:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800680c:	6144      	str	r4, [r0, #20]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800680e:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006812:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8006816:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800681a:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006822:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006826:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800682a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	f022 0210 	bic.w	r2, r2, #16
 8006832:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006834:	6a1a      	ldr	r2, [r3, #32]
 8006836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800683a:	621a      	str	r2, [r3, #32]
}
 800683c:	e7d0      	b.n	80067e0 <R3_1_RLDetectionModeEnable+0x60>
 800683e:	bf00      	nop
 8006840:	080060a1 	.word	0x080060a1
 8006844:	08006139 	.word	0x08006139
 8006848:	08006045 	.word	0x08006045
 800684c:	080060f1 	.word	0x080060f1

08006850 <R3_1_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8006850:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8006854:	2b00      	cmp	r3, #0
 8006856:	d064      	beq.n	8006922 <R3_1_RLDetectionModeDisable+0xd2>
{
 8006858:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800685a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800685c:	684b      	ldr	r3, [r1, #4]
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	06d4      	lsls	r4, r2, #27
 8006862:	d5fc      	bpl.n	800685e <R3_1_RLDetectionModeDisable+0xe>
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	06d2      	lsls	r2, r2, #27
 8006868:	d4fc      	bmi.n	8006864 <R3_1_RLDetectionModeDisable+0x14>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006870:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006874:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006878:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006882:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 8006886:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006888:	f103 0518 	add.w	r5, r3, #24
 800688c:	d04a      	beq.n	8006924 <R3_1_RLDetectionModeDisable+0xd4>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800688e:	2a02      	cmp	r2, #2
 8006890:	d103      	bne.n	800689a <R3_1_RLDetectionModeDisable+0x4a>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	f022 0204 	bic.w	r2, r2, #4
 8006898:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800689a:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 800689e:	0864      	lsrs	r4, r4, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80068a0:	635c      	str	r4, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80068a8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80068ac:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80068b0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80068b2:	6a1a      	ldr	r2, [r3, #32]
 80068b4:	f042 0210 	orr.w	r2, r2, #16
 80068b8:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80068ba:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 80068be:	2a01      	cmp	r2, #1
 80068c0:	d03a      	beq.n	8006938 <R3_1_RLDetectionModeDisable+0xe8>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80068c2:	2a02      	cmp	r2, #2
 80068c4:	d103      	bne.n	80068ce <R3_1_RLDetectionModeDisable+0x7e>
  CLEAR_BIT(TIMx->CCER, Channels);
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068cc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80068ce:	639c      	str	r4, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 80068d0:	686a      	ldr	r2, [r5, #4]
 80068d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80068da:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80068de:	606a      	str	r2, [r5, #4]
  SET_BIT(TIMx->CCER, Channels);
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068e6:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80068e8:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 80068ec:	2a01      	cmp	r2, #1
 80068ee:	d01e      	beq.n	800692e <R3_1_RLDetectionModeDisable+0xde>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80068f0:	2a02      	cmp	r2, #2
 80068f2:	d103      	bne.n	80068fc <R3_1_RLDetectionModeDisable+0xac>
  CLEAR_BIT(TIMx->CCER, Channels);
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068fa:	621a      	str	r2, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 80068fc:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80068fe:	63dc      	str	r4, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 8006900:	68d3      	ldr	r3, [r2, #12]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006902:	4c10      	ldr	r4, [pc, #64]	; (8006944 <R3_1_RLDetectionModeDisable+0xf4>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006904:	4910      	ldr	r1, [pc, #64]	; (8006948 <R3_1_RLDetectionModeDisable+0xf8>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006906:	4e11      	ldr	r6, [pc, #68]	; (800694c <R3_1_RLDetectionModeDisable+0xfc>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006908:	4d11      	ldr	r5, [pc, #68]	; (8006950 <R3_1_RLDetectionModeDisable+0x100>)
 800690a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800690e:	60d3      	str	r3, [r2, #12]
    pHandle->_Super.RLDetectionMode = false;
 8006910:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006912:	e9c0 1402 	strd	r1, r4, [r0, #8]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006916:	6046      	str	r6, [r0, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006918:	6145      	str	r5, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800691a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800691e:	bc70      	pop	{r4, r5, r6}
 8006920:	4770      	bx	lr
 8006922:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006924:	6a1a      	ldr	r2, [r3, #32]
 8006926:	f042 0204 	orr.w	r2, r2, #4
 800692a:	621a      	str	r2, [r3, #32]
}
 800692c:	e7b5      	b.n	800689a <R3_1_RLDetectionModeDisable+0x4a>
  SET_BIT(TIMx->CCER, Channels);
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	e7e1      	b.n	80068fc <R3_1_RLDetectionModeDisable+0xac>
  SET_BIT(TIMx->CCER, Channels);
 8006938:	6a1a      	ldr	r2, [r3, #32]
 800693a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	e7c5      	b.n	80068ce <R3_1_RLDetectionModeDisable+0x7e>
 8006942:	bf00      	nop
 8006944:	08005fb9 	.word	0x08005fb9
 8006948:	08006045 	.word	0x08006045
 800694c:	08005cd5 	.word	0x08005cd5
 8006950:	08005f69 	.word	0x08005f69

08006954 <R3_1_RLDetectionModeSetDuty>:
{
 8006954:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006956:	6f42      	ldr	r2, [r0, #116]	; 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006958:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800695c:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800695e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006960:	fb01 f104 	mul.w	r1, r1, r4
 8006964:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006966:	2403      	movs	r4, #3
 8006968:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800696c:	8641      	strh	r1, [r0, #50]	; 0x32
  if ( pHandle->_Super.SWerror == 1u )
 800696e:	2b01      	cmp	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006970:	6351      	str	r1, [r2, #52]	; 0x34
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006972:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8006974:	d008      	beq.n	8006988 <R3_1_RLDetectionModeSetDuty+0x34>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006976:	f012 0f70 	tst.w	r2, #112	; 0x70
    hAux = MC_FOC_DURATION;
 800697a:	bf14      	ite	ne
 800697c:	2301      	movne	r3, #1
 800697e:	2300      	moveq	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006986:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8006988:	2200      	movs	r2, #0
 800698a:	8702      	strh	r2, [r0, #56]	; 0x38
}
 800698c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006990:	4618      	mov	r0, r3
 8006992:	4770      	bx	lr

08006994 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006994:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006996:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006998:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 800699c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 80069a0:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 80069a2:	4770      	bx	lr

080069a4 <REMNG_Calc>:
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 80069a4:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80069a8:	2901      	cmp	r1, #1
 80069aa:	d90c      	bls.n	80069c6 <REMNG_Calc+0x22>
{
 80069ac:	b410      	push	{r4}
 80069ae:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 80069b2:	3901      	subs	r1, #1
    current_ref += pHandle->IncDecAmount;
 80069b4:	4423      	add	r3, r4
    pHandle->RampRemainingStep --;
 80069b6:	60c1      	str	r1, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 80069b8:	6083      	str	r3, [r0, #8]
 80069ba:	fb93 f2f2 	sdiv	r2, r3, r2
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 80069be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c2:	4610      	mov	r0, r2
 80069c4:	4770      	bx	lr
  else if ( pHandle->RampRemainingStep == 1u )
 80069c6:	d005      	beq.n	80069d4 <REMNG_Calc+0x30>
 80069c8:	6942      	ldr	r2, [r0, #20]
  pHandle->Ext = current_ref;
 80069ca:	6083      	str	r3, [r0, #8]
 80069cc:	fb93 f2f2 	sdiv	r2, r3, r2
}
 80069d0:	4610      	mov	r0, r2
 80069d2:	4770      	bx	lr
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80069d4:	6842      	ldr	r2, [r0, #4]
 80069d6:	6943      	ldr	r3, [r0, #20]
    pHandle->RampRemainingStep = 0u;
 80069d8:	2100      	movs	r1, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80069da:	fb03 f302 	mul.w	r3, r3, r2
    pHandle->RampRemainingStep = 0u;
 80069de:	60c1      	str	r1, [r0, #12]
  pHandle->Ext = current_ref;
 80069e0:	6083      	str	r3, [r0, #8]
}
 80069e2:	4610      	mov	r0, r2
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 80069e8:	68c0      	ldr	r0, [r0, #12]
  {
    retVal = true;
  }
  return retVal;
}
 80069ea:	fab0 f080 	clz	r0, r0
 80069ee:	0940      	lsrs	r0, r0, #5
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop

080069f4 <getScalingFactor>:
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
  {
    aux = -Target;
 80069f4:	2800      	cmp	r0, #0
 80069f6:	bfb8      	it	lt
 80069f8:	4240      	neglt	r0, r0
{
 80069fa:	2301      	movs	r3, #1
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80069fc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006a00:	e002      	b.n	8006a08 <getScalingFactor+0x14>
 8006a02:	3301      	adds	r3, #1
  for ( i = 1u; i < 32u; i++ )
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d007      	beq.n	8006a18 <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 8006a08:	fa21 f203 	lsr.w	r2, r1, r3
    if ( TargetAbs >= limit )
 8006a0c:	4290      	cmp	r0, r2
 8006a0e:	d3f8      	bcc.n	8006a02 <getScalingFactor+0xe>
 8006a10:	3b01      	subs	r3, #1
 8006a12:	2001      	movs	r0, #1
 8006a14:	4098      	lsls	r0, r3
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
}
 8006a16:	4770      	bx	lr
 8006a18:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <REMNG_ExecRamp>:
{
 8006a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a24:	4604      	mov	r4, r0
 8006a26:	460d      	mov	r5, r1
  if ( Durationms == 0u )
 8006a28:	4690      	mov	r8, r2
 8006a2a:	b95a      	cbnz	r2, 8006a44 <REMNG_ExecRamp+0x24>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	f7ff ffe1 	bl	80069f4 <getScalingFactor>
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006a32:	fb05 f500 	mul.w	r5, r5, r0
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8006a36:	6160      	str	r0, [r4, #20]
    pHandle->IncDecAmount = 0;
 8006a38:	e9c4 8803 	strd	r8, r8, [r4, #12]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8006a3c:	60a5      	str	r5, [r4, #8]
}
 8006a3e:	2001      	movs	r0, #1
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 8006a44:	6943      	ldr	r3, [r0, #20]
 8006a46:	6887      	ldr	r7, [r0, #8]
 8006a48:	fb97 f7f3 	sdiv	r7, r7, r3
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8006a4c:	1bce      	subs	r6, r1, r7
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff ffd0 	bl	80069f4 <getScalingFactor>
 8006a54:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff ffcc 	bl	80069f4 <getScalingFactor>
 8006a5c:	4681      	mov	r9, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f7ff ffc8 	bl	80069f4 <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8006a64:	45ca      	cmp	sl, r9
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 8006a66:	4603      	mov	r3, r0
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8006a68:	6821      	ldr	r1, [r4, #0]
    pHandle->TargetFinal = TargetFinal;
 8006a6a:	6065      	str	r5, [r4, #4]
 8006a6c:	bf2c      	ite	cs
 8006a6e:	4648      	movcs	r0, r9
 8006a70:	4650      	movcc	r0, sl
      if ( wScalingFactor2 < wScalingFactor3 )
 8006a72:	4298      	cmp	r0, r3
 8006a74:	bf28      	it	cs
 8006a76:	4618      	movcs	r0, r3
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8006a78:	fb01 f308 	mul.w	r3, r1, r8
    aux /= 1000u;
 8006a7c:	4908      	ldr	r1, [pc, #32]	; (8006aa0 <REMNG_ExecRamp+0x80>)
    pHandle->ScalingFactor = wScalingFactorMin;
 8006a7e:	6160      	str	r0, [r4, #20]
    aux /= 1000u;
 8006a80:	fba1 2303 	umull	r2, r3, r1, r3
 8006a84:	099b      	lsrs	r3, r3, #6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8006a86:	fb07 f700 	mul.w	r7, r7, r0
    pHandle->RampRemainingStep++;
 8006a8a:	3301      	adds	r3, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8006a8c:	fb00 f006 	mul.w	r0, r0, r6
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8006a90:	60a7      	str	r7, [r4, #8]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8006a92:	fb90 f0f3 	sdiv	r0, r0, r3
    pHandle->IncDecAmount = aux1;
 8006a96:	e9c4 3003 	strd	r3, r0, [r4, #12]
}
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa0:	10624dd3 	.word	0x10624dd3

08006aa4 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006aa4:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop

08006aac <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006aac:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop

08006ab4 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006ab4:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop

08006abc <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006abc:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006ac0:	8a81      	ldrh	r1, [r0, #20]
{
 8006ac2:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 8006ac4:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8006ac6:	bfb8      	it	lt
 8006ac8:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006aca:	8ac5      	ldrh	r5, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006acc:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006ace:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8006ad0:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	d817      	bhi.n	8006b06 <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	bf2c      	ite	cs
 8006ada:	2300      	movcs	r3, #0
 8006adc:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8006ade:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006ae2:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8006ae4:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006ae6:	bfb8      	it	lt
 8006ae8:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8006aea:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006aec:	428d      	cmp	r5, r1
 8006aee:	d300      	bcc.n	8006af2 <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006af0:	b15b      	cbz	r3, 8006b0a <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006af2:	4294      	cmp	r4, r2
 8006af4:	d901      	bls.n	8006afa <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 8006af6:	3201      	adds	r2, #1
 8006af8:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006afa:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8006afc:	1b10      	subs	r0, r2, r4
 8006afe:	bf18      	it	ne
 8006b00:	2001      	movne	r0, #1
 8006b02:	bc30      	pop	{r4, r5}
 8006b04:	4770      	bx	lr
    SpeedError = true;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e7e9      	b.n	8006ade <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8006b0a:	4294      	cmp	r4, r2
 8006b0c:	bf88      	it	hi
 8006b0e:	2200      	movhi	r2, #0
 8006b10:	e7f3      	b.n	8006afa <SPD_IsMecSpeedReliable+0x3e>
 8006b12:	bf00      	nop

08006b14 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8006b14:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006b18:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8006b1c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8006b20:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8006b24:	b200      	sxth	r0, r0
 8006b26:	4770      	bx	lr

08006b28 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 8006b28:	b430      	push	{r4, r5}

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006b2a:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006b2e:	f9b0 402c 	ldrsh.w	r4, [r0, #44]	; 0x2c
  pHandle->Mode = pHandle->ModeDefault;
 8006b32:	f890 502a 	ldrb.w	r5, [r0, #42]	; 0x2a
  pHandle->PISpeed = pPI;
 8006b36:	6101      	str	r1, [r0, #16]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8006b38:	0424      	lsls	r4, r4, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006b3a:	0419      	lsls	r1, r3, #16
  pHandle->TargetFinal = 0;
 8006b3c:	2300      	movs	r3, #0
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8006b3e:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->Mode = pHandle->ModeDefault;
 8006b42:	7005      	strb	r5, [r0, #0]
  pHandle->SPD = SPD_Handle;
 8006b44:	6142      	str	r2, [r0, #20]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8006b46:	bc30      	pop	{r4, r5}
  pHandle->TargetFinal = 0;
 8006b48:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8006b4a:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006b4c:	6183      	str	r3, [r0, #24]
}
 8006b4e:	4770      	bx	lr

08006b50 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8006b50:	6141      	str	r1, [r0, #20]
}
 8006b52:	4770      	bx	lr

08006b54 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006b54:	6940      	ldr	r0, [r0, #20]
 8006b56:	4770      	bx	lr

08006b58 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006b58:	7803      	ldrb	r3, [r0, #0]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d000      	beq.n	8006b60 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8006b5e:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006b60:	6900      	ldr	r0, [r0, #16]
 8006b62:	2100      	movs	r1, #0
 8006b64:	f7fe be80 	b.w	8005868 <PID_SetIntegralTerm>

08006b68 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006b68:	6840      	ldr	r0, [r0, #4]
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	bfbc      	itt	lt
 8006b6e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006b72:	30ff      	addlt	r0, #255	; 0xff
}
 8006b74:	1400      	asrs	r0, r0, #16
 8006b76:	4770      	bx	lr

08006b78 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006b78:	6880      	ldr	r0, [r0, #8]
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	bfbc      	itt	lt
 8006b7e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006b82:	30ff      	addlt	r0, #255	; 0xff
}
 8006b84:	1400      	asrs	r0, r0, #16
 8006b86:	4770      	bx	lr

08006b88 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006b88:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006b8a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006b8c:	60c3      	str	r3, [r0, #12]
}
 8006b8e:	4770      	bx	lr

08006b90 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006b92:	7806      	ldrb	r6, [r0, #0]
{
 8006b94:	4604      	mov	r4, r0
 8006b96:	460d      	mov	r5, r1
 8006b98:	4617      	mov	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006b9a:	b326      	cbz	r6, 8006be6 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006b9c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006b9e:	8be1      	ldrh	r1, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	bfbc      	itt	lt
 8006ba4:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006ba8:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006baa:	428d      	cmp	r5, r1
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006bac:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006bb0:	dd01      	ble.n	8006bb6 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8006bb2:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006bb6:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 8006bba:	42a9      	cmp	r1, r5
 8006bbc:	dcf9      	bgt.n	8006bb2 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006bbe:	8c23      	ldrh	r3, [r4, #32]
 8006bc0:	429d      	cmp	r5, r3
 8006bc2:	da03      	bge.n	8006bcc <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006bc4:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dbf2      	blt.n	8006bb2 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006bcc:	b9af      	cbnz	r7, 8006bfa <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006bce:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006bd0:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006bd2:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8006bd4:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006bd8:	bf0c      	ite	eq
 8006bda:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006bdc:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006bde:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006be0:	61a3      	str	r3, [r4, #24]
 8006be2:	2001      	movs	r0, #1
}
 8006be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006be6:	f7ff ffc7 	bl	8006b78 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006bea:	8ce6      	ldrh	r6, [r4, #38]	; 0x26
 8006bec:	42b5      	cmp	r5, r6
 8006bee:	dce0      	bgt.n	8006bb2 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006bf0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006bf4:	42ab      	cmp	r3, r5
 8006bf6:	dcdc      	bgt.n	8006bb2 <STC_ExecRamp+0x22>
 8006bf8:	e7e8      	b.n	8006bcc <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006bfa:	8ba3      	ldrh	r3, [r4, #28]
      wAux /= 1000u;
 8006bfc:	4a07      	ldr	r2, [pc, #28]	; (8006c1c <STC_ExecRamp+0x8c>)
      pHandle->TargetFinal = hTargetFinal;
 8006bfe:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006c00:	fb07 f303 	mul.w	r3, r7, r3
      wAux /= 1000u;
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006c0a:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006c0c:	1a2d      	subs	r5, r5, r0
 8006c0e:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep++;
 8006c10:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006c12:	fb95 f5f3 	sdiv	r5, r5, r3
      pHandle->IncDecAmount = wAux1;
 8006c16:	2001      	movs	r0, #1
 8006c18:	61a5      	str	r5, [r4, #24]
}
 8006c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1c:	10624dd3 	.word	0x10624dd3

08006c20 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006c24:	6183      	str	r3, [r0, #24]
}
 8006c26:	4770      	bx	lr

08006c28 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006c28:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8006c2a:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006c2e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006c30:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	bf08      	it	eq
 8006c36:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8006c38:	2b01      	cmp	r3, #1
{
 8006c3a:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8006c3c:	d90c      	bls.n	8006c58 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006c3e:	6981      	ldr	r1, [r0, #24]
 8006c40:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006c42:	3b01      	subs	r3, #1
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	60c3      	str	r3, [r0, #12]
 8006c48:	4630      	mov	r0, r6
 8006c4a:	db09      	blt.n	8006c60 <STC_CalcTorqueReference+0x38>
 8006c4c:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 8006c4e:	2a01      	cmp	r2, #1
 8006c50:	d00a      	beq.n	8006c68 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8006c52:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006c54:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006c58:	d012      	beq.n	8006c80 <STC_CalcTorqueReference+0x58>
 8006c5a:	2e00      	cmp	r6, #0
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	daf5      	bge.n	8006c4c <STC_CalcTorqueReference+0x24>
 8006c60:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8006c64:	30ff      	adds	r0, #255	; 0xff
 8006c66:	e7f1      	b.n	8006c4c <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006c68:	6960      	ldr	r0, [r4, #20]
 8006c6a:	f7ff ff1f 	bl	8006aac <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006c6e:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006c70:	b201      	sxth	r1, r0
 8006c72:	6920      	ldr	r0, [r4, #16]
 8006c74:	f7fe fe04 	bl	8005880 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006c78:	0403      	lsls	r3, r0, #16
 8006c7a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8006c7e:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006c80:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006c84:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006c86:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006c88:	60c3      	str	r3, [r0, #12]
 8006c8a:	e7e0      	b.n	8006c4e <STC_CalcTorqueReference+0x26>

08006c8c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006c8c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop

08006c94 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8006c94:	8bc0      	ldrh	r0, [r0, #30]
 8006c96:	4770      	bx	lr

08006c98 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006c98:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop

08006ca0 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006ca0:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	b299      	uxth	r1, r3
 8006ca8:	f361 020f 	bfi	r2, r1, #0, #16
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006cb2:	b082      	sub	sp, #8
}
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	b002      	add	sp, #8
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006cc0:	6940      	ldr	r0, [r0, #20]
 8006cc2:	f7ff fef3 	bl	8006aac <SPD_GetAvrgMecSpeedUnit>
 8006cc6:	0400      	lsls	r0, r0, #16
 8006cc8:	6060      	str	r0, [r4, #4]
}
 8006cca:	bd10      	pop	{r4, pc}

08006ccc <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006cd0:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop

08006cd8 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8006cd8:	b430      	push	{r4, r5}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006cda:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006cdc:	8885      	ldrh	r5, [r0, #4]
  State_t LocalState =  pHandle->bState;
 8006cde:	7804      	ldrb	r4, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	ea23 0202 	bic.w	r2, r3, r2
 8006ce6:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 8006ce8:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 8006cea:	2c0a      	cmp	r4, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006cec:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006cee:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8006cf0:	d008      	beq.n	8006d04 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006cf2:	b912      	cbnz	r2, 8006cfa <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	bc30      	pop	{r4, r5}
 8006cf8:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8006cfa:	240a      	movs	r4, #10
 8006cfc:	7004      	strb	r4, [r0, #0]
}
 8006cfe:	4620      	mov	r0, r4
 8006d00:	bc30      	pop	{r4, r5}
 8006d02:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006d04:	2a00      	cmp	r2, #0
 8006d06:	d1f5      	bne.n	8006cf4 <STM_FaultProcessing+0x1c>
      pHandle->bState = FAULT_OVER;
 8006d08:	240b      	movs	r4, #11
 8006d0a:	7004      	strb	r4, [r0, #0]
}
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	bc30      	pop	{r4, r5}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop

08006d14 <STM_NextState>:
{
 8006d14:	b508      	push	{r3, lr}
 8006d16:	7803      	ldrb	r3, [r0, #0]
 8006d18:	2b14      	cmp	r3, #20
 8006d1a:	d810      	bhi.n	8006d3e <STM_NextState+0x2a>
 8006d1c:	e8df f003 	tbb	[pc, r3]
 8006d20:	240d545e 	.word	0x240d545e
 8006d24:	390d352e 	.word	0x390d352e
 8006d28:	0f0f3f3c 	.word	0x0f0f3f3c
 8006d2c:	47650b44 	.word	0x47650b44
 8006d30:	504d1b4a 	.word	0x504d1b4a
 8006d34:	5b          	.byte	0x5b
 8006d35:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006d36:	290e      	cmp	r1, #14
 8006d38:	d013      	beq.n	8006d62 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 8006d3a:	2907      	cmp	r1, #7
 8006d3c:	d011      	beq.n	8006d62 <STM_NextState+0x4e>
 8006d3e:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d018      	beq.n	8006d78 <STM_NextState+0x64>
 8006d46:	2907      	cmp	r1, #7
 8006d48:	d016      	beq.n	8006d78 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2180      	movs	r1, #128	; 0x80
 8006d4e:	f7ff ffc3 	bl	8006cd8 <STM_FaultProcessing>
 8006d52:	2000      	movs	r0, #0
}
 8006d54:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006d56:	2914      	cmp	r1, #20
 8006d58:	d8f1      	bhi.n	8006d3e <STM_NextState+0x2a>
 8006d5a:	4b26      	ldr	r3, [pc, #152]	; (8006df4 <STM_NextState+0xe0>)
 8006d5c:	40cb      	lsrs	r3, r1
 8006d5e:	07db      	lsls	r3, r3, #31
 8006d60:	d5ed      	bpl.n	8006d3e <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8006d62:	7001      	strb	r1, [r0, #0]
 8006d64:	2001      	movs	r0, #1
}
 8006d66:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8006d68:	2911      	cmp	r1, #17
 8006d6a:	d8ee      	bhi.n	8006d4a <STM_NextState+0x36>
 8006d6c:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <STM_NextState+0xe4>)
 8006d6e:	40cb      	lsrs	r3, r1
 8006d70:	07da      	lsls	r2, r3, #31
 8006d72:	d4f6      	bmi.n	8006d62 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006d74:	2903      	cmp	r1, #3
 8006d76:	d1e8      	bne.n	8006d4a <STM_NextState+0x36>
 8006d78:	2000      	movs	r0, #0
}
 8006d7a:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006d7c:	2913      	cmp	r1, #19
 8006d7e:	d0f0      	beq.n	8006d62 <STM_NextState+0x4e>
 8006d80:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006d84:	2b05      	cmp	r3, #5
 8006d86:	d1dc      	bne.n	8006d42 <STM_NextState+0x2e>
 8006d88:	e7eb      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8006d8a:	1f8b      	subs	r3, r1, #6
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d8d6      	bhi.n	8006d3e <STM_NextState+0x2a>
 8006d90:	e7e7      	b.n	8006d62 <STM_NextState+0x4e>
      if ( bState == STOP )
 8006d92:	2908      	cmp	r1, #8
 8006d94:	d1d3      	bne.n	8006d3e <STM_NextState+0x2a>
 8006d96:	e7e4      	b.n	8006d62 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8006d98:	2909      	cmp	r1, #9
 8006d9a:	d1d0      	bne.n	8006d3e <STM_NextState+0x2a>
 8006d9c:	e7e1      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006d9e:	2900      	cmp	r1, #0
 8006da0:	d0df      	beq.n	8006d62 <STM_NextState+0x4e>
 8006da2:	290c      	cmp	r1, #12
 8006da4:	d1cb      	bne.n	8006d3e <STM_NextState+0x2a>
 8006da6:	e7dc      	b.n	8006d62 <STM_NextState+0x4e>
      if ( bState == IDLE )
 8006da8:	2900      	cmp	r1, #0
 8006daa:	d0da      	beq.n	8006d62 <STM_NextState+0x4e>
 8006dac:	e7c7      	b.n	8006d3e <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006dae:	2902      	cmp	r1, #2
 8006db0:	d1c3      	bne.n	8006d3a <STM_NextState+0x26>
 8006db2:	e7d6      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006db4:	2911      	cmp	r1, #17
 8006db6:	d1c0      	bne.n	8006d3a <STM_NextState+0x26>
 8006db8:	e7d3      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8006dba:	2904      	cmp	r1, #4
 8006dbc:	d1bd      	bne.n	8006d3a <STM_NextState+0x26>
 8006dbe:	e7d0      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006dc0:	1f0b      	subs	r3, r1, #4
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d8b9      	bhi.n	8006d3a <STM_NextState+0x26>
 8006dc6:	e7cc      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8006dc8:	2907      	cmp	r1, #7
 8006dca:	d0ca      	beq.n	8006d62 <STM_NextState+0x4e>
 8006dcc:	f1a1 030d 	sub.w	r3, r1, #13
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d8b4      	bhi.n	8006d3e <STM_NextState+0x2a>
 8006dd4:	e7c5      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006dd6:	2912      	cmp	r1, #18
 8006dd8:	d1af      	bne.n	8006d3a <STM_NextState+0x26>
 8006dda:	e7c2      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006ddc:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d0be      	beq.n	8006d62 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 8006de4:	290c      	cmp	r1, #12
 8006de6:	d1ae      	bne.n	8006d46 <STM_NextState+0x32>
 8006de8:	e7bb      	b.n	8006d62 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8006dea:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8006dee:	2b07      	cmp	r3, #7
 8006df0:	d1a5      	bne.n	8006d3e <STM_NextState+0x2a>
 8006df2:	e7b6      	b.n	8006d62 <STM_NextState+0x4e>
 8006df4:	00140080 	.word	0x00140080
 8006df8:	00030092 	.word	0x00030092

08006dfc <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8006dfc:	7800      	ldrb	r0, [r0, #0]
 8006dfe:	4770      	bx	lr

08006e00 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8006e00:	7803      	ldrb	r3, [r0, #0]
 8006e02:	2b0b      	cmp	r3, #11
 8006e04:	d001      	beq.n	8006e0a <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8006e06:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8006e08:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8006e0a:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006e0c:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8006e0e:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006e10:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8006e12:	2001      	movs	r0, #1
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop

08006e18 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8006e18:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8006e1a:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006e1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop

08006e24 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8006e24:	f7fe bc5a 	b.w	80056dc <FCP_Init>

08006e28 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8006e28:	f890 2097 	ldrb.w	r2, [r0, #151]	; 0x97
 8006e2c:	b16a      	cbz	r2, 8006e4a <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8006e2e:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
 8006e32:	4603      	mov	r3, r0
 8006e34:	b1a2      	cbz	r2, 8006e60 <UFCP_TX_IRQ_Handler+0x38>
 8006e36:	2a01      	cmp	r2, #1
 8006e38:	d108      	bne.n	8006e4c <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8006e3a:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006e3c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8006e40:	8501      	strh	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8006e42:	3201      	adds	r2, #1
 8006e44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8006e48:	4770      	bx	lr
 8006e4a:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006e4c:	7d41      	ldrb	r1, [r0, #21]
 8006e4e:	3101      	adds	r1, #1
 8006e50:	428a      	cmp	r2, r1
 8006e52:	dc07      	bgt.n	8006e64 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006e54:	1881      	adds	r1, r0, r2
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006e56:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006e5a:	7d09      	ldrb	r1, [r1, #20]
 8006e5c:	8501      	strh	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006e5e:	e7f0      	b.n	8006e42 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8006e60:	7d01      	ldrb	r1, [r0, #20]
        break;
 8006e62:	e7eb      	b.n	8006e3c <UFCP_TX_IRQ_Handler+0x14>
{
 8006e64:	b430      	push	{r4, r5}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006e66:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 8006e6a:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
 8006e6e:	8511      	strh	r1, [r2, #40]	; 0x28
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006e70:	6811      	ldr	r1, [r2, #0]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006e72:	e9d0 0400 	ldrd	r0, r4, [r0]
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8006e76:	2500      	movs	r5, #0
 8006e78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e7c:	6011      	str	r1, [r2, #0]
 8006e7e:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006e82:	4623      	mov	r3, r4
}
 8006e84:	bc30      	pop	{r4, r5}
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006e86:	4718      	bx	r3

08006e88 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8006e88:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006e8c:	b10b      	cbz	r3, 8006e92 <UFCP_Receive+0xa>
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006e8e:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006e90:	4770      	bx	lr
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8006e92:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006e9c:	6813      	ldr	r3, [r2, #0]
 8006e9e:	f043 0320 	orr.w	r3, r3, #32
 8006ea2:	6013      	str	r3, [r2, #0]
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8006ea4:	2002      	movs	r0, #2
 8006ea6:	4770      	bx	lr

08006ea8 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8006eac:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8006eb0:	b108      	cbz	r0, 8006eb6 <UFCP_Send+0xe>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006eb2:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while ( size-- ) *dest++ = *buffer++;
 8006eb6:	1e58      	subs	r0, r3, #1
    pHandle->TxFrame.Code = code;
 8006eb8:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8006eba:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8006ebc:	b2c0      	uxtb	r0, r0
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8006ebe:	f104 0c16 	add.w	ip, r4, #22
    while ( size-- ) *dest++ = *buffer++;
 8006ec2:	b34b      	cbz	r3, 8006f18 <UFCP_Send+0x70>
 8006ec4:	f104 011a 	add.w	r1, r4, #26
 8006ec8:	1d17      	adds	r7, r2, #4
 8006eca:	45bc      	cmp	ip, r7
 8006ecc:	bf38      	it	cc
 8006ece:	428a      	cmpcc	r2, r1
 8006ed0:	d336      	bcc.n	8006f40 <UFCP_Send+0x98>
 8006ed2:	2807      	cmp	r0, #7
 8006ed4:	d934      	bls.n	8006f40 <UFCP_Send+0x98>
 8006ed6:	0899      	lsrs	r1, r3, #2
 8006ed8:	3901      	subs	r1, #1
 8006eda:	b2c9      	uxtb	r1, r1
 8006edc:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 8006ee0:	4665      	mov	r5, ip
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ee8:	f845 6b04 	str.w	r6, [r5], #4
 8006eec:	42b9      	cmp	r1, r7
 8006eee:	d1f9      	bne.n	8006ee4 <UFCP_Send+0x3c>
 8006ef0:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8006ef4:	1a40      	subs	r0, r0, r1
 8006ef6:	428b      	cmp	r3, r1
 8006ef8:	b2c0      	uxtb	r0, r0
 8006efa:	eb02 0601 	add.w	r6, r2, r1
 8006efe:	eb0c 0501 	add.w	r5, ip, r1
 8006f02:	d009      	beq.n	8006f18 <UFCP_Send+0x70>
 8006f04:	5c53      	ldrb	r3, [r2, r1]
 8006f06:	f80c 3001 	strb.w	r3, [ip, r1]
 8006f0a:	b128      	cbz	r0, 8006f18 <UFCP_Send+0x70>
 8006f0c:	7873      	ldrb	r3, [r6, #1]
 8006f0e:	706b      	strb	r3, [r5, #1]
 8006f10:	2801      	cmp	r0, #1
 8006f12:	d001      	beq.n	8006f18 <UFCP_Send+0x70>
 8006f14:	78b3      	ldrb	r3, [r6, #2]
 8006f16:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006f18:	f104 0014 	add.w	r0, r4, #20
 8006f1c:	f7fe fbf2 	bl	8005704 <FCP_CalcCRC>
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8006f20:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006f24:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8006f28:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006f2a:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8006f2c:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006f30:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006f34:	6813      	ldr	r3, [r2, #0]
 8006f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	2002      	movs	r0, #2
}
 8006f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f40:	3001      	adds	r0, #1
 8006f42:	4410      	add	r0, r2
 8006f44:	f104 0315 	add.w	r3, r4, #21
    while ( size-- ) *dest++ = *buffer++;
 8006f48:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006f4c:	f803 1f01 	strb.w	r1, [r3, #1]!
 8006f50:	4282      	cmp	r2, r0
 8006f52:	d1f9      	bne.n	8006f48 <UFCP_Send+0xa0>
 8006f54:	e7e0      	b.n	8006f18 <UFCP_Send+0x70>
 8006f56:	bf00      	nop

08006f58 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8006f58:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006f5c:	b90b      	cbnz	r3, 8006f62 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006f5e:	482c      	ldr	r0, [pc, #176]	; (8007010 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8006f60:	4770      	bx	lr
{
 8006f62:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8006f64:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8006f68:	b083      	sub	sp, #12
 8006f6a:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8006f6c:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8006f6e:	b1d3      	cbz	r3, 8006fa6 <UFCP_RX_IRQ_Handler+0x4e>
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d00d      	beq.n	8006f90 <UFCP_RX_IRQ_Handler+0x38>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8006f74:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8006f78:	3101      	adds	r1, #1
 8006f7a:	428b      	cmp	r3, r1
 8006f7c:	dc1d      	bgt.n	8006fba <UFCP_RX_IRQ_Handler+0x62>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006f7e:	18c1      	adds	r1, r0, r3
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006f80:	4823      	ldr	r0, [pc, #140]	; (8007010 <UFCP_RX_IRQ_Handler+0xb8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006f82:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8006f86:	3301      	adds	r3, #1
 8006f88:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006f8c:	b003      	add	sp, #12
 8006f8e:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006f90:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrameLevel++;
 8006f92:	bf54      	ite	pl
 8006f94:	2302      	movpl	r3, #2
          pBaseHandle->RxFrameLevel =0 ;
 8006f96:	2300      	movmi	r3, #0
        pBaseHandle->RxFrame.Size = rx_byte;
 8006f98:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
          pBaseHandle->RxFrameLevel =0 ;
 8006f9c:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006fa0:	481b      	ldr	r0, [pc, #108]	; (8007010 <UFCP_RX_IRQ_Handler+0xb8>)
}
 8006fa2:	b003      	add	sp, #12
 8006fa4:	bd30      	pop	{r4, r5, pc}
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006fa6:	8a01      	ldrh	r1, [r0, #16]
        pBaseHandle->RxFrame.Code = rx_byte;
 8006fa8:	f880 2099 	strb.w	r2, [r0, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8006fac:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006fae:	8241      	strh	r1, [r0, #18]
        pBaseHandle->RxFrameLevel++;
 8006fb0:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8006fb4:	4817      	ldr	r0, [pc, #92]	; (8007014 <UFCP_RX_IRQ_Handler+0xbc>)
}
 8006fb6:	b003      	add	sp, #12
 8006fb8:	bd30      	pop	{r4, r5, pc}
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8006fba:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8006fbe:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006fc2:	680b      	ldr	r3, [r1, #0]
          pBaseHandle->RxTimeoutCountdown = 0;
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f023 0320 	bic.w	r3, r3, #32
 8006fca:	8242      	strh	r2, [r0, #18]
 8006fcc:	600b      	str	r3, [r1, #0]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006fce:	3099      	adds	r0, #153	; 0x99
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006fd0:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006fd4:	f7fe fb96 	bl	8005704 <FCP_CalcCRC>
 8006fd8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8006fdc:	4283      	cmp	r3, r0
 8006fde:	d10a      	bne.n	8006ff6 <UFCP_RX_IRQ_Handler+0x9e>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	68a5      	ldr	r5, [r4, #8]
 8006fe4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8006fe8:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8006fec:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8006ff0:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006ff2:	4809      	ldr	r0, [pc, #36]	; (8007018 <UFCP_RX_IRQ_Handler+0xc0>)
 8006ff4:	e7d5      	b.n	8006fa2 <UFCP_RX_IRQ_Handler+0x4a>
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	2301      	movs	r3, #1
            error_code = FCP_MSG_RX_BAD_CRC;
 8006ffa:	240a      	movs	r4, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006ffc:	f10d 0207 	add.w	r2, sp, #7
 8007000:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8007002:	f88d 4007 	strb.w	r4, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007006:	f7ff ff4f 	bl	8006ea8 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800700a:	4803      	ldr	r0, [pc, #12]	; (8007018 <UFCP_RX_IRQ_Handler+0xc0>)
  return ret_val;
 800700c:	e7c9      	b.n	8006fa2 <UFCP_RX_IRQ_Handler+0x4a>
 800700e:	bf00      	nop
 8007010:	08007d54 	.word	0x08007d54
 8007014:	08007d56 	.word	0x08007d56
 8007018:	08007d58 	.word	0x08007d58

0800701c <UFCP_OVR_IRQ_Handler>:
{
 800701c:	b510      	push	{r4, lr}
 800701e:	b082      	sub	sp, #8
  error_code = UFCP_MSG_OVERRUN;
 8007020:	2408      	movs	r4, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007022:	2301      	movs	r3, #1
 8007024:	f10d 0207 	add.w	r2, sp, #7
 8007028:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 800702a:	f88d 4007 	strb.w	r4, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800702e:	f7ff ff3b 	bl	8006ea8 <UFCP_Send>
}
 8007032:	b002      	add	sp, #8
 8007034:	bd10      	pop	{r4, pc}
 8007036:	bf00      	nop

08007038 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007038:	2300      	movs	r3, #0
 800703a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 800703e:	4770      	bx	lr

08007040 <VVBS_Init>:
  * @retval none
  */
__weak void VVBS_Init( VirtualBusVoltageSensor_Handle_t * pHandle )
{
  pHandle->_Super.FaultState = MC_NO_ERROR;
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8007040:	8942      	ldrh	r2, [r0, #10]
  pHandle->_Super.FaultState = MC_NO_ERROR;
 8007042:	2300      	movs	r3, #0
 8007044:	8103      	strh	r3, [r0, #8]
  pHandle->_Super.LatestConv = pHandle->ExpectedVbus_d;
 8007046:	f362 030f 	bfi	r3, r2, #0, #16
 800704a:	f362 431f 	bfi	r3, r2, #16, #16
 800704e:	6043      	str	r3, [r0, #4]
  pHandle->_Super.AvBusVoltage_d = pHandle->ExpectedVbus_d;
}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop

08007054 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8007054:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007056:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8007058:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->wElSpeedDpp32 = 0;
 800705a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800705e:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8007060:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8007062:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8007064:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8007066:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8007068:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 800706a:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop

08007070 <VSS_Init>:
{
 8007070:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8007072:	f7ff ffef 	bl	8007054 <VSS_Clear>
}
 8007076:	bd08      	pop	{r3, pc}

08007078 <VSS_CalcElAngle>:
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8007078:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800707c:	b123      	cbz	r3, 8007088 <VSS_CalcElAngle+0x10>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800707e:	f9b1 2000 	ldrsh.w	r2, [r1]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8007082:	8082      	strh	r2, [r0, #4]
  return hRetAngle;
}
 8007084:	4610      	mov	r0, r2
 8007086:	4770      	bx	lr
{
 8007088:	b4f0      	push	{r4, r5, r6, r7}
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800708a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800708c:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007090:	88c7      	ldrh	r7, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 8007092:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 8007096:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 8007098:	fb95 f4f4 	sdiv	r4, r5, r4
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800709c:	442b      	add	r3, r5
 800709e:	b21a      	sxth	r2, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80070a0:	443c      	add	r4, r7
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80070a2:	8602      	strh	r2, [r0, #48]	; 0x30
 80070a4:	b29b      	uxth	r3, r3
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 80070a6:	80c4      	strh	r4, [r0, #6]
    if ( pHandle->bTransitionStarted == true )
 80070a8:	b1de      	cbz	r6, 80070e2 <VSS_CalcElAngle+0x6a>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 80070aa:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
 80070ae:	b1e4      	cbz	r4, 80070ea <VSS_CalcElAngle+0x72>
        pHandle->hTransitionRemainingSteps--;
 80070b0:	3c01      	subs	r4, #1
 80070b2:	b224      	sxth	r4, r4
 80070b4:	85c4      	strh	r4, [r0, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80070b6:	2d00      	cmp	r5, #0
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80070b8:	8809      	ldrh	r1, [r1, #0]
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 80070ba:	db27      	blt.n	800710c <VSS_CalcElAngle+0x94>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 80070bc:	1acb      	subs	r3, r1, r3
 80070be:	b21b      	sxth	r3, r3
 80070c0:	2601      	movs	r6, #1
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80070c2:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 80070c6:	fb03 f404 	mul.w	r4, r3, r4
        if ( hAngleDiff >= 0 )
 80070ca:	2b00      	cmp	r3, #0
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 80070cc:	fb94 f4f5 	sdiv	r4, r4, r5
        hAngleCorr *= hSignCorr;
 80070d0:	fb14 f406 	smulbb	r4, r4, r6
 80070d4:	b2a4      	uxth	r4, r4
        if ( hAngleDiff >= 0 )
 80070d6:	db12      	blt.n	80070fe <VSS_CalcElAngle+0x86>
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80070d8:	1b0c      	subs	r4, r1, r4
          pHandle->bTransitionLocked = true;
 80070da:	2301      	movs	r3, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 80070dc:	b222      	sxth	r2, r4
          pHandle->bTransitionLocked = true;
 80070de:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  pHandle->_Super.hElAngle = hRetAngle;
 80070e2:	8082      	strh	r2, [r0, #4]
}
 80070e4:	bcf0      	pop	{r4, r5, r6, r7}
 80070e6:	4610      	mov	r0, r2
 80070e8:	4770      	bx	lr
        hRetAngle = *( int16_t * )pInputVars_str;
 80070ea:	f9b1 2000 	ldrsh.w	r2, [r1]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 80070ee:	7004      	strb	r4, [r0, #0]
        pHandle->bTransitionEnded = true;
 80070f0:	2301      	movs	r3, #1
 80070f2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  pHandle->_Super.hElAngle = hRetAngle;
 80070f6:	8082      	strh	r2, [r0, #4]
}
 80070f8:	bcf0      	pop	{r4, r5, r6, r7}
 80070fa:	4610      	mov	r0, r2
 80070fc:	4770      	bx	lr
          if ( pHandle->bTransitionLocked == false )
 80070fe:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d0ed      	beq.n	80070e2 <VSS_CalcElAngle+0x6a>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8007106:	440c      	add	r4, r1
 8007108:	b222      	sxth	r2, r4
 800710a:	e7ea      	b.n	80070e2 <VSS_CalcElAngle+0x6a>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800710c:	1a5b      	subs	r3, r3, r1
 800710e:	b21b      	sxth	r3, r3
 8007110:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8007114:	e7d5      	b.n	80070c2 <VSS_CalcElAngle+0x4a>
 8007116:	bf00      	nop

08007118 <VSS_CalcAvrgMecSpeedUnit>:
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 8007118:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800711a:	2b01      	cmp	r3, #1
{
 800711c:	b470      	push	{r4, r5, r6}
  if ( pHandle->hRemainingStep > 1u )
 800711e:	d925      	bls.n	800716c <VSS_CalcAvrgMecSpeedUnit+0x54>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007120:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 8007124:	4413      	add	r3, r2
 8007126:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007128:	2b00      	cmp	r3, #0
 800712a:	bfb8      	it	lt
 800712c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007130:	8b42      	ldrh	r2, [r0, #26]
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007132:	7846      	ldrb	r6, [r0, #1]
 8007134:	69c5      	ldr	r5, [r0, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007136:	bfb8      	it	lt
 8007138:	33ff      	addlt	r3, #255	; 0xff
 800713a:	141c      	asrs	r4, r3, #16
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800713c:	fb04 f202 	mul.w	r2, r4, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8007140:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007144:	0053      	lsls	r3, r2, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8007146:	fb05 f506 	mul.w	r5, r5, r6
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800714a:	fb93 f3f5 	sdiv	r3, r3, r5
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800714e:	b21b      	sxth	r3, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8007150:	81c4      	strh	r4, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8007152:	800b      	strh	r3, [r1, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8007154:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007156:	8183      	strh	r3, [r0, #12]
    pHandle->hRemainingStep--;
 8007158:	1e53      	subs	r3, r2, #1
 800715a:	8503      	strh	r3, [r0, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800715c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007160:	b963      	cbnz	r3, 800717c <VSS_CalcAvrgMecSpeedUnit+0x64>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007162:	78c2      	ldrb	r2, [r0, #3]
 8007164:	7002      	strb	r2, [r0, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 8007166:	bc70      	pop	{r4, r5, r6}
 8007168:	4618      	mov	r0, r3
 800716a:	4770      	bx	lr
  else if ( pHandle->hRemainingStep == 1u )
 800716c:	d009      	beq.n	8007182 <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800716e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8007172:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 8007174:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f2      	beq.n	8007162 <VSS_CalcAvrgMecSpeedUnit+0x4a>
}
 800717c:	bc70      	pop	{r4, r5, r6}
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800717e:	f7ff bc9d 	b.w	8006abc <SPD_IsMecSpeedReliable>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8007182:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	; 0x2a
 8007186:	800d      	strh	r5, [r1, #0]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007188:	8b43      	ldrh	r3, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800718a:	69c2      	ldr	r2, [r0, #28]
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800718c:	7844      	ldrb	r4, [r0, #1]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800718e:	8185      	strh	r5, [r0, #12]
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007190:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 8007194:	fb02 f205 	mul.w	r2, r2, r5
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007198:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800719a:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->hRemainingStep = 0u;
 800719e:	2200      	movs	r2, #0
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80071a0:	fb14 f303 	smulbb	r3, r4, r3
 80071a4:	81c3      	strh	r3, [r0, #14]
    pHandle->hRemainingStep = 0u;
 80071a6:	8502      	strh	r2, [r0, #40]	; 0x28
 80071a8:	e7d8      	b.n	800715c <VSS_CalcAvrgMecSpeedUnit+0x44>
 80071aa:	bf00      	nop

080071ac <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80071ac:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 80071ae:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hElAngle = hMecAngle;
 80071b0:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80071b2:	fb91 f1f3 	sdiv	r1, r1, r3
 80071b6:	80c1      	strh	r1, [r0, #6]
}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop

080071bc <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 80071bc:	b470      	push	{r4, r5, r6}
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 80071be:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
 80071c2:	b984      	cbnz	r4, 80071e6 <VSS_SetMecAcceleration+0x2a>
  {
    if ( hDurationms == 0u )
 80071c4:	b98a      	cbnz	r2, 80071ea <VSS_SetMecAcceleration+0x2e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80071c6:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80071c8:	69c4      	ldr	r4, [r0, #28]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80071ca:	7845      	ldrb	r5, [r0, #1]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80071cc:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80071ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071d2:	005b      	lsls	r3, r3, #1
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 80071d4:	fb04 f401 	mul.w	r4, r4, r1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80071d8:	fb94 f3f3 	sdiv	r3, r4, r3
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80071dc:	fb15 f303 	smulbb	r3, r5, r3

      pHandle->hRemainingStep = 0u;
 80071e0:	8502      	strh	r2, [r0, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80071e2:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80071e4:	81c3      	strh	r3, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 80071e6:	bc70      	pop	{r4, r5, r6}
 80071e8:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80071ea:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80071ec:	4d11      	ldr	r5, [pc, #68]	; (8007234 <VSS_SetMecAcceleration+0x78>)
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80071ee:	8b44      	ldrh	r4, [r0, #26]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 80071f0:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80071f4:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 80071fa:	fba5 2303 	umull	r2, r3, r5, r3
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 80071fe:	69c2      	ldr	r2, [r0, #28]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8007200:	7845      	ldrb	r5, [r0, #1]
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8007202:	f3c3 138f 	ubfx	r3, r3, #6, #16
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8007206:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800720a:	0064      	lsls	r4, r4, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800720c:	fb02 f201 	mul.w	r2, r2, r1
      hNbrStep++;
 8007210:	3301      	adds	r3, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8007212:	fb96 f1f5 	sdiv	r1, r6, r5
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8007216:	fb92 f2f4 	sdiv	r2, r2, r4
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800721a:	1a52      	subs	r2, r2, r1
      hNbrStep++;
 800721c:	b29b      	uxth	r3, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800721e:	0436      	lsls	r6, r6, #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8007220:	0412      	lsls	r2, r2, #16
 8007222:	fb92 f2f3 	sdiv	r2, r2, r3
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8007226:	fb05 f202 	mul.w	r2, r5, r2
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800722a:	e9c0 2608 	strd	r2, r6, [r0, #32]
      pHandle->hRemainingStep = hNbrStep;
 800722e:	8503      	strh	r3, [r0, #40]	; 0x28
}
 8007230:	bc70      	pop	{r4, r5, r6}
 8007232:	4770      	bx	lr
 8007234:	10624dd3 	.word	0x10624dd3

08007238 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8007238:	b151      	cbz	r1, 8007250 <VSS_SetStartTransition+0x18>
  {
    pHandle->bTransitionStarted = true;

    if ( pHandle->hTransitionSteps == 0 )
 800723a:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
    pHandle->bTransitionStarted = true;
 800723e:	2201      	movs	r2, #1
 8007240:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    if ( pHandle->hTransitionSteps == 0 )
 8007244:	b923      	cbnz	r3, 8007250 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionEnded = true;
 8007246:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800724a:	7003      	strb	r3, [r0, #0]
      bAux = false;
 800724c:	4618      	mov	r0, r3
    }
  }
  return bAux;
}
 800724e:	4770      	bx	lr
  bool bAux = true;
 8007250:	2001      	movs	r0, #1
 8007252:	4770      	bx	lr

08007254 <VSS_TransitionEnded>:
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
}
 8007254:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <RUC_Init>:
 800725c:	b430      	push	{r4, r5}
 800725e:	6681      	str	r1, [r0, #104]	; 0x68
 8007260:	2100      	movs	r1, #0
 8007262:	9c02      	ldr	r4, [sp, #8]
 8007264:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8007268:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800726c:	f110 010c 	adds.w	r1, r0, #12
 8007270:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 8007274:	6744      	str	r4, [r0, #116]	; 0x74
 8007276:	d023      	beq.n	80072c0 <RUC_Init+0x64>
 8007278:	6943      	ldr	r3, [r0, #20]
 800727a:	b323      	cbz	r3, 80072c6 <RUC_Init+0x6a>
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	b323      	cbz	r3, 80072ca <RUC_Init+0x6e>
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	b323      	cbz	r3, 80072ce <RUC_Init+0x72>
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	b1c3      	cbz	r3, 80072ba <RUC_Init+0x5e>
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2105      	movs	r1, #5
 800728c:	b1b3      	cbz	r3, 80072bc <RUC_Init+0x60>
 800728e:	2204      	movs	r2, #4
 8007290:	2105      	movs	r1, #5
 8007292:	8805      	ldrh	r5, [r0, #0]
 8007294:	4c0f      	ldr	r4, [pc, #60]	; (80072d4 <RUC_Init+0x78>)
 8007296:	2364      	movs	r3, #100	; 0x64
 8007298:	fb03 f305 	mul.w	r3, r3, r5
 800729c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80072a0:	fba4 4303 	umull	r4, r3, r4, r3
 80072a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80072a8:	2400      	movs	r4, #0
 80072aa:	099b      	lsrs	r3, r3, #6
 80072ac:	6154      	str	r4, [r2, #20]
 80072ae:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 80072b2:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 80072b6:	bc30      	pop	{r4, r5}
 80072b8:	4770      	bx	lr
 80072ba:	2104      	movs	r1, #4
 80072bc:	1e4a      	subs	r2, r1, #1
 80072be:	e7e8      	b.n	8007292 <RUC_Init+0x36>
 80072c0:	f04f 32ff 	mov.w	r2, #4294967295
 80072c4:	e7e5      	b.n	8007292 <RUC_Init+0x36>
 80072c6:	2101      	movs	r1, #1
 80072c8:	e7f8      	b.n	80072bc <RUC_Init+0x60>
 80072ca:	2102      	movs	r1, #2
 80072cc:	e7f6      	b.n	80072bc <RUC_Init+0x60>
 80072ce:	2103      	movs	r1, #3
 80072d0:	e7f4      	b.n	80072bc <RUC_Init+0x60>
 80072d2:	bf00      	nop
 80072d4:	10624dd3 	.word	0x10624dd3

080072d8 <RUC_Clear>:
 80072d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072dc:	4604      	mov	r4, r0
 80072de:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 80072e0:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 80072e4:	80e1      	strh	r1, [r4, #6]
 80072e6:	2500      	movs	r5, #0
 80072e8:	4638      	mov	r0, r7
 80072ea:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 80072ee:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80072f2:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 80072f6:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 80072fa:	460e      	mov	r6, r1
 80072fc:	f7ff feaa 	bl	8007054 <VSS_Clear>
 8007300:	4629      	mov	r1, r5
 8007302:	4640      	mov	r0, r8
 8007304:	f7ff fc40 	bl	8006b88 <STC_SetControlMode>
 8007308:	8861      	ldrh	r1, [r4, #2]
 800730a:	b2b6      	uxth	r6, r6
 800730c:	fb11 f106 	smulbb	r1, r1, r6
 8007310:	b209      	sxth	r1, r1
 8007312:	4638      	mov	r0, r7
 8007314:	f7ff ff4a 	bl	80071ac <VSS_SetMecAngle>
 8007318:	462a      	mov	r2, r5
 800731a:	4629      	mov	r1, r5
 800731c:	4640      	mov	r0, r8
 800731e:	f7ff fc37 	bl	8006b90 <STC_ExecRamp>
 8007322:	8a21      	ldrh	r1, [r4, #16]
 8007324:	89a2      	ldrh	r2, [r4, #12]
 8007326:	fb11 f106 	smulbb	r1, r1, r6
 800732a:	b209      	sxth	r1, r1
 800732c:	4640      	mov	r0, r8
 800732e:	f7ff fc2f 	bl	8006b90 <STC_ExecRamp>
 8007332:	89e1      	ldrh	r1, [r4, #14]
 8007334:	89a2      	ldrh	r2, [r4, #12]
 8007336:	fb11 f106 	smulbb	r1, r1, r6
 800733a:	4638      	mov	r0, r7
 800733c:	b209      	sxth	r1, r1
 800733e:	f7ff ff3d 	bl	80071bc <VSS_SetMecAcceleration>
 8007342:	89a0      	ldrh	r0, [r4, #12]
 8007344:	8823      	ldrh	r3, [r4, #0]
 8007346:	4907      	ldr	r1, [pc, #28]	; (8007364 <RUC_Clear+0x8c>)
 8007348:	6962      	ldr	r2, [r4, #20]
 800734a:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800734e:	fb03 f300 	mul.w	r3, r3, r0
 8007352:	fba1 1303 	umull	r1, r3, r1, r3
 8007356:	099b      	lsrs	r3, r3, #6
 8007358:	3301      	adds	r3, #1
 800735a:	80a3      	strh	r3, [r4, #4]
 800735c:	60a2      	str	r2, [r4, #8]
 800735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007362:	bf00      	nop
 8007364:	10624dd3 	.word	0x10624dd3

08007368 <RUC_Exec>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	8883      	ldrh	r3, [r0, #4]
 800736c:	bb53      	cbnz	r3, 80073c4 <RUC_Exec+0x5c>
 800736e:	6883      	ldr	r3, [r0, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d02e      	beq.n	80073d2 <RUC_Exec+0x6a>
 8007374:	88c5      	ldrh	r5, [r0, #6]
 8007376:	8899      	ldrh	r1, [r3, #4]
 8007378:	881a      	ldrh	r2, [r3, #0]
 800737a:	4604      	mov	r4, r0
 800737c:	fb11 f105 	smulbb	r1, r1, r5
 8007380:	b209      	sxth	r1, r1
 8007382:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8007384:	f7ff fc04 	bl	8006b90 <STC_ExecRamp>
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	88e5      	ldrh	r5, [r4, #6]
 800738c:	8859      	ldrh	r1, [r3, #2]
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007392:	fb11 f105 	smulbb	r1, r1, r5
 8007396:	b209      	sxth	r1, r1
 8007398:	f7ff ff10 	bl	80071bc <VSS_SetMecAcceleration>
 800739c:	68a2      	ldr	r2, [r4, #8]
 800739e:	8823      	ldrh	r3, [r4, #0]
 80073a0:	8810      	ldrh	r0, [r2, #0]
 80073a2:	490d      	ldr	r1, [pc, #52]	; (80073d8 <RUC_Exec+0x70>)
 80073a4:	6892      	ldr	r2, [r2, #8]
 80073a6:	60a2      	str	r2, [r4, #8]
 80073a8:	fb03 f300 	mul.w	r3, r3, r0
 80073ac:	fba1 2303 	umull	r2, r3, r1, r3
 80073b0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80073b4:	099b      	lsrs	r3, r3, #6
 80073b6:	3301      	adds	r3, #1
 80073b8:	3201      	adds	r2, #1
 80073ba:	80a3      	strh	r3, [r4, #4]
 80073bc:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 80073c0:	2001      	movs	r0, #1
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	8083      	strh	r3, [r0, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0cf      	beq.n	800736e <RUC_Exec+0x6>
 80073ce:	2001      	movs	r0, #1
 80073d0:	e7f7      	b.n	80073c2 <RUC_Exec+0x5a>
 80073d2:	4618      	mov	r0, r3
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	10624dd3 	.word	0x10624dd3

080073dc <RUC_FirstAccelerationStageReached>:
 80073dc:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80073e0:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 80073e4:	4282      	cmp	r2, r0
 80073e6:	bf34      	ite	cc
 80073e8:	2000      	movcc	r0, #0
 80073ea:	2001      	movcs	r0, #1
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop

080073f0 <RUC_SetPhaseDurationms>:
 80073f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80073f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073f8:	818a      	strh	r2, [r1, #12]
 80073fa:	4770      	bx	lr

080073fc <RUC_SetPhaseFinalMecSpeedUnit>:
 80073fc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007400:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007404:	81ca      	strh	r2, [r1, #14]
 8007406:	4770      	bx	lr

08007408 <RUC_SetPhaseFinalTorque>:
 8007408:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800740c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007410:	820a      	strh	r2, [r1, #16]
 8007412:	4770      	bx	lr

08007414 <RUC_GetPhaseDurationms>:
 8007414:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007418:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800741c:	8988      	ldrh	r0, [r1, #12]
 800741e:	4770      	bx	lr

08007420 <RUC_GetPhaseFinalMecSpeedUnit>:
 8007420:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007424:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007428:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop

08007430 <RUC_GetPhaseFinalTorque>:
 8007430:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007434:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007438:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop

08007440 <RUC_GetNumberOfPhases>:
 8007440:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop

08007448 <STO_PLL_CalcElAngle>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8007450:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 8007454:	4604      	mov	r4, r0
 8007456:	03d8      	lsls	r0, r3, #15
 8007458:	1ac2      	subs	r2, r0, r3
 800745a:	4596      	cmp	lr, r2
 800745c:	b089      	sub	sp, #36	; 0x24
 800745e:	f340 80c1 	ble.w	80075e4 <STO_PLL_CalcElAngle+0x19c>
 8007462:	66a2      	str	r2, [r4, #104]	; 0x68
 8007464:	4696      	mov	lr, r2
 8007466:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800746a:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800746e:	fa4e f605 	asr.w	r6, lr, r5
 8007472:	9603      	str	r6, [sp, #12]
 8007474:	4562      	cmp	r2, ip
 8007476:	b236      	sxth	r6, r6
 8007478:	9601      	str	r6, [sp, #4]
 800747a:	f280 80c8 	bge.w	800760e <STO_PLL_CalcElAngle+0x1c6>
 800747e:	66e2      	str	r2, [r4, #108]	; 0x6c
 8007480:	4694      	mov	ip, r2
 8007482:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8007486:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007488:	03de      	lsls	r6, r3, #15
 800748a:	fa4c f205 	asr.w	r2, ip, r5
 800748e:	1af5      	subs	r5, r6, r3
 8007490:	9204      	str	r2, [sp, #16]
 8007492:	42a8      	cmp	r0, r5
 8007494:	b212      	sxth	r2, r2
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	f340 80b3 	ble.w	8007602 <STO_PLL_CalcElAngle+0x1ba>
 800749c:	6625      	str	r5, [r4, #96]	; 0x60
 800749e:	4628      	mov	r0, r5
 80074a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074a2:	4295      	cmp	r5, r2
 80074a4:	f280 80a7 	bge.w	80075f6 <STO_PLL_CalcElAngle+0x1ae>
 80074a8:	6665      	str	r5, [r4, #100]	; 0x64
 80074aa:	462a      	mov	r2, r5
 80074ac:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 80074b0:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80074b4:	890d      	ldrh	r5, [r1, #8]
 80074b6:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
 80074ba:	888e      	ldrh	r6, [r1, #4]
 80074bc:	f9b1 7000 	ldrsh.w	r7, [r1]
 80074c0:	f9b4 9020 	ldrsh.w	r9, [r4, #32]
 80074c4:	9901      	ldr	r1, [sp, #4]
 80074c6:	f8a4 1070 	strh.w	r1, [r4, #112]	; 0x70
 80074ca:	fa40 f103 	asr.w	r1, r0, r3
 80074ce:	fa42 f303 	asr.w	r3, r2, r3
 80074d2:	1b8e      	subs	r6, r1, r6
 80074d4:	fb11 f109 	smulbb	r1, r1, r9
 80074d8:	fb13 f909 	smulbb	r9, r3, r9
 80074dc:	eba3 030a 	sub.w	r3, r3, sl
 80074e0:	9305      	str	r3, [sp, #20]
 80074e2:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 80074ec:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 80074f0:	b236      	sxth	r6, r6
 80074f2:	1a41      	subs	r1, r0, r1
 80074f4:	fb05 f707 	mul.w	r7, r5, r7
 80074f8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80074fc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80074fe:	eba2 0209 	sub.w	r2, r2, r9
 8007502:	fb0b 1106 	mla	r1, fp, r6, r1
 8007506:	143f      	asrs	r7, r7, #16
 8007508:	fb0b 2b03 	mla	fp, fp, r3, r2
 800750c:	fb0a 1107 	mla	r1, sl, r7, r1
 8007510:	fb05 f508 	mul.w	r5, r5, r8
 8007514:	9a01      	ldr	r2, [sp, #4]
 8007516:	9f02      	ldr	r7, [sp, #8]
 8007518:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 800751c:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 8007520:	142d      	asrs	r5, r5, #16
 8007522:	fb0a b505 	mla	r5, sl, r5, fp
 8007526:	4107      	asrs	r7, r0
 8007528:	f9b4 a00e 	ldrsh.w	sl, [r4, #14]
 800752c:	f9b4 b024 	ldrsh.w	fp, [r4, #36]	; 0x24
 8007530:	fa42 f000 	asr.w	r0, r2, r0
 8007534:	fb06 e609 	mla	r6, r6, r9, lr
 8007538:	fb09 c303 	mla	r3, r9, r3, ip
 800753c:	fb07 f708 	mul.w	r7, r7, r8
 8007540:	fb00 f008 	mul.w	r0, r0, r8
 8007544:	fb07 670a 	mla	r7, r7, sl, r6
 8007548:	fb00 361a 	mls	r6, r0, sl, r3
 800754c:	9b01      	ldr	r3, [sp, #4]
 800754e:	f994 2124 	ldrsb.w	r2, [r4, #292]	; 0x124
 8007552:	fb0b 1813 	mls	r8, fp, r3, r1
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	fb0b 5513 	mls	r5, fp, r3, r5
 800755c:	2a00      	cmp	r2, #0
 800755e:	d147      	bne.n	80075f0 <STO_PLL_CalcElAngle+0x1a8>
 8007560:	f1ba 0f00 	cmp.w	sl, #0
 8007564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007568:	bfb4      	ite	lt
 800756a:	4691      	movlt	r9, r2
 800756c:	f04f 0901 	movge.w	r9, #1
 8007570:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8007574:	f7f9 fa84 	bl	8000a80 <MCM_Trig_Functions>
 8007578:	9b04      	ldr	r3, [sp, #16]
 800757a:	9a03      	ldr	r2, [sp, #12]
 800757c:	fb13 f309 	smulbb	r3, r3, r9
 8007580:	fb12 f109 	smulbb	r1, r2, r9
 8007584:	425b      	negs	r3, r3
 8007586:	fb10 f303 	smulbb	r3, r0, r3
 800758a:	fb10 f021 	smultb	r0, r0, r1
 800758e:	f343 33cf 	sbfx	r3, r3, #15, #16
 8007592:	f340 31cf 	sbfx	r1, r0, #15, #16
 8007596:	1a59      	subs	r1, r3, r1
 8007598:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800759c:	f7fe f970 	bl	8005880 <PI_Controller>
 80075a0:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 80075a4:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 80075a8:	8220      	strh	r0, [r4, #16]
 80075aa:	3301      	adds	r3, #1
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	429a      	cmp	r2, r3
 80075b0:	bf0a      	itet	eq
 80075b2:	2200      	moveq	r2, #0
 80075b4:	461a      	movne	r2, r3
 80075b6:	4613      	moveq	r3, r2
 80075b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80075bc:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 80075c0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 80075c4:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 80075c8:	88a2      	ldrh	r2, [r4, #4]
 80075ca:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 80075ce:	4410      	add	r0, r2
 80075d0:	b200      	sxth	r0, r0
 80075d2:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
 80075d6:	e9c4 5719 	strd	r5, r7, [r4, #100]	; 0x64
 80075da:	66e6      	str	r6, [r4, #108]	; 0x6c
 80075dc:	80a0      	strh	r0, [r4, #4]
 80075de:	b009      	add	sp, #36	; 0x24
 80075e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e4:	1a1d      	subs	r5, r3, r0
 80075e6:	45ae      	cmp	lr, r5
 80075e8:	bfdc      	itt	le
 80075ea:	66a5      	strle	r5, [r4, #104]	; 0x68
 80075ec:	46ae      	movle	lr, r5
 80075ee:	e73a      	b.n	8007466 <STO_PLL_CalcElAngle+0x1e>
 80075f0:	fa1f f982 	uxth.w	r9, r2
 80075f4:	e7bc      	b.n	8007570 <STO_PLL_CalcElAngle+0x128>
 80075f6:	1b9b      	subs	r3, r3, r6
 80075f8:	429a      	cmp	r2, r3
 80075fa:	bfdc      	itt	le
 80075fc:	6663      	strle	r3, [r4, #100]	; 0x64
 80075fe:	461a      	movle	r2, r3
 8007600:	e754      	b.n	80074ac <STO_PLL_CalcElAngle+0x64>
 8007602:	1b9a      	subs	r2, r3, r6
 8007604:	4290      	cmp	r0, r2
 8007606:	bfdc      	itt	le
 8007608:	6622      	strle	r2, [r4, #96]	; 0x60
 800760a:	4610      	movle	r0, r2
 800760c:	e748      	b.n	80074a0 <STO_PLL_CalcElAngle+0x58>
 800760e:	1a1b      	subs	r3, r3, r0
 8007610:	459c      	cmp	ip, r3
 8007612:	bfdc      	itt	le
 8007614:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8007616:	469c      	movle	ip, r3
 8007618:	e733      	b.n	8007482 <STO_PLL_CalcElAngle+0x3a>
 800761a:	bf00      	nop

0800761c <STO_PLL_CalcAvrgMecSpeedUnit>:
 800761c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761e:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 8007622:	f1bc 0f00 	cmp.w	ip, #0
 8007626:	f000 8095 	beq.w	8007754 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800762a:	f10c 37ff 	add.w	r7, ip, #4294967295
 800762e:	b2fb      	uxtb	r3, r7
 8007630:	f100 0672 	add.w	r6, r0, #114	; 0x72
 8007634:	f100 0774 	add.w	r7, r0, #116	; 0x74
 8007638:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800763c:	4632      	mov	r2, r6
 800763e:	2300      	movs	r3, #0
 8007640:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8007644:	4297      	cmp	r7, r2
 8007646:	442b      	add	r3, r5
 8007648:	d1fa      	bne.n	8007640 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800764a:	fb93 f5fc 	sdiv	r5, r3, ip
 800764e:	2400      	movs	r4, #0
 8007650:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 8007654:	1b5b      	subs	r3, r3, r5
 8007656:	42b2      	cmp	r2, r6
 8007658:	fb03 4403 	mla	r4, r3, r3, r4
 800765c:	d1f8      	bne.n	8007650 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 800765e:	fb94 f4fc 	sdiv	r4, r4, ip
 8007662:	fb05 fc05 	mul.w	ip, r5, r5
 8007666:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800766a:	8b43      	ldrh	r3, [r0, #26]
 800766c:	7887      	ldrb	r7, [r0, #2]
 800766e:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 8007672:	fb0c fc02 	mul.w	ip, ip, r2
 8007676:	ea4f 1cec 	mov.w	ip, ip, asr #7
 800767a:	fb05 f303 	mul.w	r3, r5, r3
 800767e:	45a4      	cmp	ip, r4
 8007680:	69c2      	ldr	r2, [r0, #28]
 8007682:	bfd4      	ite	le
 8007684:	2500      	movle	r5, #0
 8007686:	2501      	movgt	r5, #1
 8007688:	fb03 f307 	mul.w	r3, r3, r7
 800768c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007690:	7842      	ldrb	r2, [r0, #1]
 8007692:	fb93 f3f2 	sdiv	r3, r3, r2
 8007696:	b21a      	sxth	r2, r3
 8007698:	800a      	strh	r2, [r1, #0]
 800769a:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 800769e:	8182      	strh	r2, [r0, #12]
 80076a0:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 80076a4:	b99e      	cbnz	r6, 80076ce <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 80076a6:	b355      	cbz	r5, 80076fe <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80076a8:	45a4      	cmp	ip, r4
 80076aa:	dc25      	bgt.n	80076f8 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 80076ac:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 80076b0:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 80076b4:	3301      	adds	r3, #1
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	429a      	cmp	r2, r3
 80076ba:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80076be:	d81e      	bhi.n	80076fe <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80076c0:	2300      	movs	r3, #0
 80076c2:	78c2      	ldrb	r2, [r0, #3]
 80076c4:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80076c8:	7002      	strb	r2, [r0, #0]
 80076ca:	4618      	mov	r0, r3
 80076cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 80076d4:	bfb8      	it	lt
 80076d6:	425b      	neglt	r3, r3
 80076d8:	429a      	cmp	r2, r3
 80076da:	dc14      	bgt.n	8007706 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 80076dc:	2200      	movs	r2, #0
 80076de:	4613      	mov	r3, r2
 80076e0:	4616      	mov	r6, r2
 80076e2:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 80076e6:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 80076ea:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80076ee:	b135      	cbz	r5, 80076fe <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 80076f0:	45a4      	cmp	ip, r4
 80076f2:	dddb      	ble.n	80076ac <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 80076f4:	2a00      	cmp	r2, #0
 80076f6:	d0d9      	beq.n	80076ac <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 80076f8:	2300      	movs	r3, #0
 80076fa:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 80076fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007702:	f7ff b9db 	b.w	8006abc <SPD_IsMecSpeedReliable>
 8007706:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 800770a:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800770e:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 8007712:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 8007716:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800771a:	fb93 f3fe 	sdiv	r3, r3, lr
 800771e:	fb03 f202 	mul.w	r2, r3, r2
 8007722:	2a00      	cmp	r2, #0
 8007724:	bfb8      	it	lt
 8007726:	323f      	addlt	r2, #63	; 0x3f
 8007728:	1192      	asrs	r2, r2, #6
 800772a:	fb02 f303 	mul.w	r3, r2, r3
 800772e:	fb07 f707 	mul.w	r7, r7, r7
 8007732:	2b00      	cmp	r3, #0
 8007734:	fb06 7606 	mla	r6, r6, r6, r7
 8007738:	461a      	mov	r2, r3
 800773a:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800773e:	bfb8      	it	lt
 8007740:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 8007744:	1192      	asrs	r2, r2, #6
 8007746:	fb07 3212 	mls	r2, r7, r2, r3
 800774a:	4296      	cmp	r6, r2
 800774c:	bfd4      	ite	le
 800774e:	2200      	movle	r2, #0
 8007750:	2201      	movgt	r2, #1
 8007752:	e7c6      	b.n	80076e2 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 8007754:	4664      	mov	r4, ip
 8007756:	4665      	mov	r5, ip
 8007758:	e785      	b.n	8007666 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800775a:	bf00      	nop

0800775c <STO_PLL_CalcAvrgElSpeedDpp>:
 800775c:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 8007760:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 8007764:	b470      	push	{r4, r5, r6}
 8007766:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 800776a:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 800776e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 8007772:	b2a6      	uxth	r6, r4
 8007774:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 8007778:	1af3      	subs	r3, r6, r3
 800777a:	b29b      	uxth	r3, r3
 800777c:	442a      	add	r2, r5
 800777e:	b19b      	cbz	r3, 80077a8 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 8007780:	440b      	add	r3, r1
 8007782:	b29b      	uxth	r3, r3
 8007784:	b219      	sxth	r1, r3
 8007786:	428c      	cmp	r4, r1
 8007788:	bfdc      	itt	le
 800778a:	1b9b      	suble	r3, r3, r6
 800778c:	b219      	sxthle	r1, r3
 800778e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 8007792:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800779c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80077a0:	4113      	asrs	r3, r2
 80077a2:	81c3      	strh	r3, [r0, #14]
 80077a4:	bc70      	pop	{r4, r5, r6}
 80077a6:	4770      	bx	lr
 80077a8:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	e7f3      	b.n	8007798 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

080077b0 <STO_PLL_Clear>:
 80077b0:	b510      	push	{r4, lr}
 80077b2:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 80077b6:	2100      	movs	r1, #0
 80077b8:	4604      	mov	r4, r0
 80077ba:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 80077be:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 80077c2:	8081      	strh	r1, [r0, #4]
 80077c4:	81c1      	strh	r1, [r0, #14]
 80077c6:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 80077ca:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 80077ce:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 80077d2:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 80077d6:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 80077da:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 80077de:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 80077e2:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 80077e6:	b132      	cbz	r2, 80077f6 <STO_PLL_Clear+0x46>
 80077e8:	3a01      	subs	r2, #1
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	3201      	adds	r2, #1
 80077ee:	0052      	lsls	r2, r2, #1
 80077f0:	3074      	adds	r0, #116	; 0x74
 80077f2:	f000 f92b 	bl	8007a4c <memset>
 80077f6:	2100      	movs	r1, #0
 80077f8:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 80077fc:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 8007800:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007808:	f7fe b82e 	b.w	8005868 <PID_SetIntegralTerm>

0800780c <STO_PLL_Init>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 8007814:	4b18      	ldr	r3, [pc, #96]	; (8007878 <STO_PLL_Init+0x6c>)
 8007816:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800781a:	fb93 f3f5 	sdiv	r3, r3, r5
 800781e:	2200      	movs	r2, #0
 8007820:	2101      	movs	r1, #1
 8007822:	b21b      	sxth	r3, r3
 8007824:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 8007828:	8662      	strh	r2, [r4, #50]	; 0x32
 800782a:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800782e:	b303      	cbz	r3, 8007872 <STO_PLL_Init+0x66>
 8007830:	4608      	mov	r0, r1
 8007832:	e000      	b.n	8007836 <STO_PLL_Init+0x2a>
 8007834:	4611      	mov	r1, r2
 8007836:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800783a:	1c4a      	adds	r2, r1, #1
 800783c:	105b      	asrs	r3, r3, #1
 800783e:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8007842:	b292      	uxth	r2, r2
 8007844:	d1f6      	bne.n	8007834 <STO_PLL_Init+0x28>
 8007846:	b200      	sxth	r0, r0
 8007848:	fb05 f200 	mul.w	r2, r5, r0
 800784c:	8661      	strh	r1, [r4, #50]	; 0x32
 800784e:	4b0b      	ldr	r3, [pc, #44]	; (800787c <STO_PLL_Init+0x70>)
 8007850:	8620      	strh	r0, [r4, #48]	; 0x30
 8007852:	fb83 1302 	smull	r1, r3, r3, r2
 8007856:	17d2      	asrs	r2, r2, #31
 8007858:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 800785c:	8562      	strh	r2, [r4, #42]	; 0x2a
 800785e:	4620      	mov	r0, r4
 8007860:	f7ff ffa6 	bl	80077b0 <STO_PLL_Clear>
 8007864:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007868:	f7fd ffea 	bl	8005840 <PID_HandleInit>
 800786c:	2300      	movs	r3, #0
 800786e:	8263      	strh	r3, [r4, #18]
 8007870:	bd38      	pop	{r3, r4, r5, pc}
 8007872:	462a      	mov	r2, r5
 8007874:	4608      	mov	r0, r1
 8007876:	e7ea      	b.n	800784e <STO_PLL_Init+0x42>
 8007878:	000fea5e 	.word	0x000fea5e
 800787c:	06488dc5 	.word	0x06488dc5

08007880 <STO_PLL_IsObserverConverged>:
 8007880:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 8007884:	4603      	mov	r3, r0
 8007886:	b10a      	cbz	r2, 800788c <STO_PLL_IsObserverConverged+0xc>
 8007888:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800788c:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 8007890:	2800      	cmp	r0, #0
 8007892:	d143      	bne.n	800791c <STO_PLL_IsObserverConverged+0x9c>
 8007894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007898:	b430      	push	{r4, r5}
 800789a:	fb02 f501 	mul.w	r5, r2, r1
 800789e:	2d00      	cmp	r5, #0
 80078a0:	460c      	mov	r4, r1
 80078a2:	dd34      	ble.n	800790e <STO_PLL_IsObserverConverged+0x8e>
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	bfbc      	itt	lt
 80078a8:	4252      	neglt	r2, r2
 80078aa:	b212      	sxthlt	r2, r2
 80078ac:	2900      	cmp	r1, #0
 80078ae:	bfbc      	itt	lt
 80078b0:	4249      	neglt	r1, r1
 80078b2:	b20c      	sxthlt	r4, r1
 80078b4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 80078b8:	b359      	cbz	r1, 8007912 <STO_PLL_IsObserverConverged+0x92>
 80078ba:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 80078be:	b291      	uxth	r1, r2
 80078c0:	428d      	cmp	r5, r1
 80078c2:	d226      	bcs.n	8007912 <STO_PLL_IsObserverConverged+0x92>
 80078c4:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 80078c8:	fb04 f101 	mul.w	r1, r4, r1
 80078cc:	2900      	cmp	r1, #0
 80078ce:	bfb8      	it	lt
 80078d0:	310f      	addlt	r1, #15
 80078d2:	f341 110f 	sbfx	r1, r1, #4, #16
 80078d6:	428a      	cmp	r2, r1
 80078d8:	db1b      	blt.n	8007912 <STO_PLL_IsObserverConverged+0x92>
 80078da:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 80078de:	fb04 f101 	mul.w	r1, r4, r1
 80078e2:	2900      	cmp	r1, #0
 80078e4:	bfb8      	it	lt
 80078e6:	310f      	addlt	r1, #15
 80078e8:	f341 110f 	sbfx	r1, r1, #4, #16
 80078ec:	428a      	cmp	r2, r1
 80078ee:	dc10      	bgt.n	8007912 <STO_PLL_IsObserverConverged+0x92>
 80078f0:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 80078f4:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 80078f8:	3201      	adds	r2, #1
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	4291      	cmp	r1, r2
 80078fe:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8007902:	d804      	bhi.n	800790e <STO_PLL_IsObserverConverged+0x8e>
 8007904:	2001      	movs	r0, #1
 8007906:	2200      	movs	r2, #0
 8007908:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800790c:	701a      	strb	r2, [r3, #0]
 800790e:	bc30      	pop	{r4, r5}
 8007910:	4770      	bx	lr
 8007912:	2200      	movs	r2, #0
 8007914:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8007918:	bc30      	pop	{r4, r5}
 800791a:	4770      	bx	lr
 800791c:	2001      	movs	r0, #1
 800791e:	2200      	movs	r2, #0
 8007920:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	4770      	bx	lr

08007928 <STO_PLL_GetEstimatedBemf>:
 8007928:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800792a:	2000      	movs	r0, #0
 800792c:	b29a      	uxth	r2, r3
 800792e:	f362 000f 	bfi	r0, r2, #0, #16
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	b082      	sub	sp, #8
 8007936:	f363 401f 	bfi	r0, r3, #16, #16
 800793a:	b002      	add	sp, #8
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop

08007940 <STO_PLL_GetEstimatedCurrent>:
 8007940:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 8007944:	b410      	push	{r4}
 8007946:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800794a:	4122      	asrs	r2, r4
 800794c:	b292      	uxth	r2, r2
 800794e:	4123      	asrs	r3, r4
 8007950:	2100      	movs	r1, #0
 8007952:	b29b      	uxth	r3, r3
 8007954:	f362 010f 	bfi	r1, r2, #0, #16
 8007958:	f363 411f 	bfi	r1, r3, #16, #16
 800795c:	b083      	sub	sp, #12
 800795e:	4608      	mov	r0, r1
 8007960:	b003      	add	sp, #12
 8007962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007966:	4770      	bx	lr

08007968 <STO_PLL_GetObserverGains>:
 8007968:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800796c:	800b      	strh	r3, [r1, #0]
 800796e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8007972:	8013      	strh	r3, [r2, #0]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop

08007978 <STO_PLL_SetObserverGains>:
 8007978:	8441      	strh	r1, [r0, #34]	; 0x22
 800797a:	84c2      	strh	r2, [r0, #38]	; 0x26
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop

08007980 <STO_GetPLLGains>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8007986:	4620      	mov	r0, r4
 8007988:	460e      	mov	r6, r1
 800798a:	4615      	mov	r5, r2
 800798c:	f7fd ff64 	bl	8005858 <PID_GetKP>
 8007990:	8030      	strh	r0, [r6, #0]
 8007992:	4620      	mov	r0, r4
 8007994:	f7fd ff64 	bl	8005860 <PID_GetKI>
 8007998:	8028      	strh	r0, [r5, #0]
 800799a:	bd70      	pop	{r4, r5, r6, pc}

0800799c <STO_SetPLLGains>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	f100 0434 	add.w	r4, r0, #52	; 0x34
 80079a2:	4615      	mov	r5, r2
 80079a4:	4620      	mov	r0, r4
 80079a6:	f7fd ff53 	bl	8005850 <PID_SetKP>
 80079aa:	4629      	mov	r1, r5
 80079ac:	4620      	mov	r0, r4
 80079ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b2:	f7fd bf4f 	b.w	8005854 <PID_SetKI>
 80079b6:	bf00      	nop

080079b8 <STO_OTF_ResetPLL>:
 80079b8:	6800      	ldr	r0, [r0, #0]
 80079ba:	2100      	movs	r1, #0
 80079bc:	3034      	adds	r0, #52	; 0x34
 80079be:	f7fd bf53 	b.w	8005868 <PID_SetIntegralTerm>
 80079c2:	bf00      	nop

080079c4 <STO_ResetPLL>:
 80079c4:	3034      	adds	r0, #52	; 0x34
 80079c6:	2100      	movs	r1, #0
 80079c8:	f7fd bf4e 	b.w	8005868 <PID_SetIntegralTerm>

080079cc <STO_PLL_GetEstimatedBemfLevel>:
 80079cc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop

080079d4 <STO_PLL_GetObservedBemfLevel>:
 80079d4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop

080079dc <STO_PLL_IsVarianceTight>:
 80079dc:	6803      	ldr	r3, [r0, #0]
 80079de:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80079e2:	4770      	bx	lr

080079e4 <STO_PLL_ForceConvergency1>:
 80079e4:	6803      	ldr	r3, [r0, #0]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop

080079f0 <STO_PLL_ForceConvergency2>:
 80079f0:	6803      	ldr	r3, [r0, #0]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop

080079fc <STO_SetDirection>:
 80079fc:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop

08007a04 <__libc_init_array>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	4d0d      	ldr	r5, [pc, #52]	; (8007a3c <__libc_init_array+0x38>)
 8007a08:	4c0d      	ldr	r4, [pc, #52]	; (8007a40 <__libc_init_array+0x3c>)
 8007a0a:	1b64      	subs	r4, r4, r5
 8007a0c:	10a4      	asrs	r4, r4, #2
 8007a0e:	2600      	movs	r6, #0
 8007a10:	42a6      	cmp	r6, r4
 8007a12:	d109      	bne.n	8007a28 <__libc_init_array+0x24>
 8007a14:	4d0b      	ldr	r5, [pc, #44]	; (8007a44 <__libc_init_array+0x40>)
 8007a16:	4c0c      	ldr	r4, [pc, #48]	; (8007a48 <__libc_init_array+0x44>)
 8007a18:	f000 f820 	bl	8007a5c <_init>
 8007a1c:	1b64      	subs	r4, r4, r5
 8007a1e:	10a4      	asrs	r4, r4, #2
 8007a20:	2600      	movs	r6, #0
 8007a22:	42a6      	cmp	r6, r4
 8007a24:	d105      	bne.n	8007a32 <__libc_init_array+0x2e>
 8007a26:	bd70      	pop	{r4, r5, r6, pc}
 8007a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a2c:	4798      	blx	r3
 8007a2e:	3601      	adds	r6, #1
 8007a30:	e7ee      	b.n	8007a10 <__libc_init_array+0xc>
 8007a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a36:	4798      	blx	r3
 8007a38:	3601      	adds	r6, #1
 8007a3a:	e7f2      	b.n	8007a22 <__libc_init_array+0x1e>
 8007a3c:	08007d5c 	.word	0x08007d5c
 8007a40:	08007d5c 	.word	0x08007d5c
 8007a44:	08007d5c 	.word	0x08007d5c
 8007a48:	08007d60 	.word	0x08007d60

08007a4c <memset>:
 8007a4c:	4402      	add	r2, r0
 8007a4e:	4603      	mov	r3, r0
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d100      	bne.n	8007a56 <memset+0xa>
 8007a54:	4770      	bx	lr
 8007a56:	f803 1b01 	strb.w	r1, [r3], #1
 8007a5a:	e7f9      	b.n	8007a50 <memset+0x4>

08007a5c <_init>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr

08007a68 <_fini>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr
