
SinESC_Wing_1.0A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800fa44  0800fa44  0001fa44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd68  0800fd68  000206e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd68  0800fd68  000206e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd68  0800fd68  000206e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd68  0800fd68  0001fd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd6c  0800fd6c  0001fd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e4  20000000  0800fd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200006e4  08010454  000206e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be0  08010454  00020be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206e4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002edd1  00000000  00000000  00020714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004639e  00000000  00000000  0004f4e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000062da  00000000  00000000  00095883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021f8  00000000  00000000  0009bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d5885  00000000  00000000  0009dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001f50  00000000  00000000  001735e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000274a6  00000000  00000000  00175530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  0019c9d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008db0  00000000  00000000  0019caa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200006e4 	.word	0x200006e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fa2c 	.word	0x0800fa2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006e8 	.word	0x200006e8
 80001c4:	0800fa2c 	.word	0x0800fa2c

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f005 fd75 	bl	8005ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f00f fbed 	bl	800f9d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 fd65 	bl	8000cc8 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000204:	0800fd70 	.word	0x0800fd70
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	200006e4 	.word	0x200006e4
	ldr	r2, =_sbss
 8000210:	200006e4 	.word	0x200006e4
	ldr	r3, = _ebss
 8000214:	20000be0 	.word	0x20000be0

08000218 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC3_IRQHandler>

0800021a <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0201 	orr.w	r2, r3, #1
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800023a:	b480      	push	{r7}
 800023c:	b083      	sub	sp, #12
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6a1a      	ldr	r2, [r3, #32]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	621a      	str	r2, [r3, #32]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6a1a      	ldr	r2, [r3, #32]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	43db      	mvns	r3, r3
 800028a:	401a      	ands	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	621a      	str	r2, [r3, #32]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <LL_TIM_OC_GetCompareCH2>:
  * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000314:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f06f 0202 	mvn.w	r2, #2
 8000336:	611a      	str	r2, [r3, #16]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f043 0202 	orr.w	r2, r3, #2
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <esc_boot>:
/**
  * @brief  Boot function to initialize the ESC board.
  * @retval none.
  */
void esc_boot(ESC_Handle_t * pHandle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pESC_params->Command_TIM;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	60fb      	str	r3, [r7, #12]
  /*##- Start the Input Capture in interrupt mode ##########################*/
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH2);
 8000374:	2110      	movs	r1, #16
 8000376:	68f8      	ldr	r0, [r7, #12]
 8000378:	f7ff ff6d 	bl	8000256 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableIT_CC1 (TIMx);
 800037c:	68f8      	ldr	r0, [r7, #12]
 800037e:	f7ff ffe1 	bl	8000344 <LL_TIM_EnableIT_CC1>
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1);
 8000382:	2101      	movs	r1, #1
 8000384:	68f8      	ldr	r0, [r7, #12]
 8000386:	f7ff ff66 	bl	8000256 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIMx);
 800038a:	68f8      	ldr	r0, [r7, #12]
 800038c:	f7ff ff45 	bl	800021a <LL_TIM_EnableCounter>
#ifdef ESC_BEEP_FEATURE
  pHandle->beep_state = SM_BEEP_1;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2201      	movs	r2, #1
 8000394:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pHandle->phase_check_status = false;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2200      	movs	r2, #0
 800039c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#endif
  
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <esc_pwm_run>:
  pHandle->restart_delay = STOP_DURATION;  
  pHandle->arming_counter = 0;
}

ESC_State_t esc_pwm_run(ESC_Handle_t * pHandle)
{ 
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  uint32_t new_speed;
  ESC_Params_t const * pESC_params = pHandle->pESC_params;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	60fb      	str	r3, [r7, #12]
  bool cmd_status;
  ESC_State_t ESC_Fault_Occured = ESC_NOERROR;
 80003b6:	2300      	movs	r3, #0
 80003b8:	74fb      	strb	r3, [r7, #19]
 { 
    /* First we detect that we still receive signal from PWM input */
   if(pHandle->watchdog_counter == pHandle->watchdog_counter_prev)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d10f      	bne.n	80003ea <esc_pwm_run+0x42>
   {
     if(pHandle->pwm_timeout == 0)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6a1b      	ldr	r3, [r3, #32]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d105      	bne.n	80003de <esc_pwm_run+0x36>
     {
       /* Ton_Value is not updated anymore, set to 0 for safety*/
       pHandle->Ton_value  = 0;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2200      	movs	r2, #0
 80003d6:	629a      	str	r2, [r3, #40]	; 0x28
       ESC_Fault_Occured = ESC_NOSIGNAL;
 80003d8:	2301      	movs	r3, #1
 80003da:	74fb      	strb	r3, [r7, #19]
 80003dc:	e012      	b.n	8000404 <esc_pwm_run+0x5c>
     }
     else 
     {
       pHandle->pwm_timeout--;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6a1b      	ldr	r3, [r3, #32]
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	621a      	str	r2, [r3, #32]
 80003e8:	e00c      	b.n	8000404 <esc_pwm_run+0x5c>
     }
   }
   else 
   {
     pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	68da      	ldr	r2, [r3, #12]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	621a      	str	r2, [r3, #32]
     pHandle->watchdog_counter_prev = pHandle->watchdog_counter;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     esc_reset_pwm_ch(pHandle);
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f000 fc1e 	bl	8000c40 <esc_reset_pwm_ch>
   }  
  /* User defined code */
  switch (pHandle->sm_state)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800040a:	2b03      	cmp	r3, #3
 800040c:	f200 8111 	bhi.w	8000632 <esc_pwm_run+0x28a>
 8000410:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <esc_pwm_run+0x70>)
 8000412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000416:	bf00      	nop
 8000418:	08000429 	.word	0x08000429
 800041c:	08000491 	.word	0x08000491
 8000420:	08000529 	.word	0x08000529
 8000424:	080005e5 	.word	0x080005e5
  {
   case ESC_ARMING:
    {
      if((pHandle->Ton_value >= pESC_params->Ton_arming) && (pHandle->Ton_value < pESC_params->Ton_min)) 
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	429a      	cmp	r2, r3
 8000432:	d324      	bcc.n	800047e <esc_pwm_run+0xd6>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	429a      	cmp	r2, r3
 800043e:	d21e      	bcs.n	800047e <esc_pwm_run+0xd6>
      {
        pHandle->arming_counter++;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	61da      	str	r2, [r3, #28]
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	69da      	ldr	r2, [r3, #28]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	429a      	cmp	r2, r3
 8000454:	d91b      	bls.n	800048e <esc_pwm_run+0xe6>
         {
           pHandle->sm_state = ESC_ARMED;   
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2201      	movs	r2, #1
 800045a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
           pHandle->arming_counter  = 0;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	61da      	str	r2, [r3, #28]
           pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	68da      	ldr	r2, [r3, #12]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	621a      	str	r2, [r3, #32]
           pHandle->watchdog_counter = 0;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
           pHandle->watchdog_counter_prev = 0;   
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 800047c:	e007      	b.n	800048e <esc_pwm_run+0xe6>
         }
      }
      else 
       {
         pHandle->sm_state = ESC_ARMING;          
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
         pHandle->arming_counter  = 0;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
       }
      }
    break;  
 800048c:	e0d1      	b.n	8000632 <esc_pwm_run+0x28a>
 800048e:	e0d0      	b.n	8000632 <esc_pwm_run+0x28a>
   case ESC_ARMED:
    {
      if (pHandle->Ton_value >= pESC_params->Ton_min)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	429a      	cmp	r2, r3
 800049a:	d336      	bcc.n	800050a <esc_pwm_run+0x162>
        /* Next state */
        /* This command sets what will be the first speed ramp after the 
          MC_StartMotor1 command. It requires as first parameter the 
          target mechanical speed in thenth of Hz and as
          second parameter the speed ramp duration in milliseconds. */
        MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (pESC_params->speed_min_valueRPM/6), 0 );
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b65      	ldr	r3, [pc, #404]	; (800063c <esc_pwm_run+0x294>)
 80004a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004ae:	4a64      	ldr	r2, [pc, #400]	; (8000640 <esc_pwm_run+0x298>)
 80004b0:	fba2 2303 	umull	r2, r3, r2, r3
 80004b4:	089b      	lsrs	r3, r3, #2
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	b21b      	sxth	r3, r3
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f001 fa32 	bl	8001926 <MCI_ExecSpeedRamp>
        
        /* This is a user command used to start the motor. The speed ramp shall be
          pre programmed before the command.*/
        cmd_status = MCI_StartMotor( pMCI[pESC_params->motor] );
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b5c      	ldr	r3, [pc, #368]	; (800063c <esc_pwm_run+0x294>)
 80004cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fa7e 	bl	80019d2 <MCI_StartMotor>
 80004d6:	4603      	mov	r3, r0
 80004d8:	72fb      	strb	r3, [r7, #11]
      
        /* It verifies if the command  "MCI_StartMotor" is successfully executed 
          otherwise it tries to restart the procedure */
        if(cmd_status==false)    
 80004da:	7afb      	ldrb	r3, [r7, #11]
 80004dc:	f083 0301 	eor.w	r3, r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d004      	beq.n	80004f0 <esc_pwm_run+0x148>
        {
          pHandle->sm_state = ESC_ARMING;                       // Command NOT executed
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80004ee:	e007      	b.n	8000500 <esc_pwm_run+0x158>
        }
        else 
        {
          pHandle->sm_state = ESC_POSITIVE_RUN;              // Command executed
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2202      	movs	r2, #2
 80004f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          /* From this point the motor is spinning and stop and restart requires STOP_DURATION delay*/
          pHandle->restart_delay = STOP_DURATION; 
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80004fe:	859a      	strh	r2, [r3, #44]	; 0x2c
        }
        pHandle->restart_delay = STOP_DURATION;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000506:	859a      	strh	r2, [r3, #44]	; 0x2c
          /* Nothing to do stay in ARMED state waiting for TON > TON_MIN*/
        }
      }
        
    }
    break;  
 8000508:	e090      	b.n	800062c <esc_pwm_run+0x284>
        if (pHandle->Ton_value < pESC_params->Ton_arming)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	429a      	cmp	r2, r3
 8000514:	f080 808a 	bcs.w	800062c <esc_pwm_run+0x284>
          pHandle->sm_state = ESC_ARMING;          
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          pHandle->arming_counter  = 0;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
    break;  
 8000526:	e081      	b.n	800062c <esc_pwm_run+0x284>
   case ESC_POSITIVE_RUN:
    {  
      if( pHandle->Ton_value < pESC_params->Ton_min)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	429a      	cmp	r2, r3
 8000532:	d21c      	bcs.n	800056e <esc_pwm_run+0x1c6>
      {
        pHandle->turnoff_delay --;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
        if(pHandle->turnoff_delay <= 0)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dc74      	bgt.n	8000630 <esc_pwm_run+0x288>
        {
          pHandle->sm_state = ESC_STOP; 
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2203      	movs	r2, #3
 800054a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	625a      	str	r2, [r3, #36]	; 0x24
          /* This is a user command to stop the motor */
          MCI_StopMotor( pMCI[pESC_params->motor] );
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800055e:	461a      	mov	r2, r3
 8000560:	4b36      	ldr	r3, [pc, #216]	; (800063c <esc_pwm_run+0x294>)
 8000562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fa4a 	bl	8001a00 <MCI_StopMotor>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );     
        }
      }
    }
      
   break;
 800056c:	e060      	b.n	8000630 <esc_pwm_run+0x288>
        pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	625a      	str	r2, [r3, #36]	; 0x24
        if(pHandle->Ton_value <= pESC_params->Ton_max)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	429a      	cmp	r2, r3
 8000582:	d815      	bhi.n	80005b0 <esc_pwm_run+0x208>
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_min) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_max) + pESC_params->speed_min_valueRPM;  
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000592:	4611      	mov	r1, r2
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000598:	1a8a      	subs	r2, r1, r2
 800059a:	fb02 f203 	mul.w	r2, r2, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80005aa:	4413      	add	r3, r2
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e002      	b.n	80005b6 <esc_pwm_run+0x20e>
          new_speed = pESC_params->speed_max_valueRPM;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005b4:	617b      	str	r3, [r7, #20]
        if (MC_GetSTMStateMotor1() == RUN)
 80005b6:	f001 f985 	bl	80018c4 <MC_GetSTMStateMotor1>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b06      	cmp	r3, #6
 80005be:	d137      	bne.n	8000630 <esc_pwm_run+0x288>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );     
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <esc_pwm_run+0x294>)
 80005ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <esc_pwm_run+0x298>)
 80005d2:	fba2 2303 	umull	r2, r3, r2, r3
 80005d6:	089b      	lsrs	r3, r3, #2
 80005d8:	b21b      	sxth	r3, r3
 80005da:	2232      	movs	r2, #50	; 0x32
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 f9a2 	bl	8001926 <MCI_ExecSpeedRamp>
   break;
 80005e2:	e025      	b.n	8000630 <esc_pwm_run+0x288>
   case ESC_STOP:
    {    
       /* After the time "STOP_DURATION" the motor will be restarted */
       if (pHandle->restart_delay == 0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d114      	bne.n	8000618 <esc_pwm_run+0x270>
          {
            /* Next state */ 
            pHandle->sm_state = ESC_ARMING;  
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            pHandle->Ton_value  = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
            pHandle->arming_counter = 0;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
            pHandle->buffer_completed = false;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            pHandle->index_filter = 0;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
             pHandle->pwm_accumulator = 0;  
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
          else
          {
            pHandle->restart_delay--;
          }
    }
    break;  
 8000616:	e00c      	b.n	8000632 <esc_pwm_run+0x28a>
            pHandle->restart_delay--;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800061e:	b29b      	uxth	r3, r3
 8000620:	3b01      	subs	r3, #1
 8000622:	b29b      	uxth	r3, r3
 8000624:	b21a      	sxth	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;  
 800062a:	e002      	b.n	8000632 <esc_pwm_run+0x28a>
    break;  
 800062c:	bf00      	nop
 800062e:	e000      	b.n	8000632 <esc_pwm_run+0x28a>
   break;
 8000630:	bf00      	nop
  }
 }
 return (ESC_Fault_Occured);
 8000632:	7cfb      	ldrb	r3, [r7, #19]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000ae8 	.word	0x20000ae8
 8000640:	aaaaaaab 	.word	0xaaaaaaab

08000644 <esc_pwm_control>:
  * @brief  This is the main function to use in the main.c in order to start the current example 
  * @param  None
  * @retval None
  */
void esc_pwm_control(ESC_Handle_t * pHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
   ESC_State_t ESC_Fault_Occured;
 
  if(UI_IdleTimeHasElapsed()) {
 800064c:	f004 f9d0 	bl	80049f0 <UI_IdleTimeHasElapsed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d03f      	beq.n	80006d6 <esc_pwm_control+0x92>
    UI_SetIdleTime(USER_TIMEBASE_OCCURENCE_TICKS);   
 8000656:	2004      	movs	r0, #4
 8000658:	f004 f9e0 	bl	8004a1c <UI_SetIdleTime>
#ifdef ESC_BEEP_FEATURE    
    if ( pHandle->phase_check_status == false)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000662:	f083 0301 	eor.w	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <esc_pwm_control+0x3a>
    {
      pHandle->phase_check_status = esc_phase_check (pHandle);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f9c9 	bl	8000a04 <esc_phase_check>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      {
       /* Nothing to do */
      }
    }
  }
}
 800067c:	e02b      	b.n	80006d6 <esc_pwm_control+0x92>
      if (MC_GetSTMStateMotor1() == FAULT_OVER)
 800067e:	f001 f921 	bl	80018c4 <MC_GetSTMStateMotor1>
 8000682:	4603      	mov	r3, r0
 8000684:	2b0b      	cmp	r3, #11
 8000686:	d115      	bne.n	80006b4 <esc_pwm_control+0x70>
       if (MC_GetOccurredFaultsMotor1() == MC_UNDER_VOLT)
 8000688:	f001 f910 	bl	80018ac <MC_GetOccurredFaultsMotor1>
 800068c:	4603      	mov	r3, r0
 800068e:	2b04      	cmp	r3, #4
 8000690:	d107      	bne.n	80006a2 <esc_pwm_control+0x5e>
         pHandle->phase_check_status = false;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
         pHandle-> start_check_flag = false;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
       MC_AcknowledgeFaultMotor1();
 80006a2:	f001 f8f7 	bl	8001894 <MC_AcknowledgeFaultMotor1>
       pHandle->sm_state = ESC_ARMING;   
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
       pHandle->arming_counter  = 0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
      ESC_Fault_Occured = esc_pwm_run(pHandle);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fe77 	bl	80003a8 <esc_pwm_run>
 80006ba:	4603      	mov	r3, r0
 80006bc:	73fb      	strb	r3, [r7, #15]
      if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d108      	bne.n	80006d6 <esc_pwm_control+0x92>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d103      	bne.n	80006d6 <esc_pwm_control+0x92>
        esc_beep_loop(pHandle, 1);
 80006ce:	2101      	movs	r1, #1
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f889 	bl	80007e8 <esc_beep_loop>
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <esc_capture_filter>:

static uint32_t esc_capture_filter(ESC_Handle_t * pHandle, uint32_t capture_value)
{ 
 80006e0:	b480      	push	{r7}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
uint32_t pwm_filtered;
uint32_t pwm_max =0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]

  if(pHandle->buffer_completed == false)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80006f4:	f083 0301 	eor.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d024      	beq.n	8000748 <esc_capture_filter+0x68>
  {
     pHandle->pwm_accumulator += capture_value;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	441a      	add	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	619a      	str	r2, [r3, #24]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	605a      	str	r2, [r3, #4]
     pHandle->index_filter++;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	615a      	str	r2, [r3, #20]
     pwm_filtered = pHandle->pwm_accumulator/pHandle->index_filter;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
     if(pHandle->index_filter >= ESC_FILTER_DEEP) 
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d947      	bls.n	80007c8 <esc_capture_filter+0xe8>
       {
         pHandle->index_filter = 0;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
         pHandle->buffer_completed = true;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000746:	e03f      	b.n	80007c8 <esc_capture_filter+0xe8>
       }
  }  
  else
  {
     /* We compute moving average, index_filter is the first data to remove*/
     pHandle->pwm_accumulator -= pHandle->pwm_buffer[pHandle->index_filter];
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	699a      	ldr	r2, [r3, #24]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	1ad2      	subs	r2, r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	619a      	str	r2, [r3, #24]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	4413      	add	r3, r2
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	605a      	str	r2, [r3, #4]
     pHandle->pwm_accumulator += capture_value;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	699a      	ldr	r2, [r3, #24]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	441a      	add	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	619a      	str	r2, [r3, #24]
     for (uint8_t i =0; i< ESC_FILTER_DEEP; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e00c      	b.n	8000798 <esc_capture_filter+0xb8>
     {
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf38      	it	cc
 800078e:	4613      	movcc	r3, r2
 8000790:	613b      	str	r3, [r7, #16]
     for (uint8_t i =0; i< ESC_FILTER_DEEP; i++)
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	3301      	adds	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d9ef      	bls.n	800077e <esc_capture_filter+0x9e>
     }
     pHandle->index_filter++;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	615a      	str	r2, [r3, #20]
     if(pHandle->index_filter >= ESC_FILTER_DEEP)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d902      	bls.n	80007b6 <esc_capture_filter+0xd6>
     {
      pHandle->index_filter = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
     }
     /* Remove the max pwm input from the average computation*/
     pwm_filtered = (pHandle->pwm_accumulator - pwm_max ) / (ESC_FILTER_DEEP -1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <esc_capture_filter+0x104>)
 80007c0:	fba2 2303 	umull	r2, r3, r2, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  }
  pwm_filtered = (pwm_filtered==0) ? 1 : pwm_filtered ;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <esc_capture_filter+0xf2>
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	e000      	b.n	80007d4 <esc_capture_filter+0xf4>
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  
return(pwm_filtered);
 80007d6:	697b      	ldr	r3, [r7, #20]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	aaaaaaab 	.word	0xaaaaaaab

080007e8 <esc_beep_loop>:

#ifdef ESC_BEEP_FEATURE

static bool esc_beep_loop(ESC_Handle_t * pHandle, uint16_t number_beep)
{ 
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60bb      	str	r3, [r7, #8]
  
   bool ESC_Beep_loop_STATUS = false;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
        
 /* TIMx Peripheral Configuration -------------------------------------------*/     
  if( pHandle-> start_check_flag == false)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000806:	f083 0301 	eor.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d017      	beq.n	8000840 <esc_beep_loop+0x58>
  {
     pHandle-> start_check_flag = true;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
     ESC_Beep_loop_STATUS = false;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]
   
    /* Set the Output State */
    LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR);
 800081c:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	f7ff fd0a 	bl	800023a <LL_TIM_SetAutoReload>

    LL_TIM_CC_DisableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000826:	f240 5155 	movw	r1, #1365	; 0x555
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f7ff fd24 	bl	8000278 <LL_TIM_CC_DisableChannel>
                                   | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N 
                                   | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N);
    
    LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000830:	f240 1111 	movw	r1, #273	; 0x111
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f7ff fd0e 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                   | LL_TIM_CHANNEL_CH3 );
    
    LL_TIM_EnableAllOutputs (TIMx);
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fd64 	bl	8000308 <LL_TIM_EnableAllOutputs>
  }  
 { 
  /* User defined code */
  switch (pHandle->beep_state)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000846:	2b04      	cmp	r3, #4
 8000848:	f000 80a4 	beq.w	8000994 <esc_beep_loop+0x1ac>
 800084c:	2b04      	cmp	r3, #4
 800084e:	f300 80d3 	bgt.w	80009f8 <esc_beep_loop+0x210>
 8000852:	2b01      	cmp	r3, #1
 8000854:	d003      	beq.n	800085e <esc_beep_loop+0x76>
 8000856:	2b03      	cmp	r3, #3
 8000858:	f000 8082 	beq.w	8000960 <esc_beep_loop+0x178>
 800085c:	e0cc      	b.n	80009f8 <esc_beep_loop+0x210>
  {
   case SM_BEEP_1:
    { 
      if(pHandle->beep_counter == 0)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000862:	2b00      	cmp	r3, #0
 8000864:	d118      	bne.n	8000898 <esc_beep_loop+0xb0>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_DUTY);
 8000866:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800086a:	68b8      	ldr	r0, [r7, #8]
 800086c:	f7ff fd16 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_FREQ_ARR);
 8000870:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000874:	68b8      	ldr	r0, [r7, #8]
 8000876:	f7ff fd1f 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_FREQ_ARR);
 800087a:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 800087e:	68b8      	ldr	r0, [r7, #8]
 8000880:	f7ff fd28 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 );
 8000884:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000888:	68b8      	ldr	r0, [r7, #8]
 800088a:	f7ff fcf5 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N
 800088e:	f240 4145 	movw	r1, #1093	; 0x445
 8000892:	68b8      	ldr	r0, [r7, #8]
 8000894:	f7ff fcdf 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N));
      }
      pHandle->beep_counter++;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800089c:	3301      	adds	r3, #1
 800089e:	b29a      	uxth	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > BEEP_TIME_MAX)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80008a8:	2b64      	cmp	r3, #100	; 0x64
 80008aa:	f240 80a0 	bls.w	80009ee <esc_beep_loop+0x206>
      {
        if(number_beep == 1)
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d107      	bne.n	80008c4 <esc_beep_loop+0xdc>
        {
          pHandle->beep_stop_time = 570;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f240 223a 	movw	r2, #570	; 0x23a
 80008ba:	85da      	strh	r2, [r3, #46]	; 0x2e
          pHandle->beep_state =  SM_BEEP_4; 
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2204      	movs	r2, #4
 80008c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        }
        if(number_beep == 2)
 80008c4:	887b      	ldrh	r3, [r7, #2]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d121      	bne.n	800090e <esc_beep_loop+0x126>
        {
          pHandle->beep_num ++;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          if(pHandle->beep_num <= 2)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d808      	bhi.n	80008f6 <esc_beep_loop+0x10e>
          {
          LL_TIM_OC_SetCompareCH1 (TIMx,0);  
 80008e4:	2100      	movs	r1, #0
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	f7ff fcd8 	bl	800029c <LL_TIM_OC_SetCompareCH1>
          pHandle->beep_state =  SM_BEEP_3; 
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2203      	movs	r2, #3
 80008f0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80008f4:	e00b      	b.n	800090e <esc_beep_loop+0x126>
          }
          else 
          {
            pHandle->beep_stop_time = 410;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80008fc:	85da      	strh	r2, [r3, #46]	; 0x2e
            pHandle->beep_state = SM_BEEP_4;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2204      	movs	r2, #4
 8000902:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            pHandle->beep_num = 1;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2201      	movs	r2, #1
 800090a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          }
        } 
        if(number_beep == 3)
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d121      	bne.n	8000958 <esc_beep_loop+0x170>
        {
          pHandle->beep_num ++;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800091a:	3301      	adds	r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          if(pHandle->beep_num <= 3)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800092a:	2b03      	cmp	r3, #3
 800092c:	d808      	bhi.n	8000940 <esc_beep_loop+0x158>
          {
          LL_TIM_OC_SetCompareCH1 (TIMx,0); 
 800092e:	2100      	movs	r1, #0
 8000930:	68b8      	ldr	r0, [r7, #8]
 8000932:	f7ff fcb3 	bl	800029c <LL_TIM_OC_SetCompareCH1>
          pHandle->beep_state =  SM_BEEP_3; 
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2203      	movs	r2, #3
 800093a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800093e:	e00b      	b.n	8000958 <esc_beep_loop+0x170>
          }
          else 
          {
            pHandle->beep_stop_time = 270;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000946:	85da      	strh	r2, [r3, #46]	; 0x2e
            pHandle->beep_state = SM_BEEP_4;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2204      	movs	r2, #4
 800094c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            pHandle->beep_num = 1;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2201      	movs	r2, #1
 8000954:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          }
        }         
       pHandle->beep_counter = 0;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	861a      	strh	r2, [r3, #48]	; 0x30
      }
    }
   break; 
 800095e:	e046      	b.n	80009ee <esc_beep_loop+0x206>
  case SM_BEEP_3:
    {
    if(pHandle->beep_counter == 0)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000964:	2b00      	cmp	r3, #0
 8000966:	d103      	bne.n	8000970 <esc_beep_loop+0x188>
      {
         LL_TIM_OC_SetCompareCH1 (TIMx,0); 
 8000968:	2100      	movs	r1, #0
 800096a:	68b8      	ldr	r0, [r7, #8]
 800096c:	f7ff fc96 	bl	800029c <LL_TIM_OC_SetCompareCH1>
      }
      pHandle->beep_counter++;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000974:	3301      	adds	r3, #1
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > 50)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000980:	2b32      	cmp	r3, #50	; 0x32
 8000982:	d936      	bls.n	80009f2 <esc_beep_loop+0x20a>
      {
        pHandle->beep_state =  SM_BEEP_1; 
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2201      	movs	r2, #1
 8000988:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	861a      	strh	r2, [r3, #48]	; 0x30
      }
    }
   break;      
 8000992:	e02e      	b.n	80009f2 <esc_beep_loop+0x20a>
   case SM_BEEP_4:
    {
    if(pHandle->beep_counter == 0)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000998:	2b00      	cmp	r3, #0
 800099a:	d10b      	bne.n	80009b4 <esc_beep_loop+0x1cc>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,0);        
 800099c:	2100      	movs	r1, #0
 800099e:	68b8      	ldr	r0, [r7, #8]
 80009a0:	f7ff fc7c 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,0);  
 80009a4:	2100      	movs	r1, #0
 80009a6:	68b8      	ldr	r0, [r7, #8]
 80009a8:	f7ff fc86 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,0); 
 80009ac:	2100      	movs	r1, #0
 80009ae:	68b8      	ldr	r0, [r7, #8]
 80009b0:	f7ff fc90 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
      }
      pHandle->beep_counter++;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d914      	bls.n	80009f6 <esc_beep_loop+0x20e>
      {
        pHandle->beep_state =  SM_BEEP_1; 
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2201      	movs	r2, #1
 80009d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	861a      	strh	r2, [r3, #48]	; 0x30
        esc_reset_pwm_ch(pHandle);
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 f930 	bl	8000c40 <esc_reset_pwm_ch>
        pHandle-> start_check_flag = false;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ESC_Beep_loop_STATUS = true;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
      }
    }
   break;   
 80009ec:	e003      	b.n	80009f6 <esc_beep_loop+0x20e>
   break; 
 80009ee:	bf00      	nop
 80009f0:	e002      	b.n	80009f8 <esc_beep_loop+0x210>
   break;      
 80009f2:	bf00      	nop
 80009f4:	e000      	b.n	80009f8 <esc_beep_loop+0x210>
   break;   
 80009f6:	bf00      	nop
  }
 }
 return (ESC_Beep_loop_STATUS);
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <esc_phase_check>:

static bool esc_phase_check(ESC_Handle_t * pHandle)
{ 
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	60bb      	str	r3, [r7, #8]
   bool ESC_phase_check_status = false;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]
 
 /* TIMx Peripheral Configuration -------------------------------------------*/    
  if(pHandle-> start_check_flag == false)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d01e      	beq.n	8000a66 <esc_phase_check+0x62>
  {
    pHandle-> start_check_flag = true;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Set the Output State */
    ESC_phase_check_status = false;   
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]
    LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR);
 8000a34:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000a38:	68b8      	ldr	r0, [r7, #8]
 8000a3a:	f7ff fbfe 	bl	800023a <LL_TIM_SetAutoReload>
    
    LL_TIM_CC_DisableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000a3e:	f240 5155 	movw	r1, #1365	; 0x555
 8000a42:	68b8      	ldr	r0, [r7, #8]
 8000a44:	f7ff fc18 	bl	8000278 <LL_TIM_CC_DisableChannel>
                                   | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N 
                                   | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N);
  
    LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000a48:	f240 1111 	movw	r1, #273	; 0x111
 8000a4c:	68b8      	ldr	r0, [r7, #8]
 8000a4e:	f7ff fc02 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                   | LL_TIM_CHANNEL_CH3 );
    
    LL_TIM_EnableAllOutputs (TIMx);
 8000a52:	68b8      	ldr	r0, [r7, #8]
 8000a54:	f7ff fc58 	bl	8000308 <LL_TIM_EnableAllOutputs>
    pHandle->beep_state = SM_BEEP_1;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    pHandle->beep_counter = 0;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	861a      	strh	r2, [r3, #48]	; 0x30

  }  
 { 
  /* User defined code */
  switch (pHandle->beep_state)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	f200 80e0 	bhi.w	8000c34 <esc_phase_check+0x230>
 8000a74:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <esc_phase_check+0x78>)
 8000a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7a:	bf00      	nop
 8000a7c:	08000a8d 	.word	0x08000a8d
 8000a80:	08000aff 	.word	0x08000aff
 8000a84:	08000b71 	.word	0x08000b71
 8000a88:	08000bcf 	.word	0x08000bcf
  {
   case SM_BEEP_1:
    { 
      if(pHandle->beep_counter == 0)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d117      	bne.n	8000ac4 <esc_phase_check+0xc0>
      {
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_DUTY); 
 8000a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a98:	68b8      	ldr	r0, [r7, #8]
 8000a9a:	f7ff fc1b 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_FREQ_ARR);
 8000a9e:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000aa2:	68b8      	ldr	r0, [r7, #8]
 8000aa4:	f7ff fc08 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_FREQ_ARR);
 8000aa8:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	f7ff fbf5 	bl	800029c <LL_TIM_OC_SetCompareCH1>

        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 );
 8000ab2:	2111      	movs	r1, #17
 8000ab4:	68b8      	ldr	r0, [r7, #8]
 8000ab6:	f7ff fbdf 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2N
 8000aba:	f240 5144 	movw	r1, #1348	; 0x544
 8000abe:	68b8      	ldr	r0, [r7, #8]
 8000ac0:	f7ff fbc9 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH3N | LL_TIM_CHANNEL_CH3));        

      }
      pHandle->beep_counter++;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	861a      	strh	r2, [r3, #48]	; 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ad4:	2b64      	cmp	r3, #100	; 0x64
 8000ad6:	f240 80a6 	bls.w	8000c26 <esc_phase_check+0x222>
      {
        pHandle->beep_state =  SM_BEEP_2; 
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2202      	movs	r2, #2
 8000ade:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	861a      	strh	r2, [r3, #48]	; 0x30
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_DUTY);
 8000ae8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aec:	68b8      	ldr	r0, [r7, #8]
 8000aee:	f7ff fbe3 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR1);
 8000af2:	f24f 2130 	movw	r1, #62000	; 0xf230
 8000af6:	68b8      	ldr	r0, [r7, #8]
 8000af8:	f7ff fb9f 	bl	800023a <LL_TIM_SetAutoReload>
      }
    }
   break; 
 8000afc:	e093      	b.n	8000c26 <esc_phase_check+0x222>
   case SM_BEEP_2:
    {
    if(pHandle->beep_counter == 0)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d118      	bne.n	8000b38 <esc_phase_check+0x134>
      {
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_DUTY);
 8000b06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0a:	68b8      	ldr	r0, [r7, #8]
 8000b0c:	f7ff fbd4 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_FREQ_ARR1);
 8000b10:	f24f 2130 	movw	r1, #62000	; 0xf230
 8000b14:	68b8      	ldr	r0, [r7, #8]
 8000b16:	f7ff fbc1 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_FREQ_ARR1);
 8000b1a:	f24f 2130 	movw	r1, #62000	; 0xf230
 8000b1e:	68b8      	ldr	r0, [r7, #8]
 8000b20:	f7ff fbd8 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1 );
 8000b24:	f240 1101 	movw	r1, #257	; 0x101
 8000b28:	68b8      	ldr	r0, [r7, #8]
 8000b2a:	f7ff fba5 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH3N | LL_TIM_CHANNEL_CH1N
 8000b2e:	f240 4154 	movw	r1, #1108	; 0x454
 8000b32:	68b8      	ldr	r0, [r7, #8]
 8000b34:	f7ff fb8f 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH2N));
      }
      pHandle->beep_counter++;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b48:	2b64      	cmp	r3, #100	; 0x64
 8000b4a:	d96e      	bls.n	8000c2a <esc_phase_check+0x226>
      {
        pHandle->beep_state =  SM_BEEP_3; 
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2203      	movs	r2, #3
 8000b50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	861a      	strh	r2, [r3, #48]	; 0x30
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_DUTY);
 8000b5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b5e:	68b8      	ldr	r0, [r7, #8]
 8000b60:	f7ff fb9c 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR2);          
 8000b64:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8000b68:	68b8      	ldr	r0, [r7, #8]
 8000b6a:	f7ff fb66 	bl	800023a <LL_TIM_SetAutoReload>
      }
    }
   break;  
 8000b6e:	e05c      	b.n	8000c2a <esc_phase_check+0x226>
   case SM_BEEP_3:
    {
    if(pHandle->beep_counter == 0)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d118      	bne.n	8000baa <esc_phase_check+0x1a6>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_DUTY);
 8000b78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b7c:	68b8      	ldr	r0, [r7, #8]
 8000b7e:	f7ff fb8d 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_FREQ_ARR2);
 8000b82:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8000b86:	68b8      	ldr	r0, [r7, #8]
 8000b88:	f7ff fb96 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_FREQ_ARR2);
 8000b8c:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8000b90:	68b8      	ldr	r0, [r7, #8]
 8000b92:	f7ff fb9f 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 );
 8000b96:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000b9a:	68b8      	ldr	r0, [r7, #8]
 8000b9c:	f7ff fb6c 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N
 8000ba0:	f240 4145 	movw	r1, #1093	; 0x445
 8000ba4:	68b8      	ldr	r0, [r7, #8]
 8000ba6:	f7ff fb56 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N));       
      }
      pHandle->beep_counter++;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bba:	2b64      	cmp	r3, #100	; 0x64
 8000bbc:	d937      	bls.n	8000c2e <esc_phase_check+0x22a>
      {
        pHandle->beep_state =  SM_BEEP_4; 
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	861a      	strh	r2, [r3, #48]	; 0x30
      }    
    }
   break;  
 8000bcc:	e02f      	b.n	8000c2e <esc_phase_check+0x22a>
   case SM_BEEP_4:
    {
    if(pHandle->beep_counter == 0)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10b      	bne.n	8000bee <esc_phase_check+0x1ea>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f7ff fb5f 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	68b8      	ldr	r0, [r7, #8]
 8000be2:	f7ff fb69 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fb73 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
      }
      pHandle->beep_counter++;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > 1000)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c02:	d916      	bls.n	8000c32 <esc_phase_check+0x22e>
      {
        pHandle->beep_state =  SM_BEEP_1; 
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2201      	movs	r2, #1
 8000c08:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0; 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	861a      	strh	r2, [r3, #48]	; 0x30
        esc_reset_pwm_ch(pHandle);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f814 	bl	8000c40 <esc_reset_pwm_ch>
        pHandle-> start_check_flag = false;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ESC_phase_check_status = true;       
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
      }
    }
   break;    
 8000c24:	e005      	b.n	8000c32 <esc_phase_check+0x22e>
   break; 
 8000c26:	bf00      	nop
 8000c28:	e004      	b.n	8000c34 <esc_phase_check+0x230>
   break;  
 8000c2a:	bf00      	nop
 8000c2c:	e002      	b.n	8000c34 <esc_phase_check+0x230>
   break;  
 8000c2e:	bf00      	nop
 8000c30:	e000      	b.n	8000c34 <esc_phase_check+0x230>
   break;    
 8000c32:	bf00      	nop
  }
 }
 return(ESC_phase_check_status);
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop

08000c40 <esc_reset_pwm_ch>:

#endif // ESC_BEEP_FEATURE

static void esc_reset_pwm_ch(ESC_Handle_t * pHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    TIM_TypeDef * TIMx = TIM1;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <esc_reset_pwm_ch+0x34>)
 8000c4a:	60fb      	str	r3, [r7, #12]

    LL_TIM_CC_DisableChannel (TIMx, (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000c4c:	f240 5155 	movw	r1, #1365	; 0x555
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fb11 	bl	8000278 <LL_TIM_CC_DisableChannel>
                           | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N
                           | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N ) );

    LL_TIM_SetAutoReload (TIMx, ((PWM_PERIOD_CYCLES) / 2));
 8000c56:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000c5a:	68f8      	ldr	r0, [r7, #12]
 8000c5c:	f7ff faed 	bl	800023a <LL_TIM_SetAutoReload>
   
    /* Set the Output State */ 
    LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000c60:	f240 5155 	movw	r1, #1365	; 0x555
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f7ff faf6 	bl	8000256 <LL_TIM_CC_EnableChannel>
                           | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N
                           | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N ));
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40012c00 	.word	0x40012c00

08000c78 <TIM2_IRQHandler>:
  * @param  None
  * @retval None
  */

void TIM2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* Clear TIM1 Capture compare interrupt pending bit */
  LL_TIM_ClearFlag_CC1 (TIM2);
 8000c7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c80:	f7ff fb52 	bl	8000328 <LL_TIM_ClearFlag_CC1>

  /* Get Pulse width and low pass filter it to remove spurious informations */    
  ESC_M1.Ton_value = esc_capture_filter(&ESC_M1, LL_TIM_OC_GetCompareCH2(TIM2));
 8000c84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c88:	f7ff fb32 	bl	80002f0 <LL_TIM_OC_GetCompareCH2>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <TIM2_IRQHandler+0x4c>)
 8000c92:	f7ff fd25 	bl	80006e0 <esc_capture_filter>
 8000c96:	4603      	mov	r3, r0
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <TIM2_IRQHandler+0x4c>)
 8000c9a:	6293      	str	r3, [r2, #40]	; 0x28

  /* Fail safe mechanism: stops the motor is the PWM input is disabled */
  ESC_M1.watchdog_counter++;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <TIM2_IRQHandler+0x4c>)
 8000c9e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <TIM2_IRQHandler+0x4c>)
 8000ca8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  if(ESC_M1.watchdog_counter == 0)
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <TIM2_IRQHandler+0x4c>)
 8000cae:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <TIM2_IRQHandler+0x46>
     ESC_M1.watchdog_counter = 1;
 8000cb6:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <TIM2_IRQHandler+0x4c>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000694 	.word	0x20000694

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f005 f81e 	bl	8005d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f84c 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 fcc4 	bl	8001660 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cd8:	f000 f8d2 	bl	8000e80 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000cdc:	f000 f98c 	bl	8000ff8 <MX_ADC3_Init>
  MX_COMP2_Init();
 8000ce0:	f000 fa30 	bl	8001144 <MX_COMP2_Init>
  MX_COMP4_Init();
 8000ce4:	f000 fa5e 	bl	80011a4 <MX_COMP4_Init>
  MX_COMP6_Init();
 8000ce8:	f000 fa8c 	bl	8001204 <MX_COMP6_Init>
  MX_TIM1_Init();
 8000cec:	f000 fb22 	bl	8001334 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cf0:	f000 fc00 	bl	80014f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000cf4:	f000 fc84 	bl	8001600 <MX_USART1_UART_Init>
  MX_MotorControl_Init();
 8000cf8:	f002 fea4 	bl	8003a44 <MX_MotorControl_Init>
  MX_CAN_Init();
 8000cfc:	f000 f9ee 	bl	80010dc <MX_CAN_Init>
  MX_DAC_Init();
 8000d00:	f000 fab0 	bl	8001264 <MX_DAC_Init>
  MX_SPI1_Init();
 8000d04:	f000 fad8 	bl	80012b8 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d08:	f000 f88d 	bl	8000e26 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  
  /*Initialization of Electronic Speed Controller (STEVAL-ESC001V1)*/
  esc_boot(&ESC_M1);
 8000d0c:	4815      	ldr	r0, [pc, #84]	; (8000d64 <main+0x9c>)
 8000d0e:	f7ff fb29 	bl	8000364 <esc_boot>

  /* Reset the driver */
  resetDriver ();
 8000d12:	f000 fda1 	bl	8001858 <resetDriver>
  //SPIwrite (TMC6100_GSTAT, GSTAT_Write);
  SPIread (TMC6100_IOIN, SPIRxBuf);
 8000d16:	4914      	ldr	r1, [pc, #80]	; (8000d68 <main+0xa0>)
 8000d18:	2004      	movs	r0, #4
 8000d1a:	f000 fd25 	bl	8001768 <SPIread>
  SPIread (TMC6100_GSTAT, SPIRxBuf);
 8000d1e:	4912      	ldr	r1, [pc, #72]	; (8000d68 <main+0xa0>)
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fd21 	bl	8001768 <SPIread>
  SPIread (TMC6100_GCONF, SPIRxBuf);
 8000d26:	4910      	ldr	r1, [pc, #64]	; (8000d68 <main+0xa0>)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 fd1d 	bl	8001768 <SPIread>
  SPIread (TMC6100_SHORT_CONF, SPIRxBuf);
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <main+0xa0>)
 8000d30:	2009      	movs	r0, #9
 8000d32:	f000 fd19 	bl	8001768 <SPIread>
  SPIread (TMC6100_DRV_CONF, SPIRxBuf);
 8000d36:	490c      	ldr	r1, [pc, #48]	; (8000d68 <main+0xa0>)
 8000d38:	200a      	movs	r0, #10
 8000d3a:	f000 fd15 	bl	8001768 <SPIread>
  /* Write driver configuration to its registers through SPI */
  configureDriver ();
 8000d3e:	f000 fd75 	bl	800182c <configureDriver>

  /* DEBUG: read the registers after writing */
  SPIread (TMC6100_GCONF, SPIRxBuf);
 8000d42:	4909      	ldr	r1, [pc, #36]	; (8000d68 <main+0xa0>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 fd0f 	bl	8001768 <SPIread>
  SPIread (TMC6100_SHORT_CONF, SPIRxBuf);
 8000d4a:	4907      	ldr	r1, [pc, #28]	; (8000d68 <main+0xa0>)
 8000d4c:	2009      	movs	r0, #9
 8000d4e:	f000 fd0b 	bl	8001768 <SPIread>
  SPIread (TMC6100_DRV_CONF, SPIRxBuf);
 8000d52:	4905      	ldr	r1, [pc, #20]	; (8000d68 <main+0xa0>)
 8000d54:	200a      	movs	r0, #10
 8000d56:	f000 fd07 	bl	8001768 <SPIread>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* Main routine for Electronic Speed Controller (STEVAL-ESC001V1) */
    esc_pwm_control(&ESC_M1); 
 8000d5a:	4802      	ldr	r0, [pc, #8]	; (8000d64 <main+0x9c>)
 8000d5c:	f7ff fc72 	bl	8000644 <esc_pwm_control>
 8000d60:	e7fb      	b.n	8000d5a <main+0x92>
 8000d62:	bf00      	nop
 8000d64:	20000694 	.word	0x20000694
 8000d68:	20000730 	.word	0x20000730

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b09e      	sub	sp, #120	; 0x78
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00e fe4e 	bl	800fa1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	223c      	movs	r2, #60	; 0x3c
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f00e fe40 	bl	800fa1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000daa:	2301      	movs	r3, #1
 8000dac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dbc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f006 fe6c 	bl	8007aa0 <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dce:	f000 fd59 	bl	8001884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000dec:	2102      	movs	r1, #2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f007 fd5e 	bl	80088b0 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dfa:	f000 fd43 	bl	8001884 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000dfe:	f241 0301 	movw	r3, #4097	; 0x1001
 8000e02:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 ff84 	bl	8008d1c <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e1a:	f000 fd33 	bl	8001884 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3778      	adds	r7, #120	; 0x78
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	2018      	movs	r0, #24
 8000e30:	f006 fbf1 	bl	8007616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e34:	2018      	movs	r0, #24
 8000e36:	f006 fc0a 	bl	800764e <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2019      	movs	r0, #25
 8000e40:	f006 fbe9 	bl	8007616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e44:	2019      	movs	r0, #25
 8000e46:	f006 fc02 	bl	800764e <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	2012      	movs	r0, #18
 8000e50:	f006 fbe1 	bl	8007616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e54:	2012      	movs	r0, #18
 8000e56:	f006 fbfa 	bl	800764e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	2103      	movs	r1, #3
 8000e5e:	2025      	movs	r0, #37	; 0x25
 8000e60:	f006 fbd9 	bl	8007616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e64:	2025      	movs	r0, #37	; 0x25
 8000e66:	f006 fbf2 	bl	800764e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	201c      	movs	r0, #28
 8000e70:	f006 fbd1 	bl	8007616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e74:	201c      	movs	r0, #28
 8000e76:	f006 fbea 	bl	800764e <HAL_NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2228      	movs	r2, #40	; 0x28
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f00e fdbe 	bl	800fa1c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eb0:	4b50      	ldr	r3, [pc, #320]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000eb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000eba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ebe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ecc:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ed2:	4b48      	ldr	r3, [pc, #288]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eda:	4b46      	ldr	r3, [pc, #280]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee0:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000ee8:	2220      	movs	r2, #32
 8000eea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eec:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ef2:	4b40      	ldr	r3, [pc, #256]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000efa:	4b3e      	ldr	r3, [pc, #248]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000efc:	2204      	movs	r2, #4
 8000efe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f00:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f06:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000f0e:	f004 ff87 	bl	8005e20 <HAL_ADC_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f18:	f000 fcb4 	bl	8001884 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f24:	4619      	mov	r1, r3
 8000f26:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000f28:	f005 ffce 	bl	8006ec8 <HAL_ADCEx_MultiModeConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f32:	f000 fca7 	bl	8001884 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000f42:	2303      	movs	r3, #3
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000f46:	2303      	movs	r3, #3
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f4a:	2340      	movs	r3, #64	; 0x40
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sConfigInjected.QueueInjectedContext = ENABLE;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  sConfigInjected.InjectedOffset = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4820      	ldr	r0, [pc, #128]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000f74:	f005 fc20 	bl	80067b8 <HAL_ADCEx_InjectedConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000f7e:	f000 fc81 	bl	8001884 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4818      	ldr	r0, [pc, #96]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000f92:	f005 fc11 	bl	80067b8 <HAL_ADCEx_InjectedConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000f9c:	f000 fc72 	bl	8001884 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000fb0:	f005 fc02 	bl	80067b8 <HAL_ADCEx_InjectedConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000fba:	f000 fc63 	bl	8001884 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000fca:	2304      	movs	r3, #4
 8000fcc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <MX_ADC1_Init+0x174>)
 8000fdc:	f005 f900 	bl	80061e0 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000fe6:	f000 fc4d 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	3750      	adds	r7, #80	; 0x50
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200007c0 	.word	0x200007c0

08000ff8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <MX_ADC3_Init+0xdc>)
 800101c:	4a2e      	ldr	r2, [pc, #184]	; (80010d8 <MX_ADC3_Init+0xe0>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001022:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001026:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <MX_ADC3_Init+0xdc>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001036:	2200      	movs	r2, #0
 8001038:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <MX_ADC3_Init+0xdc>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001044:	2200      	movs	r2, #0
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <MX_ADC3_Init+0xdc>)
 800104a:	2201      	movs	r2, #1
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001050:	2220      	movs	r2, #32
 8001052:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001056:	2201      	movs	r2, #1
 8001058:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_ADC3_Init+0xdc>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001064:	2204      	movs	r2, #4
 8001066:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_ADC3_Init+0xdc>)
 800106a:	2200      	movs	r2, #0
 800106c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001070:	2201      	movs	r2, #1
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001076:	f004 fed3 	bl	8005e20 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8001080:	f000 fc00 	bl	8001884 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <MX_ADC3_Init+0xdc>)
 8001090:	f005 ff1a 	bl	8006ec8 <HAL_ADCEx_MultiModeConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 800109a:	f000 fbf3 	bl	8001884 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800109e:	2305      	movs	r3, #5
 80010a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80010aa:	2304      	movs	r3, #4
 80010ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_ADC3_Init+0xdc>)
 80010bc:	f005 f890 	bl	80061e0 <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80010c6:	f000 fbdd 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000810 	.word	0x20000810
 80010d8:	50000400 	.word	0x50000400

080010dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_CAN_Init+0x60>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_CAN_Init+0x64>)
 80010e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <MX_CAN_Init+0x60>)
 80010e8:	2210      	movs	r2, #16
 80010ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <MX_CAN_Init+0x60>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_CAN_Init+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_CAN_Init+0x60>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_CAN_Init+0x60>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <MX_CAN_Init+0x60>)
 8001106:	2200      	movs	r2, #0
 8001108:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_CAN_Init+0x60>)
 800110c:	2200      	movs	r2, #0
 800110e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_CAN_Init+0x60>)
 8001112:	2200      	movs	r2, #0
 8001114:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_CAN_Init+0x60>)
 8001118:	2200      	movs	r2, #0
 800111a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_CAN_Init+0x60>)
 800111e:	2200      	movs	r2, #0
 8001120:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_CAN_Init+0x60>)
 8001124:	2200      	movs	r2, #0
 8001126:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_CAN_Init+0x60>)
 800112a:	f006 f81e 	bl	800716a <HAL_CAN_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001134:	f000 fba6 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000768 	.word	0x20000768
 8001140:	40006400 	.word	0x40006400

08001144 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_COMP2_Init+0x58>)
 800114a:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <MX_COMP2_Init+0x5c>)
 800114c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_COMP2_Init+0x58>)
 8001150:	2210      	movs	r2, #16
 8001152:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_COMP2_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <MX_COMP2_Init+0x58>)
 800115c:	f640 027f 	movw	r2, #2175	; 0x87f
 8001160:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_COMP2_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_COMP2_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_COMP2_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_COMP2_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_COMP2_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_COMP2_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_COMP2_Init+0x58>)
 8001188:	f006 f8ea 	bl	8007360 <HAL_COMP_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8001192:	f000 fb77 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000934 	.word	0x20000934
 80011a0:	40010020 	.word	0x40010020

080011a4 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_COMP4_Init+0x58>)
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <MX_COMP4_Init+0x5c>)
 80011ac:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_COMP4_Init+0x58>)
 80011b0:	2210      	movs	r2, #16
 80011b2:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_COMP4_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_COMP4_Init+0x58>)
 80011bc:	f640 027f 	movw	r2, #2175	; 0x87f
 80011c0:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_COMP4_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_COMP4_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <MX_COMP4_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_COMP4_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80011da:	4b08      	ldr	r3, [pc, #32]	; (80011fc <MX_COMP4_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_COMP4_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_COMP4_Init+0x58>)
 80011e8:	f006 f8ba 	bl	8007360 <HAL_COMP_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 80011f2:	f000 fb47 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000790 	.word	0x20000790
 8001200:	40010028 	.word	0x40010028

08001204 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_COMP6_Init+0x58>)
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <MX_COMP6_Init+0x5c>)
 800120c:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_COMP6_Init+0x58>)
 8001210:	2210      	movs	r2, #16
 8001212:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_COMP6_Init+0x58>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_COMP6_Init+0x58>)
 800121c:	f640 027f 	movw	r2, #2175	; 0x87f
 8001220:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_COMP6_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_COMP6_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_COMP6_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_COMP6_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_COMP6_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_COMP6_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_COMP6_Init+0x58>)
 8001248:	f006 f88a 	bl	8007360 <HAL_COMP_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_COMP6_Init+0x52>
  {
    Error_Handler();
 8001252:	f000 fb17 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000738 	.word	0x20000738
 8001260:	40010030 	.word	0x40010030

08001264 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001274:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_DAC_Init+0x4c>)
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <MX_DAC_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_DAC_Init+0x4c>)
 800127c:	f006 fa0e 	bl	800769c <HAL_DAC_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8001286:	f000 fafd 	bl	8001884 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_DAC_Init+0x4c>)
 800129a:	f006 fa21 	bl	80076e0 <HAL_DAC_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80012a4:	f000 faee 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200008e0 	.word	0x200008e0
 80012b4:	40007400 	.word	0x40007400

080012b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_SPI1_Init+0x74>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <MX_SPI1_Init+0x78>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_SPI1_Init+0x74>)
 80012c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_SPI1_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI1_Init+0x74>)
 80012d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI1_Init+0x74>)
 80012da:	2202      	movs	r2, #2
 80012dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_SPI1_Init+0x74>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI1_Init+0x74>)
 80012e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI1_Init+0x74>)
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_SPI1_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI1_Init+0x74>)
 8001306:	2207      	movs	r2, #7
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_SPI1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_SPI1_Init+0x74>)
 8001318:	f007 feb0 	bl	800907c <HAL_SPI_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001322:	f000 faaf 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000964 	.word	0x20000964
 8001330:	40013000 	.word	0x40013000

08001334 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09a      	sub	sp, #104	; 0x68
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800133a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800136a:	463b      	mov	r3, r7
 800136c:	222c      	movs	r2, #44	; 0x2c
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f00e fb53 	bl	800fa1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001376:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <MX_TIM1_Init+0x1b8>)
 8001378:	4a5d      	ldr	r2, [pc, #372]	; (80014f0 <MX_TIM1_Init+0x1bc>)
 800137a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800137c:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <MX_TIM1_Init+0x1b8>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001382:	4b5a      	ldr	r3, [pc, #360]	; (80014ec <MX_TIM1_Init+0x1b8>)
 8001384:	2220      	movs	r2, #32
 8001386:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <MX_TIM1_Init+0x1b8>)
 800138a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800138e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001390:	4b56      	ldr	r3, [pc, #344]	; (80014ec <MX_TIM1_Init+0x1b8>)
 8001392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001396:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001398:	4b54      	ldr	r3, [pc, #336]	; (80014ec <MX_TIM1_Init+0x1b8>)
 800139a:	2203      	movs	r2, #3
 800139c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b53      	ldr	r3, [pc, #332]	; (80014ec <MX_TIM1_Init+0x1b8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a4:	4851      	ldr	r0, [pc, #324]	; (80014ec <MX_TIM1_Init+0x1b8>)
 80013a6:	f008 fa2b 	bl	8009800 <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80013b0:	f000 fa68 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b4:	484d      	ldr	r0, [pc, #308]	; (80014ec <MX_TIM1_Init+0x1b8>)
 80013b6:	f008 fa4e 	bl	8009856 <HAL_TIM_PWM_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fa60 	bl	8001884 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80013c4:	2306      	movs	r3, #6
 80013c6:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80013c8:	2310      	movs	r3, #16
 80013ca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013d0:	4619      	mov	r1, r3
 80013d2:	4846      	ldr	r0, [pc, #280]	; (80014ec <MX_TIM1_Init+0x1b8>)
 80013d4:	f008 fc5e 	bl	8009c94 <HAL_TIM_SlaveConfigSynchro>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80013de:	f000 fa51 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80013e2:	2370      	movs	r3, #112	; 0x70
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f2:	4619      	mov	r1, r3
 80013f4:	483d      	ldr	r0, [pc, #244]	; (80014ec <MX_TIM1_Init+0x1b8>)
 80013f6:	f009 fa23 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001400:	f000 fa40 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001404:	2360      	movs	r3, #96	; 0x60
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001410:	2308      	movs	r3, #8
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800141c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001420:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4830      	ldr	r0, [pc, #192]	; (80014ec <MX_TIM1_Init+0x1b8>)
 800142c:	f008 fb1a 	bl	8009a64 <HAL_TIM_PWM_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001436:	f000 fa25 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	2204      	movs	r2, #4
 8001440:	4619      	mov	r1, r3
 8001442:	482a      	ldr	r0, [pc, #168]	; (80014ec <MX_TIM1_Init+0x1b8>)
 8001444:	f008 fb0e 	bl	8009a64 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800144e:	f000 fa19 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001456:	2208      	movs	r2, #8
 8001458:	4619      	mov	r1, r3
 800145a:	4824      	ldr	r0, [pc, #144]	; (80014ec <MX_TIM1_Init+0x1b8>)
 800145c:	f008 fb02 	bl	8009a64 <HAL_TIM_PWM_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001466:	f000 fa0d 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800146a:	2370      	movs	r3, #112	; 0x70
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800146e:	f240 2357 	movw	r3, #599	; 0x257
 8001472:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147c:	220c      	movs	r2, #12
 800147e:	4619      	mov	r1, r3
 8001480:	481a      	ldr	r0, [pc, #104]	; (80014ec <MX_TIM1_Init+0x1b8>)
 8001482:	f008 faef 	bl	8009a64 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 800148c:	f000 f9fa 	bl	8001884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001494:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80014a2:	2319      	movs	r3, #25
 80014a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80014b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 3;
 80014c0:	2303      	movs	r3, #3
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM1_Init+0x1b8>)
 80014ce:	f009 fa37 	bl	800a940 <HAL_TIMEx_ConfigBreakDeadTime>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80014d8:	f000 f9d4 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014dc:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM1_Init+0x1b8>)
 80014de:	f003 f957 	bl	8004790 <HAL_TIM_MspPostInit>

}
 80014e2:	bf00      	nop
 80014e4:	3768      	adds	r7, #104	; 0x68
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200008f4 	.word	0x200008f4
 80014f0:	40012c00 	.word	0x40012c00

080014f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08c      	sub	sp, #48	; 0x30
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <MX_TIM2_Init+0x108>)
 8001524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <MX_TIM2_Init+0x108>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <MX_TIM2_Init+0x108>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_TIM2_Init+0x108>)
 8001538:	f04f 32ff 	mov.w	r2, #4294967295
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_TIM2_Init+0x108>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <MX_TIM2_Init+0x108>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154a:	482c      	ldr	r0, [pc, #176]	; (80015fc <MX_TIM2_Init+0x108>)
 800154c:	f008 f958 	bl	8009800 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001556:	f000 f995 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800155a:	4828      	ldr	r0, [pc, #160]	; (80015fc <MX_TIM2_Init+0x108>)
 800155c:	f008 f9b0 	bl	80098c0 <HAL_TIM_IC_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001566:	f000 f98d 	bl	8001884 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800156a:	2304      	movs	r3, #4
 800156c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800156e:	2350      	movs	r3, #80	; 0x50
 8001570:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <MX_TIM2_Init+0x108>)
 8001582:	f008 fb87 	bl	8009c94 <HAL_TIM_SlaveConfigSynchro>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800158c:	f000 f97a 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	4817      	ldr	r0, [pc, #92]	; (80015fc <MX_TIM2_Init+0x108>)
 80015a0:	f009 f94e 	bl	800a840 <HAL_TIMEx_MasterConfigSynchronization>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80015aa:	f000 f96b 	bl	8001884 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015b2:	2301      	movs	r3, #1
 80015b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	2200      	movs	r2, #0
 80015c2:	4619      	mov	r1, r3
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_TIM2_Init+0x108>)
 80015c6:	f008 f9b0 	bl	800992a <HAL_TIM_IC_ConfigChannel>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80015d0:	f000 f958 	bl	8001884 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015d4:	2302      	movs	r3, #2
 80015d6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015d8:	2302      	movs	r3, #2
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	2204      	movs	r2, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <MX_TIM2_Init+0x108>)
 80015e4:	f008 f9a1 	bl	800992a <HAL_TIM_IC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 80015ee:	f000 f949 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	; 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200009c8 	.word	0x200009c8

08001600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_USART1_UART_Init+0x58>)
 8001606:	4a15      	ldr	r2, [pc, #84]	; (800165c <MX_USART1_UART_Init+0x5c>)
 8001608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_USART1_UART_Init+0x58>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_USART1_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_USART1_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_USART1_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_USART1_UART_Init+0x58>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <MX_USART1_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_USART1_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <MX_USART1_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_USART1_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_USART1_UART_Init+0x58>)
 8001644:	f009 f9fa 	bl	800aa3c <HAL_UART_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800164e:	f000 f919 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000860 	.word	0x20000860
 800165c:	40013800 	.word	0x40013800

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001676:	4b3a      	ldr	r3, [pc, #232]	; (8001760 <MX_GPIO_Init+0x100>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	4a39      	ldr	r2, [pc, #228]	; (8001760 <MX_GPIO_Init+0x100>)
 800167c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001680:	6153      	str	r3, [r2, #20]
 8001682:	4b37      	ldr	r3, [pc, #220]	; (8001760 <MX_GPIO_Init+0x100>)
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <MX_GPIO_Init+0x100>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a33      	ldr	r2, [pc, #204]	; (8001760 <MX_GPIO_Init+0x100>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	6153      	str	r3, [r2, #20]
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <MX_GPIO_Init+0x100>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <MX_GPIO_Init+0x100>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a2d      	ldr	r2, [pc, #180]	; (8001760 <MX_GPIO_Init+0x100>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <MX_GPIO_Init+0x100>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	2104      	movs	r1, #4
 80016c2:	4828      	ldr	r0, [pc, #160]	; (8001764 <MX_GPIO_Init+0x104>)
 80016c4:	f006 f9d4 	bl	8007a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ce:	4825      	ldr	r0, [pc, #148]	; (8001764 <MX_GPIO_Init+0x104>)
 80016d0:	f006 f9ce 	bl	8007a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_SOFT_GPIO_Port, SPI1_NSS_SOFT_Pin, GPIO_PIN_RESET);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f006 f9c7 	bl	8007a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 80016e2:	2304      	movs	r3, #4
 80016e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016ea:	2302      	movs	r3, #2
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	481a      	ldr	r0, [pc, #104]	; (8001764 <MX_GPIO_Init+0x104>)
 80016fa:	f006 f83f 	bl	800777c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 80016fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4619      	mov	r1, r3
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <MX_GPIO_Init+0x104>)
 8001718:	f006 f830 	bl	800777c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 800171c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001720:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	; (8001764 <MX_GPIO_Init+0x104>)
 8001732:	f006 f823 	bl	800777c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_SOFT_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_SOFT_Pin;
 8001736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	2301      	movs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_SOFT_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4619      	mov	r1, r3
 800174e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001752:	f006 f813 	bl	800777c <HAL_GPIO_Init>

}
 8001756:	bf00      	nop
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400

08001768 <SPIread>:

/* USER CODE BEGIN 4 */

void SPIread (uint8_t address, uint8_t *inputBuffer) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af02      	add	r7, sp, #8
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
	uint8_t outputBuffer [5] = {address, 0x00, 0x00, 0x00, 0x00};
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	723b      	strb	r3, [r7, #8]
 8001778:	2300      	movs	r3, #0
 800177a:	727b      	strb	r3, [r7, #9]
 800177c:	2300      	movs	r3, #0
 800177e:	72bb      	strb	r3, [r7, #10]
 8001780:	2300      	movs	r3, #0
 8001782:	72fb      	strb	r3, [r7, #11]
 8001784:	2300      	movs	r3, #0
 8001786:	733b      	strb	r3, [r7, #12]
	/* READ */
	/* Pull NSS LOW before beginning the transaction*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f006 f96d 	bl	8007a70 <HAL_GPIO_WritePin>
	/* Transaction */
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 8001796:	f107 0108 	add.w	r1, r7, #8
 800179a:	2301      	movs	r3, #1
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2305      	movs	r3, #5
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <SPIread+0x58>)
 80017a4:	f007 fcfc 	bl	80091a0 <HAL_SPI_TransmitReceive>
	/* Transaction is over; pull NSS HIGH once again */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b2:	f006 f95d 	bl	8007a70 <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000964 	.word	0x20000964

080017c4 <SPIwrite>:

void SPIwrite (uint8_t address, uint8_t *data) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	4603      	mov	r3, r0
 80017cc:	6039      	str	r1, [r7, #0]
 80017ce:	71fb      	strb	r3, [r7, #7]
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	3b80      	subs	r3, #128	; 0x80
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	743b      	strb	r3, [r7, #16]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	747b      	strb	r3, [r7, #17]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	74bb      	strb	r3, [r7, #18]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	789b      	ldrb	r3, [r3, #2]
 80017e8:	74fb      	strb	r3, [r7, #19]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	78db      	ldrb	r3, [r3, #3]
 80017ee:	753b      	strb	r3, [r7, #20]
	uint8_t inputBuffer [5];
	/* READ */
	/* Pull NSS LOW before beginning the transaction*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f006 f939 	bl	8007a70 <HAL_GPIO_WritePin>
	/* Transaction */
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 80017fe:	f107 0208 	add.w	r2, r7, #8
 8001802:	f107 0110 	add.w	r1, r7, #16
 8001806:	2301      	movs	r3, #1
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2305      	movs	r3, #5
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <SPIwrite+0x64>)
 800180e:	f007 fcc7 	bl	80091a0 <HAL_SPI_TransmitReceive>
	/* Transaction is over; pull NSS HIGH once again */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181c:	f006 f928 	bl	8007a70 <HAL_GPIO_WritePin>
}
 8001820:	bf00      	nop
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000964 	.word	0x20000964

0800182c <configureDriver>:

void configureDriver (void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	SPIwrite (TMC6100_GCONF, GCONF_Write);
 8001830:	4906      	ldr	r1, [pc, #24]	; (800184c <configureDriver+0x20>)
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff ffc6 	bl	80017c4 <SPIwrite>
	SPIwrite (TMC6100_SHORT_CONF, SHORT_CONF_Write);
 8001838:	4905      	ldr	r1, [pc, #20]	; (8001850 <configureDriver+0x24>)
 800183a:	2009      	movs	r0, #9
 800183c:	f7ff ffc2 	bl	80017c4 <SPIwrite>
	SPIwrite (TMC6100_DRV_CONF, DRV_CONF_Write);
 8001840:	4904      	ldr	r1, [pc, #16]	; (8001854 <configureDriver+0x28>)
 8001842:	200a      	movs	r0, #10
 8001844:	f7ff ffbe 	bl	80017c4 <SPIwrite>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004
 8001854:	20000008 	.word	0x20000008

08001858 <resetDriver>:

void resetDriver (void) {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001862:	4807      	ldr	r0, [pc, #28]	; (8001880 <resetDriver+0x28>)
 8001864:	f006 f904 	bl	8007a70 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 8001868:	2032      	movs	r0, #50	; 0x32
 800186a:	f004 fab5 	bl	8005dd8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <resetDriver+0x28>)
 8001876:	f006 f8fb 	bl	8007a70 <HAL_GPIO_WritePin>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	48000400 	.word	0x48000400

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <MC_AcknowledgeFaultMotor1>:
 * the error condition that occured into account. If no error condition exists when
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	return MCI_FaultAcknowledged( pMCI[M1] );
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <MC_AcknowledgeFaultMotor1+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8be 	bl	8001a1e <MCI_FaultAcknowledged>
 80018a2:	4603      	mov	r3, r0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000ae8 	.word	0x20000ae8

080018ac <MC_GetOccurredFaultsMotor1>:
 *
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	return MCI_GetOccurredFaults( pMCI[M1] );
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <MC_GetOccurredFaultsMotor1+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f943 	bl	8001b40 <MCI_GetOccurredFaults>
 80018ba:	4603      	mov	r3, r0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000ae8 	.word	0x20000ae8

080018c4 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	return MCI_GetSTMState( pMCI[M1] );
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <MC_GetSTMStateMotor1+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f929 	bl	8001b24 <MCI_GetSTMState>
 80018d2:	4603      	mov	r3, r0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000ae8 	.word	0x20000ae8

080018dc <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  pHandle->pSTM = pSTM;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	601a      	str	r2, [r3, #0]
  pHandle->pSTC = pSTC;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	605a      	str	r2, [r3, #4]
  pHandle->pFOCVars = pFOCVars;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	609a      	str	r2, [r3, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = 0;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	81da      	strh	r2, [r3, #14]
  pHandle->hFinalTorque = 0;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = 0;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	761a      	strb	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	807b      	strh	r3, [r7, #2]
 8001932:	4613      	mov	r3, r2
 8001934:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	81da      	strh	r2, [r3, #14]
  pHandle->hDurationms = hDurationms;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	883a      	ldrh	r2, [r7, #0]
 8001946:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	765a      	strb	r2, [r3, #25]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	460b      	mov	r3, r1
 800196a:	807b      	strh	r3, [r7, #2]
 800196c:	4613      	mov	r3, r2
 800196e:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	887a      	ldrh	r2, [r7, #2]
 800197a:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = hDurationms;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	883a      	ldrh	r2, [r7, #0]
 8001980:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	765a      	strb	r2, [r3, #25]
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	731a      	strb	r2, [r3, #12]
  pHandle->Iqdref.q = Iqdref.q;
 80019aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	825a      	strh	r2, [r3, #18]
  pHandle->Iqdref.d = Iqdref.d;
 80019b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	829a      	strh	r2, [r3, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	765a      	strb	r2, [r3, #25]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2103      	movs	r1, #3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00c fdf1 	bl	800e5c8 <STM_NextState>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]

  if ( RetVal == true )
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <MCI_StartMotor+0x24>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	761a      	strb	r2, [r3, #24]
  }

  return RetVal;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2107      	movs	r1, #7
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f00c fdda 	bl	800e5c8 <STM_NextState>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return STM_FaultAcknowledged( pHandle->pSTM );
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00c ff78 	bl	800e920 <STM_FaultAcknowledged>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f00c fdbd 	bl	800e5c8 <STM_NextState>
 8001a4e:	4603      	mov	r3, r0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ( pHandle != MC_NULL )
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d05a      	beq.n	8001b1c <MCI_ExecBufferedCommands+0xc4>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7e1b      	ldrb	r3, [r3, #24]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d156      	bne.n	8001b1c <MCI_ExecBufferedCommands+0xc4>
    {
      bool commandHasBeenExecuted = false;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
      switch ( pHandle->lastCommand )
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7b1b      	ldrb	r3, [r3, #12]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d036      	beq.n	8001ae8 <MCI_ExecBufferedCommands+0x90>
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	dc43      	bgt.n	8001b06 <MCI_ExecBufferedCommands+0xae>
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d002      	beq.n	8001a88 <MCI_ExecBufferedCommands+0x30>
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d018      	beq.n	8001ab8 <MCI_ExecBufferedCommands+0x60>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
        }
        break;
        default:
          break;
 8001a86:	e03e      	b.n	8001b06 <MCI_ExecBufferedCommands+0xae>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2101      	movs	r1, #1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f00c fc08 	bl	800e2ae <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6858      	ldr	r0, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	8adb      	ldrh	r3, [r3, #22]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f00c fc11 	bl	800e2d4 <STC_ExecRamp>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	73fb      	strb	r3, [r7, #15]
        break;
 8001ab6:	e027      	b.n	8001b08 <MCI_ExecBufferedCommands+0xb0>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00c fbf0 	bl	800e2ae <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6858      	ldr	r0, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	8adb      	ldrh	r3, [r3, #22]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f00c fbf9 	bl	800e2d4 <STC_ExecRamp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8001ae6:	e00f      	b.n	8001b08 <MCI_ExecBufferedCommands+0xb0>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	3310      	adds	r3, #16
 8001afa:	3212      	adds	r2, #18
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
        break;
 8001b04:	e000      	b.n	8001b08 <MCI_ExecBufferedCommands+0xb0>
          break;
 8001b06:	bf00      	nop
      }

      if ( commandHasBeenExecuted )
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <MCI_ExecBufferedCommands+0xbe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	761a      	strb	r2, [r3, #24]
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8001b14:	e002      	b.n	8001b1c <MCI_ExecBufferedCommands+0xc4>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  return STM_GetState( pHandle->pSTM );
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00c fee9 	bl	800e908 <STM_GetState>
 8001b36:	4603      	mov	r3, r0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f00c ff00 	bl	800e952 <STM_GetFaultState>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b29b      	uxth	r3, r3
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  return pHandle->LastModalitySetByUser;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	7e5b      	ldrb	r3, [r3, #25]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	81fb      	strh	r3, [r7, #14]

  switch ( pHandle->lastCommand )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7b1b      	ldrb	r3, [r3, #12]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d018      	beq.n	8001bbc <MCI_GetImposedMotorDirection+0x46>
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	dc1f      	bgt.n	8001bce <MCI_GetImposedMotorDirection+0x58>
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d002      	beq.n	8001b98 <MCI_GetImposedMotorDirection+0x22>
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d009      	beq.n	8001baa <MCI_GetImposedMotorDirection+0x34>
      {
        retVal = -1;
      }
      break;
    default:
      break;
 8001b96:	e01a      	b.n	8001bce <MCI_GetImposedMotorDirection+0x58>
      if ( pHandle->hFinalSpeed < 0 )
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da17      	bge.n	8001bd2 <MCI_GetImposedMotorDirection+0x5c>
        retVal = -1;
 8001ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba6:	81fb      	strh	r3, [r7, #14]
      break;
 8001ba8:	e013      	b.n	8001bd2 <MCI_GetImposedMotorDirection+0x5c>
      if ( pHandle->hFinalTorque < 0 )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da10      	bge.n	8001bd6 <MCI_GetImposedMotorDirection+0x60>
        retVal = -1;
 8001bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb8:	81fb      	strh	r3, [r7, #14]
      break;
 8001bba:	e00c      	b.n	8001bd6 <MCI_GetImposedMotorDirection+0x60>
      if ( pHandle->Iqdref.q < 0 )
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da09      	bge.n	8001bda <MCI_GetImposedMotorDirection+0x64>
        retVal = -1;
 8001bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bca:	81fb      	strh	r3, [r7, #14]
      break;
 8001bcc:	e005      	b.n	8001bda <MCI_GetImposedMotorDirection+0x64>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e004      	b.n	8001bdc <MCI_GetImposedMotorDirection+0x66>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e002      	b.n	8001bdc <MCI_GetImposedMotorDirection+0x66>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e000      	b.n	8001bdc <MCI_GetImposedMotorDirection+0x66>
      break;
 8001bda:	bf00      	nop
  }
  return retVal;
 8001bdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in tehts
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  int16_t hRetVal = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	81fb      	strh	r3, [r7, #14]

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7b1b      	ldrb	r3, [r3, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d102      	bne.n	8001c06 <MCI_GetLastRampFinalSpeed+0x1a>
  {
    hRetVal = pHandle->hFinalSpeed;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	89db      	ldrh	r3, [r3, #14]
 8001c04:	81fb      	strh	r3, [r7, #14]
  }
  return hRetVal;
 8001c06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   STC_StopRamp( pHandle->pSTC );
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00c fbf2 	bl	800e40c <STC_StopRamp>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f00c faf2 	bl	800e226 <STC_GetSpeedSensor>
 8001c42:	60f8      	str	r0, [r7, #12]

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f00c fa12 	bl	800e06e <SPD_GetAvrgMecSpeedUnit>
 8001c4a:	4603      	mov	r3, r0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f00c fafe 	bl	800e262 <STC_GetMecSpeedRefUnit>
 8001c66:	4603      	mov	r3, r0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iab );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	6810      	ldr	r0, [r2, #0]
 8001c82:	6018      	str	r0, [r3, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	89ba      	ldrh	r2, [r7, #12]
 8001c88:	f362 030f 	bfi	r3, r2, #0, #16
 8001c8c:	89fa      	ldrh	r2, [r7, #14]
 8001c8e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Ialphabeta );
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	3204      	adds	r2, #4
 8001cb0:	6810      	ldr	r0, [r2, #0]
 8001cb2:	6018      	str	r0, [r3, #0]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	89ba      	ldrh	r2, [r7, #12]
 8001cb8:	f362 030f 	bfi	r3, r2, #0, #16
 8001cbc:	89fa      	ldrh	r2, [r7, #14]
 8001cbe:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqd );
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	320c      	adds	r2, #12
 8001ce0:	6810      	ldr	r0, [r2, #0]
 8001ce2:	6018      	str	r0, [r3, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	89ba      	ldrh	r2, [r7, #12]
 8001ce8:	f362 030f 	bfi	r3, r2, #0, #16
 8001cec:	89fa      	ldrh	r2, [r7, #14]
 8001cee:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqdref );
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	3210      	adds	r2, #16
 8001d10:	6810      	ldr	r0, [r2, #0]
 8001d12:	6018      	str	r0, [r3, #0]
 8001d14:	2300      	movs	r3, #0
 8001d16:	89ba      	ldrh	r2, [r7, #12]
 8001d18:	f362 030f 	bfi	r3, r2, #0, #16
 8001d1c:	89fa      	ldrh	r2, [r7, #14]
 8001d1e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Vqd );
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	3216      	adds	r2, #22
 8001d40:	6810      	ldr	r0, [r2, #0]
 8001d42:	6018      	str	r0, [r3, #0]
 8001d44:	2300      	movs	r3, #0
 8001d46:	89ba      	ldrh	r2, [r7, #12]
 8001d48:	f362 030f 	bfi	r3, r2, #0, #16
 8001d4c:	89fa      	ldrh	r2, [r7, #14]
 8001d4e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Valphabeta );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	f107 030c 	add.w	r3, r7, #12
 8001d6e:	321a      	adds	r2, #26
 8001d70:	6810      	ldr	r0, [r2, #0]
 8001d72:	6018      	str	r0, [r3, #0]
 8001d74:	2300      	movs	r3, #0
 8001d76:	89ba      	ldrh	r2, [r7, #12]
 8001d78:	f362 030f 	bfi	r3, r2, #0, #16
 8001d7c:	89fa      	ldrh	r2, [r7, #14]
 8001d7e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->hTeref );
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <MCI_SetIdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	460b      	mov	r3, r1
 8001db4:	807b      	strh	r3, [r7, #2]
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	825a      	strh	r2, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	887a      	ldrh	r2, [r7, #2]
 8001dc4:	829a      	strh	r2, [r3, #20]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001dd2:	b590      	push	{r4, r7, lr}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689c      	ldr	r4, [r3, #8]
 8001de2:	4610      	mov	r0, r2
 8001de4:	f00c fbb0 	bl	800e548 <STC_GetDefaultIqdref>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	8222      	strh	r2, [r4, #16]
 8001dee:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001df2:	8263      	strh	r3, [r4, #18]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd90      	pop	{r4, r7, pc}

08001dfc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  int32_t a_divSQRT3_tmp, b_divSQRT3_tmp ;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 8001e04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e08:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001e0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001e14:	fb03 f302 	mul.w	r3, r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001e24:	fb03 f302 	mul.w	r3, r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	425a      	negs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	1ad2      	subs	r2, r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	13db      	asrs	r3, r3, #15
 8001e38:	613b      	str	r3, [r7, #16]
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e40:	db03      	blt.n	8001e4a <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 8001e42:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e46:	83fb      	strh	r3, [r7, #30]
 8001e48:	e009      	b.n	8001e5e <MCM_Clarke+0x62>
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e50:	da03      	bge.n	8001e5a <MCM_Clarke+0x5e>
  {
    hbeta_tmp = ( -32768 );
 8001e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e56:	83fb      	strh	r3, [r7, #30]
 8001e58:	e001      	b.n	8001e5e <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 8001e5e:	8bfb      	ldrh	r3, [r7, #30]
 8001e60:	817b      	strh	r3, [r7, #10]

  if ( Output.beta == ( int16_t )( -32768 ) )
 8001e62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e66:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e6a:	d102      	bne.n	8001e72 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 8001e6c:	f248 0301 	movw	r3, #32769	; 0x8001
 8001e70:	817b      	strh	r3, [r7, #10]
  }

  return ( Output );
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	89ba      	ldrh	r2, [r7, #12]
 8001e7a:	f362 030f 	bfi	r3, r2, #0, #16
 8001e7e:	89fa      	ldrh	r2, [r7, #14]
 8001e80:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3724      	adds	r7, #36	; 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park( alphabeta_t Input, int16_t Theta )
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
  int32_t d_tmp_1, d_tmp_2, q_tmp_1, q_tmp_2;
  Trig_Components Local_Vector_Components;
  int32_t wqd_tmp;
  int16_t hqd_tmp;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f8af 	bl	8002004 <MCM_Trig_Functions>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001eaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001eb2:	fb02 f303 	mul.w	r3, r2, r3
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8001eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ebc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	13db      	asrs	r3, r3, #15
 8001ece:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Iq */
  if ( wqd_tmp > INT16_MAX )
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ed6:	db03      	blt.n	8001ee0 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 8001ed8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001edc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ede:	e009      	b.n	8001ef4 <MCM_Park+0x64>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001ee6:	da03      	bge.n	8001ef0 <MCM_Park+0x60>
  {
    hqd_tmp = ( -32768 );
 8001ee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001eee:	e001      	b.n	8001ef4 <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 8001ef4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ef6:	823b      	strh	r3, [r7, #16]

  if ( Output.q == ( int16_t )( -32768 ) )
 8001ef8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001efc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001f00:	d102      	bne.n	8001f08 <MCM_Park+0x78>
  {
    Output.q = -32767;
 8001f02:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f06:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8001f08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f0c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	61bb      	str	r3, [r7, #24]
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4413      	add	r3, r2
 8001f2a:	13db      	asrs	r3, r3, #15
 8001f2c:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Id */
  if ( wqd_tmp > INT16_MAX )
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f34:	db03      	blt.n	8001f3e <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 8001f36:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f3c:	e009      	b.n	8001f52 <MCM_Park+0xc2>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001f44:	da03      	bge.n	8001f4e <MCM_Park+0xbe>
  {
    hqd_tmp = ( -32768 );
 8001f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f4c:	e001      	b.n	8001f52 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 8001f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f54:	827b      	strh	r3, [r7, #18]

  if ( Output.d == ( int16_t )( -32768 ) )
 8001f56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f5a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001f5e:	d102      	bne.n	8001f66 <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8001f60:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f64:	827b      	strh	r3, [r7, #18]
  }

  return ( Output );
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	8aba      	ldrh	r2, [r7, #20]
 8001f6e:	f362 030f 	bfi	r3, r2, #0, #16
 8001f72:	8afa      	ldrh	r2, [r7, #22]
 8001f74:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park( qd_t Input, int16_t Theta )
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	807b      	strh	r3, [r7, #2]
  int32_t alpha_tmp1, alpha_tmp2, beta_tmp1, beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001f8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f837 	bl	8002004 <MCM_Trig_Functions>
 8001f96:	4603      	mov	r3, r0
 8001f98:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8001f9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f9e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	623b      	str	r3, [r7, #32]
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	4413      	add	r3, r2
 8001fbc:	13db      	asrs	r3, r3, #15
 8001fbe:	b21b      	sxth	r3, r3
 8001fc0:	81bb      	strh	r3, [r7, #12]
#endif

  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8001fc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fc6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	61bb      	str	r3, [r7, #24]
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	13db      	asrs	r3, r3, #15
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	81fb      	strh	r3, [r7, #14]
#endif

  return ( Output );
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	8aba      	ldrh	r2, [r7, #20]
 8001ff2:	f362 030f 	bfi	r3, r2, #0, #16
 8001ff6:	8afa      	ldrh	r2, [r7, #22]
 8001ff8:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 800200e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002012:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002016:	617b      	str	r3, [r7, #20]
  uhindex = ( uint16_t )shindex;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	827b      	strh	r3, [r7, #18]
  uhindex /= ( uint16_t )64;
 800201c:	8a7b      	ldrh	r3, [r7, #18]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	827b      	strh	r3, [r7, #18]

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002022:	8a7b      	ldrh	r3, [r7, #18]
 8002024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002028:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800202c:	d01f      	beq.n	800206e <MCM_Trig_Functions+0x6a>
 800202e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002032:	d85f      	bhi.n	80020f4 <MCM_Trig_Functions+0xf0>
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d008      	beq.n	800204c <MCM_Trig_Functions+0x48>
 800203a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203e:	d859      	bhi.n	80020f4 <MCM_Trig_Functions+0xf0>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d029      	beq.n	8002098 <MCM_Trig_Functions+0x94>
 8002044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002048:	d03f      	beq.n	80020ca <MCM_Trig_Functions+0xc6>
    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
 800204a:	e053      	b.n	80020f4 <MCM_Trig_Functions+0xf0>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800204c:	8a7b      	ldrh	r3, [r7, #18]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <MCM_Trig_Functions+0x110>)
 8002054:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002058:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800205a:	8a7b      	ldrh	r3, [r7, #18]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	461a      	mov	r2, r3
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <MCM_Trig_Functions+0x110>)
 8002066:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800206a:	813b      	strh	r3, [r7, #8]
      break;
 800206c:	e043      	b.n	80020f6 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800206e:	8a7b      	ldrh	r3, [r7, #18]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	4b26      	ldr	r3, [pc, #152]	; (8002114 <MCM_Trig_Functions+0x110>)
 800207a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800207e:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002080:	8a7b      	ldrh	r3, [r7, #18]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <MCM_Trig_Functions+0x110>)
 8002088:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800208c:	b29b      	uxth	r3, r3
 800208e:	425b      	negs	r3, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	b21b      	sxth	r3, r3
 8002094:	813b      	strh	r3, [r7, #8]
      break;
 8002096:	e02e      	b.n	80020f6 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002098:	8a7b      	ldrh	r3, [r7, #18]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <MCM_Trig_Functions+0x110>)
 80020a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	425b      	negs	r3, r3
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80020ae:	8a7b      	ldrh	r3, [r7, #18]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b16      	ldr	r3, [pc, #88]	; (8002114 <MCM_Trig_Functions+0x110>)
 80020ba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	425b      	negs	r3, r3
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	813b      	strh	r3, [r7, #8]
      break;
 80020c8:	e015      	b.n	80020f6 <MCM_Trig_Functions+0xf2>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80020ca:	8a7b      	ldrh	r3, [r7, #18]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MCM_Trig_Functions+0x110>)
 80020d6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	425b      	negs	r3, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80020e4:	8a7b      	ldrh	r3, [r7, #18]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <MCM_Trig_Functions+0x110>)
 80020ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020f0:	813b      	strh	r3, [r7, #8]
      break;
 80020f2:	e000      	b.n	80020f6 <MCM_Trig_Functions+0xf2>
      break;
 80020f4:	bf00      	nop
  }
  return ( Local_Components );
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	89ba      	ldrh	r2, [r7, #12]
 80020fe:	f362 030f 	bfi	r3, r2, #0, #16
 8002102:	89fa      	ldrh	r2, [r7, #14]
 8002104:	f362 431f 	bfi	r3, r2, #16, #16
}
 8002108:	4618      	mov	r0, r3
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	0800fa44 	.word	0x0800fa44

08002118 <LL_GPIO_LockPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	60fb      	str	r3, [r7, #12]
  (void) temp;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b087      	sub	sp, #28
 8002154:	af02      	add	r7, sp, #8
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* USER CODE END MCboot 0 */

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 800215a:	4877      	ldr	r0, [pc, #476]	; (8002338 <MCboot+0x1e8>)
 800215c:	f00c fa20 	bl	800e5a0 <STM_Init>

  bMCBootCompleted = 0;
 8002160:	4b76      	ldr	r3, [pc, #472]	; (800233c <MCboot+0x1ec>)
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8002166:	4b76      	ldr	r3, [pc, #472]	; (8002340 <MCboot+0x1f0>)
 8002168:	4a76      	ldr	r2, [pc, #472]	; (8002344 <MCboot+0x1f4>)
 800216a:	601a      	str	r2, [r3, #0]

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800216c:	4b76      	ldr	r3, [pc, #472]	; (8002348 <MCboot+0x1f8>)
 800216e:	4a77      	ldr	r2, [pc, #476]	; (800234c <MCboot+0x1fc>)
 8002170:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8002172:	4876      	ldr	r0, [pc, #472]	; (800234c <MCboot+0x1fc>)
 8002174:	f00a fbca 	bl	800c90c <R3_1_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();
 8002178:	f009 fc9e 	bl	800bab8 <startTimers>

  /******************************************************/
  /*   PID component initialization: speed regulation   */
  /******************************************************/
  PID_HandleInit(&PIDSpeedHandle_M1);
 800217c:	4874      	ldr	r0, [pc, #464]	; (8002350 <MCboot+0x200>)
 800217e:	f009 fa71 	bl	800b664 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8002182:	4b74      	ldr	r3, [pc, #464]	; (8002354 <MCboot+0x204>)
 8002184:	4a72      	ldr	r2, [pc, #456]	; (8002350 <MCboot+0x200>)
 8002186:	601a      	str	r2, [r3, #0]

  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pSTC[M1] = &SpeednTorqCtrlM1;
 8002188:	4b73      	ldr	r3, [pc, #460]	; (8002358 <MCboot+0x208>)
 800218a:	4a74      	ldr	r2, [pc, #464]	; (800235c <MCboot+0x20c>)
 800218c:	601a      	str	r2, [r3, #0]
  STO_PLL_Init (&STO_PLL_M1);
 800218e:	4874      	ldr	r0, [pc, #464]	; (8002360 <MCboot+0x210>)
 8002190:	f00d fb26 	bl	800f7e0 <STO_PLL_Init>

  /******************************************************/
  /*   Speed & torque component initialization          */
  /******************************************************/
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8002194:	4b70      	ldr	r3, [pc, #448]	; (8002358 <MCboot+0x208>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6e      	ldr	r2, [pc, #440]	; (8002354 <MCboot+0x204>)
 800219a:	6811      	ldr	r1, [r2, #0]
 800219c:	4a70      	ldr	r2, [pc, #448]	; (8002360 <MCboot+0x210>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f00c f807 	bl	800e1b2 <STC_Init>

  /****************************************************/
  /*   Virtual speed sensor component initialization  */
  /****************************************************/
  VSS_Init (&VirtualSpeedSensorM1);
 80021a4:	486f      	ldr	r0, [pc, #444]	; (8002364 <MCboot+0x214>)
 80021a6:	f00c fdd5 	bl	800ed54 <VSS_Init>

  /**************************************/
  /*   Rev-up component initialization  */
  /**************************************/
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80021aa:	4b6b      	ldr	r3, [pc, #428]	; (8002358 <MCboot+0x208>)
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	4b66      	ldr	r3, [pc, #408]	; (8002348 <MCboot+0x1f8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <MCboot+0x218>)
 80021b6:	4a6b      	ldr	r2, [pc, #428]	; (8002364 <MCboot+0x214>)
 80021b8:	486c      	ldr	r0, [pc, #432]	; (800236c <MCboot+0x21c>)
 80021ba:	f00d f839 	bl	800f230 <RUC_Init>

  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 80021be:	486c      	ldr	r0, [pc, #432]	; (8002370 <MCboot+0x220>)
 80021c0:	f009 fa50 	bl	800b664 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80021c4:	486b      	ldr	r0, [pc, #428]	; (8002374 <MCboot+0x224>)
 80021c6:	f009 fa4d 	bl	800b664 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80021ca:	4b6b      	ldr	r3, [pc, #428]	; (8002378 <MCboot+0x228>)
 80021cc:	4a68      	ldr	r2, [pc, #416]	; (8002370 <MCboot+0x220>)
 80021ce:	601a      	str	r2, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 80021d0:	4b6a      	ldr	r3, [pc, #424]	; (800237c <MCboot+0x22c>)
 80021d2:	4a68      	ldr	r2, [pc, #416]	; (8002374 <MCboot+0x224>)
 80021d4:	601a      	str	r2, [r3, #0]

  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80021d6:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <MCboot+0x230>)
 80021d8:	4a6a      	ldr	r2, [pc, #424]	; (8002384 <MCboot+0x234>)
 80021da:	601a      	str	r2, [r3, #0]
  RVBS_Init(pBusSensorM1);
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <MCboot+0x230>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00b fd0d 	bl	800dc00 <RVBS_Init>

  /*************************************************/
  /*   Power measurement component initialization  */
  /*************************************************/
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80021e6:	4b68      	ldr	r3, [pc, #416]	; (8002388 <MCboot+0x238>)
 80021e8:	4a68      	ldr	r2, [pc, #416]	; (800238c <MCboot+0x23c>)
 80021ea:	601a      	str	r2, [r3, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <MCboot+0x230>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b65      	ldr	r3, [pc, #404]	; (8002388 <MCboot+0x238>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80021f8:	4b63      	ldr	r3, [pc, #396]	; (8002388 <MCboot+0x238>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a64      	ldr	r2, [pc, #400]	; (8002390 <MCboot+0x240>)
 80021fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);
 8002202:	4864      	ldr	r0, [pc, #400]	; (8002394 <MCboot+0x244>)
 8002204:	f009 f98f 	bl	800b526 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8002208:	4b63      	ldr	r3, [pc, #396]	; (8002398 <MCboot+0x248>)
 800220a:	4a62      	ldr	r2, [pc, #392]	; (8002394 <MCboot+0x244>)
 800220c:	601a      	str	r2, [r3, #0]

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800220e:	4b63      	ldr	r3, [pc, #396]	; (800239c <MCboot+0x24c>)
 8002210:	4a63      	ldr	r2, [pc, #396]	; (80023a0 <MCboot+0x250>)
 8002212:	601a      	str	r2, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <MCboot+0x24c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f00b fe01 	bl	800de20 <REMNG_Init>

  FOC_Clear(M1);
 800221e:	2000      	movs	r0, #0
 8002220:	f000 fadc 	bl	80027dc <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002224:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <MCboot+0x240>)
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800222c:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <MCboot+0x208>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4c57      	ldr	r4, [pc, #348]	; (8002390 <MCboot+0x240>)
 8002232:	4618      	mov	r0, r3
 8002234:	f00c f988 	bl	800e548 <STC_GetDefaultIqdref>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	8222      	strh	r2, [r4, #16]
 800223e:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8002242:	8263      	strh	r3, [r4, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002244:	4b44      	ldr	r3, [pc, #272]	; (8002358 <MCboot+0x208>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f00c f97d 	bl	800e548 <STC_GetDefaultIqdref>
 800224e:	4603      	mov	r3, r0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002256:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <MCboot+0x240>)
 8002258:	829a      	strh	r2, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 800225a:	4b52      	ldr	r3, [pc, #328]	; (80023a4 <MCboot+0x254>)
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <MCboot+0x258>)
 800225e:	601a      	str	r2, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <MCboot+0x254>)
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <MCboot+0x208>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b49      	ldr	r3, [pc, #292]	; (8002390 <MCboot+0x240>)
 800226a:	4933      	ldr	r1, [pc, #204]	; (8002338 <MCboot+0x1e8>)
 800226c:	f7ff fb36 	bl	80018dc <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <MCboot+0x254>)
 8002272:	681c      	ldr	r4, [r3, #0]
 8002274:	4b38      	ldr	r3, [pc, #224]	; (8002358 <MCboot+0x208>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f00c f93f 	bl	800e4fc <STC_GetMecSpeedRefUnitDefault>
 800227e:	4603      	mov	r3, r0
 8002280:	2200      	movs	r2, #0
 8002282:	4619      	mov	r1, r3
 8002284:	4620      	mov	r0, r4
 8002286:	f7ff fb4e 	bl	8001926 <MCI_ExecSpeedRamp>
  STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
  pMCIList[M1] = oMCInterface[M1];
 800228a:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <MCboot+0x254>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <MCboot+0x204>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a45      	ldr	r2, [pc, #276]	; (80023ac <MCboot+0x25c>)
 8002298:	6013      	str	r3, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 800229a:	4b37      	ldr	r3, [pc, #220]	; (8002378 <MCboot+0x228>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a43      	ldr	r2, [pc, #268]	; (80023ac <MCboot+0x25c>)
 80022a0:	6053      	str	r3, [r2, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 80022a2:	4b36      	ldr	r3, [pc, #216]	; (800237c <MCboot+0x22c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a41      	ldr	r2, [pc, #260]	; (80023ac <MCboot+0x25c>)
 80022a8:	6093      	str	r3, [r2, #8]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80022aa:	4b40      	ldr	r3, [pc, #256]	; (80023ac <MCboot+0x25c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <MCboot+0x1f8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3d      	ldr	r2, [pc, #244]	; (80023ac <MCboot+0x25c>)
 80022b6:	6113      	str	r3, [r2, #16]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 80022b8:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <MCboot+0x25c>)
 80022ba:	4a2c      	ldr	r2, [pc, #176]	; (800236c <MCboot+0x21c>)
 80022bc:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <MCboot+0x25c>)
 80022c0:	4a27      	ldr	r2, [pc, #156]	; (8002360 <MCboot+0x210>)
 80022c2:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80022c4:	4b39      	ldr	r3, [pc, #228]	; (80023ac <MCboot+0x25c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <MCboot+0x25c>)
 80022cc:	4a25      	ldr	r2, [pc, #148]	; (8002364 <MCboot+0x214>)
 80022ce:	621a      	str	r2, [r3, #32]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80022d0:	4b21      	ldr	r3, [pc, #132]	; (8002358 <MCboot+0x208>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a35      	ldr	r2, [pc, #212]	; (80023ac <MCboot+0x25c>)
 80022d6:	6253      	str	r3, [r2, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <MCboot+0x25c>)
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <MCboot+0x1e8>)
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80022de:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <MCboot+0x248>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a32      	ldr	r2, [pc, #200]	; (80023ac <MCboot+0x25c>)
 80022e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <MCboot+0x230>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <MCboot+0x25c>)
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <MCboot+0x25c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <MCboot+0x25c>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <MCboot+0x238>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2a      	ldr	r2, [pc, #168]	; (80023ac <MCboot+0x25c>)
 8002302:	63d3      	str	r3, [r2, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <MCboot+0x25c>)
 8002306:	2200      	movs	r2, #0
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <MCboot+0x25c>)
 800230c:	2200      	movs	r2, #0
 800230e:	645a      	str	r2, [r3, #68]	; 0x44

  MCT[M1].pPosCtrl = MC_NULL;
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <MCboot+0x25c>)
 8002312:	2200      	movs	r2, #0
 8002314:	649a      	str	r2, [r3, #72]	; 0x48

  MCT[M1].pSCC = MC_NULL;
 8002316:	4b25      	ldr	r3, [pc, #148]	; (80023ac <MCboot+0x25c>)
 8002318:	2200      	movs	r2, #0
 800231a:	64da      	str	r2, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 800231c:	4b23      	ldr	r3, [pc, #140]	; (80023ac <MCboot+0x25c>)
 800231e:	2200      	movs	r2, #0
 8002320:	651a      	str	r2, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	4a21      	ldr	r2, [pc, #132]	; (80023ac <MCboot+0x25c>)
 8002326:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MCboot 2 */

  /* USER CODE END MCboot 2 */

  bMCBootCompleted = 1;
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <MCboot+0x1ec>)
 800232a:	2201      	movs	r2, #1
 800232c:	701a      	strb	r2, [r3, #0]
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}
 8002336:	bf00      	nop
 8002338:	20000ad0 	.word	0x20000ad0
 800233c:	2000071e 	.word	0x2000071e
 8002340:	20000aac 	.word	0x20000aac
 8002344:	200004a4 	.word	0x200004a4
 8002348:	20000a1c 	.word	0x20000a1c
 800234c:	20000250 	.word	0x20000250
 8002350:	20000120 	.word	0x20000120
 8002354:	20000a20 	.word	0x20000a20
 8002358:	20000ae4 	.word	0x20000ae4
 800235c:	200001a4 	.word	0x200001a4
 8002360:	20000300 	.word	0x20000300
 8002364:	200002c8 	.word	0x200002c8
 8002368:	20000428 	.word	0x20000428
 800236c:	200001d8 	.word	0x200001d8
 8002370:	2000014c 	.word	0x2000014c
 8002374:	20000178 	.word	0x20000178
 8002378:	20000a24 	.word	0x20000a24
 800237c:	20000ae0 	.word	0x20000ae0
 8002380:	20000ab0 	.word	0x20000ab0
 8002384:	20000464 	.word	0x20000464
 8002388:	20000adc 	.word	0x20000adc
 800238c:	2000000c 	.word	0x2000000c
 8002390:	20000a30 	.word	0x20000a30
 8002394:	2000043c 	.word	0x2000043c
 8002398:	20000a18 	.word	0x20000a18
 800239c:	20000ad8 	.word	0x20000ad8
 80023a0:	2000048c 	.word	0x2000048c
 80023a4:	20000a28 	.word	0x20000a28
 80023a8:	20000ab4 	.word	0x20000ab4
 80023ac:	20000a58 	.word	0x20000a58

080023b0 <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task.
 */
__weak void MC_RunMotorControlTasks(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  if ( bMCBootCompleted ) {
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <MC_RunMotorControlTasks+0x1c>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <MC_RunMotorControlTasks+0x18>
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 80023bc:	f000 f808 	bl	80023d0 <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 80023c0:	f000 fc50 	bl	8002c64 <TSK_SafetyTask>

    /* ** User Interface Task ** */
    UI_Scheduler();
 80023c4:	f002 fae2 	bl	800498c <UI_Scheduler>
  }
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2000071e 	.word	0x2000071e

080023d0 <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance.
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (bMCBootCompleted == 1)
 80023d4:	4b17      	ldr	r3, [pc, #92]	; (8002434 <MC_Scheduler+0x64>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d129      	bne.n	8002430 <MC_Scheduler+0x60>
  {
    if(hMFTaskCounterM1 > 0u)
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <MC_Scheduler+0x68>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <MC_Scheduler+0x26>
    {
      hMFTaskCounterM1--;
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MC_Scheduler+0x68>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MC_Scheduler+0x68>)
 80023f2:	801a      	strh	r2, [r3, #0]
 80023f4:	e004      	b.n	8002400 <MC_Scheduler+0x30>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 80023f6:	f000 f825 	bl	8002444 <TSK_MediumFrequencyTaskM1>
      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MC_Scheduler+0x68>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0u)
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MC_Scheduler+0x6c>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <MC_Scheduler+0x48>
    {
      hBootCapDelayCounterM1--;
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MC_Scheduler+0x6c>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MC_Scheduler+0x6c>)
 8002416:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0u)
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MC_Scheduler+0x70>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <MC_Scheduler+0x60>
    {
      hStopPermanencyCounterM1--;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <MC_Scheduler+0x70>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <MC_Scheduler+0x70>)
 800242e:	801a      	strh	r2, [r3, #0]
  {
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	2000071e 	.word	0x2000071e
 8002438:	20000718 	.word	0x20000718
 800243c:	2000071a 	.word	0x2000071a
 8002440:	2000071c 	.word	0x2000071c

08002444 <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic
  * execution at a medium frequency rate (such as the speed controller for instance)
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  State_t StateM1;
  int16_t wAux = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	827b      	strh	r3, [r7, #18]

  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 800244e:	f107 0312 	add.w	r3, r7, #18
 8002452:	4619      	mov	r1, r3
 8002454:	48c2      	ldr	r0, [pc, #776]	; (8002760 <TSK_MediumFrequencyTaskM1+0x31c>)
 8002456:	f00d f8cb 	bl	800f5f0 <STO_PLL_CalcAvrgMecSpeedUnit>
 800245a:	4603      	mov	r3, r0
 800245c:	75bb      	strb	r3, [r7, #22]
  PQD_CalcElMotorPower( pMPM[M1] );
 800245e:	4bc1      	ldr	r3, [pc, #772]	; (8002764 <TSK_MediumFrequencyTaskM1+0x320>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f009 fa2a 	bl	800b8bc <PQD_CalcElMotorPower>

  StateM1 = STM_GetState( &STM[M1] );
 8002468:	48bf      	ldr	r0, [pc, #764]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 800246a:	f00c fa4d 	bl	800e908 <STM_GetState>
 800246e:	4603      	mov	r3, r0
 8002470:	757b      	strb	r3, [r7, #21]

  switch ( StateM1 )
 8002472:	7d7b      	ldrb	r3, [r7, #21]
 8002474:	3b03      	subs	r3, #3
 8002476:	2b10      	cmp	r3, #16
 8002478:	f200 8196 	bhi.w	80027a8 <TSK_MediumFrequencyTaskM1+0x364>
 800247c:	a201      	add	r2, pc, #4	; (adr r2, 8002484 <TSK_MediumFrequencyTaskM1+0x40>)
 800247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002482:	bf00      	nop
 8002484:	080024c9 	.word	0x080024c9
 8002488:	08002573 	.word	0x08002573
 800248c:	080026c3 	.word	0x080026c3
 8002490:	080026f9 	.word	0x080026f9
 8002494:	08002721 	.word	0x08002721
 8002498:	0800274d 	.word	0x0800274d
 800249c:	0800278d 	.word	0x0800278d
 80024a0:	080027a9 	.word	0x080027a9
 80024a4:	080027a9 	.word	0x080027a9
 80024a8:	080027a9 	.word	0x080027a9
 80024ac:	080027a9 	.word	0x080027a9
 80024b0:	080027a9 	.word	0x080027a9
 80024b4:	080027a9 	.word	0x080027a9
 80024b8:	080024f7 	.word	0x080024f7
 80024bc:	08002519 	.word	0x08002519
 80024c0:	08002537 	.word	0x08002537
 80024c4:	08002647 	.word	0x08002647
  {
  case IDLE_START:
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 80024c8:	4ba8      	ldr	r3, [pc, #672]	; (800276c <TSK_MediumFrequencyTaskM1+0x328>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fb52 	bl	8001b76 <MCI_GetImposedMotorDirection>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4619      	mov	r1, r3
 80024d6:	48a6      	ldr	r0, [pc, #664]	; (8002770 <TSK_MediumFrequencyTaskM1+0x32c>)
 80024d8:	f00c fee8 	bl	800f2ac <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 80024dc:	4ba5      	ldr	r3, [pc, #660]	; (8002774 <TSK_MediumFrequencyTaskM1+0x330>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00a febc 	bl	800d25e <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80024e6:	2014      	movs	r0, #20
 80024e8:	f000 fa56 	bl	8002998 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80024ec:	2110      	movs	r1, #16
 80024ee:	489e      	ldr	r0, [pc, #632]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 80024f0:	f00c f86a 	bl	800e5c8 <STM_NextState>
    break;
 80024f4:	e167      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>

  case CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80024f6:	f000 fa5f 	bl	80029b8 <TSK_ChargeBootCapDelayHasElapsedM1>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8155 	beq.w	80027ac <TSK_MediumFrequencyTaskM1+0x368>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8002502:	4b9c      	ldr	r3, [pc, #624]	; (8002774 <TSK_MediumFrequencyTaskM1+0x330>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f009 fd68 	bl	800bfde <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Charge BootCap elapsed */

      STM_NextState(&STM[M1],OFFSET_CALIB);
 800250e:	2111      	movs	r1, #17
 8002510:	4895      	ldr	r0, [pc, #596]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 8002512:	f00c f859 	bl	800e5c8 <STM_NextState>
    }
    break;
 8002516:	e149      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x368>

  case OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002518:	4b96      	ldr	r3, [pc, #600]	; (8002774 <TSK_MediumFrequencyTaskM1+0x330>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f009 fd5d 	bl	800bfde <PWMC_CurrentReadingCalibr>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8142 	beq.w	80027b0 <TSK_MediumFrequencyTaskM1+0x36c>
    {
      STM_NextState( &STM[M1], CLEAR );
 800252c:	2112      	movs	r1, #18
 800252e:	488e      	ldr	r0, [pc, #568]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 8002530:	f00c f84a 	bl	800e5c8 <STM_NextState>
    }
    break;
 8002534:	e13c      	b.n	80027b0 <TSK_MediumFrequencyTaskM1+0x36c>

  case CLEAR:
    /* In a sensorless configuration. Initiate the Revup procedure */
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002536:	4b90      	ldr	r3, [pc, #576]	; (8002778 <TSK_MediumFrequencyTaskM1+0x334>)
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800253e:	4b8f      	ldr	r3, [pc, #572]	; (800277c <TSK_MediumFrequencyTaskM1+0x338>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	498f      	ldr	r1, [pc, #572]	; (8002780 <TSK_MediumFrequencyTaskM1+0x33c>)
 8002544:	4618      	mov	r0, r3
 8002546:	f00b fe60 	bl	800e20a <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 800254a:	4885      	ldr	r0, [pc, #532]	; (8002760 <TSK_MediumFrequencyTaskM1+0x31c>)
 800254c:	f00d f91a 	bl	800f784 <STO_PLL_Clear>

    if ( STM_NextState( &STM[M1], START ) == true )
 8002550:	2104      	movs	r1, #4
 8002552:	4885      	ldr	r0, [pc, #532]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 8002554:	f00c f838 	bl	800e5c8 <STM_NextState>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 812a 	beq.w	80027b4 <TSK_MediumFrequencyTaskM1+0x370>
    {
      FOC_Clear( M1 );
 8002560:	2000      	movs	r0, #0
 8002562:	f000 f93b 	bl	80027dc <FOC_Clear>

      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8002566:	4b83      	ldr	r3, [pc, #524]	; (8002774 <TSK_MediumFrequencyTaskM1+0x330>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f00a fecd 	bl	800d30a <R3_1_SwitchOnPWM>
    }
    break;
 8002570:	e120      	b.n	80027b4 <TSK_MediumFrequencyTaskM1+0x370>
    {

      /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
      int16_t hForcedMecSpeedUnit;
      qd_t IqdRef;
      bool ObserverConverged = false;
 8002572:	2300      	movs	r3, #0
 8002574:	75fb      	strb	r3, [r7, #23]

      /* Execute the Rev Up procedure */
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8002576:	487e      	ldr	r0, [pc, #504]	; (8002770 <TSK_MediumFrequencyTaskM1+0x32c>)
 8002578:	f00c fee0 	bl	800f33c <RUC_Exec>
 800257c:	4603      	mov	r3, r0
 800257e:	f083 0301 	eor.w	r3, r3, #1
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <TSK_MediumFrequencyTaskM1+0x150>
      {
        /* The time allowed for the startup sequence has expired */
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002588:	2200      	movs	r2, #0
 800258a:	2110      	movs	r1, #16
 800258c:	4876      	ldr	r0, [pc, #472]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 800258e:	f00c f97d 	bl	800e88c <STM_FaultProcessing>
 8002592:	e010      	b.n	80025b6 <TSK_MediumFrequencyTaskM1+0x172>
      }
      else
      {
        /* Execute the torque open loop current start-up ramp:
         * Compute the Iq reference current as configured in the Rev Up sequence */
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8002594:	4b79      	ldr	r3, [pc, #484]	; (800277c <TSK_MediumFrequencyTaskM1+0x338>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f00b ff47 	bl	800e42c <STC_CalcTorqueReference>
 800259e:	4603      	mov	r3, r0
 80025a0:	81bb      	strh	r3, [r7, #12]
        IqdRef.d = FOCVars[M1].UserIdref;
 80025a2:	4b75      	ldr	r3, [pc, #468]	; (8002778 <TSK_MediumFrequencyTaskM1+0x334>)
 80025a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80025a8:	81fb      	strh	r3, [r7, #14]
        /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
        FOCVars[M1].Iqdref = IqdRef;
 80025aa:	4b73      	ldr	r3, [pc, #460]	; (8002778 <TSK_MediumFrequencyTaskM1+0x334>)
 80025ac:	3310      	adds	r3, #16
 80025ae:	f107 020c 	add.w	r2, r7, #12
 80025b2:	6810      	ldr	r0, [r2, #0]
 80025b4:	6018      	str	r0, [r3, #0]
      }

      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	4619      	mov	r1, r3
 80025bc:	4870      	ldr	r0, [pc, #448]	; (8002780 <TSK_MediumFrequencyTaskM1+0x33c>)
 80025be:	f00c fcca 	bl	800ef56 <VSS_CalcAvrgMecSpeedUnit>

      /* check that startup stage where the observer has to be used has been reached */
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80025c2:	486b      	ldr	r0, [pc, #428]	; (8002770 <TSK_MediumFrequencyTaskM1+0x32c>)
 80025c4:	f00c fef4 	bl	800f3b0 <RUC_FirstAccelerationStageReached>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <TSK_MediumFrequencyTaskM1+0x1a4>
      {
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80025ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4862      	ldr	r0, [pc, #392]	; (8002760 <TSK_MediumFrequencyTaskM1+0x31c>)
 80025d6:	f00d f93d 	bl	800f854 <STO_PLL_IsObserverConverged>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	4619      	mov	r1, r3
 80025e2:	4867      	ldr	r0, [pc, #412]	; (8002780 <TSK_MediumFrequencyTaskM1+0x33c>)
 80025e4:	f00c fdf2 	bl	800f1cc <VSS_SetStartTransition>
      }

      if ( ObserverConverged )
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80e4 	beq.w	80027b8 <TSK_MediumFrequencyTaskM1+0x374>
      {
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80025f0:	485b      	ldr	r0, [pc, #364]	; (8002760 <TSK_MediumFrequencyTaskM1+0x31c>)
 80025f2:	f00b fd2f 	bl	800e054 <SPD_GetElAngle>
 80025f6:	4603      	mov	r3, r0
 80025f8:	4619      	mov	r1, r3
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <TSK_MediumFrequencyTaskM1+0x334>)
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	2300      	movs	r3, #0
 8002600:	4613      	mov	r3, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fc44 	bl	8001e90 <MCM_Park>
 8002608:	4603      	mov	r3, r0
 800260a:	60bb      	str	r3, [r7, #8]

        /* Start switch over ramp. This ramp will transition from the revup to the closed loop FOC. */
        REMNG_Init( pREMNG[M1] );
 800260c:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <TSK_MediumFrequencyTaskM1+0x340>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f00b fc05 	bl	800de20 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8002616:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <TSK_MediumFrequencyTaskM1+0x340>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <TSK_MediumFrequencyTaskM1+0x334>)
 800261c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002620:	4611      	mov	r1, r2
 8002622:	2200      	movs	r2, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f00b fc49 	bl	800debc <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 800262a:	4b56      	ldr	r3, [pc, #344]	; (8002784 <TSK_MediumFrequencyTaskM1+0x340>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002632:	4611      	mov	r1, r2
 8002634:	2232      	movs	r2, #50	; 0x32
 8002636:	4618      	mov	r0, r3
 8002638:	f00b fc40 	bl	800debc <REMNG_ExecRamp>

        STM_NextState( &STM[M1], SWITCH_OVER );
 800263c:	2113      	movs	r1, #19
 800263e:	484a      	ldr	r0, [pc, #296]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 8002640:	f00b ffc2 	bl	800e5c8 <STM_NextState>
      }
    }
    break;
 8002644:	e0b8      	b.n	80027b8 <TSK_MediumFrequencyTaskM1+0x374>
  case SWITCH_OVER:
    {
      bool LoopClosed;
      int16_t hForcedMecSpeedUnit;

      if( ! RUC_Exec( &RevUpControlM1 ) )
 8002646:	484a      	ldr	r0, [pc, #296]	; (8002770 <TSK_MediumFrequencyTaskM1+0x32c>)
 8002648:	f00c fe78 	bl	800f33c <RUC_Exec>
 800264c:	4603      	mov	r3, r0
 800264e:	f083 0301 	eor.w	r3, r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <TSK_MediumFrequencyTaskM1+0x220>
      {
          /* The time allowed for the startup sequence has expired */
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002658:	2200      	movs	r2, #0
 800265a:	2110      	movs	r1, #16
 800265c:	4842      	ldr	r0, [pc, #264]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 800265e:	f00c f915 	bl	800e88c <STM_FaultProcessing>
          STM_NextState( &STM[M1], START_RUN );
        }
      }
    }

    break;
 8002662:	e0ab      	b.n	80027bc <TSK_MediumFrequencyTaskM1+0x378>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8002664:	1dbb      	adds	r3, r7, #6
 8002666:	4619      	mov	r1, r3
 8002668:	4845      	ldr	r0, [pc, #276]	; (8002780 <TSK_MediumFrequencyTaskM1+0x33c>)
 800266a:	f00c fc74 	bl	800ef56 <VSS_CalcAvrgMecSpeedUnit>
 800266e:	4603      	mov	r3, r0
 8002670:	753b      	strb	r3, [r7, #20]
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8002672:	4843      	ldr	r0, [pc, #268]	; (8002780 <TSK_MediumFrequencyTaskM1+0x33c>)
 8002674:	f00c fdce 	bl	800f214 <VSS_TransitionEnded>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	7d3b      	ldrb	r3, [r7, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	753b      	strb	r3, [r7, #20]
        if ( LoopClosed == true )
 800268c:	7d3b      	ldrb	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8094 	beq.w	80027bc <TSK_MediumFrequencyTaskM1+0x378>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8002694:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <TSK_MediumFrequencyTaskM1+0x344>)
 8002696:	681c      	ldr	r4, [r3, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8002698:	4b37      	ldr	r3, [pc, #220]	; (8002778 <TSK_MediumFrequencyTaskM1+0x334>)
 800269a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800269e:	461d      	mov	r5, r3
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <TSK_MediumFrequencyTaskM1+0x344>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f009 f84e 	bl	800b746 <PID_GetKIDivisor>
 80026aa:	4603      	mov	r3, r0
 80026ac:	fb03 f305 	mul.w	r3, r3, r5
          PID_SetIntegralTerm( pPIDSpeed[M1],
 80026b0:	4619      	mov	r1, r3
 80026b2:	4620      	mov	r0, r4
 80026b4:	f009 f82d 	bl	800b712 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 80026b8:	2105      	movs	r1, #5
 80026ba:	482b      	ldr	r0, [pc, #172]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 80026bc:	f00b ff84 	bl	800e5c8 <STM_NextState>
    break;
 80026c0:	e07c      	b.n	80027bc <TSK_MediumFrequencyTaskM1+0x378>

  case START_RUN:
 /* only for sensor-less control */
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 80026c2:	4b2e      	ldr	r3, [pc, #184]	; (800277c <TSK_MediumFrequencyTaskM1+0x338>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4926      	ldr	r1, [pc, #152]	; (8002760 <TSK_MediumFrequencyTaskM1+0x31c>)
 80026c8:	4618      	mov	r0, r3
 80026ca:	f00b fd9e 	bl	800e20a <STC_SetSpeedSensor>
    {
      /* USER CODE BEGIN MediumFrequencyTask M1 1 */

      /* USER CODE END MediumFrequencyTask M1 1 */
	  FOC_InitAdditionalMethods(M1);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 f91a 	bl	8002908 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80026d4:	2000      	movs	r0, #0
 80026d6:	f000 f923 	bl	8002920 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80026da:	2106      	movs	r1, #6
 80026dc:	4822      	ldr	r0, [pc, #136]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 80026de:	f00b ff73 	bl	800e5c8 <STM_NextState>
    }
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <TSK_MediumFrequencyTaskM1+0x338>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f00b ff49 	bl	800e57e <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <TSK_MediumFrequencyTaskM1+0x328>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff f9b1 	bl	8001a58 <MCI_ExecBufferedCommands>

    break;
 80026f6:	e066      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
  case RUN:
    /* USER CODE BEGIN MediumFrequencyTask M1 2 */

    /* USER CODE END MediumFrequencyTask M1 2 */

    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80026f8:	4b1c      	ldr	r3, [pc, #112]	; (800276c <TSK_MediumFrequencyTaskM1+0x328>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f9ab 	bl	8001a58 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002702:	2000      	movs	r0, #0
 8002704:	f000 f90c 	bl	8002920 <FOC_CalcCurrRef>

    if( !IsSpeedReliable )
 8002708:	7dbb      	ldrb	r3, [r7, #22]
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d055      	beq.n	80027c0 <TSK_MediumFrequencyTaskM1+0x37c>
    {
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8002714:	2200      	movs	r2, #0
 8002716:	2120      	movs	r1, #32
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 800271a:	f00c f8b7 	bl	800e88c <STM_FaultProcessing>
    }

    /* USER CODE BEGIN MediumFrequencyTask M1 3 */

    /* USER CODE END MediumFrequencyTask M1 3 */
    break;
 800271e:	e04f      	b.n	80027c0 <TSK_MediumFrequencyTaskM1+0x37c>

  case ANY_STOP:
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8002720:	4b14      	ldr	r3, [pc, #80]	; (8002774 <TSK_MediumFrequencyTaskM1+0x330>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f00a fe91 	bl	800d44c <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 800272a:	2000      	movs	r0, #0
 800272c:	f000 f856 	bl	80027dc <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <TSK_MediumFrequencyTaskM1+0x320>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f008 fe5e 	bl	800b3f6 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800273a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800273e:	f000 f951 	bl	80029e4 <TSK_SetStopPermanencyTimeM1>

    /* USER CODE BEGIN MediumFrequencyTask M1 4 */

    /* USER CODE END MediumFrequencyTask M1 4 */

    STM_NextState( &STM[M1], STOP );
 8002742:	2108      	movs	r1, #8
 8002744:	4808      	ldr	r0, [pc, #32]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 8002746:	f00b ff3f 	bl	800e5c8 <STM_NextState>
    break;
 800274a:	e03c      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>

  case STOP:
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 800274c:	f000 f95a 	bl	8002a04 <TSK_StopPermanencyTimeHasElapsedM1>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d036      	beq.n	80027c4 <TSK_MediumFrequencyTaskM1+0x380>
    {
      STM_NextState( &STM[M1], STOP_IDLE );
 8002756:	2109      	movs	r1, #9
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <TSK_MediumFrequencyTaskM1+0x324>)
 800275a:	f00b ff35 	bl	800e5c8 <STM_NextState>
    }
    break;
 800275e:	e031      	b.n	80027c4 <TSK_MediumFrequencyTaskM1+0x380>
 8002760:	20000300 	.word	0x20000300
 8002764:	20000adc 	.word	0x20000adc
 8002768:	20000ad0 	.word	0x20000ad0
 800276c:	20000a28 	.word	0x20000a28
 8002770:	200001d8 	.word	0x200001d8
 8002774:	20000a1c 	.word	0x20000a1c
 8002778:	20000a30 	.word	0x20000a30
 800277c:	20000ae4 	.word	0x20000ae4
 8002780:	200002c8 	.word	0x200002c8
 8002784:	20000ad8 	.word	0x20000ad8
 8002788:	20000a20 	.word	0x20000a20

  case STOP_IDLE:
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <TSK_MediumFrequencyTaskM1+0x38c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4910      	ldr	r1, [pc, #64]	; (80027d4 <TSK_MediumFrequencyTaskM1+0x390>)
 8002792:	4618      	mov	r0, r3
 8002794:	f00b fd39 	bl	800e20a <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8002798:	480e      	ldr	r0, [pc, #56]	; (80027d4 <TSK_MediumFrequencyTaskM1+0x390>)
 800279a:	f00c fae6 	bl	800ed6a <VSS_Clear>

    /* USER CODE BEGIN MediumFrequencyTask M1 5 */

    /* USER CODE END MediumFrequencyTask M1 5 */
    STM_NextState( &STM[M1], IDLE );
 800279e:	2100      	movs	r1, #0
 80027a0:	480d      	ldr	r0, [pc, #52]	; (80027d8 <TSK_MediumFrequencyTaskM1+0x394>)
 80027a2:	f00b ff11 	bl	800e5c8 <STM_NextState>
    break;
 80027a6:	e00e      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>

  default:
    break;
 80027a8:	bf00      	nop
 80027aa:	e00c      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027ac:	bf00      	nop
 80027ae:	e00a      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027b0:	bf00      	nop
 80027b2:	e008      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027b4:	bf00      	nop
 80027b6:	e006      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027b8:	bf00      	nop
 80027ba:	e004      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027bc:	bf00      	nop
 80027be:	e002      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027c0:	bf00      	nop
 80027c2:	e000      	b.n	80027c6 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027c4:	bf00      	nop
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bdb0      	pop	{r4, r5, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000ae4 	.word	0x20000ae4
 80027d4:	200002c8 	.word	0x200002c8
 80027d8:	20000ad0 	.word	0x20000ad0

080027dc <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
 80027e6:	2300      	movs	r3, #0
 80027e8:	82bb      	strh	r3, [r7, #20]
 80027ea:	2300      	movs	r3, #0
 80027ec:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
 80027ee:	2300      	movs	r3, #0
 80027f0:	823b      	strh	r3, [r7, #16]
 80027f2:	2300      	movs	r3, #0
 80027f4:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
 80027f6:	2300      	movs	r3, #0
 80027f8:	81bb      	strh	r3, [r7, #12]
 80027fa:	2300      	movs	r3, #0
 80027fc:	81fb      	strh	r3, [r7, #14]

  FOCVars[bMotor].Iab = NULL_ab;
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4a3c      	ldr	r2, [pc, #240]	; (80028f4 <FOC_Clear+0x118>)
 8002802:	2126      	movs	r1, #38	; 0x26
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	461a      	mov	r2, r3
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	4a37      	ldr	r2, [pc, #220]	; (80028f4 <FOC_Clear+0x118>)
 8002818:	2126      	movs	r1, #38	; 0x26
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	461a      	mov	r2, r3
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <FOC_Clear+0x118>)
 8002830:	2126      	movs	r1, #38	; 0x26
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	330c      	adds	r3, #12
 800283a:	461a      	mov	r2, r3
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	4a2b      	ldr	r2, [pc, #172]	; (80028f4 <FOC_Clear+0x118>)
 8002848:	2126      	movs	r1, #38	; 0x26
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3310      	adds	r3, #16
 8002852:	461a      	mov	r2, r3
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <FOC_Clear+0x118>)
 8002860:	2126      	movs	r1, #38	; 0x26
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	331e      	adds	r3, #30
 800286a:	2200      	movs	r2, #0
 800286c:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4a20      	ldr	r2, [pc, #128]	; (80028f4 <FOC_Clear+0x118>)
 8002872:	2126      	movs	r1, #38	; 0x26
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3310      	adds	r3, #16
 800287c:	3306      	adds	r3, #6
 800287e:	f107 0210 	add.w	r2, r7, #16
 8002882:	6810      	ldr	r0, [r2, #0]
 8002884:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <FOC_Clear+0x118>)
 800288a:	2126      	movs	r1, #38	; 0x26
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	3318      	adds	r3, #24
 8002894:	3302      	adds	r3, #2
 8002896:	f107 020c 	add.w	r2, r7, #12
 800289a:	6810      	ldr	r0, [r2, #0]
 800289c:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <FOC_Clear+0x118>)
 80028a2:	2126      	movs	r1, #38	; 0x26
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3320      	adds	r3, #32
 80028ac:	2200      	movs	r2, #0
 80028ae:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <FOC_Clear+0x11c>)
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f008 ff29 	bl	800b712 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <FOC_Clear+0x120>)
 80028c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f008 ff21 	bl	800b712 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <FOC_Clear+0x124>)
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	4618      	mov	r0, r3
 80028da:	f00b fcb0 	bl	800e23e <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	4a08      	ldr	r2, [pc, #32]	; (8002904 <FOC_Clear+0x128>)
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f009 fb6d 	bl	800bfc6 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80028ec:	bf00      	nop
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000a30 	.word	0x20000a30
 80028f8:	20000a24 	.word	0x20000a24
 80028fc:	20000ae0 	.word	0x20000ae0
 8002900:	20000ae4 	.word	0x20000ae4
 8002904:	20000a1c 	.word	0x20000a1c

08002908 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <FOC_CalcCurrRef+0x70>)
 800292e:	2126      	movs	r1, #38	; 0x26
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3324      	adds	r3, #36	; 0x24
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d123      	bne.n	8002986 <FOC_CalcCurrRef+0x66>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <FOC_CalcCurrRef+0x74>)
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	79fc      	ldrb	r4, [r7, #7]
 8002948:	4618      	mov	r0, r3
 800294a:	f00b fd6f 	bl	800e42c <STC_CalcTorqueReference>
 800294e:	4603      	mov	r3, r0
 8002950:	4619      	mov	r1, r3
 8002952:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <FOC_CalcCurrRef+0x70>)
 8002954:	2326      	movs	r3, #38	; 0x26
 8002956:	fb03 f304 	mul.w	r3, r3, r4
 800295a:	4413      	add	r3, r2
 800295c:	331e      	adds	r3, #30
 800295e:	460a      	mov	r2, r1
 8002960:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002962:	79fa      	ldrb	r2, [r7, #7]
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	490a      	ldr	r1, [pc, #40]	; (8002990 <FOC_CalcCurrRef+0x70>)
 8002968:	2026      	movs	r0, #38	; 0x26
 800296a:	fb00 f202 	mul.w	r2, r0, r2
 800296e:	440a      	add	r2, r1
 8002970:	321e      	adds	r2, #30
 8002972:	f9b2 0000 	ldrsh.w	r0, [r2]
 8002976:	4a06      	ldr	r2, [pc, #24]	; (8002990 <FOC_CalcCurrRef+0x70>)
 8002978:	2126      	movs	r1, #38	; 0x26
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3310      	adds	r3, #16
 8002982:	4602      	mov	r2, r0
 8002984:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
 800298e:	bf00      	nop
 8002990:	20000a30 	.word	0x20000a30
 8002994:	20000ae4 	.word	0x20000ae4

08002998 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <TSK_SetChargeBootCapDelayM1+0x1c>)
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	8013      	strh	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	2000071a 	.word	0x2000071a

080029b8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
  bool retVal = false;
 80029be:	2300      	movs	r3, #0
 80029c0:	71fb      	strb	r3, [r7, #7]
  if (hBootCapDelayCounterM1 == 0)
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 80029cc:	2301      	movs	r3, #1
 80029ce:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 80029d0:	79fb      	ldrb	r3, [r7, #7]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	2000071a 	.word	0x2000071a

080029e4 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <TSK_SetStopPermanencyTimeM1+0x1c>)
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	8013      	strh	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	2000071c 	.word	0x2000071c

08002a04 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
  bool retVal = false;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	71fb      	strb	r3, [r7, #7]
  if (hStopPermanencyCounterM1 == 0)
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	2000071c 	.word	0x2000071c

08002a30 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
  uint16_t hFOCreturn;

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002a3a:	4a35      	ldr	r2, [pc, #212]	; (8002b10 <TSK_HighFrequencyTask+0xe0>)
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	321a      	adds	r2, #26
 8002a40:	6810      	ldr	r0, [r2, #0]
 8002a42:	6018      	str	r0, [r3, #0]
  if ( STM[M1].bState == SWITCH_OVER )
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <TSK_HighFrequencyTask+0xe4>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b13      	cmp	r3, #19
 8002a4a:	d113      	bne.n	8002a74 <TSK_HighFrequencyTask+0x44>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <TSK_HighFrequencyTask+0xe8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00b fabd 	bl	800dfd0 <REMNG_RampCompleted>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f083 0301 	eor.w	r3, r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <TSK_HighFrequencyTask+0x44>
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <TSK_HighFrequencyTask+0xe8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f00b f9f3 	bl	800de52 <REMNG_Calc>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <TSK_HighFrequencyTask+0xe0>)
 8002a72:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8002a74:	f000 f85a 	bl	8002b2c <FOC_CurrControllerM1>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_FOC_DURATION)
 8002a7c:	8abb      	ldrh	r3, [r7, #20]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d105      	bne.n	8002a8e <TSK_HighFrequencyTask+0x5e>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2101      	movs	r1, #1
 8002a86:	4823      	ldr	r0, [pc, #140]	; (8002b14 <TSK_HighFrequencyTask+0xe4>)
 8002a88:	f00b ff00 	bl	800e88c <STM_FaultProcessing>
 8002a8c:	e03a      	b.n	8002b04 <TSK_HighFrequencyTask+0xd4>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002a8e:	4823      	ldr	r0, [pc, #140]	; (8002b1c <TSK_HighFrequencyTask+0xec>)
 8002a90:	f00c fc8e 	bl	800f3b0 <RUC_FirstAccelerationStageReached>
 8002a94:	4603      	mov	r3, r0
 8002a96:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <TSK_HighFrequencyTask+0xe0>)
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	3204      	adds	r2, #4
 8002aa0:	6810      	ldr	r0, [r2, #0]
 8002aa2:	6018      	str	r0, [r3, #0]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <TSK_HighFrequencyTask+0xf0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f008 fb95 	bl	800b1d8 <VBS_GetAvBusVoltage_d>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	81bb      	strh	r3, [r7, #12]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	481b      	ldr	r0, [pc, #108]	; (8002b24 <TSK_HighFrequencyTask+0xf4>)
 8002ab8:	f00c fcb0 	bl	800f41c <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002abc:	4819      	ldr	r0, [pc, #100]	; (8002b24 <TSK_HighFrequencyTask+0xf4>)
 8002abe:	f00c fe37 	bl	800f730 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	f083 0301 	eor.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <TSK_HighFrequencyTask+0xa4>
    {
      STO_ResetPLL(&STO_PLL_M1);
 8002ace:	4815      	ldr	r0, [pc, #84]	; (8002b24 <TSK_HighFrequencyTask+0xf4>)
 8002ad0:	f00c ff64 	bl	800f99c <STO_ResetPLL>
    }
    hState = STM_GetState(&STM[M1]);
 8002ad4:	480f      	ldr	r0, [pc, #60]	; (8002b14 <TSK_HighFrequencyTask+0xe4>)
 8002ad6:	f00b ff17 	bl	800e908 <STM_GetState>
 8002ada:	4603      	mov	r3, r0
 8002adc:	823b      	strh	r3, [r7, #16]
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8002ade:	8a3b      	ldrh	r3, [r7, #16]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d005      	beq.n	8002af0 <TSK_HighFrequencyTask+0xc0>
 8002ae4:	8a3b      	ldrh	r3, [r7, #16]
 8002ae6:	2b13      	cmp	r3, #19
 8002ae8:	d002      	beq.n	8002af0 <TSK_HighFrequencyTask+0xc0>
 8002aea:	8a3b      	ldrh	r3, [r7, #16]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d109      	bne.n	8002b04 <TSK_HighFrequencyTask+0xd4>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <TSK_HighFrequencyTask+0xf4>)
 8002af2:	f00b faaf 	bl	800e054 <SPD_GetElAngle>
 8002af6:	4603      	mov	r3, r0
 8002af8:	807b      	strh	r3, [r7, #2]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002afa:	1cbb      	adds	r3, r7, #2
 8002afc:	4619      	mov	r1, r3
 8002afe:	480a      	ldr	r0, [pc, #40]	; (8002b28 <TSK_HighFrequencyTask+0xf8>)
 8002b00:	f00c f973 	bl	800edea <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000a30 	.word	0x20000a30
 8002b14:	20000ad0 	.word	0x20000ad0
 8002b18:	20000ad8 	.word	0x20000ad8
 8002b1c:	200001d8 	.word	0x200001d8
 8002b20:	20000ab0 	.word	0x20000ab0
 8002b24:	20000300 	.word	0x20000300
 8002b28:	200002c8 	.word	0x200002c8

08002b2c <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_FOC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002b32:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <FOC_CurrControllerM1+0x120>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f00b fb75 	bl	800e226 <STC_GetSpeedSensor>
 8002b3c:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 8002b3e:	69f8      	ldr	r0, [r7, #28]
 8002b40:	f00b fa88 	bl	800e054 <SPD_GetElAngle>
 8002b44:	4603      	mov	r3, r0
 8002b46:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8002b48:	69f8      	ldr	r0, [r7, #28]
 8002b4a:	f00b fa9d 	bl	800e088 <SPD_GetInstElSpeedDpp>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	8b7b      	ldrh	r3, [r7, #26]
 8002b54:	4413      	add	r3, r2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <FOC_CurrControllerM1+0x124>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f107 020c 	add.w	r2, r7, #12
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f009 f817 	bl	800bb98 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff f946 	bl	8001dfc <MCM_Clarke>
 8002b70:	4603      	mov	r3, r0
 8002b72:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002b74:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	68b8      	ldr	r0, [r7, #8]
 8002b7c:	f7ff f988 	bl	8001e90 <MCM_Park>
 8002b80:	4603      	mov	r3, r0
 8002b82:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002b84:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <FOC_CurrControllerM1+0x128>)
 8002b86:	681b      	ldr	r3, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002b88:	4a33      	ldr	r2, [pc, #204]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002b8a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002b94:	1a8a      	subs	r2, r1, r2
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f008 fdfd 	bl	800b798 <PI_Controller>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	823b      	strh	r3, [r7, #16]

  Vqd.d = PI_Controller(pPIDId[M1],
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <FOC_CurrControllerM1+0x130>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002ba8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002bac:	4611      	mov	r1, r2
 8002bae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002bb2:	1a8a      	subs	r2, r1, r2
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f008 fdee 	bl	800b798 <PI_Controller>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	827b      	strh	r3, [r7, #18]

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <FOC_CurrControllerM1+0x134>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6939      	ldr	r1, [r7, #16]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f008 fb2b 	bl	800b222 <Circle_Limitation>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002bd0:	69f8      	ldr	r0, [r7, #28]
 8002bd2:	f00b fa59 	bl	800e088 <SPD_GetInstElSpeedDpp>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	8b7b      	ldrh	r3, [r7, #26]
 8002bdc:	4413      	add	r3, r2
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002be2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002be6:	4619      	mov	r1, r3
 8002be8:	6938      	ldr	r0, [r7, #16]
 8002bea:	f7ff f9c9 	bl	8001f80 <MCM_Rev_Park>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <FOC_CurrControllerM1+0x124>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f008 ffdb 	bl	800bbb4 <PWMC_SetPhaseVoltage>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	833b      	strh	r3, [r7, #24]
  FOCVars[M1].Vqd = Vqd;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002c04:	3316      	adds	r3, #22
 8002c06:	f107 0210 	add.w	r2, r7, #16
 8002c0a:	6810      	ldr	r0, [r2, #0]
 8002c0c:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002c10:	461a      	mov	r2, r3
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	6010      	str	r0, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	f107 0208 	add.w	r2, r7, #8
 8002c22:	6810      	ldr	r0, [r2, #0]
 8002c24:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iqd = Iqd;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002c28:	330c      	adds	r3, #12
 8002c2a:	f107 0214 	add.w	r2, r7, #20
 8002c2e:	6810      	ldr	r0, [r2, #0]
 8002c30:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002c34:	331a      	adds	r3, #26
 8002c36:	1d3a      	adds	r2, r7, #4
 8002c38:	6810      	ldr	r0, [r2, #0]
 8002c3a:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <FOC_CurrControllerM1+0x12c>)
 8002c3e:	8b7b      	ldrh	r3, [r7, #26]
 8002c40:	8413      	strh	r3, [r2, #32]
  return(hCodeError);
 8002c42:	8b3b      	ldrh	r3, [r7, #24]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000ae4 	.word	0x20000ae4
 8002c50:	20000a1c 	.word	0x20000a1c
 8002c54:	20000a24 	.word	0x20000a24
 8002c58:	20000a30 	.word	0x20000a30
 8002c5c:	20000ae0 	.word	0x20000ae0
 8002c60:	20000aac 	.word	0x20000aac

08002c64 <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <TSK_SafetyTask+0x1c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d104      	bne.n	8002c7a <TSK_SafetyTask+0x16>
  {
    TSK_SafetyTask_PWMOFF(M1);
 8002c70:	2000      	movs	r0, #0
 8002c72:	f000 f807 	bl	8002c84 <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv ();
 8002c76:	f001 f995 	bl	8003fa4 <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000071e 	.word	0x2000071e

08002c84 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 8002c92:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8002c96:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	f107 0210 	add.w	r2, r7, #16
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	4a37      	ldr	r2, [pc, #220]	; (8002d88 <TSK_SafetyTask_PWMOFF+0x104>)
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f008 fc67 	bl	800b582 <NTC_CalcAvTemp>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4023      	ands	r3, r4
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <TSK_SafetyTask_PWMOFF+0x108>)
 8002cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f009 f9c8 	bl	800c064 <PWMC_CheckOverCurrent>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	89fb      	ldrh	r3, [r7, #14]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d114      	bne.n	8002d0e <TSK_SafetyTask_PWMOFF+0x8a>
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	f107 0210 	add.w	r2, r7, #16
 8002cec:	4413      	add	r3, r2
 8002cee:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <TSK_SafetyTask_PWMOFF+0x10c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00b f813 	bl	800dd22 <RVBS_CalcAvVbusFilt>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4023      	ands	r3, r4
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b21a      	sxth	r2, r3
 8002d04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	b21b      	sxth	r3, r3
 8002d0c:	81fb      	strh	r3, [r7, #14]
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002d0e:	79fa      	ldrb	r2, [r7, #7]
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <TSK_SafetyTask_PWMOFF+0x110>)
 8002d1a:	1898      	adds	r0, r3, r2
 8002d1c:	89fb      	ldrh	r3, [r7, #14]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	4619      	mov	r1, r3
 8002d26:	f00b fdb1 	bl	800e88c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8002d2a:	79fa      	ldrb	r2, [r7, #7]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	4413      	add	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4a17      	ldr	r2, [pc, #92]	; (8002d94 <TSK_SafetyTask_PWMOFF+0x110>)
 8002d36:	4413      	add	r3, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f00b fde5 	bl	800e908 <STM_GetState>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b0a      	cmp	r3, #10
 8002d42:	d002      	beq.n	8002d4a <TSK_SafetyTask_PWMOFF+0xc6>
 8002d44:	2b0b      	cmp	r3, #11
 8002d46:	d013      	beq.n	8002d70 <TSK_SafetyTask_PWMOFF+0xec>
	/* USER CODE BEGIN TSK_SafetyTask_PWMOFF 2 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 2 */
    break;
  default:
    break;
 8002d48:	e01a      	b.n	8002d80 <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	4a0f      	ldr	r2, [pc, #60]	; (8002d8c <TSK_SafetyTask_PWMOFF+0x108>)
 8002d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f009 f937 	bl	800bfc6 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fd3e 	bl	80027dc <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <TSK_SafetyTask_PWMOFF+0x114>)
 8002d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f008 fb44 	bl	800b3f6 <MPM_Clear>
    break;
 8002d6e:	e007      	b.n	8002d80 <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <TSK_SafetyTask_PWMOFF+0x108>)
 8002d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f009 f924 	bl	800bfc6 <PWMC_SwitchOffPWM>
    break;
 8002d7e:	bf00      	nop
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	20000a18 	.word	0x20000a18
 8002d8c:	20000a1c 	.word	0x20000a1c
 8002d90:	20000ab0 	.word	0x20000ab0
 8002d94:	20000ad0 	.word	0x20000ad0
 8002d98:	20000adc 	.word	0x20000adc

08002d9c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <TSK_HardwareFaultTask+0x1c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f00a fb51 	bl	800d44c <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	4803      	ldr	r0, [pc, #12]	; (8002dbc <TSK_HardwareFaultTask+0x20>)
 8002db0:	f00b fd6c 	bl	800e88c <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000a1c 	.word	0x20000a1c
 8002dbc:	20000ad0 	.word	0x20000ad0

08002dc0 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8002dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc8:	4824      	ldr	r0, [pc, #144]	; (8002e5c <mc_lock_pins+0x9c>)
 8002dca:	f7ff f9a5 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 8002dce:	2104      	movs	r1, #4
 8002dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd4:	f7ff f9a0 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 8002dd8:	2102      	movs	r1, #2
 8002dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dde:	f7ff f99b 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 8002de2:	2101      	movs	r1, #1
 8002de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de8:	f7ff f996 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 8002dec:	2101      	movs	r1, #1
 8002dee:	481b      	ldr	r0, [pc, #108]	; (8002e5c <mc_lock_pins+0x9c>)
 8002df0:	f7ff f992 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 8002df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002df8:	4818      	ldr	r0, [pc, #96]	; (8002e5c <mc_lock_pins+0x9c>)
 8002dfa:	f7ff f98d 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e04:	f7ff f988 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_INPUT_GPIO_Port, M1_PWM_INPUT_Pin);
 8002e08:	2120      	movs	r1, #32
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0e:	f7ff f983 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 8002e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1a:	f7ff f97d 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 8002e1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e26:	f7ff f977 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 8002e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e2e:	480b      	ldr	r0, [pc, #44]	; (8002e5c <mc_lock_pins+0x9c>)
 8002e30:	f7ff f972 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 8002e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3c:	f7ff f96c 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 8002e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e44:	4805      	ldr	r0, [pc, #20]	; (8002e5c <mc_lock_pins+0x9c>)
 8002e46:	f7ff f967 	bl	8002118 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 8002e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e52:	f7ff f961 	bl	8002118 <LL_GPIO_LockPin>
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	48000400 	.word	0x48000400

08002e60 <MCP_Init>:
               FCP_Handle_t * pFCP,
               FCP_SendFct_t fFcpSend,
               FCP_ReceiveFct_t fFcpReceive,
               FCP_AbortReceiveFct_t fFcpAbortReceive,
               const char* s_fwVer )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	619a      	str	r2, [r3, #24]
  pHandle->s_fwVer = s_fwVer;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	69fa      	ldr	r2, [r7, #28]
 8002e78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <MCP_Init+0x4c>)
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <MCP_Init+0x50>)
 8002e82:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <MCP_Init+0x54>)
 8002e84:	68f9      	ldr	r1, [r7, #12]
 8002e86:	68b8      	ldr	r0, [r7, #8]
 8002e88:	f008 fa5f 	bl	800b34a <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	61da      	str	r2, [r3, #28]
  pHandle->fFcpReceive = fFcpReceive;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	621a      	str	r2, [r3, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24

  MCP_WaitNextFrame(pHandle);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f815 	bl	8002ece <MCP_WaitNextFrame>
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	08002eb9 	.word	0x08002eb9
 8002eb0:	08002f21 	.word	0x08002f21
 8002eb4:	08002eff 	.word	0x08002eff

08002eb8 <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f804 	bl	8002ece <MCP_WaitNextFrame>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6992      	ldr	r2, [r2, #24]
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6992      	ldr	r2, [r2, #24]
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4798      	blx	r3
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	607a      	str	r2, [r7, #4]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	72fb      	strb	r3, [r7, #11]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ffdb 	bl	8002ece <MCP_WaitNextFrame>
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b0a9      	sub	sp, #164	; 0xa4
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	72fb      	strb	r3, [r7, #11]
 8002f30:	4613      	mov	r3, r2
 8002f32:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool bNoError = false; // Default is error
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 8002f40:	7afb      	ldrb	r3, [r7, #11]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  if (bMotorSelection != 0)
 8002f48:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d014      	beq.n	8002f7a <MCP_ReceivedFrame+0x5a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002f56:	3b01      	subs	r3, #1
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f001 fdca 	bl	8004af4 <UI_SetReg>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d004      	beq.n	8002f70 <MCP_ReceivedFrame+0x50>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	72fb      	strb	r3, [r7, #11]
 8002f6e:	e004      	b.n	8002f7a <MCP_ReceivedFrame+0x5a>

    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 8002f70:	2300      	movs	r3, #0
 8002f72:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002f74:	230b      	movs	r3, #11
 8002f76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
  }

  switch (Code)
 8002f7a:	7afb      	ldrb	r3, [r7, #11]
 8002f7c:	2b12      	cmp	r3, #18
 8002f7e:	f200 8537 	bhi.w	80039f0 <MCP_ReceivedFrame+0xad0>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <MCP_ReceivedFrame+0x68>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	080039f9 	.word	0x080039f9
 8002f8c:	08002fd5 	.word	0x08002fd5
 8002f90:	080032d5 	.word	0x080032d5
 8002f94:	0800360d 	.word	0x0800360d
 8002f98:	080039f1 	.word	0x080039f1
 8002f9c:	080039f1 	.word	0x080039f1
 8002fa0:	08003631 	.word	0x08003631
 8002fa4:	080036f5 	.word	0x080036f5
 8002fa8:	080037a7 	.word	0x080037a7
 8002fac:	0800383b 	.word	0x0800383b
 8002fb0:	080038d7 	.word	0x080038d7
 8002fb4:	08003925 	.word	0x08003925
 8002fb8:	0800396b 	.word	0x0800396b
 8002fbc:	0800374b 	.word	0x0800374b
 8002fc0:	080039f1 	.word	0x080039f1
 8002fc4:	080039f1 	.word	0x080039f1
 8002fc8:	080039f1 	.word	0x080039f1
 8002fcc:	080039f1 	.word	0x080039f1
 8002fd0:	080039f9 	.word	0x080039f9
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002fdc:	2305      	movs	r3, #5
 8002fde:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 8002fe2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002fe6:	2b88      	cmp	r3, #136	; 0x88
 8002fe8:	f200 816f 	bhi.w	80032ca <MCP_ReceivedFrame+0x3aa>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <MCP_ReceivedFrame+0xd4>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003219 	.word	0x08003219
 8002ff8:	080032cb 	.word	0x080032cb
 8002ffc:	080032cb 	.word	0x080032cb
 8003000:	08003237 	.word	0x08003237
 8003004:	080032cb 	.word	0x080032cb
 8003008:	08003263 	.word	0x08003263
 800300c:	08003263 	.word	0x08003263
 8003010:	08003263 	.word	0x08003263
 8003014:	08003263 	.word	0x08003263
 8003018:	08003263 	.word	0x08003263
 800301c:	08003263 	.word	0x08003263
 8003020:	08003263 	.word	0x08003263
 8003024:	08003263 	.word	0x08003263
 8003028:	08003263 	.word	0x08003263
 800302c:	08003263 	.word	0x08003263
 8003030:	08003263 	.word	0x08003263
 8003034:	0800328d 	.word	0x0800328d
 8003038:	0800328d 	.word	0x0800328d
 800303c:	080032cb 	.word	0x080032cb
 8003040:	080032cb 	.word	0x080032cb
 8003044:	08003263 	.word	0x08003263
 8003048:	08003263 	.word	0x08003263
 800304c:	08003263 	.word	0x08003263
 8003050:	08003263 	.word	0x08003263
 8003054:	08003263 	.word	0x08003263
 8003058:	080032cb 	.word	0x080032cb
 800305c:	080032cb 	.word	0x080032cb
 8003060:	080032cb 	.word	0x080032cb
 8003064:	08003253 	.word	0x08003253
 8003068:	0800325b 	.word	0x0800325b
 800306c:	080032cb 	.word	0x080032cb
 8003070:	080032cb 	.word	0x080032cb
 8003074:	080032cb 	.word	0x080032cb
 8003078:	080032cb 	.word	0x080032cb
 800307c:	080032cb 	.word	0x080032cb
 8003080:	080032cb 	.word	0x080032cb
 8003084:	080032cb 	.word	0x080032cb
 8003088:	080032cb 	.word	0x080032cb
 800308c:	080032cb 	.word	0x080032cb
 8003090:	080032cb 	.word	0x080032cb
 8003094:	080032cb 	.word	0x080032cb
 8003098:	080032cb 	.word	0x080032cb
 800309c:	080032cb 	.word	0x080032cb
 80030a0:	080032cb 	.word	0x080032cb
 80030a4:	080032cb 	.word	0x080032cb
 80030a8:	080032cb 	.word	0x080032cb
 80030ac:	080032cb 	.word	0x080032cb
 80030b0:	080032cb 	.word	0x080032cb
 80030b4:	080032cb 	.word	0x080032cb
 80030b8:	080032cb 	.word	0x080032cb
 80030bc:	080032cb 	.word	0x080032cb
 80030c0:	080032cb 	.word	0x080032cb
 80030c4:	080032cb 	.word	0x080032cb
 80030c8:	080032cb 	.word	0x080032cb
 80030cc:	080032cb 	.word	0x080032cb
 80030d0:	080032cb 	.word	0x080032cb
 80030d4:	080032cb 	.word	0x080032cb
 80030d8:	080032cb 	.word	0x080032cb
 80030dc:	080032cb 	.word	0x080032cb
 80030e0:	080032cb 	.word	0x080032cb
 80030e4:	080032cb 	.word	0x080032cb
 80030e8:	080032cb 	.word	0x080032cb
 80030ec:	080032cb 	.word	0x080032cb
 80030f0:	080032cb 	.word	0x080032cb
 80030f4:	080032cb 	.word	0x080032cb
 80030f8:	08003263 	.word	0x08003263
 80030fc:	080032cb 	.word	0x080032cb
 8003100:	080032cb 	.word	0x080032cb
 8003104:	080032cb 	.word	0x080032cb
 8003108:	080032cb 	.word	0x080032cb
 800310c:	0800328d 	.word	0x0800328d
 8003110:	0800328d 	.word	0x0800328d
 8003114:	0800328d 	.word	0x0800328d
 8003118:	080032cb 	.word	0x080032cb
 800311c:	080032cb 	.word	0x080032cb
 8003120:	080032cb 	.word	0x080032cb
 8003124:	080032cb 	.word	0x080032cb
 8003128:	080032cb 	.word	0x080032cb
 800312c:	080032cb 	.word	0x080032cb
 8003130:	08003263 	.word	0x08003263
 8003134:	080032cb 	.word	0x080032cb
 8003138:	080032cb 	.word	0x080032cb
 800313c:	080032cb 	.word	0x080032cb
 8003140:	08003263 	.word	0x08003263
 8003144:	08003263 	.word	0x08003263
 8003148:	08003263 	.word	0x08003263
 800314c:	08003263 	.word	0x08003263
 8003150:	08003263 	.word	0x08003263
 8003154:	08003263 	.word	0x08003263
 8003158:	08003263 	.word	0x08003263
 800315c:	080032cb 	.word	0x080032cb
 8003160:	0800328d 	.word	0x0800328d
 8003164:	080032cb 	.word	0x080032cb
 8003168:	080032cb 	.word	0x080032cb
 800316c:	080032cb 	.word	0x080032cb
 8003170:	080032cb 	.word	0x080032cb
 8003174:	080032cb 	.word	0x080032cb
 8003178:	08003263 	.word	0x08003263
 800317c:	080032cb 	.word	0x080032cb
 8003180:	080032cb 	.word	0x080032cb
 8003184:	08003263 	.word	0x08003263
 8003188:	08003263 	.word	0x08003263
 800318c:	080032cb 	.word	0x080032cb
 8003190:	080032cb 	.word	0x080032cb
 8003194:	080032cb 	.word	0x080032cb
 8003198:	080032cb 	.word	0x080032cb
 800319c:	080032cb 	.word	0x080032cb
 80031a0:	080032cb 	.word	0x080032cb
 80031a4:	080032cb 	.word	0x080032cb
 80031a8:	080032cb 	.word	0x080032cb
 80031ac:	080032cb 	.word	0x080032cb
 80031b0:	080032cb 	.word	0x080032cb
 80031b4:	080032cb 	.word	0x080032cb
 80031b8:	080032cb 	.word	0x080032cb
 80031bc:	080032cb 	.word	0x080032cb
 80031c0:	080032cb 	.word	0x080032cb
 80031c4:	08003237 	.word	0x08003237
 80031c8:	0800328d 	.word	0x0800328d
 80031cc:	0800328d 	.word	0x0800328d
 80031d0:	0800328d 	.word	0x0800328d
 80031d4:	0800328d 	.word	0x0800328d
 80031d8:	0800328d 	.word	0x0800328d
 80031dc:	080032cb 	.word	0x080032cb
 80031e0:	080032cb 	.word	0x080032cb
 80031e4:	080032cb 	.word	0x080032cb
 80031e8:	0800328d 	.word	0x0800328d
 80031ec:	0800328d 	.word	0x0800328d
 80031f0:	080032cb 	.word	0x080032cb
 80031f4:	080032cb 	.word	0x080032cb
 80031f8:	080032cb 	.word	0x080032cb
 80031fc:	080032cb 	.word	0x080032cb
 8003200:	080032cb 	.word	0x080032cb
 8003204:	080032cb 	.word	0x080032cb
 8003208:	080032cb 	.word	0x080032cb
 800320c:	08003263 	.word	0x08003263
 8003210:	08003263 	.word	0x08003263
 8003214:	08003263 	.word	0x08003263
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3301      	adds	r3, #1
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	663b      	str	r3, [r7, #96]	; 0x60

          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8003226:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003228:	4618      	mov	r0, r3
 800322a:	f001 fc63 	bl	8004af4 <UI_SetReg>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003234:	e04d      	b.n	80032d2 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3301      	adds	r3, #1
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003244:	4619      	mov	r1, r3
 8003246:	f001 fc55 	bl	8004af4 <UI_SetReg>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003250:	e03f      	b.n	80032d2 <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          bNoError = true; /* No check inside class return always true*/
 8003252:	2301      	movs	r3, #1
 8003254:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003258:	e03b      	b.n	80032d2 <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          bNoError = true; /* No check inside class return always true*/
 800325a:	2301      	movs	r3, #1
 800325c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003260:	e037      	b.n	80032d2 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3301      	adds	r3, #1
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3302      	adds	r3, #2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	021b      	lsls	r3, r3, #8
 8003272:	4413      	add	r3, r2
 8003274:	667b      	str	r3, [r7, #100]	; 0x64
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 800327c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fc38 	bl	8004af4 <UI_SetReg>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 800328a:	e022      	b.n	80032d2 <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3301      	adds	r3, #1
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3302      	adds	r3, #2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3303      	adds	r3, #3
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	441a      	add	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3304      	adds	r3, #4
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	061b      	lsls	r3, r3, #24
 80032b0:	4413      	add	r3, r2
 80032b2:	66bb      	str	r3, [r7, #104]	; 0x68
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80032ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fc19 	bl	8004af4 <UI_SetReg>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80032c8:	e003      	b.n	80032d2 <MCP_ReceivedFrame+0x3b2>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80032ca:	2302      	movs	r3, #2
 80032cc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        }
        break;
 80032d0:	bf00      	nop
      }
    }
    break;
 80032d2:	e394      	b.n	80039fe <MCP_ReceivedFrame+0xade>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80032dc:	2303      	movs	r3, #3
 80032de:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 80032e2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80032e6:	2b88      	cmp	r3, #136	; 0x88
 80032e8:	f200 8182 	bhi.w	80035f0 <MCP_ReceivedFrame+0x6d0>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <MCP_ReceivedFrame+0x3d4>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003519 	.word	0x08003519
 80032f8:	08003585 	.word	0x08003585
 80032fc:	08003519 	.word	0x08003519
 8003300:	08003519 	.word	0x08003519
 8003304:	08003585 	.word	0x08003585
 8003308:	0800354f 	.word	0x0800354f
 800330c:	0800354f 	.word	0x0800354f
 8003310:	0800354f 	.word	0x0800354f
 8003314:	0800354f 	.word	0x0800354f
 8003318:	0800354f 	.word	0x0800354f
 800331c:	0800354f 	.word	0x0800354f
 8003320:	0800354f 	.word	0x0800354f
 8003324:	0800354f 	.word	0x0800354f
 8003328:	0800354f 	.word	0x0800354f
 800332c:	0800354f 	.word	0x0800354f
 8003330:	0800354f 	.word	0x0800354f
 8003334:	0800354f 	.word	0x0800354f
 8003338:	0800354f 	.word	0x0800354f
 800333c:	0800354f 	.word	0x0800354f
 8003340:	0800354f 	.word	0x0800354f
 8003344:	0800354f 	.word	0x0800354f
 8003348:	0800354f 	.word	0x0800354f
 800334c:	0800354f 	.word	0x0800354f
 8003350:	0800354f 	.word	0x0800354f
 8003354:	0800354f 	.word	0x0800354f
 8003358:	0800354f 	.word	0x0800354f
 800335c:	0800354f 	.word	0x0800354f
 8003360:	0800354f 	.word	0x0800354f
 8003364:	080035f9 	.word	0x080035f9
 8003368:	080035f9 	.word	0x080035f9
 800336c:	08003585 	.word	0x08003585
 8003370:	0800354f 	.word	0x0800354f
 8003374:	0800354f 	.word	0x0800354f
 8003378:	0800354f 	.word	0x0800354f
 800337c:	08003519 	.word	0x08003519
 8003380:	080035f1 	.word	0x080035f1
 8003384:	080035f1 	.word	0x080035f1
 8003388:	080035f1 	.word	0x080035f1
 800338c:	080035f1 	.word	0x080035f1
 8003390:	080035f1 	.word	0x080035f1
 8003394:	080035f1 	.word	0x080035f1
 8003398:	080035f1 	.word	0x080035f1
 800339c:	080035f1 	.word	0x080035f1
 80033a0:	080035f1 	.word	0x080035f1
 80033a4:	080035f1 	.word	0x080035f1
 80033a8:	080035f1 	.word	0x080035f1
 80033ac:	080035f1 	.word	0x080035f1
 80033b0:	080035f1 	.word	0x080035f1
 80033b4:	080035f1 	.word	0x080035f1
 80033b8:	080035f1 	.word	0x080035f1
 80033bc:	080035f1 	.word	0x080035f1
 80033c0:	080035f1 	.word	0x080035f1
 80033c4:	080035f1 	.word	0x080035f1
 80033c8:	080035f1 	.word	0x080035f1
 80033cc:	080035f1 	.word	0x080035f1
 80033d0:	080035f1 	.word	0x080035f1
 80033d4:	080035f1 	.word	0x080035f1
 80033d8:	080035f1 	.word	0x080035f1
 80033dc:	080035f1 	.word	0x080035f1
 80033e0:	080035f1 	.word	0x080035f1
 80033e4:	080035f1 	.word	0x080035f1
 80033e8:	080035f1 	.word	0x080035f1
 80033ec:	080035f1 	.word	0x080035f1
 80033f0:	080035f1 	.word	0x080035f1
 80033f4:	080035f1 	.word	0x080035f1
 80033f8:	0800354f 	.word	0x0800354f
 80033fc:	080035f1 	.word	0x080035f1
 8003400:	080035f1 	.word	0x080035f1
 8003404:	080035f1 	.word	0x080035f1
 8003408:	080035f1 	.word	0x080035f1
 800340c:	08003585 	.word	0x08003585
 8003410:	08003585 	.word	0x08003585
 8003414:	08003585 	.word	0x08003585
 8003418:	0800354f 	.word	0x0800354f
 800341c:	0800354f 	.word	0x0800354f
 8003420:	0800354f 	.word	0x0800354f
 8003424:	0800354f 	.word	0x0800354f
 8003428:	08003519 	.word	0x08003519
 800342c:	08003585 	.word	0x08003585
 8003430:	0800354f 	.word	0x0800354f
 8003434:	0800354f 	.word	0x0800354f
 8003438:	0800354f 	.word	0x0800354f
 800343c:	0800354f 	.word	0x0800354f
 8003440:	0800354f 	.word	0x0800354f
 8003444:	0800354f 	.word	0x0800354f
 8003448:	0800354f 	.word	0x0800354f
 800344c:	0800354f 	.word	0x0800354f
 8003450:	0800354f 	.word	0x0800354f
 8003454:	0800354f 	.word	0x0800354f
 8003458:	0800354f 	.word	0x0800354f
 800345c:	08003519 	.word	0x08003519
 8003460:	08003585 	.word	0x08003585
 8003464:	080035f1 	.word	0x080035f1
 8003468:	0800354f 	.word	0x0800354f
 800346c:	0800354f 	.word	0x0800354f
 8003470:	0800354f 	.word	0x0800354f
 8003474:	0800354f 	.word	0x0800354f
 8003478:	0800354f 	.word	0x0800354f
 800347c:	080035f1 	.word	0x080035f1
 8003480:	080035f1 	.word	0x080035f1
 8003484:	0800354f 	.word	0x0800354f
 8003488:	0800354f 	.word	0x0800354f
 800348c:	08003519 	.word	0x08003519
 8003490:	08003519 	.word	0x08003519
 8003494:	08003585 	.word	0x08003585
 8003498:	08003585 	.word	0x08003585
 800349c:	08003585 	.word	0x08003585
 80034a0:	08003585 	.word	0x08003585
 80034a4:	08003585 	.word	0x08003585
 80034a8:	08003519 	.word	0x08003519
 80034ac:	0800354f 	.word	0x0800354f
 80034b0:	0800354f 	.word	0x0800354f
 80034b4:	08003585 	.word	0x08003585
 80034b8:	080035f1 	.word	0x080035f1
 80034bc:	0800354f 	.word	0x0800354f
 80034c0:	0800354f 	.word	0x0800354f
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003585 	.word	0x08003585
 80034cc:	08003585 	.word	0x08003585
 80034d0:	08003585 	.word	0x08003585
 80034d4:	08003585 	.word	0x08003585
 80034d8:	08003585 	.word	0x08003585
 80034dc:	08003585 	.word	0x08003585
 80034e0:	08003585 	.word	0x08003585
 80034e4:	08003585 	.word	0x08003585
 80034e8:	08003585 	.word	0x08003585
 80034ec:	08003585 	.word	0x08003585
 80034f0:	08003585 	.word	0x08003585
 80034f4:	08003519 	.word	0x08003519
 80034f8:	080035f1 	.word	0x080035f1
 80034fc:	08003519 	.word	0x08003519
 8003500:	080035bb 	.word	0x080035bb
 8003504:	080035bb 	.word	0x080035bb
 8003508:	080035bb 	.word	0x080035bb
 800350c:	0800354f 	.word	0x0800354f
 8003510:	0800354f 	.word	0x0800354f
 8003514:	0800354f 	.word	0x0800354f
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800351e:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fd34 	bl	8004f90 <UI_GetReg>
 8003528:	4603      	mov	r3, r0
 800352a:	65bb      	str	r3, [r7, #88]	; 0x58
           if ( bNoError == true )
 800352c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003530:	2b00      	cmp	r3, #0
 8003532:	d063      	beq.n	80035fc <MCP_ReceivedFrame+0x6dc>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	69dc      	ldr	r4, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6998      	ldr	r0, [r3, #24]
 800353c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003540:	2301      	movs	r3, #1
 8003542:	21f0      	movs	r1, #240	; 0xf0
 8003544:	47a0      	blx	r4
            RequireAck = false;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800354c:	e056      	b.n	80035fc <MCP_ReceivedFrame+0x6dc>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8003554:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fd19 	bl	8004f90 <UI_GetReg>
 800355e:	4603      	mov	r3, r0
 8003560:	657b      	str	r3, [r7, #84]	; 0x54
          if ( bNoError == true )
 8003562:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04a      	beq.n	8003600 <MCP_ReceivedFrame+0x6e0>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	69dc      	ldr	r4, [r3, #28]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6998      	ldr	r0, [r3, #24]
 8003572:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003576:	2302      	movs	r3, #2
 8003578:	21f0      	movs	r1, #240	; 0xf0
 800357a:	47a0      	blx	r4
            RequireAck = false;
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8003582:	e03d      	b.n	8003600 <MCP_ReceivedFrame+0x6e0>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800358a:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fcfe 	bl	8004f90 <UI_GetReg>
 8003594:	4603      	mov	r3, r0
 8003596:	653b      	str	r3, [r7, #80]	; 0x50
          if ( bNoError == true )
 8003598:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800359c:	2b00      	cmp	r3, #0
 800359e:	d031      	beq.n	8003604 <MCP_ReceivedFrame+0x6e4>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	69dc      	ldr	r4, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6998      	ldr	r0, [r3, #24]
 80035a8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80035ac:	2304      	movs	r3, #4
 80035ae:	21f0      	movs	r1, #240	; 0xf0
 80035b0:	47a0      	blx	r4
            RequireAck = false;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80035b8:	e024      	b.n	8003604 <MCP_ReceivedFrame+0x6e4>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80035c0:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fce3 	bl	8004f90 <UI_GetReg>
 80035ca:	4603      	mov	r3, r0
 80035cc:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ( bNoError == true )
 80035ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d018      	beq.n	8003608 <MCP_ReceivedFrame+0x6e8>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	69dc      	ldr	r4, [r3, #28]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6998      	ldr	r0, [r3, #24]
 80035de:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80035e2:	2304      	movs	r3, #4
 80035e4:	21f0      	movs	r1, #240	; 0xf0
 80035e6:	47a0      	blx	r4
            RequireAck = false;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80035ee:	e00b      	b.n	8003608 <MCP_ReceivedFrame+0x6e8>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80035f0:	2303      	movs	r3, #3
 80035f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        break;
 80035f6:	e008      	b.n	800360a <MCP_ReceivedFrame+0x6ea>
        break;
 80035f8:	bf00      	nop
 80035fa:	e200      	b.n	80039fe <MCP_ReceivedFrame+0xade>
        break;
 80035fc:	bf00      	nop
 80035fe:	e1fe      	b.n	80039fe <MCP_ReceivedFrame+0xade>
        break;
 8003600:	bf00      	nop
 8003602:	e1fc      	b.n	80039fe <MCP_ReceivedFrame+0xade>
        break;
 8003604:	bf00      	nop
 8003606:	e1fa      	b.n	80039fe <MCP_ReceivedFrame+0xade>
        break;
 8003608:	bf00      	nop
      }
    }
    break;
 800360a:	e1f8      	b.n	80039fe <MCP_ReceivedFrame+0xade>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8003614:	2307      	movs	r3, #7
 8003616:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f002 fa22 	bl	8005a6c <UI_ExecCmd>
 8003628:	4603      	mov	r3, r0
 800362a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 800362e:	e1e6      	b.n	80039fe <MCP_ReceivedFrame+0xade>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003636:	e00c      	b.n	8003652 <MCP_ReceivedFrame+0x732>
      {
        outBuff[i] = 0;
 8003638:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800363c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003640:	4413      	add	r3, r2
 8003642:	2200      	movs	r2, #0
 8003644:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; i < 32; i++)
 8003648:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800364c:	3301      	adds	r3, #1
 800364e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003652:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003656:	2b1f      	cmp	r3, #31
 8003658:	d9ee      	bls.n	8003638 <MCP_ReceivedFrame+0x718>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800365a:	2300      	movs	r3, #0
 800365c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003660:	e013      	b.n	800368a <MCP_ReceivedFrame+0x76a>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003668:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800366c:	441a      	add	r2, r3
 800366e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003672:	3303      	adds	r3, #3
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800367a:	440b      	add	r3, r1
 800367c:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003680:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003684:	3301      	adds	r3, #1
 8003686:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800368a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800368e:	2b1c      	cmp	r3, #28
 8003690:	d808      	bhi.n	80036a4 <MCP_ReceivedFrame+0x784>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003698:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800369c:	4413      	add	r3, r2
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b09      	cmp	r3, #9
 80036a2:	d1de      	bne.n	8003662 <MCP_ReceivedFrame+0x742>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80036aa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80036ae:	3305      	adds	r3, #5
 80036b0:	4413      	add	r3, r2
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	753b      	strb	r3, [r7, #20]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80036bc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80036c0:	3307      	adds	r3, #7
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	757b      	strb	r3, [r7, #21]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80036ce:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80036d2:	3309      	adds	r3, #9
 80036d4:	4413      	add	r3, r2
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	75bb      	strb	r3, [r7, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	69dc      	ldr	r4, [r3, #28]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6998      	ldr	r0, [r3, #24]
 80036e2:	f107 0214 	add.w	r2, r7, #20
 80036e6:	2320      	movs	r3, #32
 80036e8:	21f0      	movs	r1, #240	; 0xf0
 80036ea:	47a0      	blx	r4
      bNoError = true;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80036f2:	e184      	b.n	80039fe <MCP_ReceivedFrame+0xade>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3305      	adds	r3, #5
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	b29b      	uxth	r3, r3
 8003708:	4413      	add	r3, r2
 800370a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3301      	adds	r3, #1
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3302      	adds	r3, #2
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	441a      	add	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3303      	adds	r3, #3
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	4413      	add	r3, r2
 8003732:	673b      	str	r3, [r7, #112]	; 0x70
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800373a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800373c:	4618      	mov	r0, r3
 800373e:	f002 fa01 	bl	8005b44 <UI_ExecSpeedRamp>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003748:	e159      	b.n	80039fe <MCP_ReceivedFrame+0xade>
    }
    break;

  case MC_PROTOCOL_CODE_SET_TORQUE_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3305      	adds	r3, #5
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	b29b      	uxth	r3, r3
 800375e:	4413      	add	r3, r2
 8003760:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3301      	adds	r3, #1
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	441a      	add	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3302      	adds	r3, #2
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3303      	adds	r3, #3
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	4413      	add	r3, r2
 8003788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003792:	b211      	sxth	r1, r2
 8003794:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8003798:	4618      	mov	r0, r3
 800379a:	f002 f9f5 	bl	8005b88 <UI_ExecTorqueRamp>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80037a4:	e12b      	b.n	80039fe <MCP_ReceivedFrame+0xade>
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7819      	ldrb	r1, [r3, #0]
 80037ac:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80037b0:	f107 0242 	add.w	r2, r7, #66	; 0x42
 80037b4:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4623      	mov	r3, r4
 80037bc:	f002 fa00 	bl	8005bc0 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80037c0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80037c4:	461a      	mov	r2, r3
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	67bb      	str	r3, [r7, #120]	; 0x78
      outBuff[0] = (uint8_t)(rpm);
 80037d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      outBuff[1] = (uint8_t)(rpm >> 8);
 80037d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037da:	121b      	asrs	r3, r3, #8
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      outBuff[2] = (uint8_t)(rpm >> 16);
 80037e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e4:	141b      	asrs	r3, r3, #16
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      outBuff[3] = (uint8_t)(rpm >> 24);
 80037ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ee:	161b      	asrs	r3, r3, #24
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      outBuff[4] = (uint8_t)(FinalTorque);
 80037f6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8003800:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8003804:	121b      	asrs	r3, r3, #8
 8003806:	b21b      	sxth	r3, r3
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
      outBuff[6] = (uint8_t)(Durationms);
 800380e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8003818:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	b29b      	uxth	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	69dc      	ldr	r4, [r3, #28]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6998      	ldr	r0, [r3, #24]
 800382e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003832:	2308      	movs	r3, #8
 8003834:	21f0      	movs	r1, #240	; 0xf0
 8003836:	47a0      	blx	r4
    }
    break;
 8003838:	e0e1      	b.n	80039fe <MCP_ReceivedFrame+0xade>
      uint8_t bStage;
      uint16_t hDurationms;
      int16_t hFinalMecSpeedUnit;
      int16_t hFinalTorque;
      int32_t rpm;
      bStage = buffer[0];
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      hDurationms = buffer[7] + (buffer[8] << 8);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3307      	adds	r3, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b29a      	uxth	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3308      	adds	r3, #8
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	b29b      	uxth	r3, r3
 8003856:	4413      	add	r3, r2
 8003858:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3301      	adds	r3, #1
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3302      	adds	r3, #2
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	441a      	add	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3303      	adds	r3, #3
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	041b      	lsls	r3, r3, #16
 8003876:	441a      	add	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	4413      	add	r3, r2
 8003882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8003886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800388a:	4a6c      	ldr	r2, [pc, #432]	; (8003a3c <MCP_ReceivedFrame+0xb1c>)
 800388c:	fb82 1203 	smull	r1, r2, r2, r3
 8003890:	17db      	asrs	r3, r3, #31
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3305      	adds	r3, #5
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3306      	adds	r3, #6
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f9b7 407e 	ldrsh.w	r4, [r7, #126]	; 0x7e
 80038ba:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80038be:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 80038c2:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4623      	mov	r3, r4
 80038ca:	f002 f9b2 	bl	8005c32 <UI_SetRevupData>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80038d4:	e093      	b.n	80039fe <MCP_ReceivedFrame+0xade>

  case MC_PROTOCOL_CODE_SET_CURRENT_REF:
    {
      int16_t hIqRef;
      int16_t hIdRef;
      hIqRef = buffer[0] + (buffer[1] << 8);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
      hIdRef = buffer[2] + (buffer[3] << 8);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3302      	adds	r3, #2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3303      	adds	r3, #3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	b29b      	uxth	r3, r3
 8003904:	4413      	add	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8003912:	f9b7 108a 	ldrsh.w	r1, [r7, #138]	; 0x8a
 8003916:	4618      	mov	r0, r3
 8003918:	f002 f9ba 	bl	8005c90 <UI_SetCurrentReferences>
      bNoError = true;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003922:	e06c      	b.n	80039fe <MCP_ReceivedFrame+0xade>

  case MC_PROTOCOL_CODE_GET_MP_INFO:
    {
      MPInfo_t stepList;
      stepList.data = buffer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
      stepList.len = Size;
 8003928:	7abb      	ldrb	r3, [r7, #10]
 800392a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800392e:	230c      	movs	r3, #12
 8003930:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003934:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003938:	4941      	ldr	r1, [pc, #260]	; (8003a40 <MCP_ReceivedFrame+0xb20>)
 800393a:	4618      	mov	r0, r3
 800393c:	f002 f9c4 	bl	8005cc8 <UI_GetMPInfo>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      if (bNoError)
 8003946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800394a:	2b00      	cmp	r3, #0
 800394c:	d056      	beq.n	80039fc <MCP_ReceivedFrame+0xadc>
      {
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	69dc      	ldr	r4, [r3, #28]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6998      	ldr	r0, [r3, #24]
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <MCP_ReceivedFrame+0xb20>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <MCP_ReceivedFrame+0xb20>)
 800395c:	791b      	ldrb	r3, [r3, #4]
 800395e:	21f0      	movs	r1, #240	; 0xf0
 8003960:	47a0      	blx	r4
        RequireAck = false;
 8003962:	2300      	movs	r3, #0
 8003964:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
    break;
 8003968:	e048      	b.n	80039fc <MCP_ReceivedFrame+0xadc>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800396a:	2300      	movs	r3, #0
 800396c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003970:	e012      	b.n	8003998 <MCP_ReceivedFrame+0xa78>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003978:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800397c:	441a      	add	r2, r3
 800397e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003988:	440b      	add	r3, r1
 800398a:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800398e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003992:	3301      	adds	r3, #1
 8003994:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003998:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800399c:	2b1f      	cmp	r3, #31
 800399e:	d816      	bhi.n	80039ce <MCP_ReceivedFrame+0xaae>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80039a6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039aa:	4413      	add	r3, r2
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1df      	bne.n	8003972 <MCP_ReceivedFrame+0xa52>
      }

      for (; i < 32; i++)
 80039b2:	e00c      	b.n	80039ce <MCP_ReceivedFrame+0xaae>
      {
        outBuff[i] = 0;
 80039b4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039b8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80039bc:	4413      	add	r3, r2
 80039be:	2200      	movs	r2, #0
 80039c0:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (; i < 32; i++)
 80039c4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039c8:	3301      	adds	r3, #1
 80039ca:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80039ce:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039d2:	2b1f      	cmp	r3, #31
 80039d4:	d9ee      	bls.n	80039b4 <MCP_ReceivedFrame+0xa94>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	69dc      	ldr	r4, [r3, #28]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6998      	ldr	r0, [r3, #24]
 80039de:	f107 0214 	add.w	r2, r7, #20
 80039e2:	2320      	movs	r3, #32
 80039e4:	21f0      	movs	r1, #240	; 0xf0
 80039e6:	47a0      	blx	r4
      bNoError = true;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80039ee:	e006      	b.n	80039fe <MCP_ReceivedFrame+0xade>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
    break;
 80039f6:	e002      	b.n	80039fe <MCP_ReceivedFrame+0xade>
    break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <MCP_ReceivedFrame+0xade>
    break;
 80039fc:	bf00      	nop
  }

  if (RequireAck)
 80039fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <MCP_ReceivedFrame+0xb12>
  {
    if (bNoError)
 8003a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <MCP_ReceivedFrame+0xb00>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	69dc      	ldr	r4, [r3, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6998      	ldr	r0, [r3, #24]
 8003a16:	2300      	movs	r3, #0
 8003a18:	2200      	movs	r2, #0
 8003a1a:	21f0      	movs	r1, #240	; 0xf0
 8003a1c:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 8003a1e:	e008      	b.n	8003a32 <MCP_ReceivedFrame+0xb12>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	69dc      	ldr	r4, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6998      	ldr	r0, [r3, #24]
 8003a28:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	21ff      	movs	r1, #255	; 0xff
 8003a30:	47a0      	blx	r4
}
 8003a32:	bf00      	nop
 8003a34:	379c      	adds	r7, #156	; 0x9c
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	2aaaaaab 	.word	0x2aaaaaab
 8003a40:	20000720 	.word	0x20000720

08003a44 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af02      	add	r7, sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003a4a:	f005 f917 	bl	8008c7c <HAL_RCC_GetHCLKFreq>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <MX_MotorControl_Init+0x3c>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	09db      	lsrs	r3, r3, #7
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fe06 	bl	800766a <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8003a5e:	4909      	ldr	r1, [pc, #36]	; (8003a84 <MX_MotorControl_Init+0x40>)
 8003a60:	4809      	ldr	r0, [pc, #36]	; (8003a88 <MX_MotorControl_Init+0x44>)
 8003a62:	f7fe fb75 	bl	8002150 <MCboot>
  mc_lock_pins();
 8003a66:	f7ff f9ab 	bl	8002dc0 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <MX_MotorControl_Init+0x48>)
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <MX_MotorControl_Init+0x40>)
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <MX_MotorControl_Init+0x44>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	4806      	ldr	r0, [pc, #24]	; (8003a90 <MX_MotorControl_Init+0x4c>)
 8003a76:	f000 ff49 	bl	800490c <UI_TaskInit>
}
 8003a7a:	bf00      	nop
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	10624dd3 	.word	0x10624dd3
 8003a84:	20000aec 	.word	0x20000aec
 8003a88:	20000ae8 	.word	0x20000ae8
 8003a8c:	0800fcf4 	.word	0x0800fcf4
 8003a90:	200006d0 	.word	0x200006d0

08003a94 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f023 020f 	bic.w	r2, r3, #15
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003aba:	b490      	push	{r4, r7}
 8003abc:	b086      	sub	sp, #24
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3330      	adds	r3, #48	; 0x30
 8003aca:	4619      	mov	r1, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003ad6:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	fa92 f2a2 	rbit	r2, r2
 8003ade:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	fab2 f282 	clz	r2, r2
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	40d3      	lsrs	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8003af0:	6822      	ldr	r2, [r4, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	211f      	movs	r1, #31
 8003afa:	fa01 f303 	lsl.w	r3, r1, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	f1c3 031a 	rsb	r3, r3, #26
 8003b12:	fa21 f303 	lsr.w	r3, r1, r3
 8003b16:	4313      	orrs	r3, r2
 8003b18:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc90      	pop	{r4, r7}
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b24:	b490      	push	{r4, r7}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3314      	adds	r3, #20
 8003b34:	4619      	mov	r1, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	613a      	str	r2, [r7, #16]
  return result;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	40d3      	lsrs	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003b62:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003b66:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	69f9      	ldr	r1, [r7, #28]
 8003b6a:	fa91 f1a1 	rbit	r1, r1
 8003b6e:	61b9      	str	r1, [r7, #24]
  return result;
 8003b70:	69b9      	ldr	r1, [r7, #24]
 8003b72:	fab1 f181 	clz	r1, r1
 8003b76:	b2c9      	uxtb	r1, r1
 8003b78:	40cb      	lsrs	r3, r1
 8003b7a:	2107      	movs	r1, #7
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	401a      	ands	r2, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003b8a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003b8e:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b92:	fa91 f1a1 	rbit	r1, r1
 8003b96:	6239      	str	r1, [r7, #32]
  return result;
 8003b98:	6a39      	ldr	r1, [r7, #32]
 8003b9a:	fab1 f181 	clz	r1, r1
 8003b9e:	b2c9      	uxtb	r1, r1
 8003ba0:	40cb      	lsrs	r3, r1
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8003bac:	bf00      	nop
 8003bae:	3728      	adds	r7, #40	; 0x28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc90      	pop	{r4, r7}
 8003bb4:	4770      	bx	lr

08003bb6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	bf0c      	ite	eq
 8003bf2:	2301      	moveq	r3, #1
 8003bf4:	2300      	movne	r3, #0
 8003bf6:	b2db      	uxtb	r3, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c16:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	b29b      	uxth	r3, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	601a      	str	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_ClearFlag_JEOC>:
  * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f023 0204 	bic.w	r2, r3, #4
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_ADC_DisableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f023 0220 	bic.w	r2, r3, #32
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	605a      	str	r2, [r3, #4]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint8_t handle=255;
 8003d44:	23ff      	movs	r3, #255	; 0xff
 8003d46:	73fb      	strb	r3, [r7, #15]
  uint8_t i=0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	73bb      	strb	r3, [r7, #14]

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 8003d4c:	e029      	b.n	8003da2 <RCM_RegisterRegConv+0x66>
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d4e:	7bbb      	ldrb	r3, [r7, #14]
 8003d50:	4a53      	ldr	r2, [pc, #332]	; (8003ea0 <RCM_RegisterRegConv+0x164>)
 8003d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <RCM_RegisterRegConv+0x28>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b04      	cmp	r3, #4
 8003d5e:	d901      	bls.n	8003d64 <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8003d60:	7bbb      	ldrb	r3, [r7, #14]
 8003d62:	73fb      	strb	r3, [r7, #15]
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
 8003d64:	7bbb      	ldrb	r3, [r7, #14]
 8003d66:	4a4e      	ldr	r2, [pc, #312]	; (8003ea0 <RCM_RegisterRegConv+0x164>)
 8003d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d70:	7bbb      	ldrb	r3, [r7, #14]
 8003d72:	4a4b      	ldr	r2, [pc, #300]	; (8003ea0 <RCM_RegisterRegConv+0x164>)
 8003d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d78:	791a      	ldrb	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	791b      	ldrb	r3, [r3, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d10c      	bne.n	8003d9c <RCM_RegisterRegConv+0x60>
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	4a46      	ldr	r2, [pc, #280]	; (8003ea0 <RCM_RegisterRegConv+0x164>)
 8003d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d103      	bne.n	8003d9c <RCM_RegisterRegConv+0x60>
          {
           handle =i; /* Reuse the same handle */
 8003d94:	7bbb      	ldrb	r3, [r7, #14]
 8003d96:	73fb      	strb	r3, [r7, #15]
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8003d98:	2304      	movs	r3, #4
 8003d9a:	73bb      	strb	r3, [r7, #14]
          }
      }
      i++;
 8003d9c:	7bbb      	ldrb	r3, [r7, #14]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 8003da2:	7bbb      	ldrb	r3, [r7, #14]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d9d2      	bls.n	8003d4e <RCM_RegisterRegConv+0x12>
    }
    if (handle < RCM_MAX_CONV )
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d872      	bhi.n	8003e94 <RCM_RegisterRegConv+0x158>
    {
      RCM_handle_array [handle] = regConv;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	493b      	ldr	r1, [pc, #236]	; (8003ea0 <RCM_RegisterRegConv+0x164>)
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	4a3a      	ldr	r2, [pc, #232]	; (8003ea4 <RCM_RegisterRegConv+0x168>)
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff09 	bl	8003bde <LL_ADC_IsEnabled>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d127      	bne.n	8003e22 <RCM_RegisterRegConv+0xe6>
      {
       LL_ADC_DisableIT_EOC(regConv->regADC);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ff8f 	bl	8003cfa <LL_ADC_DisableIT_EOC>
       LL_ADC_ClearFlag_EOC(regConv->regADC);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff70 	bl	8003cc6 <LL_ADC_ClearFlag_EOC>
       LL_ADC_DisableIT_JEOC(regConv->regADC);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff ff95 	bl	8003d1a <LL_ADC_DisableIT_JEOC>
       LL_ADC_ClearFlag_JEOC(regConv->regADC);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff73 	bl	8003ce0 <LL_ADC_ClearFlag_JEOC>

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	217f      	movs	r1, #127	; 0x7f
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff feff 	bl	8003c04 <LL_ADC_StartCalibration>
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 8003e06:	bf00      	nop
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff12 	bl	8003c36 <LL_ADC_IsCalibrationOnGoing>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f7      	bne.n	8003e08 <RCM_RegisterRegConv+0xcc>
        { }
        LL_ADC_Enable( regConv->regADC );
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff feca 	bl	8003bb6 <LL_ADC_Enable>
      }
      else
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff fe33 	bl	8003a94 <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	791b      	ldrb	r3, [r3, #4]
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d812      	bhi.n	8003e60 <RCM_RegisterRegConv+0x124>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	791b      	ldrb	r3, [r3, #4]
 8003e3e:	069b      	lsls	r3, r3, #26
 8003e40:	461a      	mov	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	791b      	ldrb	r3, [r3, #4]
 8003e46:	4619      	mov	r1, r3
 8003e48:	2302      	movs	r3, #2
 8003e4a:	408b      	lsls	r3, r1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	791b      	ldrb	r3, [r3, #4]
 8003e52:	4619      	mov	r1, r3
 8003e54:	460b      	mov	r3, r1
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	440b      	add	r3, r1
 8003e5a:	051b      	lsls	r3, r3, #20
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	e014      	b.n	8003e8a <RCM_RegisterRegConv+0x14e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	069b      	lsls	r3, r3, #26
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	791b      	ldrb	r3, [r3, #4]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	2302      	movs	r3, #2
 8003e70:	408b      	lsls	r3, r1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	791b      	ldrb	r3, [r3, #4]
 8003e78:	4619      	mov	r1, r3
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	440b      	add	r3, r1
 8003e80:	3b1e      	subs	r3, #30
 8003e82:	051b      	lsls	r3, r3, #20
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6892      	ldr	r2, [r2, #8]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	f7ff fe48 	bl	8003b24 <LL_ADC_SetChannelSamplingTime>
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000b18 	.word	0x20000b18
 8003ea4:	20000af4 	.word	0x20000af4

08003ea8 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eba:	6818      	ldr	r0, [r3, #0]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	4a38      	ldr	r2, [pc, #224]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003ec6:	2b09      	cmp	r3, #9
 8003ec8:	d81c      	bhi.n	8003f04 <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003eca:	79fb      	ldrb	r3, [r7, #7]
 8003ecc:	4a34      	ldr	r2, [pc, #208]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	791b      	ldrb	r3, [r3, #4]
 8003ed4:	069b      	lsls	r3, r3, #26
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee0:	791b      	ldrb	r3, [r3, #4]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	4093      	lsls	r3, r2
 8003ee8:	ea41 0203 	orr.w	r2, r1, r3
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	492c      	ldr	r1, [pc, #176]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003ef0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef4:	791b      	ldrb	r3, [r3, #4]
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	460b      	mov	r3, r1
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	440b      	add	r3, r1
 8003efe:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003f00:	4313      	orrs	r3, r2
 8003f02:	e01e      	b.n	8003f42 <RCM_ExecRegularConv+0x9a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0c:	791b      	ldrb	r3, [r3, #4]
 8003f0e:	069b      	lsls	r3, r3, #26
 8003f10:	4619      	mov	r1, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4a22      	ldr	r2, [pc, #136]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1a:	791b      	ldrb	r3, [r3, #4]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2302      	movs	r3, #2
 8003f20:	4093      	lsls	r3, r2
 8003f22:	ea41 0203 	orr.w	r2, r1, r3
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	491d      	ldr	r1, [pc, #116]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f2e:	791b      	ldrb	r3, [r3, #4]
 8003f30:	4619      	mov	r1, r3
 8003f32:	460b      	mov	r3, r1
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	440b      	add	r3, r1
 8003f38:	3b1e      	subs	r3, #30
 8003f3a:	051b      	lsls	r3, r3, #20
 8003f3c:	4313      	orrs	r3, r2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003f3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f42:	461a      	mov	r2, r3
 8003f44:	2106      	movs	r1, #6
 8003f46:	f7ff fdb8 	bl	8003aba <LL_ADC_REG_SetSequencerRanks>

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003f4a:	79fb      	ldrb	r3, [r7, #7]
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fe96 	bl	8003c86 <LL_ADC_REG_ReadConversionData12>

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	4a10      	ldr	r2, [pc, #64]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff fe7a 	bl	8003c5e <LL_ADC_REG_StartConversion>
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8003f6a:	bf00      	nop
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fe92 	bl	8003ca0 <LL_ADC_IsActiveFlag_EOC>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f4      	beq.n	8003f6c <RCM_ExecRegularConv+0xc4>
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	4a06      	ldr	r2, [pc, #24]	; (8003fa0 <RCM_ExecRegularConv+0xf8>)
 8003f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fe7a 	bl	8003c86 <LL_ADC_REG_ReadConversionData12>
 8003f92:	4603      	mov	r3, r0
 8003f94:	81fb      	strh	r3, [r7, #14]
return retVal;
 8003f96:	89fb      	ldrh	r3, [r7, #14]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000b18 	.word	0x20000b18

08003fa4 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003fa4:	b598      	push	{r3, r4, r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003fa8:	4b17      	ldr	r3, [pc, #92]	; (8004008 <RCM_ExecUserConv+0x64>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d128      	bne.n	8004002 <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <RCM_ExecUserConv+0x68>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff77 	bl	8003ea8 <RCM_ExecRegularConv>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <RCM_ExecUserConv+0x6c>)
 8003fc0:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <RCM_ExecUserConv+0x64>)
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <RCM_ExecUserConv+0x68>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <RCM_ExecUserConv+0x70>)
 8003fd0:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d014      	beq.n	8004002 <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <RCM_ExecUserConv+0x64>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <RCM_ExecUserConv+0x68>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <RCM_ExecUserConv+0x70>)
 8003fe6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <RCM_ExecUserConv+0x68>)
 8003fec:	7818      	ldrb	r0, [r3, #0]
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <RCM_ExecUserConv+0x6c>)
 8003ff0:	8819      	ldrh	r1, [r3, #0]
 8003ff2:	4b06      	ldr	r3, [pc, #24]	; (800400c <RCM_ExecUserConv+0x68>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	4a07      	ldr	r2, [pc, #28]	; (8004014 <RCM_ExecUserConv+0x70>)
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	461a      	mov	r2, r3
 8004000:	47a0      	blx	r4
    }
  }
}
 8004002:	bf00      	nop
 8004004:	bd98      	pop	{r3, r4, r7, pc}
 8004006:	bf00      	nop
 8004008:	20000b14 	.word	0x20000b14
 800400c:	20000af0 	.word	0x20000af0
 8004010:	20000b28 	.word	0x20000b28
 8004014:	20000af4 	.word	0x20000af4

08004018 <LL_ADC_ClearFlag_JEOS>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_TIM_ClearFlag_UPDATE>:
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f06f 0201 	mvn.w	r2, #1
 8004040:	611a      	str	r2, [r3, #16]
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_TIM_ClearFlag_BRK>:
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800405c:	611a      	str	r2, [r3, #16]
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_TIM_IsActiveFlag_BRK>:
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d101      	bne.n	8004082 <LL_TIM_IsActiveFlag_BRK+0x18>
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <LL_TIM_IsActiveFlag_BRK+0x1a>
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_TIM_ClearFlag_BRK2>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800409e:	611a      	str	r2, [r3, #16]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <LL_TIM_IsActiveFlag_BRK2>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c0:	d101      	bne.n	80040c6 <LL_TIM_IsActiveFlag_BRK2+0x1a>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d101      	bne.n	80040ec <LL_USART_IsActiveFlag_ORE+0x18>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <LL_USART_IsActiveFlag_ORE+0x1a>
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	2b20      	cmp	r3, #32
 800410c:	d101      	bne.n	8004112 <LL_USART_IsActiveFlag_RXNE+0x18>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b80      	cmp	r3, #128	; 0x80
 8004132:	d101      	bne.n	8004138 <LL_USART_IsActiveFlag_TXE+0x18>
 8004134:	2301      	movs	r3, #1
 8004136:	e000      	b.n	800413a <LL_USART_IsActiveFlag_TXE+0x1a>
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2208      	movs	r2, #8
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800416c:	b29b      	uxth	r3, r3
 800416e:	b2db      	uxtb	r3, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );
 8004180:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004184:	f7ff ff48 	bl	8004018 <LL_ADC_ClearFlag_JEOS>

  // Highfrequency task
  TSK_HighFrequencyTask();
 8004188:	f7fe fc52 	bl	8002a30 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}

08004190 <TIM1_UP_TIM16_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
 8004194:	4803      	ldr	r0, [pc, #12]	; (80041a4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004196:	f7ff ff4c 	bl	8004032 <LL_TIM_ClearFlag_UPDATE>
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800419a:	4803      	ldr	r0, [pc, #12]	; (80041a8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800419c:	f009 f9a7 	bl	800d4ee <R3_1_TIMx_UP_IRQHandler>

 /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	20000250 	.word	0x20000250

080041ac <TIM1_BRK_TIM15_IRQHandler>:

void TIMx_BRK_M1_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
 80041b0:	480d      	ldr	r0, [pc, #52]	; (80041e8 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041b2:	f7ff ff5a 	bl	800406a <LL_TIM_IsActiveFlag_BRK>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <TIM1_BRK_TIM15_IRQHandler+0x1c>
  {
    LL_TIM_ClearFlag_BRK(TIM1);
 80041bc:	480a      	ldr	r0, [pc, #40]	; (80041e8 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041be:	f7ff ff46 	bl	800404e <LL_TIM_ClearFlag_BRK>
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 80041c2:	480a      	ldr	r0, [pc, #40]	; (80041ec <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80041c4:	f009 f9f9 	bl	800d5ba <R3_1_BRK_IRQHandler>
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
 80041c8:	4807      	ldr	r0, [pc, #28]	; (80041e8 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041ca:	f7ff ff6f 	bl	80040ac <LL_TIM_IsActiveFlag_BRK2>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d005      	beq.n	80041e0 <TIM1_BRK_TIM15_IRQHandler+0x34>
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
 80041d4:	4804      	ldr	r0, [pc, #16]	; (80041e8 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041d6:	f7ff ff5b 	bl	8004090 <LL_TIM_ClearFlag_BRK2>
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);
 80041da:	4804      	ldr	r0, [pc, #16]	; (80041ec <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80041dc:	f009 f9b0 	bl	800d540 <R3_1_BRK2_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 80041e0:	f7fe f8f6 	bl	80023d0 <MC_Scheduler>

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	20000250 	.word	0x20000250

080041f0 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <USART1_IRQHandler+0x94>)
 80041f8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff7c 	bl	80040fa <LL_USART_IsActiveFlag_RXNE>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d018      	beq.n	800423a <USART1_IRQHandler+0x4a>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8004208:	4b1e      	ldr	r3, [pc, #120]	; (8004284 <USART1_IRQHandler+0x94>)
 800420a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ffa6 	bl	8004160 <LL_USART_ReceiveData8>
 8004214:	4603      	mov	r3, r0
 8004216:	b29b      	uxth	r3, r3
 8004218:	4619      	mov	r1, r3
 800421a:	481a      	ldr	r0, [pc, #104]	; (8004284 <USART1_IRQHandler+0x94>)
 800421c:	f00a fc0a 	bl	800ea34 <UFCP_RX_IRQ_Handler>
 8004220:	4603      	mov	r3, r0
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	80fb      	strh	r3, [r7, #6]
    if (retVal == 1)
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <USART1_IRQHandler+0x40>
    {
      UI_SerialCommunicationTimeOutStart();
 800422c:	f000 fc12 	bl	8004a54 <UI_SerialCommunicationTimeOutStart>
    }
    if (retVal == 2)
 8004230:	88fb      	ldrh	r3, [r7, #6]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d101      	bne.n	800423a <USART1_IRQHandler+0x4a>
    {
      UI_SerialCommunicationTimeOutStop();
 8004236:	f000 fc01 	bl	8004a3c <UI_SerialCommunicationTimeOutStop>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <USART1_IRQHandler+0x94>)
 800423c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff6d 	bl	8004120 <LL_USART_IsActiveFlag_TXE>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <USART1_IRQHandler+0x62>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 800424c:	480d      	ldr	r0, [pc, #52]	; (8004284 <USART1_IRQHandler+0x94>)
 800424e:	f00a fc95 	bl	800eb7c <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <USART1_IRQHandler+0x94>)
 8004254:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff ff3b 	bl	80040d4 <LL_USART_IsActiveFlag_ORE>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <USART1_IRQHandler+0x8a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8004264:	4807      	ldr	r0, [pc, #28]	; (8004284 <USART1_IRQHandler+0x94>)
 8004266:	f00a fce7 	bl	800ec38 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <USART1_IRQHandler+0x94>)
 800426c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff68 	bl	8004146 <LL_USART_ClearFlag_ORE>
    UI_SerialCommunicationTimeOutStop();
 8004276:	f000 fbe1 	bl	8004a3c <UI_SerialCommunicationTimeOutStop>
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */

}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000558 	.word	0x20000558

08004288 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800428e:	f7fe fd85 	bl	8002d9c <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HardFault_Handler+0x90>)
 8004294:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff ff1b 	bl	80040d4 <LL_USART_IsActiveFlag_ORE>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HardFault_Handler+0x32>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80042a4:	481c      	ldr	r0, [pc, #112]	; (8004318 <HardFault_Handler+0x90>)
 80042a6:	f00a fcc7 	bl	800ec38 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80042aa:	4b1b      	ldr	r3, [pc, #108]	; (8004318 <HardFault_Handler+0x90>)
 80042ac:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff ff48 	bl	8004146 <LL_USART_ClearFlag_ORE>
        UI_SerialCommunicationTimeOutStop();
 80042b6:	f000 fbc1 	bl	8004a3c <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <HardFault_Handler+0x90>)
 80042bc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff2d 	bl	8004120 <LL_USART_IsActiveFlag_TXE>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <HardFault_Handler+0x4a>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 80042cc:	4812      	ldr	r0, [pc, #72]	; (8004318 <HardFault_Handler+0x90>)
 80042ce:	f00a fc55 	bl	800eb7c <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HardFault_Handler+0x90>)
 80042d4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff0e 	bl	80040fa <LL_USART_IsActiveFlag_RXNE>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0d6      	beq.n	8004292 <HardFault_Handler+0xa>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <HardFault_Handler+0x90>)
 80042e6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff38 	bl	8004160 <LL_USART_ReceiveData8>
 80042f0:	4603      	mov	r3, r0
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4619      	mov	r1, r3
 80042f6:	4808      	ldr	r0, [pc, #32]	; (8004318 <HardFault_Handler+0x90>)
 80042f8:	f00a fb9c 	bl	800ea34 <UFCP_RX_IRQ_Handler>
 80042fc:	4603      	mov	r3, r0
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	80fb      	strh	r3, [r7, #6]
        if (retVal == 1)
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HardFault_Handler+0x84>
        {
          UI_SerialCommunicationTimeOutStart();
 8004308:	f000 fba4 	bl	8004a54 <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d1bf      	bne.n	8004292 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8004312:	f000 fb93 	bl	8004a3c <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004316:	e7bc      	b.n	8004292 <HardFault_Handler+0xa>
 8004318:	20000558 	.word	0x20000558

0800431c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <SysTick_Handler+0x30>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d106      	bne.n	8004336 <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 8004328:	f001 fd36 	bl	8005d98 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800432c:	f003 f9a9 	bl	8007682 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <SysTick_Handler+0x30>)
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <SysTick_Handler+0x30>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b03      	ldr	r3, [pc, #12]	; (800434c <SysTick_Handler+0x30>)
 8004340:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8004342:	f7fe f835 	bl	80023b0 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200006d4 	.word	0x200006d4

08004350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004356:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_MspInit+0x44>)
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <HAL_MspInit+0x44>)
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	6193      	str	r3, [r2, #24]
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_MspInit+0x44>)
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_MspInit+0x44>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4a08      	ldr	r2, [pc, #32]	; (8004394 <HAL_MspInit+0x44>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	61d3      	str	r3, [r2, #28]
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_MspInit+0x44>)
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004386:	2004      	movs	r0, #4
 8004388:	f003 f93a 	bl	8007600 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000

08004398 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a0:	f107 031c 	add.w	r3, r7, #28
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b8:	d125      	bne.n	8004406 <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80043ba:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4a29      	ldr	r2, [pc, #164]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 80043c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c4:	6153      	str	r3, [r2, #20]
 80043c6:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	61bb      	str	r3, [r7, #24]
 80043d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 80043d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043dc:	6153      	str	r3, [r2, #20]
 80043de:	4b21      	ldr	r3, [pc, #132]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 80043ea:	2307      	movs	r3, #7
 80043ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043ee:	2303      	movs	r3, #3
 80043f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f6:	f107 031c 	add.w	r3, r7, #28
 80043fa:	4619      	mov	r1, r3
 80043fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004400:	f003 f9bc 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004404:	e029      	b.n	800445a <HAL_ADC_MspInit+0xc2>
  else if(hadc->Instance==ADC3)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a17      	ldr	r2, [pc, #92]	; (8004468 <HAL_ADC_MspInit+0xd0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d124      	bne.n	800445a <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 8004416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800441a:	6153      	str	r3, [r2, #20]
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004428:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 800442e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004432:	6153      	str	r3, [r2, #20]
 8004434:	4b0b      	ldr	r3, [pc, #44]	; (8004464 <HAL_ADC_MspInit+0xcc>)
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8004440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004446:	2303      	movs	r3, #3
 8004448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800444e:	f107 031c 	add.w	r3, r7, #28
 8004452:	4619      	mov	r1, r3
 8004454:	4805      	ldr	r0, [pc, #20]	; (800446c <HAL_ADC_MspInit+0xd4>)
 8004456:	f003 f991 	bl	800777c <HAL_GPIO_Init>
}
 800445a:	bf00      	nop
 800445c:	3730      	adds	r7, #48	; 0x30
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	50000400 	.word	0x50000400
 800446c:	48000400 	.word	0x48000400

08004470 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <HAL_CAN_MspInit+0x7c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d128      	bne.n	80044e4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004492:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <HAL_CAN_MspInit+0x80>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <HAL_CAN_MspInit+0x80>)
 8004498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800449c:	61d3      	str	r3, [r2, #28]
 800449e:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <HAL_CAN_MspInit+0x80>)
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_CAN_MspInit+0x80>)
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4a10      	ldr	r2, [pc, #64]	; (80044f0 <HAL_CAN_MspInit+0x80>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6153      	str	r3, [r2, #20]
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_CAN_MspInit+0x80>)
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c8:	2302      	movs	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044d0:	2303      	movs	r3, #3
 80044d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80044d4:	2309      	movs	r3, #9
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d8:	f107 0314 	add.w	r3, r7, #20
 80044dc:	4619      	mov	r1, r3
 80044de:	4805      	ldr	r0, [pc, #20]	; (80044f4 <HAL_CAN_MspInit+0x84>)
 80044e0:	f003 f94c 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80044e4:	bf00      	nop
 80044e6:	3728      	adds	r7, #40	; 0x28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40006400 	.word	0x40006400
 80044f0:	40021000 	.word	0x40021000
 80044f4:	48000400 	.word	0x48000400

080044f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	60da      	str	r2, [r3, #12]
 800450e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2e      	ldr	r2, [pc, #184]	; (80045d0 <HAL_COMP_MspInit+0xd8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d119      	bne.n	800454e <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	4a2d      	ldr	r2, [pc, #180]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	6153      	str	r3, [r2, #20]
 8004526:	4b2b      	ldr	r3, [pc, #172]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004536:	2303      	movs	r3, #3
 8004538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453a:	2300      	movs	r3, #0
 800453c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800453e:	f107 0314 	add.w	r3, r7, #20
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004548:	f003 f918 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 800454c:	e03b      	b.n	80045c6 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP4)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <HAL_COMP_MspInit+0xe0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d118      	bne.n	800458a <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 800455e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004562:	6153      	str	r3, [r2, #20]
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004570:	2301      	movs	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004574:	2303      	movs	r3, #3
 8004576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	4619      	mov	r1, r3
 8004582:	4816      	ldr	r0, [pc, #88]	; (80045dc <HAL_COMP_MspInit+0xe4>)
 8004584:	f003 f8fa 	bl	800777c <HAL_GPIO_Init>
}
 8004588:	e01d      	b.n	80045c6 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP6)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <HAL_COMP_MspInit+0xe8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d118      	bne.n	80045c6 <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004594:	4b0f      	ldr	r3, [pc, #60]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	4a0e      	ldr	r2, [pc, #56]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 800459a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459e:	6153      	str	r3, [r2, #20]
 80045a0:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <HAL_COMP_MspInit+0xdc>)
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80045ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045b2:	2303      	movs	r3, #3
 80045b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80045ba:	f107 0314 	add.w	r3, r7, #20
 80045be:	4619      	mov	r1, r3
 80045c0:	4806      	ldr	r0, [pc, #24]	; (80045dc <HAL_COMP_MspInit+0xe4>)
 80045c2:	f003 f8db 	bl	800777c <HAL_GPIO_Init>
}
 80045c6:	bf00      	nop
 80045c8:	3728      	adds	r7, #40	; 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40010020 	.word	0x40010020
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40010028 	.word	0x40010028
 80045dc:	48000400 	.word	0x48000400
 80045e0:	40010030 	.word	0x40010030

080045e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <HAL_DAC_MspInit+0x74>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d124      	bne.n	8004650 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <HAL_DAC_MspInit+0x78>)
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4a14      	ldr	r2, [pc, #80]	; (800465c <HAL_DAC_MspInit+0x78>)
 800460c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004610:	61d3      	str	r3, [r2, #28]
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <HAL_DAC_MspInit+0x78>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_DAC_MspInit+0x78>)
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	4a0e      	ldr	r2, [pc, #56]	; (800465c <HAL_DAC_MspInit+0x78>)
 8004624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004628:	6153      	str	r3, [r2, #20]
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_DAC_MspInit+0x78>)
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004636:	2310      	movs	r3, #16
 8004638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463a:	2303      	movs	r3, #3
 800463c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800464c:	f003 f896 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004650:	bf00      	nop
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40007400 	.word	0x40007400
 800465c:	40021000 	.word	0x40021000

08004660 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_SPI_MspInit+0x7c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d127      	bne.n	80046d2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_SPI_MspInit+0x80>)
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <HAL_SPI_MspInit+0x80>)
 8004688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800468c:	6193      	str	r3, [r2, #24]
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_SPI_MspInit+0x80>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469a:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <HAL_SPI_MspInit+0x80>)
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <HAL_SPI_MspInit+0x80>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a4:	6153      	str	r3, [r2, #20]
 80046a6:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <HAL_SPI_MspInit+0x80>)
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80046b2:	2338      	movs	r3, #56	; 0x38
 80046b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046be:	2303      	movs	r3, #3
 80046c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046c2:	2305      	movs	r3, #5
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4619      	mov	r1, r3
 80046cc:	4805      	ldr	r0, [pc, #20]	; (80046e4 <HAL_SPI_MspInit+0x84>)
 80046ce:	f003 f855 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80046d2:	bf00      	nop
 80046d4:	3728      	adds	r7, #40	; 0x28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40013000 	.word	0x40013000
 80046e0:	40021000 	.word	0x40021000
 80046e4:	48000400 	.word	0x48000400

080046e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08a      	sub	sp, #40	; 0x28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a20      	ldr	r2, [pc, #128]	; (8004788 <HAL_TIM_Base_MspInit+0xa0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10c      	bne.n	8004724 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800470a:	4b20      	ldr	r3, [pc, #128]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	4a1f      	ldr	r2, [pc, #124]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 8004710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004714:	6193      	str	r3, [r2, #24]
 8004716:	4b1d      	ldr	r3, [pc, #116]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004722:	e02d      	b.n	8004780 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d128      	bne.n	8004780 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800472e:	4b17      	ldr	r3, [pc, #92]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	61d3      	str	r3, [r2, #28]
 800473a:	4b14      	ldr	r3, [pc, #80]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004746:	4b11      	ldr	r3, [pc, #68]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 800474c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004750:	6153      	str	r3, [r2, #20]
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <HAL_TIM_Base_MspInit+0xa4>)
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_PWM_INPUT_Pin;
 800475e:	2320      	movs	r3, #32
 8004760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004762:	2302      	movs	r3, #2
 8004764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004766:	2302      	movs	r3, #2
 8004768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800476a:	2303      	movs	r3, #3
 800476c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800476e:	2301      	movs	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	4619      	mov	r1, r3
 8004778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800477c:	f002 fffe 	bl	800777c <HAL_GPIO_Init>
}
 8004780:	bf00      	nop
 8004782:	3728      	adds	r7, #40	; 0x28
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40012c00 	.word	0x40012c00
 800478c:	40021000 	.word	0x40021000

08004790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	609a      	str	r2, [r3, #8]
 80047a4:	60da      	str	r2, [r3, #12]
 80047a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a32      	ldr	r2, [pc, #200]	; (8004878 <HAL_TIM_MspPostInit+0xe8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d15d      	bne.n	800486e <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b2:	4b32      	ldr	r3, [pc, #200]	; (800487c <HAL_TIM_MspPostInit+0xec>)
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	4a31      	ldr	r2, [pc, #196]	; (800487c <HAL_TIM_MspPostInit+0xec>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047bc:	6153      	str	r3, [r2, #20]
 80047be:	4b2f      	ldr	r3, [pc, #188]	; (800487c <HAL_TIM_MspPostInit+0xec>)
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	4b2c      	ldr	r3, [pc, #176]	; (800487c <HAL_TIM_MspPostInit+0xec>)
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4a2b      	ldr	r2, [pc, #172]	; (800487c <HAL_TIM_MspPostInit+0xec>)
 80047d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d4:	6153      	str	r3, [r2, #20]
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_TIM_MspPostInit+0xec>)
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 80047e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e8:	2302      	movs	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ec:	2301      	movs	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047f0:	2303      	movs	r3, #3
 80047f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80047f4:	2306      	movs	r3, #6
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	4619      	mov	r1, r3
 80047fe:	4820      	ldr	r0, [pc, #128]	; (8004880 <HAL_TIM_MspPostInit+0xf0>)
 8004800:	f002 ffbc 	bl	800777c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004804:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480a:	2302      	movs	r3, #2
 800480c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800480e:	2301      	movs	r3, #1
 8004810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004812:	2303      	movs	r3, #3
 8004814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004816:	2304      	movs	r3, #4
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800481a:	f107 0314 	add.w	r3, r7, #20
 800481e:	4619      	mov	r1, r3
 8004820:	4817      	ldr	r0, [pc, #92]	; (8004880 <HAL_TIM_MspPostInit+0xf0>)
 8004822:	f002 ffab 	bl	800777c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004826:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800482a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482c:	2302      	movs	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004830:	2302      	movs	r3, #2
 8004832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004834:	2303      	movs	r3, #3
 8004836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004838:	2306      	movs	r3, #6
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4619      	mov	r1, r3
 8004842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004846:	f002 ff99 	bl	800777c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800484a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800484e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004850:	2302      	movs	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004854:	2301      	movs	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004858:	2303      	movs	r3, #3
 800485a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800485c:	2306      	movs	r3, #6
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004860:	f107 0314 	add.w	r3, r7, #20
 8004864:	4619      	mov	r1, r3
 8004866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800486a:	f002 ff87 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800486e:	bf00      	nop
 8004870:	3728      	adds	r7, #40	; 0x28
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40021000 	.word	0x40021000
 8004880:	48000400 	.word	0x48000400

08004884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b08a      	sub	sp, #40	; 0x28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488c:	f107 0314 	add.w	r3, r7, #20
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_UART_MspInit+0x7c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d127      	bne.n	80048f6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048a6:	4b17      	ldr	r3, [pc, #92]	; (8004904 <HAL_UART_MspInit+0x80>)
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	4a16      	ldr	r2, [pc, #88]	; (8004904 <HAL_UART_MspInit+0x80>)
 80048ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b0:	6193      	str	r3, [r2, #24]
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_UART_MspInit+0x80>)
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <HAL_UART_MspInit+0x80>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <HAL_UART_MspInit+0x80>)
 80048c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c8:	6153      	str	r3, [r2, #20]
 80048ca:	4b0e      	ldr	r3, [pc, #56]	; (8004904 <HAL_UART_MspInit+0x80>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80048d6:	23c0      	movs	r3, #192	; 0xc0
 80048d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048da:	2302      	movs	r3, #2
 80048dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e2:	2300      	movs	r3, #0
 80048e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048e6:	2307      	movs	r3, #7
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ea:	f107 0314 	add.w	r3, r7, #20
 80048ee:	4619      	mov	r1, r3
 80048f0:	4805      	ldr	r0, [pc, #20]	; (8004908 <HAL_UART_MspInit+0x84>)
 80048f2:	f002 ff43 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048f6:	bf00      	nop
 80048f8:	3728      	adds	r7, #40	; 0x28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40013800 	.word	0x40013800
 8004904:	40021000 	.word	0x40021000
 8004908:	48000400 	.word	0x48000400

0800490c <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 800490c:	b5b0      	push	{r4, r5, r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	460b      	mov	r3, r1
 800491a:	72fb      	strb	r3, [r7, #11]

    pMCP = &MCP_UI_Params;
 800491c:	4b14      	ldr	r3, [pc, #80]	; (8004970 <UI_TaskInit+0x64>)
 800491e:	4a15      	ldr	r2, [pc, #84]	; (8004974 <UI_TaskInit+0x68>)
 8004920:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 8004922:	4b13      	ldr	r3, [pc, #76]	; (8004970 <UI_TaskInit+0x64>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a14      	ldr	r2, [pc, #80]	; (8004978 <UI_TaskInit+0x6c>)
 8004928:	461c      	mov	r4, r3
 800492a:	4615      	mov	r5, r2
 800492c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004930:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004934:	e884 0003 	stmia.w	r4, {r0, r1}

    UFCP_Init( & pUSART );
 8004938:	4810      	ldr	r0, [pc, #64]	; (800497c <UI_TaskInit+0x70>)
 800493a:	f00a f86e 	bl	800ea1a <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <UI_TaskInit+0x64>)
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	9301      	str	r3, [sp, #4]
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <UI_TaskInit+0x74>)
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <UI_TaskInit+0x78>)
 800494c:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <UI_TaskInit+0x7c>)
 800494e:	490b      	ldr	r1, [pc, #44]	; (800497c <UI_TaskInit+0x70>)
 8004950:	f7fe fa86 	bl	8002e60 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <UI_TaskInit+0x64>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	7af9      	ldrb	r1, [r7, #11]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	f000 f882 	bl	8004a6c <UI_Init>

}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bdb0      	pop	{r4, r5, r7, pc}
 8004970:	20000728 	.word	0x20000728
 8004974:	20000b2c 	.word	0x20000b2c
 8004978:	20000700 	.word	0x20000700
 800497c:	20000558 	.word	0x20000558
 8004980:	0800ed39 	.word	0x0800ed39
 8004984:	0800ec5f 	.word	0x0800ec5f
 8004988:	0800eca5 	.word	0x0800eca5

0800498c <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  if(bUITaskCounter > 0u)
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <UI_Scheduler+0x58>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d006      	beq.n	80049a8 <UI_Scheduler+0x1c>
  {
    bUITaskCounter--;
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <UI_Scheduler+0x58>)
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <UI_Scheduler+0x58>)
 80049a6:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <UI_Scheduler+0x5c>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d906      	bls.n	80049c0 <UI_Scheduler+0x34>
  {
    bCOMTimeoutCounter--;
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <UI_Scheduler+0x5c>)
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <UI_Scheduler+0x5c>)
 80049be:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <UI_Scheduler+0x60>)
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d906      	bls.n	80049d8 <UI_Scheduler+0x4c>
  {
    bCOMATRTimeCounter--;
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <UI_Scheduler+0x60>)
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <UI_Scheduler+0x60>)
 80049d6:	801a      	strh	r2, [r3, #0]
  }
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000072c 	.word	0x2000072c
 80049e8:	2000072e 	.word	0x2000072e
 80049ec:	200006d6 	.word	0x200006d6

080049f0 <UI_IdleTimeHasElapsed>:
{
  return pMCP;
}

__weak bool UI_IdleTimeHasElapsed(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
  bool retVal = false;
 80049f6:	2300      	movs	r3, #0
 80049f8:	71fb      	strb	r3, [r7, #7]
  if (bUITaskCounter == 0u)
 80049fa:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <UI_IdleTimeHasElapsed+0x28>)
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <UI_IdleTimeHasElapsed+0x18>
  {
    retVal = true;
 8004a04:	2301      	movs	r3, #1
 8004a06:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8004a08:	79fb      	ldrb	r3, [r7, #7]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	2000072c 	.word	0x2000072c

08004a1c <UI_SetIdleTime>:

__weak void UI_SetIdleTime(uint16_t SysTickCount)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	80fb      	strh	r3, [r7, #6]
  bUITaskCounter = SysTickCount;
 8004a26:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <UI_SetIdleTime+0x1c>)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	8013      	strh	r3, [r2, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	2000072c 	.word	0x2000072c

08004a3c <UI_SerialCommunicationTimeOutStop>:
  }
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = 0u;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <UI_SerialCommunicationTimeOutStop+0x14>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	801a      	strh	r2, [r3, #0]
}
 8004a46:	bf00      	nop
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	2000072e 	.word	0x2000072e

08004a54 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <UI_SerialCommunicationTimeOutStart+0x14>)
 8004a5a:	224f      	movs	r2, #79	; 0x4f
 8004a5c:	801a      	strh	r2, [r3, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	2000072e 	.word	0x2000072e

08004a6c <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	7afa      	ldrb	r2, [r7, #11]
 8004a80:	711a      	strb	r2, [r3, #4]
  pHandle->pMCI = pMCI;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]
  pHandle->pMCT = pMCT;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	60da      	str	r2, [r3, #12]
  pHandle->bSelectedDrive = 0u;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	751a      	strb	r2, [r3, #20]
  pHandle->pUICfg = pUICfg;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	611a      	str	r2, [r3, #16]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	460b      	mov	r3, r1
 8004ab0:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	791b      	ldrb	r3, [r3, #4]
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <UI_SelectMC+0x20>
  {
    retVal = false;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]
 8004ac4:	e002      	b.n	8004acc <UI_SelectMC+0x26>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	751a      	strb	r2, [r3, #20]
  }
  return retVal;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7d1b      	ldrb	r3, [r3, #20]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b096      	sub	sp, #88	; 0x58
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	460b      	mov	r3, r1
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	72fb      	strb	r3, [r7, #11]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	7d1b      	ldrb	r3, [r3, #20]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	643b      	str	r3, [r7, #64]	; 0x40
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	7d1b      	ldrb	r3, [r3, #20]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c

  bool retVal = true;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  switch (bRegID)
 8004b28:	7afb      	ldrb	r3, [r7, #11]
 8004b2a:	2b5b      	cmp	r3, #91	; 0x5b
 8004b2c:	f200 821d 	bhi.w	8004f6a <UI_SetReg+0x476>
 8004b30:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UI_SetReg+0x44>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004ca9 	.word	0x08004ca9
 8004b3c:	08004f6b 	.word	0x08004f6b
 8004b40:	08004f6b 	.word	0x08004f6b
 8004b44:	08004d0d 	.word	0x08004d0d
 8004b48:	08004f6b 	.word	0x08004f6b
 8004b4c:	08004cd7 	.word	0x08004cd7
 8004b50:	08004ce9 	.word	0x08004ce9
 8004b54:	08004cfb 	.word	0x08004cfb
 8004b58:	08004d45 	.word	0x08004d45
 8004b5c:	08004d5f 	.word	0x08004d5f
 8004b60:	08004d71 	.word	0x08004d71
 8004b64:	08004d83 	.word	0x08004d83
 8004b68:	08004d95 	.word	0x08004d95
 8004b6c:	08004daf 	.word	0x08004daf
 8004b70:	08004dc1 	.word	0x08004dc1
 8004b74:	08004dd3 	.word	0x08004dd3
 8004b78:	08004de5 	.word	0x08004de5
 8004b7c:	08004e43 	.word	0x08004e43
 8004b80:	08004f6b 	.word	0x08004f6b
 8004b84:	08004f6b 	.word	0x08004f6b
 8004b88:	08004e9f 	.word	0x08004e9f
 8004b8c:	08004efb 	.word	0x08004efb
 8004b90:	08004f6b 	.word	0x08004f6b
 8004b94:	08004f6b 	.word	0x08004f6b
 8004b98:	08004f6b 	.word	0x08004f6b
 8004b9c:	08004f6b 	.word	0x08004f6b
 8004ba0:	08004f6b 	.word	0x08004f6b
 8004ba4:	08004f6b 	.word	0x08004f6b
 8004ba8:	08004f6b 	.word	0x08004f6b
 8004bac:	08004f6b 	.word	0x08004f6b
 8004bb0:	08004f6b 	.word	0x08004f6b
 8004bb4:	08004f6b 	.word	0x08004f6b
 8004bb8:	08004f6b 	.word	0x08004f6b
 8004bbc:	08004f6b 	.word	0x08004f6b
 8004bc0:	08004f6b 	.word	0x08004f6b
 8004bc4:	08004f6b 	.word	0x08004f6b
 8004bc8:	08004f6b 	.word	0x08004f6b
 8004bcc:	08004f6b 	.word	0x08004f6b
 8004bd0:	08004f6b 	.word	0x08004f6b
 8004bd4:	08004f6b 	.word	0x08004f6b
 8004bd8:	08004f6b 	.word	0x08004f6b
 8004bdc:	08004f6b 	.word	0x08004f6b
 8004be0:	08004f6b 	.word	0x08004f6b
 8004be4:	08004f6b 	.word	0x08004f6b
 8004be8:	08004f6b 	.word	0x08004f6b
 8004bec:	08004f6b 	.word	0x08004f6b
 8004bf0:	08004f6b 	.word	0x08004f6b
 8004bf4:	08004f6b 	.word	0x08004f6b
 8004bf8:	08004f6b 	.word	0x08004f6b
 8004bfc:	08004f6b 	.word	0x08004f6b
 8004c00:	08004f6b 	.word	0x08004f6b
 8004c04:	08004f6b 	.word	0x08004f6b
 8004c08:	08004f6b 	.word	0x08004f6b
 8004c0c:	08004f6b 	.word	0x08004f6b
 8004c10:	08004f6b 	.word	0x08004f6b
 8004c14:	08004f6b 	.word	0x08004f6b
 8004c18:	08004f6b 	.word	0x08004f6b
 8004c1c:	08004f6b 	.word	0x08004f6b
 8004c20:	08004f6b 	.word	0x08004f6b
 8004c24:	08004f6b 	.word	0x08004f6b
 8004c28:	08004f6b 	.word	0x08004f6b
 8004c2c:	08004f6b 	.word	0x08004f6b
 8004c30:	08004f6b 	.word	0x08004f6b
 8004c34:	08004f6b 	.word	0x08004f6b
 8004c38:	08004f6b 	.word	0x08004f6b
 8004c3c:	08004f5d 	.word	0x08004f5d
 8004c40:	08004f6b 	.word	0x08004f6b
 8004c44:	08004f6b 	.word	0x08004f6b
 8004c48:	08004f6b 	.word	0x08004f6b
 8004c4c:	08004f6b 	.word	0x08004f6b
 8004c50:	08004f6b 	.word	0x08004f6b
 8004c54:	08004f6b 	.word	0x08004f6b
 8004c58:	08004f6b 	.word	0x08004f6b
 8004c5c:	08004f6b 	.word	0x08004f6b
 8004c60:	08004f6b 	.word	0x08004f6b
 8004c64:	08004f6b 	.word	0x08004f6b
 8004c68:	08004f6b 	.word	0x08004f6b
 8004c6c:	08004f6b 	.word	0x08004f6b
 8004c70:	08004f6b 	.word	0x08004f6b
 8004c74:	08004f6b 	.word	0x08004f6b
 8004c78:	08004f6b 	.word	0x08004f6b
 8004c7c:	08004f6b 	.word	0x08004f6b
 8004c80:	08004f6b 	.word	0x08004f6b
 8004c84:	08004f6b 	.word	0x08004f6b
 8004c88:	08004f6b 	.word	0x08004f6b
 8004c8c:	08004f6b 	.word	0x08004f6b
 8004c90:	08004f6b 	.word	0x08004f6b
 8004c94:	08004f6b 	.word	0x08004f6b
 8004c98:	08004f6b 	.word	0x08004f6b
 8004c9c:	08004f6b 	.word	0x08004f6b
 8004ca0:	08004f6b 	.word	0x08004f6b
 8004ca4:	08004cbd 	.word	0x08004cbd
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	4619      	mov	r1, r3
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff fef9 	bl	8004aa6 <UI_SelectMC>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
    break;
 8004cba:	e163      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4aa6      	ldr	r2, [pc, #664]	; (8004f58 <UI_SetReg+0x464>)
 8004cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8004cc4:	17db      	asrs	r3, r3, #31
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004cd0:	f7fc fe29 	bl	8001926 <MCI_ExecSpeedRamp>
    }
    break;
 8004cd4:	e156      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	b212      	sxth	r2, r2
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f006 fcde 	bl	800b6a2 <PID_SetKP>
    }
    break;
 8004ce6:	e14d      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	b212      	sxth	r2, r2
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f006 fce4 	bl	800b6c0 <PID_SetKI>
    }
    break;
 8004cf8:	e144      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	b212      	sxth	r2, r2
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f006 fd2a 	bl	800b75e <PID_SetKD>
    }
    break;
 8004d0a:	e13b      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d108      	bne.n	8004d26 <UI_SetReg+0x232>
      {
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8004d14:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d16:	f7fd f83a 	bl	8001d8e <MCI_GetTeref>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d22:	f7fc fe1d 	bl	8001960 <MCI_ExecTorqueRamp>
      }
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	f040 8121 	bne.w	8004f72 <UI_SetReg+0x47e>
      {
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8004d30:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d32:	f7fc ff8f 	bl	8001c54 <MCI_GetMecSpeedRefUnit>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d3e:	f7fc fdf2 	bl	8001926 <MCI_ExecSpeedRamp>
      }
    }
    break;
 8004d42:	e116      	b.n	8004f72 <UI_SetReg+0x47e>

  case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004d44:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d46:	f7fc ffda 	bl	8001cfe <MCI_GetIqdref>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      currComp.q = (int16_t)wValue;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	b21b      	sxth	r3, r3
 8004d52:	853b      	strh	r3, [r7, #40]	; 0x28
      MCI_SetCurrentReferences(pMCI,currComp);
 8004d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d58:	f7fc fe1f 	bl	800199a <MCI_SetCurrentReferences>
    }
    break;
 8004d5c:	e112      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_TORQUE_KP:
    {
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8004d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	b212      	sxth	r2, r2
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f006 fc9a 	bl	800b6a2 <PID_SetKP>
    }
    break;
 8004d6e:	e109      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_TORQUE_KI:
    {
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8004d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	b212      	sxth	r2, r2
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f006 fca0 	bl	800b6c0 <PID_SetKI>
    }
    break;
 8004d80:	e100      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_TORQUE_KD:
    {
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	b212      	sxth	r2, r2
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f006 fce6 	bl	800b75e <PID_SetKD>
    }
    break;
 8004d92:	e0f7      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004d94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d96:	f7fc ffb2 	bl	8001cfe <MCI_GetIqdref>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
      currComp.d = (int16_t)wValue;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	84fb      	strh	r3, [r7, #38]	; 0x26
      MCI_SetCurrentReferences(pMCI,currComp);
 8004da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004da6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004da8:	f7fc fdf7 	bl	800199a <MCI_SetCurrentReferences>
    }
    break;
 8004dac:	e0ea      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_FLUX_KP:
    {
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	b212      	sxth	r2, r2
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f006 fc72 	bl	800b6a2 <PID_SetKP>
    }
    break;
 8004dbe:	e0e1      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_FLUX_KI:
    {
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	b212      	sxth	r2, r2
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f006 fc78 	bl	800b6c0 <PID_SetKI>
    }
    break;
 8004dd0:	e0d8      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_FLUX_KD:
    {
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8004dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	b212      	sxth	r2, r2
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f006 fcbe 	bl	800b75e <PID_SetKD>
    }
    break;
 8004de2:	e0cf      	b.n	8004f84 <UI_SetReg+0x490>

  case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	7d1b      	ldrb	r3, [r3, #20]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004df4:	2300      	movs	r3, #0
 8004df6:	653b      	str	r3, [r7, #80]	; 0x50
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	0f1b      	lsrs	r3, r3, #28
 8004dfc:	2b09      	cmp	r3, #9
 8004dfe:	d102      	bne.n	8004e06 <UI_SetReg+0x312>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	0e1b      	lsrs	r3, r3, #24
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	d102      	bne.n	8004e18 <UI_SetReg+0x324>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (pSPD != MC_NULL)
 8004e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80ab 	beq.w	8004f76 <UI_SetReg+0x482>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004e20:	f107 0220 	add.w	r2, r7, #32
 8004e24:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e2c:	f00a fd88 	bl	800f940 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	b21b      	sxth	r3, r3
 8004e34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e3c:	f00a fd88 	bl	800f950 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8004e40:	e099      	b.n	8004f76 <UI_SetReg+0x482>

  case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	7d1b      	ldrb	r3, [r3, #20]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	64fb      	str	r3, [r7, #76]	; 0x4c
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	0f1b      	lsrs	r3, r3, #28
 8004e5a:	2b09      	cmp	r3, #9
 8004e5c:	d102      	bne.n	8004e64 <UI_SetReg+0x370>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	0e1b      	lsrs	r3, r3, #24
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	2b09      	cmp	r3, #9
 8004e6e:	d102      	bne.n	8004e76 <UI_SetReg+0x382>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (pSPD != MC_NULL)
 8004e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d07e      	beq.n	8004f7a <UI_SetReg+0x486>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004e7c:	f107 021c 	add.w	r2, r7, #28
 8004e80:	f107 031e 	add.w	r3, r7, #30
 8004e84:	4619      	mov	r1, r3
 8004e86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004e88:	f00a fd5a 	bl	800f940 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8004e8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	b212      	sxth	r2, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004e98:	f00a fd5a 	bl	800f950 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8004e9c:	e06d      	b.n	8004f7a <UI_SetReg+0x486>

  case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	7d1b      	ldrb	r3, [r3, #20]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	64bb      	str	r3, [r7, #72]	; 0x48
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb4:	0f1b      	lsrs	r3, r3, #28
 8004eb6:	2b09      	cmp	r3, #9
 8004eb8:	d102      	bne.n	8004ec0 <UI_SetReg+0x3cc>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec2:	0e1b      	lsrs	r3, r3, #24
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d102      	bne.n	8004ed2 <UI_SetReg+0x3de>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (pSPD != MC_NULL)
 8004ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d052      	beq.n	8004f7e <UI_SetReg+0x48a>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004ed8:	f107 0218 	add.w	r2, r7, #24
 8004edc:	f107 031a 	add.w	r3, r7, #26
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ee4:	f00a fd38 	bl	800f958 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8004ee8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	b212      	sxth	r2, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ef4:	f00a fd3e 	bl	800f974 <STO_SetPLLGains>
      }
    }
    break;
 8004ef8:	e041      	b.n	8004f7e <UI_SetReg+0x48a>

  case MC_PROTOCOL_REG_PLL_KP:
	{
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	7d1b      	ldrb	r3, [r3, #20]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	63bb      	str	r3, [r7, #56]	; 0x38
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	647b      	str	r3, [r7, #68]	; 0x44
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	0f1b      	lsrs	r3, r3, #28
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	d102      	bne.n	8004f1c <UI_SetReg+0x428>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	0e1b      	lsrs	r3, r3, #24
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	d102      	bne.n	8004f2e <UI_SetReg+0x43a>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (pSPD != MC_NULL)
 8004f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d026      	beq.n	8004f82 <UI_SetReg+0x48e>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004f34:	f107 0214 	add.w	r2, r7, #20
 8004f38:	f107 0316 	add.w	r3, r7, #22
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004f40:	f00a fd0a 	bl	800f958 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	b21b      	sxth	r3, r3
 8004f48:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004f50:	f00a fd10 	bl	800f974 <STO_SetPLLGains>
      }
    }
    break;
 8004f54:	e015      	b.n	8004f82 <UI_SetReg+0x48e>
 8004f56:	bf00      	nop
 8004f58:	2aaaaaab 	.word	0x2aaaaaab

  case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	b21b      	sxth	r3, r3
 8004f60:	4619      	mov	r1, r3
 8004f62:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004f64:	f7fc ff21 	bl	8001daa <MCI_SetIdref>
    }
    break;
 8004f68:	e00c      	b.n	8004f84 <UI_SetReg+0x490>

  default:
    retVal = false;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    break;
 8004f70:	e008      	b.n	8004f84 <UI_SetReg+0x490>
    break;
 8004f72:	bf00      	nop
 8004f74:	e006      	b.n	8004f84 <UI_SetReg+0x490>
    break;
 8004f76:	bf00      	nop
 8004f78:	e004      	b.n	8004f84 <UI_SetReg+0x490>
    break;
 8004f7a:	bf00      	nop
 8004f7c:	e002      	b.n	8004f84 <UI_SetReg+0x490>
    break;
 8004f7e:	bf00      	nop
 8004f80:	e000      	b.n	8004f84 <UI_SetReg+0x490>
    break;
 8004f82:	bf00      	nop
  }

  return retVal;
 8004f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3758      	adds	r7, #88	; 0x58
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b0b6      	sub	sp, #216	; 0xd8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	460b      	mov	r3, r1
 8004f9a:	607a      	str	r2, [r7, #4]
 8004f9c:	72fb      	strb	r3, [r7, #11]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	7d1b      	ldrb	r3, [r3, #20]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	7d1b      	ldrb	r3, [r3, #20]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  int32_t bRetVal = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  if ( success != (bool *) 0 )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <UI_GetReg+0x44>
  {
    *success = true;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 8004fd4:	7afb      	ldrb	r3, [r7, #11]
 8004fd6:	2b81      	cmp	r3, #129	; 0x81
 8004fd8:	f200 8529 	bhi.w	8005a2e <UI_GetReg+0xa9e>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <UI_GetReg+0x54>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	080051ed 	.word	0x080051ed
 8004fe8:	080051fd 	.word	0x080051fd
 8004fec:	08005213 	.word	0x08005213
 8004ff0:	08005315 	.word	0x08005315
 8004ff4:	08005229 	.word	0x08005229
 8004ff8:	08005245 	.word	0x08005245
 8004ffc:	0800525b 	.word	0x0800525b
 8005000:	0800526f 	.word	0x0800526f
 8005004:	080052e9 	.word	0x080052e9
 8005008:	0800538f 	.word	0x0800538f
 800500c:	080053a3 	.word	0x080053a3
 8005010:	080053b7 	.word	0x080053b7
 8005014:	080052ff 	.word	0x080052ff
 8005018:	080053e1 	.word	0x080053e1
 800501c:	080053f5 	.word	0x080053f5
 8005020:	08005409 	.word	0x08005409
 8005024:	0800541d 	.word	0x0800541d
 8005028:	0800547f 	.word	0x0800547f
 800502c:	08005a2f 	.word	0x08005a2f
 8005030:	08005a2f 	.word	0x08005a2f
 8005034:	080055a1 	.word	0x080055a1
 8005038:	08005539 	.word	0x08005539
 800503c:	08005a2f 	.word	0x08005a2f
 8005040:	08005a2f 	.word	0x08005a2f
 8005044:	08005a2f 	.word	0x08005a2f
 8005048:	08005283 	.word	0x08005283
 800504c:	08005297 	.word	0x08005297
 8005050:	080058b1 	.word	0x080058b1
 8005054:	08005a2f 	.word	0x08005a2f
 8005058:	08005a2f 	.word	0x08005a2f
 800505c:	080052ab 	.word	0x080052ab
 8005060:	08005901 	.word	0x08005901
 8005064:	08005917 	.word	0x08005917
 8005068:	08005a2f 	.word	0x08005a2f
 800506c:	0800592d 	.word	0x0800592d
 8005070:	08005953 	.word	0x08005953
 8005074:	08005969 	.word	0x08005969
 8005078:	0800597f 	.word	0x0800597f
 800507c:	08005995 	.word	0x08005995
 8005080:	08005901 	.word	0x08005901
 8005084:	08005917 	.word	0x08005917
 8005088:	080059ab 	.word	0x080059ab
 800508c:	080059c1 	.word	0x080059c1
 8005090:	080059d7 	.word	0x080059d7
 8005094:	080059ed 	.word	0x080059ed
 8005098:	08005a03 	.word	0x08005a03
 800509c:	08005a19 	.word	0x08005a19
 80050a0:	08005a2f 	.word	0x08005a2f
 80050a4:	08005a2f 	.word	0x08005a2f
 80050a8:	080054e1 	.word	0x080054e1
 80050ac:	08005603 	.word	0x08005603
 80050b0:	08005661 	.word	0x08005661
 80050b4:	080056c5 	.word	0x080056c5
 80050b8:	08005729 	.word	0x08005729
 80050bc:	0800578d 	.word	0x0800578d
 80050c0:	08005a2f 	.word	0x08005a2f
 80050c4:	08005a2f 	.word	0x08005a2f
 80050c8:	08005a2f 	.word	0x08005a2f
 80050cc:	08005a2f 	.word	0x08005a2f
 80050d0:	08005a2f 	.word	0x08005a2f
 80050d4:	08005a2f 	.word	0x08005a2f
 80050d8:	08005a2f 	.word	0x08005a2f
 80050dc:	08005a2f 	.word	0x08005a2f
 80050e0:	080058c5 	.word	0x080058c5
 80050e4:	080058e3 	.word	0x080058e3
 80050e8:	080053cb 	.word	0x080053cb
 80050ec:	080057f1 	.word	0x080057f1
 80050f0:	08005851 	.word	0x08005851
 80050f4:	08005a2f 	.word	0x08005a2f
 80050f8:	08005a2f 	.word	0x08005a2f
 80050fc:	08005a2f 	.word	0x08005a2f
 8005100:	08005a2f 	.word	0x08005a2f
 8005104:	08005a2f 	.word	0x08005a2f
 8005108:	08005a2f 	.word	0x08005a2f
 800510c:	08005a2f 	.word	0x08005a2f
 8005110:	08005a2f 	.word	0x08005a2f
 8005114:	08005a2f 	.word	0x08005a2f
 8005118:	08005a2f 	.word	0x08005a2f
 800511c:	08005a2f 	.word	0x08005a2f
 8005120:	08005a2f 	.word	0x08005a2f
 8005124:	08005a2f 	.word	0x08005a2f
 8005128:	08005a2f 	.word	0x08005a2f
 800512c:	08005a2f 	.word	0x08005a2f
 8005130:	08005a2f 	.word	0x08005a2f
 8005134:	08005a2f 	.word	0x08005a2f
 8005138:	08005a2f 	.word	0x08005a2f
 800513c:	08005a2f 	.word	0x08005a2f
 8005140:	08005a2f 	.word	0x08005a2f
 8005144:	08005a2f 	.word	0x08005a2f
 8005148:	08005a2f 	.word	0x08005a2f
 800514c:	08005a2f 	.word	0x08005a2f
 8005150:	08005325 	.word	0x08005325
 8005154:	08005a2f 	.word	0x08005a2f
 8005158:	08005a2f 	.word	0x08005a2f
 800515c:	08005a2f 	.word	0x08005a2f
 8005160:	08005a2f 	.word	0x08005a2f
 8005164:	08005a2f 	.word	0x08005a2f
 8005168:	08005a2f 	.word	0x08005a2f
 800516c:	08005a2f 	.word	0x08005a2f
 8005170:	08005a2f 	.word	0x08005a2f
 8005174:	08005a2f 	.word	0x08005a2f
 8005178:	08005a2f 	.word	0x08005a2f
 800517c:	08005a2f 	.word	0x08005a2f
 8005180:	08005a2f 	.word	0x08005a2f
 8005184:	08005a2f 	.word	0x08005a2f
 8005188:	08005a2f 	.word	0x08005a2f
 800518c:	08005a2f 	.word	0x08005a2f
 8005190:	08005a2f 	.word	0x08005a2f
 8005194:	08005a2f 	.word	0x08005a2f
 8005198:	08005a2f 	.word	0x08005a2f
 800519c:	08005367 	.word	0x08005367
 80051a0:	0800537b 	.word	0x0800537b
 80051a4:	080052c5 	.word	0x080052c5
 80051a8:	08005a2f 	.word	0x08005a2f
 80051ac:	080052cd 	.word	0x080052cd
 80051b0:	080052d7 	.word	0x080052d7
 80051b4:	08005a2f 	.word	0x08005a2f
 80051b8:	08005a2f 	.word	0x08005a2f
 80051bc:	08005a2f 	.word	0x08005a2f
 80051c0:	08005a2f 	.word	0x08005a2f
 80051c4:	08005a2f 	.word	0x08005a2f
 80051c8:	08005a2f 	.word	0x08005a2f
 80051cc:	08005a2f 	.word	0x08005a2f
 80051d0:	08005a2f 	.word	0x08005a2f
 80051d4:	08005a2f 	.word	0x08005a2f
 80051d8:	08005a2f 	.word	0x08005a2f
 80051dc:	08005a2f 	.word	0x08005a2f
 80051e0:	08005a2f 	.word	0x08005a2f
 80051e4:	08005a2f 	.word	0x08005a2f
 80051e8:	080052e1 	.word	0x080052e1
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff fc74 	bl	8004ada <UI_GetSelectedMC>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80051f8:	f000 bc31 	b.w	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_FLAGS:
    {
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80051fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	4618      	mov	r0, r3
 8005204:	f009 fba5 	bl	800e952 <STM_GetFaultState>
 8005208:	4603      	mov	r3, r0
 800520a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 800520e:	f000 bc26 	b.w	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_STATUS:
    {
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8005212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	4618      	mov	r0, r3
 800521a:	f009 fb75 	bl	800e908 <STM_GetState>
 800521e:	4603      	mov	r3, r0
 8005220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 8005224:	f000 bc1b 	b.w	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8005228:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800522c:	f7fc fd12 	bl	8001c54 <MCI_GetMecSpeedRefUnit>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005240:	f000 bc0d 	b.w	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8005244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f006 fa47 	bl	800b6de <PID_GetKP>
 8005250:	4603      	mov	r3, r0
 8005252:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005256:	f000 bc02 	b.w	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800525a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4618      	mov	r0, r3
 8005262:	f006 fa49 	bl	800b6f8 <PID_GetKI>
 8005266:	4603      	mov	r3, r0
 8005268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800526c:	e3f7      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800526e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f006 fa81 	bl	800b77c <PID_GetKD>
 800527a:	4603      	mov	r3, r0
 800527c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005280:	e3ed      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8005282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	4618      	mov	r0, r3
 800528a:	f005 ffb1 	bl	800b1f0 <VBS_GetAvBusVoltage_V>
 800528e:	4603      	mov	r3, r0
 8005290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005294:	e3e3      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8005296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	4618      	mov	r0, r3
 800529e:	f006 f9b0 	bl	800b602 <NTC_GetAvTemp_C>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052a8:	e3d9      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80052aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80052ae:	f7fc fcbf 	bl	8001c30 <MCI_GetAvrgMecSpeedUnit>
 80052b2:	4603      	mov	r3, r0
 80052b4:	461a      	mov	r2, r3
 80052b6:	4613      	mov	r3, r2
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	4413      	add	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052c2:	e3cc      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 80052c4:	4bb5      	ldr	r3, [pc, #724]	; (800559c <UI_GetReg+0x60c>)
 80052c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052ca:	e3c8      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 80052cc:	f242 731d 	movw	r3, #10013	; 0x271d
 80052d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052d4:	e3c3      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 80052d6:	f242 731d 	movw	r3, #10013	; 0x271d
 80052da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052de:	e3be      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052e6:	e3ba      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 80052e8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80052ec:	f7fc fd07 	bl	8001cfe <MCI_GetIqdref>
 80052f0:	4603      	mov	r3, r0
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
      bRetVal = (int32_t)currComp.q;
 80052f4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80052f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052fc:	e3af      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 80052fe:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005302:	f7fc fcfc 	bl	8001cfe <MCI_GetIqdref>
 8005306:	4603      	mov	r3, r0
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
      bRetVal = (int32_t)currComp.d;
 800530a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800530e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005312:	e3a4      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8005314:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005318:	f7fc fc21 	bl	8001b5e <MCI_GetControlMode>
 800531c:	4603      	mov	r3, r0
 800531e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005322:	e39c      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8005324:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005328:	f7fc fc19 	bl	8001b5e <MCI_GetControlMode>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10c      	bne.n	800534c <UI_GetReg+0x3bc>
      {
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8005332:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005336:	f7fc fc59 	bl	8001bec <MCI_GetLastRampFinalSpeed>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
      }
    }
    break;
 800534a:	e388      	b.n	8005a5e <UI_GetReg+0xace>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 800534c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005350:	f7fc fc80 	bl	8001c54 <MCI_GetMecSpeedRefUnit>
 8005354:	4603      	mov	r3, r0
 8005356:	461a      	mov	r2, r3
 8005358:	4613      	mov	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 8005364:	e37b      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_SPEED_KP_DIV:
    {
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8005366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f006 f9de 	bl	800b72e <PID_GetKPDivisor>
 8005372:	4603      	mov	r3, r0
 8005374:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005378:	e371      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_SPEED_KI_DIV:
    {
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 800537a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f006 f9e0 	bl	800b746 <PID_GetKIDivisor>
 8005386:	4603      	mov	r3, r0
 8005388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800538c:	e367      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_TORQUE_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 800538e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	f006 f9a2 	bl	800b6de <PID_GetKP>
 800539a:	4603      	mov	r3, r0
 800539c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053a0:	e35d      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_TORQUE_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80053a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f006 f9a5 	bl	800b6f8 <PID_GetKI>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053b4:	e353      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_TORQUE_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80053b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	f006 f9dd 	bl	800b77c <PID_GetKD>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053c8:	e349      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 80053ca:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80053ce:	f7fc fc96 	bl	8001cfe <MCI_GetIqdref>
 80053d2:	4603      	mov	r3, r0
 80053d4:	623b      	str	r3, [r7, #32]
      bRetVal = (int32_t)currComp.d;
 80053d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80053da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053de:	e33e      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_FLUX_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 80053e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f006 f979 	bl	800b6de <PID_GetKP>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053f2:	e334      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_FLUX_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80053f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f006 f97c 	bl	800b6f8 <PID_GetKI>
 8005400:	4603      	mov	r3, r0
 8005402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005406:	e32a      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_FLUX_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8005408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f006 f9b4 	bl	800b77c <PID_GetKD>
 8005414:	4603      	mov	r3, r0
 8005416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800541a:	e320      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	7d1b      	ldrb	r3, [r3, #20]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	66fb      	str	r3, [r7, #108]	; 0x6c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005434:	0f1b      	lsrs	r3, r3, #28
 8005436:	2b09      	cmp	r3, #9
 8005438:	d104      	bne.n	8005444 <UI_GetReg+0x4b4>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800543a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	0e1b      	lsrs	r3, r3, #24
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2b09      	cmp	r3, #9
 800544e:	d104      	bne.n	800545a <UI_GetReg+0x4ca>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005450:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (pSPD != MC_NULL)
 800545a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d008      	beq.n	8005474 <UI_GetReg+0x4e4>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8005462:	f107 021c 	add.w	r2, r7, #28
 8005466:	f107 031e 	add.w	r3, r7, #30
 800546a:	4619      	mov	r1, r3
 800546c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8005470:	f00a fa66 	bl	800f940 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC1;
 8005474:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800547c:	e2ef      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	7d1b      	ldrb	r3, [r3, #20]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	673b      	str	r3, [r7, #112]	; 0x70
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005496:	0f1b      	lsrs	r3, r3, #28
 8005498:	2b09      	cmp	r3, #9
 800549a:	d104      	bne.n	80054a6 <UI_GetReg+0x516>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800549c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80054a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054a8:	0e1b      	lsrs	r3, r3, #24
 80054aa:	f003 030f 	and.w	r3, r3, #15
 80054ae:	2b09      	cmp	r3, #9
 80054b0:	d104      	bne.n	80054bc <UI_GetReg+0x52c>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80054b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (pSPD != MC_NULL)
 80054bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <UI_GetReg+0x546>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80054c4:	f107 0218 	add.w	r2, r7, #24
 80054c8:	f107 031a 	add.w	r3, r7, #26
 80054cc:	4619      	mov	r1, r3
 80054ce:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80054d2:	f00a fa35 	bl	800f940 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC2;
 80054d6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80054da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80054de:	e2be      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_OBS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	7d1b      	ldrb	r3, [r3, #20]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80054f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054f8:	0f1b      	lsrs	r3, r3, #28
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	d104      	bne.n	8005508 <UI_GetReg+0x578>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80054fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800550a:	0e1b      	lsrs	r3, r3, #24
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	2b09      	cmp	r3, #9
 8005512:	d104      	bne.n	800551e <UI_GetReg+0x58e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (pSPD != MC_NULL)
 800551e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 828a 	beq.w	8005a3c <UI_GetReg+0xaac>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 8005528:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800552c:	f008 fd92 	bl	800e054 <SPD_GetElAngle>
 8005530:	4603      	mov	r3, r0
 8005532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005536:	e281      	b.n	8005a3c <UI_GetReg+0xaac>

    case MC_PROTOCOL_REG_PLL_KP:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	7d1b      	ldrb	r3, [r3, #20]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	67bb      	str	r3, [r7, #120]	; 0x78
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800554e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005550:	0f1b      	lsrs	r3, r3, #28
 8005552:	2b09      	cmp	r3, #9
 8005554:	d104      	bne.n	8005560 <UI_GetReg+0x5d0>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005562:	0e1b      	lsrs	r3, r3, #24
 8005564:	f003 030f 	and.w	r3, r3, #15
 8005568:	2b09      	cmp	r3, #9
 800556a:	d104      	bne.n	8005576 <UI_GetReg+0x5e6>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800556c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (pSPD != MC_NULL)
 8005576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <UI_GetReg+0x600>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800557e:	f107 0214 	add.w	r2, r7, #20
 8005582:	f107 0316 	add.w	r3, r7, #22
 8005586:	4619      	mov	r1, r3
 8005588:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800558c:	f00a f9e4 	bl	800f958 <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hPgain;
 8005590:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005598:	e261      	b.n	8005a5e <UI_GetReg+0xace>
 800559a:	bf00      	nop
 800559c:	34a6847a 	.word	0x34a6847a

    case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	7d1b      	ldrb	r3, [r3, #20]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	677b      	str	r3, [r7, #116]	; 0x74
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80055b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055b8:	0f1b      	lsrs	r3, r3, #28
 80055ba:	2b09      	cmp	r3, #9
 80055bc:	d104      	bne.n	80055c8 <UI_GetReg+0x638>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80055be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80055c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ca:	0e1b      	lsrs	r3, r3, #24
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	2b09      	cmp	r3, #9
 80055d2:	d104      	bne.n	80055de <UI_GetReg+0x64e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80055d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (pSPD != MC_NULL)
 80055de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d008      	beq.n	80055f8 <UI_GetReg+0x668>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80055e6:	f107 0210 	add.w	r2, r7, #16
 80055ea:	f107 0312 	add.w	r3, r7, #18
 80055ee:	4619      	mov	r1, r3
 80055f0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80055f4:	f00a f9b0 	bl	800f958 <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hIgain;
 80055f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005600:	e22d      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_OBS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	7d1b      	ldrb	r3, [r3, #20]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800561a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800561e:	0f1b      	lsrs	r3, r3, #28
 8005620:	2b09      	cmp	r3, #9
 8005622:	d104      	bne.n	800562e <UI_GetReg+0x69e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005624:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800562e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005632:	0e1b      	lsrs	r3, r3, #24
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	2b09      	cmp	r3, #9
 800563a:	d104      	bne.n	8005646 <UI_GetReg+0x6b6>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800563c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (pSPD != MC_NULL)
 8005646:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 81f8 	beq.w	8005a40 <UI_GetReg+0xab0>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 8005650:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8005654:	f008 fd90 	bl	800e178 <SPD_GetS16Speed>
 8005658:	4603      	mov	r3, r0
 800565a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800565e:	e1ef      	b.n	8005a40 <UI_GetReg+0xab0>

    case MC_PROTOCOL_REG_OBS_I_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	7d1b      	ldrb	r3, [r3, #20]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800567c:	0f1b      	lsrs	r3, r3, #28
 800567e:	2b09      	cmp	r3, #9
 8005680:	d104      	bne.n	800568c <UI_GetReg+0x6fc>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800568c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005690:	0e1b      	lsrs	r3, r3, #24
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	2b09      	cmp	r3, #9
 8005698:	d104      	bne.n	80056a4 <UI_GetReg+0x714>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800569a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (pSPD != MC_NULL)
 80056a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 81cb 	beq.w	8005a44 <UI_GetReg+0xab4>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80056ae:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80056b2:	f00a f931 	bl	800f918 <STO_PLL_GetEstimatedCurrent>
 80056b6:	4603      	mov	r3, r0
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ba:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80056be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80056c2:	e1bf      	b.n	8005a44 <UI_GetReg+0xab4>

    case MC_PROTOCOL_REG_OBS_I_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	7d1b      	ldrb	r3, [r3, #20]
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056e0:	0f1b      	lsrs	r3, r3, #28
 80056e2:	2b09      	cmp	r3, #9
 80056e4:	d104      	bne.n	80056f0 <UI_GetReg+0x760>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80056e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f4:	0e1b      	lsrs	r3, r3, #24
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	2b09      	cmp	r3, #9
 80056fc:	d104      	bne.n	8005708 <UI_GetReg+0x778>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80056fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (pSPD != MC_NULL)
 8005708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 819b 	beq.w	8005a48 <UI_GetReg+0xab8>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8005712:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005716:	f00a f8ff 	bl	800f918 <STO_PLL_GetEstimatedCurrent>
 800571a:	4603      	mov	r3, r0
 800571c:	633b      	str	r3, [r7, #48]	; 0x30
 800571e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005726:	e18f      	b.n	8005a48 <UI_GetReg+0xab8>

    case MC_PROTOCOL_REG_OBS_BEMF_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	7d1b      	ldrb	r3, [r3, #20]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005744:	0f1b      	lsrs	r3, r3, #28
 8005746:	2b09      	cmp	r3, #9
 8005748:	d104      	bne.n	8005754 <UI_GetReg+0x7c4>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800574a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005758:	0e1b      	lsrs	r3, r3, #24
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	2b09      	cmp	r3, #9
 8005760:	d104      	bne.n	800576c <UI_GetReg+0x7dc>
      {
        pSPD =  pMCT->pSpeedSensorAux;
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (pSPD != MC_NULL)
 800576c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 816b 	beq.w	8005a4c <UI_GetReg+0xabc>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8005776:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800577a:	f00a f8c1 	bl	800f900 <STO_PLL_GetEstimatedBemf>
 800577e:	4603      	mov	r3, r0
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
 8005782:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800578a:	e15f      	b.n	8005a4c <UI_GetReg+0xabc>

    case MC_PROTOCOL_REG_OBS_BEMF_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	7d1b      	ldrb	r3, [r3, #20]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057a8:	0f1b      	lsrs	r3, r3, #28
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	d104      	bne.n	80057b8 <UI_GetReg+0x828>
      {
       pSPD = pMCT->pSpeedSensorMain;
 80057ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057bc:	0e1b      	lsrs	r3, r3, #24
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	2b09      	cmp	r3, #9
 80057c4:	d104      	bne.n	80057d0 <UI_GetReg+0x840>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80057c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (pSPD != MC_NULL)
 80057d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 813b 	beq.w	8005a50 <UI_GetReg+0xac0>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80057da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80057de:	f00a f88f 	bl	800f900 <STO_PLL_GetEstimatedBemf>
 80057e2:	4603      	mov	r3, r0
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80057ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80057ee:	e12f      	b.n	8005a50 <UI_GetReg+0xac0>

    case MC_PROTOCOL_REG_EST_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691a      	ldr	r2, [r3, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	7d1b      	ldrb	r3, [r3, #20]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005802:	2300      	movs	r3, #0
 8005804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005808:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800580c:	0f1b      	lsrs	r3, r3, #28
 800580e:	2b09      	cmp	r3, #9
 8005810:	d104      	bne.n	800581c <UI_GetReg+0x88c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800581c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005820:	0e1b      	lsrs	r3, r3, #24
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	2b09      	cmp	r3, #9
 8005828:	d104      	bne.n	8005834 <UI_GetReg+0x8a4>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800582a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (pSPD != MC_NULL)
 8005834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 810b 	beq.w	8005a54 <UI_GetReg+0xac4>
      {
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800583e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005842:	f00a f8af 	bl	800f9a4 <STO_PLL_GetEstimatedBemfLevel>
 8005846:	4603      	mov	r3, r0
 8005848:	141b      	asrs	r3, r3, #16
 800584a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800584e:	e101      	b.n	8005a54 <UI_GetReg+0xac4>

    case MC_PROTOCOL_REG_OBS_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	7d1b      	ldrb	r3, [r3, #20]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800586c:	0f1b      	lsrs	r3, r3, #28
 800586e:	2b09      	cmp	r3, #9
 8005870:	d104      	bne.n	800587c <UI_GetReg+0x8ec>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800587c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005880:	0e1b      	lsrs	r3, r3, #24
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	2b09      	cmp	r3, #9
 8005888:	d104      	bne.n	8005894 <UI_GetReg+0x904>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800588a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (pSPD != MC_NULL)
 8005894:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80dd 	beq.w	8005a58 <UI_GetReg+0xac8>
      {
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800589e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80058a2:	f00a f883 	bl	800f9ac <STO_PLL_GetObservedBemfLevel>
 80058a6:	4603      	mov	r3, r0
 80058a8:	141b      	asrs	r3, r3, #16
 80058aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80058ae:	e0d3      	b.n	8005a58 <UI_GetReg+0xac8>

    case MC_PROTOCOL_REG_MOTOR_POWER:
    {
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80058b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	4618      	mov	r0, r3
 80058b8:	f005 fe08 	bl	800b4cc <MPM_GetAvrgElMotorPowerW>
 80058bc:	4603      	mov	r3, r0
 80058be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80058c2:	e0cc      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_MAX_APP_SPEED:
    {
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80058c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	4618      	mov	r0, r3
 80058cc:	f008 fe23 	bl	800e516 <STC_GetMaxAppPositiveMecSpeedUnit>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	4613      	mov	r3, r2
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	4413      	add	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80058e0:	e0bd      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_MIN_APP_SPEED:
    {
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80058e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	4618      	mov	r0, r3
 80058ea:	f008 fe20 	bl	800e52e <STC_GetMinAppNegativeMecSpeedUnit>
 80058ee:	4603      	mov	r3, r0
 80058f0:	461a      	mov	r2, r3
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80058fe:	e0ae      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_TORQUE_MEAS:
    case MC_PROTOCOL_REG_I_Q:
    {
      bRetVal = MCI_GetIqd(pMCI).q;
 8005900:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005904:	f7fc f9e3 	bl	8001cce <MCI_GetIqd>
 8005908:	4603      	mov	r3, r0
 800590a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8005910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005914:	e0a3      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_FLUX_MEAS:
    case MC_PROTOCOL_REG_I_D:
    {
      bRetVal = MCI_GetIqd(pMCI).d;
 8005916:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800591a:	f7fc f9d8 	bl	8001cce <MCI_GetIqd>
 800591e:	4603      	mov	r3, r0
 8005920:	643b      	str	r3, [r7, #64]	; 0x40
 8005922:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8005926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800592a:	e098      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_RUC_STAGE_NBR:
    {
      if (pMCT->pRevupCtrl)
 800592c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <UI_GetReg+0x9ba>
      {
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8005936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	4618      	mov	r0, r3
 800593e:	f009 fd69 	bl	800f414 <RUC_GetNumberOfPhases>
 8005942:	4603      	mov	r3, r0
 8005944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 8005948:	e089      	b.n	8005a5e <UI_GetReg+0xace>
        bRetVal = (uint32_t) 0;
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 8005950:	e085      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_I_A:
    {
      bRetVal = MCI_GetIab(pMCI).a;
 8005952:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005956:	f7fc f98b 	bl	8001c70 <MCI_GetIab>
 800595a:	4603      	mov	r3, r0
 800595c:	647b      	str	r3, [r7, #68]	; 0x44
 800595e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005966:	e07a      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_I_B:
    {
      bRetVal = MCI_GetIab(pMCI).b;
 8005968:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800596c:	f7fc f980 	bl	8001c70 <MCI_GetIab>
 8005970:	4603      	mov	r3, r0
 8005972:	64bb      	str	r3, [r7, #72]	; 0x48
 8005974:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800597c:	e06f      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_I_ALPHA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 800597e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005982:	f7fc f98c 	bl	8001c9e <MCI_GetIalphabeta>
 8005986:	4603      	mov	r3, r0
 8005988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800598e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005992:	e064      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_I_BETA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8005994:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005998:	f7fc f981 	bl	8001c9e <MCI_GetIalphabeta>
 800599c:	4603      	mov	r3, r0
 800599e:	653b      	str	r3, [r7, #80]	; 0x50
 80059a0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80059a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80059a8:	e059      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_I_Q_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).q;
 80059aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059ae:	f7fc f9a6 	bl	8001cfe <MCI_GetIqdref>
 80059b2:	4603      	mov	r3, r0
 80059b4:	657b      	str	r3, [r7, #84]	; 0x54
 80059b6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80059ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80059be:	e04e      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 80059c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059c4:	f7fc f99b 	bl	8001cfe <MCI_GetIqdref>
 80059c8:	4603      	mov	r3, r0
 80059ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80059cc:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80059d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80059d4:	e043      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_V_Q:
    {
      bRetVal = MCI_GetVqd(pMCI).q;
 80059d6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059da:	f7fc f9a8 	bl	8001d2e <MCI_GetVqd>
 80059de:	4603      	mov	r3, r0
 80059e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059e2:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80059e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80059ea:	e038      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_V_D:
    {
      bRetVal = MCI_GetVqd(pMCI).d;
 80059ec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059f0:	f7fc f99d 	bl	8001d2e <MCI_GetVqd>
 80059f4:	4603      	mov	r3, r0
 80059f6:	663b      	str	r3, [r7, #96]	; 0x60
 80059f8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 80059fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a00:	e02d      	b.n	8005a5e <UI_GetReg+0xace>

   case MC_PROTOCOL_REG_V_ALPHA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8005a02:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a06:	f7fc f9aa 	bl	8001d5e <MCI_GetValphabeta>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a0e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8005a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a16:	e022      	b.n	8005a5e <UI_GetReg+0xace>

    case MC_PROTOCOL_REG_V_BETA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8005a18:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a1c:	f7fc f99f 	bl	8001d5e <MCI_GetValphabeta>
 8005a20:	4603      	mov	r3, r0
 8005a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a24:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8005a28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a2c:	e017      	b.n	8005a5e <UI_GetReg+0xace>

    default:
	{
      if ( success != (bool *) 0 )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d013      	beq.n	8005a5c <UI_GetReg+0xacc>
      {
        *success = false;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 8005a3a:	e00f      	b.n	8005a5c <UI_GetReg+0xacc>
    break;
 8005a3c:	bf00      	nop
 8005a3e:	e00e      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a40:	bf00      	nop
 8005a42:	e00c      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a44:	bf00      	nop
 8005a46:	e00a      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a48:	bf00      	nop
 8005a4a:	e008      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a4c:	bf00      	nop
 8005a4e:	e006      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a50:	bf00      	nop
 8005a52:	e004      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a54:	bf00      	nop
 8005a56:	e002      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <UI_GetReg+0xace>
    break;
 8005a5c:	bf00      	nop
  }
  return bRetVal;
 8005a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	37d8      	adds	r7, #216	; 0xd8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop

08005a6c <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	7d1b      	ldrb	r3, [r3, #20]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60bb      	str	r3, [r7, #8]

  switch (bCmdID)
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	2b0d      	cmp	r3, #13
 8005a92:	d84b      	bhi.n	8005b2c <UI_ExecCmd+0xc0>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <UI_ExecCmd+0x30>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005ad5 	.word	0x08005ad5
 8005aa0:	08005add 	.word	0x08005add
 8005aa4:	08005ae5 	.word	0x08005ae5
 8005aa8:	08005b33 	.word	0x08005b33
 8005aac:	08005b33 	.word	0x08005b33
 8005ab0:	08005af9 	.word	0x08005af9
 8005ab4:	08005b15 	.word	0x08005b15
 8005ab8:	08005b1d 	.word	0x08005b1d
 8005abc:	08005b25 	.word	0x08005b25
 8005ac0:	08005b2d 	.word	0x08005b2d
 8005ac4:	08005b2d 	.word	0x08005b2d
 8005ac8:	08005b2d 	.word	0x08005b2d
 8005acc:	08005b2d 	.word	0x08005b2d
 8005ad0:	08005add 	.word	0x08005add
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      /* Call MCI Start motor; */
      MCI_StartMotor(pMCI);
 8005ad4:	68b8      	ldr	r0, [r7, #8]
 8005ad6:	f7fb ff7c 	bl	80019d2 <MCI_StartMotor>
    }
    break;
 8005ada:	e02d      	b.n	8005b38 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      /* Call MCI Stop motor; */
      MCI_StopMotor(pMCI);
 8005adc:	68b8      	ldr	r0, [r7, #8]
 8005ade:	f7fb ff8f 	bl	8001a00 <MCI_StopMotor>
    }
    break;
 8005ae2:	e029      	b.n	8005b38 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8005ae4:	68b8      	ldr	r0, [r7, #8]
 8005ae6:	f7fc f81d 	bl	8001b24 <MCI_GetSTMState>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b06      	cmp	r3, #6
 8005aee:	d122      	bne.n	8005b36 <UI_ExecCmd+0xca>
      {
        MCI_StopRamp(pMCI);
 8005af0:	68b8      	ldr	r0, [r7, #8]
 8005af2:	f7fc f890 	bl	8001c16 <MCI_StopRamp>
      }
    }
    break;
 8005af6:	e01e      	b.n	8005b36 <UI_ExecCmd+0xca>
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8005af8:	68b8      	ldr	r0, [r7, #8]
 8005afa:	f7fc f813 	bl	8001b24 <MCI_GetSTMState>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d103      	bne.n	8005b0c <UI_ExecCmd+0xa0>
      {
        MCI_StartMotor(pMCI);
 8005b04:	68b8      	ldr	r0, [r7, #8]
 8005b06:	f7fb ff64 	bl	80019d2 <MCI_StartMotor>
      else
      {
        MCI_StopMotor(pMCI);
      }
    }
    break;
 8005b0a:	e015      	b.n	8005b38 <UI_ExecCmd+0xcc>
        MCI_StopMotor(pMCI);
 8005b0c:	68b8      	ldr	r0, [r7, #8]
 8005b0e:	f7fb ff77 	bl	8001a00 <MCI_StopMotor>
    break;
 8005b12:	e011      	b.n	8005b38 <UI_ExecCmd+0xcc>
    }
    break;

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MCI_FaultAcknowledged(pMCI);
 8005b14:	68b8      	ldr	r0, [r7, #8]
 8005b16:	f7fb ff82 	bl	8001a1e <MCI_FaultAcknowledged>
    }
    break;
 8005b1a:	e00d      	b.n	8005b38 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_ENCODER_ALIGN:
    {
      MCI_EncoderAlign(pMCI);
 8005b1c:	68b8      	ldr	r0, [r7, #8]
 8005b1e:	f7fb ff8c 	bl	8001a3a <MCI_EncoderAlign>
    }
    break;
 8005b22:	e009      	b.n	8005b38 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_IQDREF_CLEAR:
    {
      MCI_Clear_Iqdref(pMCI);
 8005b24:	68b8      	ldr	r0, [r7, #8]
 8005b26:	f7fc f954 	bl	8001dd2 <MCI_Clear_Iqdref>
    }
    break;
 8005b2a:	e005      	b.n	8005b38 <UI_ExecCmd+0xcc>

  default:
    {
    retVal = false;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	73fb      	strb	r3, [r7, #15]
	}
    break;
 8005b30:	e002      	b.n	8005b38 <UI_ExecCmd+0xcc>
    break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <UI_ExecCmd+0xcc>
    break;
 8005b36:	bf00      	nop
  }
  return retVal;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop

08005b44 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	7d1b      	ldrb	r3, [r3, #20]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	617b      	str	r3, [r7, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4a07      	ldr	r2, [pc, #28]	; (8005b84 <UI_ExecSpeedRamp+0x40>)
 8005b66:	fb82 1203 	smull	r1, r2, r2, r3
 8005b6a:	17db      	asrs	r3, r3, #31
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	88fa      	ldrh	r2, [r7, #6]
 8005b72:	4619      	mov	r1, r3
 8005b74:	6978      	ldr	r0, [r7, #20]
 8005b76:	f7fb fed6 	bl	8001926 <MCI_ExecSpeedRamp>
  return true;
 8005b7a:	2301      	movs	r3, #1
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	2aaaaaab 	.word	0x2aaaaaab

08005b88 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
 8005b94:	4613      	mov	r3, r2
 8005b96:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	7d1b      	ldrb	r3, [r3, #20]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8005ba8:	883a      	ldrh	r2, [r7, #0]
 8005baa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7fb fed5 	bl	8001960 <MCI_ExecTorqueRamp>
  return true;
 8005bb6:	2301      	movs	r3, #1
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	72fb      	strb	r3, [r7, #11]
  bool hRetVal = true;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	75fb      	strb	r3, [r7, #23]

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	7d1b      	ldrb	r3, [r3, #20]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	613b      	str	r3, [r7, #16]
  if (pRevupCtrl)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <UI_GetRevupData+0x64>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8005bec:	7afb      	ldrb	r3, [r7, #11]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6938      	ldr	r0, [r7, #16]
 8005bf2:	f009 fbf9 	bl	800f3e8 <RUC_GetPhaseDurationms>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	801a      	strh	r2, [r3, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	4619      	mov	r1, r3
 8005c02:	6938      	ldr	r0, [r7, #16]
 8005c04:	f009 fbf6 	bl	800f3f4 <RUC_GetPhaseFinalMecSpeedUnit>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	801a      	strh	r2, [r3, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005c10:	7afb      	ldrb	r3, [r7, #11]
 8005c12:	4619      	mov	r1, r3
 8005c14:	6938      	ldr	r0, [r7, #16]
 8005c16:	f009 fbf5 	bl	800f404 <RUC_GetPhaseFinalTorque>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	801a      	strh	r2, [r3, #0]
 8005c22:	e001      	b.n	8005c28 <UI_GetRevupData+0x68>
  }
  else
  {
    hRetVal = false;
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
  }
  return hRetVal;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	4608      	mov	r0, r1
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4603      	mov	r3, r0
 8005c42:	72fb      	strb	r3, [r7, #11]
 8005c44:	460b      	mov	r3, r1
 8005c46:	813b      	strh	r3, [r7, #8]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	80fb      	strh	r3, [r7, #6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	7d1b      	ldrb	r3, [r3, #20]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	617b      	str	r3, [r7, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8005c5e:	893a      	ldrh	r2, [r7, #8]
 8005c60:	7afb      	ldrb	r3, [r7, #11]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6978      	ldr	r0, [r7, #20]
 8005c66:	f009 fbad 	bl	800f3c4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8005c6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c6e:	7afb      	ldrb	r3, [r7, #11]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	f009 fbac 	bl	800f3d0 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8005c78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005c7c:	7afb      	ldrb	r3, [r7, #11]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6978      	ldr	r0, [r7, #20]
 8005c82:	f009 fbab 	bl	800f3dc <RUC_SetPhaseFinalTorque>
  return true;
 8005c86:	2301      	movs	r3, #1
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7d1b      	ldrb	r3, [r3, #20]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
  qd_t currComp;
  currComp.q = hIqRef;
 8005cb0:	887b      	ldrh	r3, [r7, #2]
 8005cb2:	813b      	strh	r3, [r7, #8]
  currComp.d = hIdRef;
 8005cb4:	883b      	ldrh	r3, [r7, #0]
 8005cb6:	817b      	strh	r3, [r7, #10]
  MCI_SetCurrentReferences(pMCI,currComp);
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7fb fe6d 	bl	800199a <MCI_SetCurrentReferences>
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UI_GetMPInfo>:
  * @param  pMPInfo: The returned list of register.
  *         It is populated by this function.
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
    return false;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <SystemInit+0x28>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	4a07      	ldr	r2, [pc, #28]	; (8005d08 <SystemInit+0x28>)
 8005cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <SystemInit+0x28>)
 8005cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8005cfc:	bf00      	nop
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d10:	4b08      	ldr	r3, [pc, #32]	; (8005d34 <HAL_Init+0x28>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a07      	ldr	r2, [pc, #28]	; (8005d34 <HAL_Init+0x28>)
 8005d16:	f043 0310 	orr.w	r3, r3, #16
 8005d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d1c:	2003      	movs	r0, #3
 8005d1e:	f001 fc6f 	bl	8007600 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d22:	2004      	movs	r0, #4
 8005d24:	f000 f808 	bl	8005d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d28:	f7fe fb12 	bl	8004350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	40022000 	.word	0x40022000

08005d38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d40:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <HAL_InitTick+0x54>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <HAL_InitTick+0x58>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	4619      	mov	r1, r3
 8005d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 fc87 	bl	800766a <HAL_SYSTICK_Config>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e00e      	b.n	8005d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b0f      	cmp	r3, #15
 8005d6a:	d80a      	bhi.n	8005d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	f001 fc4f 	bl	8007616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d78:	4a06      	ldr	r2, [pc, #24]	; (8005d94 <HAL_InitTick+0x5c>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3708      	adds	r7, #8
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	200006d8 	.word	0x200006d8
 8005d90:	200006e0 	.word	0x200006e0
 8005d94:	200006dc 	.word	0x200006dc

08005d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d9c:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <HAL_IncTick+0x20>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_IncTick+0x24>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4413      	add	r3, r2
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <HAL_IncTick+0x24>)
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	200006e0 	.word	0x200006e0
 8005dbc:	20000bdc 	.word	0x20000bdc

08005dc0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return uwTick;  
 8005dc4:	4b03      	ldr	r3, [pc, #12]	; (8005dd4 <HAL_GetTick+0x14>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000bdc 	.word	0x20000bdc

08005dd8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005de0:	f7ff ffee 	bl	8005dc0 <HAL_GetTick>
 8005de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df0:	d005      	beq.n	8005dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <HAL_Delay+0x44>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005dfe:	bf00      	nop
 8005e00:	f7ff ffde 	bl	8005dc0 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d8f7      	bhi.n	8005e00 <HAL_Delay+0x28>
  {
  }
}
 8005e10:	bf00      	nop
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	200006e0 	.word	0x200006e0

08005e20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b09a      	sub	sp, #104	; 0x68
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e1c9      	b.n	80061d4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d176      	bne.n	8005f40 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d152      	bne.n	8005f00 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7fe fa8f 	bl	8004398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d13b      	bne.n	8005f00 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f001 f90f 	bl	80070ac <ADC_Disable>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	f003 0310 	and.w	r3, r3, #16
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d12f      	bne.n	8005f00 <HAL_ADC_Init+0xe0>
 8005ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d12b      	bne.n	8005f00 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005eb0:	f023 0302 	bic.w	r3, r3, #2
 8005eb4:	f043 0202 	orr.w	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005eca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005eda:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005edc:	4b86      	ldr	r3, [pc, #536]	; (80060f8 <HAL_ADC_Init+0x2d8>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a86      	ldr	r2, [pc, #536]	; (80060fc <HAL_ADC_Init+0x2dc>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	0c9a      	lsrs	r2, r3, #18
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005ef2:	e002      	b.n	8005efa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f9      	bne.n	8005ef4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f1c:	d110      	bne.n	8005f40 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f023 0312 	bic.w	r3, r3, #18
 8005f26:	f043 0210 	orr.w	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	f043 0201 	orr.w	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 8136 	bne.w	80061ba <HAL_ADC_Init+0x39a>
 8005f4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 8131 	bne.w	80061ba <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f040 8129 	bne.w	80061ba <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005f70:	f043 0202 	orr.w	r2, r3, #2
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f80:	d004      	beq.n	8005f8c <HAL_ADC_Init+0x16c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a5e      	ldr	r2, [pc, #376]	; (8006100 <HAL_ADC_Init+0x2e0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d101      	bne.n	8005f90 <HAL_ADC_Init+0x170>
 8005f8c:	4b5d      	ldr	r3, [pc, #372]	; (8006104 <HAL_ADC_Init+0x2e4>)
 8005f8e:	e000      	b.n	8005f92 <HAL_ADC_Init+0x172>
 8005f90:	4b5d      	ldr	r3, [pc, #372]	; (8006108 <HAL_ADC_Init+0x2e8>)
 8005f92:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f9c:	d102      	bne.n	8005fa4 <HAL_ADC_Init+0x184>
 8005f9e:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_ADC_Init+0x2e0>)
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e01a      	b.n	8005fda <HAL_ADC_Init+0x1ba>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a55      	ldr	r2, [pc, #340]	; (8006100 <HAL_ADC_Init+0x2e0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d103      	bne.n	8005fb6 <HAL_ADC_Init+0x196>
 8005fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e011      	b.n	8005fda <HAL_ADC_Init+0x1ba>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a54      	ldr	r2, [pc, #336]	; (800610c <HAL_ADC_Init+0x2ec>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d102      	bne.n	8005fc6 <HAL_ADC_Init+0x1a6>
 8005fc0:	4b53      	ldr	r3, [pc, #332]	; (8006110 <HAL_ADC_Init+0x2f0>)
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e009      	b.n	8005fda <HAL_ADC_Init+0x1ba>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a51      	ldr	r2, [pc, #324]	; (8006110 <HAL_ADC_Init+0x2f0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d102      	bne.n	8005fd6 <HAL_ADC_Init+0x1b6>
 8005fd0:	4b4e      	ldr	r3, [pc, #312]	; (800610c <HAL_ADC_Init+0x2ec>)
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e001      	b.n	8005fda <HAL_ADC_Init+0x1ba>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d108      	bne.n	8005ffa <HAL_ADC_Init+0x1da>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_ADC_Init+0x1da>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <HAL_ADC_Init+0x1dc>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11c      	bne.n	800603a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006000:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006002:	2b00      	cmp	r3, #0
 8006004:	d010      	beq.n	8006028 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d107      	bne.n	8006022 <HAL_ADC_Init+0x202>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_ADC_Init+0x202>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <HAL_ADC_Init+0x204>
 8006022:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006024:	2b00      	cmp	r3, #0
 8006026:	d108      	bne.n	800603a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8006028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	431a      	orrs	r2, r3
 8006036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006038:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	7e5b      	ldrb	r3, [r3, #25]
 800603e:	035b      	lsls	r3, r3, #13
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006044:	2a01      	cmp	r2, #1
 8006046:	d002      	beq.n	800604e <HAL_ADC_Init+0x22e>
 8006048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800604c:	e000      	b.n	8006050 <HAL_ADC_Init+0x230>
 800604e:	2200      	movs	r2, #0
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	431a      	orrs	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	4313      	orrs	r3, r2
 800605e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006060:	4313      	orrs	r3, r2
 8006062:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d11b      	bne.n	80060a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	7e5b      	ldrb	r3, [r3, #25]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d109      	bne.n	800608a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	3b01      	subs	r3, #1
 800607c:	045a      	lsls	r2, r3, #17
 800607e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006080:	4313      	orrs	r3, r2
 8006082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006086:	663b      	str	r3, [r7, #96]	; 0x60
 8006088:	e00d      	b.n	80060a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609e:	f043 0201 	orr.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d03a      	beq.n	8006124 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a16      	ldr	r2, [pc, #88]	; (800610c <HAL_ADC_Init+0x2ec>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_ADC_Init+0x2a2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a14      	ldr	r2, [pc, #80]	; (8006110 <HAL_ADC_Init+0x2f0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d128      	bne.n	8006114 <HAL_ADC_Init+0x2f4>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80060ca:	d012      	beq.n	80060f2 <HAL_ADC_Init+0x2d2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d4:	d00a      	beq.n	80060ec <HAL_ADC_Init+0x2cc>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80060de:	d002      	beq.n	80060e6 <HAL_ADC_Init+0x2c6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e4:	e018      	b.n	8006118 <HAL_ADC_Init+0x2f8>
 80060e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060ea:	e015      	b.n	8006118 <HAL_ADC_Init+0x2f8>
 80060ec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80060f0:	e012      	b.n	8006118 <HAL_ADC_Init+0x2f8>
 80060f2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80060f6:	e00f      	b.n	8006118 <HAL_ADC_Init+0x2f8>
 80060f8:	200006d8 	.word	0x200006d8
 80060fc:	431bde83 	.word	0x431bde83
 8006100:	50000100 	.word	0x50000100
 8006104:	50000300 	.word	0x50000300
 8006108:	50000700 	.word	0x50000700
 800610c:	50000400 	.word	0x50000400
 8006110:	50000500 	.word	0x50000500
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800611c:	4313      	orrs	r3, r2
 800611e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006120:	4313      	orrs	r3, r2
 8006122:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 030c 	and.w	r3, r3, #12
 800612e:	2b00      	cmp	r3, #0
 8006130:	d114      	bne.n	800615c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006140:	f023 0302 	bic.w	r3, r3, #2
 8006144:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7e1b      	ldrb	r3, [r3, #24]
 800614a:	039a      	lsls	r2, r3, #14
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4313      	orrs	r3, r2
 8006156:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006158:	4313      	orrs	r3, r2
 800615a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <HAL_ADC_Init+0x3bc>)
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800616c:	430b      	orrs	r3, r1
 800616e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10c      	bne.n	8006192 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	f023 010f 	bic.w	r1, r3, #15
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69db      	ldr	r3, [r3, #28]
 8006186:	1e5a      	subs	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
 8006190:	e007      	b.n	80061a2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 020f 	bic.w	r2, r2, #15
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ac:	f023 0303 	bic.w	r3, r3, #3
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	641a      	str	r2, [r3, #64]	; 0x40
 80061b8:	e00a      	b.n	80061d0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f023 0312 	bic.w	r3, r3, #18
 80061c2:	f043 0210 	orr.w	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80061d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3768      	adds	r7, #104	; 0x68
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	fff0c007 	.word	0xfff0c007

080061e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b09b      	sub	sp, #108	; 0x6c
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x22>
 80061fe:	2302      	movs	r3, #2
 8006200:	e2cb      	b.n	800679a <HAL_ADC_ConfigChannel+0x5ba>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 82af 	bne.w	8006778 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b04      	cmp	r3, #4
 8006220:	d81c      	bhi.n	800625c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	461a      	mov	r2, r3
 8006236:	231f      	movs	r3, #31
 8006238:	4093      	lsls	r3, r2
 800623a:	43db      	mvns	r3, r3
 800623c:	4019      	ands	r1, r3
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4413      	add	r3, r2
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	fa00 f203 	lsl.w	r2, r0, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
 800625a:	e063      	b.n	8006324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b09      	cmp	r3, #9
 8006262:	d81e      	bhi.n	80062a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4413      	add	r3, r2
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	3b1e      	subs	r3, #30
 8006278:	221f      	movs	r2, #31
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	43db      	mvns	r3, r3
 8006280:	4019      	ands	r1, r3
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	4413      	add	r3, r2
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	3b1e      	subs	r3, #30
 8006294:	fa00 f203 	lsl.w	r2, r0, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	635a      	str	r2, [r3, #52]	; 0x34
 80062a0:	e040      	b.n	8006324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b0e      	cmp	r3, #14
 80062a8:	d81e      	bhi.n	80062e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	4613      	mov	r3, r2
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	4413      	add	r3, r2
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	3b3c      	subs	r3, #60	; 0x3c
 80062be:	221f      	movs	r2, #31
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	43db      	mvns	r3, r3
 80062c6:	4019      	ands	r1, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	3b3c      	subs	r3, #60	; 0x3c
 80062da:	fa00 f203 	lsl.w	r2, r0, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
 80062e6:	e01d      	b.n	8006324 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4413      	add	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	3b5a      	subs	r3, #90	; 0x5a
 80062fc:	221f      	movs	r2, #31
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	4019      	ands	r1, r3
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4413      	add	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	3b5a      	subs	r3, #90	; 0x5a
 8006318:	fa00 f203 	lsl.w	r2, r0, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
 800632e:	2b00      	cmp	r3, #0
 8006330:	f040 80e5 	bne.w	80064fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b09      	cmp	r3, #9
 800633a:	d91c      	bls.n	8006376 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6999      	ldr	r1, [r3, #24]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	3b1e      	subs	r3, #30
 800634e:	2207      	movs	r2, #7
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	43db      	mvns	r3, r3
 8006356:	4019      	ands	r1, r3
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	6898      	ldr	r0, [r3, #8]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	4413      	add	r3, r2
 8006366:	3b1e      	subs	r3, #30
 8006368:	fa00 f203 	lsl.w	r2, r0, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	619a      	str	r2, [r3, #24]
 8006374:	e019      	b.n	80063aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6959      	ldr	r1, [r3, #20]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	2207      	movs	r2, #7
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43db      	mvns	r3, r3
 800638e:	4019      	ands	r1, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	6898      	ldr	r0, [r3, #8]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4413      	add	r3, r2
 800639e:	fa00 f203 	lsl.w	r2, r0, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	08db      	lsrs	r3, r3, #3
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d84f      	bhi.n	800646c <HAL_ADC_ConfigChannel+0x28c>
 80063cc:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	08006407 	.word	0x08006407
 80063dc:	08006429 	.word	0x08006429
 80063e0:	0800644b 	.word	0x0800644b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80063ea:	4b9f      	ldr	r3, [pc, #636]	; (8006668 <HAL_ADC_ConfigChannel+0x488>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	0691      	lsls	r1, r2, #26
 80063f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063f6:	430a      	orrs	r2, r1
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006402:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006404:	e07e      	b.n	8006504 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800640c:	4b96      	ldr	r3, [pc, #600]	; (8006668 <HAL_ADC_ConfigChannel+0x488>)
 800640e:	4013      	ands	r3, r2
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	6812      	ldr	r2, [r2, #0]
 8006414:	0691      	lsls	r1, r2, #26
 8006416:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006418:	430a      	orrs	r2, r1
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006424:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006426:	e06d      	b.n	8006504 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800642e:	4b8e      	ldr	r3, [pc, #568]	; (8006668 <HAL_ADC_ConfigChannel+0x488>)
 8006430:	4013      	ands	r3, r2
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	6812      	ldr	r2, [r2, #0]
 8006436:	0691      	lsls	r1, r2, #26
 8006438:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800643a:	430a      	orrs	r2, r1
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006446:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006448:	e05c      	b.n	8006504 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006450:	4b85      	ldr	r3, [pc, #532]	; (8006668 <HAL_ADC_ConfigChannel+0x488>)
 8006452:	4013      	ands	r3, r2
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	0691      	lsls	r1, r2, #26
 800645a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800645c:	430a      	orrs	r2, r1
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006468:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800646a:	e04b      	b.n	8006504 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	069b      	lsls	r3, r3, #26
 800647c:	429a      	cmp	r2, r3
 800647e:	d107      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800648e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	069b      	lsls	r3, r3, #26
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d107      	bne.n	80064b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	069b      	lsls	r3, r3, #26
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d107      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	069b      	lsls	r3, r3, #26
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d10a      	bne.n	8006502 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80064fc:	e001      	b.n	8006502 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <HAL_ADC_ConfigChannel+0x324>
      break;
 8006502:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b01      	cmp	r3, #1
 8006510:	d108      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x344>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x344>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <HAL_ADC_ConfigChannel+0x346>
 8006524:	2300      	movs	r3, #0
 8006526:	2b00      	cmp	r3, #0
 8006528:	f040 8131 	bne.w	800678e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d00f      	beq.n	8006554 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43da      	mvns	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	400a      	ands	r2, r1
 800654e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006552:	e049      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b09      	cmp	r3, #9
 8006574:	d91c      	bls.n	80065b0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6999      	ldr	r1, [r3, #24]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4613      	mov	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	4413      	add	r3, r2
 8006586:	3b1b      	subs	r3, #27
 8006588:	2207      	movs	r2, #7
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	43db      	mvns	r3, r3
 8006590:	4019      	ands	r1, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	6898      	ldr	r0, [r3, #8]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	3b1b      	subs	r3, #27
 80065a2:	fa00 f203 	lsl.w	r2, r0, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	619a      	str	r2, [r3, #24]
 80065ae:	e01b      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6959      	ldr	r1, [r3, #20]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	4613      	mov	r3, r2
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	4413      	add	r3, r2
 80065c2:	2207      	movs	r2, #7
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	43db      	mvns	r3, r3
 80065ca:	4019      	ands	r1, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6898      	ldr	r0, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	4613      	mov	r3, r2
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	4413      	add	r3, r2
 80065dc:	fa00 f203 	lsl.w	r2, r0, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065f0:	d004      	beq.n	80065fc <HAL_ADC_ConfigChannel+0x41c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1d      	ldr	r2, [pc, #116]	; (800666c <HAL_ADC_ConfigChannel+0x48c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d101      	bne.n	8006600 <HAL_ADC_ConfigChannel+0x420>
 80065fc:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <HAL_ADC_ConfigChannel+0x490>)
 80065fe:	e000      	b.n	8006602 <HAL_ADC_ConfigChannel+0x422>
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <HAL_ADC_ConfigChannel+0x494>)
 8006602:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b10      	cmp	r3, #16
 800660a:	d105      	bne.n	8006618 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800660c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006614:	2b00      	cmp	r3, #0
 8006616:	d015      	beq.n	8006644 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800661c:	2b11      	cmp	r3, #17
 800661e:	d105      	bne.n	800662c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006630:	2b12      	cmp	r3, #18
 8006632:	f040 80ac 	bne.w	800678e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 80a5 	bne.w	800678e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800664c:	d102      	bne.n	8006654 <HAL_ADC_ConfigChannel+0x474>
 800664e:	4b07      	ldr	r3, [pc, #28]	; (800666c <HAL_ADC_ConfigChannel+0x48c>)
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	e023      	b.n	800669c <HAL_ADC_ConfigChannel+0x4bc>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a04      	ldr	r2, [pc, #16]	; (800666c <HAL_ADC_ConfigChannel+0x48c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d10c      	bne.n	8006678 <HAL_ADC_ConfigChannel+0x498>
 800665e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e01a      	b.n	800669c <HAL_ADC_ConfigChannel+0x4bc>
 8006666:	bf00      	nop
 8006668:	83fff000 	.word	0x83fff000
 800666c:	50000100 	.word	0x50000100
 8006670:	50000300 	.word	0x50000300
 8006674:	50000700 	.word	0x50000700
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d102      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x4a8>
 8006682:	4b4a      	ldr	r3, [pc, #296]	; (80067ac <HAL_ADC_ConfigChannel+0x5cc>)
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	e009      	b.n	800669c <HAL_ADC_ConfigChannel+0x4bc>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a47      	ldr	r2, [pc, #284]	; (80067ac <HAL_ADC_ConfigChannel+0x5cc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d102      	bne.n	8006698 <HAL_ADC_ConfigChannel+0x4b8>
 8006692:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <HAL_ADC_ConfigChannel+0x5c8>)
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	e001      	b.n	800669c <HAL_ADC_ConfigChannel+0x4bc>
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0303 	and.w	r3, r3, #3
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d108      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x4dc>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x4dc>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e000      	b.n	80066be <HAL_ADC_ConfigChannel+0x4de>
 80066bc:	2300      	movs	r3, #0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d150      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80066c2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0303 	and.w	r3, r3, #3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x504>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x504>
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <HAL_ADC_ConfigChannel+0x506>
 80066e4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d13c      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d11d      	bne.n	800672e <HAL_ADC_ConfigChannel+0x54e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066fa:	d118      	bne.n	800672e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80066fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006706:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006708:	4b29      	ldr	r3, [pc, #164]	; (80067b0 <HAL_ADC_ConfigChannel+0x5d0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a29      	ldr	r2, [pc, #164]	; (80067b4 <HAL_ADC_ConfigChannel+0x5d4>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	0c9a      	lsrs	r2, r3, #18
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800671e:	e002      	b.n	8006726 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	3b01      	subs	r3, #1
 8006724:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f9      	bne.n	8006720 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800672c:	e02e      	b.n	800678c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b11      	cmp	r3, #17
 8006734:	d10b      	bne.n	800674e <HAL_ADC_ConfigChannel+0x56e>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800673e:	d106      	bne.n	800674e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800674a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800674c:	e01e      	b.n	800678c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b12      	cmp	r3, #18
 8006754:	d11a      	bne.n	800678c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800675e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006760:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006762:	e013      	b.n	800678c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006776:	e00a      	b.n	800678e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800678a:	e000      	b.n	800678e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800678c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800679a:	4618      	mov	r0, r3
 800679c:	376c      	adds	r7, #108	; 0x6c
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	50000400 	.word	0x50000400
 80067ac:	50000500 	.word	0x50000500
 80067b0:	200006d8 	.word	0x200006d8
 80067b4:	431bde83 	.word	0x431bde83

080067b8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b09d      	sub	sp, #116	; 0x74
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_ADCEx_InjectedConfigChannel+0x26>
 80067da:	2302      	movs	r3, #2
 80067dc:	e365      	b.n	8006eaa <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d151      	bne.n	800689a <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d143      	bne.n	8006886 <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d02b      	beq.n	800685e <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	021a      	lsls	r2, r3, #8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4984      	ldr	r1, [pc, #528]	; (8006a24 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8006812:	428b      	cmp	r3, r1
 8006814:	d004      	beq.n	8006820 <HAL_ADCEx_InjectedConfigChannel+0x68>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4983      	ldr	r1, [pc, #524]	; (8006a28 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 800681c:	428b      	cmp	r3, r1
 800681e:	d114      	bne.n	800684a <HAL_ADCEx_InjectedConfigChannel+0x92>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	2b08      	cmp	r3, #8
 8006826:	d00e      	beq.n	8006846 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	2b14      	cmp	r3, #20
 800682e:	d008      	beq.n	8006842 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	2b1c      	cmp	r3, #28
 8006836:	d002      	beq.n	800683e <HAL_ADCEx_InjectedConfigChannel+0x86>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	e007      	b.n	800684e <HAL_ADCEx_InjectedConfigChannel+0x96>
 800683e:	2310      	movs	r3, #16
 8006840:	e005      	b.n	800684e <HAL_ADCEx_InjectedConfigChannel+0x96>
 8006842:	231c      	movs	r3, #28
 8006844:	e003      	b.n	800684e <HAL_ADCEx_InjectedConfigChannel+0x96>
 8006846:	2334      	movs	r3, #52	; 0x34
 8006848:	e001      	b.n	800684e <HAL_ADCEx_InjectedConfigChannel+0x96>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	431a      	orrs	r2, r3
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	4313      	orrs	r3, r2
 8006856:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006858:	4313      	orrs	r3, r2
 800685a:	66bb      	str	r3, [r7, #104]	; 0x68
 800685c:	e005      	b.n	800686a <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006866:	4313      	orrs	r3, r2
 8006868:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006870:	4b6e      	ldr	r3, [pc, #440]	; (8006a2c <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8006872:	4013      	ands	r3, r2
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6812      	ldr	r2, [r2, #0]
 8006878:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800687a:	430b      	orrs	r3, r1
 800687c:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006882:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006884:	e07f      	b.n	8006986 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006898:	e075      	b.n	8006986 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d140      	bne.n	8006924 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d02d      	beq.n	8006914 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	1e59      	subs	r1, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4857      	ldr	r0, [pc, #348]	; (8006a24 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80068c8:	4283      	cmp	r3, r0
 80068ca:	d004      	beq.n	80068d6 <HAL_ADCEx_InjectedConfigChannel+0x11e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4855      	ldr	r0, [pc, #340]	; (8006a28 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 80068d2:	4283      	cmp	r3, r0
 80068d4:	d114      	bne.n	8006900 <HAL_ADCEx_InjectedConfigChannel+0x148>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	2b08      	cmp	r3, #8
 80068dc:	d00e      	beq.n	80068fc <HAL_ADCEx_InjectedConfigChannel+0x144>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	2b14      	cmp	r3, #20
 80068e4:	d008      	beq.n	80068f8 <HAL_ADCEx_InjectedConfigChannel+0x140>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	2b1c      	cmp	r3, #28
 80068ec:	d002      	beq.n	80068f4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	e007      	b.n	8006904 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80068f4:	2310      	movs	r3, #16
 80068f6:	e005      	b.n	8006904 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80068f8:	231c      	movs	r3, #28
 80068fa:	e003      	b.n	8006904 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 80068fc:	2334      	movs	r3, #52	; 0x34
 80068fe:	e001      	b.n	8006904 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	4319      	orrs	r1, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	430b      	orrs	r3, r1
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	649a      	str	r2, [r3, #72]	; 0x48
 8006912:	e007      	b.n	8006924 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	3b01      	subs	r3, #1
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	4413      	add	r3, r2
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	3302      	adds	r3, #2
 8006936:	221f      	movs	r2, #31
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43db      	mvns	r3, r3
 800693e:	4019      	ands	r1, r3
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	3302      	adds	r3, #2
 8006952:	fa00 f303 	lsl.w	r3, r0, r3
 8006956:	ea41 0203 	orr.w	r2, r1, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006962:	1e5a      	subs	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006976:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8006978:	4013      	ands	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	430b      	orrs	r3, r1
 8006984:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0308 	and.w	r3, r3, #8
 8006990:	2b00      	cmp	r3, #0
 8006992:	d12d      	bne.n	80069f0 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	7f5b      	ldrb	r3, [r3, #29]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d110      	bne.n	80069be <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	7f9b      	ldrb	r3, [r3, #30]
 80069aa:	055a      	lsls	r2, r3, #21
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	7f1b      	ldrb	r3, [r3, #28]
 80069b0:	051b      	lsls	r3, r3, #20
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	60da      	str	r2, [r3, #12]
 80069bc:	e018      	b.n	80069f0 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	7f9b      	ldrb	r3, [r3, #30]
 80069cc:	055a      	lsls	r2, r3, #21
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	7f1b      	ldrb	r3, [r3, #28]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d108      	bne.n	80069f0 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f043 0220 	orr.w	r2, r3, #32
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 8111 	bne.w	8006c22 <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d113      	bne.n	8006a30 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	7f5b      	ldrb	r3, [r3, #29]
 8006a16:	065a      	lsls	r2, r3, #25
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	60da      	str	r2, [r3, #12]
 8006a20:	e01b      	b.n	8006a5a <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8006a22:	bf00      	nop
 8006a24:	50000400 	.word	0x50000400
 8006a28:	50000500 	.word	0x50000500
 8006a2c:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006a3e:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	7f5b      	ldrb	r3, [r3, #29]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d108      	bne.n	8006a5a <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	f043 0220 	orr.w	r2, r3, #32
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b09      	cmp	r3, #9
 8006a60:	d91c      	bls.n	8006a9c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6999      	ldr	r1, [r3, #24]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	3b1e      	subs	r3, #30
 8006a74:	2207      	movs	r2, #7
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	4019      	ands	r1, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6898      	ldr	r0, [r3, #8]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4613      	mov	r3, r2
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	4413      	add	r3, r2
 8006a8c:	3b1e      	subs	r3, #30
 8006a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	619a      	str	r2, [r3, #24]
 8006a9a:	e019      	b.n	8006ad0 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6959      	ldr	r1, [r3, #20]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	4413      	add	r3, r2
 8006aac:	2207      	movs	r2, #7
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	4019      	ands	r1, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6898      	ldr	r0, [r3, #8]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4413      	add	r3, r2
 8006ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	430a      	orrs	r2, r1
 8006ace:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	695a      	ldr	r2, [r3, #20]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	08db      	lsrs	r3, r3, #3
 8006adc:	f003 0303 	and.w	r3, r3, #3
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae6:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d84e      	bhi.n	8006b90 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b09 	.word	0x08006b09
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b4d 	.word	0x08006b4d
 8006b04:	08006b6f 	.word	0x08006b6f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b0e:	4b9f      	ldr	r3, [pc, #636]	; (8006d8c <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	0691      	lsls	r1, r2, #26
 8006b18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006b26:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006b28:	e07e      	b.n	8006c28 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006b30:	4b96      	ldr	r3, [pc, #600]	; (8006d8c <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006b32:	4013      	ands	r3, r2
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	0691      	lsls	r1, r2, #26
 8006b3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006b48:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006b4a:	e06d      	b.n	8006c28 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006b52:	4b8e      	ldr	r3, [pc, #568]	; (8006d8c <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	6812      	ldr	r2, [r2, #0]
 8006b5a:	0691      	lsls	r1, r2, #26
 8006b5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006b6a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006b6c:	e05c      	b.n	8006c28 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006b74:	4b85      	ldr	r3, [pc, #532]	; (8006d8c <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	0691      	lsls	r1, r2, #26
 8006b7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b80:	430a      	orrs	r2, r1
 8006b82:	431a      	orrs	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006b8c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006b8e:	e04b      	b.n	8006c28 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	069b      	lsls	r3, r3, #26
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d107      	bne.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006bb2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	069b      	lsls	r3, r3, #26
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d107      	bne.n	8006bd8 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006bd6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	069b      	lsls	r3, r3, #26
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d107      	bne.n	8006bfc <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006bfa:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	069b      	lsls	r3, r3, #26
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d10a      	bne.n	8006c26 <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006c1e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8006c20:	e001      	b.n	8006c26 <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8006c26:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d108      	bne.n	8006c48 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <HAL_ADCEx_InjectedConfigChannel+0x492>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f040 8127 	bne.w	8006e9e <HAL_ADCEx_InjectedConfigChannel+0x6e6>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d00f      	beq.n	8006c78 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2201      	movs	r2, #1
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	43da      	mvns	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	400a      	ands	r2, r1
 8006c72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006c76:	e049      	b.n	8006d0c <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2201      	movs	r2, #1
 8006c86:	409a      	lsls	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b09      	cmp	r3, #9
 8006c98:	d91c      	bls.n	8006cd4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6999      	ldr	r1, [r3, #24]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	4413      	add	r3, r2
 8006caa:	3b1b      	subs	r3, #27
 8006cac:	2207      	movs	r2, #7
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	4019      	ands	r1, r3
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	6898      	ldr	r0, [r3, #8]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3b1b      	subs	r3, #27
 8006cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	619a      	str	r2, [r3, #24]
 8006cd2:	e01b      	b.n	8006d0c <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6959      	ldr	r1, [r3, #20]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	4413      	add	r3, r2
 8006ce6:	2207      	movs	r2, #7
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	43db      	mvns	r3, r3
 8006cee:	4019      	ands	r1, r3
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6898      	ldr	r0, [r3, #8]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	4413      	add	r3, r2
 8006d00:	fa00 f203 	lsl.w	r2, r0, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d14:	d004      	beq.n	8006d20 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d101      	bne.n	8006d24 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <HAL_ADCEx_InjectedConfigChannel+0x5dc>)
 8006d22:	e000      	b.n	8006d26 <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8006d24:	4b1c      	ldr	r3, [pc, #112]	; (8006d98 <HAL_ADCEx_InjectedConfigChannel+0x5e0>)
 8006d26:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d105      	bne.n	8006d3c <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d015      	beq.n	8006d68 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006d40:	2b11      	cmp	r3, #17
 8006d42:	d105      	bne.n	8006d50 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006d54:	2b12      	cmp	r3, #18
 8006d56:	f040 80a2 	bne.w	8006e9e <HAL_ADCEx_InjectedConfigChannel+0x6e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f040 809b 	bne.w	8006e9e <HAL_ADCEx_InjectedConfigChannel+0x6e6>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d70:	d102      	bne.n	8006d78 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	e023      	b.n	8006dc0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a04      	ldr	r2, [pc, #16]	; (8006d90 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d10c      	bne.n	8006d9c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8006d82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	e01a      	b.n	8006dc0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006d8a:	bf00      	nop
 8006d8c:	83fff000 	.word	0x83fff000
 8006d90:	50000100 	.word	0x50000100
 8006d94:	50000300 	.word	0x50000300
 8006d98:	50000700 	.word	0x50000700
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a45      	ldr	r2, [pc, #276]	; (8006eb8 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d102      	bne.n	8006dac <HAL_ADCEx_InjectedConfigChannel+0x5f4>
 8006da6:	4b45      	ldr	r3, [pc, #276]	; (8006ebc <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	e009      	b.n	8006dc0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a42      	ldr	r2, [pc, #264]	; (8006ebc <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d102      	bne.n	8006dbc <HAL_ADCEx_InjectedConfigChannel+0x604>
 8006db6:	4b40      	ldr	r3, [pc, #256]	; (8006eb8 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8006db8:	613b      	str	r3, [r7, #16]
 8006dba:	e001      	b.n	8006dc0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d108      	bne.n	8006de0 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_ADCEx_InjectedConfigChannel+0x628>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <HAL_ADCEx_InjectedConfigChannel+0x62a>
 8006de0:	2300      	movs	r3, #0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d150      	bne.n	8006e88 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006de6:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <HAL_ADCEx_InjectedConfigChannel+0x656>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d107      	bne.n	8006e08 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8006e04:	2301      	movs	r3, #1
 8006e06:	e000      	b.n	8006e0a <HAL_ADCEx_InjectedConfigChannel+0x652>
 8006e08:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d13c      	bne.n	8006e88 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b10      	cmp	r3, #16
 8006e14:	d11d      	bne.n	8006e52 <HAL_ADCEx_InjectedConfigChannel+0x69a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e1e:	d118      	bne.n	8006e52 <HAL_ADCEx_InjectedConfigChannel+0x69a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006e20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e2c:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a24      	ldr	r2, [pc, #144]	; (8006ec4 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	0c9a      	lsrs	r2, r3, #18
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8006e42:	e002      	b.n	8006e4a <HAL_ADCEx_InjectedConfigChannel+0x692>
          {
            wait_loop_index--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f9      	bne.n	8006e44 <HAL_ADCEx_InjectedConfigChannel+0x68c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006e50:	e024      	b.n	8006e9c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b11      	cmp	r3, #17
 8006e58:	d10b      	bne.n	8006e72 <HAL_ADCEx_InjectedConfigChannel+0x6ba>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e62:	d106      	bne.n	8006e72 <HAL_ADCEx_InjectedConfigChannel+0x6ba>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e6e:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006e70:	e014      	b.n	8006e9c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b12      	cmp	r3, #18
 8006e78:	d110      	bne.n	8006e9c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e84:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006e86:	e009      	b.n	8006e9c <HAL_ADCEx_InjectedConfigChannel+0x6e4>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8c:	f043 0220 	orr.w	r2, r3, #32
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006e9a:	e000      	b.n	8006e9e <HAL_ADCEx_InjectedConfigChannel+0x6e6>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006e9c:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006ea6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3774      	adds	r7, #116	; 0x74
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	50000400 	.word	0x50000400
 8006ebc:	50000500 	.word	0x50000500
 8006ec0:	200006d8 	.word	0x200006d8
 8006ec4:	431bde83 	.word	0x431bde83

08006ec8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b099      	sub	sp, #100	; 0x64
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ee0:	d102      	bne.n	8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006ee2:	4b6d      	ldr	r3, [pc, #436]	; (8007098 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	e01a      	b.n	8006f1e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a6a      	ldr	r2, [pc, #424]	; (8007098 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d103      	bne.n	8006efa <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006ef6:	60bb      	str	r3, [r7, #8]
 8006ef8:	e011      	b.n	8006f1e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a67      	ldr	r2, [pc, #412]	; (800709c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d102      	bne.n	8006f0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f04:	4b66      	ldr	r3, [pc, #408]	; (80070a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	e009      	b.n	8006f1e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a64      	ldr	r2, [pc, #400]	; (80070a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d102      	bne.n	8006f1a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f14:	4b61      	ldr	r3, [pc, #388]	; (800709c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	e001      	b.n	8006f1e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0b0      	b.n	800708a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e0a9      	b.n	800708a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f040 808d 	bne.w	8007068 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 8086 	bne.w	8007068 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f64:	d004      	beq.n	8006f70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a4b      	ldr	r2, [pc, #300]	; (8007098 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d101      	bne.n	8006f74 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006f70:	4b4c      	ldr	r3, [pc, #304]	; (80070a4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006f72:	e000      	b.n	8006f76 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006f74:	4b4c      	ldr	r3, [pc, #304]	; (80070a8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006f76:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d040      	beq.n	8007002 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	6859      	ldr	r1, [r3, #4]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f92:	035b      	lsls	r3, r3, #13
 8006f94:	430b      	orrs	r3, r1
 8006f96:	431a      	orrs	r2, r3
 8006f98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f9a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d108      	bne.n	8006fbc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d15c      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d107      	bne.n	8006fde <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006fde:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d14b      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006fec:	f023 030f 	bic.w	r3, r3, #15
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	6811      	ldr	r1, [r2, #0]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	6892      	ldr	r2, [r2, #8]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ffe:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007000:	e03c      	b.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800700a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800700c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	2b01      	cmp	r3, #1
 800701a:	d108      	bne.n	800702e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0301 	and.w	r3, r3, #1
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800702a:	2301      	movs	r3, #1
 800702c:	e000      	b.n	8007030 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800702e:	2300      	movs	r3, #0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d123      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f003 0303 	and.w	r3, r3, #3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d107      	bne.n	8007050 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8007050:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007052:	2b00      	cmp	r3, #0
 8007054:	d112      	bne.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8007056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800705e:	f023 030f 	bic.w	r3, r3, #15
 8007062:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007064:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007066:	e009      	b.n	800707c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f043 0220 	orr.w	r2, r3, #32
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800707a:	e000      	b.n	800707e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800707c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800708a:	4618      	mov	r0, r3
 800708c:	3764      	adds	r7, #100	; 0x64
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	50000100 	.word	0x50000100
 800709c:	50000400 	.word	0x50000400
 80070a0:	50000500 	.word	0x50000500
 80070a4:	50000300 	.word	0x50000300
 80070a8:	50000700 	.word	0x50000700

080070ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d108      	bne.n	80070d8 <ADC_Disable+0x2c>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <ADC_Disable+0x2c>
 80070d4:	2301      	movs	r3, #1
 80070d6:	e000      	b.n	80070da <ADC_Disable+0x2e>
 80070d8:	2300      	movs	r3, #0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d040      	beq.n	8007160 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 030d 	and.w	r3, r3, #13
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10f      	bne.n	800710c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0202 	orr.w	r2, r2, #2
 80070fa:	609a      	str	r2, [r3, #8]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	2203      	movs	r2, #3
 8007102:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8007104:	f7fe fe5c 	bl	8005dc0 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800710a:	e022      	b.n	8007152 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f043 0210 	orr.w	r2, r3, #16
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711c:	f043 0201 	orr.w	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e01c      	b.n	8007162 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007128:	f7fe fe4a 	bl	8005dc0 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d90d      	bls.n	8007152 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f043 0210 	orr.w	r2, r3, #16
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	f043 0201 	orr.w	r2, r3, #1
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e007      	b.n	8007162 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d0e3      	beq.n	8007128 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e0ed      	b.n	8007358 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d102      	bne.n	800718e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7fd f971 	bl	8004470 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0202 	bic.w	r2, r2, #2
 800719c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800719e:	f7fe fe0f 	bl	8005dc0 <HAL_GetTick>
 80071a2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80071a4:	e012      	b.n	80071cc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071a6:	f7fe fe0b 	bl	8005dc0 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b0a      	cmp	r3, #10
 80071b2:	d90b      	bls.n	80071cc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2205      	movs	r2, #5
 80071c4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0c5      	b.n	8007358 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e5      	bne.n	80071a6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0201 	orr.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071ea:	f7fe fde9 	bl	8005dc0 <HAL_GetTick>
 80071ee:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071f0:	e012      	b.n	8007218 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071f2:	f7fe fde5 	bl	8005dc0 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b0a      	cmp	r3, #10
 80071fe:	d90b      	bls.n	8007218 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2205      	movs	r2, #5
 8007210:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e09f      	b.n	8007358 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0e5      	beq.n	80071f2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	7e1b      	ldrb	r3, [r3, #24]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d108      	bne.n	8007240 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	e007      	b.n	8007250 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800724e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7e5b      	ldrb	r3, [r3, #25]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d108      	bne.n	800726a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e007      	b.n	800727a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007278:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7e9b      	ldrb	r3, [r3, #26]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d108      	bne.n	8007294 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0220 	orr.w	r2, r2, #32
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e007      	b.n	80072a4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0220 	bic.w	r2, r2, #32
 80072a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7edb      	ldrb	r3, [r3, #27]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d108      	bne.n	80072be <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0210 	bic.w	r2, r2, #16
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e007      	b.n	80072ce <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0210 	orr.w	r2, r2, #16
 80072cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7f1b      	ldrb	r3, [r3, #28]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d108      	bne.n	80072e8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0208 	orr.w	r2, r2, #8
 80072e4:	601a      	str	r2, [r3, #0]
 80072e6:	e007      	b.n	80072f8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0208 	bic.w	r2, r2, #8
 80072f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7f5b      	ldrb	r3, [r3, #29]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d108      	bne.n	8007312 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0204 	orr.w	r2, r2, #4
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e007      	b.n	8007322 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0204 	bic.w	r2, r2, #4
 8007320:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	ea42 0103 	orr.w	r1, r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d007      	beq.n	8007382 <HAL_COMP_Init+0x22>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f003 0310 	and.w	r3, r3, #16
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	75fb      	strb	r3, [r7, #23]
 8007386:	e064      	b.n	8007452 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007388:	4b34      	ldr	r3, [pc, #208]	; (800745c <HAL_COMP_Init+0xfc>)
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	4a33      	ldr	r2, [pc, #204]	; (800745c <HAL_COMP_Init+0xfc>)
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	6193      	str	r3, [r2, #24]
 8007394:	4b31      	ldr	r3, [pc, #196]	; (800745c <HAL_COMP_Init+0xfc>)
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7fd f8a9 	bl	80044f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d103      	bne.n	80073ba <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f023 020c 	bic.w	r2, r3, #12
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40021000 	.word	0x40021000

08007460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007470:	4b0c      	ldr	r3, [pc, #48]	; (80074a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800747c:	4013      	ands	r3, r2
 800747e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800748c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007492:	4a04      	ldr	r2, [pc, #16]	; (80074a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	60d3      	str	r3, [r2, #12]
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	e000ed00 	.word	0xe000ed00

080074a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074ac:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <__NVIC_GetPriorityGrouping+0x18>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	f003 0307 	and.w	r3, r3, #7
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	e000ed00 	.word	0xe000ed00

080074c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	db0b      	blt.n	80074ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	f003 021f 	and.w	r2, r3, #31
 80074dc:	4907      	ldr	r1, [pc, #28]	; (80074fc <__NVIC_EnableIRQ+0x38>)
 80074de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	2001      	movs	r0, #1
 80074e6:	fa00 f202 	lsl.w	r2, r0, r2
 80074ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	e000e100 	.word	0xe000e100

08007500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800750c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007510:	2b00      	cmp	r3, #0
 8007512:	db0a      	blt.n	800752a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	490c      	ldr	r1, [pc, #48]	; (800754c <__NVIC_SetPriority+0x4c>)
 800751a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800751e:	0112      	lsls	r2, r2, #4
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	440b      	add	r3, r1
 8007524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007528:	e00a      	b.n	8007540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	b2da      	uxtb	r2, r3
 800752e:	4908      	ldr	r1, [pc, #32]	; (8007550 <__NVIC_SetPriority+0x50>)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	3b04      	subs	r3, #4
 8007538:	0112      	lsls	r2, r2, #4
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	440b      	add	r3, r1
 800753e:	761a      	strb	r2, [r3, #24]
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	e000e100 	.word	0xe000e100
 8007550:	e000ed00 	.word	0xe000ed00

08007554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007554:	b480      	push	{r7}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f1c3 0307 	rsb	r3, r3, #7
 800756e:	2b04      	cmp	r3, #4
 8007570:	bf28      	it	cs
 8007572:	2304      	movcs	r3, #4
 8007574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	3304      	adds	r3, #4
 800757a:	2b06      	cmp	r3, #6
 800757c:	d902      	bls.n	8007584 <NVIC_EncodePriority+0x30>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3b03      	subs	r3, #3
 8007582:	e000      	b.n	8007586 <NVIC_EncodePriority+0x32>
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	43da      	mvns	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	401a      	ands	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800759c:	f04f 31ff 	mov.w	r1, #4294967295
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	fa01 f303 	lsl.w	r3, r1, r3
 80075a6:	43d9      	mvns	r1, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075ac:	4313      	orrs	r3, r2
         );
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3724      	adds	r7, #36	; 0x24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075cc:	d301      	bcc.n	80075d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075ce:	2301      	movs	r3, #1
 80075d0:	e00f      	b.n	80075f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075d2:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <SysTick_Config+0x40>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075da:	210f      	movs	r1, #15
 80075dc:	f04f 30ff 	mov.w	r0, #4294967295
 80075e0:	f7ff ff8e 	bl	8007500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <SysTick_Config+0x40>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075ea:	4b04      	ldr	r3, [pc, #16]	; (80075fc <SysTick_Config+0x40>)
 80075ec:	2207      	movs	r2, #7
 80075ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	e000e010 	.word	0xe000e010

08007600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff29 	bl	8007460 <__NVIC_SetPriorityGrouping>
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	4603      	mov	r3, r0
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007628:	f7ff ff3e 	bl	80074a8 <__NVIC_GetPriorityGrouping>
 800762c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	68b9      	ldr	r1, [r7, #8]
 8007632:	6978      	ldr	r0, [r7, #20]
 8007634:	f7ff ff8e 	bl	8007554 <NVIC_EncodePriority>
 8007638:	4602      	mov	r2, r0
 800763a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800763e:	4611      	mov	r1, r2
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff ff5d 	bl	8007500 <__NVIC_SetPriority>
}
 8007646:	bf00      	nop
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b082      	sub	sp, #8
 8007652:	af00      	add	r7, sp, #0
 8007654:	4603      	mov	r3, r0
 8007656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff ff31 	bl	80074c4 <__NVIC_EnableIRQ>
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b082      	sub	sp, #8
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff ffa2 	bl	80075bc <SysTick_Config>
 8007678:	4603      	mov	r3, r0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007686:	f000 f802 	bl	800768e <HAL_SYSTICK_Callback>
}
 800768a:	bf00      	nop
 800768c:	bd80      	pop	{r7, pc}

0800768e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800768e:	b480      	push	{r7}
 8007690:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007692:	bf00      	nop
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e014      	b.n	80076d8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	791b      	ldrb	r3, [r3, #4]
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d105      	bne.n	80076c4 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fc ff90 	bl	80045e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	795b      	ldrb	r3, [r3, #5]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_DAC_ConfigChannel+0x20>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e036      	b.n	800776e <HAL_DAC_ConfigChannel+0x8e>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2202      	movs	r2, #2
 800770a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8007714:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	fa02 f303 	lsl.w	r3, r2, r3
 800771e:	43db      	mvns	r3, r3
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4013      	ands	r3, r2
 8007724:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6819      	ldr	r1, [r3, #0]
 800774e:	22c0      	movs	r2, #192	; 0xc0
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	fa02 f303 	lsl.w	r3, r2, r3
 8007756:	43da      	mvns	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	400a      	ands	r2, r1
 800775e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	371c      	adds	r7, #28
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800778a:	e154      	b.n	8007a36 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	2101      	movs	r1, #1
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	fa01 f303 	lsl.w	r3, r1, r3
 8007798:	4013      	ands	r3, r2
 800779a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8146 	beq.w	8007a30 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d003      	beq.n	80077b4 <HAL_GPIO_Init+0x38>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b12      	cmp	r3, #18
 80077b2:	d123      	bne.n	80077fc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	08da      	lsrs	r2, r3, #3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3208      	adds	r2, #8
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	220f      	movs	r2, #15
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	43db      	mvns	r3, r3
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4013      	ands	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	08da      	lsrs	r2, r3, #3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3208      	adds	r2, #8
 80077f6:	6939      	ldr	r1, [r7, #16]
 80077f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	2203      	movs	r2, #3
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	43db      	mvns	r3, r3
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4013      	ands	r3, r2
 8007812:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f003 0203 	and.w	r2, r3, #3
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	4313      	orrs	r3, r2
 8007828:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d00b      	beq.n	8007850 <HAL_GPIO_Init+0xd4>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d007      	beq.n	8007850 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007844:	2b11      	cmp	r3, #17
 8007846:	d003      	beq.n	8007850 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b12      	cmp	r3, #18
 800784e:	d130      	bne.n	80078b2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	2203      	movs	r2, #3
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4013      	ands	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007886:	2201      	movs	r2, #1
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	fa02 f303 	lsl.w	r3, r2, r3
 800788e:	43db      	mvns	r3, r3
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4013      	ands	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	091b      	lsrs	r3, r3, #4
 800789c:	f003 0201 	and.w	r2, r3, #1
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	fa02 f303 	lsl.w	r3, r2, r3
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	2203      	movs	r2, #3
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4013      	ands	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	fa02 f303 	lsl.w	r3, r2, r3
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 80a0 	beq.w	8007a30 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078f0:	4b58      	ldr	r3, [pc, #352]	; (8007a54 <HAL_GPIO_Init+0x2d8>)
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	4a57      	ldr	r2, [pc, #348]	; (8007a54 <HAL_GPIO_Init+0x2d8>)
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	6193      	str	r3, [r2, #24]
 80078fc:	4b55      	ldr	r3, [pc, #340]	; (8007a54 <HAL_GPIO_Init+0x2d8>)
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007908:	4a53      	ldr	r2, [pc, #332]	; (8007a58 <HAL_GPIO_Init+0x2dc>)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	3302      	adds	r3, #2
 8007910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	220f      	movs	r2, #15
 8007920:	fa02 f303 	lsl.w	r3, r2, r3
 8007924:	43db      	mvns	r3, r3
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4013      	ands	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007932:	d019      	beq.n	8007968 <HAL_GPIO_Init+0x1ec>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a49      	ldr	r2, [pc, #292]	; (8007a5c <HAL_GPIO_Init+0x2e0>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d013      	beq.n	8007964 <HAL_GPIO_Init+0x1e8>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a48      	ldr	r2, [pc, #288]	; (8007a60 <HAL_GPIO_Init+0x2e4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00d      	beq.n	8007960 <HAL_GPIO_Init+0x1e4>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a47      	ldr	r2, [pc, #284]	; (8007a64 <HAL_GPIO_Init+0x2e8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d007      	beq.n	800795c <HAL_GPIO_Init+0x1e0>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a46      	ldr	r2, [pc, #280]	; (8007a68 <HAL_GPIO_Init+0x2ec>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d101      	bne.n	8007958 <HAL_GPIO_Init+0x1dc>
 8007954:	2304      	movs	r3, #4
 8007956:	e008      	b.n	800796a <HAL_GPIO_Init+0x1ee>
 8007958:	2305      	movs	r3, #5
 800795a:	e006      	b.n	800796a <HAL_GPIO_Init+0x1ee>
 800795c:	2303      	movs	r3, #3
 800795e:	e004      	b.n	800796a <HAL_GPIO_Init+0x1ee>
 8007960:	2302      	movs	r3, #2
 8007962:	e002      	b.n	800796a <HAL_GPIO_Init+0x1ee>
 8007964:	2301      	movs	r3, #1
 8007966:	e000      	b.n	800796a <HAL_GPIO_Init+0x1ee>
 8007968:	2300      	movs	r3, #0
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	f002 0203 	and.w	r2, r2, #3
 8007970:	0092      	lsls	r2, r2, #2
 8007972:	4093      	lsls	r3, r2
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800797a:	4937      	ldr	r1, [pc, #220]	; (8007a58 <HAL_GPIO_Init+0x2dc>)
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	089b      	lsrs	r3, r3, #2
 8007980:	3302      	adds	r3, #2
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007988:	4b38      	ldr	r3, [pc, #224]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	43db      	mvns	r3, r3
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4013      	ands	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80079a4:	693a      	ldr	r2, [r7, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80079ac:	4a2f      	ldr	r2, [pc, #188]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80079b2:	4b2e      	ldr	r3, [pc, #184]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	43db      	mvns	r3, r3
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	4013      	ands	r3, r2
 80079c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80079d6:	4a25      	ldr	r2, [pc, #148]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079dc:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	43db      	mvns	r3, r3
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	4013      	ands	r3, r2
 80079ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007a00:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a06:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4013      	ands	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007a2a:	4a10      	ldr	r2, [pc, #64]	; (8007a6c <HAL_GPIO_Init+0x2f0>)
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	3301      	adds	r3, #1
 8007a34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f47f aea3 	bne.w	800778c <HAL_GPIO_Init+0x10>
  }
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	40021000 	.word	0x40021000
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	48000400 	.word	0x48000400
 8007a60:	48000800 	.word	0x48000800
 8007a64:	48000c00 	.word	0x48000c00
 8007a68:	48001000 	.word	0x48001000
 8007a6c:	40010400 	.word	0x40010400

08007a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	807b      	strh	r3, [r7, #2]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a80:	787b      	ldrb	r3, [r7, #1]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007a86:	887a      	ldrh	r2, [r7, #2]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007a8c:	e002      	b.n	8007a94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007a8e:	887a      	ldrh	r2, [r7, #2]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	1d3b      	adds	r3, r7, #4
 8007aaa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007aac:	1d3b      	adds	r3, r7, #4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d102      	bne.n	8007aba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f000 bef4 	b.w	80088a2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 816a 	beq.w	8007d9e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007aca:	4bb3      	ldr	r3, [pc, #716]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f003 030c 	and.w	r3, r3, #12
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d00c      	beq.n	8007af0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ad6:	4bb0      	ldr	r3, [pc, #704]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f003 030c 	and.w	r3, r3, #12
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d159      	bne.n	8007b96 <HAL_RCC_OscConfig+0xf6>
 8007ae2:	4bad      	ldr	r3, [pc, #692]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aee:	d152      	bne.n	8007b96 <HAL_RCC_OscConfig+0xf6>
 8007af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007af4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007af8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007afc:	fa93 f3a3 	rbit	r3, r3
 8007b00:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8007b04:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b08:	fab3 f383 	clz	r3, r3
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d102      	bne.n	8007b22 <HAL_RCC_OscConfig+0x82>
 8007b1c:	4b9e      	ldr	r3, [pc, #632]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	e015      	b.n	8007b4e <HAL_RCC_OscConfig+0xae>
 8007b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b2a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007b2e:	fa93 f3a3 	rbit	r3, r3
 8007b32:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b3a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007b3e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007b42:	fa93 f3a3 	rbit	r3, r3
 8007b46:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007b4a:	4b93      	ldr	r3, [pc, #588]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007b52:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007b56:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007b5a:	fa92 f2a2 	rbit	r2, r2
 8007b5e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007b62:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007b66:	fab2 f282 	clz	r2, r2
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	f042 0220 	orr.w	r2, r2, #32
 8007b70:	b2d2      	uxtb	r2, r2
 8007b72:	f002 021f 	and.w	r2, r2, #31
 8007b76:	2101      	movs	r1, #1
 8007b78:	fa01 f202 	lsl.w	r2, r1, r2
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 810c 	beq.w	8007d9c <HAL_RCC_OscConfig+0x2fc>
 8007b84:	1d3b      	adds	r3, r7, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 8106 	bne.w	8007d9c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	f000 be86 	b.w	80088a2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b96:	1d3b      	adds	r3, r7, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x110>
 8007ba2:	4b7d      	ldr	r3, [pc, #500]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a7c      	ldr	r2, [pc, #496]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	e030      	b.n	8007c12 <HAL_RCC_OscConfig+0x172>
 8007bb0:	1d3b      	adds	r3, r7, #4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x134>
 8007bba:	4b77      	ldr	r3, [pc, #476]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a76      	ldr	r2, [pc, #472]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	4b74      	ldr	r3, [pc, #464]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a73      	ldr	r2, [pc, #460]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	e01e      	b.n	8007c12 <HAL_RCC_OscConfig+0x172>
 8007bd4:	1d3b      	adds	r3, r7, #4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bde:	d10c      	bne.n	8007bfa <HAL_RCC_OscConfig+0x15a>
 8007be0:	4b6d      	ldr	r3, [pc, #436]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a6c      	ldr	r2, [pc, #432]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	4b6a      	ldr	r3, [pc, #424]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a69      	ldr	r2, [pc, #420]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	e00b      	b.n	8007c12 <HAL_RCC_OscConfig+0x172>
 8007bfa:	4b67      	ldr	r3, [pc, #412]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a66      	ldr	r2, [pc, #408]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	4b64      	ldr	r3, [pc, #400]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a63      	ldr	r2, [pc, #396]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c10:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c12:	4b61      	ldr	r3, [pc, #388]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	f023 020f 	bic.w	r2, r3, #15
 8007c1a:	1d3b      	adds	r3, r7, #4
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	495d      	ldr	r1, [pc, #372]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d059      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c30:	f7fe f8c6 	bl	8005dc0 <HAL_GetTick>
 8007c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c38:	e00a      	b.n	8007c50 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c3a:	f7fe f8c1 	bl	8005dc0 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b64      	cmp	r3, #100	; 0x64
 8007c48:	d902      	bls.n	8007c50 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	f000 be29 	b.w	80088a2 <HAL_RCC_OscConfig+0xe02>
 8007c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c54:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007c5c:	fa93 f3a3 	rbit	r3, r3
 8007c60:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007c64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c68:	fab3 f383 	clz	r3, r3
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	095b      	lsrs	r3, r3, #5
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d102      	bne.n	8007c82 <HAL_RCC_OscConfig+0x1e2>
 8007c7c:	4b46      	ldr	r3, [pc, #280]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	e015      	b.n	8007cae <HAL_RCC_OscConfig+0x20e>
 8007c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c8a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007c8e:	fa93 f3a3 	rbit	r3, r3
 8007c92:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007c96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c9a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007c9e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007ca2:	fa93 f3a3 	rbit	r3, r3
 8007ca6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007caa:	4b3b      	ldr	r3, [pc, #236]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007cb2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007cb6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007cba:	fa92 f2a2 	rbit	r2, r2
 8007cbe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007cc2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007cc6:	fab2 f282 	clz	r2, r2
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	f042 0220 	orr.w	r2, r2, #32
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	f002 021f 	and.w	r2, r2, #31
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0ab      	beq.n	8007c3a <HAL_RCC_OscConfig+0x19a>
 8007ce2:	e05c      	b.n	8007d9e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ce4:	f7fe f86c 	bl	8005dc0 <HAL_GetTick>
 8007ce8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cec:	e00a      	b.n	8007d04 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cee:	f7fe f867 	bl	8005dc0 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b64      	cmp	r3, #100	; 0x64
 8007cfc:	d902      	bls.n	8007d04 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	f000 bdcf 	b.w	80088a2 <HAL_RCC_OscConfig+0xe02>
 8007d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007d10:	fa93 f3a3 	rbit	r3, r3
 8007d14:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007d18:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d1c:	fab3 f383 	clz	r3, r3
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	f043 0301 	orr.w	r3, r3, #1
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d102      	bne.n	8007d36 <HAL_RCC_OscConfig+0x296>
 8007d30:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	e015      	b.n	8007d62 <HAL_RCC_OscConfig+0x2c2>
 8007d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007d42:	fa93 f3a3 	rbit	r3, r3
 8007d46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007d52:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007d56:	fa93 f3a3 	rbit	r3, r3
 8007d5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007d5e:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <HAL_RCC_OscConfig+0x2f8>)
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007d6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007d6e:	fa92 f2a2 	rbit	r2, r2
 8007d72:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007d76:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007d7a:	fab2 f282 	clz	r2, r2
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	f042 0220 	orr.w	r2, r2, #32
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	f002 021f 	and.w	r2, r2, #31
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d90:	4013      	ands	r3, r2
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1ab      	bne.n	8007cee <HAL_RCC_OscConfig+0x24e>
 8007d96:	e002      	b.n	8007d9e <HAL_RCC_OscConfig+0x2fe>
 8007d98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d9e:	1d3b      	adds	r3, r7, #4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0302 	and.w	r3, r3, #2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 816f 	beq.w	800808c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007dae:	4bd0      	ldr	r3, [pc, #832]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f003 030c 	and.w	r3, r3, #12
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007dba:	4bcd      	ldr	r3, [pc, #820]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f003 030c 	and.w	r3, r3, #12
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	d16c      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x400>
 8007dc6:	4bca      	ldr	r3, [pc, #808]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d166      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x400>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007ddc:	fa93 f3a3 	rbit	r3, r3
 8007de0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007de4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de8:	fab3 f383 	clz	r3, r3
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	f043 0301 	orr.w	r3, r3, #1
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d102      	bne.n	8007e02 <HAL_RCC_OscConfig+0x362>
 8007dfc:	4bbc      	ldr	r3, [pc, #752]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	e013      	b.n	8007e2a <HAL_RCC_OscConfig+0x38a>
 8007e02:	2302      	movs	r3, #2
 8007e04:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e08:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007e0c:	fa93 f3a3 	rbit	r3, r3
 8007e10:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007e14:	2302      	movs	r3, #2
 8007e16:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007e1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007e1e:	fa93 f3a3 	rbit	r3, r3
 8007e22:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007e26:	4bb2      	ldr	r3, [pc, #712]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007e30:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007e34:	fa92 f2a2 	rbit	r2, r2
 8007e38:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007e3c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007e40:	fab2 f282 	clz	r2, r2
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	f042 0220 	orr.w	r2, r2, #32
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	f002 021f 	and.w	r2, r2, #31
 8007e50:	2101      	movs	r1, #1
 8007e52:	fa01 f202 	lsl.w	r2, r1, r2
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <HAL_RCC_OscConfig+0x3cc>
 8007e5c:	1d3b      	adds	r3, r7, #4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d002      	beq.n	8007e6c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	f000 bd1b 	b.w	80088a2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e6c:	4ba0      	ldr	r3, [pc, #640]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e74:	1d3b      	adds	r3, r7, #4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	21f8      	movs	r1, #248	; 0xf8
 8007e7c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e80:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007e84:	fa91 f1a1 	rbit	r1, r1
 8007e88:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007e8c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007e90:	fab1 f181 	clz	r1, r1
 8007e94:	b2c9      	uxtb	r1, r1
 8007e96:	408b      	lsls	r3, r1
 8007e98:	4995      	ldr	r1, [pc, #596]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9e:	e0f5      	b.n	800808c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ea0:	1d3b      	adds	r3, r7, #4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8085 	beq.w	8007fb6 <HAL_RCC_OscConfig+0x516>
 8007eac:	2301      	movs	r3, #1
 8007eae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007eb6:	fa93 f3a3 	rbit	r3, r3
 8007eba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007ebe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ec2:	fab3 f383 	clz	r3, r3
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ed8:	f7fd ff72 	bl	8005dc0 <HAL_GetTick>
 8007edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ee0:	e00a      	b.n	8007ef8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ee2:	f7fd ff6d 	bl	8005dc0 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d902      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	f000 bcd5 	b.w	80088a2 <HAL_RCC_OscConfig+0xe02>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007efe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007f02:	fa93 f3a3 	rbit	r3, r3
 8007f06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007f0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f0e:	fab3 f383 	clz	r3, r3
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f043 0301 	orr.w	r3, r3, #1
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d102      	bne.n	8007f28 <HAL_RCC_OscConfig+0x488>
 8007f22:	4b73      	ldr	r3, [pc, #460]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	e013      	b.n	8007f50 <HAL_RCC_OscConfig+0x4b0>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007f32:	fa93 f3a3 	rbit	r3, r3
 8007f36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007f40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007f44:	fa93 f3a3 	rbit	r3, r3
 8007f48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007f4c:	4b68      	ldr	r3, [pc, #416]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	2202      	movs	r2, #2
 8007f52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007f56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007f5a:	fa92 f2a2 	rbit	r2, r2
 8007f5e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007f62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007f66:	fab2 f282 	clz	r2, r2
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	f042 0220 	orr.w	r2, r2, #32
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	f002 021f 	and.w	r2, r2, #31
 8007f76:	2101      	movs	r1, #1
 8007f78:	fa01 f202 	lsl.w	r2, r1, r2
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0af      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f82:	4b5b      	ldr	r3, [pc, #364]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f8a:	1d3b      	adds	r3, r7, #4
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	21f8      	movs	r1, #248	; 0xf8
 8007f92:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f96:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007f9a:	fa91 f1a1 	rbit	r1, r1
 8007f9e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007fa2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007fa6:	fab1 f181 	clz	r1, r1
 8007faa:	b2c9      	uxtb	r1, r1
 8007fac:	408b      	lsls	r3, r1
 8007fae:	4950      	ldr	r1, [pc, #320]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	600b      	str	r3, [r1, #0]
 8007fb4:	e06a      	b.n	800808c <HAL_RCC_OscConfig+0x5ec>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007fc0:	fa93 f3a3 	rbit	r3, r3
 8007fc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fcc:	fab3 f383 	clz	r3, r3
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007fd6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	2300      	movs	r3, #0
 8007fe0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fe2:	f7fd feed 	bl	8005dc0 <HAL_GetTick>
 8007fe6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007fea:	e00a      	b.n	8008002 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fec:	f7fd fee8 	bl	8005dc0 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d902      	bls.n	8008002 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	f000 bc50 	b.w	80088a2 <HAL_RCC_OscConfig+0xe02>
 8008002:	2302      	movs	r3, #2
 8008004:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008008:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800800c:	fa93 f3a3 	rbit	r3, r3
 8008010:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8008014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008018:	fab3 f383 	clz	r3, r3
 800801c:	b2db      	uxtb	r3, r3
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b01      	cmp	r3, #1
 800802a:	d102      	bne.n	8008032 <HAL_RCC_OscConfig+0x592>
 800802c:	4b30      	ldr	r3, [pc, #192]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	e013      	b.n	800805a <HAL_RCC_OscConfig+0x5ba>
 8008032:	2302      	movs	r3, #2
 8008034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800803c:	fa93 f3a3 	rbit	r3, r3
 8008040:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008044:	2302      	movs	r3, #2
 8008046:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800804a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800804e:	fa93 f3a3 	rbit	r3, r3
 8008052:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008056:	4b26      	ldr	r3, [pc, #152]	; (80080f0 <HAL_RCC_OscConfig+0x650>)
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	2202      	movs	r2, #2
 800805c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8008060:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008064:	fa92 f2a2 	rbit	r2, r2
 8008068:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800806c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008070:	fab2 f282 	clz	r2, r2
 8008074:	b2d2      	uxtb	r2, r2
 8008076:	f042 0220 	orr.w	r2, r2, #32
 800807a:	b2d2      	uxtb	r2, r2
 800807c:	f002 021f 	and.w	r2, r2, #31
 8008080:	2101      	movs	r1, #1
 8008082:	fa01 f202 	lsl.w	r2, r1, r2
 8008086:	4013      	ands	r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1af      	bne.n	8007fec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800808c:	1d3b      	adds	r3, r7, #4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	f000 80da 	beq.w	8008250 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800809c:	1d3b      	adds	r3, r7, #4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d069      	beq.n	800817a <HAL_RCC_OscConfig+0x6da>
 80080a6:	2301      	movs	r3, #1
 80080a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080b0:	fa93 f3a3 	rbit	r3, r3
 80080b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80080b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080bc:	fab3 f383 	clz	r3, r3
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	461a      	mov	r2, r3
 80080c4:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <HAL_RCC_OscConfig+0x654>)
 80080c6:	4413      	add	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	461a      	mov	r2, r3
 80080cc:	2301      	movs	r3, #1
 80080ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080d0:	f7fd fe76 	bl	8005dc0 <HAL_GetTick>
 80080d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080d8:	e00e      	b.n	80080f8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080da:	f7fd fe71 	bl	8005dc0 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d906      	bls.n	80080f8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e3d9      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
 80080ee:	bf00      	nop
 80080f0:	40021000 	.word	0x40021000
 80080f4:	10908120 	.word	0x10908120
 80080f8:	2302      	movs	r3, #2
 80080fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008102:	fa93 f3a3 	rbit	r3, r3
 8008106:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800810a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800810e:	2202      	movs	r2, #2
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	fa93 f2a3 	rbit	r2, r3
 800811c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008126:	2202      	movs	r2, #2
 8008128:	601a      	str	r2, [r3, #0]
 800812a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	fa93 f2a3 	rbit	r2, r3
 8008134:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008138:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800813a:	4ba5      	ldr	r3, [pc, #660]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 800813c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800813e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008142:	2102      	movs	r1, #2
 8008144:	6019      	str	r1, [r3, #0]
 8008146:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	fa93 f1a3 	rbit	r1, r3
 8008150:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008154:	6019      	str	r1, [r3, #0]
  return result;
 8008156:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	fab3 f383 	clz	r3, r3
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2101      	movs	r1, #1
 800816e:	fa01 f303 	lsl.w	r3, r1, r3
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0b0      	beq.n	80080da <HAL_RCC_OscConfig+0x63a>
 8008178:	e06a      	b.n	8008250 <HAL_RCC_OscConfig+0x7b0>
 800817a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008182:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	fa93 f2a3 	rbit	r2, r3
 800818c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008190:	601a      	str	r2, [r3, #0]
  return result;
 8008192:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008196:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008198:	fab3 f383 	clz	r3, r3
 800819c:	b2db      	uxtb	r3, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	4b8c      	ldr	r3, [pc, #560]	; (80083d4 <HAL_RCC_OscConfig+0x934>)
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	461a      	mov	r2, r3
 80081a8:	2300      	movs	r3, #0
 80081aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ac:	f7fd fe08 	bl	8005dc0 <HAL_GetTick>
 80081b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081b4:	e009      	b.n	80081ca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081b6:	f7fd fe03 	bl	8005dc0 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d901      	bls.n	80081ca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e36b      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
 80081ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80081ce:	2202      	movs	r2, #2
 80081d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	fa93 f2a3 	rbit	r2, r3
 80081dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80081e6:	2202      	movs	r2, #2
 80081e8:	601a      	str	r2, [r3, #0]
 80081ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	fa93 f2a3 	rbit	r2, r3
 80081f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80081fe:	2202      	movs	r2, #2
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	fa93 f2a3 	rbit	r2, r3
 800820c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008210:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008212:	4b6f      	ldr	r3, [pc, #444]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008216:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800821a:	2102      	movs	r1, #2
 800821c:	6019      	str	r1, [r3, #0]
 800821e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	fa93 f1a3 	rbit	r1, r3
 8008228:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800822c:	6019      	str	r1, [r3, #0]
  return result;
 800822e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	fab3 f383 	clz	r3, r3
 8008238:	b2db      	uxtb	r3, r3
 800823a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 031f 	and.w	r3, r3, #31
 8008244:	2101      	movs	r1, #1
 8008246:	fa01 f303 	lsl.w	r3, r1, r3
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1b2      	bne.n	80081b6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8158 	beq.w	8008510 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008266:	4b5a      	ldr	r3, [pc, #360]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d112      	bne.n	8008298 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008272:	4b57      	ldr	r3, [pc, #348]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	4a56      	ldr	r2, [pc, #344]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800827c:	61d3      	str	r3, [r2, #28]
 800827e:	4b54      	ldr	r3, [pc, #336]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008286:	f107 0308 	add.w	r3, r7, #8
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	f107 0308 	add.w	r3, r7, #8
 8008290:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008292:	2301      	movs	r3, #1
 8008294:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008298:	4b4f      	ldr	r3, [pc, #316]	; (80083d8 <HAL_RCC_OscConfig+0x938>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d11a      	bne.n	80082da <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082a4:	4b4c      	ldr	r3, [pc, #304]	; (80083d8 <HAL_RCC_OscConfig+0x938>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a4b      	ldr	r2, [pc, #300]	; (80083d8 <HAL_RCC_OscConfig+0x938>)
 80082aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082b0:	f7fd fd86 	bl	8005dc0 <HAL_GetTick>
 80082b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082b8:	e009      	b.n	80082ce <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082ba:	f7fd fd81 	bl	8005dc0 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b64      	cmp	r3, #100	; 0x64
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e2e9      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082ce:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <HAL_RCC_OscConfig+0x938>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0ef      	beq.n	80082ba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082da:	1d3b      	adds	r3, r7, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d106      	bne.n	80082f2 <HAL_RCC_OscConfig+0x852>
 80082e4:	4b3a      	ldr	r3, [pc, #232]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	4a39      	ldr	r2, [pc, #228]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 80082ea:	f043 0301 	orr.w	r3, r3, #1
 80082ee:	6213      	str	r3, [r2, #32]
 80082f0:	e02f      	b.n	8008352 <HAL_RCC_OscConfig+0x8b2>
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10c      	bne.n	8008316 <HAL_RCC_OscConfig+0x876>
 80082fc:	4b34      	ldr	r3, [pc, #208]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	4a33      	ldr	r2, [pc, #204]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	6213      	str	r3, [r2, #32]
 8008308:	4b31      	ldr	r3, [pc, #196]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	4a30      	ldr	r2, [pc, #192]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 800830e:	f023 0304 	bic.w	r3, r3, #4
 8008312:	6213      	str	r3, [r2, #32]
 8008314:	e01d      	b.n	8008352 <HAL_RCC_OscConfig+0x8b2>
 8008316:	1d3b      	adds	r3, r7, #4
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b05      	cmp	r3, #5
 800831e:	d10c      	bne.n	800833a <HAL_RCC_OscConfig+0x89a>
 8008320:	4b2b      	ldr	r3, [pc, #172]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	4a2a      	ldr	r2, [pc, #168]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008326:	f043 0304 	orr.w	r3, r3, #4
 800832a:	6213      	str	r3, [r2, #32]
 800832c:	4b28      	ldr	r3, [pc, #160]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	4a27      	ldr	r2, [pc, #156]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	6213      	str	r3, [r2, #32]
 8008338:	e00b      	b.n	8008352 <HAL_RCC_OscConfig+0x8b2>
 800833a:	4b25      	ldr	r3, [pc, #148]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	4a24      	ldr	r2, [pc, #144]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	6213      	str	r3, [r2, #32]
 8008346:	4b22      	ldr	r3, [pc, #136]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	4a21      	ldr	r2, [pc, #132]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 800834c:	f023 0304 	bic.w	r3, r3, #4
 8008350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008352:	1d3b      	adds	r3, r7, #4
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d06b      	beq.n	8008434 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800835c:	f7fd fd30 	bl	8005dc0 <HAL_GetTick>
 8008360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008364:	e00b      	b.n	800837e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008366:	f7fd fd2b 	bl	8005dc0 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	f241 3288 	movw	r2, #5000	; 0x1388
 8008376:	4293      	cmp	r3, r2
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e291      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
 800837e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8008382:	2202      	movs	r2, #2
 8008384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008386:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	fa93 f2a3 	rbit	r2, r3
 8008390:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800839a:	2202      	movs	r2, #2
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	fa93 f2a3 	rbit	r2, r3
 80083a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80083ac:	601a      	str	r2, [r3, #0]
  return result;
 80083ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80083b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b4:	fab3 f383 	clz	r3, r3
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f043 0302 	orr.w	r3, r3, #2
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d109      	bne.n	80083dc <HAL_RCC_OscConfig+0x93c>
 80083c8:	4b01      	ldr	r3, [pc, #4]	; (80083d0 <HAL_RCC_OscConfig+0x930>)
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	e014      	b.n	80083f8 <HAL_RCC_OscConfig+0x958>
 80083ce:	bf00      	nop
 80083d0:	40021000 	.word	0x40021000
 80083d4:	10908120 	.word	0x10908120
 80083d8:	40007000 	.word	0x40007000
 80083dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80083e0:	2202      	movs	r2, #2
 80083e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	fa93 f2a3 	rbit	r2, r3
 80083ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	4bbb      	ldr	r3, [pc, #748]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 80083f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80083fc:	2102      	movs	r1, #2
 80083fe:	6011      	str	r1, [r2, #0]
 8008400:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008404:	6812      	ldr	r2, [r2, #0]
 8008406:	fa92 f1a2 	rbit	r1, r2
 800840a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800840e:	6011      	str	r1, [r2, #0]
  return result;
 8008410:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	fab2 f282 	clz	r2, r2
 800841a:	b2d2      	uxtb	r2, r2
 800841c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008420:	b2d2      	uxtb	r2, r2
 8008422:	f002 021f 	and.w	r2, r2, #31
 8008426:	2101      	movs	r1, #1
 8008428:	fa01 f202 	lsl.w	r2, r1, r2
 800842c:	4013      	ands	r3, r2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d099      	beq.n	8008366 <HAL_RCC_OscConfig+0x8c6>
 8008432:	e063      	b.n	80084fc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008434:	f7fd fcc4 	bl	8005dc0 <HAL_GetTick>
 8008438:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800843c:	e00b      	b.n	8008456 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800843e:	f7fd fcbf 	bl	8005dc0 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	f241 3288 	movw	r2, #5000	; 0x1388
 800844e:	4293      	cmp	r3, r2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e225      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
 8008456:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800845a:	2202      	movs	r2, #2
 800845c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	fa93 f2a3 	rbit	r2, r3
 8008468:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008472:	2202      	movs	r2, #2
 8008474:	601a      	str	r2, [r3, #0]
 8008476:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	fa93 f2a3 	rbit	r2, r3
 8008480:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008484:	601a      	str	r2, [r3, #0]
  return result;
 8008486:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800848a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800848c:	fab3 f383 	clz	r3, r3
 8008490:	b2db      	uxtb	r3, r3
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f043 0302 	orr.w	r3, r3, #2
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b02      	cmp	r3, #2
 800849e:	d102      	bne.n	80084a6 <HAL_RCC_OscConfig+0xa06>
 80084a0:	4b90      	ldr	r3, [pc, #576]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	e00d      	b.n	80084c2 <HAL_RCC_OscConfig+0xa22>
 80084a6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80084aa:	2202      	movs	r2, #2
 80084ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	fa93 f2a3 	rbit	r2, r3
 80084b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	4b89      	ldr	r3, [pc, #548]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80084c6:	2102      	movs	r1, #2
 80084c8:	6011      	str	r1, [r2, #0]
 80084ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	fa92 f1a2 	rbit	r1, r2
 80084d4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80084d8:	6011      	str	r1, [r2, #0]
  return result;
 80084da:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	fab2 f282 	clz	r2, r2
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	f002 021f 	and.w	r2, r2, #31
 80084f0:	2101      	movs	r1, #1
 80084f2:	fa01 f202 	lsl.w	r2, r1, r2
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1a0      	bne.n	800843e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084fc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008500:	2b01      	cmp	r3, #1
 8008502:	d105      	bne.n	8008510 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008504:	4b77      	ldr	r3, [pc, #476]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	4a76      	ldr	r2, [pc, #472]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 800850a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800850e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008510:	1d3b      	adds	r3, r7, #4
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 81c2 	beq.w	80088a0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800851c:	4b71      	ldr	r3, [pc, #452]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f003 030c 	and.w	r3, r3, #12
 8008524:	2b08      	cmp	r3, #8
 8008526:	f000 819c 	beq.w	8008862 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800852a:	1d3b      	adds	r3, r7, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	2b02      	cmp	r3, #2
 8008532:	f040 8114 	bne.w	800875e <HAL_RCC_OscConfig+0xcbe>
 8008536:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800853a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800853e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008540:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	fa93 f2a3 	rbit	r2, r3
 800854a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800854e:	601a      	str	r2, [r3, #0]
  return result;
 8008550:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8008554:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008556:	fab3 f383 	clz	r3, r3
 800855a:	b2db      	uxtb	r3, r3
 800855c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008560:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	461a      	mov	r2, r3
 8008568:	2300      	movs	r3, #0
 800856a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800856c:	f7fd fc28 	bl	8005dc0 <HAL_GetTick>
 8008570:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008574:	e009      	b.n	800858a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008576:	f7fd fc23 	bl	8005dc0 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e18b      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
 800858a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800858e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008592:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008594:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	fa93 f2a3 	rbit	r2, r3
 800859e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80085a2:	601a      	str	r2, [r3, #0]
  return result;
 80085a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80085a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085aa:	fab3 f383 	clz	r3, r3
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d102      	bne.n	80085c4 <HAL_RCC_OscConfig+0xb24>
 80085be:	4b49      	ldr	r3, [pc, #292]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	e01b      	b.n	80085fc <HAL_RCC_OscConfig+0xb5c>
 80085c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80085c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	fa93 f2a3 	rbit	r2, r3
 80085d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80085e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	fa93 f2a3 	rbit	r2, r3
 80085f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	4b3a      	ldr	r3, [pc, #232]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008600:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800860a:	6812      	ldr	r2, [r2, #0]
 800860c:	fa92 f1a2 	rbit	r1, r2
 8008610:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008614:	6011      	str	r1, [r2, #0]
  return result;
 8008616:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	fab2 f282 	clz	r2, r2
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	f042 0220 	orr.w	r2, r2, #32
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	f002 021f 	and.w	r2, r2, #31
 800862c:	2101      	movs	r1, #1
 800862e:	fa01 f202 	lsl.w	r2, r1, r2
 8008632:	4013      	ands	r3, r2
 8008634:	2b00      	cmp	r3, #0
 8008636:	d19e      	bne.n	8008576 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008638:	4b2a      	ldr	r3, [pc, #168]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008640:	1d3b      	adds	r3, r7, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008646:	1d3b      	adds	r3, r7, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	430b      	orrs	r3, r1
 800864e:	4925      	ldr	r1, [pc, #148]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 8008650:	4313      	orrs	r3, r2
 8008652:	604b      	str	r3, [r1, #4]
 8008654:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008658:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800865c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800865e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	fa93 f2a3 	rbit	r2, r3
 8008668:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800866c:	601a      	str	r2, [r3, #0]
  return result;
 800866e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008672:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008674:	fab3 f383 	clz	r3, r3
 8008678:	b2db      	uxtb	r3, r3
 800867a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800867e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	461a      	mov	r2, r3
 8008686:	2301      	movs	r3, #1
 8008688:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800868a:	f7fd fb99 	bl	8005dc0 <HAL_GetTick>
 800868e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008692:	e009      	b.n	80086a8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008694:	f7fd fb94 	bl	8005dc0 <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e0fc      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
 80086a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	fa93 f2a3 	rbit	r2, r3
 80086bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80086c0:	601a      	str	r2, [r3, #0]
  return result;
 80086c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80086c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80086c8:	fab3 f383 	clz	r3, r3
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d105      	bne.n	80086e8 <HAL_RCC_OscConfig+0xc48>
 80086dc:	4b01      	ldr	r3, [pc, #4]	; (80086e4 <HAL_RCC_OscConfig+0xc44>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	e01e      	b.n	8008720 <HAL_RCC_OscConfig+0xc80>
 80086e2:	bf00      	nop
 80086e4:	40021000 	.word	0x40021000
 80086e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80086ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	fa93 f2a3 	rbit	r2, r3
 80086fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008706:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	fa93 f2a3 	rbit	r2, r3
 8008716:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	4b63      	ldr	r3, [pc, #396]	; (80088ac <HAL_RCC_OscConfig+0xe0c>)
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008724:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800872e:	6812      	ldr	r2, [r2, #0]
 8008730:	fa92 f1a2 	rbit	r1, r2
 8008734:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008738:	6011      	str	r1, [r2, #0]
  return result;
 800873a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	fab2 f282 	clz	r2, r2
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	f042 0220 	orr.w	r2, r2, #32
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	f002 021f 	and.w	r2, r2, #31
 8008750:	2101      	movs	r1, #1
 8008752:	fa01 f202 	lsl.w	r2, r1, r2
 8008756:	4013      	ands	r3, r2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d09b      	beq.n	8008694 <HAL_RCC_OscConfig+0xbf4>
 800875c:	e0a0      	b.n	80088a0 <HAL_RCC_OscConfig+0xe00>
 800875e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008762:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	fa93 f2a3 	rbit	r2, r3
 8008772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008776:	601a      	str	r2, [r3, #0]
  return result;
 8008778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800877c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800877e:	fab3 f383 	clz	r3, r3
 8008782:	b2db      	uxtb	r3, r3
 8008784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	461a      	mov	r2, r3
 8008790:	2300      	movs	r3, #0
 8008792:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008794:	f7fd fb14 	bl	8005dc0 <HAL_GetTick>
 8008798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800879c:	e009      	b.n	80087b2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800879e:	f7fd fb0f 	bl	8005dc0 <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e077      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
 80087b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	fa93 f2a3 	rbit	r2, r3
 80087c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ca:	601a      	str	r2, [r3, #0]
  return result;
 80087cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087d2:	fab3 f383 	clz	r3, r3
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	095b      	lsrs	r3, r3, #5
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f043 0301 	orr.w	r3, r3, #1
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d102      	bne.n	80087ec <HAL_RCC_OscConfig+0xd4c>
 80087e6:	4b31      	ldr	r3, [pc, #196]	; (80088ac <HAL_RCC_OscConfig+0xe0c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	e01b      	b.n	8008824 <HAL_RCC_OscConfig+0xd84>
 80087ec:	f107 0320 	add.w	r3, r7, #32
 80087f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80087f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087f6:	f107 0320 	add.w	r3, r7, #32
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	fa93 f2a3 	rbit	r2, r3
 8008800:	f107 031c 	add.w	r3, r7, #28
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f107 0318 	add.w	r3, r7, #24
 800880a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	f107 0318 	add.w	r3, r7, #24
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	fa93 f2a3 	rbit	r2, r3
 800881a:	f107 0314 	add.w	r3, r7, #20
 800881e:	601a      	str	r2, [r3, #0]
 8008820:	4b22      	ldr	r3, [pc, #136]	; (80088ac <HAL_RCC_OscConfig+0xe0c>)
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	f107 0210 	add.w	r2, r7, #16
 8008828:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800882c:	6011      	str	r1, [r2, #0]
 800882e:	f107 0210 	add.w	r2, r7, #16
 8008832:	6812      	ldr	r2, [r2, #0]
 8008834:	fa92 f1a2 	rbit	r1, r2
 8008838:	f107 020c 	add.w	r2, r7, #12
 800883c:	6011      	str	r1, [r2, #0]
  return result;
 800883e:	f107 020c 	add.w	r2, r7, #12
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	fab2 f282 	clz	r2, r2
 8008848:	b2d2      	uxtb	r2, r2
 800884a:	f042 0220 	orr.w	r2, r2, #32
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	f002 021f 	and.w	r2, r2, #31
 8008854:	2101      	movs	r1, #1
 8008856:	fa01 f202 	lsl.w	r2, r1, r2
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d19e      	bne.n	800879e <HAL_RCC_OscConfig+0xcfe>
 8008860:	e01e      	b.n	80088a0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008862:	1d3b      	adds	r3, r7, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e018      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <HAL_RCC_OscConfig+0xe0c>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008878:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800887c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008880:	1d3b      	adds	r3, r7, #4
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	429a      	cmp	r2, r3
 8008888:	d108      	bne.n	800889c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800888a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800888e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008892:	1d3b      	adds	r3, r7, #4
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008898:	429a      	cmp	r2, r3
 800889a:	d001      	beq.n	80088a0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	40021000 	.word	0x40021000

080088b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b09e      	sub	sp, #120	; 0x78
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e162      	b.n	8008b8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088c8:	4b90      	ldr	r3, [pc, #576]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0307 	and.w	r3, r3, #7
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d910      	bls.n	80088f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d6:	4b8d      	ldr	r3, [pc, #564]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f023 0207 	bic.w	r2, r3, #7
 80088de:	498b      	ldr	r1, [pc, #556]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e6:	4b89      	ldr	r3, [pc, #548]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0307 	and.w	r3, r3, #7
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d001      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e14a      	b.n	8008b8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d008      	beq.n	8008916 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008904:	4b82      	ldr	r3, [pc, #520]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	497f      	ldr	r1, [pc, #508]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008912:	4313      	orrs	r3, r2
 8008914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80dc 	beq.w	8008adc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d13c      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xf6>
 800892c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008930:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008934:	fa93 f3a3 	rbit	r3, r3
 8008938:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800893a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800893c:	fab3 f383 	clz	r3, r3
 8008940:	b2db      	uxtb	r3, r3
 8008942:	095b      	lsrs	r3, r3, #5
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	d102      	bne.n	8008956 <HAL_RCC_ClockConfig+0xa6>
 8008950:	4b6f      	ldr	r3, [pc, #444]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	e00f      	b.n	8008976 <HAL_RCC_ClockConfig+0xc6>
 8008956:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800895a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800895c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800895e:	fa93 f3a3 	rbit	r3, r3
 8008962:	667b      	str	r3, [r7, #100]	; 0x64
 8008964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008968:	663b      	str	r3, [r7, #96]	; 0x60
 800896a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800896c:	fa93 f3a3 	rbit	r3, r3
 8008970:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008972:	4b67      	ldr	r3, [pc, #412]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800897a:	65ba      	str	r2, [r7, #88]	; 0x58
 800897c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800897e:	fa92 f2a2 	rbit	r2, r2
 8008982:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008984:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008986:	fab2 f282 	clz	r2, r2
 800898a:	b2d2      	uxtb	r2, r2
 800898c:	f042 0220 	orr.w	r2, r2, #32
 8008990:	b2d2      	uxtb	r2, r2
 8008992:	f002 021f 	and.w	r2, r2, #31
 8008996:	2101      	movs	r1, #1
 8008998:	fa01 f202 	lsl.w	r2, r1, r2
 800899c:	4013      	ands	r3, r2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d17b      	bne.n	8008a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e0f3      	b.n	8008b8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d13c      	bne.n	8008a28 <HAL_RCC_ClockConfig+0x178>
 80089ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089b6:	fa93 f3a3 	rbit	r3, r3
 80089ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80089bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089be:	fab3 f383 	clz	r3, r3
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	095b      	lsrs	r3, r3, #5
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d102      	bne.n	80089d8 <HAL_RCC_ClockConfig+0x128>
 80089d2:	4b4f      	ldr	r3, [pc, #316]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	e00f      	b.n	80089f8 <HAL_RCC_ClockConfig+0x148>
 80089d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e0:	fa93 f3a3 	rbit	r3, r3
 80089e4:	647b      	str	r3, [r7, #68]	; 0x44
 80089e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089ea:	643b      	str	r3, [r7, #64]	; 0x40
 80089ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ee:	fa93 f3a3 	rbit	r3, r3
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f4:	4b46      	ldr	r3, [pc, #280]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80089fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a00:	fa92 f2a2 	rbit	r2, r2
 8008a04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a08:	fab2 f282 	clz	r2, r2
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	f042 0220 	orr.w	r2, r2, #32
 8008a12:	b2d2      	uxtb	r2, r2
 8008a14:	f002 021f 	and.w	r2, r2, #31
 8008a18:	2101      	movs	r1, #1
 8008a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8008a1e:	4013      	ands	r3, r2
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d13a      	bne.n	8008a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e0b2      	b.n	8008b8e <HAL_RCC_ClockConfig+0x2de>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2e:	fa93 f3a3 	rbit	r3, r3
 8008a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a36:	fab3 f383 	clz	r3, r3
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	f043 0301 	orr.w	r3, r3, #1
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d102      	bne.n	8008a50 <HAL_RCC_ClockConfig+0x1a0>
 8008a4a:	4b31      	ldr	r3, [pc, #196]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	e00d      	b.n	8008a6c <HAL_RCC_ClockConfig+0x1bc>
 8008a50:	2302      	movs	r3, #2
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	fa93 f3a3 	rbit	r3, r3
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	623b      	str	r3, [r7, #32]
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	fa93 f3a3 	rbit	r3, r3
 8008a66:	61fb      	str	r3, [r7, #28]
 8008a68:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2202      	movs	r2, #2
 8008a6e:	61ba      	str	r2, [r7, #24]
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	fa92 f2a2 	rbit	r2, r2
 8008a76:	617a      	str	r2, [r7, #20]
  return result;
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	fab2 f282 	clz	r2, r2
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	f042 0220 	orr.w	r2, r2, #32
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	f002 021f 	and.w	r2, r2, #31
 8008a8a:	2101      	movs	r1, #1
 8008a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8008a90:	4013      	ands	r3, r2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e079      	b.n	8008b8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a9a:	4b1d      	ldr	r3, [pc, #116]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f023 0203 	bic.w	r2, r3, #3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	491a      	ldr	r1, [pc, #104]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008aac:	f7fd f988 	bl	8005dc0 <HAL_GetTick>
 8008ab0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ab2:	e00a      	b.n	8008aca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab4:	f7fd f984 	bl	8005dc0 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e061      	b.n	8008b8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <HAL_RCC_ClockConfig+0x260>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 020c 	and.w	r2, r3, #12
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d1eb      	bne.n	8008ab4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d214      	bcs.n	8008b14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aea:	4b08      	ldr	r3, [pc, #32]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f023 0207 	bic.w	r2, r3, #7
 8008af2:	4906      	ldr	r1, [pc, #24]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afa:	4b04      	ldr	r3, [pc, #16]	; (8008b0c <HAL_RCC_ClockConfig+0x25c>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d005      	beq.n	8008b14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e040      	b.n	8008b8e <HAL_RCC_ClockConfig+0x2de>
 8008b0c:	40022000 	.word	0x40022000
 8008b10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b20:	4b1d      	ldr	r3, [pc, #116]	; (8008b98 <HAL_RCC_ClockConfig+0x2e8>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	491a      	ldr	r1, [pc, #104]	; (8008b98 <HAL_RCC_ClockConfig+0x2e8>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 0308 	and.w	r3, r3, #8
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d009      	beq.n	8008b52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b3e:	4b16      	ldr	r3, [pc, #88]	; (8008b98 <HAL_RCC_ClockConfig+0x2e8>)
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	4912      	ldr	r1, [pc, #72]	; (8008b98 <HAL_RCC_ClockConfig+0x2e8>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008b52:	f000 f829 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 8008b56:	4601      	mov	r1, r0
 8008b58:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <HAL_RCC_ClockConfig+0x2e8>)
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b60:	22f0      	movs	r2, #240	; 0xf0
 8008b62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	fa92 f2a2 	rbit	r2, r2
 8008b6a:	60fa      	str	r2, [r7, #12]
  return result;
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	fab2 f282 	clz	r2, r2
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	40d3      	lsrs	r3, r2
 8008b76:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <HAL_RCC_ClockConfig+0x2ec>)
 8008b78:	5cd3      	ldrb	r3, [r2, r3]
 8008b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8008b7e:	4a08      	ldr	r2, [pc, #32]	; (8008ba0 <HAL_RCC_ClockConfig+0x2f0>)
 8008b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008b82:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <HAL_RCC_ClockConfig+0x2f4>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fd f8d6 	bl	8005d38 <HAL_InitTick>
  
  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3778      	adds	r7, #120	; 0x78
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	40021000 	.word	0x40021000
 8008b9c:	0800fd14 	.word	0x0800fd14
 8008ba0:	200006d8 	.word	0x200006d8
 8008ba4:	200006dc 	.word	0x200006dc

08008ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b08b      	sub	sp, #44	; 0x2c
 8008bac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008bc2:	4b29      	ldr	r3, [pc, #164]	; (8008c68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f003 030c 	and.w	r3, r3, #12
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d002      	beq.n	8008bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d003      	beq.n	8008bde <HAL_RCC_GetSysClockFreq+0x36>
 8008bd6:	e03c      	b.n	8008c52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008bd8:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008bda:	623b      	str	r3, [r7, #32]
      break;
 8008bdc:	e03c      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008be4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008be8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	fa92 f2a2 	rbit	r2, r2
 8008bf0:	607a      	str	r2, [r7, #4]
  return result;
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	fab2 f282 	clz	r2, r2
 8008bf8:	b2d2      	uxtb	r2, r2
 8008bfa:	40d3      	lsrs	r3, r2
 8008bfc:	4a1c      	ldr	r2, [pc, #112]	; (8008c70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008bfe:	5cd3      	ldrb	r3, [r2, r3]
 8008c00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008c02:	4b19      	ldr	r3, [pc, #100]	; (8008c68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	220f      	movs	r2, #15
 8008c0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	fa92 f2a2 	rbit	r2, r2
 8008c14:	60fa      	str	r2, [r7, #12]
  return result;
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	fab2 f282 	clz	r2, r2
 8008c1c:	b2d2      	uxtb	r2, r2
 8008c1e:	40d3      	lsrs	r3, r2
 8008c20:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008c22:	5cd3      	ldrb	r3, [r2, r3]
 8008c24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008c30:	4a0e      	ldr	r2, [pc, #56]	; (8008c6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	fb02 f303 	mul.w	r3, r2, r3
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c40:	e004      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	4a0c      	ldr	r2, [pc, #48]	; (8008c78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008c46:	fb02 f303 	mul.w	r3, r2, r3
 8008c4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	623b      	str	r3, [r7, #32]
      break;
 8008c50:	e002      	b.n	8008c58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008c52:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c54:	623b      	str	r3, [r7, #32]
      break;
 8008c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c58:	6a3b      	ldr	r3, [r7, #32]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	372c      	adds	r7, #44	; 0x2c
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	40021000 	.word	0x40021000
 8008c6c:	007a1200 	.word	0x007a1200
 8008c70:	0800fd2c 	.word	0x0800fd2c
 8008c74:	0800fd3c 	.word	0x0800fd3c
 8008c78:	003d0900 	.word	0x003d0900

08008c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c80:	4b03      	ldr	r3, [pc, #12]	; (8008c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c82:	681b      	ldr	r3, [r3, #0]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	200006d8 	.word	0x200006d8

08008c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008c9a:	f7ff ffef 	bl	8008c7c <HAL_RCC_GetHCLKFreq>
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	4b0b      	ldr	r3, [pc, #44]	; (8008cd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ca8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008cac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	fa92 f2a2 	rbit	r2, r2
 8008cb4:	603a      	str	r2, [r7, #0]
  return result;
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	fab2 f282 	clz	r2, r2
 8008cbc:	b2d2      	uxtb	r2, r2
 8008cbe:	40d3      	lsrs	r3, r2
 8008cc0:	4a04      	ldr	r2, [pc, #16]	; (8008cd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008cc2:	5cd3      	ldrb	r3, [r2, r3]
 8008cc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	40021000 	.word	0x40021000
 8008cd4:	0800fd24 	.word	0x0800fd24

08008cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008cde:	f7ff ffcd 	bl	8008c7c <HAL_RCC_GetHCLKFreq>
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008cec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008cf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	fa92 f2a2 	rbit	r2, r2
 8008cf8:	603a      	str	r2, [r7, #0]
  return result;
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	fab2 f282 	clz	r2, r2
 8008d00:	b2d2      	uxtb	r2, r2
 8008d02:	40d3      	lsrs	r3, r2
 8008d04:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008d06:	5cd3      	ldrb	r3, [r2, r3]
 8008d08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40021000 	.word	0x40021000
 8008d18:	0800fd24 	.word	0x0800fd24

08008d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b092      	sub	sp, #72	; 0x48
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80d7 	beq.w	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d40:	4b4e      	ldr	r3, [pc, #312]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10e      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d4c:	4b4b      	ldr	r3, [pc, #300]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	4a4a      	ldr	r2, [pc, #296]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d56:	61d3      	str	r3, [r2, #28]
 8008d58:	4b48      	ldr	r3, [pc, #288]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d60:	60bb      	str	r3, [r7, #8]
 8008d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d64:	2301      	movs	r3, #1
 8008d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d6a:	4b45      	ldr	r3, [pc, #276]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d118      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d76:	4b42      	ldr	r3, [pc, #264]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a41      	ldr	r2, [pc, #260]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d82:	f7fd f81d 	bl	8005dc0 <HAL_GetTick>
 8008d86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d88:	e008      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d8a:	f7fd f819 	bl	8005dc0 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b64      	cmp	r3, #100	; 0x64
 8008d96:	d901      	bls.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e169      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d9c:	4b38      	ldr	r3, [pc, #224]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0f0      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008da8:	4b34      	ldr	r3, [pc, #208]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 8084 	beq.w	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d07c      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008dc8:	4b2c      	ldr	r3, [pc, #176]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dca:	6a1b      	ldr	r3, [r3, #32]
 8008dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	fa93 f3a3 	rbit	r3, r3
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008de2:	fab3 f383 	clz	r3, r3
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	461a      	mov	r2, r3
 8008dea:	4b26      	ldr	r3, [pc, #152]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	461a      	mov	r2, r3
 8008df2:	2301      	movs	r3, #1
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008dfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	fa93 f3a3 	rbit	r3, r3
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e06:	fab3 f383 	clz	r3, r3
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	4b1d      	ldr	r3, [pc, #116]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	461a      	mov	r2, r3
 8008e16:	2300      	movs	r3, #0
 8008e18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e1a:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d04b      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e2a:	f7fc ffc9 	bl	8005dc0 <HAL_GetTick>
 8008e2e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e30:	e00a      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e32:	f7fc ffc5 	bl	8005dc0 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d901      	bls.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e113      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	fa93 f3a3 	rbit	r3, r3
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
 8008e54:	2302      	movs	r3, #2
 8008e56:	623b      	str	r3, [r7, #32]
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	fa93 f3a3 	rbit	r3, r3
 8008e5e:	61fb      	str	r3, [r7, #28]
  return result;
 8008e60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e62:	fab3 f383 	clz	r3, r3
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	f043 0302 	orr.w	r3, r3, #2
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d108      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008e76:	4b01      	ldr	r3, [pc, #4]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e78:	6a1b      	ldr	r3, [r3, #32]
 8008e7a:	e00d      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	40007000 	.word	0x40007000
 8008e84:	10908100 	.word	0x10908100
 8008e88:	2302      	movs	r3, #2
 8008e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	fa93 f3a3 	rbit	r3, r3
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	4b78      	ldr	r3, [pc, #480]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e98:	2202      	movs	r2, #2
 8008e9a:	613a      	str	r2, [r7, #16]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	fa92 f2a2 	rbit	r2, r2
 8008ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	fab2 f282 	clz	r2, r2
 8008eaa:	b2d2      	uxtb	r2, r2
 8008eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb0:	b2d2      	uxtb	r2, r2
 8008eb2:	f002 021f 	and.w	r2, r2, #31
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0b7      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008ec2:	4b6d      	ldr	r3, [pc, #436]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	496a      	ldr	r1, [pc, #424]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ed4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d105      	bne.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008edc:	4b66      	ldr	r3, [pc, #408]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	4a65      	ldr	r2, [pc, #404]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d008      	beq.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ef4:	4b60      	ldr	r3, [pc, #384]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	f023 0203 	bic.w	r2, r3, #3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	495d      	ldr	r1, [pc, #372]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0302 	and.w	r3, r3, #2
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d008      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f12:	4b59      	ldr	r3, [pc, #356]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	4956      	ldr	r1, [pc, #344]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f30:	4b51      	ldr	r3, [pc, #324]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	494e      	ldr	r1, [pc, #312]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d008      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f4e:	4b4a      	ldr	r3, [pc, #296]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f52:	f023 0210 	bic.w	r2, r3, #16
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	4947      	ldr	r1, [pc, #284]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d008      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008f6c:	4b42      	ldr	r3, [pc, #264]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	493f      	ldr	r1, [pc, #252]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d008      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f8a:	4b3b      	ldr	r3, [pc, #236]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	f023 0220 	bic.w	r2, r3, #32
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	4938      	ldr	r1, [pc, #224]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d008      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fa8:	4b33      	ldr	r3, [pc, #204]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	4930      	ldr	r1, [pc, #192]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d008      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fc6:	4b2c      	ldr	r3, [pc, #176]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	4929      	ldr	r1, [pc, #164]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d008      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fe4:	4b24      	ldr	r3, [pc, #144]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	4921      	ldr	r1, [pc, #132]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009002:	4b1d      	ldr	r3, [pc, #116]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009006:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	491a      	ldr	r1, [pc, #104]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009010:	4313      	orrs	r3, r2
 8009012:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800901c:	2b00      	cmp	r3, #0
 800901e:	d008      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009020:	4b15      	ldr	r3, [pc, #84]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009024:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	4912      	ldr	r1, [pc, #72]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800902e:	4313      	orrs	r3, r2
 8009030:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d008      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800903e:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	490b      	ldr	r1, [pc, #44]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800904c:	4313      	orrs	r3, r2
 800904e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d008      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800905c:	4b06      	ldr	r3, [pc, #24]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800905e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009060:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009068:	4903      	ldr	r1, [pc, #12]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800906a:	4313      	orrs	r3, r2
 800906c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3748      	adds	r7, #72	; 0x48
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	40021000 	.word	0x40021000

0800907c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e084      	b.n	8009198 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fb fad9 	bl	8004660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2202      	movs	r2, #2
 80090b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090ce:	d902      	bls.n	80090d6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80090e4:	d007      	beq.n	80090f6 <HAL_SPI_Init+0x7a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80090ee:	d002      	beq.n	80090f6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009106:	d903      	bls.n	8009110 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2202      	movs	r2, #2
 800910c:	631a      	str	r2, [r3, #48]	; 0x30
 800910e:	e002      	b.n	8009116 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	695b      	ldr	r3, [r3, #20]
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	ea42 0103 	orr.w	r1, r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	0c1b      	lsrs	r3, r3, #16
 8009156:	f003 0204 	and.w	r2, r3, #4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	431a      	orrs	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009164:	431a      	orrs	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	ea42 0103 	orr.w	r1, r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	430a      	orrs	r2, r1
 8009176:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	69da      	ldr	r2, [r3, #28]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009186:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2201      	movs	r2, #1
 8009192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80091ae:	2301      	movs	r3, #1
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80091b2:	2300      	movs	r3, #0
 80091b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_SPI_TransmitReceive+0x26>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e1fb      	b.n	80095be <HAL_SPI_TransmitReceive+0x41e>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091ce:	f7fc fdf7 	bl	8005dc0 <HAL_GetTick>
 80091d2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80091e2:	887b      	ldrh	r3, [r7, #2]
 80091e4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80091e6:	887b      	ldrh	r3, [r7, #2]
 80091e8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091ea:	7efb      	ldrb	r3, [r7, #27]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d00e      	beq.n	800920e <HAL_SPI_TransmitReceive+0x6e>
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091f6:	d106      	bne.n	8009206 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d102      	bne.n	8009206 <HAL_SPI_TransmitReceive+0x66>
 8009200:	7efb      	ldrb	r3, [r7, #27]
 8009202:	2b04      	cmp	r3, #4
 8009204:	d003      	beq.n	800920e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009206:	2302      	movs	r3, #2
 8009208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800920c:	e1cd      	b.n	80095aa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d005      	beq.n	8009220 <HAL_SPI_TransmitReceive+0x80>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <HAL_SPI_TransmitReceive+0x80>
 800921a:	887b      	ldrh	r3, [r7, #2]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009226:	e1c0      	b.n	80095aa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b04      	cmp	r3, #4
 8009232:	d003      	beq.n	800923c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2205      	movs	r2, #5
 8009238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	887a      	ldrh	r2, [r7, #2]
 800924c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	887a      	ldrh	r2, [r7, #2]
 8009254:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	887a      	ldrh	r2, [r7, #2]
 8009262:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	887a      	ldrh	r2, [r7, #2]
 8009268:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800927e:	d802      	bhi.n	8009286 <HAL_SPI_TransmitReceive+0xe6>
 8009280:	8a3b      	ldrh	r3, [r7, #16]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d908      	bls.n	8009298 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009294:	605a      	str	r2, [r3, #4]
 8009296:	e007      	b.n	80092a8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80092a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b2:	2b40      	cmp	r3, #64	; 0x40
 80092b4:	d007      	beq.n	80092c6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092ce:	d97c      	bls.n	80093ca <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <HAL_SPI_TransmitReceive+0x13e>
 80092d8:	8a7b      	ldrh	r3, [r7, #18]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d169      	bne.n	80093b2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e2:	881a      	ldrh	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	1c9a      	adds	r2, r3, #2
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009302:	e056      	b.n	80093b2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b02      	cmp	r3, #2
 8009310:	d11b      	bne.n	800934a <HAL_SPI_TransmitReceive+0x1aa>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009316:	b29b      	uxth	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d016      	beq.n	800934a <HAL_SPI_TransmitReceive+0x1aa>
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	2b01      	cmp	r3, #1
 8009320:	d113      	bne.n	800934a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009326:	881a      	ldrh	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009332:	1c9a      	adds	r2, r3, #2
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800933c:	b29b      	uxth	r3, r3
 800933e:	3b01      	subs	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009346:	2300      	movs	r3, #0
 8009348:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b01      	cmp	r3, #1
 8009356:	d11c      	bne.n	8009392 <HAL_SPI_TransmitReceive+0x1f2>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800935e:	b29b      	uxth	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d016      	beq.n	8009392 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	b292      	uxth	r2, r2
 8009370:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	1c9a      	adds	r2, r3, #2
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009382:	b29b      	uxth	r3, r3
 8009384:	3b01      	subs	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800938e:	2301      	movs	r3, #1
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009392:	f7fc fd15 	bl	8005dc0 <HAL_GetTick>
 8009396:	4602      	mov	r2, r0
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939e:	429a      	cmp	r2, r3
 80093a0:	d807      	bhi.n	80093b2 <HAL_SPI_TransmitReceive+0x212>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a8:	d003      	beq.n	80093b2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80093aa:	2303      	movs	r3, #3
 80093ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80093b0:	e0fb      	b.n	80095aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1a3      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x164>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d19d      	bne.n	8009304 <HAL_SPI_TransmitReceive+0x164>
 80093c8:	e0df      	b.n	800958a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <HAL_SPI_TransmitReceive+0x23a>
 80093d2:	8a7b      	ldrh	r3, [r7, #18]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	f040 80cb 	bne.w	8009570 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093de:	b29b      	uxth	r3, r3
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d912      	bls.n	800940a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	881a      	ldrh	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f4:	1c9a      	adds	r2, r3, #2
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093fe:	b29b      	uxth	r3, r3
 8009400:	3b02      	subs	r3, #2
 8009402:	b29a      	uxth	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009408:	e0b2      	b.n	8009570 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	330c      	adds	r3, #12
 8009414:	7812      	ldrb	r2, [r2, #0]
 8009416:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	1c5a      	adds	r2, r3, #1
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009426:	b29b      	uxth	r3, r3
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009430:	e09e      	b.n	8009570 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b02      	cmp	r3, #2
 800943e:	d134      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x30a>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009444:	b29b      	uxth	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d02f      	beq.n	80094aa <HAL_SPI_TransmitReceive+0x30a>
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	2b01      	cmp	r3, #1
 800944e:	d12c      	bne.n	80094aa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b01      	cmp	r3, #1
 8009458:	d912      	bls.n	8009480 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	881a      	ldrh	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	1c9a      	adds	r2, r3, #2
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b02      	subs	r3, #2
 8009478:	b29a      	uxth	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800947e:	e012      	b.n	80094a6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	330c      	adds	r3, #12
 800948a:	7812      	ldrb	r2, [r2, #0]
 800948c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	1c5a      	adds	r2, r3, #1
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d148      	bne.n	800954a <HAL_SPI_TransmitReceive+0x3aa>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094be:	b29b      	uxth	r3, r3
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d042      	beq.n	800954a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d923      	bls.n	8009518 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68da      	ldr	r2, [r3, #12]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	b292      	uxth	r2, r2
 80094dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e2:	1c9a      	adds	r2, r3, #2
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b02      	subs	r3, #2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009500:	b29b      	uxth	r3, r3
 8009502:	2b01      	cmp	r3, #1
 8009504:	d81f      	bhi.n	8009546 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009514:	605a      	str	r2, [r3, #4]
 8009516:	e016      	b.n	8009546 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f103 020c 	add.w	r2, r3, #12
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009524:	7812      	ldrb	r2, [r2, #0]
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800953a:	b29b      	uxth	r3, r3
 800953c:	3b01      	subs	r3, #1
 800953e:	b29a      	uxth	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009546:	2301      	movs	r3, #1
 8009548:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800954a:	f7fc fc39 	bl	8005dc0 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009556:	429a      	cmp	r2, r3
 8009558:	d803      	bhi.n	8009562 <HAL_SPI_TransmitReceive+0x3c2>
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009560:	d102      	bne.n	8009568 <HAL_SPI_TransmitReceive+0x3c8>
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	2b00      	cmp	r3, #0
 8009566:	d103      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800956e:	e01c      	b.n	80095aa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009574:	b29b      	uxth	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f af5b 	bne.w	8009432 <HAL_SPI_TransmitReceive+0x292>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009582:	b29b      	uxth	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	f47f af54 	bne.w	8009432 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 f8f0 	bl	8009774 <SPI_EndRxTxTransaction>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2220      	movs	r2, #32
 80095a4:	661a      	str	r2, [r3, #96]	; 0x60
 80095a6:	e000      	b.n	80095aa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80095a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80095ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3728      	adds	r7, #40	; 0x28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	603b      	str	r3, [r7, #0]
 80095d2:	4613      	mov	r3, r2
 80095d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095d6:	e04c      	b.n	8009672 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095de:	d048      	beq.n	8009672 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80095e0:	f7fc fbee 	bl	8005dc0 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d902      	bls.n	80095f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d13d      	bne.n	8009672 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800960e:	d111      	bne.n	8009634 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009618:	d004      	beq.n	8009624 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009622:	d107      	bne.n	8009634 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800963c:	d10f      	bne.n	800965e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800965c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e00f      	b.n	8009692 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4013      	ands	r3, r2
 800967c:	68ba      	ldr	r2, [r7, #8]
 800967e:	429a      	cmp	r2, r3
 8009680:	bf0c      	ite	eq
 8009682:	2301      	moveq	r3, #1
 8009684:	2300      	movne	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	461a      	mov	r2, r3
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	429a      	cmp	r2, r3
 800968e:	d1a3      	bne.n	80095d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
 80096a6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80096a8:	e057      	b.n	800975a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096b0:	d106      	bne.n	80096c0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d103      	bne.n	80096c0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	330c      	adds	r3, #12
 80096be:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c6:	d048      	beq.n	800975a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80096c8:	f7fc fb7a 	bl	8005dc0 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	1ad3      	subs	r3, r2, r3
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d902      	bls.n	80096de <SPI_WaitFifoStateUntilTimeout+0x44>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d13d      	bne.n	800975a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096f6:	d111      	bne.n	800971c <SPI_WaitFifoStateUntilTimeout+0x82>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009700:	d004      	beq.n	800970c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800970a:	d107      	bne.n	800971c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800971a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009724:	d10f      	bne.n	8009746 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e008      	b.n	800976c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4013      	ands	r3, r2
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	429a      	cmp	r2, r3
 8009768:	d19f      	bne.n	80096aa <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2200      	movs	r2, #0
 8009788:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff ff84 	bl	800969a <SPI_WaitFifoStateUntilTimeout>
 8009792:	4603      	mov	r3, r0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d007      	beq.n	80097a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800979c:	f043 0220 	orr.w	r2, r3, #32
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e027      	b.n	80097f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	2200      	movs	r2, #0
 80097b0:	2180      	movs	r1, #128	; 0x80
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f7ff ff07 	bl	80095c6 <SPI_WaitFlagStateUntilTimeout>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d007      	beq.n	80097ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c2:	f043 0220 	orr.w	r2, r3, #32
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097ca:	2303      	movs	r3, #3
 80097cc:	e014      	b.n	80097f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7ff ff5d 	bl	800969a <SPI_WaitFifoStateUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ea:	f043 0220 	orr.w	r2, r3, #32
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e000      	b.n	80097f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d101      	bne.n	8009812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	e01d      	b.n	800984e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d106      	bne.n	800982c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7fa ff5e 	bl	80046e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	3304      	adds	r3, #4
 800983c:	4619      	mov	r1, r3
 800983e:	4610      	mov	r0, r2
 8009840:	f000 fa6a 	bl	8009d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3708      	adds	r7, #8
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d101      	bne.n	8009868 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e01d      	b.n	80098a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800986e:	b2db      	uxtb	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f815 	bl	80098ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2202      	movs	r2, #2
 8009886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f000 fa3f 	bl	8009d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e01d      	b.n	800990e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f815 	bl	8009916 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3304      	adds	r3, #4
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f000 fa0a 	bl	8009d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009940:	2302      	movs	r3, #2
 8009942:	e08a      	b.n	8009a5a <HAL_TIM_IC_ConfigChannel+0x130>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d11b      	bne.n	8009992 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	6819      	ldr	r1, [r3, #0]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	f000 fdcb 	bl	800a504 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699a      	ldr	r2, [r3, #24]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 020c 	bic.w	r2, r2, #12
 800997c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6999      	ldr	r1, [r3, #24]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	689a      	ldr	r2, [r3, #8]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	430a      	orrs	r2, r1
 800998e:	619a      	str	r2, [r3, #24]
 8009990:	e05a      	b.n	8009a48 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b04      	cmp	r3, #4
 8009996:	d11c      	bne.n	80099d2 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6818      	ldr	r0, [r3, #0]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f000 fe43 	bl	800a632 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	699a      	ldr	r2, [r3, #24]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80099ba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6999      	ldr	r1, [r3, #24]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	021a      	lsls	r2, r3, #8
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	619a      	str	r2, [r3, #24]
 80099d0:	e03a      	b.n	8009a48 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b08      	cmp	r3, #8
 80099d6:	d11b      	bne.n	8009a10 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	6819      	ldr	r1, [r3, #0]
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f000 fe90 	bl	800a70c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69da      	ldr	r2, [r3, #28]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 020c 	bic.w	r2, r2, #12
 80099fa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	69d9      	ldr	r1, [r3, #28]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	61da      	str	r2, [r3, #28]
 8009a0e:	e01b      	b.n	8009a48 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f000 feb0 	bl	800a784 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	69da      	ldr	r2, [r3, #28]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69d9      	ldr	r1, [r3, #28]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	689b      	ldr	r3, [r3, #8]
 8009a3e:	021a      	lsls	r2, r3, #8
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	430a      	orrs	r2, r1
 8009a46:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e105      	b.n	8009c8a <HAL_TIM_PWM_ConfigChannel+0x226>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b14      	cmp	r3, #20
 8009a92:	f200 80f0 	bhi.w	8009c76 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009af1 	.word	0x08009af1
 8009aa0:	08009c77 	.word	0x08009c77
 8009aa4:	08009c77 	.word	0x08009c77
 8009aa8:	08009c77 	.word	0x08009c77
 8009aac:	08009b31 	.word	0x08009b31
 8009ab0:	08009c77 	.word	0x08009c77
 8009ab4:	08009c77 	.word	0x08009c77
 8009ab8:	08009c77 	.word	0x08009c77
 8009abc:	08009b73 	.word	0x08009b73
 8009ac0:	08009c77 	.word	0x08009c77
 8009ac4:	08009c77 	.word	0x08009c77
 8009ac8:	08009c77 	.word	0x08009c77
 8009acc:	08009bb3 	.word	0x08009bb3
 8009ad0:	08009c77 	.word	0x08009c77
 8009ad4:	08009c77 	.word	0x08009c77
 8009ad8:	08009c77 	.word	0x08009c77
 8009adc:	08009bf5 	.word	0x08009bf5
 8009ae0:	08009c77 	.word	0x08009c77
 8009ae4:	08009c77 	.word	0x08009c77
 8009ae8:	08009c77 	.word	0x08009c77
 8009aec:	08009c35 	.word	0x08009c35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f99e 	bl	8009e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0208 	orr.w	r2, r2, #8
 8009b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0204 	bic.w	r2, r2, #4
 8009b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6999      	ldr	r1, [r3, #24]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	619a      	str	r2, [r3, #24]
      break;
 8009b2e:	e0a3      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fa0e 	bl	8009f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6999      	ldr	r1, [r3, #24]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	021a      	lsls	r2, r3, #8
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	619a      	str	r2, [r3, #24]
      break;
 8009b70:	e082      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fa77 	bl	800a06c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69da      	ldr	r2, [r3, #28]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0208 	orr.w	r2, r2, #8
 8009b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0204 	bic.w	r2, r2, #4
 8009b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69d9      	ldr	r1, [r3, #28]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	61da      	str	r2, [r3, #28]
      break;
 8009bb0:	e062      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fadf 	bl	800a17c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69d9      	ldr	r1, [r3, #28]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	021a      	lsls	r2, r3, #8
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	61da      	str	r2, [r3, #28]
      break;
 8009bf2:	e041      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fb28 	bl	800a250 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f042 0208 	orr.w	r2, r2, #8
 8009c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0204 	bic.w	r2, r2, #4
 8009c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	691a      	ldr	r2, [r3, #16]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c32:	e021      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68b9      	ldr	r1, [r7, #8]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fb6c 	bl	800a318 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	021a      	lsls	r2, r3, #8
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	430a      	orrs	r2, r1
 8009c72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c74:	e000      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8009c76:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop

08009c94 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d101      	bne.n	8009cac <HAL_TIM_SlaveConfigSynchro+0x18>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e031      	b.n	8009d10 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fb90 	bl	800a3e4 <TIM_SlaveTimer_SetConfig>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d009      	beq.n	8009cde <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e018      	b.n	8009d10 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009cfc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a3c      	ldr	r2, [pc, #240]	; (8009e1c <TIM_Base_SetConfig+0x104>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00f      	beq.n	8009d50 <TIM_Base_SetConfig+0x38>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d36:	d00b      	beq.n	8009d50 <TIM_Base_SetConfig+0x38>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a39      	ldr	r2, [pc, #228]	; (8009e20 <TIM_Base_SetConfig+0x108>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d007      	beq.n	8009d50 <TIM_Base_SetConfig+0x38>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a38      	ldr	r2, [pc, #224]	; (8009e24 <TIM_Base_SetConfig+0x10c>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d003      	beq.n	8009d50 <TIM_Base_SetConfig+0x38>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a37      	ldr	r2, [pc, #220]	; (8009e28 <TIM_Base_SetConfig+0x110>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d108      	bne.n	8009d62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a2d      	ldr	r2, [pc, #180]	; (8009e1c <TIM_Base_SetConfig+0x104>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d01b      	beq.n	8009da2 <TIM_Base_SetConfig+0x8a>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d70:	d017      	beq.n	8009da2 <TIM_Base_SetConfig+0x8a>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a2a      	ldr	r2, [pc, #168]	; (8009e20 <TIM_Base_SetConfig+0x108>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <TIM_Base_SetConfig+0x8a>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a29      	ldr	r2, [pc, #164]	; (8009e24 <TIM_Base_SetConfig+0x10c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d00f      	beq.n	8009da2 <TIM_Base_SetConfig+0x8a>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a28      	ldr	r2, [pc, #160]	; (8009e28 <TIM_Base_SetConfig+0x110>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d00b      	beq.n	8009da2 <TIM_Base_SetConfig+0x8a>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a27      	ldr	r2, [pc, #156]	; (8009e2c <TIM_Base_SetConfig+0x114>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d007      	beq.n	8009da2 <TIM_Base_SetConfig+0x8a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a26      	ldr	r2, [pc, #152]	; (8009e30 <TIM_Base_SetConfig+0x118>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d003      	beq.n	8009da2 <TIM_Base_SetConfig+0x8a>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a25      	ldr	r2, [pc, #148]	; (8009e34 <TIM_Base_SetConfig+0x11c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d108      	bne.n	8009db4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a10      	ldr	r2, [pc, #64]	; (8009e1c <TIM_Base_SetConfig+0x104>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00f      	beq.n	8009e00 <TIM_Base_SetConfig+0xe8>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a11      	ldr	r2, [pc, #68]	; (8009e28 <TIM_Base_SetConfig+0x110>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00b      	beq.n	8009e00 <TIM_Base_SetConfig+0xe8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a10      	ldr	r2, [pc, #64]	; (8009e2c <TIM_Base_SetConfig+0x114>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d007      	beq.n	8009e00 <TIM_Base_SetConfig+0xe8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a0f      	ldr	r2, [pc, #60]	; (8009e30 <TIM_Base_SetConfig+0x118>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d003      	beq.n	8009e00 <TIM_Base_SetConfig+0xe8>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a0e      	ldr	r2, [pc, #56]	; (8009e34 <TIM_Base_SetConfig+0x11c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d103      	bne.n	8009e08 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	691a      	ldr	r2, [r3, #16]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	615a      	str	r2, [r3, #20]
}
 8009e0e:	bf00      	nop
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	40012c00 	.word	0x40012c00
 8009e20:	40000400 	.word	0x40000400
 8009e24:	40000800 	.word	0x40000800
 8009e28:	40013400 	.word	0x40013400
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40014400 	.word	0x40014400
 8009e34:	40014800 	.word	0x40014800

08009e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b087      	sub	sp, #28
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	f023 0201 	bic.w	r2, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f023 0302 	bic.w	r3, r3, #2
 8009e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a2c      	ldr	r2, [pc, #176]	; (8009f44 <TIM_OC1_SetConfig+0x10c>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d00f      	beq.n	8009eb8 <TIM_OC1_SetConfig+0x80>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a2b      	ldr	r2, [pc, #172]	; (8009f48 <TIM_OC1_SetConfig+0x110>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d00b      	beq.n	8009eb8 <TIM_OC1_SetConfig+0x80>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <TIM_OC1_SetConfig+0x114>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d007      	beq.n	8009eb8 <TIM_OC1_SetConfig+0x80>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a29      	ldr	r2, [pc, #164]	; (8009f50 <TIM_OC1_SetConfig+0x118>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_OC1_SetConfig+0x80>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a28      	ldr	r2, [pc, #160]	; (8009f54 <TIM_OC1_SetConfig+0x11c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d10c      	bne.n	8009ed2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f023 0308 	bic.w	r3, r3, #8
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f023 0304 	bic.w	r3, r3, #4
 8009ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a1b      	ldr	r2, [pc, #108]	; (8009f44 <TIM_OC1_SetConfig+0x10c>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d00f      	beq.n	8009efa <TIM_OC1_SetConfig+0xc2>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a1a      	ldr	r2, [pc, #104]	; (8009f48 <TIM_OC1_SetConfig+0x110>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d00b      	beq.n	8009efa <TIM_OC1_SetConfig+0xc2>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a19      	ldr	r2, [pc, #100]	; (8009f4c <TIM_OC1_SetConfig+0x114>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d007      	beq.n	8009efa <TIM_OC1_SetConfig+0xc2>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a18      	ldr	r2, [pc, #96]	; (8009f50 <TIM_OC1_SetConfig+0x118>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d003      	beq.n	8009efa <TIM_OC1_SetConfig+0xc2>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	4a17      	ldr	r2, [pc, #92]	; (8009f54 <TIM_OC1_SetConfig+0x11c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d111      	bne.n	8009f1e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	621a      	str	r2, [r3, #32]
}
 8009f38:	bf00      	nop
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	40012c00 	.word	0x40012c00
 8009f48:	40013400 	.word	0x40013400
 8009f4c:	40014000 	.word	0x40014000
 8009f50:	40014400 	.word	0x40014400
 8009f54:	40014800 	.word	0x40014800

08009f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a1b      	ldr	r3, [r3, #32]
 8009f66:	f023 0210 	bic.w	r2, r3, #16
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	021b      	lsls	r3, r3, #8
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f023 0320 	bic.w	r3, r3, #32
 8009fa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a28      	ldr	r2, [pc, #160]	; (800a058 <TIM_OC2_SetConfig+0x100>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d003      	beq.n	8009fc4 <TIM_OC2_SetConfig+0x6c>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	4a27      	ldr	r2, [pc, #156]	; (800a05c <TIM_OC2_SetConfig+0x104>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d10d      	bne.n	8009fe0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	011b      	lsls	r3, r3, #4
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a1d      	ldr	r2, [pc, #116]	; (800a058 <TIM_OC2_SetConfig+0x100>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d00f      	beq.n	800a008 <TIM_OC2_SetConfig+0xb0>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a1c      	ldr	r2, [pc, #112]	; (800a05c <TIM_OC2_SetConfig+0x104>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d00b      	beq.n	800a008 <TIM_OC2_SetConfig+0xb0>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a1b      	ldr	r2, [pc, #108]	; (800a060 <TIM_OC2_SetConfig+0x108>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d007      	beq.n	800a008 <TIM_OC2_SetConfig+0xb0>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a1a      	ldr	r2, [pc, #104]	; (800a064 <TIM_OC2_SetConfig+0x10c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d003      	beq.n	800a008 <TIM_OC2_SetConfig+0xb0>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a19      	ldr	r2, [pc, #100]	; (800a068 <TIM_OC2_SetConfig+0x110>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d113      	bne.n	800a030 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a00e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a016:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	4313      	orrs	r3, r2
 800a022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	621a      	str	r2, [r3, #32]
}
 800a04a:	bf00      	nop
 800a04c:	371c      	adds	r7, #28
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	40012c00 	.word	0x40012c00
 800a05c:	40013400 	.word	0x40013400
 800a060:	40014000 	.word	0x40014000
 800a064:	40014400 	.word	0x40014400
 800a068:	40014800 	.word	0x40014800

0800a06c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a09a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 0303 	bic.w	r3, r3, #3
 800a0a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	021b      	lsls	r3, r3, #8
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	4a27      	ldr	r2, [pc, #156]	; (800a168 <TIM_OC3_SetConfig+0xfc>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d003      	beq.n	800a0d6 <TIM_OC3_SetConfig+0x6a>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a26      	ldr	r2, [pc, #152]	; (800a16c <TIM_OC3_SetConfig+0x100>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d10d      	bne.n	800a0f2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0f0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a1c      	ldr	r2, [pc, #112]	; (800a168 <TIM_OC3_SetConfig+0xfc>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d00f      	beq.n	800a11a <TIM_OC3_SetConfig+0xae>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a1b      	ldr	r2, [pc, #108]	; (800a16c <TIM_OC3_SetConfig+0x100>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d00b      	beq.n	800a11a <TIM_OC3_SetConfig+0xae>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4a1a      	ldr	r2, [pc, #104]	; (800a170 <TIM_OC3_SetConfig+0x104>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d007      	beq.n	800a11a <TIM_OC3_SetConfig+0xae>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a19      	ldr	r2, [pc, #100]	; (800a174 <TIM_OC3_SetConfig+0x108>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d003      	beq.n	800a11a <TIM_OC3_SetConfig+0xae>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a18      	ldr	r2, [pc, #96]	; (800a178 <TIM_OC3_SetConfig+0x10c>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d113      	bne.n	800a142 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	011b      	lsls	r3, r3, #4
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	4313      	orrs	r3, r2
 800a134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	011b      	lsls	r3, r3, #4
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	4313      	orrs	r3, r2
 800a140:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	621a      	str	r2, [r3, #32]
}
 800a15c:	bf00      	nop
 800a15e:	371c      	adds	r7, #28
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	40012c00 	.word	0x40012c00
 800a16c:	40013400 	.word	0x40013400
 800a170:	40014000 	.word	0x40014000
 800a174:	40014400 	.word	0x40014400
 800a178:	40014800 	.word	0x40014800

0800a17c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b087      	sub	sp, #28
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6a1b      	ldr	r3, [r3, #32]
 800a18a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	031b      	lsls	r3, r3, #12
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a18      	ldr	r2, [pc, #96]	; (800a23c <TIM_OC4_SetConfig+0xc0>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d00f      	beq.n	800a200 <TIM_OC4_SetConfig+0x84>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a17      	ldr	r2, [pc, #92]	; (800a240 <TIM_OC4_SetConfig+0xc4>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d00b      	beq.n	800a200 <TIM_OC4_SetConfig+0x84>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a16      	ldr	r2, [pc, #88]	; (800a244 <TIM_OC4_SetConfig+0xc8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d007      	beq.n	800a200 <TIM_OC4_SetConfig+0x84>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a15      	ldr	r2, [pc, #84]	; (800a248 <TIM_OC4_SetConfig+0xcc>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d003      	beq.n	800a200 <TIM_OC4_SetConfig+0x84>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a14      	ldr	r2, [pc, #80]	; (800a24c <TIM_OC4_SetConfig+0xd0>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d109      	bne.n	800a214 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	019b      	lsls	r3, r3, #6
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4313      	orrs	r3, r2
 800a212:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	685a      	ldr	r2, [r3, #4]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	621a      	str	r2, [r3, #32]
}
 800a22e:	bf00      	nop
 800a230:	371c      	adds	r7, #28
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	40012c00 	.word	0x40012c00
 800a240:	40013400 	.word	0x40013400
 800a244:	40014000 	.word	0x40014000
 800a248:	40014400 	.word	0x40014400
 800a24c:	40014800 	.word	0x40014800

0800a250 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a294:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	041b      	lsls	r3, r3, #16
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a17      	ldr	r2, [pc, #92]	; (800a304 <TIM_OC5_SetConfig+0xb4>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d00f      	beq.n	800a2ca <TIM_OC5_SetConfig+0x7a>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a16      	ldr	r2, [pc, #88]	; (800a308 <TIM_OC5_SetConfig+0xb8>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d00b      	beq.n	800a2ca <TIM_OC5_SetConfig+0x7a>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a15      	ldr	r2, [pc, #84]	; (800a30c <TIM_OC5_SetConfig+0xbc>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d007      	beq.n	800a2ca <TIM_OC5_SetConfig+0x7a>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a14      	ldr	r2, [pc, #80]	; (800a310 <TIM_OC5_SetConfig+0xc0>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d003      	beq.n	800a2ca <TIM_OC5_SetConfig+0x7a>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a13      	ldr	r2, [pc, #76]	; (800a314 <TIM_OC5_SetConfig+0xc4>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d109      	bne.n	800a2de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	021b      	lsls	r3, r3, #8
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	621a      	str	r2, [r3, #32]
}
 800a2f8:	bf00      	nop
 800a2fa:	371c      	adds	r7, #28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr
 800a304:	40012c00 	.word	0x40012c00
 800a308:	40013400 	.word	0x40013400
 800a30c:	40014000 	.word	0x40014000
 800a310:	40014400 	.word	0x40014400
 800a314:	40014800 	.word	0x40014800

0800a318 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a34a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	021b      	lsls	r3, r3, #8
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a35e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	051b      	lsls	r3, r3, #20
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	4313      	orrs	r3, r2
 800a36a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a18      	ldr	r2, [pc, #96]	; (800a3d0 <TIM_OC6_SetConfig+0xb8>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00f      	beq.n	800a394 <TIM_OC6_SetConfig+0x7c>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a17      	ldr	r2, [pc, #92]	; (800a3d4 <TIM_OC6_SetConfig+0xbc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d00b      	beq.n	800a394 <TIM_OC6_SetConfig+0x7c>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a16      	ldr	r2, [pc, #88]	; (800a3d8 <TIM_OC6_SetConfig+0xc0>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d007      	beq.n	800a394 <TIM_OC6_SetConfig+0x7c>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a15      	ldr	r2, [pc, #84]	; (800a3dc <TIM_OC6_SetConfig+0xc4>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d003      	beq.n	800a394 <TIM_OC6_SetConfig+0x7c>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	4a14      	ldr	r2, [pc, #80]	; (800a3e0 <TIM_OC6_SetConfig+0xc8>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d109      	bne.n	800a3a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a39a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	029b      	lsls	r3, r3, #10
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	621a      	str	r2, [r3, #32]
}
 800a3c2:	bf00      	nop
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	40012c00 	.word	0x40012c00
 800a3d4:	40013400 	.word	0x40013400
 800a3d8:	40014000 	.word	0x40014000
 800a3dc:	40014400 	.word	0x40014400
 800a3e0:	40014800 	.word	0x40014800

0800a3e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	4313      	orrs	r3, r2
 800a406:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a40e:	f023 0307 	bic.w	r3, r3, #7
 800a412:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	2b70      	cmp	r3, #112	; 0x70
 800a42c:	d01a      	beq.n	800a464 <TIM_SlaveTimer_SetConfig+0x80>
 800a42e:	2b70      	cmp	r3, #112	; 0x70
 800a430:	d860      	bhi.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a432:	2b60      	cmp	r3, #96	; 0x60
 800a434:	d054      	beq.n	800a4e0 <TIM_SlaveTimer_SetConfig+0xfc>
 800a436:	2b60      	cmp	r3, #96	; 0x60
 800a438:	d85c      	bhi.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a43a:	2b50      	cmp	r3, #80	; 0x50
 800a43c:	d046      	beq.n	800a4cc <TIM_SlaveTimer_SetConfig+0xe8>
 800a43e:	2b50      	cmp	r3, #80	; 0x50
 800a440:	d858      	bhi.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a442:	2b40      	cmp	r3, #64	; 0x40
 800a444:	d019      	beq.n	800a47a <TIM_SlaveTimer_SetConfig+0x96>
 800a446:	2b40      	cmp	r3, #64	; 0x40
 800a448:	d854      	bhi.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a44a:	2b30      	cmp	r3, #48	; 0x30
 800a44c:	d054      	beq.n	800a4f8 <TIM_SlaveTimer_SetConfig+0x114>
 800a44e:	2b30      	cmp	r3, #48	; 0x30
 800a450:	d850      	bhi.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a452:	2b20      	cmp	r3, #32
 800a454:	d050      	beq.n	800a4f8 <TIM_SlaveTimer_SetConfig+0x114>
 800a456:	2b20      	cmp	r3, #32
 800a458:	d84c      	bhi.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x110>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d04c      	beq.n	800a4f8 <TIM_SlaveTimer_SetConfig+0x114>
 800a45e:	2b10      	cmp	r3, #16
 800a460:	d04a      	beq.n	800a4f8 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a462:	e047      	b.n	800a4f4 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	68d9      	ldr	r1, [r3, #12]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	689a      	ldr	r2, [r3, #8]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	f000 f9c3 	bl	800a7fe <TIM_ETR_SetConfig>
      break;
 800a478:	e03f      	b.n	800a4fa <TIM_SlaveTimer_SetConfig+0x116>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b05      	cmp	r3, #5
 800a480:	d101      	bne.n	800a486 <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e03a      	b.n	800a4fc <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6a1a      	ldr	r2, [r3, #32]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4ac:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	621a      	str	r2, [r3, #32]
      break;
 800a4ca:	e016      	b.n	800a4fa <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6818      	ldr	r0, [r3, #0]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	6899      	ldr	r1, [r3, #8]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	f000 f87b 	bl	800a5d4 <TIM_TI1_ConfigInputStage>
      break;
 800a4de:	e00c      	b.n	800a4fa <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6818      	ldr	r0, [r3, #0]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	6899      	ldr	r1, [r3, #8]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f000 f8dd 	bl	800a6ac <TIM_TI2_ConfigInputStage>
      break;
 800a4f2:	e002      	b.n	800a4fa <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800a4f4:	bf00      	nop
 800a4f6:	e000      	b.n	800a4fa <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800a4f8:	bf00      	nop
  }
  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a504:	b480      	push	{r7}
 800a506:	b087      	sub	sp, #28
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	607a      	str	r2, [r7, #4]
 800a510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a1b      	ldr	r3, [r3, #32]
 800a516:	f023 0201 	bic.w	r2, r3, #1
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4a24      	ldr	r2, [pc, #144]	; (800a5c0 <TIM_TI1_SetConfig+0xbc>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d013      	beq.n	800a55a <TIM_TI1_SetConfig+0x56>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a538:	d00f      	beq.n	800a55a <TIM_TI1_SetConfig+0x56>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4a21      	ldr	r2, [pc, #132]	; (800a5c4 <TIM_TI1_SetConfig+0xc0>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d00b      	beq.n	800a55a <TIM_TI1_SetConfig+0x56>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	4a20      	ldr	r2, [pc, #128]	; (800a5c8 <TIM_TI1_SetConfig+0xc4>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d007      	beq.n	800a55a <TIM_TI1_SetConfig+0x56>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	4a1f      	ldr	r2, [pc, #124]	; (800a5cc <TIM_TI1_SetConfig+0xc8>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d003      	beq.n	800a55a <TIM_TI1_SetConfig+0x56>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4a1e      	ldr	r2, [pc, #120]	; (800a5d0 <TIM_TI1_SetConfig+0xcc>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d101      	bne.n	800a55e <TIM_TI1_SetConfig+0x5a>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e000      	b.n	800a560 <TIM_TI1_SetConfig+0x5c>
 800a55e:	2300      	movs	r3, #0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d008      	beq.n	800a576 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f023 0303 	bic.w	r3, r3, #3
 800a56a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4313      	orrs	r3, r2
 800a572:	617b      	str	r3, [r7, #20]
 800a574:	e003      	b.n	800a57e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f043 0301 	orr.w	r3, r3, #1
 800a57c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	011b      	lsls	r3, r3, #4
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	4313      	orrs	r3, r2
 800a590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f023 030a 	bic.w	r3, r3, #10
 800a598:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f003 030a 	and.w	r3, r3, #10
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	621a      	str	r2, [r3, #32]
}
 800a5b2:	bf00      	nop
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	40012c00 	.word	0x40012c00
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	40013400 	.word	0x40013400
 800a5d0:	40014000 	.word	0x40014000

0800a5d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	f023 0201 	bic.w	r2, r3, #1
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	4313      	orrs	r3, r2
 800a608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f023 030a 	bic.w	r3, r3, #10
 800a610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4313      	orrs	r3, r2
 800a618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	621a      	str	r2, [r3, #32]
}
 800a626:	bf00      	nop
 800a628:	371c      	adds	r7, #28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a632:	b480      	push	{r7}
 800a634:	b087      	sub	sp, #28
 800a636:	af00      	add	r7, sp, #0
 800a638:	60f8      	str	r0, [r7, #12]
 800a63a:	60b9      	str	r1, [r7, #8]
 800a63c:	607a      	str	r2, [r7, #4]
 800a63e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6a1b      	ldr	r3, [r3, #32]
 800a644:	f023 0210 	bic.w	r2, r3, #16
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	699b      	ldr	r3, [r3, #24]
 800a650:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a65e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	4313      	orrs	r3, r2
 800a668:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	031b      	lsls	r3, r3, #12
 800a676:	b29b      	uxth	r3, r3
 800a678:	697a      	ldr	r2, [r7, #20]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a684:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	011b      	lsls	r3, r3, #4
 800a68a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	4313      	orrs	r3, r2
 800a692:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	621a      	str	r2, [r3, #32]
}
 800a6a0:	bf00      	nop
 800a6a2:	371c      	adds	r7, #28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	f023 0210 	bic.w	r2, r3, #16
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	699b      	ldr	r3, [r3, #24]
 800a6c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	031b      	lsls	r3, r3, #12
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	011b      	lsls	r3, r3, #4
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	621a      	str	r2, [r3, #32]
}
 800a700:	bf00      	nop
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
 800a718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a1b      	ldr	r3, [r3, #32]
 800a730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 0303 	bic.w	r3, r3, #3
 800a738:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4313      	orrs	r3, r2
 800a740:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a748:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	4313      	orrs	r3, r2
 800a754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a75c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	021b      	lsls	r3, r3, #8
 800a762:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	4313      	orrs	r3, r2
 800a76a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	621a      	str	r2, [r3, #32]
}
 800a778:	bf00      	nop
 800a77a:	371c      	adds	r7, #28
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a784:	b480      	push	{r7}
 800a786:	b087      	sub	sp, #28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6a1b      	ldr	r3, [r3, #32]
 800a796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	697a      	ldr	r2, [r7, #20]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	031b      	lsls	r3, r3, #12
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a7d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	031b      	lsls	r3, r3, #12
 800a7dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a7e0:	693a      	ldr	r2, [r7, #16]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	621a      	str	r2, [r3, #32]
}
 800a7f2:	bf00      	nop
 800a7f4:	371c      	adds	r7, #28
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b087      	sub	sp, #28
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	607a      	str	r2, [r7, #4]
 800a80a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a818:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	021a      	lsls	r2, r3, #8
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	431a      	orrs	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	4313      	orrs	r3, r2
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	609a      	str	r2, [r3, #8]
}
 800a832:	bf00      	nop
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
	...

0800a840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a854:	2302      	movs	r3, #2
 800a856:	e063      	b.n	800a920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a2b      	ldr	r2, [pc, #172]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d004      	beq.n	800a88c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a2a      	ldr	r2, [pc, #168]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d108      	bne.n	800a89e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a892:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d018      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ca:	d013      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a18      	ldr	r2, [pc, #96]	; (800a934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d00e      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a17      	ldr	r2, [pc, #92]	; (800a938 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d009      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a12      	ldr	r2, [pc, #72]	; (800a930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d004      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a13      	ldr	r2, [pc, #76]	; (800a93c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d10c      	bne.n	800a90e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a8fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	4313      	orrs	r3, r2
 800a904:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	40012c00 	.word	0x40012c00
 800a930:	40013400 	.word	0x40013400
 800a934:	40000400 	.word	0x40000400
 800a938:	40000800 	.word	0x40000800
 800a93c:	40014000 	.word	0x40014000

0800a940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a94a:	2300      	movs	r3, #0
 800a94c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a954:	2b01      	cmp	r3, #1
 800a956:	d101      	bne.n	800a95c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a958:	2302      	movs	r3, #2
 800a95a:	e065      	b.n	800aa28 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	041b      	lsls	r3, r3, #16
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a16      	ldr	r2, [pc, #88]	; (800aa34 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d004      	beq.n	800a9ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a14      	ldr	r2, [pc, #80]	; (800aa38 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d115      	bne.n	800aa16 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f4:	051b      	lsls	r3, r3, #20
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	40012c00 	.word	0x40012c00
 800aa38:	40013400 	.word	0x40013400

0800aa3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e040      	b.n	800aad0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7f9 ff10 	bl	8004884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2224      	movs	r2, #36	; 0x24
 800aa68:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f022 0201 	bic.w	r2, r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f82c 	bl	800aad8 <UART_SetConfig>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d101      	bne.n	800aa8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e022      	b.n	800aad0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa3e 	bl	800af14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aaa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	689a      	ldr	r2, [r3, #8]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f042 0201 	orr.w	r2, r2, #1
 800aac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fac5 	bl	800b058 <UART_CheckIdleState>
 800aace:	4603      	mov	r3, r0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800aae0:	2300      	movs	r3, #0
 800aae2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689a      	ldr	r2, [r3, #8]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab0a:	f023 030c 	bic.w	r3, r3, #12
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	6939      	ldr	r1, [r7, #16]
 800ab14:	430b      	orrs	r3, r1
 800ab16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	430a      	orrs	r2, r1
 800ab2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	430a      	orrs	r2, r1
 800ab50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4aab      	ldr	r2, [pc, #684]	; (800ae04 <UART_SetConfig+0x32c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d120      	bne.n	800ab9e <UART_SetConfig+0xc6>
 800ab5c:	4baa      	ldr	r3, [pc, #680]	; (800ae08 <UART_SetConfig+0x330>)
 800ab5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab60:	f003 0303 	and.w	r3, r3, #3
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	d817      	bhi.n	800ab98 <UART_SetConfig+0xc0>
 800ab68:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <UART_SetConfig+0x98>)
 800ab6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6e:	bf00      	nop
 800ab70:	0800ab81 	.word	0x0800ab81
 800ab74:	0800ab8d 	.word	0x0800ab8d
 800ab78:	0800ab93 	.word	0x0800ab93
 800ab7c:	0800ab87 	.word	0x0800ab87
 800ab80:	2301      	movs	r3, #1
 800ab82:	77fb      	strb	r3, [r7, #31]
 800ab84:	e0b5      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ab86:	2302      	movs	r3, #2
 800ab88:	77fb      	strb	r3, [r7, #31]
 800ab8a:	e0b2      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	77fb      	strb	r3, [r7, #31]
 800ab90:	e0af      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ab92:	2308      	movs	r3, #8
 800ab94:	77fb      	strb	r3, [r7, #31]
 800ab96:	e0ac      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ab98:	2310      	movs	r3, #16
 800ab9a:	77fb      	strb	r3, [r7, #31]
 800ab9c:	e0a9      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a9a      	ldr	r2, [pc, #616]	; (800ae0c <UART_SetConfig+0x334>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d124      	bne.n	800abf2 <UART_SetConfig+0x11a>
 800aba8:	4b97      	ldr	r3, [pc, #604]	; (800ae08 <UART_SetConfig+0x330>)
 800abaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800abb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abb4:	d011      	beq.n	800abda <UART_SetConfig+0x102>
 800abb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800abba:	d817      	bhi.n	800abec <UART_SetConfig+0x114>
 800abbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abc0:	d011      	beq.n	800abe6 <UART_SetConfig+0x10e>
 800abc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abc6:	d811      	bhi.n	800abec <UART_SetConfig+0x114>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <UART_SetConfig+0xfc>
 800abcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd0:	d006      	beq.n	800abe0 <UART_SetConfig+0x108>
 800abd2:	e00b      	b.n	800abec <UART_SetConfig+0x114>
 800abd4:	2300      	movs	r3, #0
 800abd6:	77fb      	strb	r3, [r7, #31]
 800abd8:	e08b      	b.n	800acf2 <UART_SetConfig+0x21a>
 800abda:	2302      	movs	r3, #2
 800abdc:	77fb      	strb	r3, [r7, #31]
 800abde:	e088      	b.n	800acf2 <UART_SetConfig+0x21a>
 800abe0:	2304      	movs	r3, #4
 800abe2:	77fb      	strb	r3, [r7, #31]
 800abe4:	e085      	b.n	800acf2 <UART_SetConfig+0x21a>
 800abe6:	2308      	movs	r3, #8
 800abe8:	77fb      	strb	r3, [r7, #31]
 800abea:	e082      	b.n	800acf2 <UART_SetConfig+0x21a>
 800abec:	2310      	movs	r3, #16
 800abee:	77fb      	strb	r3, [r7, #31]
 800abf0:	e07f      	b.n	800acf2 <UART_SetConfig+0x21a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a86      	ldr	r2, [pc, #536]	; (800ae10 <UART_SetConfig+0x338>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d124      	bne.n	800ac46 <UART_SetConfig+0x16e>
 800abfc:	4b82      	ldr	r3, [pc, #520]	; (800ae08 <UART_SetConfig+0x330>)
 800abfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ac04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ac08:	d011      	beq.n	800ac2e <UART_SetConfig+0x156>
 800ac0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ac0e:	d817      	bhi.n	800ac40 <UART_SetConfig+0x168>
 800ac10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac14:	d011      	beq.n	800ac3a <UART_SetConfig+0x162>
 800ac16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac1a:	d811      	bhi.n	800ac40 <UART_SetConfig+0x168>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <UART_SetConfig+0x150>
 800ac20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac24:	d006      	beq.n	800ac34 <UART_SetConfig+0x15c>
 800ac26:	e00b      	b.n	800ac40 <UART_SetConfig+0x168>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	77fb      	strb	r3, [r7, #31]
 800ac2c:	e061      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac2e:	2302      	movs	r3, #2
 800ac30:	77fb      	strb	r3, [r7, #31]
 800ac32:	e05e      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac34:	2304      	movs	r3, #4
 800ac36:	77fb      	strb	r3, [r7, #31]
 800ac38:	e05b      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac3a:	2308      	movs	r3, #8
 800ac3c:	77fb      	strb	r3, [r7, #31]
 800ac3e:	e058      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac40:	2310      	movs	r3, #16
 800ac42:	77fb      	strb	r3, [r7, #31]
 800ac44:	e055      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a72      	ldr	r2, [pc, #456]	; (800ae14 <UART_SetConfig+0x33c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d124      	bne.n	800ac9a <UART_SetConfig+0x1c2>
 800ac50:	4b6d      	ldr	r3, [pc, #436]	; (800ae08 <UART_SetConfig+0x330>)
 800ac52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac54:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ac58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac5c:	d011      	beq.n	800ac82 <UART_SetConfig+0x1aa>
 800ac5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac62:	d817      	bhi.n	800ac94 <UART_SetConfig+0x1bc>
 800ac64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac68:	d011      	beq.n	800ac8e <UART_SetConfig+0x1b6>
 800ac6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac6e:	d811      	bhi.n	800ac94 <UART_SetConfig+0x1bc>
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d003      	beq.n	800ac7c <UART_SetConfig+0x1a4>
 800ac74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac78:	d006      	beq.n	800ac88 <UART_SetConfig+0x1b0>
 800ac7a:	e00b      	b.n	800ac94 <UART_SetConfig+0x1bc>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	77fb      	strb	r3, [r7, #31]
 800ac80:	e037      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac82:	2302      	movs	r3, #2
 800ac84:	77fb      	strb	r3, [r7, #31]
 800ac86:	e034      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	77fb      	strb	r3, [r7, #31]
 800ac8c:	e031      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac8e:	2308      	movs	r3, #8
 800ac90:	77fb      	strb	r3, [r7, #31]
 800ac92:	e02e      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac94:	2310      	movs	r3, #16
 800ac96:	77fb      	strb	r3, [r7, #31]
 800ac98:	e02b      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a5e      	ldr	r2, [pc, #376]	; (800ae18 <UART_SetConfig+0x340>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d124      	bne.n	800acee <UART_SetConfig+0x216>
 800aca4:	4b58      	ldr	r3, [pc, #352]	; (800ae08 <UART_SetConfig+0x330>)
 800aca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800acac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800acb0:	d011      	beq.n	800acd6 <UART_SetConfig+0x1fe>
 800acb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800acb6:	d817      	bhi.n	800ace8 <UART_SetConfig+0x210>
 800acb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acbc:	d011      	beq.n	800ace2 <UART_SetConfig+0x20a>
 800acbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acc2:	d811      	bhi.n	800ace8 <UART_SetConfig+0x210>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d003      	beq.n	800acd0 <UART_SetConfig+0x1f8>
 800acc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800accc:	d006      	beq.n	800acdc <UART_SetConfig+0x204>
 800acce:	e00b      	b.n	800ace8 <UART_SetConfig+0x210>
 800acd0:	2300      	movs	r3, #0
 800acd2:	77fb      	strb	r3, [r7, #31]
 800acd4:	e00d      	b.n	800acf2 <UART_SetConfig+0x21a>
 800acd6:	2302      	movs	r3, #2
 800acd8:	77fb      	strb	r3, [r7, #31]
 800acda:	e00a      	b.n	800acf2 <UART_SetConfig+0x21a>
 800acdc:	2304      	movs	r3, #4
 800acde:	77fb      	strb	r3, [r7, #31]
 800ace0:	e007      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ace2:	2308      	movs	r3, #8
 800ace4:	77fb      	strb	r3, [r7, #31]
 800ace6:	e004      	b.n	800acf2 <UART_SetConfig+0x21a>
 800ace8:	2310      	movs	r3, #16
 800acea:	77fb      	strb	r3, [r7, #31]
 800acec:	e001      	b.n	800acf2 <UART_SetConfig+0x21a>
 800acee:	2310      	movs	r3, #16
 800acf0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acfa:	f040 808f 	bne.w	800ae1c <UART_SetConfig+0x344>
  {
    switch (clocksource)
 800acfe:	7ffb      	ldrb	r3, [r7, #31]
 800ad00:	2b08      	cmp	r3, #8
 800ad02:	d85f      	bhi.n	800adc4 <UART_SetConfig+0x2ec>
 800ad04:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <UART_SetConfig+0x234>)
 800ad06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0a:	bf00      	nop
 800ad0c:	0800ad31 	.word	0x0800ad31
 800ad10:	0800ad51 	.word	0x0800ad51
 800ad14:	0800ad71 	.word	0x0800ad71
 800ad18:	0800adc5 	.word	0x0800adc5
 800ad1c:	0800ad8d 	.word	0x0800ad8d
 800ad20:	0800adc5 	.word	0x0800adc5
 800ad24:	0800adc5 	.word	0x0800adc5
 800ad28:	0800adc5 	.word	0x0800adc5
 800ad2c:	0800adad 	.word	0x0800adad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad30:	f7fd ffb0 	bl	8008c94 <HAL_RCC_GetPCLK1Freq>
 800ad34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	005a      	lsls	r2, r3, #1
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	085b      	lsrs	r3, r3, #1
 800ad40:	441a      	add	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	61bb      	str	r3, [r7, #24]
        break;
 800ad4e:	e03c      	b.n	800adca <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad50:	f7fd ffc2 	bl	8008cd8 <HAL_RCC_GetPCLK2Freq>
 800ad54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	005a      	lsls	r2, r3, #1
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	085b      	lsrs	r3, r3, #1
 800ad60:	441a      	add	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	61bb      	str	r3, [r7, #24]
        break;
 800ad6e:	e02c      	b.n	800adca <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	085b      	lsrs	r3, r3, #1
 800ad76:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800ad7a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	6852      	ldr	r2, [r2, #4]
 800ad82:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	61bb      	str	r3, [r7, #24]
        break;
 800ad8a:	e01e      	b.n	800adca <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad8c:	f7fd ff0c 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 800ad90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	005a      	lsls	r2, r3, #1
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	085b      	lsrs	r3, r3, #1
 800ad9c:	441a      	add	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	61bb      	str	r3, [r7, #24]
        break;
 800adaa:	e00e      	b.n	800adca <UART_SetConfig+0x2f2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	085b      	lsrs	r3, r3, #1
 800adb2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	fbb2 f3f3 	udiv	r3, r2, r3
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	61bb      	str	r3, [r7, #24]
        break;
 800adc2:	e002      	b.n	800adca <UART_SetConfig+0x2f2>
      default:
        ret = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	75fb      	strb	r3, [r7, #23]
        break;
 800adc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2b0f      	cmp	r3, #15
 800adce:	d916      	bls.n	800adfe <UART_SetConfig+0x326>
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800add6:	d212      	bcs.n	800adfe <UART_SetConfig+0x326>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	b29b      	uxth	r3, r3
 800addc:	f023 030f 	bic.w	r3, r3, #15
 800ade0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	085b      	lsrs	r3, r3, #1
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	b29a      	uxth	r2, r3
 800adee:	897b      	ldrh	r3, [r7, #10]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	897a      	ldrh	r2, [r7, #10]
 800adfa:	60da      	str	r2, [r3, #12]
 800adfc:	e07e      	b.n	800aefc <UART_SetConfig+0x424>
    }
    else
    {
      ret = HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	75fb      	strb	r3, [r7, #23]
 800ae02:	e07b      	b.n	800aefc <UART_SetConfig+0x424>
 800ae04:	40013800 	.word	0x40013800
 800ae08:	40021000 	.word	0x40021000
 800ae0c:	40004400 	.word	0x40004400
 800ae10:	40004800 	.word	0x40004800
 800ae14:	40004c00 	.word	0x40004c00
 800ae18:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 800ae1c:	7ffb      	ldrb	r3, [r7, #31]
 800ae1e:	2b08      	cmp	r3, #8
 800ae20:	d85b      	bhi.n	800aeda <UART_SetConfig+0x402>
 800ae22:	a201      	add	r2, pc, #4	; (adr r2, 800ae28 <UART_SetConfig+0x350>)
 800ae24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae28:	0800ae4d 	.word	0x0800ae4d
 800ae2c:	0800ae6b 	.word	0x0800ae6b
 800ae30:	0800ae89 	.word	0x0800ae89
 800ae34:	0800aedb 	.word	0x0800aedb
 800ae38:	0800aea5 	.word	0x0800aea5
 800ae3c:	0800aedb 	.word	0x0800aedb
 800ae40:	0800aedb 	.word	0x0800aedb
 800ae44:	0800aedb 	.word	0x0800aedb
 800ae48:	0800aec3 	.word	0x0800aec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae4c:	f7fd ff22 	bl	8008c94 <HAL_RCC_GetPCLK1Freq>
 800ae50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	085a      	lsrs	r2, r3, #1
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	441a      	add	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	61bb      	str	r3, [r7, #24]
        break;
 800ae68:	e03a      	b.n	800aee0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae6a:	f7fd ff35 	bl	8008cd8 <HAL_RCC_GetPCLK2Freq>
 800ae6e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	085a      	lsrs	r2, r3, #1
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	441a      	add	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	61bb      	str	r3, [r7, #24]
        break;
 800ae86:	e02b      	b.n	800aee0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	085b      	lsrs	r3, r3, #1
 800ae8e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800ae92:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	6852      	ldr	r2, [r2, #4]
 800ae9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	61bb      	str	r3, [r7, #24]
        break;
 800aea2:	e01d      	b.n	800aee0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aea4:	f7fd fe80 	bl	8008ba8 <HAL_RCC_GetSysClockFreq>
 800aea8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	085a      	lsrs	r2, r3, #1
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	441a      	add	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	61bb      	str	r3, [r7, #24]
        break;
 800aec0:	e00e      	b.n	800aee0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	085b      	lsrs	r3, r3, #1
 800aec8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	61bb      	str	r3, [r7, #24]
        break;
 800aed8:	e002      	b.n	800aee0 <UART_SetConfig+0x408>
      default:
        ret = HAL_ERROR;
 800aeda:	2301      	movs	r3, #1
 800aedc:	75fb      	strb	r3, [r7, #23]
        break;
 800aede:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	d908      	bls.n	800aef8 <UART_SetConfig+0x420>
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeec:	d204      	bcs.n	800aef8 <UART_SetConfig+0x420>
    {
      huart->Instance->BRR = usartdiv;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69ba      	ldr	r2, [r7, #24]
 800aef4:	60da      	str	r2, [r3, #12]
 800aef6:	e001      	b.n	800aefc <UART_SetConfig+0x424>
    }
    else
    {
      ret = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800af08:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3720      	adds	r7, #32
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop

0800af14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00a      	beq.n	800af3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00a      	beq.n	800af60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	430a      	orrs	r2, r1
 800af5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00a      	beq.n	800af82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	430a      	orrs	r2, r1
 800af80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af86:	f003 0308 	and.w	r3, r3, #8
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00a      	beq.n	800afa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	430a      	orrs	r2, r1
 800afa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa8:	f003 0310 	and.w	r3, r3, #16
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00a      	beq.n	800afc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	430a      	orrs	r2, r1
 800afc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	f003 0320 	and.w	r3, r3, #32
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00a      	beq.n	800afe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	430a      	orrs	r2, r1
 800afe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d01a      	beq.n	800b02a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b012:	d10a      	bne.n	800b02a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	430a      	orrs	r2, r1
 800b028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00a      	beq.n	800b04c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	430a      	orrs	r2, r1
 800b04a:	605a      	str	r2, [r3, #4]
  }
}
 800b04c:	bf00      	nop
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b066:	f7fa feab 	bl	8005dc0 <HAL_GetTick>
 800b06a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0308 	and.w	r3, r3, #8
 800b076:	2b08      	cmp	r3, #8
 800b078:	d10e      	bne.n	800b098 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b07a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f82a 	bl	800b0e2 <UART_WaitOnFlagUntilTimeout>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b094:	2303      	movs	r3, #3
 800b096:	e020      	b.n	800b0da <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b04      	cmp	r3, #4
 800b0a4:	d10e      	bne.n	800b0c4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f814 	bl	800b0e2 <UART_WaitOnFlagUntilTimeout>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	e00a      	b.n	800b0da <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	603b      	str	r3, [r7, #0]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0f2:	e05d      	b.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d059      	beq.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0fc:	f7fa fe60 	bl	8005dc0 <HAL_GetTick>
 800b100:	4602      	mov	r2, r0
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	1ad3      	subs	r3, r2, r3
 800b106:	69ba      	ldr	r2, [r7, #24]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d302      	bcc.n	800b112 <UART_WaitOnFlagUntilTimeout+0x30>
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d11b      	bne.n	800b14a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b120:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689a      	ldr	r2, [r3, #8]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0201 	bic.w	r2, r2, #1
 800b130:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2220      	movs	r2, #32
 800b136:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2220      	movs	r2, #32
 800b13c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e042      	b.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	d02b      	beq.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	69db      	ldr	r3, [r3, #28]
 800b15e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b166:	d123      	bne.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b170:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b180:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	689a      	ldr	r2, [r3, #8]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f022 0201 	bic.w	r2, r2, #1
 800b190:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2220      	movs	r2, #32
 800b196:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2220      	movs	r2, #32
 800b19c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2220      	movs	r2, #32
 800b1a2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e00f      	b.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	69da      	ldr	r2, [r3, #28]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	68ba      	ldr	r2, [r7, #8]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	bf0c      	ite	eq
 800b1c0:	2301      	moveq	r3, #1
 800b1c2:	2300      	movne	r3, #0
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	79fb      	ldrb	r3, [r7, #7]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d092      	beq.n	800b0f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  return ( pHandle->AvBusVoltage_d );
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	88db      	ldrh	r3, [r3, #6]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	88db      	ldrh	r3, [r3, #6]
 800b1fc:	60fb      	str	r3, [r7, #12]
  temp *= pHandle->ConversionFactor;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	885b      	ldrh	r3, [r3, #2]
 800b202:	461a      	mov	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	fb02 f303 	mul.w	r3, r2, r3
 800b20a:	60fb      	str	r3, [r7, #12]
  temp /= 65536u;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	0c1b      	lsrs	r3, r3, #16
 800b210:	60fb      	str	r3, [r7, #12]

  return ( ( uint16_t )temp );
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	b29b      	uxth	r3, r3
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800b222:	b480      	push	{r7}
 800b224:	b089      	sub	sp, #36	; 0x24
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	60fb      	str	r3, [r7, #12]

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800b230:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b234:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b238:	fb02 f203 	mul.w	r2, r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 800b23c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b240:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800b244:	fb01 f303 	mul.w	r3, r1, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800b248:	4413      	add	r3, r2
 800b24a:	61fb      	str	r3, [r7, #28]

  uw_temp = ( uint32_t ) sw_temp;
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	61bb      	str	r3, [r7, #24]

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	461a      	mov	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	fb03 f302 	mul.w	r3, r3, r2
 800b25e:	69ba      	ldr	r2, [r7, #24]
 800b260:	429a      	cmp	r2, r3
 800b262:	d930      	bls.n	800b2c6 <Circle_Limitation+0xa4>
  {

    uw_temp /= ( uint32_t )( 16777216 );
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	0e1b      	lsrs	r3, r3, #24
 800b268:	61bb      	str	r3, [r7, #24]

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800b270:	461a      	mov	r2, r3
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	1a9b      	subs	r3, r3, r2
 800b276:	61bb      	str	r3, [r7, #24]

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	005b      	lsls	r3, r3, #1
 800b280:	4413      	add	r3, r2
 800b282:	889b      	ldrh	r3, [r3, #4]
 800b284:	82fb      	strh	r3, [r7, #22]

    sw_temp = Vqd.q * ( int32_t )table_element;
 800b286:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b28a:	461a      	mov	r2, r3
 800b28c:	8afb      	ldrh	r3, [r7, #22]
 800b28e:	fb03 f302 	mul.w	r3, r3, r2
 800b292:	61fb      	str	r3, [r7, #28]
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2b00      	cmp	r3, #0
 800b298:	da02      	bge.n	800b2a0 <Circle_Limitation+0x7e>
 800b29a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b29e:	337f      	adds	r3, #127	; 0x7f
 800b2a0:	13db      	asrs	r3, r3, #15
 800b2a2:	b21b      	sxth	r3, r3
 800b2a4:	81bb      	strh	r3, [r7, #12]

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800b2a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	8afb      	ldrh	r3, [r7, #22]
 800b2ae:	fb03 f302 	mul.w	r3, r3, r2
 800b2b2:	61fb      	str	r3, [r7, #28]
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	da02      	bge.n	800b2c0 <Circle_Limitation+0x9e>
 800b2ba:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b2be:	337f      	adds	r3, #127	; 0x7f
 800b2c0:	13db      	asrs	r3, r3, #15
 800b2c2:	b21b      	sxth	r3, r3
 800b2c4:	81fb      	strh	r3, [r7, #14]
  }

  return ( local_vqd );
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	613b      	str	r3, [r7, #16]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	8a3a      	ldrh	r2, [r7, #16]
 800b2ce:	f362 030f 	bfi	r3, r2, #0, #16
 800b2d2:	8a7a      	ldrh	r2, [r7, #18]
 800b2d4:	f362 431f 	bfi	r3, r2, #16, #16
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3724      	adds	r7, #36	; 0x24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	60f8      	str	r0, [r7, #12]
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	60da      	str	r2, [r3, #12]
  }
}
 800b376:	bf00      	nop
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 800b382:	b480      	push	{r7}
 800b384:	b085      	sub	sp, #20
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d027      	beq.n	800b3e8 <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	89bb      	ldrh	r3, [r7, #12]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	785b      	ldrb	r3, [r3, #1]
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	89bb      	ldrh	r3, [r7, #12]
 800b3ac:	4413      	add	r3, r2
 800b3ae:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	72fb      	strb	r3, [r7, #11]
 800b3b4:	e00a      	b.n	800b3cc <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 800b3b6:	7afb      	ldrb	r3, [r7, #11]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	789b      	ldrb	r3, [r3, #2]
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	89bb      	ldrh	r3, [r7, #12]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800b3c6:	7afb      	ldrb	r3, [r7, #11]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	72fb      	strb	r3, [r7, #11]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	785b      	ldrb	r3, [r3, #1]
 800b3d0:	7afa      	ldrb	r2, [r7, #11]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d3ef      	bcc.n	800b3b6 <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 800b3d6:	89bb      	ldrh	r3, [r7, #12]
 800b3d8:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800b3da:	89bb      	ldrh	r3, [r7, #12]
 800b3dc:	0a1b      	lsrs	r3, r3, #8
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	7bfb      	ldrb	r3, [r7, #15]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3714      	adds	r7, #20
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b085      	sub	sp, #20
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b3fe:	2300      	movs	r3, #0
 800b400:	81fb      	strh	r3, [r7, #14]
 800b402:	e007      	b.n	800b414 <MPM_Clear+0x1e>
  {
    pHandle->hMeasBuffer[i] = 0;
 800b404:	89fa      	ldrh	r2, [r7, #14]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2100      	movs	r1, #0
 800b40a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b40e:	89fb      	ldrh	r3, [r7, #14]
 800b410:	3301      	adds	r3, #1
 800b412:	81fb      	strh	r3, [r7, #14]
 800b414:	89fb      	ldrh	r3, [r7, #14]
 800b416:	2b7f      	cmp	r3, #127	; 0x7f
 800b418:	d9f4      	bls.n	800b404 <MPM_Clear+0xe>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

}
 800b42a:	bf00      	nop
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 800b436:	b480      	push	{r7}
 800b438:	b085      	sub	sp, #20
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	807b      	strh	r3, [r7, #2]
  uint16_t i;
  int32_t wAux = 0;
 800b442:	2300      	movs	r3, #0
 800b444:	60bb      	str	r3, [r7, #8]

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b44c:	4619      	mov	r1, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	887a      	ldrh	r2, [r7, #2]
 800b452:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
  pHandle->hNextMeasBufferIndex++;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b468:	3301      	adds	r3, #1
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b478:	2b7f      	cmp	r3, #127	; 0x7f
 800b47a:	d903      	bls.n	800b484 <MPM_CalcElMotorPower+0x4e>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b484:	2300      	movs	r3, #0
 800b486:	81fb      	strh	r3, [r7, #14]
 800b488:	e00a      	b.n	800b4a0 <MPM_CalcElMotorPower+0x6a>
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800b48a:	89fa      	ldrh	r2, [r7, #14]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b492:	461a      	mov	r2, r3
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	4413      	add	r3, r2
 800b498:	60bb      	str	r3, [r7, #8]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b49a:	89fb      	ldrh	r3, [r7, #14]
 800b49c:	3301      	adds	r3, #1
 800b49e:	81fb      	strh	r3, [r7, #14]
 800b4a0:	89fb      	ldrh	r3, [r7, #14]
 800b4a2:	2b7f      	cmp	r3, #127	; 0x7f
 800b4a4:	d9f1      	bls.n	800b48a <MPM_CalcElMotorPower+0x54>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	da00      	bge.n	800b4ae <MPM_CalcElMotorPower+0x78>
 800b4ac:	337f      	adds	r3, #127	; 0x7f
 800b4ae:	11db      	asrs	r3, r3, #7
 800b4b0:	60bb      	str	r3, [r7, #8]
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	b21a      	sxth	r2, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
 800b4bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <MPM_GetAvrgElMotorPowerW>:
  *         expressed in watt.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrgElMotorPowerW );
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <NTC_SetFaultState>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b085      	sub	sp, #20
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	8a1a      	ldrh	r2, [r3, #16]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	8b5b      	ldrh	r3, [r3, #26]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d902      	bls.n	800b500 <NTC_SetFaultState+0x1a>
  {
    hFault = MC_OVER_TEMP;
 800b4fa:	2308      	movs	r3, #8
 800b4fc:	81fb      	strh	r3, [r7, #14]
 800b4fe:	e00b      	b.n	800b518 <NTC_SetFaultState+0x32>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	8a1a      	ldrh	r2, [r3, #16]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	8b9b      	ldrh	r3, [r3, #28]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d202      	bcs.n	800b512 <NTC_SetFaultState+0x2c>
  {
    hFault = MC_NO_ERROR;
 800b50c:	2300      	movs	r3, #0
 800b50e:	81fb      	strh	r3, [r7, #14]
 800b510:	e002      	b.n	800b518 <NTC_SetFaultState+0x32>
  }
  else
  {
    hFault = pHandle->hFaultState;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	8adb      	ldrh	r3, [r3, #22]
 800b516:	81fb      	strh	r3, [r7, #14]
  }
  return hFault;
 800b518:	89fb      	ldrh	r3, [r7, #14]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr

0800b526 <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
__weak void NTC_Init( NTC_Handle_t * pHandle )
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b082      	sub	sp, #8
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10d      	bne.n	800b552 <NTC_Init+0x2c>
  {
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3304      	adds	r3, #4
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7f8 fbfe 	bl	8003d3c <RCM_RegisterRegConv>
 800b540:	4603      	mov	r3, r0
 800b542:	461a      	mov	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    NTC_Clear( pHandle );
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f80c 	bl	800b568 <NTC_Clear>
  {
    pHandle->hFaultState = MC_NO_ERROR;
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
  }

}
 800b550:	e006      	b.n	800b560 <NTC_Init+0x3a>
    pHandle->hFaultState = MC_NO_ERROR;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	82da      	strh	r2, [r3, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8a5a      	ldrh	r2, [r3, #18]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	821a      	strh	r2, [r3, #16]
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <NTC_Clear>:
 * @brief Initializes internal average temperature computed value
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  pHandle->hAvTemp_d = 0u;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	821a      	strh	r2, [r3, #16]
}
 800b576:	bf00      	nop
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d12e      	bne.n	800b5f0 <NTC_CalcAvTemp+0x6e>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b598:	4618      	mov	r0, r3
 800b59a:	f7f8 fc85 	bl	8003ea8 <RCM_ExecRegularConv>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	81fb      	strh	r3, [r7, #14]

    if ( hAux != 0xFFFFu )
 800b5a2:	89fb      	ldrh	r3, [r7, #14]
 800b5a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d019      	beq.n	800b5e0 <NTC_CalcAvTemp+0x5e>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	8b1b      	ldrh	r3, [r3, #24]
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	60bb      	str	r3, [r7, #8]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	8a1b      	ldrh	r3, [r3, #16]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	fb02 f303 	mul.w	r3, r2, r3
 800b5c0:	60bb      	str	r3, [r7, #8]
      wtemp += hAux;
 800b5c2:	89fb      	ldrh	r3, [r7, #14]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	60bb      	str	r3, [r7, #8]
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8b1b      	ldrh	r3, [r3, #24]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5d6:	60bb      	str	r3, [r7, #8]

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	821a      	strh	r2, [r3, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff ff80 	bl	800b4e6 <NTC_SetFaultState>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	82da      	strh	r2, [r3, #22]
 800b5ee:	e002      	b.n	800b5f6 <NTC_CalcAvTemp+0x74>
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	82da      	strh	r2, [r3, #22]
  }

  return ( pHandle->hFaultState );
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	8adb      	ldrh	r3, [r3, #22]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <NTC_GetAvTemp_C>:
  * @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @r AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
 800b602:	b480      	push	{r7}
 800b604:	b085      	sub	sp, #20
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d11d      	bne.n	800b64e <NTC_GetAvTemp_C+0x4c>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	8a1b      	ldrh	r3, [r3, #16]
 800b616:	60fb      	str	r3, [r7, #12]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	461a      	mov	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	1a9b      	subs	r3, r3, r2
 800b622:	60fb      	str	r3, [r7, #12]
    wTemp *= pHandle->hSensitivity;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800b62a:	461a      	mov	r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	fb02 f303 	mul.w	r3, r2, r3
 800b632:	60fb      	str	r3, [r7, #12]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	da02      	bge.n	800b640 <NTC_GetAvTemp_C+0x3e>
 800b63a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b63e:	33ff      	adds	r3, #255	; 0xff
 800b640:	141b      	asrs	r3, r3, #16
 800b642:	461a      	mov	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b648:	4413      	add	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	e002      	b.n	800b654 <NTC_GetAvTemp_C+0x52>
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	8a9b      	ldrh	r3, [r3, #20]
 800b652:	60fb      	str	r3, [r7, #12]
  }
  return ( ( int16_t )wTemp );
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	b21b      	sxth	r3, r3
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <PID_HandleInit>:
 * @brief  It initializes the handle
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	809a      	strh	r2, [r3, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	80da      	strh	r2, [r3, #6]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	845a      	strh	r2, [r3, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	609a      	str	r2, [r3, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b696:	bf00      	nop
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <PID_SetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	807b      	strh	r3, [r7, #2]
  pHandle->hKpGain = hKpGain;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	887a      	ldrh	r2, [r7, #2]
 800b6b2:	809a      	strh	r2, [r3, #4]
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <PID_SetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	807b      	strh	r3, [r7, #2]
  pHandle->hKiGain = hKiGain;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	887a      	ldrh	r2, [r7, #2]
 800b6d0:	80da      	strh	r2, [r3, #6]
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <PID_GetKP>:
 * @brief  It returns the Kp gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpGain );
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <PID_GetKI>:
 * @brief  It returns the Ki gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiGain );
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <PID_SetIntegralTerm>:
 * pHandle: handler of the current instance of the PID component
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
  pHandle->wIntegralTerm = wIntegralTermValue;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	609a      	str	r2, [r3, #8]

  return;
 800b722:	bf00      	nop
}
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <PID_GetKPDivisor>:
 * @brief  It returns the Kp gain divisor
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
 800b72e:	b480      	push	{r7}
 800b730:	b083      	sub	sp, #12
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpDivisor );
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	8b1b      	ldrh	r3, [r3, #24]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <PID_GetKIDivisor>:
 * @brief  It returns the Ki gain divisor of the passed PI object
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
 800b746:	b480      	push	{r7}
 800b748:	b083      	sub	sp, #12
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiDivisor );
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	8b5b      	ldrh	r3, [r3, #26]
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <PID_SetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
 800b75e:	b480      	push	{r7}
 800b760:	b083      	sub	sp, #12
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	807b      	strh	r3, [r7, #2]
  pHandle->hKdGain = hKdGain;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	887a      	ldrh	r2, [r7, #2]
 800b76e:	845a      	strh	r2, [r3, #34]	; 0x22
}
 800b770:	bf00      	nop
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <PID_GetKD>:
 * @brief  It returns the Kd gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  return pHandle->hKdGain;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr
	...

0800b798 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 800b798:	b480      	push	{r7}
 800b79a:	b089      	sub	sp, #36	; 0x24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	8a9b      	ldrh	r3, [r3, #20]
 800b7aa:	827b      	strh	r3, [r7, #18]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	8adb      	ldrh	r3, [r3, #22]
 800b7b0:	823b      	strh	r3, [r7, #16]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	fb02 f303 	mul.w	r3, r2, r3
 800b7c0:	60fb      	str	r3, [r7, #12]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d103      	bne.n	800b7d4 <PI_Controller+0x3c>
  {
    pHandle->wIntegralTerm = 0;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	609a      	str	r2, [r3, #8]
 800b7d2:	e03a      	b.n	800b84a <PI_Controller+0xb2>
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
 800b7e2:	60bb      	str	r3, [r7, #8]
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	4413      	add	r3, r2
 800b7ec:	61bb      	str	r3, [r7, #24]

    if ( wIntegral_sum_temp < 0 )
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	da0a      	bge.n	800b80a <PI_Controller+0x72>
    {
      if ( pHandle->wIntegralTerm > 0 )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dd0f      	ble.n	800b81c <PI_Controller+0x84>
      {
        if ( wIntegral_Term > 0 )
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dd0c      	ble.n	800b81c <PI_Controller+0x84>
        {
          wIntegral_sum_temp = INT32_MAX;
 800b802:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b806:	61bb      	str	r3, [r7, #24]
 800b808:	e008      	b.n	800b81c <PI_Controller+0x84>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	da04      	bge.n	800b81c <PI_Controller+0x84>
      {
        if ( wIntegral_Term < 0 )
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	2b00      	cmp	r3, #0
 800b816:	da01      	bge.n	800b81c <PI_Controller+0x84>
        {
          wIntegral_sum_temp = -INT32_MAX;
 800b818:	4b27      	ldr	r3, [pc, #156]	; (800b8b8 <PI_Controller+0x120>)
 800b81a:	61bb      	str	r3, [r7, #24]
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	429a      	cmp	r2, r3
 800b824:	dd04      	ble.n	800b830 <PI_Controller+0x98>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	609a      	str	r2, [r3, #8]
 800b82e:	e00c      	b.n	800b84a <PI_Controller+0xb2>
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	69ba      	ldr	r2, [r7, #24]
 800b836:	429a      	cmp	r2, r3
 800b838:	da04      	bge.n	800b844 <PI_Controller+0xac>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	691a      	ldr	r2, [r3, #16]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	609a      	str	r2, [r3, #8]
 800b842:	e002      	b.n	800b84a <PI_Controller+0xb2>
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	609a      	str	r2, [r3, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	8b9b      	ldrh	r3, [r3, #28]
 800b84e:	461a      	mov	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	fa43 f202 	asr.w	r2, r3, r2
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	689b      	ldr	r3, [r3, #8]
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	8bc9      	ldrh	r1, [r1, #30]
 800b85e:	410b      	asrs	r3, r1
 800b860:	4413      	add	r3, r2
 800b862:	61fb      	str	r3, [r7, #28]
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800b864:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	dd08      	ble.n	800b880 <PI_Controller+0xe8>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800b86e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	617b      	str	r3, [r7, #20]
    wOutput_32 = hUpperOutputLimit;
 800b878:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b87c:	61fb      	str	r3, [r7, #28]
 800b87e:	e00c      	b.n	800b89a <PI_Controller+0x102>
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 800b880:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	429a      	cmp	r2, r3
 800b888:	da07      	bge.n	800b89a <PI_Controller+0x102>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 800b88a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	617b      	str	r3, [r7, #20]
    wOutput_32 = hLowerOutputLimit;
 800b894:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b898:	61fb      	str	r3, [r7, #28]
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	689a      	ldr	r2, [r3, #8]
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	441a      	add	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	609a      	str	r2, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	b21b      	sxth	r3, r3
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3724      	adds	r7, #36	; 0x24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	80000001 	.word	0x80000001

0800b8bc <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 800b8bc:	b590      	push	{r4, r7, lr}
 800b8be:	b089      	sub	sp, #36	; 0x24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b8ca:	f107 0310 	add.w	r3, r7, #16
 800b8ce:	320c      	adds	r2, #12
 800b8d0:	6810      	ldr	r0, [r2, #0]
 800b8d2:	6018      	str	r0, [r3, #0]
  qd_t Vqd = pHandle->pFOCVars->Vqd;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b8da:	f107 030c 	add.w	r3, r7, #12
 800b8de:	3216      	adds	r2, #22
 800b8e0:	6810      	ldr	r0, [r2, #0]
 800b8e2:	6018      	str	r0, [r3, #0]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800b8e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b8e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b8ec:	fb02 f203 	mul.w	r2, r2, r3
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800b8f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8f4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800b8f8:	fb01 f303 	mul.w	r3, r1, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800b8fc:	4413      	add	r3, r2
 800b8fe:	61fb      	str	r3, [r7, #28]
  wAux /= 65536;
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	2b00      	cmp	r3, #0
 800b904:	da02      	bge.n	800b90c <PQD_CalcElMotorPower+0x50>
 800b906:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b90a:	33ff      	adds	r3, #255	; 0xff
 800b90c:	141b      	asrs	r3, r3, #16
 800b90e:	61fb      	str	r3, [r7, #28]

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff fc67 	bl	800b1f0 <VBS_GetAvBusVoltage_V>
 800b922:	4603      	mov	r3, r0
 800b924:	fb03 f304 	mul.w	r3, r3, r4
 800b928:	61bb      	str	r3, [r7, #24]
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	4a16      	ldr	r2, [pc, #88]	; (800b988 <PQD_CalcElMotorPower+0xcc>)
 800b92e:	fb82 1203 	smull	r1, r2, r2, r3
 800b932:	1192      	asrs	r2, r2, #6
 800b934:	17db      	asrs	r3, r3, #31
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	61bb      	str	r3, [r7, #24]

  wAux3 = wAux * wAux2;
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	fb02 f303 	mul.w	r3, r2, r3
 800b942:	617b      	str	r3, [r7, #20]
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800b944:	697a      	ldr	r2, [r7, #20]
 800b946:	4613      	mov	r3, r2
 800b948:	005b      	lsls	r3, r3, #1
 800b94a:	4413      	add	r3, r2
 800b94c:	005b      	lsls	r3, r3, #1
 800b94e:	617b      	str	r3, [r7, #20]
  wAux3 /= 10;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	4a0e      	ldr	r2, [pc, #56]	; (800b98c <PQD_CalcElMotorPower+0xd0>)
 800b954:	fb82 1203 	smull	r1, r2, r2, r3
 800b958:	1092      	asrs	r2, r2, #2
 800b95a:	17db      	asrs	r3, r3, #31
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	617b      	str	r3, [r7, #20]
  wAux3 /= 65536;
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	2b00      	cmp	r3, #0
 800b964:	da02      	bge.n	800b96c <PQD_CalcElMotorPower+0xb0>
 800b966:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b96a:	33ff      	adds	r3, #255	; 0xff
 800b96c:	141b      	asrs	r3, r3, #16
 800b96e:	617b      	str	r3, [r7, #20]

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	b212      	sxth	r2, r2
 800b976:	4611      	mov	r1, r2
 800b978:	4618      	mov	r0, r3
 800b97a:	f7ff fd5c 	bl	800b436 <MPM_CalcElMotorPower>

}
 800b97e:	bf00      	nop
 800b980:	3724      	adds	r7, #36	; 0x24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd90      	pop	{r4, r7, pc}
 800b986:	bf00      	nop
 800b988:	1b4e81b5 	.word	0x1b4e81b5
 800b98c:	66666667 	.word	0x66666667

0800b990 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800b998:	4b08      	ldr	r3, [pc, #32]	; (800b9bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800b99a:	69da      	ldr	r2, [r3, #28]
 800b99c:	4907      	ldr	r1, [pc, #28]	; (800b9bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <LL_APB1_GRP1_EnableClock+0x2c>)
 800b9a6:	69da      	ldr	r2, [r3, #28]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	3714      	adds	r7, #20
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	40021000 	.word	0x40021000

0800b9c0 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800b9c8:	4b07      	ldr	r3, [pc, #28]	; (800b9e8 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800b9ca:	69da      	ldr	r2, [r3, #28]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	bf0c      	ite	eq
 800b9d6:	2301      	moveq	r3, #1
 800b9d8:	2300      	movne	r3, #0
 800b9da:	b2db      	uxtb	r3, r3
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	40021000 	.word	0x40021000

0800b9ec <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800b9f4:	4b06      	ldr	r3, [pc, #24]	; (800ba10 <LL_APB1_GRP1_DisableClock+0x24>)
 800b9f6:	69da      	ldr	r2, [r3, #28]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	43db      	mvns	r3, r3
 800b9fc:	4904      	ldr	r1, [pc, #16]	; (800ba10 <LL_APB1_GRP1_DisableClock+0x24>)
 800b9fe:	4013      	ands	r3, r2
 800ba00:	61cb      	str	r3, [r1, #28]
}
 800ba02:	bf00      	nop
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	40021000 	.word	0x40021000

0800ba14 <LL_TIM_GetCounterMode>:
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <LL_TIM_SetTriggerOutput>:
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	431a      	orrs	r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	605a      	str	r2, [r3, #4]
}
 800ba4a:	bf00      	nop
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <LL_TIM_ClearFlag_CC1>:
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f06f 0202 	mvn.w	r2, #2
 800ba64:	611a      	str	r2, [r3, #16]
}
 800ba66:	bf00      	nop
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <LL_TIM_IsActiveFlag_CC1>:
{
 800ba72:	b480      	push	{r7}
 800ba74:	b083      	sub	sp, #12
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	f003 0302 	and.w	r3, r3, #2
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d101      	bne.n	800ba8a <LL_TIM_IsActiveFlag_CC1+0x18>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e000      	b.n	800ba8c <LL_TIM_IsActiveFlag_CC1+0x1a>
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	695b      	ldr	r3, [r3, #20]
 800baa4:	f043 0201 	orr.w	r2, r3, #1
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	615a      	str	r2, [r3, #20]
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800babe:	2001      	movs	r0, #1
 800bac0:	f7ff ff7e 	bl	800b9c0 <LL_APB1_GRP1_IsEnabledClock>
 800bac4:	6078      	str	r0, [r7, #4]
  if ( isTIM2ClockOn == 0 )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800bacc:	2001      	movs	r0, #1
 800bace:	f7ff ff5f 	bl	800b990 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800bad2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bad6:	f7ff ffdf 	bl	800ba98 <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800bada:	2001      	movs	r0, #1
 800badc:	f7ff ff86 	bl	800b9ec <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800bae0:	e013      	b.n	800bb0a <startTimers+0x52>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800bae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800baec:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
 800baee:	2120      	movs	r1, #32
 800baf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800baf4:	f7ff ff9c 	bl	800ba30 <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800baf8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bafc:	f7ff ffcc 	bl	800ba98 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bb06:	f7ff ff93 	bl	800ba30 <LL_TIM_SetTriggerOutput>
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	71fb      	strb	r3, [r7, #7]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f7ff ff76 	bl	800ba14 <LL_TIM_GetCounterMode>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb2e:	2b60      	cmp	r3, #96	; 0x60
 800bb30:	d105      	bne.n	800bb3e <waitForPolarizationEnd+0x2c>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800bb32:	79fb      	ldrb	r3, [r7, #7]
 800bb34:	3301      	adds	r3, #1
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	015b      	lsls	r3, r3, #5
 800bb3a:	82bb      	strh	r3, [r7, #20]
 800bb3c:	e005      	b.n	800bb4a <waitForPolarizationEnd+0x38>
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	3301      	adds	r3, #1
 800bb42:	085b      	lsrs	r3, r3, #1
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	015b      	lsls	r3, r3, #5
 800bb48:	82bb      	strh	r3, [r7, #20]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7ff ff83 	bl	800ba56 <LL_TIM_ClearFlag_CC1>
  hCalibrationPeriodCounter = 0u;
 800bb50:	2300      	movs	r3, #0
 800bb52:	82fb      	strh	r3, [r7, #22]
  while (*cnt < NB_CONVERSIONS)
 800bb54:	e017      	b.n	800bb86 <waitForPolarizationEnd+0x74>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f7ff ff8b 	bl	800ba72 <LL_TIM_IsActiveFlag_CC1>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d011      	beq.n	800bb86 <waitForPolarizationEnd+0x74>
    {
      LL_TIM_ClearFlag_CC1(TIMx);
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7ff ff77 	bl	800ba56 <LL_TIM_ClearFlag_CC1>
      hCalibrationPeriodCounter++;
 800bb68:	8afb      	ldrh	r3, [r7, #22]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	82fb      	strh	r3, [r7, #22]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800bb6e:	8afa      	ldrh	r2, [r7, #22]
 800bb70:	8abb      	ldrh	r3, [r7, #20]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d307      	bcc.n	800bb86 <waitForPolarizationEnd+0x74>
      {
        if (*cnt < NB_CONVERSIONS)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b0f      	cmp	r3, #15
 800bb7c:	d803      	bhi.n	800bb86 <waitForPolarizationEnd+0x74>
        {
          *SWerror = 1u;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	2201      	movs	r2, #1
 800bb82:	801a      	strh	r2, [r3, #0]
          break;
 800bb84:	e004      	b.n	800bb90 <waitForPolarizationEnd+0x7e>
  while (*cnt < NB_CONVERSIONS)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	2b0f      	cmp	r3, #15
 800bb8c:	d9e3      	bls.n	800bb56 <waitForPolarizationEnd+0x44>
        }
      }
    }
  }
}
 800bb8e:	bf00      	nop
 800bb90:	bf00      	nop
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b08a      	sub	sp, #40	; 0x28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800bbbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bbc8:	fb03 f302 	mul.w	r3, r3, r2
 800bbcc:	61bb      	str	r3, [r7, #24]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800bbce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbda:	fb03 f202 	mul.w	r2, r3, r2
 800bbde:	4613      	mov	r3, r2
 800bbe0:	07db      	lsls	r3, r3, #31
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	617b      	str	r3, [r7, #20]

  wX = wUBeta;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	613b      	str	r3, [r7, #16]
  wY = ( wUBeta + wUAlpha ) / 2;
 800bbec:	697a      	ldr	r2, [r7, #20]
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	0fda      	lsrs	r2, r3, #31
 800bbf4:	4413      	add	r3, r2
 800bbf6:	105b      	asrs	r3, r3, #1
 800bbf8:	60fb      	str	r3, [r7, #12]
  wZ = ( wUBeta - wUAlpha ) / 2;
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	0fda      	lsrs	r2, r3, #31
 800bc02:	4413      	add	r3, r2
 800bc04:	105b      	asrs	r3, r3, #1
 800bc06:	60bb      	str	r3, [r7, #8]

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f280 80bd 	bge.w	800bd8a <PWMC_SetPhaseVoltage+0x1d6>
  {
    if ( wZ < 0 )
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	da3c      	bge.n	800bc90 <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_5;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2204      	movs	r2, #4
 800bc1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc24:	089b      	lsrs	r3, r3, #2
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	4619      	mov	r1, r3
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	da03      	bge.n	800bc3c <PWMC_SetPhaseVoltage+0x88>
 800bc34:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800bc38:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bc3c:	149b      	asrs	r3, r3, #18
 800bc3e:	440b      	add	r3, r1
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da03      	bge.n	800bc50 <PWMC_SetPhaseVoltage+0x9c>
 800bc48:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bc4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bc50:	145b      	asrs	r3, r3, #17
 800bc52:	461a      	mov	r2, r3
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	4413      	add	r3, r2
 800bc58:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da03      	bge.n	800bc68 <PWMC_SetPhaseVoltage+0xb4>
 800bc60:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bc64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bc68:	145b      	asrs	r3, r3, #17
 800bc6a:	425b      	negs	r3, r3
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc70:	4413      	add	r3, r2
 800bc72:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhC;
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	b29a      	uxth	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800bc8e:	e138      	b.n	800bf02 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ >= 0 */
      if ( wX <= 0 )
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc3c      	bgt.n	800bd10 <PWMC_SetPhaseVoltage+0x15c>
      {
        pHandle->Sector = SECTOR_4;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2203      	movs	r2, #3
 800bc9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bca4:	089b      	lsrs	r3, r3, #2
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	4619      	mov	r1, r3
 800bcaa:	693a      	ldr	r2, [r7, #16]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da03      	bge.n	800bcbc <PWMC_SetPhaseVoltage+0x108>
 800bcb4:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800bcb8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bcbc:	149b      	asrs	r3, r3, #18
 800bcbe:	440b      	add	r3, r1
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	da03      	bge.n	800bcd0 <PWMC_SetPhaseVoltage+0x11c>
 800bcc8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bccc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bcd0:	145b      	asrs	r3, r3, #17
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	4413      	add	r3, r2
 800bcd8:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	da03      	bge.n	800bce8 <PWMC_SetPhaseVoltage+0x134>
 800bce0:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bce4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bce8:	145b      	asrs	r3, r3, #17
 800bcea:	425b      	negs	r3, r3
 800bcec:	461a      	mov	r2, r3
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhC;
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800bd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800bd0e:	e0f8      	b.n	800bf02 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_3;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2202      	movs	r2, #2
 800bd14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd1e:	089b      	lsrs	r3, r3, #2
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	4619      	mov	r1, r3
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	da03      	bge.n	800bd36 <PWMC_SetPhaseVoltage+0x182>
 800bd2e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800bd32:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bd36:	149b      	asrs	r3, r3, #18
 800bd38:	440b      	add	r3, r1
 800bd3a:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	da03      	bge.n	800bd4a <PWMC_SetPhaseVoltage+0x196>
 800bd42:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bd46:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd4a:	145b      	asrs	r3, r3, #17
 800bd4c:	425b      	negs	r3, r3
 800bd4e:	461a      	mov	r2, r3
 800bd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd52:	4413      	add	r3, r2
 800bd54:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	da03      	bge.n	800bd64 <PWMC_SetPhaseVoltage+0x1b0>
 800bd5c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bd60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd64:	145b      	asrs	r3, r3, #17
 800bd66:	461a      	mov	r2, r3
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhB;
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	b29a      	uxth	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800bd88:	e0bb      	b.n	800bf02 <PWMC_SetPhaseVoltage+0x34e>
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	db3c      	blt.n	800be0a <PWMC_SetPhaseVoltage+0x256>
    {
      pHandle->Sector = SECTOR_2;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd9e:	089b      	lsrs	r3, r3, #2
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	4619      	mov	r1, r3
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da03      	bge.n	800bdb6 <PWMC_SetPhaseVoltage+0x202>
 800bdae:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800bdb2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bdb6:	149b      	asrs	r3, r3, #18
 800bdb8:	440b      	add	r3, r1
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	da03      	bge.n	800bdca <PWMC_SetPhaseVoltage+0x216>
 800bdc2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bdc6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bdca:	145b      	asrs	r3, r3, #17
 800bdcc:	461a      	mov	r2, r3
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	4413      	add	r3, r2
 800bdd2:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	da03      	bge.n	800bde2 <PWMC_SetPhaseVoltage+0x22e>
 800bdda:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bdde:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bde2:	145b      	asrs	r3, r3, #17
 800bde4:	425b      	negs	r3, r3
 800bde6:	461a      	mov	r2, r3
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	4413      	add	r3, r2
 800bdec:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhB;
 800bdee:	6a3b      	ldr	r3, [r7, #32]
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	b29a      	uxth	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800be08:	e07b      	b.n	800bf02 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ < 0 */
      if ( wX <= 0 )
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dc3c      	bgt.n	800be8a <PWMC_SetPhaseVoltage+0x2d6>
      {
        pHandle->Sector = SECTOR_6;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2205      	movs	r2, #5
 800be14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be1e:	089b      	lsrs	r3, r3, #2
 800be20:	b29b      	uxth	r3, r3
 800be22:	4619      	mov	r1, r3
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	da03      	bge.n	800be36 <PWMC_SetPhaseVoltage+0x282>
 800be2e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800be32:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800be36:	149b      	asrs	r3, r3, #18
 800be38:	440b      	add	r3, r1
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da03      	bge.n	800be4a <PWMC_SetPhaseVoltage+0x296>
 800be42:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800be46:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be4a:	145b      	asrs	r3, r3, #17
 800be4c:	425b      	negs	r3, r3
 800be4e:	461a      	mov	r2, r3
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	4413      	add	r3, r2
 800be54:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	da03      	bge.n	800be64 <PWMC_SetPhaseVoltage+0x2b0>
 800be5c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800be60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be64:	145b      	asrs	r3, r3, #17
 800be66:	461a      	mov	r2, r3
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	4413      	add	r3, r2
 800be6c:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhA;
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	b29a      	uxth	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	b29a      	uxth	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	b29a      	uxth	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800be88:	e03b      	b.n	800bf02 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_1;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be98:	089b      	lsrs	r3, r3, #2
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	4619      	mov	r1, r3
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	da03      	bge.n	800beb0 <PWMC_SetPhaseVoltage+0x2fc>
 800bea8:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800beac:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800beb0:	149b      	asrs	r3, r3, #18
 800beb2:	440b      	add	r3, r1
 800beb4:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	da03      	bge.n	800bec4 <PWMC_SetPhaseVoltage+0x310>
 800bebc:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bec0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bec4:	145b      	asrs	r3, r3, #17
 800bec6:	461a      	mov	r2, r3
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	4413      	add	r3, r2
 800becc:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	da03      	bge.n	800bedc <PWMC_SetPhaseVoltage+0x328>
 800bed4:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bed8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bedc:	145b      	asrs	r3, r3, #17
 800bede:	425b      	negs	r3, r3
 800bee0:	461a      	mov	r2, r3
 800bee2:	6a3b      	ldr	r3, [r7, #32]
 800bee4:	4413      	add	r3, r2
 800bee6:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhA;
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	b29a      	uxth	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	b29a      	uxth	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }
  }

  pHandle->CntPhA = ( uint16_t )wTimePhA;
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	865a      	strh	r2, [r3, #50]	; 0x32
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	869a      	strh	r2, [r3, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	86da      	strh	r2, [r3, #54]	; 0x36

  if ( pHandle->DTTest == 1u )
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d147      	bne.n	800bfb4 <PWMC_SetPhaseVoltage+0x400>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	dd09      	ble.n	800bf42 <PWMC_SetPhaseVoltage+0x38e>
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf38:	4413      	add	r3, r2
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	865a      	strh	r2, [r3, #50]	; 0x32
 800bf40:	e008      	b.n	800bf54 <PWMC_SetPhaseVoltage+0x3a0>
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dd09      	ble.n	800bf72 <PWMC_SetPhaseVoltage+0x3be>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf68:	4413      	add	r3, r2
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	869a      	strh	r2, [r3, #52]	; 0x34
 800bf70:	e008      	b.n	800bf84 <PWMC_SetPhaseVoltage+0x3d0>
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	869a      	strh	r2, [r3, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	dd09      	ble.n	800bfa2 <PWMC_SetPhaseVoltage+0x3ee>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf98:	4413      	add	r3, r2
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	86da      	strh	r2, [r3, #54]	; 0x36
 800bfa0:	e008      	b.n	800bfb4 <PWMC_SetPhaseVoltage+0x400>
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	699b      	ldr	r3, [r3, #24]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	4798      	blx	r3
 800bfbc:	4603      	mov	r3, r0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3728      	adds	r7, #40	; 0x28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b082      	sub	sp, #8
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
  pHandle->pFctSwitchOffPwm( pHandle );
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
}
 800bfd6:	bf00      	nop
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]
  if ( action == CRC_START )
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d114      	bne.n	800c01e <PWMC_CurrentReadingCalibr+0x40>
  {
    PWMC_SwitchOffPWM( pHandle );
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f7ff ffe6 	bl	800bfc6 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d124      	bne.n	800c05a <PWMC_CurrentReadingCalibr+0x7c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	4798      	blx	r3
      retVal = true;
 800c018:	2301      	movs	r3, #1
 800c01a:	73fb      	strb	r3, [r7, #15]
 800c01c:	e01d      	b.n	800c05a <PWMC_CurrentReadingCalibr+0x7c>
    }
  }
  else if ( action == CRC_EXEC )
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d11a      	bne.n	800c05a <PWMC_CurrentReadingCalibr+0x7c>
  {
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d013      	beq.n	800c056 <PWMC_CurrentReadingCalibr+0x78>
    {
      pHandle->OffCalibrWaitTimeCounter--;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c034:	3b01      	subs	r3, #1
 800c036:	b29a      	uxth	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c044:	2b00      	cmp	r3, #0
 800c046:	d108      	bne.n	800c05a <PWMC_CurrentReadingCalibr+0x7c>
      {
        pHandle->pFctCurrReadingCalib( pHandle );
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
        retVal = true;
 800c050:	2301      	movs	r3, #1
 800c052:	73fb      	strb	r3, [r7, #15]
 800c054:	e001      	b.n	800c05a <PWMC_CurrentReadingCalibr+0x7c>
      }
    }
    else
    {
      retVal = true;
 800c056:	2301      	movs	r3, #1
 800c058:	73fb      	strb	r3, [r7, #15]
    }
  }
  else
  {
  }
  return retVal;
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	69db      	ldr	r3, [r3, #28]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	4798      	blx	r3
 800c074:	4603      	mov	r3, r0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
	...

0800c080 <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800c088:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800c08a:	68da      	ldr	r2, [r3, #12]
 800c08c:	4904      	ldr	r1, [pc, #16]	; (800c0a0 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4313      	orrs	r3, r2
 800c092:	60cb      	str	r3, [r1, #12]
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	e0042000 	.word	0xe0042000

0800c0a4 <LL_ADC_INJ_SetSequencerDiscont>:
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	431a      	orrs	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	60da      	str	r2, [r3, #12]
}
 800c0be:	bf00      	nop
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <LL_ADC_INJ_SetQueueMode>:
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	60da      	str	r2, [r3, #12]
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <LL_ADC_EnableInternalRegulator>:
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800c10c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c110:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	609a      	str	r2, [r3, #8]
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <LL_ADC_IsInternalRegulatorEnabled>:
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c138:	bf0c      	ite	eq
 800c13a:	2301      	moveq	r3, #1
 800c13c:	2300      	movne	r3, #0
 800c13e:	b2db      	uxtb	r3, r3
}
 800c140:	4618      	mov	r0, r3
 800c142:	370c      	adds	r7, #12
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <LL_ADC_Enable>:
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c15c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c160:	f043 0201 	orr.w	r2, r3, #1
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	609a      	str	r2, [r3, #8]
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <LL_ADC_IsEnabled>:
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b01      	cmp	r3, #1
 800c186:	bf0c      	ite	eq
 800c188:	2301      	moveq	r3, #1
 800c18a:	2300      	movne	r3, #0
 800c18c:	b2db      	uxtb	r3, r3
}
 800c18e:	4618      	mov	r0, r3
 800c190:	370c      	adds	r7, #12
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr

0800c19a <LL_ADC_StartCalibration>:
{
 800c19a:	b480      	push	{r7}
 800c19c:	b083      	sub	sp, #12
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c1ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	609a      	str	r2, [r3, #8]
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <LL_ADC_IsCalibrationOnGoing>:
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	689b      	ldr	r3, [r3, #8]
 800c1d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1e0:	bf0c      	ite	eq
 800c1e2:	2301      	moveq	r3, #1
 800c1e4:	2300      	movne	r3, #0
 800c1e6:	b2db      	uxtb	r3, r3
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <LL_ADC_INJ_StartConversion>:
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c208:	f043 0208 	orr.w	r2, r3, #8
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	609a      	str	r2, [r3, #8]
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <LL_ADC_INJ_StopConversion>:
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c22c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c230:	f043 0220 	orr.w	r2, r3, #32
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	609a      	str	r2, [r3, #8]
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <LL_ADC_IsActiveFlag_ADRDY>:
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0301 	and.w	r3, r3, #1
 800c254:	2b01      	cmp	r3, #1
 800c256:	bf0c      	ite	eq
 800c258:	2301      	moveq	r3, #1
 800c25a:	2300      	movne	r3, #0
 800c25c:	b2db      	uxtb	r3, r3
}
 800c25e:	4618      	mov	r0, r3
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <LL_ADC_ClearFlag_EOC>:
{
 800c26a:	b480      	push	{r7}
 800c26c:	b083      	sub	sp, #12
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2204      	movs	r2, #4
 800c276:	601a      	str	r2, [r3, #0]
}
 800c278:	bf00      	nop
 800c27a:	370c      	adds	r7, #12
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <LL_ADC_ClearFlag_JEOC>:
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2220      	movs	r2, #32
 800c290:	601a      	str	r2, [r3, #0]
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <LL_ADC_ClearFlag_JEOS>:
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2240      	movs	r2, #64	; 0x40
 800c2aa:	601a      	str	r2, [r3, #0]
}
 800c2ac:	bf00      	nop
 800c2ae:	370c      	adds	r7, #12
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b6:	4770      	bx	lr

0800c2b8 <LL_ADC_EnableIT_JEOS>:
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	605a      	str	r2, [r3, #4]
}
 800c2cc:	bf00      	nop
 800c2ce:	370c      	adds	r7, #12
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr

0800c2d8 <LL_ADC_DisableIT_EOC>:
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	f023 0204 	bic.w	r2, r3, #4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	605a      	str	r2, [r3, #4]
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <LL_ADC_DisableIT_JEOC>:
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f023 0220 	bic.w	r2, r3, #32
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	605a      	str	r2, [r3, #4]
}
 800c30c:	bf00      	nop
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <LL_TIM_DisableCounter>:
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f023 0201 	bic.w	r2, r3, #1
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	601a      	str	r2, [r3, #0]
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <LL_TIM_SetCounter>:
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	683a      	ldr	r2, [r7, #0]
 800c346:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <LL_TIM_SetRepetitionCounter>:
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	683a      	ldr	r2, [r7, #0]
 800c362:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <LL_TIM_CC_EnableChannel>:
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a1a      	ldr	r2, [r3, #32]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	431a      	orrs	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	621a      	str	r2, [r3, #32]
}
 800c386:	bf00      	nop
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <LL_TIM_CC_DisableChannel>:
{
 800c392:	b480      	push	{r7}
 800c394:	b083      	sub	sp, #12
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6a1a      	ldr	r2, [r3, #32]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	43db      	mvns	r3, r3
 800c3a4:	401a      	ands	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	621a      	str	r2, [r3, #32]
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <LL_TIM_OC_SetMode>:
{
 800c3b8:	b4b0      	push	{r4, r5, r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	d028      	beq.n	800c41c <LL_TIM_OC_SetMode+0x64>
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d023      	beq.n	800c418 <LL_TIM_OC_SetMode+0x60>
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	2b10      	cmp	r3, #16
 800c3d4:	d01e      	beq.n	800c414 <LL_TIM_OC_SetMode+0x5c>
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2b40      	cmp	r3, #64	; 0x40
 800c3da:	d019      	beq.n	800c410 <LL_TIM_OC_SetMode+0x58>
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e2:	d013      	beq.n	800c40c <LL_TIM_OC_SetMode+0x54>
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3ea:	d00d      	beq.n	800c408 <LL_TIM_OC_SetMode+0x50>
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3f2:	d007      	beq.n	800c404 <LL_TIM_OC_SetMode+0x4c>
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3fa:	d101      	bne.n	800c400 <LL_TIM_OC_SetMode+0x48>
 800c3fc:	2307      	movs	r3, #7
 800c3fe:	e00e      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c400:	2308      	movs	r3, #8
 800c402:	e00c      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c404:	2306      	movs	r3, #6
 800c406:	e00a      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c408:	2305      	movs	r3, #5
 800c40a:	e008      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c40c:	2304      	movs	r3, #4
 800c40e:	e006      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c410:	2303      	movs	r3, #3
 800c412:	e004      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c414:	2302      	movs	r3, #2
 800c416:	e002      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c418:	2301      	movs	r3, #1
 800c41a:	e000      	b.n	800c41e <LL_TIM_OC_SetMode+0x66>
 800c41c:	2300      	movs	r3, #0
 800c41e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	3318      	adds	r3, #24
 800c424:	461a      	mov	r2, r3
 800c426:	4629      	mov	r1, r5
 800c428:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <LL_TIM_OC_SetMode+0xa4>)
 800c42a:	5c5b      	ldrb	r3, [r3, r1]
 800c42c:	4413      	add	r3, r2
 800c42e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800c430:	6822      	ldr	r2, [r4, #0]
 800c432:	4629      	mov	r1, r5
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <LL_TIM_OC_SetMode+0xa8>)
 800c436:	5c5b      	ldrb	r3, [r3, r1]
 800c438:	4619      	mov	r1, r3
 800c43a:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <LL_TIM_OC_SetMode+0xac>)
 800c43c:	408b      	lsls	r3, r1
 800c43e:	43db      	mvns	r3, r3
 800c440:	401a      	ands	r2, r3
 800c442:	4629      	mov	r1, r5
 800c444:	4b06      	ldr	r3, [pc, #24]	; (800c460 <LL_TIM_OC_SetMode+0xa8>)
 800c446:	5c5b      	ldrb	r3, [r3, r1]
 800c448:	4619      	mov	r1, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	408b      	lsls	r3, r1
 800c44e:	4313      	orrs	r3, r2
 800c450:	6023      	str	r3, [r4, #0]
}
 800c452:	bf00      	nop
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	bcb0      	pop	{r4, r5, r7}
 800c45a:	4770      	bx	lr
 800c45c:	0800fd4c 	.word	0x0800fd4c
 800c460:	0800fd58 	.word	0x0800fd58
 800c464:	00010073 	.word	0x00010073

0800c468 <LL_TIM_OC_EnablePreload>:
{
 800c468:	b4b0      	push	{r4, r5, r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d028      	beq.n	800c4ca <LL_TIM_OC_EnablePreload+0x62>
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	2b04      	cmp	r3, #4
 800c47c:	d023      	beq.n	800c4c6 <LL_TIM_OC_EnablePreload+0x5e>
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2b10      	cmp	r3, #16
 800c482:	d01e      	beq.n	800c4c2 <LL_TIM_OC_EnablePreload+0x5a>
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2b40      	cmp	r3, #64	; 0x40
 800c488:	d019      	beq.n	800c4be <LL_TIM_OC_EnablePreload+0x56>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c490:	d013      	beq.n	800c4ba <LL_TIM_OC_EnablePreload+0x52>
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c498:	d00d      	beq.n	800c4b6 <LL_TIM_OC_EnablePreload+0x4e>
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4a0:	d007      	beq.n	800c4b2 <LL_TIM_OC_EnablePreload+0x4a>
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4a8:	d101      	bne.n	800c4ae <LL_TIM_OC_EnablePreload+0x46>
 800c4aa:	2307      	movs	r3, #7
 800c4ac:	e00e      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4ae:	2308      	movs	r3, #8
 800c4b0:	e00c      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4b2:	2306      	movs	r3, #6
 800c4b4:	e00a      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4b6:	2305      	movs	r3, #5
 800c4b8:	e008      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4ba:	2304      	movs	r3, #4
 800c4bc:	e006      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e004      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e002      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <LL_TIM_OC_EnablePreload+0x64>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	3318      	adds	r3, #24
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	4b09      	ldr	r3, [pc, #36]	; (800c4fc <LL_TIM_OC_EnablePreload+0x94>)
 800c4d8:	5c5b      	ldrb	r3, [r3, r1]
 800c4da:	4413      	add	r3, r2
 800c4dc:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c4de:	6822      	ldr	r2, [r4, #0]
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <LL_TIM_OC_EnablePreload+0x98>)
 800c4e4:	5c5b      	ldrb	r3, [r3, r1]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	408b      	lsls	r3, r1
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	6023      	str	r3, [r4, #0]
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bcb0      	pop	{r4, r5, r7}
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	0800fd4c 	.word	0x0800fd4c
 800c500:	0800fd58 	.word	0x0800fd58

0800c504 <LL_TIM_OC_DisablePreload>:
{
 800c504:	b4b0      	push	{r4, r5, r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d028      	beq.n	800c566 <LL_TIM_OC_DisablePreload+0x62>
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2b04      	cmp	r3, #4
 800c518:	d023      	beq.n	800c562 <LL_TIM_OC_DisablePreload+0x5e>
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	2b10      	cmp	r3, #16
 800c51e:	d01e      	beq.n	800c55e <LL_TIM_OC_DisablePreload+0x5a>
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b40      	cmp	r3, #64	; 0x40
 800c524:	d019      	beq.n	800c55a <LL_TIM_OC_DisablePreload+0x56>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c52c:	d013      	beq.n	800c556 <LL_TIM_OC_DisablePreload+0x52>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c534:	d00d      	beq.n	800c552 <LL_TIM_OC_DisablePreload+0x4e>
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c53c:	d007      	beq.n	800c54e <LL_TIM_OC_DisablePreload+0x4a>
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c544:	d101      	bne.n	800c54a <LL_TIM_OC_DisablePreload+0x46>
 800c546:	2307      	movs	r3, #7
 800c548:	e00e      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c54a:	2308      	movs	r3, #8
 800c54c:	e00c      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c54e:	2306      	movs	r3, #6
 800c550:	e00a      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c552:	2305      	movs	r3, #5
 800c554:	e008      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c556:	2304      	movs	r3, #4
 800c558:	e006      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c55a:	2303      	movs	r3, #3
 800c55c:	e004      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c55e:	2302      	movs	r3, #2
 800c560:	e002      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c562:	2301      	movs	r3, #1
 800c564:	e000      	b.n	800c568 <LL_TIM_OC_DisablePreload+0x64>
 800c566:	2300      	movs	r3, #0
 800c568:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	3318      	adds	r3, #24
 800c56e:	461a      	mov	r2, r3
 800c570:	4629      	mov	r1, r5
 800c572:	4b09      	ldr	r3, [pc, #36]	; (800c598 <LL_TIM_OC_DisablePreload+0x94>)
 800c574:	5c5b      	ldrb	r3, [r3, r1]
 800c576:	4413      	add	r3, r2
 800c578:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c57a:	6822      	ldr	r2, [r4, #0]
 800c57c:	4629      	mov	r1, r5
 800c57e:	4b07      	ldr	r3, [pc, #28]	; (800c59c <LL_TIM_OC_DisablePreload+0x98>)
 800c580:	5c5b      	ldrb	r3, [r3, r1]
 800c582:	4619      	mov	r1, r3
 800c584:	2308      	movs	r3, #8
 800c586:	408b      	lsls	r3, r1
 800c588:	43db      	mvns	r3, r3
 800c58a:	4013      	ands	r3, r2
 800c58c:	6023      	str	r3, [r4, #0]
}
 800c58e:	bf00      	nop
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	bcb0      	pop	{r4, r5, r7}
 800c596:	4770      	bx	lr
 800c598:	0800fd4c 	.word	0x0800fd4c
 800c59c:	0800fd58 	.word	0x0800fd58

0800c5a0 <LL_TIM_OC_SetCompareCH1>:
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <LL_TIM_OC_SetCompareCH2>:
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	683a      	ldr	r2, [r7, #0]
 800c5ca:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <LL_TIM_OC_SetCompareCH3>:
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <LL_TIM_OC_SetCompareCH4>:
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	683a      	ldr	r2, [r7, #0]
 800c602:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <LL_TIM_SetTriggerOutput>:
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	431a      	orrs	r2, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	605a      	str	r2, [r3, #4]
}
 800c62a:	bf00      	nop
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <LL_TIM_EnableAllOutputs>:
{
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c642:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	645a      	str	r2, [r3, #68]	; 0x44
}
 800c64a:	bf00      	nop
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr

0800c656 <LL_TIM_DisableAllOutputs>:
{
 800c656:	b480      	push	{r7}
 800c658:	b083      	sub	sp, #12
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c662:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	645a      	str	r2, [r3, #68]	; 0x44
}
 800c66a:	bf00      	nop
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <LL_TIM_ClearFlag_UPDATE>:
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f06f 0201 	mvn.w	r2, #1
 800c684:	611a      	str	r2, [r3, #16]
}
 800c686:	bf00      	nop
 800c688:	370c      	adds	r7, #12
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800c692:	b480      	push	{r7}
 800c694:	b083      	sub	sp, #12
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d101      	bne.n	800c6aa <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <LL_TIM_ClearFlag_BRK>:
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c6c6:	611a      	str	r2, [r3, #16]
}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <LL_TIM_ClearFlag_BRK2>:
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c6e2:	611a      	str	r2, [r3, #16]
}
 800c6e4:	bf00      	nop
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <LL_TIM_IsActiveFlag_BRK2>:
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	691b      	ldr	r3, [r3, #16]
 800c6fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c704:	d101      	bne.n	800c70a <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800c706:	2301      	movs	r3, #1
 800c708:	e000      	b.n	800c70c <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <LL_TIM_EnableIT_UPDATE>:
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	f043 0201 	orr.w	r2, r3, #1
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	60da      	str	r2, [r3, #12]
}
 800c72c:	bf00      	nop
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <LL_TIM_DisableIT_UPDATE>:
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	f023 0201 	bic.w	r2, r3, #1
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	60da      	str	r2, [r3, #12]
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <LL_TIM_EnableIT_BRK>:
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	60da      	str	r2, [r3, #12]
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <LL_TIM_GenerateEvent_UPDATE>:
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	695b      	ldr	r3, [r3, #20]
 800c784:	f043 0201 	orr.w	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	615a      	str	r2, [r3, #20]
}
 800c78c:	bf00      	nop
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	619a      	str	r2, [r3, #24]
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	f003 0310 	and.w	r3, r3, #16
 800c7e4:	2101      	movs	r1, #1
 800c7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c7ea:	431a      	orrs	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	f003 0310 	and.w	r3, r3, #16
 800c810:	2101      	movs	r1, #1
 800c812:	fa01 f303 	lsl.w	r3, r1, r3
 800c816:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	f003 0310 	and.w	r3, r3, #16
 800c81e:	2101      	movs	r1, #1
 800c820:	fa01 f303 	lsl.w	r3, r1, r3
 800c824:	429a      	cmp	r2, r3
 800c826:	bf0c      	ite	eq
 800c828:	2301      	moveq	r3, #1
 800c82a:	2300      	movne	r3, #0
 800c82c:	b2db      	uxtb	r3, r3
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <LL_DAC_TrigSWConversion>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_TrigSWConversion(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c83a:	b480      	push	{r7}
 800c83c:	b083      	sub	sp, #12
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	f003 0303 	and.w	r3, r3, #3
 800c84e:	431a      	orrs	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	605a      	str	r2, [r3, #4]
          (DAC_Channel & DAC_SWTR_CHX_MASK));
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <LL_DAC_ConvertData12LeftAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 800c860:	b490      	push	{r4, r7}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3308      	adds	r3, #8
 800c870:	4619      	mov	r1, r3
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800c878:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800c87c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	fa92 f2a2 	rbit	r2, r2
 800c884:	613a      	str	r2, [r7, #16]
  return result;
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	fab2 f282 	clz	r2, r2
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	40d3      	lsrs	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	440b      	add	r3, r1
 800c894:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c89c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	6023      	str	r3, [r4, #0]
             DAC_DHR12L1_DACC1DHR,
             Data);
}
 800c8a6:	bf00      	nop
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bc90      	pop	{r4, r7}
 800c8ae:	4770      	bx	lr

0800c8b0 <LL_COMP_GetInputMinus>:
  *         (1) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302x6/8, STM32F303x6/8, STM32F328xx, STM32F334xx.\n
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <LL_COMP_Enable>:
  * @rmtoll CSR      COMPxEN        LL_COMP_Enable
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f043 0201 	orr.w	r2, r3, #1
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	601a      	str	r2, [r3, #0]
}
 800c8e0:	bf00      	nop
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <LL_COMP_Lock>:
  * @rmtoll CSR      COMPxLOCK      LL_COMP_Lock
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
}
 800c900:	bf00      	nop
 800c902:	370c      	adds	r7, #12
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr

0800c90c <R3_1_Init>:
  *         in three shunt topology using STM32F30X and shared ADC
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_Init( PWMC_R3_1_Handle_t * pHandle )
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b088      	sub	sp, #32
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	61fb      	str	r3, [r7, #28]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	61bb      	str	r3, [r7, #24]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	617b      	str	r3, [r7, #20]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c930:	695b      	ldr	r3, [r3, #20]
 800c932:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60bb      	str	r3, [r7, #8]

  /*Check that _Super is the first member of the structure PWMC_R3_1_Handle_t */
  if ( ( uint32_t )pHandle == ( uint32_t )&pHandle->_Super )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	461a      	mov	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	f040 8095 	bne.w	800ca7a <R3_1_Init+0x16e>
  {
    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOC( ADCx );
 800c950:	68b8      	ldr	r0, [r7, #8]
 800c952:	f7ff fcc1 	bl	800c2d8 <LL_ADC_DisableIT_EOC>
    LL_ADC_ClearFlag_EOC( ADCx );
 800c956:	68b8      	ldr	r0, [r7, #8]
 800c958:	f7ff fc87 	bl	800c26a <LL_ADC_ClearFlag_EOC>
    LL_ADC_DisableIT_JEOC( ADCx );
 800c95c:	68b8      	ldr	r0, [r7, #8]
 800c95e:	f7ff fccb 	bl	800c2f8 <LL_ADC_DisableIT_JEOC>
    LL_ADC_ClearFlag_JEOC( ADCx );
 800c962:	68b8      	ldr	r0, [r7, #8]
 800c964:	f7ff fc8e 	bl	800c284 <LL_ADC_ClearFlag_JEOC>

    if ( TIMx == TIM1 )
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	4a46      	ldr	r2, [pc, #280]	; (800ca84 <R3_1_Init+0x178>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d103      	bne.n	800c978 <R3_1_Init+0x6c>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800c970:	2001      	movs	r0, #1
 800c972:	f7ff fb85 	bl	800c080 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800c976:	e002      	b.n	800c97e <R3_1_Init+0x72>
    }
#ifdef TIM8    
    else
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800c978:	2002      	movs	r0, #2
 800c97a:	f7ff fb81 	bl	800c080 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
#endif
    /* Over current protection phase A */
    if ( COMP_OCPAx != NULL )
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d028      	beq.n	800c9d6 <R3_1_Init+0xca>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c988:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d01c      	beq.n	800c9ca <R3_1_Init+0xbe>
      {
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800c990:	69f8      	ldr	r0, [r7, #28]
 800c992:	f7ff ff8d 	bl	800c8b0 <LL_COMP_GetInputMinus>
 800c996:	4603      	mov	r3, r0
 800c998:	2b40      	cmp	r3, #64	; 0x40
 800c99a:	d108      	bne.n	800c9ae <R3_1_Init+0xa2>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9a0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	4838      	ldr	r0, [pc, #224]	; (800ca88 <R3_1_Init+0x17c>)
 800c9a8:	f000 fe4c 	bl	800d644 <R3_1_SetAOReferenceVoltage>
 800c9ac:	e00d      	b.n	800c9ca <R3_1_Init+0xbe>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800c9ae:	69f8      	ldr	r0, [r7, #28]
 800c9b0:	f7ff ff7e 	bl	800c8b0 <LL_COMP_GetInputMinus>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b50      	cmp	r3, #80	; 0x50
 800c9b8:	d107      	bne.n	800c9ca <R3_1_Init+0xbe>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9be:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	4831      	ldr	r0, [pc, #196]	; (800ca8c <R3_1_Init+0x180>)
 800c9c6:	f000 fe3d 	bl	800d644 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OCPAx );
 800c9ca:	69f8      	ldr	r0, [r7, #28]
 800c9cc:	f7ff ff7e 	bl	800c8cc <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPAx );
 800c9d0:	69f8      	ldr	r0, [r7, #28]
 800c9d2:	f7ff ff8b 	bl	800c8ec <LL_COMP_Lock>
    }

    /* Over current protection phase B */
    if ( COMP_OCPBx != NULL )
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <R3_1_Init+0xdc>
    {
      LL_COMP_Enable ( COMP_OCPBx );
 800c9dc:	69b8      	ldr	r0, [r7, #24]
 800c9de:	f7ff ff75 	bl	800c8cc <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPBx );
 800c9e2:	69b8      	ldr	r0, [r7, #24]
 800c9e4:	f7ff ff82 	bl	800c8ec <LL_COMP_Lock>
    }

    /* Over current protection phase C */
    if ( COMP_OCPCx != NULL )
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d005      	beq.n	800c9fa <R3_1_Init+0xee>
    {
      LL_COMP_Enable ( COMP_OCPCx );
 800c9ee:	6978      	ldr	r0, [r7, #20]
 800c9f0:	f7ff ff6c 	bl	800c8cc <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPCx );
 800c9f4:	6978      	ldr	r0, [r7, #20]
 800c9f6:	f7ff ff79 	bl	800c8ec <LL_COMP_Lock>
    }

    /* Over voltage protection */
    if ( COMP_OVPx != NULL )
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d028      	beq.n	800ca52 <R3_1_Init+0x146>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d01c      	beq.n	800ca46 <R3_1_Init+0x13a>
      {
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800ca0c:	6938      	ldr	r0, [r7, #16]
 800ca0e:	f7ff ff4f 	bl	800c8b0 <LL_COMP_GetInputMinus>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b40      	cmp	r3, #64	; 0x40
 800ca16:	d108      	bne.n	800ca2a <R3_1_Init+0x11e>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca1c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800ca20:	4619      	mov	r1, r3
 800ca22:	4819      	ldr	r0, [pc, #100]	; (800ca88 <R3_1_Init+0x17c>)
 800ca24:	f000 fe0e 	bl	800d644 <R3_1_SetAOReferenceVoltage>
 800ca28:	e00d      	b.n	800ca46 <R3_1_Init+0x13a>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800ca2a:	6938      	ldr	r0, [r7, #16]
 800ca2c:	f7ff ff40 	bl	800c8b0 <LL_COMP_GetInputMinus>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b50      	cmp	r3, #80	; 0x50
 800ca34:	d107      	bne.n	800ca46 <R3_1_Init+0x13a>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca3a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800ca3e:	4619      	mov	r1, r3
 800ca40:	4812      	ldr	r0, [pc, #72]	; (800ca8c <R3_1_Init+0x180>)
 800ca42:	f000 fdff 	bl	800d644 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OVPx );
 800ca46:	6938      	ldr	r0, [r7, #16]
 800ca48:	f7ff ff40 	bl	800c8cc <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OVPx );
 800ca4c:	6938      	ldr	r0, [r7, #16]
 800ca4e:	f7ff ff4d 	bl	800c8ec <LL_COMP_Lock>
    }
    
    if (LL_ADC_IsEnabled (ADCx) == 0)
 800ca52:	68b8      	ldr	r0, [r7, #8]
 800ca54:	f7ff fb8e 	bl	800c174 <LL_ADC_IsEnabled>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d108      	bne.n	800ca70 <R3_1_Init+0x164>
    {
      R3_1_ADCxInit (ADCx);
 800ca5e:	68b8      	ldr	r0, [r7, #8]
 800ca60:	f000 f816 	bl	800ca90 <R3_1_ADCxInit>
      /* Only the Interrupt of the first ADC is enabled. 
       * As Both ADCs are fired by HW at the same moment 
       * It is safe to consider that both conversion are ready at the same time*/
      LL_ADC_ClearFlag_JEOS( ADCx );
 800ca64:	68b8      	ldr	r0, [r7, #8]
 800ca66:	f7ff fc1a 	bl	800c29e <LL_ADC_ClearFlag_JEOS>
      LL_ADC_EnableIT_JEOS( ADCx );
 800ca6a:	68b8      	ldr	r0, [r7, #8]
 800ca6c:	f7ff fc24 	bl	800c2b8 <LL_ADC_EnableIT_JEOS>
    }
    else 
    {
      /* Nothing to do ADCx_1 already configured */
    }
    R3_1_TIMxInit( TIMx, &pHandle->_Super );
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4619      	mov	r1, r3
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f000 f84f 	bl	800cb18 <R3_1_TIMxInit>
  }
}
 800ca7a:	bf00      	nop
 800ca7c:	3720      	adds	r7, #32
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	40012c00 	.word	0x40012c00
 800ca88:	02100001 	.word	0x02100001
 800ca8c:	15430012 	.word	0x15430012

0800ca90 <R3_1_ADCxInit>:

static void R3_1_ADCxInit( ADC_TypeDef * ADCx )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
     
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f7ff fb43 	bl	800c124 <LL_ADC_IsInternalRegulatorEnabled>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d111      	bne.n	800cac8 <R3_1_ADCxInit+0x38>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADCx);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff fb23 	bl	800c0f0 <LL_ADC_EnableInternalRegulator>
  
    /* Wait for Regulator Startup time */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800caaa:	4b19      	ldr	r3, [pc, #100]	; (800cb10 <R3_1_ADCxInit+0x80>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	099b      	lsrs	r3, r3, #6
 800cab0:	4a18      	ldr	r2, [pc, #96]	; (800cb14 <R3_1_ADCxInit+0x84>)
 800cab2:	fba2 2303 	umull	r2, r3, r2, r3
 800cab6:	099b      	lsrs	r3, r3, #6
 800cab8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800caba:	e002      	b.n	800cac2 <R3_1_ADCxInit+0x32>
    {
      wait_loop_index--;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3b01      	subs	r3, #1
 800cac0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d1f9      	bne.n	800cabc <R3_1_ADCxInit+0x2c>
    }
  }
  
  LL_ADC_StartCalibration( ADCx, LL_ADC_SINGLE_ENDED );
 800cac8:	217f      	movs	r1, #127	; 0x7f
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7ff fb65 	bl	800c19a <LL_ADC_StartCalibration>
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 800cad0:	bf00      	nop
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7ff fb7a 	bl	800c1cc <LL_ADC_IsCalibrationOnGoing>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d0f9      	beq.n	800cad2 <R3_1_ADCxInit+0x42>
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800cade:	e002      	b.n	800cae6 <R3_1_ADCxInit+0x56>
  { 
    LL_ADC_Enable(  ADCx );
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff fb33 	bl	800c14c <LL_ADC_Enable>
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff fbac 	bl	800c244 <LL_ADC_IsActiveFlag_ADRDY>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0f6      	beq.n	800cae0 <R3_1_ADCxInit+0x50>
  }
  /* Clear JSQR from CubeMX setting to avoid not wanting conversion*/
  LL_ADC_INJ_StartConversion( ADCx ); 
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff fb7e 	bl	800c1f4 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StopConversion(ADCx);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff fb8f 	bl	800c21c <LL_ADC_INJ_StopConversion>
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );
 800cafe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f7ff fae1 	bl	800c0ca <LL_ADC_INJ_SetQueueMode>
 }
 800cb08:	bf00      	nop
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	200006d8 	.word	0x200006d8
 800cb14:	053e2d63 	.word	0x053e2d63

0800cb18 <R3_1_TIMxInit>:
  * @param TIMx: Timer to be initialized
  * @param pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_TIMxInit( TIM_TypeDef * TIMx, PWMC_Handle_t * pHdl )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint32_t Brk2Timeout = 1000;
 800cb26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb2a:	60fb      	str	r3, [r7, #12]

  /* disable main TIM counter to ensure
   * a synchronous start by TIM2 trigger */
  LL_TIM_DisableCounter( TIMx );
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff fbf3 	bl	800c318 <LL_TIM_DisableCounter>
  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800cb32:	2100      	movs	r1, #0
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff fd6b 	bl	800c610 <LL_TIM_SetTriggerOutput>

  /* Enables the TIMx Preload on CC1 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7ff fc93 	bl	800c468 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC2 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 800cb42:	2110      	movs	r1, #16
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7ff fc8f 	bl	800c468 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC3 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 800cb4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fc8a 	bl	800c468 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC4 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH4 );
 800cb54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff fc85 	bl	800c468 <LL_TIM_OC_EnablePreload>
  /* Prepare timer for synchronization */
  LL_TIM_GenerateEvent_UPDATE( TIMx );
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff fe0a 	bl	800c778 <LL_TIM_GenerateEvent_UPDATE>
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d11f      	bne.n	800cbb0 <R3_1_TIMxInit+0x98>
  {
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb74:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d110      	bne.n	800cb9e <R3_1_TIMxInit+0x86>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb80:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d10a      	bne.n	800cb9e <R3_1_TIMxInit+0x86>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800cb88:	2101      	movs	r1, #1
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff fbe2 	bl	800c354 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7ff fdf1 	bl	800c778 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800cb96:	2103      	movs	r1, #3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7ff fbdb 	bl	800c354 <LL_TIM_SetRepetitionCounter>
      }
    }
    LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cba4:	3b01      	subs	r3, #1
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fbc5 	bl	800c338 <LL_TIM_SetCounter>
 800cbae:	e024      	b.n	800cbfa <R3_1_TIMxInit+0xe2>
  }
  else /* bFreqRatio equal to 1 or 3 */
  {
    if ( pHandle->_Super.Motor == M1 )
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d11f      	bne.n	800cbfa <R3_1_TIMxInit+0xe2>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbbe:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800cbc2:	2b01      	cmp	r3, #1
 800cbc4:	d108      	bne.n	800cbd8 <R3_1_TIMxInit+0xc0>
      {
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff fbb1 	bl	800c338 <LL_TIM_SetCounter>
 800cbd6:	e010      	b.n	800cbfa <R3_1_TIMxInit+0xe2>
      }
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbdc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d10a      	bne.n	800cbfa <R3_1_TIMxInit+0xe2>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7ff fbb4 	bl	800c354 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff fdc3 	bl	800c778 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800cbf2:	2103      	movs	r1, #3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fbad 	bl	800c354 <LL_TIM_SetRepetitionCounter>
    }
    else
    {
    }
  }
  LL_TIM_ClearFlag_BRK( TIMx );
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff fd5c 	bl	800c6b8 <LL_TIM_ClearFlag_BRK>
  
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc04:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00f      	beq.n	800cc2c <R3_1_TIMxInit+0x114>
  {
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800cc0c:	e005      	b.n	800cc1a <R3_1_TIMxInit+0x102>
    {
      LL_TIM_ClearFlag_BRK2( TIMx );
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7ff fd60 	bl	800c6d4 <LL_TIM_ClearFlag_BRK2>
      Brk2Timeout--;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3b01      	subs	r3, #1
 800cc18:	60fb      	str	r3, [r7, #12]
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f7ff fd68 	bl	800c6f0 <LL_TIM_IsActiveFlag_BRK2>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d102      	bne.n	800cc2c <R3_1_TIMxInit+0x114>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1f0      	bne.n	800cc0e <R3_1_TIMxInit+0xf6>
    }   
  }
  LL_TIM_EnableIT_BRK( TIMx );
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f7ff fd93 	bl	800c758 <LL_TIM_EnableIT_BRK>

  /* Enable PWM channel */
  LL_TIM_CC_EnableChannel( TIMx, TIMxCCER_MASK_CH123 );
 800cc32:	f240 5155 	movw	r1, #1365	; 0x555
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff fb9a 	bl	800c370 <LL_TIM_CC_EnableChannel>
}
 800cc3c:	bf00      	nop
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <R3_1_CurrentReadingPolarization>:
  *         motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void R3_1_CurrentReadingPolarization( PWMC_Handle_t * pHdl )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60fb      	str	r3, [r7, #12]

  pHandle->PhaseAOffset = 0u;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	2200      	movs	r2, #0
 800cc64:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset = 0u;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset = 0u;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	665a      	str	r2, [r3, #100]	; 0x64

  pHandle->PolarizationCounter = 0u;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  /* It forces inactive level on TIMx CHy and CHyN */
  LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800cc7a:	f240 5155 	movw	r1, #1365	; 0x555
 800cc7e:	6938      	ldr	r0, [r7, #16]
 800cc80:	f7ff fb87 	bl	800c392 <LL_TIM_CC_DisableChannel>

  /* Offset calibration for all phases */
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	4a53      	ldr	r2, [pc, #332]	; (800cdd4 <R3_1_CurrentReadingPolarization+0x190>)
 800cc88:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	4a52      	ldr	r2, [pc, #328]	; (800cdd8 <R3_1_CurrentReadingPolarization+0x194>)
 800cc8e:	619a      	str	r2, [r3, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	2240      	movs	r2, #64	; 0x40
 800cc94:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     
  /* We want to polarize calibration Phase A and Phase B, so we select SECTOR_5 */
  pHandle->PolarizationSector=SECTOR_5;
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2204      	movs	r2, #4
 800cc9c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_5*/
  pHandle->_Super.Sector = SECTOR_5;   
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2204      	movs	r2, #4
 800cca4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 fb2d 	bl	800d30a <R3_1_SwitchOnPWM>
  
  /* IF CH4 is enabled, it means that JSQR is now configured to sample polarization current*/
  //while ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 0u )
  //{
  //}
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800ccb0:	bf00      	nop
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ccba:	2b70      	cmp	r3, #112	; 0x70
 800ccbc:	d1f9      	bne.n	800ccb2 <R3_1_CurrentReadingPolarization+0x6e>
  {
  }
  /* It is the right time to start the ADC without unwanted conversion */
  /* Start ADC to wait for external trigger. This is series dependant*/
  LL_ADC_INJ_StartConversion( ADCx );
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f7ff fa98 	bl	800c1f4 <LL_ADC_INJ_StartConversion>
  
  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800ccce:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	336e      	adds	r3, #110	; 0x6e
 800ccd6:	6938      	ldr	r0, [r7, #16]
 800ccd8:	f7fe ff1b 	bl	800bb12 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );

  R3_1_SwitchOffPWM( &pHandle->_Super );
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 fbb4 	bl	800d44c <R3_1_SwitchOffPWM>
  
  /* Offset calibration for C phase */
  pHandle->PolarizationCounter = 0u;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	2200      	movs	r2, #0
 800cce8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	4a3b      	ldr	r2, [pc, #236]	; (800cddc <R3_1_CurrentReadingPolarization+0x198>)
 800ccf0:	605a      	str	r2, [r3, #4]
  /* We want to polarize Phase C, so we select SECTOR_1 */
  pHandle->PolarizationSector=SECTOR_1;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_1*/
  pHandle->_Super.Sector = SECTOR_1; 
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 fb00 	bl	800d30a <R3_1_SwitchOnPWM>

  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800cd14:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	336e      	adds	r3, #110	; 0x6e
 800cd1c:	6938      	ldr	r0, [r7, #16]
 800cd1e:	f7fe fef8 	bl	800bb12 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );
  
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 fb91 	bl	800d44c <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd2e:	091a      	lsrs	r2, r3, #4
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd38:	091a      	lsrs	r2, r3, #4
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd42:	091a      	lsrs	r2, r3, #4
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Change back function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	4a25      	ldr	r2, [pc, #148]	; (800cde0 <R3_1_CurrentReadingPolarization+0x19c>)
 800cd4c:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	4a24      	ldr	r2, [pc, #144]	; (800cde4 <R3_1_CurrentReadingPolarization+0x1a0>)
 800cd52:	619a      	str	r2, [r3, #24]

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800cd54:	2101      	movs	r1, #1
 800cd56:	6938      	ldr	r0, [r7, #16]
 800cd58:	f7ff fbd4 	bl	800c504 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800cd5c:	2110      	movs	r1, #16
 800cd5e:	6938      	ldr	r0, [r7, #16]
 800cd60:	f7ff fbd0 	bl	800c504 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800cd64:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cd68:	6938      	ldr	r0, [r7, #16]
 800cd6a:	f7ff fbcb 	bl	800c504 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd74:	4619      	mov	r1, r3
 800cd76:	6938      	ldr	r0, [r7, #16]
 800cd78:	f7ff fc12 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx, pHandle->Half_PWMPeriod);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd82:	4619      	mov	r1, r3
 800cd84:	6938      	ldr	r0, [r7, #16]
 800cd86:	f7ff fc19 	bl	800c5bc <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx, pHandle->Half_PWMPeriod);
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd90:	4619      	mov	r1, r3
 800cd92:	6938      	ldr	r0, [r7, #16]
 800cd94:	f7ff fc20 	bl	800c5d8 <LL_TIM_OC_SetCompareCH3>
  /* Enable TIMx preload */
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800cd98:	2101      	movs	r1, #1
 800cd9a:	6938      	ldr	r0, [r7, #16]
 800cd9c:	f7ff fb64 	bl	800c468 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800cda0:	2110      	movs	r1, #16
 800cda2:	6938      	ldr	r0, [r7, #16]
 800cda4:	f7ff fb60 	bl	800c468 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800cda8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cdac:	6938      	ldr	r0, [r7, #16]
 800cdae:	f7ff fb5b 	bl	800c468 <LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800cdb2:	f240 5155 	movw	r1, #1365	; 0x555
 800cdb6:	6938      	ldr	r0, [r7, #16]
 800cdb8:	f7ff fada 	bl	800c370 <LL_TIM_CC_EnableChannel>
  
  /* At the end of calibration, all phases are at 50% we will sample A&B */
  pHandle->_Super.Sector=SECTOR_5;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	2204      	movs	r2, #4
 800cdc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  pHandle->BrakeActionLock = false;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

}
 800cdcc:	bf00      	nop
 800cdce:	3718      	adds	r7, #24
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	0800d161 	.word	0x0800d161
 800cdd8:	0800d009 	.word	0x0800d009
 800cddc:	0800d1f1 	.word	0x0800d1f1
 800cde0:	0800cde9 	.word	0x0800cde9
 800cde4:	0800d03f 	.word	0x0800d03f

0800cde8 <R3_1_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	61fb      	str	r3, [r7, #28]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	61bb      	str	r3, [r7, #24]
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ce04:	75fb      	strb	r3, [r7, #23]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800ce06:	69fb      	ldr	r3, [r7, #28]
 800ce08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	613b      	str	r3, [r7, #16]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
 800ce1e:	330e      	adds	r3, #14
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	69b8      	ldr	r0, [r7, #24]
 800ce2e:	f7ff fbef 	bl	800c610 <LL_TIM_SetTriggerOutput>
  
  switch ( Sector )
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	2b05      	cmp	r3, #5
 800ce36:	f200 80c6 	bhi.w	800cfc6 <R3_1_GetPhaseCurrents+0x1de>
 800ce3a:	a201      	add	r2, pc, #4	; (adr r2, 800ce40 <R3_1_GetPhaseCurrents+0x58>)
 800ce3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce40:	0800cecb 	.word	0x0800cecb
 800ce44:	0800cf49 	.word	0x0800cf49
 800ce48:	0800cf49 	.word	0x0800cf49
 800ce4c:	0800ce59 	.word	0x0800ce59
 800ce50:	0800ce59 	.word	0x0800ce59
 800ce54:	0800cecb 	.word	0x0800cecb
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ce6a:	dc04      	bgt.n	800ce76 <R3_1_GetPhaseCurrents+0x8e>
      {
        Iab->a = -INT16_MAX;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	f248 0201 	movw	r2, #32769	; 0x8001
 800ce72:	801a      	strh	r2, [r3, #0]
 800ce74:	e00c      	b.n	800ce90 <R3_1_GetPhaseCurrents+0xa8>
      }
      else  if ( Aux > INT16_MAX )
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce7c:	db04      	blt.n	800ce88 <R3_1_GetPhaseCurrents+0xa0>
      {
        Iab->a = INT16_MAX;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ce84:	801a      	strh	r2, [r3, #0]
 800ce86:	e003      	b.n	800ce90 <R3_1_GetPhaseCurrents+0xa8>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	b21a      	sxth	r2, r3
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800ce90:	69fb      	ldr	r3, [r7, #28]
 800ce92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce94:	461a      	mov	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cea2:	dc04      	bgt.n	800ceae <R3_1_GetPhaseCurrents+0xc6>
      {
        Iab->b = -INT16_MAX;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	f248 0201 	movw	r2, #32769	; 0x8001
 800ceaa:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800ceac:	e08c      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux > INT16_MAX )
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ceb4:	db04      	blt.n	800cec0 <R3_1_GetPhaseCurrents+0xd8>
        Iab->b = INT16_MAX;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cebc:	805a      	strh	r2, [r3, #2]
      break;
 800cebe:	e083      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	b21a      	sxth	r2, r3
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	805a      	strh	r2, [r3, #2]
      break;
 800cec8:	e07e      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_6:
    case SECTOR_1:
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cece:	461a      	mov	r2, r3
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cedc:	dc04      	bgt.n	800cee8 <R3_1_GetPhaseCurrents+0x100>
      {
        Iab->b = -INT16_MAX;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	f248 0201 	movw	r2, #32769	; 0x8001
 800cee4:	805a      	strh	r2, [r3, #2]
 800cee6:	e00c      	b.n	800cf02 <R3_1_GetPhaseCurrents+0x11a>
      }
      else  if ( Aux > INT16_MAX )
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ceee:	db04      	blt.n	800cefa <R3_1_GetPhaseCurrents+0x112>
      {
        Iab->b = INT16_MAX;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cef6:	805a      	strh	r2, [r3, #2]
 800cef8:	e003      	b.n	800cf02 <R3_1_GetPhaseCurrents+0x11a>
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	b21a      	sxth	r2, r3
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	805a      	strh	r2, [r3, #2]
      }

      /* Ia = -Ic -Ib */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cf08:	1a9b      	subs	r3, r3, r2
 800cf0a:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf12:	461a      	mov	r2, r3
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	1a9b      	subs	r3, r3, r2
 800cf18:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux > INT16_MAX )
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf20:	db04      	blt.n	800cf2c <R3_1_GetPhaseCurrents+0x144>
      {
        Iab->a = INT16_MAX;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf28:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        Iab->a = ( int16_t )Aux;
      }
      break;
 800cf2a:	e04d      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cf32:	dc04      	bgt.n	800cf3e <R3_1_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	f248 0201 	movw	r2, #32769	; 0x8001
 800cf3a:	801a      	strh	r2, [r3, #0]
      break;
 800cf3c:	e044      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->a = ( int16_t )Aux;
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	b21a      	sxth	r2, r3
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	801a      	strh	r2, [r3, #0]
      break;
 800cf46:	e03f      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800cf48:	69fb      	ldr	r3, [r7, #28]
 800cf4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	1ad3      	subs	r3, r2, r3
 800cf52:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cf5a:	dc04      	bgt.n	800cf66 <R3_1_GetPhaseCurrents+0x17e>
      {
        Iab->a = -INT16_MAX;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	f248 0201 	movw	r2, #32769	; 0x8001
 800cf62:	801a      	strh	r2, [r3, #0]
 800cf64:	e00c      	b.n	800cf80 <R3_1_GetPhaseCurrents+0x198>
      }
      else  if ( Aux > INT16_MAX )
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf6c:	db04      	blt.n	800cf78 <R3_1_GetPhaseCurrents+0x190>
      {
        Iab->a = INT16_MAX;
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf74:	801a      	strh	r2, [r3, #0]
 800cf76:	e003      	b.n	800cf80 <R3_1_GetPhaseCurrents+0x198>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	b21a      	sxth	r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	69fa      	ldr	r2, [r7, #28]
 800cf84:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cf86:	1a9b      	subs	r3, r3, r2
 800cf88:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf90:	461a      	mov	r2, r3
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	1a9b      	subs	r3, r3, r2
 800cf96:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf9e:	db04      	blt.n	800cfaa <R3_1_GetPhaseCurrents+0x1c2>
      {
        Iab->b = INT16_MAX;
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cfa6:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800cfa8:	e00e      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cfb0:	dc04      	bgt.n	800cfbc <R3_1_GetPhaseCurrents+0x1d4>
        Iab->b = -INT16_MAX;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	f248 0201 	movw	r2, #32769	; 0x8001
 800cfb8:	805a      	strh	r2, [r3, #2]
      break;
 800cfba:	e005      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	b21a      	sxth	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	805a      	strh	r2, [r3, #2]
      break;
 800cfc4:	e000      	b.n	800cfc8 <R3_1_GetPhaseCurrents+0x1e0>

    default:
      break;
 800cfc6:	bf00      	nop
  }

  pHandle->_Super.Ia = Iab->a;
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	425b      	negs	r3, r3
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	b21a      	sxth	r2, r3
 800cffa:	69fb      	ldr	r3, [r7, #28]
 800cffc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800d000:	bf00      	nop
 800d002:	3720      	adds	r7, #32
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d028:	3b01      	subs	r3, #1
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	4619      	mov	r1, r3
 800d02e:	4610      	mov	r0, r2
 800d030:	f000 f863 	bl	800d0fa <R3_1_WriteTIMRegisters>
 800d034:	4603      	mov	r3, r0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <R3_1_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle Pointer on the target component instance
  * @retval none
  */
uint16_t R3_1_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b086      	sub	sp, #24
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	613b      	str	r3, [r7, #16]
#endif /* __ICCARM__ */
  uint16_t SamplingPoint;
  uint16_t DeltaDuty;

  /* Verify that sampling is possible in the middle of PWM by checking the smallest duty cycle */
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	b29a      	uxth	r2, r3
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d05c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800d060:	429a      	cmp	r2, r3
 800d062:	d909      	bls.n	800d078 <R3_1_SetADCSampPointSectX+0x3a>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 4 or 5  */
    pHandle->_Super.Sector = SECTOR_5;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	2204      	movs	r2, #4
 800d068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* set sampling  point trigger in the middle of PWM period */
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d072:	3b01      	subs	r3, #1
 800d074:	82fb      	strh	r3, [r7, #22]
 800d076:	e035      	b.n	800d0e4 <R3_1_SetADCSampPointSectX+0xa6>
    /* ADC Injected sequence configuration. The stator phase with minimum value of complementary
        duty cycle is set as first. In every sector there is always one phase with maximum complementary duty,
        one with minimum complementary duty and one with variable complementary duty. In this case, phases
        with variable complementary duty and with maximum duty are converted and the first will be always
        the phase with variable complementary duty cycle */
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d080:	1ad3      	subs	r3, r2, r3
 800d082:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800d084:	89fa      	ldrh	r2, [r7, #14]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d090:	1acb      	subs	r3, r1, r3
 800d092:	b29b      	uxth	r3, r3
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	429a      	cmp	r2, r3
 800d098:	d908      	bls.n	800d0ac <R3_1_SetADCSampPointSectX+0x6e>
    {
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800d0a6:	1ad3      	subs	r3, r2, r3
 800d0a8:	82fb      	strh	r3, [r7, #22]
 800d0aa:	e01b      	b.n	800d0e4 <R3_1_SetADCSampPointSectX+0xa6>
    }
    else
    {
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0b4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800d0b8:	4413      	add	r3, r2
 800d0ba:	82fb      	strh	r3, [r7, #22]

      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0c2:	8afa      	ldrh	r2, [r7, #22]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d30d      	bcc.n	800d0e4 <R3_1_SetADCSampPointSectX+0xa6>
      {
         /* ADC trigger edge must be changed from positive to negative */
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	2280      	movs	r2, #128	; 0x80
 800d0cc:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	8afb      	ldrh	r3, [r7, #22]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	82fb      	strh	r3, [r7, #22]
      }
    }
  }
  return R3_1_WriteTIMRegisters( &pHandle->_Super, SamplingPoint );
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	8afa      	ldrh	r2, [r7, #22]
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 f805 	bl	800d0fa <R3_1_WriteTIMRegisters>
 800d0f0:	4603      	mov	r3, r0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3718      	adds	r7, #24
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <R3_1_WriteTIMRegisters>:
  *         motor
  * @param  pHandle handler of the current instance of the PWM component
  * @retval none
  */
__STATIC_INLINE uint16_t R3_1_WriteTIMRegisters( PWMC_Handle_t * pHdl, uint16_t SamplingPoint )
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b086      	sub	sp, #24
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	460b      	mov	r3, r1
 800d104:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	60fb      	str	r3, [r7, #12]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d116:	4619      	mov	r1, r3
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f7ff fa41 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800d122:	4619      	mov	r1, r3
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f7ff fa49 	bl	800c5bc <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d12e:	4619      	mov	r1, r3
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f7ff fa51 	bl	800c5d8 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );
 800d136:	887b      	ldrh	r3, [r7, #2]
 800d138:	4619      	mov	r1, r3
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff fa5a 	bl	800c5f4 <LL_TIM_OC_SetCompareCH4>

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <R3_1_WriteTIMRegisters+0x58>
  {
    Aux = MC_FOC_DURATION;
 800d14c:	2301      	movs	r3, #1
 800d14e:	82fb      	strh	r3, [r7, #22]
 800d150:	e001      	b.n	800d156 <R3_1_WriteTIMRegisters+0x5c>
  }
  else
  {
    Aux = MC_NO_ERROR;
 800d152:	2300      	movs	r3, #0
 800d154:	82fb      	strh	r3, [r7, #22]
  }
  return Aux;
 800d156:	8afb      	ldrh	r3, [r7, #22]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3718      	adds	r7, #24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d180:	3308      	adds	r3, #8
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	60fb      	str	r3, [r7, #12]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d196:	330e      	adds	r3, #14
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	60bb      	str	r3, [r7, #8]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	6938      	ldr	r0, [r7, #16]
 800d1a6:	f7ff fa33 	bl	800c610 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d1b0:	2b0f      	cmp	r3, #15
 800d1b2:	d813      	bhi.n	800d1dc <R3_1_HFCurrentsPolarizationAB+0x7c>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	441a      	add	r2, r3
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	65da      	str	r2, [r3, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	441a      	add	r2, r3
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	805a      	strh	r2, [r3, #2]
}
 800d1e8:	bf00      	nop
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <R3_1_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d210:	330e      	adds	r3, #14
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800d21c:	2100      	movs	r1, #0
 800d21e:	6938      	ldr	r0, [r7, #16]
 800d220:	f7ff f9f6 	bl	800c610 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d22a:	2b0f      	cmp	r3, #15
 800d22c:	d80d      	bhi.n	800d24a <R3_1_HFCurrentsPolarizationC+0x5a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	441a      	add	r2, r3
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d240:	3301      	adds	r3, #1
 800d242:	b2da      	uxtb	r2, r3
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2200      	movs	r2, #0
 800d24e:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	2200      	movs	r2, #0
 800d254:	805a      	strh	r2, [r3, #2]
}
 800d256:	bf00      	nop
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <R3_1_TurnOnLowSides>:
  *         called each motor start-up when using high voltage drivers
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b084      	sub	sp, #16
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	4618      	mov	r0, r3
 800d282:	f7ff f9f8 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800d286:	2100      	movs	r1, #0
 800d288:	68b8      	ldr	r0, [r7, #8]
 800d28a:	f7ff f989 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
 800d28e:	2100      	movs	r1, #0
 800d290:	68b8      	ldr	r0, [r7, #8]
 800d292:	f7ff f993 	bl	800c5bc <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );
 800d296:	2100      	movs	r1, #0
 800d298:	68b8      	ldr	r0, [r7, #8]
 800d29a:	f7ff f99d 	bl	800c5d8 <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800d29e:	bf00      	nop
 800d2a0:	68b8      	ldr	r0, [r7, #8]
 800d2a2:	f7ff f9f6 	bl	800c692 <LL_TIM_IsActiveFlag_UPDATE>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0f9      	beq.n	800d2a0 <R3_1_TurnOnLowSides+0x42>
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800d2ac:	68b8      	ldr	r0, [r7, #8]
 800d2ae:	f7ff f9c2 	bl	800c636 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2b6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d121      	bne.n	800d302 <R3_1_TurnOnLowSides+0xa4>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2c2:	699a      	ldr	r2, [r3, #24]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2c8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	f7ff fa62 	bl	800c798 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d8:	69da      	ldr	r2, [r3, #28]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2de:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	f7ff fa57 	bl	800c798 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ee:	6a1a      	ldr	r2, [r3, #32]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2f4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	f7ff fa4c 	bl	800c798 <LL_GPIO_SetOutputPin>
  }
  return;
 800d300:	bf00      	nop
 800d302:	bf00      	nop
}
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <R3_1_SwitchOnPWM>:
  *         bit
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800d30a:	b580      	push	{r7, lr}
 800d30c:	b084      	sub	sp, #16
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d32c:	085b      	lsrs	r3, r3, #1
 800d32e:	b29b      	uxth	r3, r3
 800d330:	4619      	mov	r1, r3
 800d332:	68b8      	ldr	r0, [r7, #8]
 800d334:	f7ff f934 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d33e:	085b      	lsrs	r3, r3, #1
 800d340:	b29b      	uxth	r3, r3
 800d342:	4619      	mov	r1, r3
 800d344:	68b8      	ldr	r0, [r7, #8]
 800d346:	f7ff f939 	bl	800c5bc <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d350:	085b      	lsrs	r3, r3, #1
 800d352:	b29b      	uxth	r3, r3
 800d354:	4619      	mov	r1, r3
 800d356:	68b8      	ldr	r0, [r7, #8]
 800d358:	f7ff f93e 	bl	800c5d8 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d362:	3b05      	subs	r3, #5
 800d364:	4619      	mov	r1, r3
 800d366:	68b8      	ldr	r0, [r7, #8]
 800d368:	f7ff f944 	bl	800c5f4 <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d36c:	68b8      	ldr	r0, [r7, #8]
 800d36e:	f7ff f982 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800d372:	bf00      	nop
 800d374:	68b8      	ldr	r0, [r7, #8]
 800d376:	f7ff f98c 	bl	800c692 <LL_TIM_IsActiveFlag_UPDATE>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d0f9      	beq.n	800d374 <R3_1_SwitchOnPWM+0x6a>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d380:	68b8      	ldr	r0, [r7, #8]
 800d382:	f7ff f978 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d38a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );
 800d392:	68b8      	ldr	r0, [r7, #8]
 800d394:	f7ff f94f 	bl	800c636 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d39c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d149      	bne.n	800d438 <R3_1_SwitchOnPWM+0x12e>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	6a1a      	ldr	r2, [r3, #32]
 800d3a8:	f240 5355 	movw	r3, #1365	; 0x555
 800d3ac:	4013      	ands	r3, r2
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d021      	beq.n	800d3f6 <R3_1_SwitchOnPWM+0xec>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3b6:	699a      	ldr	r2, [r3, #24]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3bc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	f7ff f9e8 	bl	800c798 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3cc:	69da      	ldr	r2, [r3, #28]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3d2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7ff f9dd 	bl	800c798 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e2:	6a1a      	ldr	r2, [r3, #32]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	f7ff f9d2 	bl	800c798 <LL_GPIO_SetOutputPin>
 800d3f4:	e020      	b.n	800d438 <R3_1_SwitchOnPWM+0x12e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3fa:	699a      	ldr	r2, [r3, #24]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d400:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d404:	4619      	mov	r1, r3
 800d406:	4610      	mov	r0, r2
 800d408:	f7ff f9d4 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d410:	69da      	ldr	r2, [r3, #28]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d416:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d41a:	4619      	mov	r1, r3
 800d41c:	4610      	mov	r0, r2
 800d41e:	f7ff f9c9 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d426:	6a1a      	ldr	r2, [r3, #32]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d42c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d430:	4619      	mov	r1, r3
 800d432:	4610      	mov	r0, r2
 800d434:	f7ff f9be 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
    }
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d438:	68b8      	ldr	r0, [r7, #8]
 800d43a:	f7ff f91c 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800d43e:	68b8      	ldr	r0, [r7, #8]
 800d440:	f7ff f96a 	bl	800c718 <LL_TIM_EnableIT_UPDATE>
}
 800d444:	bf00      	nop
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <R3_1_SwitchOffPWM>:
/**
 * @brief  Disables PWM generation on the proper Timer peripheral acting on  MOE bit
 * @param pHdl handler of the current instance of the PWM component
 */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800d460:	68b8      	ldr	r0, [r7, #8]
 800d462:	f7ff f969 	bl	800c738 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2200      	movs	r2, #0
 800d46a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
 800d46e:	68b8      	ldr	r0, [r7, #8]
 800d470:	f7ff f8f1 	bl	800c656 <LL_TIM_DisableAllOutputs>
  if ( pHandle->BrakeActionLock == true )
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d126      	bne.n	800d4cc <R3_1_SwitchOffPWM+0x80>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d482:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d486:	2b02      	cmp	r3, #2
 800d488:	d120      	bne.n	800d4cc <R3_1_SwitchOffPWM+0x80>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d48e:	699a      	ldr	r2, [r3, #24]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d494:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d498:	4619      	mov	r1, r3
 800d49a:	4610      	mov	r0, r2
 800d49c:	f7ff f98a 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4a4:	69da      	ldr	r2, [r3, #28]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4aa:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	f7ff f97f 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4ba:	6a1a      	ldr	r2, [r3, #32]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4c0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	f7ff f974 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d4cc:	68b8      	ldr	r0, [r7, #8]
 800d4ce:	f7ff f8d2 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800d4d2:	bf00      	nop
 800d4d4:	68b8      	ldr	r0, [r7, #8]
 800d4d6:	f7ff f8dc 	bl	800c692 <LL_TIM_IsActiveFlag_UPDATE>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d0f9      	beq.n	800d4d4 <R3_1_SwitchOffPWM+0x88>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d4e0:	68b8      	ldr	r0, [r7, #8]
 800d4e2:	f7ff f8c8 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>

}
 800d4e6:	bf00      	nop
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <R3_1_TIMx_UP_IRQHandler>:
  *        sampling point
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b084      	sub	sp, #16
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	60bb      	str	r3, [r7, #8]
  
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d510:	3314      	adds	r3, #20
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800d51e:	431a      	orrs	r2, r3
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* enable ADC trigger source */
    //LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
 800d524:	2170      	movs	r1, #112	; 0x70
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff f872 	bl	800c610 <LL_TIM_SetTriggerOutput>
    
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2240      	movs	r2, #64	; 0x40
 800d530:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3346      	adds	r3, #70	; 0x46
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3710      	adds	r7, #16
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <R3_1_BRK2_IRQHandler>:
  * @brief  It contains the TIMx Break2 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK2_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800d54e:	f083 0301 	eor.w	r3, r3, #1
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b00      	cmp	r3, #0
 800d556:	d026      	beq.n	800d5a6 <R3_1_BRK2_IRQHandler+0x66>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d55c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d560:	2b02      	cmp	r3, #2
 800d562:	d120      	bne.n	800d5a6 <R3_1_BRK2_IRQHandler+0x66>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d568:	699a      	ldr	r2, [r3, #24]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d56e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d572:	4619      	mov	r1, r3
 800d574:	4610      	mov	r0, r2
 800d576:	f7ff f91d 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d57e:	69da      	ldr	r2, [r3, #28]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d584:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f7ff f912 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d594:	6a1a      	ldr	r2, [r3, #32]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d59a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7ff f907 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return &( pHandle->_Super.Motor );
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3346      	adds	r3, #70	; 0x46
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <R3_1_BRK_IRQHandler>:
  * @brief  It contains the TIMx Break1 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d5ba:	b480      	push	{r7}
 800d5bc:	b083      	sub	sp, #12
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]

  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d5d4:	645a      	str	r2, [r3, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  pHandle->BrakeActionLock = true;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  return &( pHandle->_Super.Motor );
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3346      	adds	r3, #70	; 0x46
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	370c      	adds	r7, #12
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr

0800d5f6 <R3_1_IsOverCurrentOccurred>:
  * @param  pHandle Pointer on the target component instance
  * @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_1_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	b085      	sub	sp, #20
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint16_t retVal = MC_NO_FAULTS;
 800d602:	2300      	movs	r3, #0
 800d604:	81fb      	strh	r3, [r7, #14]

  if ( pHandle->OverVoltageFlag == true )
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d005      	beq.n	800d61c <R3_1_IsOverCurrentOccurred+0x26>
  {
    retVal = MC_OVER_VOLT;
 800d610:	2302      	movs	r3, #2
 800d612:	81fb      	strh	r3, [r7, #14]
    pHandle->OverVoltageFlag = false;
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  }

  if ( pHandle->OverCurrentFlag == true )
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d622:	2b00      	cmp	r3, #0
 800d624:	d007      	beq.n	800d636 <R3_1_IsOverCurrentOccurred+0x40>
  {
    retVal |= MC_BREAK_IN;
 800d626:	89fb      	ldrh	r3, [r7, #14]
 800d628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d62c:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  }

  return retVal;
 800d636:	89fb      	ldrh	r3, [r7, #14]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <R3_1_SetAOReferenceVoltage>:
  * @param  hDACVref Value of DAC reference expressed as 16bit unsigned integer.
  *         Ex. 0 = 0V 65536 = VDD_DAC.
  * @retval none
  */
static void R3_1_SetAOReferenceVoltage( uint32_t DAC_Channel, uint16_t hDACVref )
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	807b      	strh	r3, [r7, #2]
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800d650:	887b      	ldrh	r3, [r7, #2]
 800d652:	461a      	mov	r2, r3
 800d654:	6879      	ldr	r1, [r7, #4]
 800d656:	481d      	ldr	r0, [pc, #116]	; (800d6cc <R3_1_SetAOReferenceVoltage+0x88>)
 800d658:	f7ff f902 	bl	800c860 <LL_DAC_ConvertData12LeftAligned>

  /* Enable DAC Channel */
  LL_DAC_TrigSWConversion ( DAC1, DAC_Channel );
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	481b      	ldr	r0, [pc, #108]	; (800d6cc <R3_1_SetAOReferenceVoltage+0x88>)
 800d660:	f7ff f8eb 	bl	800c83a <LL_DAC_TrigSWConversion>
  
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 800d664:	6879      	ldr	r1, [r7, #4]
 800d666:	4819      	ldr	r0, [pc, #100]	; (800d6cc <R3_1_SetAOReferenceVoltage+0x88>)
 800d668:	f7ff f8c8 	bl	800c7fc <LL_DAC_IsEnabled>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d112      	bne.n	800d698 <R3_1_SetAOReferenceVoltage+0x54>
  { /* If DAC is already enable, we wait LL_DAC_DELAY_VOLTAGE_SETTLING_US*/
    uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800d672:	4b17      	ldr	r3, [pc, #92]	; (800d6d0 <R3_1_SetAOReferenceVoltage+0x8c>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a17      	ldr	r2, [pc, #92]	; (800d6d4 <R3_1_SetAOReferenceVoltage+0x90>)
 800d678:	fba2 2303 	umull	r2, r3, r2, r3
 800d67c:	0cda      	lsrs	r2, r3, #19
 800d67e:	4613      	mov	r3, r2
 800d680:	005b      	lsls	r3, r3, #1
 800d682:	4413      	add	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d688:	e002      	b.n	800d690 <R3_1_SetAOReferenceVoltage+0x4c>
    {
      wait_loop_index--;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1f9      	bne.n	800d68a <R3_1_SetAOReferenceVoltage+0x46>
    while(wait_loop_index != 0UL)
    {
      wait_loop_index--;
    }    
  }
}
 800d696:	e014      	b.n	800d6c2 <R3_1_SetAOReferenceVoltage+0x7e>
    LL_DAC_Enable ( DAC1, DAC_Channel );
 800d698:	6879      	ldr	r1, [r7, #4]
 800d69a:	480c      	ldr	r0, [pc, #48]	; (800d6cc <R3_1_SetAOReferenceVoltage+0x88>)
 800d69c:	f7ff f898 	bl	800c7d0 <LL_DAC_Enable>
    uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800d6a0:	4b0b      	ldr	r3, [pc, #44]	; (800d6d0 <R3_1_SetAOReferenceVoltage+0x8c>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a0b      	ldr	r2, [pc, #44]	; (800d6d4 <R3_1_SetAOReferenceVoltage+0x90>)
 800d6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6aa:	0cda      	lsrs	r2, r3, #19
 800d6ac:	4613      	mov	r3, r2
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	1a9b      	subs	r3, r3, r2
 800d6b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800d6b4:	e002      	b.n	800d6bc <R3_1_SetAOReferenceVoltage+0x78>
      wait_loop_index--;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1f9      	bne.n	800d6b6 <R3_1_SetAOReferenceVoltage+0x72>
}
 800d6c2:	bf00      	nop
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	40007400 	.word	0x40007400
 800d6d0:	200006d8 	.word	0x200006d8
 800d6d4:	431bde83 	.word	0x431bde83

0800d6d8 <R3_1_RLDetectionModeEnable>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @param  hDuty to be applied in uint16_t
  * @retval none
  */
void R3_1_RLDetectionModeEnable( PWMC_Handle_t * pHdl )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b084      	sub	sp, #16
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	60bb      	str	r3, [r7, #8]
  
  if ( pHandle->_Super.RLDetectionMode == false )
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d6f2:	f083 0301 	eor.w	r3, r3, #1
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d047      	beq.n	800d78c <R3_1_RLDetectionModeEnable+0xb4>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800d6fc:	2260      	movs	r2, #96	; 0x60
 800d6fe:	2101      	movs	r1, #1
 800d700:	68b8      	ldr	r0, [r7, #8]
 800d702:	f7fe fe59 	bl	800c3b8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800d706:	2101      	movs	r1, #1
 800d708:	68b8      	ldr	r0, [r7, #8]
 800d70a:	f7fe fe31 	bl	800c370 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d70e:	2104      	movs	r1, #4
 800d710:	68b8      	ldr	r0, [r7, #8]
 800d712:	f7fe fe3e 	bl	800c392 <LL_TIM_CC_DisableChannel>
    LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800d716:	2100      	movs	r1, #0
 800d718:	68b8      	ldr	r0, [r7, #8]
 800d71a:	f7fe ff41 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d722:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d726:	2b01      	cmp	r3, #1
 800d728:	d10d      	bne.n	800d746 <R3_1_RLDetectionModeEnable+0x6e>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE );
 800d72a:	2210      	movs	r2, #16
 800d72c:	2110      	movs	r1, #16
 800d72e:	68b8      	ldr	r0, [r7, #8]
 800d730:	f7fe fe42 	bl	800c3b8 <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d734:	2110      	movs	r1, #16
 800d736:	68b8      	ldr	r0, [r7, #8]
 800d738:	f7fe fe2b 	bl	800c392 <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d73c:	2140      	movs	r1, #64	; 0x40
 800d73e:	68b8      	ldr	r0, [r7, #8]
 800d740:	f7fe fe16 	bl	800c370 <LL_TIM_CC_EnableChannel>
 800d744:	e012      	b.n	800d76c <R3_1_RLDetectionModeEnable+0x94>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d74a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d10c      	bne.n	800d76c <R3_1_RLDetectionModeEnable+0x94>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE );
 800d752:	2220      	movs	r2, #32
 800d754:	2110      	movs	r1, #16
 800d756:	68b8      	ldr	r0, [r7, #8]
 800d758:	f7fe fe2e 	bl	800c3b8 <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d75c:	2110      	movs	r1, #16
 800d75e:	68b8      	ldr	r0, [r7, #8]
 800d760:	f7fe fe06 	bl	800c370 <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d764:	2140      	movs	r1, #64	; 0x40
 800d766:	68b8      	ldr	r0, [r7, #8]
 800d768:	f7fe fe13 	bl	800c392 <LL_TIM_CC_DisableChannel>
    else
    {
    }

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2 );
 800d76c:	2270      	movs	r2, #112	; 0x70
 800d76e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d772:	68b8      	ldr	r0, [r7, #8]
 800d774:	f7fe fe20 	bl	800c3b8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800d778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d77c:	68b8      	ldr	r0, [r7, #8]
 800d77e:	f7fe fe08 	bl	800c392 <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d782:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d786:	68b8      	ldr	r0, [r7, #8]
 800d788:	f7fe fe03 	bl	800c392 <LL_TIM_CC_DisableChannel>
   
  }

  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4a09      	ldr	r2, [pc, #36]	; (800d7b4 <R3_1_RLDetectionModeEnable+0xdc>)
 800d790:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	4a08      	ldr	r2, [pc, #32]	; (800d7b8 <R3_1_RLDetectionModeEnable+0xe0>)
 800d796:	615a      	str	r2, [r3, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	4a08      	ldr	r2, [pc, #32]	; (800d7bc <R3_1_RLDetectionModeEnable+0xe4>)
 800d79c:	60da      	str	r2, [r3, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	4a07      	ldr	r2, [pc, #28]	; (800d7c0 <R3_1_RLDetectionModeEnable+0xe8>)
 800d7a2:	609a      	str	r2, [r3, #8]

  pHandle->_Super.RLDetectionMode = true;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
}
 800d7ac:	bf00      	nop
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	0800d9b1 	.word	0x0800d9b1
 800d7b8:	0800da2d 	.word	0x0800da2d
 800d7bc:	0800dac1 	.word	0x0800dac1
 800d7c0:	0800d44d 	.word	0x0800d44d

0800d7c4 <R3_1_RLDetectionModeDisable>:
 * @brief  It is used to disable the PWM mode for R/L detection.
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval none
 */
void R3_1_RLDetectionModeDisable( PWMC_Handle_t * pHdl )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	60bb      	str	r3, [r7, #8]

  if ( pHandle->_Super.RLDetectionMode == true )
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	f000 809e 	beq.w	800d920 <R3_1_RLDetectionModeDisable+0x15c>

    /* The folowing while cycles ensure the identification of the positive counting mode of TIM1
     * for correct reactivation of Repetition Counter value of TIM1.*/

    /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800d7e4:	bf00      	nop
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f003 0310 	and.w	r3, r3, #16
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d0f9      	beq.n	800d7e6 <R3_1_RLDetectionModeDisable+0x22>
    {
    }
    /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction.*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800d7f2:	bf00      	nop
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0310 	and.w	r3, r3, #16
 800d7fc:	2b10      	cmp	r3, #16
 800d7fe:	d0f9      	beq.n	800d7f4 <R3_1_RLDetectionModeDisable+0x30>
    {
    } 

    /* Repetition Counter of TIM1 User value reactivation END*/    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800d800:	2260      	movs	r2, #96	; 0x60
 800d802:	2101      	movs	r1, #1
 800d804:	68b8      	ldr	r0, [r7, #8]
 800d806:	f7fe fdd7 	bl	800c3b8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800d80a:	2101      	movs	r1, #1
 800d80c:	68b8      	ldr	r0, [r7, #8]
 800d80e:	f7fe fdaf 	bl	800c370 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d816:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d104      	bne.n	800d828 <R3_1_RLDetectionModeDisable+0x64>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d81e:	2104      	movs	r1, #4
 800d820:	68b8      	ldr	r0, [r7, #8]
 800d822:	f7fe fda5 	bl	800c370 <LL_TIM_CC_EnableChannel>
 800d826:	e009      	b.n	800d83c <R3_1_RLDetectionModeDisable+0x78>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d82c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d830:	2b02      	cmp	r3, #2
 800d832:	d103      	bne.n	800d83c <R3_1_RLDetectionModeDisable+0x78>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d834:	2104      	movs	r1, #4
 800d836:	68b8      	ldr	r0, [r7, #8]
 800d838:	f7fe fdab 	bl	800c392 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d842:	085b      	lsrs	r3, r3, #1
 800d844:	b29b      	uxth	r3, r3
 800d846:	4619      	mov	r1, r3
 800d848:	68b8      	ldr	r0, [r7, #8]
 800d84a:	f7fe fea9 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 800d84e:	2260      	movs	r2, #96	; 0x60
 800d850:	2110      	movs	r1, #16
 800d852:	68b8      	ldr	r0, [r7, #8]
 800d854:	f7fe fdb0 	bl	800c3b8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d858:	2110      	movs	r1, #16
 800d85a:	68b8      	ldr	r0, [r7, #8]
 800d85c:	f7fe fd88 	bl	800c370 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d864:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d104      	bne.n	800d876 <R3_1_RLDetectionModeDisable+0xb2>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d86c:	2140      	movs	r1, #64	; 0x40
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f7fe fd7e 	bl	800c370 <LL_TIM_CC_EnableChannel>
 800d874:	e009      	b.n	800d88a <R3_1_RLDetectionModeDisable+0xc6>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d87a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d87e:	2b02      	cmp	r3, #2
 800d880:	d103      	bne.n	800d88a <R3_1_RLDetectionModeDisable+0xc6>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d882:	2140      	movs	r1, #64	; 0x40
 800d884:	68b8      	ldr	r0, [r7, #8]
 800d886:	f7fe fd84 	bl	800c392 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH2( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d890:	085b      	lsrs	r3, r3, #1
 800d892:	b29b      	uxth	r3, r3
 800d894:	4619      	mov	r1, r3
 800d896:	68b8      	ldr	r0, [r7, #8]
 800d898:	f7fe fe90 	bl	800c5bc <LL_TIM_OC_SetCompareCH2>

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 800d89c:	2260      	movs	r2, #96	; 0x60
 800d89e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d8a2:	68b8      	ldr	r0, [r7, #8]
 800d8a4:	f7fe fd88 	bl	800c3b8 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800d8a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d8ac:	68b8      	ldr	r0, [r7, #8]
 800d8ae:	f7fe fd5f 	bl	800c370 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8b6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d105      	bne.n	800d8ca <R3_1_RLDetectionModeDisable+0x106>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d8be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d8c2:	68b8      	ldr	r0, [r7, #8]
 800d8c4:	f7fe fd54 	bl	800c370 <LL_TIM_CC_EnableChannel>
 800d8c8:	e00a      	b.n	800d8e0 <R3_1_RLDetectionModeDisable+0x11c>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ce:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d104      	bne.n	800d8e0 <R3_1_RLDetectionModeDisable+0x11c>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d8d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d8da:	68b8      	ldr	r0, [r7, #8]
 800d8dc:	f7fe fd59 	bl	800c392 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH3( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d8e6:	085b      	lsrs	r3, r3, #1
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	68b8      	ldr	r0, [r7, #8]
 800d8ee:	f7fe fe73 	bl	800c5d8 <LL_TIM_OC_SetCompareCH3>
    
    /* ADCx Injected discontinuous mode disable */
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fe fbd2 	bl	800c0a4 <LL_ADC_INJ_SetSequencerDiscont>
                                    LL_ADC_INJ_SEQ_DISCONT_DISABLE );

    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	4a09      	ldr	r2, [pc, #36]	; (800d928 <R3_1_RLDetectionModeDisable+0x164>)
 800d904:	605a      	str	r2, [r3, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	4a08      	ldr	r2, [pc, #32]	; (800d92c <R3_1_RLDetectionModeDisable+0x168>)
 800d90a:	615a      	str	r2, [r3, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	4a08      	ldr	r2, [pc, #32]	; (800d930 <R3_1_RLDetectionModeDisable+0x16c>)
 800d910:	60da      	str	r2, [r3, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	4a07      	ldr	r2, [pc, #28]	; (800d934 <R3_1_RLDetectionModeDisable+0x170>)
 800d916:	609a      	str	r2, [r3, #8]

    pHandle->_Super.RLDetectionMode = false;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }
}
 800d920:	bf00      	nop
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	0800cde9 	.word	0x0800cde9
 800d92c:	0800d25f 	.word	0x0800d25f
 800d930:	0800d30b 	.word	0x0800d30b
 800d934:	0800d44d 	.word	0x0800d44d

0800d938 <R3_1_RLDetectionModeSetDuty>:
 * @param  hDuty to be applied in uint16_t
 * @retval It returns the code error 'MC_FOC_DURATION' if any, 'MC_NO_ERROR'
 *         otherwise. These error codes are defined in mc_type.h
 */
uint16_t R3_1_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d94c:	685b      	ldr	r3, [r3, #4]
 800d94e:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;


  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d956:	461a      	mov	r2, r3
 800d958:	887b      	ldrh	r3, [r7, #2]
 800d95a:	fb03 f302 	mul.w	r3, r3, r2
 800d95e:	0c1b      	lsrs	r3, r3, #16
 800d960:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	b29a      	uxth	r2, r3
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	865a      	strh	r2, [r3, #50]	; 0x32
  
  /* set sector in order to sample phase B */
  pHandle->_Super.Sector = SECTOR_4;
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	2203      	movs	r2, #3
 800d96e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  /* TIM1 Channel 1 Duty Cycle configuration.
   * In RL Detection mode only the Up-side device of Phase A are controlled*/
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d976:	4619      	mov	r1, r3
 800d978:	68f8      	ldr	r0, [r7, #12]
 800d97a:	f7fe fe11 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>


  /* Limit for update event */
  /*  If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d986:	2b00      	cmp	r3, #0
 800d988:	d002      	beq.n	800d990 <R3_1_RLDetectionModeSetDuty+0x58>
  {
    hAux = MC_FOC_DURATION;
 800d98a:	2301      	movs	r3, #1
 800d98c:	82fb      	strh	r3, [r7, #22]
 800d98e:	e001      	b.n	800d994 <R3_1_RLDetectionModeSetDuty+0x5c>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800d990:	2300      	movs	r3, #0
 800d992:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d104      	bne.n	800d9a6 <R3_1_RLDetectionModeSetDuty+0x6e>
  {
    hAux = MC_FOC_DURATION;
 800d99c:	2301      	movs	r3, #1
 800d99e:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	871a      	strh	r2, [r3, #56]	; 0x38
  }
  return hAux;
 800d9a6:	8afb      	ldrh	r3, [r7, #22]
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3718      	adds	r7, #24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_1_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	60fb      	str	r3, [r7, #12]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7fe fe21 	bl	800c610 <LL_TIM_SetTriggerOutput>

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d9de:	330e      	adds	r3, #14
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	4413      	add	r3, r2
 800d9e4:	685b      	ldr	r3, [r3, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	1acb      	subs	r3, r1, r3
 800d9ea:	617b      	str	r3, [r7, #20]

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	4a0d      	ldr	r2, [pc, #52]	; (800da24 <R3_1_RLGetPhaseCurrents+0x74>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	db08      	blt.n	800da06 <R3_1_RLGetPhaseCurrents+0x56>
  {
    if ( wAux < INT16_MAX )
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	dd05      	ble.n	800da0a <R3_1_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800d9fe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800da02:	617b      	str	r3, [r7, #20]
 800da04:	e001      	b.n	800da0a <R3_1_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800da06:	4b08      	ldr	r3, [pc, #32]	; (800da28 <R3_1_RLGetPhaseCurrents+0x78>)
 800da08:	617b      	str	r3, [r7, #20]
  }

  pStator_Currents->a = (int16_t)wAux;
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	b21a      	sxth	r2, r3
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = (int16_t)wAux;
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	b21a      	sxth	r2, r3
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	805a      	strh	r2, [r3, #2]
}
 800da1a:	bf00      	nop
 800da1c:	3718      	adds	r7, #24
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	ffff8002 	.word	0xffff8002
 800da28:	ffff8001 	.word	0xffff8001

0800da2c <R3_1_RLTurnOnLowSides>:
  *         This function is specific for RL detection phase.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1 ( TIMx, 0u );
 800da40:	2100      	movs	r1, #0
 800da42:	68b8      	ldr	r0, [r7, #8]
 800da44:	f7fe fdac 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800da48:	68b8      	ldr	r0, [r7, #8]
 800da4a:	f7fe fe14 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800da4e:	bf00      	nop
 800da50:	68b8      	ldr	r0, [r7, #8]
 800da52:	f7fe fe1e 	bl	800c692 <LL_TIM_IsActiveFlag_UPDATE>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d0f9      	beq.n	800da50 <R3_1_RLTurnOnLowSides+0x24>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800da5c:	68b8      	ldr	r0, [r7, #8]
 800da5e:	f7fe fe0a 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800da62:	68b8      	ldr	r0, [r7, #8]
 800da64:	f7fe fde7 	bl	800c636 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da6c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800da70:	2b02      	cmp	r3, #2
 800da72:	d121      	bne.n	800dab8 <R3_1_RLTurnOnLowSides+0x8c>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da78:	699a      	ldr	r2, [r3, #24]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da7e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800da82:	4619      	mov	r1, r3
 800da84:	4610      	mov	r0, r2
 800da86:	f7fe fe87 	bl	800c798 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da8e:	69da      	ldr	r2, [r3, #28]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da94:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800da98:	4619      	mov	r1, r3
 800da9a:	4610      	mov	r0, r2
 800da9c:	f7fe fe8a 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daa4:	6a1a      	ldr	r2, [r3, #32]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daaa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800daae:	4619      	mov	r1, r3
 800dab0:	4610      	mov	r0, r2
 800dab2:	f7fe fe7f 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
  }
  return;
 800dab6:	bf00      	nop
 800dab8:	bf00      	nop
}
 800daba:	3710      	adds	r7, #16
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <R3_1_RLSwitchOnPWM>:
 *         This function is specific for RL detection phase.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
static void R3_1_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	60fb      	str	r3, [r7, #12]
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	2200      	movs	r2, #0
 800dae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800dae4:	bf00      	nop
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0310 	and.w	r3, r3, #16
 800daee:	2b10      	cmp	r3, #16
 800daf0:	d0f9      	beq.n	800dae6 <R3_1_RLSwitchOnPWM+0x26>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800daf2:	bf00      	nop
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f003 0310 	and.w	r3, r3, #16
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d0f9      	beq.n	800daf4 <R3_1_RLSwitchOnPWM+0x34>
  {
  }

  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);
 800db00:	2101      	movs	r1, #1
 800db02:	6938      	ldr	r0, [r7, #16]
 800db04:	f7fe fd4c 	bl	800c5a0 <LL_TIM_OC_SetCompareCH1>

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db0e:	3b05      	subs	r3, #5
 800db10:	4619      	mov	r1, r3
 800db12:	6938      	ldr	r0, [r7, #16]
 800db14:	f7fe fd6e 	bl	800c5f4 <LL_TIM_OC_SetCompareCH4>
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */
 800db18:	6938      	ldr	r0, [r7, #16]
 800db1a:	f7fe fdac 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800db1e:	bf00      	nop
 800db20:	6938      	ldr	r0, [r7, #16]
 800db22:	f7fe fdb6 	bl	800c692 <LL_TIM_IsActiveFlag_UPDATE>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d0f9      	beq.n	800db20 <R3_1_RLSwitchOnPWM+0x60>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800db2c:	6938      	ldr	r0, [r7, #16]
 800db2e:	f7fe fda2 	bl	800c676 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db36:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
 800db3e:	6938      	ldr	r0, [r7, #16]
 800db40:	f7fe fd79 	bl	800c636 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db48:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800db4c:	2b02      	cmp	r3, #2
 800db4e:	d149      	bne.n	800dbe4 <R3_1_RLSwitchOnPWM+0x124>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	6a1a      	ldr	r2, [r3, #32]
 800db54:	f240 5355 	movw	r3, #1365	; 0x555
 800db58:	4013      	ands	r3, r2
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d021      	beq.n	800dba2 <R3_1_RLSwitchOnPWM+0xe2>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db62:	699a      	ldr	r2, [r3, #24]
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db68:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800db6c:	4619      	mov	r1, r3
 800db6e:	4610      	mov	r0, r2
 800db70:	f7fe fe12 	bl	800c798 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db78:	69da      	ldr	r2, [r3, #28]
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db7e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800db82:	4619      	mov	r1, r3
 800db84:	4610      	mov	r0, r2
 800db86:	f7fe fe07 	bl	800c798 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db8e:	6a1a      	ldr	r2, [r3, #32]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db94:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800db98:	4619      	mov	r1, r3
 800db9a:	4610      	mov	r0, r2
 800db9c:	f7fe fe0a 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
 800dba0:	e020      	b.n	800dbe4 <R3_1_RLSwitchOnPWM+0x124>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dba6:	699a      	ldr	r2, [r3, #24]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbac:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	f7fe fdfe 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbbc:	69da      	ldr	r2, [r3, #28]
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbc2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	4610      	mov	r0, r2
 800dbca:	f7fe fdf3 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbd2:	6a1a      	ldr	r2, [r3, #32]
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbd8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800dbdc:	4619      	mov	r1, r3
 800dbde:	4610      	mov	r0, r2
 800dbe0:	f7fe fde8 	bl	800c7b4 <LL_GPIO_ResetOutputPin>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2203      	movs	r2, #3
 800dbe8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  LL_ADC_INJ_StartConversion( ADCx );
 800dbec:	68f8      	ldr	r0, [r7, #12]
 800dbee:	f7fe fb01 	bl	800c1f4 <LL_ADC_INJ_StartConversion>

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800dbf2:	6938      	ldr	r0, [r7, #16]
 800dbf4:	f7fe fd90 	bl	800c718 <LL_TIM_EnableIT_UPDATE>



  return;
 800dbf8:	bf00      	nop
}
 800dbfa:	3718      	adds	r7, #24
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Init( RDivider_Handle_t * pHandle )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	330c      	adds	r3, #12
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7f6 f895 	bl	8003d3c <RCM_RegisterRegConv>
 800dc12:	4603      	mov	r3, r0
 800dc14:	461a      	mov	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* Check */
  RVBS_Clear( pHandle );
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f804 	bl	800dc2a <RVBS_Clear>
}
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800dc2a:	b480      	push	{r7}
 800dc2c:	b085      	sub	sp, #20
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	8b5b      	ldrh	r3, [r3, #26]
 800dc36:	461a      	mov	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	8b9b      	ldrh	r3, [r3, #28]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	085b      	lsrs	r3, r3, #1
 800dc40:	81bb      	strh	r3, [r7, #12]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800dc42:	2300      	movs	r3, #0
 800dc44:	81fb      	strh	r3, [r7, #14]
 800dc46:	e009      	b.n	800dc5c <RVBS_Clear+0x32>
  {
    pHandle->aBuffer[index] = aux;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a1a      	ldr	r2, [r3, #32]
 800dc4c:	89fb      	ldrh	r3, [r7, #14]
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	4413      	add	r3, r2
 800dc52:	89ba      	ldrh	r2, [r7, #12]
 800dc54:	801a      	strh	r2, [r3, #0]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800dc56:	89fb      	ldrh	r3, [r7, #14]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	81fb      	strh	r3, [r7, #14]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8b1b      	ldrh	r3, [r3, #24]
 800dc60:	89fa      	ldrh	r2, [r7, #14]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d3f0      	bcc.n	800dc48 <RVBS_Clear+0x1e>
  }
  pHandle->_Super.LatestConv = aux;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	89ba      	ldrh	r2, [r7, #12]
 800dc6a:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	89ba      	ldrh	r2, [r7, #12]
 800dc70:	80da      	strh	r2, [r3, #6]
  pHandle->index = 0;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800dc7a:	bf00      	nop
 800dc7c:	3714      	adds	r7, #20
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <RVBS_ConvertVbusFiltrered>:

static uint16_t RVBS_ConvertVbusFiltrered( RDivider_Handle_t * pHandle )
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b086      	sub	sp, #24
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
  uint16_t hAux;
  uint8_t vindex;
  uint16_t max = 0, min = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	82bb      	strh	r3, [r7, #20]
 800dc92:	2300      	movs	r3, #0
 800dc94:	827b      	strh	r3, [r7, #18]
  uint32_t tot = 0u;
 800dc96:	2300      	movs	r3, #0
 800dc98:	60fb      	str	r3, [r7, #12]

  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	75fb      	strb	r3, [r7, #23]
 800dc9e:	e027      	b.n	800dcf0 <RVBS_ConvertVbusFiltrered+0x6a>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7f6 f8fe 	bl	8003ea8 <RCM_ExecRegularConv>
 800dcac:	4603      	mov	r3, r0
 800dcae:	817b      	strh	r3, [r7, #10]

    if ( hAux != 0xFFFFu )
 800dcb0:	897b      	ldrh	r3, [r7, #10]
 800dcb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d01a      	beq.n	800dcf0 <RVBS_ConvertVbusFiltrered+0x6a>
    {
      if ( vindex == 0 )
 800dcba:	7dfb      	ldrb	r3, [r7, #23]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d104      	bne.n	800dcca <RVBS_ConvertVbusFiltrered+0x44>
      {
        min = hAux;
 800dcc0:	897b      	ldrh	r3, [r7, #10]
 800dcc2:	827b      	strh	r3, [r7, #18]
        max = hAux;
 800dcc4:	897b      	ldrh	r3, [r7, #10]
 800dcc6:	82bb      	strh	r3, [r7, #20]
 800dcc8:	e00b      	b.n	800dce2 <RVBS_ConvertVbusFiltrered+0x5c>
      }
      else
      {
        if ( hAux < min )
 800dcca:	897a      	ldrh	r2, [r7, #10]
 800dccc:	8a7b      	ldrh	r3, [r7, #18]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d201      	bcs.n	800dcd6 <RVBS_ConvertVbusFiltrered+0x50>
        {
          min = hAux;
 800dcd2:	897b      	ldrh	r3, [r7, #10]
 800dcd4:	827b      	strh	r3, [r7, #18]
        }
        if ( hAux > max )
 800dcd6:	897a      	ldrh	r2, [r7, #10]
 800dcd8:	8abb      	ldrh	r3, [r7, #20]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d901      	bls.n	800dce2 <RVBS_ConvertVbusFiltrered+0x5c>
        {
          max = hAux;
 800dcde:	897b      	ldrh	r3, [r7, #10]
 800dce0:	82bb      	strh	r3, [r7, #20]
        }
      }
      vindex++;
 800dce2:	7dfb      	ldrb	r3, [r7, #23]
 800dce4:	3301      	adds	r3, #1
 800dce6:	75fb      	strb	r3, [r7, #23]

      tot += hAux;
 800dce8:	897b      	ldrh	r3, [r7, #10]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	4413      	add	r3, r2
 800dcee:	60fb      	str	r3, [r7, #12]
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800dcf0:	7dfb      	ldrb	r3, [r7, #23]
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	8b1b      	ldrh	r3, [r3, #24]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d3d1      	bcc.n	800dca0 <RVBS_ConvertVbusFiltrered+0x1a>
    }
  }

  tot -= max;
 800dcfc:	8abb      	ldrh	r3, [r7, #20]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	60fb      	str	r3, [r7, #12]
  tot -= min;
 800dd04:	8a7b      	ldrh	r3, [r7, #18]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	60fb      	str	r3, [r7, #12]
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	8b1b      	ldrh	r3, [r3, #24]
 800dd10:	3b02      	subs	r3, #2
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd18:	b29b      	uxth	r3, r3
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <RVBS_CalcAvVbusFilt>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbusFilt( RDivider_Handle_t * pHandle )
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b084      	sub	sp, #16
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RVBS_ConvertVbusFiltrered( pHandle );
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7ff ffab 	bl	800dc86 <RVBS_ConvertVbusFiltrered>
 800dd30:	4603      	mov	r3, r0
 800dd32:	813b      	strh	r3, [r7, #8]

  if ( hAux != 0xFFFF )
 800dd34:	893b      	ldrh	r3, [r7, #8]
 800dd36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd3a:	4293      	cmp	r3, r2
 800dd3c:	d044      	beq.n	800ddc8 <RVBS_CalcAvVbusFilt+0xa6>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a1a      	ldr	r2, [r3, #32]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dd48:	005b      	lsls	r3, r3, #1
 800dd4a:	4413      	add	r3, r2
 800dd4c:	893a      	ldrh	r2, [r7, #8]
 800dd4e:	801a      	strh	r2, [r3, #0]
    wtemp = 0;
 800dd50:	2300      	movs	r3, #0
 800dd52:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800dd54:	2300      	movs	r3, #0
 800dd56:	72fb      	strb	r3, [r7, #11]
 800dd58:	e00c      	b.n	800dd74 <RVBS_CalcAvVbusFilt+0x52>
    {
      wtemp += pHandle->aBuffer[i];
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a1a      	ldr	r2, [r3, #32]
 800dd5e:	7afb      	ldrb	r3, [r7, #11]
 800dd60:	005b      	lsls	r3, r3, #1
 800dd62:	4413      	add	r3, r2
 800dd64:	881b      	ldrh	r3, [r3, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	3301      	adds	r3, #1
 800dd72:	72fb      	strb	r3, [r7, #11]
 800dd74:	7afb      	ldrb	r3, [r7, #11]
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8b1b      	ldrh	r3, [r3, #24]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d3ec      	bcc.n	800dd5a <RVBS_CalcAvVbusFilt+0x38>
    }
    wtemp /= pHandle->LowPassFilterBW;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	8b1b      	ldrh	r3, [r3, #24]
 800dd84:	461a      	mov	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd8c:	60fb      	str	r3, [r7, #12]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.LatestConv = hAux;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	893a      	ldrh	r2, [r7, #8]
 800dd9a:	809a      	strh	r2, [r3, #4]

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dda2:	461a      	mov	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	8b1b      	ldrh	r3, [r3, #24]
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	da08      	bge.n	800ddc0 <RVBS_CalcAvVbusFilt+0x9e>
    {
      pHandle->index++;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800ddbe:	e003      	b.n	800ddc8 <RVBS_CalcAvVbusFilt+0xa6>
    }
    else
    {
      pHandle->index = 0;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f80a 	bl	800dde2 <RVBS_CheckFaultState>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	811a      	strh	r2, [r3, #8]

  return ( pHandle->_Super.FaultState );
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	891b      	ldrh	r3, [r3, #8]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
 800dde2:	b480      	push	{r7}
 800dde4:	b085      	sub	sp, #20
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	88da      	ldrh	r2, [r3, #6]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	8b5b      	ldrh	r3, [r3, #26]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d902      	bls.n	800ddfc <RVBS_CheckFaultState+0x1a>
  {
    fault = MC_OVER_VOLT;
 800ddf6:	2302      	movs	r3, #2
 800ddf8:	81fb      	strh	r3, [r7, #14]
 800ddfa:	e00a      	b.n	800de12 <RVBS_CheckFaultState+0x30>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	88da      	ldrh	r2, [r3, #6]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	8b9b      	ldrh	r3, [r3, #28]
 800de04:	429a      	cmp	r2, r3
 800de06:	d202      	bcs.n	800de0e <RVBS_CheckFaultState+0x2c>
  {
    fault = MC_UNDER_VOLT;
 800de08:	2304      	movs	r3, #4
 800de0a:	81fb      	strh	r3, [r7, #14]
 800de0c:	e001      	b.n	800de12 <RVBS_CheckFaultState+0x30>
  }
  else
  {
    fault = MC_NO_ERROR;
 800de0e:	2300      	movs	r3, #0
 800de10:	81fb      	strh	r3, [r7, #14]
  }
  return fault;
 800de12:	89fb      	ldrh	r3, [r7, #14]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  pHandle->Ext = 0;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	605a      	str	r2, [r3, #4]
  pHandle->RampRemainingStep = 0u;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	611a      	str	r2, [r3, #16]
  pHandle->ScalingFactor = 1u;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	615a      	str	r2, [r3, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800de46:	bf00      	nop
 800de48:	370c      	adds	r7, #12
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr

0800de52 <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
 800de52:	b480      	push	{r7}
 800de54:	b085      	sub	sp, #20
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	60fb      	str	r3, [r7, #12]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	68db      	ldr	r3, [r3, #12]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d90a      	bls.n	800de7e <REMNG_Calc+0x2c>
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	4413      	add	r3, r2
 800de70:	60fb      	str	r3, [r7, #12]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	1e5a      	subs	r2, r3, #1
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	60da      	str	r2, [r3, #12]
 800de7c:	e00d      	b.n	800de9a <REMNG_Calc+0x48>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d109      	bne.n	800de9a <REMNG_Calc+0x48>
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	6952      	ldr	r2, [r2, #20]
 800de8e:	fb02 f303 	mul.w	r3, r2, r3
 800de92:	60fb      	str	r3, [r7, #12]
    pHandle->RampRemainingStep = 0u;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	609a      	str	r2, [r3, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	687a      	ldr	r2, [r7, #4]
 800dea6:	6952      	ldr	r2, [r2, #20]
 800dea8:	fb93 f3f2 	sdiv	r3, r3, r2
 800deac:	60bb      	str	r3, [r7, #8]
#endif

  return ret_val;
 800deae:	68bb      	ldr	r3, [r7, #8]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3714      	adds	r7, #20
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b08c      	sub	sp, #48	; 0x30
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	607a      	str	r2, [r7, #4]
  uint32_t aux;
  int32_t aux1;
  int32_t current_ref;
  bool retVal = true;
 800dec8:	2301      	movs	r3, #1
 800deca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Get current state */
#ifdef FASTDIV
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	6952      	ldr	r2, [r2, #20]
 800ded6:	fb93 f3f2 	sdiv	r3, r3, r2
 800deda:	627b      	str	r3, [r7, #36]	; 0x24
#endif

  if ( Durationms == 0u )
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d114      	bne.n	800df0c <REMNG_ExecRamp+0x50>
  {
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800dee2:	68b8      	ldr	r0, [r7, #8]
 800dee4:	f000 f887 	bl	800dff6 <getScalingFactor>
 800dee8:	4602      	mov	r2, r0
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	615a      	str	r2, [r3, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	461a      	mov	r2, r3
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	fb03 f202 	mul.w	r2, r3, r2
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	609a      	str	r2, [r3, #8]
    pHandle->RampRemainingStep = 0u;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	611a      	str	r2, [r3, #16]
 800df0a:	e059      	b.n	800dfc0 <REMNG_ExecRamp+0x104>
  }
  else
  {
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	4618      	mov	r0, r3
 800df14:	f000 f86f 	bl	800dff6 <getScalingFactor>
 800df18:	6238      	str	r0, [r7, #32]
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800df1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df1c:	f000 f86b 	bl	800dff6 <getScalingFactor>
 800df20:	61f8      	str	r0, [r7, #28]
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800df22:	68b8      	ldr	r0, [r7, #8]
 800df24:	f000 f867 	bl	800dff6 <getScalingFactor>
 800df28:	61b8      	str	r0, [r7, #24]
    uint32_t wScalingFactorMin;

    if ( wScalingFactor <  wScalingFactor2 )
 800df2a:	6a3a      	ldr	r2, [r7, #32]
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d209      	bcs.n	800df46 <REMNG_ExecRamp+0x8a>
    {
      if ( wScalingFactor < wScalingFactor3 )
 800df32:	6a3a      	ldr	r2, [r7, #32]
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	429a      	cmp	r2, r3
 800df38:	d202      	bcs.n	800df40 <REMNG_ExecRamp+0x84>
      {
        wScalingFactorMin = wScalingFactor;
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df3e:	e00b      	b.n	800df58 <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df44:	e008      	b.n	800df58 <REMNG_ExecRamp+0x9c>
      }
    }
    else
    {
      if ( wScalingFactor2 < wScalingFactor3 )
 800df46:	69fa      	ldr	r2, [r7, #28]
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d202      	bcs.n	800df54 <REMNG_ExecRamp+0x98>
      {
        wScalingFactorMin = wScalingFactor2;
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df52:	e001      	b.n	800df58 <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800df54:	69bb      	ldr	r3, [r7, #24]
 800df56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }

    pHandle->ScalingFactor = wScalingFactorMin;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df5c:	615a      	str	r2, [r3, #20]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	461a      	mov	r2, r3
 800df64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df66:	fb03 f202 	mul.w	r2, r3, r2
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	609a      	str	r2, [r3, #8]

    /* Store the TargetFinal to be applied in the last step */
    pHandle->TargetFinal = TargetFinal;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	605a      	str	r2, [r3, #4]

    /* Compute the (wRampRemainingStep) number of steps remaining to complete
    the ramp. */
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	fb02 f303 	mul.w	r3, r2, r3
 800df7e:	617b      	str	r3, [r7, #20]
    aux /= 1000u;
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	4a12      	ldr	r2, [pc, #72]	; (800dfcc <REMNG_ExecRamp+0x110>)
 800df84:	fba2 2303 	umull	r2, r3, r2, r3
 800df88:	099b      	lsrs	r3, r3, #6
 800df8a:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = aux;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	60da      	str	r2, [r3, #12]
    pHandle->RampRemainingStep++;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	60da      	str	r2, [r3, #12]

    /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
    the reference value at each CalcTorqueReference. */
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	6952      	ldr	r2, [r2, #20]
 800dfa6:	fb02 f303 	mul.w	r3, r2, r3
 800dfaa:	613b      	str	r3, [r7, #16]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	68db      	ldr	r3, [r3, #12]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dfb8:	613b      	str	r3, [r7, #16]
    pHandle->IncDecAmount = aux1;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	611a      	str	r2, [r3, #16]
  }

  return retVal;
 800dfc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3730      	adds	r7, #48	; 0x30
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	10624dd3 	.word	0x10624dd3

0800dfd0 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	73fb      	strb	r3, [r7, #15]
  if ( pHandle->RampRemainingStep == 0u )
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	68db      	ldr	r3, [r3, #12]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <REMNG_RampCompleted+0x18>
  {
    retVal = true;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	73fb      	strb	r3, [r7, #15]
  }
  return retVal;
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr

0800dff6 <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 800dff6:	b480      	push	{r7}
 800dff8:	b087      	sub	sp, #28
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	da05      	bge.n	800e010 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	425b      	negs	r3, r3
 800e008:	60fb      	str	r3, [r7, #12]
    TargetAbs = ( uint32_t )( aux );
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	613b      	str	r3, [r7, #16]
 800e00e:	e001      	b.n	800e014 <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = ( uint32_t )( Target );
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	613b      	str	r3, [r7, #16]
  }
  for ( i = 1u; i < 32u; i++ )
 800e014:	2301      	movs	r3, #1
 800e016:	75fb      	strb	r3, [r7, #23]
 800e018:	e00c      	b.n	800e034 <getScalingFactor+0x3e>
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800e01a:	7dfb      	ldrb	r3, [r7, #23]
 800e01c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e020:	fa22 f303 	lsr.w	r3, r2, r3
 800e024:	60bb      	str	r3, [r7, #8]
    if ( TargetAbs >= limit )
 800e026:	693a      	ldr	r2, [r7, #16]
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d206      	bcs.n	800e03c <getScalingFactor+0x46>
  for ( i = 1u; i < 32u; i++ )
 800e02e:	7dfb      	ldrb	r3, [r7, #23]
 800e030:	3301      	adds	r3, #1
 800e032:	75fb      	strb	r3, [r7, #23]
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	2b1f      	cmp	r3, #31
 800e038:	d9ef      	bls.n	800e01a <getScalingFactor+0x24>
 800e03a:	e000      	b.n	800e03e <getScalingFactor+0x48>
    {
      break;
 800e03c:	bf00      	nop
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 800e03e:	7dfb      	ldrb	r3, [r7, #23]
 800e040:	3b01      	subs	r3, #1
 800e042:	2201      	movs	r2, #1
 800e044:	fa02 f303 	lsl.w	r3, r2, r3
}
 800e048:	4618      	mov	r0, r3
 800e04a:	371c      	adds	r7, #28
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr

0800e054 <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360ï¿½/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
 800e054:	b480      	push	{r7}
 800e056:	b083      	sub	sp, #12
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  return ( pHandle->hElAngle );
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800e062:	4618      	mov	r0, r3
 800e064:	370c      	adds	r7, #12
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
 800e06e:	b480      	push	{r7}
 800e070:	b083      	sub	sp, #12
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrMecSpeedUnit );
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  return ( pHandle->InstantaneousElSpeedDpp );
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 800e096:	4618      	mov	r0, r3
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	b087      	sub	sp, #28
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	75fb      	strb	r3, [r7, #23]
  uint8_t bSpeedErrorNumber;
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	78db      	ldrb	r3, [r3, #3]
 800e0b4:	73fb      	strb	r3, [r7, #15]

  bool SpeedError = false;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	757b      	strb	r3, [r7, #21]
  uint16_t hAbsMecSpeedUnit, hAbsMecAccelUnitP;
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	75bb      	strb	r3, [r7, #22]

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	da09      	bge.n	800e0de <SPD_IsMecSpeedReliable+0x3c>
  {
    hAux = -( *pMecSpeedUnit );
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	425b      	negs	r3, r3
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	81bb      	strh	r3, [r7, #12]
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 800e0d8:	89bb      	ldrh	r3, [r7, #12]
 800e0da:	827b      	strh	r3, [r7, #18]
 800e0dc:	e003      	b.n	800e0e6 <SPD_IsMecSpeedReliable+0x44>
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0e4:	827b      	strh	r3, [r7, #18]
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	8a9b      	ldrh	r3, [r3, #20]
 800e0ea:	8a7a      	ldrh	r2, [r7, #18]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d901      	bls.n	800e0f4 <SPD_IsMecSpeedReliable+0x52>
  {
    SpeedError = true;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	757b      	strb	r3, [r7, #21]
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	8adb      	ldrh	r3, [r3, #22]
 800e0f8:	8a7a      	ldrh	r2, [r7, #18]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d201      	bcs.n	800e102 <SPD_IsMecSpeedReliable+0x60>
  {
    SpeedError = true;
 800e0fe:	2301      	movs	r3, #1
 800e100:	757b      	strb	r3, [r7, #21]
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	da09      	bge.n	800e120 <SPD_IsMecSpeedReliable+0x7e>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e112:	b29b      	uxth	r3, r3
 800e114:	425b      	negs	r3, r3
 800e116:	b29b      	uxth	r3, r3
 800e118:	81bb      	strh	r3, [r7, #12]
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 800e11a:	89bb      	ldrh	r3, [r7, #12]
 800e11c:	823b      	strh	r3, [r7, #16]
 800e11e:	e003      	b.n	800e128 <SPD_IsMecSpeedReliable+0x86>
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e126:	823b      	strh	r3, [r7, #16]
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	8b1b      	ldrh	r3, [r3, #24]
 800e12c:	8a3a      	ldrh	r2, [r7, #16]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d901      	bls.n	800e136 <SPD_IsMecSpeedReliable+0x94>
  {
    SpeedError = true;
 800e132:	2301      	movs	r3, #1
 800e134:	757b      	strb	r3, [r7, #21]
  }

  if ( SpeedError == true )
 800e136:	7d7b      	ldrb	r3, [r7, #21]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d007      	beq.n	800e14c <SPD_IsMecSpeedReliable+0xaa>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800e13c:	7dba      	ldrb	r2, [r7, #22]
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
 800e140:	429a      	cmp	r2, r3
 800e142:	d209      	bcs.n	800e158 <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber++;
 800e144:	7dbb      	ldrb	r3, [r7, #22]
 800e146:	3301      	adds	r3, #1
 800e148:	75bb      	strb	r3, [r7, #22]
 800e14a:	e005      	b.n	800e158 <SPD_IsMecSpeedReliable+0xb6>
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800e14c:	7dba      	ldrb	r2, [r7, #22]
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	429a      	cmp	r2, r3
 800e152:	d201      	bcs.n	800e158 <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber = 0u;
 800e154:	2300      	movs	r3, #0
 800e156:	75bb      	strb	r3, [r7, #22]
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800e158:	7dba      	ldrb	r2, [r7, #22]
 800e15a:	7bfb      	ldrb	r3, [r7, #15]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d101      	bne.n	800e164 <SPD_IsMecSpeedReliable+0xc2>
  {
    SpeedSensorReliability = false;
 800e160:	2300      	movs	r3, #0
 800e162:	75fb      	strb	r3, [r7, #23]
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	7dba      	ldrb	r2, [r7, #22]
 800e168:	701a      	strb	r2, [r3, #0]

  return ( SpeedSensorReliability );
 800e16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	371c      	adds	r7, #28
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e186:	60fb      	str	r3, [r7, #12]
  wAux *= INT16_MAX;
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	4613      	mov	r3, r2
 800e18c:	03db      	lsls	r3, r3, #15
 800e18e:	1a9b      	subs	r3, r3, r2
 800e190:	60fb      	str	r3, [r7, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	8a9b      	ldrh	r3, [r3, #20]
 800e196:	b21b      	sxth	r3, r3
 800e198:	461a      	mov	r2, r3
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]
  return ( int16_t )wAux;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	b21b      	sxth	r3, r3
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3714      	adds	r7, #20
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr

0800e1b2 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800e1b2:	b480      	push	{r7}
 800e1b4:	b085      	sub	sp, #20
 800e1b6:	af00      	add	r7, sp, #0
 800e1b8:	60f8      	str	r0, [r7, #12]
 800e1ba:	60b9      	str	r1, [r7, #8]
 800e1bc:	607a      	str	r2, [r7, #4]

  pHandle->PISpeed = pPI;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	68ba      	ldr	r2, [r7, #8]
 800e1c2:	611a      	str	r2, [r3, #16]
  pHandle->SPD = SPD_Handle;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	615a      	str	r2, [r3, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	701a      	strb	r2, [r3, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800e1da:	041a      	lsls	r2, r3, #16
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	605a      	str	r2, [r3, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e1e6:	041a      	lsls	r2, r3, #16
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	805a      	strh	r2, [r3, #2]
  pHandle->RampRemainingStep = 0u;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	619a      	str	r2, [r3, #24]
}
 800e1fe:	bf00      	nop
 800e200:	3714      	adds	r7, #20
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800e20a:	b480      	push	{r7}
 800e20c:	b083      	sub	sp, #12
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
 800e212:	6039      	str	r1, [r7, #0]
  pHandle->SPD = SPD_Handle;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	683a      	ldr	r2, [r7, #0]
 800e218:	615a      	str	r2, [r3, #20]
}
 800e21a:	bf00      	nop
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr

0800e226 <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e226:	b480      	push	{r7}
 800e228:	b083      	sub	sp, #12
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]
  return ( pHandle->SPD );
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	695b      	ldr	r3, [r3, #20]
}
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b082      	sub	sp, #8
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
  if ( pHandle->Mode == STC_SPEED_MODE )
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d105      	bne.n	800e25a <STC_Clear+0x1c>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	2100      	movs	r1, #0
 800e254:	4618      	mov	r0, r3
 800e256:	f7fd fa5c 	bl	800b712 <PID_SetIntegralTerm>
  }
}
 800e25a:	bf00      	nop
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e262:	b480      	push	{r7}
 800e264:	b083      	sub	sp, #12
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	da02      	bge.n	800e278 <STC_GetMecSpeedRefUnit+0x16>
 800e272:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e276:	33ff      	adds	r3, #255	; 0xff
 800e278:	141b      	asrs	r3, r3, #16
 800e27a:	b21b      	sxth	r3, r3
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <STC_GetTorqueRef>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	da02      	bge.n	800e29e <STC_GetTorqueRef+0x16>
 800e298:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e29c:	33ff      	adds	r3, #255	; 0xff
 800e29e:	141b      	asrs	r3, r3, #16
 800e2a0:	b21b      	sxth	r3, r3
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	370c      	adds	r7, #12
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <STC_SetControlMode>:
  *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
 800e2ae:	b480      	push	{r7}
 800e2b0:	b083      	sub	sp, #12
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	70fb      	strb	r3, [r7, #3]
  pHandle->Mode = bMode;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	78fa      	ldrb	r2, [r7, #3]
 800e2be:	701a      	strb	r2, [r3, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	60da      	str	r2, [r3, #12]
}
 800e2c6:	bf00      	nop
 800e2c8:	370c      	adds	r7, #12
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr
	...

0800e2d4 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	817b      	strh	r3, [r7, #10]
  bool AllowedRange = true;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	77fb      	strb	r3, [r7, #31]
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d116      	bne.n	800e31c <STC_ExecRamp+0x48>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800e2ee:	68f8      	ldr	r0, [r7, #12]
 800e2f0:	f7ff ffca 	bl	800e288 <STC_GetTorqueRef>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800e2f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e300:	4293      	cmp	r3, r2
 800e302:	dd01      	ble.n	800e308 <STC_ExecRamp+0x34>
    {
      AllowedRange = false;
 800e304:	2300      	movs	r3, #0
 800e306:	77fb      	strb	r3, [r7, #31]
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800e30e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e312:	429a      	cmp	r2, r3
 800e314:	da2d      	bge.n	800e372 <STC_ExecRamp+0x9e>
    {
      AllowedRange = false;
 800e316:	2300      	movs	r3, #0
 800e318:	77fb      	strb	r3, [r7, #31]
 800e31a:	e02a      	b.n	800e372 <STC_ExecRamp+0x9e>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	da02      	bge.n	800e32a <STC_ExecRamp+0x56>
 800e324:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e328:	33ff      	adds	r3, #255	; 0xff
 800e32a:	141b      	asrs	r3, r3, #16
 800e32c:	83bb      	strh	r3, [r7, #28]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800e32e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	8bd2      	ldrh	r2, [r2, #30]
 800e336:	4293      	cmp	r3, r2
 800e338:	dd02      	ble.n	800e340 <STC_ExecRamp+0x6c>
    {
      AllowedRange = false;
 800e33a:	2300      	movs	r3, #0
 800e33c:	77fb      	strb	r3, [r7, #31]
 800e33e:	e018      	b.n	800e372 <STC_ExecRamp+0x9e>
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800e346:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	da02      	bge.n	800e354 <STC_ExecRamp+0x80>
    {
      AllowedRange = false;
 800e34e:	2300      	movs	r3, #0
 800e350:	77fb      	strb	r3, [r7, #31]
 800e352:	e00e      	b.n	800e372 <STC_ExecRamp+0x9e>
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800e354:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	8c12      	ldrh	r2, [r2, #32]
 800e35c:	4293      	cmp	r3, r2
 800e35e:	da08      	bge.n	800e372 <STC_ExecRamp+0x9e>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800e366:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	dd01      	ble.n	800e372 <STC_ExecRamp+0x9e>
      {
        AllowedRange = false;
 800e36e:	2300      	movs	r3, #0
 800e370:	77fb      	strb	r3, [r7, #31]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 800e372:	7ffb      	ldrb	r3, [r7, #31]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d041      	beq.n	800e3fc <STC_ExecRamp+0x128>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d115      	bne.n	800e3aa <STC_ExecRamp+0xd6>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d105      	bne.n	800e392 <STC_ExecRamp+0xbe>
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800e386:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e38a:	041a      	lsls	r2, r3, #16
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	605a      	str	r2, [r3, #4]
 800e390:	e004      	b.n	800e39c <STC_ExecRamp+0xc8>
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800e392:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e396:	041a      	lsls	r2, r3, #16
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	609a      	str	r2, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	619a      	str	r2, [r3, #24]
 800e3a8:	e028      	b.n	800e3fc <STC_ExecRamp+0x128>
    }
    else
    {
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	897a      	ldrh	r2, [r7, #10]
 800e3ae:	805a      	strh	r2, [r3, #2]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	8b9b      	ldrh	r3, [r3, #28]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	fb02 f303 	mul.w	r3, r2, r3
 800e3bc:	61bb      	str	r3, [r7, #24]
      wAux /= 1000u;
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	4a11      	ldr	r2, [pc, #68]	; (800e408 <STC_ExecRamp+0x134>)
 800e3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3c6:	099b      	lsrs	r3, r3, #6
 800e3c8:	61bb      	str	r3, [r7, #24]
      pHandle->RampRemainingStep = wAux;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	69ba      	ldr	r2, [r7, #24]
 800e3ce:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800e3da:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e3de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	041b      	lsls	r3, r3, #16
 800e3e6:	617b      	str	r3, [r7, #20]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3f4:	617b      	str	r3, [r7, #20]
      pHandle->IncDecAmount = wAux1;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	619a      	str	r2, [r3, #24]
    }
  }

  return AllowedRange;
 800e3fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3720      	adds	r7, #32
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	10624dd3 	.word	0x10624dd3

0800e40c <STC_StopRamp>:
  *         rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]

  pHandle->RampRemainingStep = 0u;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	619a      	str	r2, [r3, #24]
}
 800e420:	bf00      	nop
 800e422:	370c      	adds	r7, #12
 800e424:	46bd      	mov	sp, r7
 800e426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42a:	4770      	bx	lr

0800e42c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  int32_t wCurrentReference;
  int16_t hTorqueReference = 0;
 800e434:	2300      	movs	r3, #0
 800e436:	827b      	strh	r3, [r7, #18]
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d103      	bne.n	800e448 <STC_CalcTorqueReference+0x1c>
  {
    wCurrentReference = pHandle->TorqueRef;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	617b      	str	r3, [r7, #20]
 800e446:	e002      	b.n	800e44e <STC_CalcTorqueReference+0x22>
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	617b      	str	r3, [r7, #20]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	2b01      	cmp	r3, #1
 800e454:	d90a      	bls.n	800e46c <STC_CalcTorqueReference+0x40>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	4413      	add	r3, r2
 800e45e:	617b      	str	r3, [r7, #20]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	1e5a      	subs	r2, r3, #1
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	60da      	str	r2, [r3, #12]
 800e46a:	e00b      	b.n	800e484 <STC_CalcTorqueReference+0x58>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d107      	bne.n	800e484 <STC_CalcTorqueReference+0x58>
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e47a:	041b      	lsls	r3, r3, #16
 800e47c:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = 0u;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d126      	bne.n	800e4da <STC_CalcTorqueReference+0xae>
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	da02      	bge.n	800e498 <STC_CalcTorqueReference+0x6c>
 800e492:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e496:	33ff      	adds	r3, #255	; 0xff
 800e498:	141b      	asrs	r3, r3, #16
 800e49a:	823b      	strh	r3, [r7, #16]
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7ff fde4 	bl	800e06e <SPD_GetAvrgMecSpeedUnit>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	81fb      	strh	r3, [r7, #14]
    hError = hTargetSpeed - hMeasuredSpeed;
 800e4aa:	8a3a      	ldrh	r2, [r7, #16]
 800e4ac:	89fb      	ldrh	r3, [r7, #14]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	81bb      	strh	r3, [r7, #12]
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	691b      	ldr	r3, [r3, #16]
 800e4b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e4bc:	4611      	mov	r1, r2
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fd f96a 	bl	800b798 <PI_Controller>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	827b      	strh	r3, [r7, #18]

    pHandle->SpeedRefUnitExt = wCurrentReference;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	697a      	ldr	r2, [r7, #20]
 800e4cc:	605a      	str	r2, [r3, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800e4ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e4d2:	041a      	lsls	r2, r3, #16
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	609a      	str	r2, [r3, #8]
 800e4d8:	e00a      	b.n	800e4f0 <STC_CalcTorqueReference+0xc4>
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	609a      	str	r2, [r3, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	da02      	bge.n	800e4ec <STC_CalcTorqueReference+0xc0>
 800e4e6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e4ea:	33ff      	adds	r3, #255	; 0xff
 800e4ec:	141b      	asrs	r3, r3, #16
 800e4ee:	827b      	strh	r3, [r7, #18]
  }

  return hTorqueReference;
 800e4f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3718      	adds	r7, #24
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <STC_GetMecSpeedRefUnitDefault>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  return pHandle->MecSpeedRefUnitDefault;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <STC_GetMaxAppPositiveMecSpeedUnit>:
/**
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e516:	b480      	push	{r7}
 800e518:	b083      	sub	sp, #12
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	8bdb      	ldrh	r3, [r3, #30]
}
 800e522:	4618      	mov	r0, r3
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <STC_GetMinAppNegativeMecSpeedUnit>:
/**
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e52e:	b480      	push	{r7}
 800e530:	b083      	sub	sp, #12
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
  return pHandle->MinAppNegativeMecSpeedUnit;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <STC_GetDefaultIqdref>:
  * @brief It returns the default values of Iqdref.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e548:	b480      	push	{r7}
 800e54a:	b085      	sub	sp, #20
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e556:	813b      	strh	r3, [r7, #8]
  IqdRefDefault.d = pHandle->IdrefDefault;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e55e:	817b      	strh	r3, [r7, #10]
  return IqdRefDefault;
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	60fb      	str	r3, [r7, #12]
 800e564:	2300      	movs	r3, #0
 800e566:	89ba      	ldrh	r2, [r7, #12]
 800e568:	f362 030f 	bfi	r3, r2, #0, #16
 800e56c:	89fa      	ldrh	r2, [r7, #14]
 800e56e:	f362 431f 	bfi	r3, r2, #16, #16
}
 800e572:	4618      	mov	r0, r3
 800e574:	3714      	adds	r7, #20
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	695b      	ldr	r3, [r3, #20]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7ff fd6f 	bl	800e06e <SPD_GetAvrgMecSpeedUnit>
 800e590:	4603      	mov	r3, r0
 800e592:	041a      	lsls	r2, r3, #16
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	605a      	str	r2, [r3, #4]
}
 800e598:	bf00      	nop
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <STM_Init>:
  *         once right after object creation.
  * @param pHandle pointer on the component instance to initialize.
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]

  pHandle->bState = IDLE;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	701a      	strb	r2, [r3, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	809a      	strh	r2, [r3, #4]
}
 800e5ba:	bf00      	nop
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr
	...

0800e5c8 <STM_NextState>:
  * @param bState New requested state
  * @retval bool It returns true if the state has been really set equal to
  *         bState, false if the requested state can't be reached
  */
__weak bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	70fb      	strb	r3, [r7, #3]
  bool bChangeState = false;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	73fb      	strb	r3, [r7, #15]
  State_t bCurrentState = pHandle->bState;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	737b      	strb	r3, [r7, #13]
  State_t bNewState = bCurrentState;
 800e5de:	7b7b      	ldrb	r3, [r7, #13]
 800e5e0:	73bb      	strb	r3, [r7, #14]

  switch ( bCurrentState )
 800e5e2:	7b7b      	ldrb	r3, [r7, #13]
 800e5e4:	2b14      	cmp	r3, #20
 800e5e6:	f200 8110 	bhi.w	800e80a <STM_NextState+0x242>
 800e5ea:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <STM_NextState+0x28>)
 800e5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f0:	0800e657 	.word	0x0800e657
 800e5f4:	0800e675 	.word	0x0800e675
 800e5f8:	0800e6db 	.word	0x0800e6db
 800e5fc:	0800e6ed 	.word	0x0800e6ed
 800e600:	0800e777 	.word	0x0800e777
 800e604:	0800e7af 	.word	0x0800e7af
 800e608:	0800e7c5 	.word	0x0800e7c5
 800e60c:	0800e7d5 	.word	0x0800e7d5
 800e610:	0800e7e5 	.word	0x0800e7e5
 800e614:	0800e7f5 	.word	0x0800e7f5
 800e618:	0800e80b 	.word	0x0800e80b
 800e61c:	0800e80b 	.word	0x0800e80b
 800e620:	0800e645 	.word	0x0800e645
 800e624:	0800e693 	.word	0x0800e693
 800e628:	0800e6ab 	.word	0x0800e6ab
 800e62c:	0800e6c3 	.word	0x0800e6c3
 800e630:	0800e717 	.word	0x0800e717
 800e634:	0800e72f 	.word	0x0800e72f
 800e638:	0800e761 	.word	0x0800e761
 800e63c:	0800e793 	.word	0x0800e793
 800e640:	0800e74b 	.word	0x0800e74b
  {
    case ICLWAIT:
      if ( bState == IDLE )
 800e644:	78fb      	ldrb	r3, [r7, #3]
 800e646:	2b00      	cmp	r3, #0
 800e648:	f040 80e1 	bne.w	800e80e <STM_NextState+0x246>
      {
        bNewState = bState;
 800e64c:	78fb      	ldrb	r3, [r7, #3]
 800e64e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e650:	2301      	movs	r3, #1
 800e652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e654:	e0db      	b.n	800e80e <STM_NextState+0x246>
    case IDLE:
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800e656:	78fb      	ldrb	r3, [r7, #3]
 800e658:	2b03      	cmp	r3, #3
 800e65a:	d006      	beq.n	800e66a <STM_NextState+0xa2>
 800e65c:	78fb      	ldrb	r3, [r7, #3]
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d003      	beq.n	800e66a <STM_NextState+0xa2>
           || ( bState == ICLWAIT ) )
 800e662:	78fb      	ldrb	r3, [r7, #3]
 800e664:	2b0c      	cmp	r3, #12
 800e666:	f040 80d4 	bne.w	800e812 <STM_NextState+0x24a>
      {
        bNewState = bState;
 800e66a:	78fb      	ldrb	r3, [r7, #3]
 800e66c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e66e:	2301      	movs	r3, #1
 800e670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e672:	e0ce      	b.n	800e812 <STM_NextState+0x24a>

    case IDLE_ALIGNMENT:
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800e674:	78fb      	ldrb	r3, [r7, #3]
 800e676:	2b07      	cmp	r3, #7
 800e678:	d006      	beq.n	800e688 <STM_NextState+0xc0>
 800e67a:	78fb      	ldrb	r3, [r7, #3]
 800e67c:	2b0d      	cmp	r3, #13
 800e67e:	d003      	beq.n	800e688 <STM_NextState+0xc0>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800e680:	78fb      	ldrb	r3, [r7, #3]
 800e682:	2b0e      	cmp	r3, #14
 800e684:	f040 80c7 	bne.w	800e816 <STM_NextState+0x24e>
      {
        bNewState = bState;
 800e688:	78fb      	ldrb	r3, [r7, #3]
 800e68a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e68c:	2301      	movs	r3, #1
 800e68e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e690:	e0c1      	b.n	800e816 <STM_NextState+0x24e>

    case ALIGN_CHARGE_BOOT_CAP:
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800e692:	78fb      	ldrb	r3, [r7, #3]
 800e694:	2b0e      	cmp	r3, #14
 800e696:	d003      	beq.n	800e6a0 <STM_NextState+0xd8>
 800e698:	78fb      	ldrb	r3, [r7, #3]
 800e69a:	2b07      	cmp	r3, #7
 800e69c:	f040 80bd 	bne.w	800e81a <STM_NextState+0x252>
      {
        bNewState = bState;
 800e6a0:	78fb      	ldrb	r3, [r7, #3]
 800e6a2:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6a8:	e0b7      	b.n	800e81a <STM_NextState+0x252>

    case ALIGN_OFFSET_CALIB:
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800e6aa:	78fb      	ldrb	r3, [r7, #3]
 800e6ac:	2b0f      	cmp	r3, #15
 800e6ae:	d003      	beq.n	800e6b8 <STM_NextState+0xf0>
 800e6b0:	78fb      	ldrb	r3, [r7, #3]
 800e6b2:	2b07      	cmp	r3, #7
 800e6b4:	f040 80b3 	bne.w	800e81e <STM_NextState+0x256>
      {
        bNewState = bState;
 800e6b8:	78fb      	ldrb	r3, [r7, #3]
 800e6ba:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6c0:	e0ad      	b.n	800e81e <STM_NextState+0x256>

    case ALIGN_CLEAR:
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800e6c2:	78fb      	ldrb	r3, [r7, #3]
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d003      	beq.n	800e6d0 <STM_NextState+0x108>
 800e6c8:	78fb      	ldrb	r3, [r7, #3]
 800e6ca:	2b07      	cmp	r3, #7
 800e6cc:	f040 80a9 	bne.w	800e822 <STM_NextState+0x25a>
      {
        bNewState = bState;
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6d8:	e0a3      	b.n	800e822 <STM_NextState+0x25a>

    case ALIGNMENT:
      if ( bState == ANY_STOP )
 800e6da:	78fb      	ldrb	r3, [r7, #3]
 800e6dc:	2b07      	cmp	r3, #7
 800e6de:	f040 80a2 	bne.w	800e826 <STM_NextState+0x25e>
      {
        bNewState = bState;
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6ea:	e09c      	b.n	800e826 <STM_NextState+0x25e>

    case IDLE_START:
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800e6ec:	78fb      	ldrb	r3, [r7, #3]
 800e6ee:	2b07      	cmp	r3, #7
 800e6f0:	d00c      	beq.n	800e70c <STM_NextState+0x144>
 800e6f2:	78fb      	ldrb	r3, [r7, #3]
 800e6f4:	2b10      	cmp	r3, #16
 800e6f6:	d009      	beq.n	800e70c <STM_NextState+0x144>
 800e6f8:	78fb      	ldrb	r3, [r7, #3]
 800e6fa:	2b04      	cmp	r3, #4
 800e6fc:	d006      	beq.n	800e70c <STM_NextState+0x144>
           ( bState == START ) ||
 800e6fe:	78fb      	ldrb	r3, [r7, #3]
 800e700:	2b11      	cmp	r3, #17
 800e702:	d003      	beq.n	800e70c <STM_NextState+0x144>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800e704:	78fb      	ldrb	r3, [r7, #3]
 800e706:	2b01      	cmp	r3, #1
 800e708:	f040 808f 	bne.w	800e82a <STM_NextState+0x262>
      {
        bNewState = bState;
 800e70c:	78fb      	ldrb	r3, [r7, #3]
 800e70e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e710:	2301      	movs	r3, #1
 800e712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e714:	e089      	b.n	800e82a <STM_NextState+0x262>

    case CHARGE_BOOT_CAP:
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800e716:	78fb      	ldrb	r3, [r7, #3]
 800e718:	2b11      	cmp	r3, #17
 800e71a:	d003      	beq.n	800e724 <STM_NextState+0x15c>
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	2b07      	cmp	r3, #7
 800e720:	f040 8085 	bne.w	800e82e <STM_NextState+0x266>
      {
        bNewState = bState;
 800e724:	78fb      	ldrb	r3, [r7, #3]
 800e726:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e728:	2301      	movs	r3, #1
 800e72a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e72c:	e07f      	b.n	800e82e <STM_NextState+0x266>

    case OFFSET_CALIB:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800e72e:	78fb      	ldrb	r3, [r7, #3]
 800e730:	2b12      	cmp	r3, #18
 800e732:	d005      	beq.n	800e740 <STM_NextState+0x178>
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	2b07      	cmp	r3, #7
 800e738:	d002      	beq.n	800e740 <STM_NextState+0x178>
 800e73a:	78fb      	ldrb	r3, [r7, #3]
 800e73c:	2b14      	cmp	r3, #20
 800e73e:	d178      	bne.n	800e832 <STM_NextState+0x26a>
      {
        bNewState = bState;
 800e740:	78fb      	ldrb	r3, [r7, #3]
 800e742:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e744:	2301      	movs	r3, #1
 800e746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e748:	e073      	b.n	800e832 <STM_NextState+0x26a>

     case WAIT_STOP_MOTOR:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800e74a:	78fb      	ldrb	r3, [r7, #3]
 800e74c:	2b12      	cmp	r3, #18
 800e74e:	d002      	beq.n	800e756 <STM_NextState+0x18e>
 800e750:	78fb      	ldrb	r3, [r7, #3]
 800e752:	2b07      	cmp	r3, #7
 800e754:	d16f      	bne.n	800e836 <STM_NextState+0x26e>
      {
        bNewState = bState;
 800e756:	78fb      	ldrb	r3, [r7, #3]
 800e758:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e75a:	2301      	movs	r3, #1
 800e75c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e75e:	e06a      	b.n	800e836 <STM_NextState+0x26e>

    case CLEAR:
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800e760:	78fb      	ldrb	r3, [r7, #3]
 800e762:	2b04      	cmp	r3, #4
 800e764:	d002      	beq.n	800e76c <STM_NextState+0x1a4>
 800e766:	78fb      	ldrb	r3, [r7, #3]
 800e768:	2b07      	cmp	r3, #7
 800e76a:	d166      	bne.n	800e83a <STM_NextState+0x272>
      {
        bNewState = bState;
 800e76c:	78fb      	ldrb	r3, [r7, #3]
 800e76e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e770:	2301      	movs	r3, #1
 800e772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e774:	e061      	b.n	800e83a <STM_NextState+0x272>

    case START:
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800e776:	78fb      	ldrb	r3, [r7, #3]
 800e778:	2b13      	cmp	r3, #19
 800e77a:	d005      	beq.n	800e788 <STM_NextState+0x1c0>
 800e77c:	78fb      	ldrb	r3, [r7, #3]
 800e77e:	2b07      	cmp	r3, #7
 800e780:	d002      	beq.n	800e788 <STM_NextState+0x1c0>
 800e782:	78fb      	ldrb	r3, [r7, #3]
 800e784:	2b05      	cmp	r3, #5
 800e786:	d15a      	bne.n	800e83e <STM_NextState+0x276>
      {
        bNewState = bState;
 800e788:	78fb      	ldrb	r3, [r7, #3]
 800e78a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e78c:	2301      	movs	r3, #1
 800e78e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e790:	e055      	b.n	800e83e <STM_NextState+0x276>

    case SWITCH_OVER:
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800e792:	78fb      	ldrb	r3, [r7, #3]
 800e794:	2b04      	cmp	r3, #4
 800e796:	d005      	beq.n	800e7a4 <STM_NextState+0x1dc>
 800e798:	78fb      	ldrb	r3, [r7, #3]
 800e79a:	2b07      	cmp	r3, #7
 800e79c:	d002      	beq.n	800e7a4 <STM_NextState+0x1dc>
 800e79e:	78fb      	ldrb	r3, [r7, #3]
 800e7a0:	2b05      	cmp	r3, #5
 800e7a2:	d14e      	bne.n	800e842 <STM_NextState+0x27a>
      {
        bNewState = bState;
 800e7a4:	78fb      	ldrb	r3, [r7, #3]
 800e7a6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7ac:	e049      	b.n	800e842 <STM_NextState+0x27a>

    case START_RUN:
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800e7ae:	78fb      	ldrb	r3, [r7, #3]
 800e7b0:	2b06      	cmp	r3, #6
 800e7b2:	d002      	beq.n	800e7ba <STM_NextState+0x1f2>
 800e7b4:	78fb      	ldrb	r3, [r7, #3]
 800e7b6:	2b07      	cmp	r3, #7
 800e7b8:	d145      	bne.n	800e846 <STM_NextState+0x27e>
      {
        bNewState = bState;
 800e7ba:	78fb      	ldrb	r3, [r7, #3]
 800e7bc:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7c2:	e040      	b.n	800e846 <STM_NextState+0x27e>

    case RUN:
      if ( bState == ANY_STOP )
 800e7c4:	78fb      	ldrb	r3, [r7, #3]
 800e7c6:	2b07      	cmp	r3, #7
 800e7c8:	d13f      	bne.n	800e84a <STM_NextState+0x282>
      {
        bNewState = bState;
 800e7ca:	78fb      	ldrb	r3, [r7, #3]
 800e7cc:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7d2:	e03a      	b.n	800e84a <STM_NextState+0x282>

    case ANY_STOP:
      if ( bState == STOP )
 800e7d4:	78fb      	ldrb	r3, [r7, #3]
 800e7d6:	2b08      	cmp	r3, #8
 800e7d8:	d139      	bne.n	800e84e <STM_NextState+0x286>
      {
        bNewState = bState;
 800e7da:	78fb      	ldrb	r3, [r7, #3]
 800e7dc:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7e2:	e034      	b.n	800e84e <STM_NextState+0x286>

    case STOP:
      if ( bState == STOP_IDLE )
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	2b09      	cmp	r3, #9
 800e7e8:	d133      	bne.n	800e852 <STM_NextState+0x28a>
      {
        bNewState = bState;
 800e7ea:	78fb      	ldrb	r3, [r7, #3]
 800e7ec:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7f2:	e02e      	b.n	800e852 <STM_NextState+0x28a>

    case STOP_IDLE:
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800e7f4:	78fb      	ldrb	r3, [r7, #3]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d002      	beq.n	800e800 <STM_NextState+0x238>
 800e7fa:	78fb      	ldrb	r3, [r7, #3]
 800e7fc:	2b0c      	cmp	r3, #12
 800e7fe:	d12a      	bne.n	800e856 <STM_NextState+0x28e>
      {
        bNewState = bState;
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e804:	2301      	movs	r3, #1
 800e806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e808:	e025      	b.n	800e856 <STM_NextState+0x28e>
    default:
      break;
 800e80a:	bf00      	nop
 800e80c:	e024      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e80e:	bf00      	nop
 800e810:	e022      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e812:	bf00      	nop
 800e814:	e020      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e816:	bf00      	nop
 800e818:	e01e      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e81a:	bf00      	nop
 800e81c:	e01c      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e81e:	bf00      	nop
 800e820:	e01a      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e822:	bf00      	nop
 800e824:	e018      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e826:	bf00      	nop
 800e828:	e016      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e82a:	bf00      	nop
 800e82c:	e014      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e82e:	bf00      	nop
 800e830:	e012      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e832:	bf00      	nop
 800e834:	e010      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e836:	bf00      	nop
 800e838:	e00e      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e83a:	bf00      	nop
 800e83c:	e00c      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e83e:	bf00      	nop
 800e840:	e00a      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e842:	bf00      	nop
 800e844:	e008      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e846:	bf00      	nop
 800e848:	e006      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e84a:	bf00      	nop
 800e84c:	e004      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e84e:	bf00      	nop
 800e850:	e002      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e852:	bf00      	nop
 800e854:	e000      	b.n	800e858 <STM_NextState+0x290>
      break;
 800e856:	bf00      	nop
  }

  if ( bChangeState )
 800e858:	7bfb      	ldrb	r3, [r7, #15]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d003      	beq.n	800e866 <STM_NextState+0x29e>
  {
    pHandle->bState = bNewState;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	7bba      	ldrb	r2, [r7, #14]
 800e862:	701a      	strb	r2, [r3, #0]
 800e864:	e00d      	b.n	800e882 <STM_NextState+0x2ba>
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800e866:	78fb      	ldrb	r3, [r7, #3]
 800e868:	2b03      	cmp	r3, #3
 800e86a:	d00a      	beq.n	800e882 <STM_NextState+0x2ba>
 800e86c:	78fb      	ldrb	r3, [r7, #3]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	d007      	beq.n	800e882 <STM_NextState+0x2ba>
 800e872:	78fb      	ldrb	r3, [r7, #3]
 800e874:	2b07      	cmp	r3, #7
 800e876:	d004      	beq.n	800e882 <STM_NextState+0x2ba>
            || ( bState == ANY_STOP ) ) )
    {
      /* If new state is not a user command START/STOP raise a software error */
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800e878:	2200      	movs	r2, #0
 800e87a:	2180      	movs	r1, #128	; 0x80
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f805 	bl	800e88c <STM_FaultProcessing>
    }
  }

  return ( bChangeState );
 800e882:	7bfb      	ldrb	r3, [r7, #15]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3710      	adds	r7, #16
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}

0800e88c <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	460b      	mov	r3, r1
 800e896:	807b      	strh	r3, [r7, #2]
 800e898:	4613      	mov	r3, r2
 800e89a:	803b      	strh	r3, [r7, #0]
  State_t LocalState =  pHandle->bState;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	73fb      	strb	r3, [r7, #15]

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	885a      	ldrh	r2, [r3, #2]
 800e8a6:	887b      	ldrh	r3, [r7, #2]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	b21a      	sxth	r2, r3
 800e8ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e8b2:	43db      	mvns	r3, r3
 800e8b4:	b21b      	sxth	r3, r3
 800e8b6:	4013      	ands	r3, r2
 800e8b8:	b21b      	sxth	r3, r3
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	889a      	ldrh	r2, [r3, #4]
 800e8c4:	887b      	ldrh	r3, [r7, #2]
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	b29a      	uxth	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	809a      	strh	r2, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
 800e8d0:	2b0a      	cmp	r3, #10
 800e8d2:	d109      	bne.n	800e8e8 <STM_FaultProcessing+0x5c>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	885b      	ldrh	r3, [r3, #2]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d10e      	bne.n	800e8fa <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_OVER;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	220b      	movs	r2, #11
 800e8e0:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800e8e2:	230b      	movs	r3, #11
 800e8e4:	73fb      	strb	r3, [r7, #15]
 800e8e6:	e008      	b.n	800e8fa <STM_FaultProcessing+0x6e>
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	885b      	ldrh	r3, [r3, #2]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d004      	beq.n	800e8fa <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_NOW;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	220a      	movs	r2, #10
 800e8f4:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 800e8f6:	230a      	movs	r3, #10
 800e8f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ( LocalState );
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3714      	adds	r7, #20
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <STM_GetState>:
  * @brief  Returns the current state machine state
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  return ( pHandle->bState );
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	781b      	ldrb	r3, [r3, #0]
}
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <STM_FaultAcknowledged>:
  * @param pHanlde pointer of type  STM_Handle_t
  * @retval bool true if the state machine has been moved to IDLE, false if the
  *        method call had no effects
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
 800e920:	b480      	push	{r7}
 800e922:	b085      	sub	sp, #20
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
  bool bToBeReturned = false;
 800e928:	2300      	movs	r3, #0
 800e92a:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->bState == FAULT_OVER )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	2b0b      	cmp	r3, #11
 800e932:	d107      	bne.n	800e944 <STM_FaultAcknowledged+0x24>
  {
    pHandle->bState = STOP_IDLE;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2209      	movs	r2, #9
 800e938:	701a      	strb	r2, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 800e940:	2301      	movs	r3, #1
 800e942:	73fb      	strb	r3, [r7, #15]
  }

  return ( bToBeReturned );
 800e944:	7bfb      	ldrb	r3, [r7, #15]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <STM_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
 800e952:	b480      	push	{r7}
 800e954:	b085      	sub	sp, #20
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	889b      	ldrh	r3, [r3, #4]
 800e95e:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	885b      	ldrh	r3, [r3, #2]
 800e964:	041b      	lsls	r3, r3, #16
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	4313      	orrs	r3, r2
 800e96a:	60fb      	str	r3, [r7, #12]

  return LocalFaultState;
 800e96c:	68fb      	ldr	r3, [r7, #12]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <LL_USART_EnableIT_RXNE>:
{
 800e97a:	b480      	push	{r7}
 800e97c:	b083      	sub	sp, #12
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f043 0220 	orr.w	r2, r3, #32
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	601a      	str	r2, [r3, #0]
}
 800e98e:	bf00      	nop
 800e990:	370c      	adds	r7, #12
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <LL_USART_EnableIT_TXE>:
{
 800e99a:	b480      	push	{r7}
 800e99c:	b083      	sub	sp, #12
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	601a      	str	r2, [r3, #0]
}
 800e9ae:	bf00      	nop
 800e9b0:	370c      	adds	r7, #12
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr

0800e9ba <LL_USART_DisableIT_RXNE>:
{
 800e9ba:	b480      	push	{r7}
 800e9bc:	b083      	sub	sp, #12
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f023 0220 	bic.w	r2, r3, #32
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	601a      	str	r2, [r3, #0]
}
 800e9ce:	bf00      	nop
 800e9d0:	370c      	adds	r7, #12
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr

0800e9da <LL_USART_DisableIT_TXE>:
{
 800e9da:	b480      	push	{r7}
 800e9dc:	b083      	sub	sp, #12
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	601a      	str	r2, [r3, #0]
}
 800e9ee:	bf00      	nop
 800e9f0:	370c      	adds	r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr

0800e9fa <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800e9fa:	b480      	push	{r7}
 800e9fc:	b083      	sub	sp, #12
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	460b      	mov	r3, r1
 800ea04:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800ea06:	78fb      	ldrb	r3, [r7, #3]
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800ea0e:	bf00      	nop
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b082      	sub	sp, #8
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4618      	mov	r0, r3
 800ea26:	f7fc fc5d 	bl	800b2e4 <FCP_Init>
}
 800ea2a:	bf00      	nop
 800ea2c:	3708      	adds	r7, #8
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
	...

0800ea34 <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800ea34:	b590      	push	{r4, r7, lr}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800ea40:	4b4b      	ldr	r3, [pc, #300]	; (800eb70 <UFCP_RX_IRQ_Handler+0x13c>)
 800ea42:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	f000 8088 	beq.w	800eb64 <UFCP_RX_IRQ_Handler+0x130>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800ea54:	887b      	ldrh	r3, [r7, #2]
 800ea56:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d002      	beq.n	800ea68 <UFCP_RX_IRQ_Handler+0x34>
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d013      	beq.n	800ea8e <UFCP_RX_IRQ_Handler+0x5a>
 800ea66:	e029      	b.n	800eabc <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	7bfa      	ldrb	r2, [r7, #15]
 800ea6c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800ea70:	4b40      	ldr	r3, [pc, #256]	; (800eb74 <UFCP_RX_IRQ_Handler+0x140>)
 800ea72:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	8a1a      	ldrh	r2, [r3, #16]
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ea82:	3301      	adds	r3, #1
 800ea84:	b2da      	uxtb	r2, r3
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800ea8c:	e06a      	b.n	800eb64 <UFCP_RX_IRQ_Handler+0x130>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	7bfa      	ldrb	r2, [r7, #15]
 800ea92:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eaac:	b25b      	sxtb	r3, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	da57      	bge.n	800eb62 <UFCP_RX_IRQ_Handler+0x12e>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	2200      	movs	r2, #0
 800eab6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800eaba:	e052      	b.n	800eb62 <UFCP_RX_IRQ_Handler+0x12e>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eac2:	3301      	adds	r3, #1
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 800eaca:	4293      	cmp	r3, r2
 800eacc:	db11      	blt.n	800eaf2 <UFCP_RX_IRQ_Handler+0xbe>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ead4:	3b02      	subs	r3, #2
 800ead6:	693a      	ldr	r2, [r7, #16]
 800ead8:	4413      	add	r3, r2
 800eada:	7bfa      	ldrb	r2, [r7, #15]
 800eadc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800eae6:	3301      	adds	r3, #1
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800eaf0:	e038      	b.n	800eb64 <UFCP_RX_IRQ_Handler+0x130>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	7bfa      	ldrb	r2, [r7, #15]
 800eaf6:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800eafa:	4b1f      	ldr	r3, [pc, #124]	; (800eb78 <UFCP_RX_IRQ_Handler+0x144>)
 800eafc:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	2200      	movs	r2, #0
 800eb02:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7ff ff55 	bl	800e9ba <LL_USART_DisableIT_RXNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	3399      	adds	r3, #153	; 0x99
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fc fc30 	bl	800b382 <FCP_CalcCRC>
 800eb22:	4603      	mov	r3, r0
 800eb24:	461a      	mov	r2, r3
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d10e      	bne.n	800eb4e <UFCP_RX_IRQ_Handler+0x11a>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	689c      	ldr	r4, [r3, #8]
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	6818      	ldr	r0, [r3, #0]
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb4a:	47a0      	blx	r4
 800eb4c:	e00a      	b.n	800eb64 <UFCP_RX_IRQ_Handler+0x130>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800eb4e:	230a      	movs	r3, #10
 800eb50:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800eb52:	f107 020e 	add.w	r2, r7, #14
 800eb56:	2301      	movs	r3, #1
 800eb58:	21ff      	movs	r1, #255	; 0xff
 800eb5a:	6938      	ldr	r0, [r7, #16]
 800eb5c:	f000 f8a2 	bl	800eca4 <UFCP_Send>
 800eb60:	e000      	b.n	800eb64 <UFCP_RX_IRQ_Handler+0x130>
        break;
 800eb62:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800eb64:	697b      	ldr	r3, [r7, #20]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	371c      	adds	r7, #28
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd90      	pop	{r4, r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	0800fd62 	.word	0x0800fd62
 800eb74:	0800fd64 	.word	0x0800fd64
 800eb78:	0800fd66 	.word	0x0800fd66

0800eb7c <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d04e      	beq.n	800ec30 <UFCP_TX_IRQ_Handler+0xb4>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d002      	beq.n	800eba2 <UFCP_TX_IRQ_Handler+0x26>
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d004      	beq.n	800ebaa <UFCP_TX_IRQ_Handler+0x2e>
 800eba0:	e007      	b.n	800ebb2 <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	7d1b      	ldrb	r3, [r3, #20]
 800eba6:	81fb      	strh	r3, [r7, #14]
        break;
 800eba8:	e018      	b.n	800ebdc <UFCP_TX_IRQ_Handler+0x60>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	7d5b      	ldrb	r3, [r3, #21]
 800ebae:	81fb      	strh	r3, [r7, #14]
        break;
 800ebb0:	e014      	b.n	800ebdc <UFCP_TX_IRQ_Handler+0x60>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	7d5b      	ldrb	r3, [r3, #21]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	68ba      	ldr	r2, [r7, #8]
 800ebba:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	db08      	blt.n	800ebd4 <UFCP_TX_IRQ_Handler+0x58>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ebc8:	3b02      	subs	r3, #2
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	4413      	add	r3, r2
 800ebce:	7d9b      	ldrb	r3, [r3, #22]
 800ebd0:	81fb      	strh	r3, [r7, #14]
 800ebd2:	e003      	b.n	800ebdc <UFCP_TX_IRQ_Handler+0x60>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ebda:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ebe2:	89fa      	ldrh	r2, [r7, #14]
 800ebe4:	b2d2      	uxtb	r2, r2
 800ebe6:	4611      	mov	r1, r2
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7ff ff06 	bl	800e9fa <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	7d5b      	ldrb	r3, [r3, #21]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	f892 2098 	ldrb.w	r2, [r2, #152]	; 0x98
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	db08      	blt.n	800ec10 <UFCP_TX_IRQ_Handler+0x94>
    {
      pBaseHandle->TxFrameLevel++;
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ec04:	3301      	adds	r3, #1
 800ec06:	b2da      	uxtb	r2, r3
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800ec0e:	e00f      	b.n	800ec30 <UFCP_TX_IRQ_Handler+0xb4>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7ff fedf 	bl	800e9da <LL_USART_DisableIT_TXE>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	6812      	ldr	r2, [r2, #0]
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	4798      	blx	r3
}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800ec44:	2308      	movs	r3, #8
 800ec46:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800ec48:	f107 020b 	add.w	r2, r7, #11
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	21ff      	movs	r1, #255	; 0xff
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f000 f827 	bl	800eca4 <UFCP_Send>

}
 800ec56:	bf00      	nop
 800ec58:	3710      	adds	r7, #16
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b084      	sub	sp, #16
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d112      	bne.n	800ec96 <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f7ff fe75 	bl	800e97a <LL_USART_EnableIT_RXNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800ec90:	2302      	movs	r3, #2
 800ec92:	73fb      	strb	r3, [r7, #15]
 800ec94:	e001      	b.n	800ec9a <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800ec96:	2301      	movs	r3, #1
 800ec98:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b088      	sub	sp, #32
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	607a      	str	r2, [r7, #4]
 800ecae:	461a      	mov	r2, r3
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	72fb      	strb	r3, [r7, #11]
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d133      	bne.n	800ed2a <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3316      	adds	r3, #22
 800ecca:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	7afa      	ldrb	r2, [r7, #11]
 800ecd0:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	7aba      	ldrb	r2, [r7, #10]
 800ecd6:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800ecd8:	e007      	b.n	800ecea <UFCP_Send+0x46>
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	1c53      	adds	r3, r2, #1
 800ecde:	607b      	str	r3, [r7, #4]
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	1c59      	adds	r1, r3, #1
 800ece4:	61b9      	str	r1, [r7, #24]
 800ece6:	7812      	ldrb	r2, [r2, #0]
 800ece8:	701a      	strb	r2, [r3, #0]
 800ecea:	7abb      	ldrb	r3, [r7, #10]
 800ecec:	1e5a      	subs	r2, r3, #1
 800ecee:	72ba      	strb	r2, [r7, #10]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d1f2      	bne.n	800ecda <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	3314      	adds	r3, #20
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7fc fb42 	bl	800b382 <FCP_CalcCRC>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	461a      	mov	r2, r3
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff fe3b 	bl	800e99a <LL_USART_EnableIT_TXE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800ed24:	2302      	movs	r3, #2
 800ed26:	77fb      	strb	r3, [r7, #31]
 800ed28:	e001      	b.n	800ed2e <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800ed2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	3720      	adds	r7, #32
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800ed38:	b480      	push	{r7}
 800ed3a:	b083      	sub	sp, #12
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800ed48:	bf00      	nop
 800ed4a:	370c      	adds	r7, #12
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed52:	4770      	bx	lr

0800ed54 <VSS_Init>:
* @brief  Software initialization of VirtualSpeedSensor component
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Init( VirtualSpeedSensor_Handle_t * pHandle )
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b082      	sub	sp, #8
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
#ifdef FASTDIV
  FD_Init( &( pHandle->fd ) );
#endif

  VSS_Clear( pHandle );
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 f804 	bl	800ed6a <VSS_Clear>
}
 800ed62:	bf00      	nop
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 800ed6a:	b480      	push	{r7}
 800ed6c:	b083      	sub	sp, #12
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.hElAngle = 0;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.hMecAngle = 0;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	819a      	strh	r2, [r3, #12]
  pHandle->_Super.hElSpeedDpp = 0;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	81da      	strh	r2, [r3, #14]
  pHandle->_Super.hMecAccelUnitP = 0;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	825a      	strh	r2, [r3, #18]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	701a      	strb	r2, [r3, #0]

  pHandle->wElAccDppP32 = 0;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	621a      	str	r2, [r3, #32]
  pHandle->wElSpeedDpp32 = 0;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	851a      	strh	r2, [r3, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	861a      	strh	r2, [r3, #48]	; 0x30

  pHandle->bTransitionStarted = false;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  pHandle->bTransitionLocked = false;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2200      	movs	r2, #0
 800edd2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800edde:	bf00      	nop
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <VSS_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t VSS_CalcElAngle( VirtualSpeedSensor_Handle_t * pHandle, void * pInputVars_str )
{
 800edea:	b480      	push	{r7}
 800edec:	b087      	sub	sp, #28
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	6039      	str	r1, [r7, #0]

  int16_t hRetAngle;
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;
 800edf4:	2301      	movs	r3, #1
 800edf6:	827b      	strh	r3, [r7, #18]

  if ( pHandle->bCopyObserver == true )
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <VSS_CalcElAngle+0x20>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	881b      	ldrh	r3, [r3, #0]
 800ee06:	82fb      	strh	r3, [r7, #22]
 800ee08:	e09a      	b.n	800ef40 <VSS_CalcElAngle+0x156>
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ee10:	b29a      	uxth	r2, r3
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	4413      	add	r3, r2
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	b21a      	sxth	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	861a      	strh	r2, [r3, #48]	; 0x30
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ee32:	4619      	mov	r1, r3
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	785b      	ldrb	r3, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800ee38:	fb91 f3f3 	sdiv	r3, r1, r3
 800ee3c:	b29b      	uxth	r3, r3
 800ee3e:	4413      	add	r3, r2
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	b21a      	sxth	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	80da      	strh	r2, [r3, #6]
#endif

    if ( pHandle->bTransitionStarted == true )
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d073      	beq.n	800ef3a <VSS_CalcElAngle+0x150>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d10a      	bne.n	800ee72 <VSS_CalcElAngle+0x88>
      {
        hRetAngle = *( int16_t * )pInputVars_str;
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	82fb      	strh	r3, [r7, #22]
        pHandle->bTransitionEnded = true;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2201      	movs	r2, #1
 800ee66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0u;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	701a      	strb	r2, [r3, #0]
 800ee70:	e066      	b.n	800ef40 <VSS_CalcElAngle+0x156>
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800ee78:	b29b      	uxth	r3, r3
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	b21a      	sxth	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	85da      	strh	r2, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	db0b      	blt.n	800eea6 <VSS_CalcElAngle+0xbc>
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	1ad3      	subs	r3, r2, r3
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	82bb      	strh	r3, [r7, #20]
 800eea4:	e00d      	b.n	800eec2 <VSS_CalcElAngle+0xd8>
        }
        else
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	82bb      	strh	r3, [r7, #20]
          hSignCorr = -1;
 800eebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eec0:	827b      	strh	r3, [r7, #18]
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800eec2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eec6:	687a      	ldr	r2, [r7, #4]
 800eec8:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800eecc:	fb02 f303 	mul.w	r3, r2, r3
 800eed0:	60fb      	str	r3, [r7, #12]
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800eed8:	461a      	mov	r2, r3
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800eee0:	817b      	strh	r3, [r7, #10]
#endif

        hAngleCorr *= hSignCorr;
 800eee2:	897a      	ldrh	r2, [r7, #10]
 800eee4:	8a7b      	ldrh	r3, [r7, #18]
 800eee6:	fb12 f303 	smulbb	r3, r2, r3
 800eeea:	b29b      	uxth	r3, r3
 800eeec:	817b      	strh	r3, [r7, #10]

        if ( hAngleDiff >= 0 )
 800eeee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	db0c      	blt.n	800ef10 <VSS_CalcElAngle+0x126>
        {
          pHandle->bTransitionLocked = true;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2201      	movs	r2, #1
 800eefa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	897b      	ldrh	r3, [r7, #10]
 800ef08:	1ad3      	subs	r3, r2, r3
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	82fb      	strh	r3, [r7, #22]
 800ef0e:	e017      	b.n	800ef40 <VSS_CalcElAngle+0x156>
        }
        else
        {
          if ( pHandle->bTransitionLocked == false )
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ef16:	f083 0301 	eor.w	r3, r3, #1
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d003      	beq.n	800ef28 <VSS_CalcElAngle+0x13e>
          {
            hRetAngle = pHandle->hElAngleAccu;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ef24:	82fb      	strh	r3, [r7, #22]
 800ef26:	e00b      	b.n	800ef40 <VSS_CalcElAngle+0x156>
          }
          else
          {
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	897b      	ldrh	r3, [r7, #10]
 800ef32:	4413      	add	r3, r2
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	82fb      	strh	r3, [r7, #22]
 800ef38:	e002      	b.n	800ef40 <VSS_CalcElAngle+0x156>
        }
      }
    }
    else
    {
      hRetAngle = pHandle->hElAngleAccu;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ef3e:	82fb      	strh	r3, [r7, #22]
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	8afa      	ldrh	r2, [r7, #22]
 800ef44:	809a      	strh	r2, [r3, #4]
  return hRetAngle;
 800ef46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	371c      	adds	r7, #28
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <VSS_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (SPED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = false;
 800ef60:	2300      	movs	r3, #0
 800ef62:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->hRemainingStep > 1u )
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d936      	bls.n	800efda <VSS_CalcAvrgMecSpeedUnit+0x84>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6a1b      	ldr	r3, [r3, #32]
 800ef74:	441a      	add	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	da02      	bge.n	800ef88 <VSS_CalcAvrgMecSpeedUnit+0x32>
 800ef82:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ef86:	33ff      	adds	r3, #255	; 0xff
 800ef88:	141b      	asrs	r3, r3, #16
 800ef8a:	b21a      	sxth	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	81da      	strh	r2, [r3, #14]

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ef96:	461a      	mov	r2, r3
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	8b5b      	ldrh	r3, [r3, #26]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800ef9c:	fb03 f202 	mul.w	r2, r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800efa0:	4613      	mov	r3, r2
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	4413      	add	r3, r2
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	461a      	mov	r2, r3
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	69db      	ldr	r3, [r3, #28]
 800efae:	4619      	mov	r1, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	785b      	ldrb	r3, [r3, #1]
 800efb4:	fb03 f301 	mul.w	r3, r3, r1
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800efb8:	fb92 f3f3 	sdiv	r3, r2, r3
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800efbc:	b21a      	sxth	r2, r3
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	819a      	strh	r2, [r3, #12]

    pHandle->hRemainingStep--;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efd0:	3b01      	subs	r3, #1
 800efd2:	b29a      	uxth	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	851a      	strh	r2, [r3, #40]	; 0x28
 800efd8:	e037      	b.n	800f04a <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else if ( pHandle->hRemainingStep == 1u )
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efde:	2b01      	cmp	r3, #1
 800efe0:	d12e      	bne.n	800f040 <VSS_CalcAvrgMecSpeedUnit+0xea>
  {
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	819a      	strh	r2, [r3, #12]

    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800effc:	461a      	mov	r2, r3
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	69db      	ldr	r3, [r3, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800f002:	fb03 f202 	mul.w	r2, r3, r2
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	8b5b      	ldrh	r3, [r3, #26]
 800f00a:	4619      	mov	r1, r3
 800f00c:	460b      	mov	r3, r1
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	440b      	add	r3, r1
 800f012:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800f014:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800f018:	b21a      	sxth	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	81da      	strh	r2, [r3, #14]

    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f024:	b29a      	uxth	r2, r3
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	785b      	ldrb	r3, [r3, #1]
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	fb12 f303 	smulbb	r3, r2, r3
 800f030:	b29b      	uxth	r3, r3
 800f032:	b21a      	sxth	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	81da      	strh	r2, [r3, #14]

    pHandle->hRemainingStep = 0u;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2200      	movs	r2, #0
 800f03c:	851a      	strh	r2, [r3, #40]	; 0x28
 800f03e:	e004      	b.n	800f04a <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	801a      	strh	r2, [r3, #0]
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f050:	f083 0301 	eor.w	r3, r3, #1
 800f054:	b2db      	uxtb	r3, r3
 800f056:	2b00      	cmp	r3, #0
 800f058:	d006      	beq.n	800f068 <VSS_CalcAvrgMecSpeedUnit+0x112>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	78da      	ldrb	r2, [r3, #3]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	701a      	strb	r2, [r3, #0]
    SpeedSensorReliability = false;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]
 800f066:	e006      	b.n	800f076 <VSS_CalcAvrgMecSpeedUnit+0x120>
  }
  else
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6839      	ldr	r1, [r7, #0]
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7ff f818 	bl	800e0a2 <SPD_IsMecSpeedReliable>
 800f072:	4603      	mov	r3, r0
 800f074:	73fb      	strb	r3, [r7, #15]
  }

  return ( SpeedSensorReliability );
 800f076:	7bfb      	ldrb	r3, [r7, #15]
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	460b      	mov	r3, r1
 800f08a:	807b      	strh	r3, [r7, #2]

  pHandle->hElAngleAccu = hMecAngle;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	887a      	ldrh	r2, [r7, #2]
 800f090:	861a      	strh	r2, [r3, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f098:	461a      	mov	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	785b      	ldrb	r3, [r3, #1]
 800f09e:	fb92 f3f3 	sdiv	r3, r2, r3
 800f0a2:	b21a      	sxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	887a      	ldrh	r2, [r7, #2]
 800f0ac:	809a      	strh	r2, [r3, #4]
}
 800f0ae:	bf00      	nop
 800f0b0:	370c      	adds	r7, #12
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
	...

0800f0bc <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b087      	sub	sp, #28
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	807b      	strh	r3, [r7, #2]
 800f0c8:	4613      	mov	r3, r2
 800f0ca:	803b      	strh	r3, [r7, #0]
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f0d2:	f083 0301 	eor.w	r3, r3, #1
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d06f      	beq.n	800f1bc <VSS_SetMecAcceleration+0x100>
  {
    if ( hDurationms == 0u )
 800f0dc:	883b      	ldrh	r3, [r7, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d128      	bne.n	800f134 <VSS_SetMecAcceleration+0x78>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	887a      	ldrh	r2, [r7, #2]
 800f0e6:	819a      	strh	r2, [r3, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800f0e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	69d2      	ldr	r2, [r2, #28]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800f0f0:	fb02 f203 	mul.w	r2, r2, r3
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	8b5b      	ldrh	r3, [r3, #26]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	440b      	add	r3, r1
 800f100:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f102:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800f106:	b21a      	sxth	r2, r3
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	81da      	strh	r2, [r3, #14]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f112:	b29a      	uxth	r2, r3
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	785b      	ldrb	r3, [r3, #1]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	fb12 f303 	smulbb	r3, r2, r3
 800f11e:	b29b      	uxth	r3, r3
 800f120:	b21a      	sxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	81da      	strh	r2, [r3, #14]

      pHandle->hRemainingStep = 0u;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	851a      	strh	r2, [r3, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	887a      	ldrh	r2, [r7, #2]
 800f130:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800f132:	e043      	b.n	800f1bc <VSS_SetMecAcceleration+0x100>
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800f134:	883b      	ldrh	r3, [r7, #0]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	8e92      	ldrh	r2, [r2, #52]	; 0x34
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800f13a:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800f13e:	4a22      	ldr	r2, [pc, #136]	; (800f1c8 <VSS_SetMecAcceleration+0x10c>)
 800f140:	fba2 2303 	umull	r2, r3, r2, r3
 800f144:	099b      	lsrs	r3, r3, #6
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800f146:	82fb      	strh	r3, [r7, #22]
      hNbrStep++;
 800f148:	8afb      	ldrh	r3, [r7, #22]
 800f14a:	3301      	adds	r3, #1
 800f14c:	82fb      	strh	r3, [r7, #22]
      pHandle->hRemainingStep = hNbrStep;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	8afa      	ldrh	r2, [r7, #22]
 800f152:	851a      	strh	r2, [r3, #40]	; 0x28
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f15a:	461a      	mov	r2, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	785b      	ldrb	r3, [r3, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800f160:	fb92 f3f3 	sdiv	r3, r2, r3
 800f164:	82bb      	strh	r3, [r7, #20]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f166:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	69d2      	ldr	r2, [r2, #28]
 800f16e:	fb02 f203 	mul.w	r2, r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	8b5b      	ldrh	r3, [r3, #26]
 800f176:	4619      	mov	r1, r3
 800f178:	460b      	mov	r3, r1
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	440b      	add	r3, r1
 800f17e:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f180:	fb92 f3f3 	sdiv	r3, r2, r3
 800f184:	827b      	strh	r3, [r7, #18]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800f186:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f18a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	041a      	lsls	r2, r3, #16
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;
 800f192:	8afb      	ldrh	r3, [r7, #22]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800f194:	fb92 f3f3 	sdiv	r3, r2, r3
 800f198:	60fb      	str	r3, [r7, #12]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	785b      	ldrb	r3, [r3, #1]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	fb03 f202 	mul.w	r2, r3, r2
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	621a      	str	r2, [r3, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	887a      	ldrh	r2, [r7, #2]
 800f1ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f1b6:	041a      	lsls	r2, r3, #16
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f1bc:	bf00      	nop
 800f1be:	371c      	adds	r7, #28
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr
 800f1c8:	10624dd3 	.word	0x10624dd3

0800f1cc <VSS_SetStartTransition>:
  * @retval bool true if Transition phase is enabled (started or not), false if
            transition has been triggered but it's actually disabled
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b085      	sub	sp, #20
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	73fb      	strb	r3, [r7, #15]
  if ( bCommand == true )
 800f1dc:	78fb      	ldrb	r3, [r7, #3]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d011      	beq.n	800f206 <VSS_SetStartTransition+0x3a>
  {
    pHandle->bTransitionStarted = true;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if ( pHandle->hTransitionSteps == 0 )
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d108      	bne.n	800f206 <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionEnded = true;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	701a      	strb	r2, [r3, #0]
      bAux = false;
 800f202:	2300      	movs	r3, #0
 800f204:	73fb      	strb	r3, [r7, #15]
    }
  }
  return bAux;
 800f206:	7bfb      	ldrb	r3, [r7, #15]
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3714      	adds	r7, #20
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <VSS_TransitionEnded>:
  }
  return ( retVal );
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
    return pHandle->bTransitionEnded;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800f222:	4618      	mov	r0, r3
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
	...

0800f230 <RUC_Init>:
 800f230:	b430      	push	{r4, r5}
 800f232:	6681      	str	r1, [r0, #104]	; 0x68
 800f234:	2100      	movs	r1, #0
 800f236:	9c02      	ldr	r4, [sp, #8]
 800f238:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800f23c:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800f240:	f110 010c 	adds.w	r1, r0, #12
 800f244:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 800f248:	6744      	str	r4, [r0, #116]	; 0x74
 800f24a:	d023      	beq.n	800f294 <RUC_Init+0x64>
 800f24c:	6943      	ldr	r3, [r0, #20]
 800f24e:	b323      	cbz	r3, 800f29a <RUC_Init+0x6a>
 800f250:	689b      	ldr	r3, [r3, #8]
 800f252:	b323      	cbz	r3, 800f29e <RUC_Init+0x6e>
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	b323      	cbz	r3, 800f2a2 <RUC_Init+0x72>
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	b1c3      	cbz	r3, 800f28e <RUC_Init+0x5e>
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	2105      	movs	r1, #5
 800f260:	b1b3      	cbz	r3, 800f290 <RUC_Init+0x60>
 800f262:	2204      	movs	r2, #4
 800f264:	2105      	movs	r1, #5
 800f266:	8805      	ldrh	r5, [r0, #0]
 800f268:	4c0f      	ldr	r4, [pc, #60]	; (800f2a8 <RUC_Init+0x78>)
 800f26a:	2364      	movs	r3, #100	; 0x64
 800f26c:	fb03 f305 	mul.w	r3, r3, r5
 800f270:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f274:	fba4 4303 	umull	r4, r3, r4, r3
 800f278:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f27c:	2400      	movs	r4, #0
 800f27e:	099b      	lsrs	r3, r3, #6
 800f280:	6154      	str	r4, [r2, #20]
 800f282:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 800f286:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800f28a:	bc30      	pop	{r4, r5}
 800f28c:	4770      	bx	lr
 800f28e:	2104      	movs	r1, #4
 800f290:	1e4a      	subs	r2, r1, #1
 800f292:	e7e8      	b.n	800f266 <RUC_Init+0x36>
 800f294:	f04f 32ff 	mov.w	r2, #4294967295
 800f298:	e7e5      	b.n	800f266 <RUC_Init+0x36>
 800f29a:	2101      	movs	r1, #1
 800f29c:	e7f8      	b.n	800f290 <RUC_Init+0x60>
 800f29e:	2102      	movs	r1, #2
 800f2a0:	e7f6      	b.n	800f290 <RUC_Init+0x60>
 800f2a2:	2103      	movs	r1, #3
 800f2a4:	e7f4      	b.n	800f290 <RUC_Init+0x60>
 800f2a6:	bf00      	nop
 800f2a8:	10624dd3 	.word	0x10624dd3

0800f2ac <RUC_Clear>:
 800f2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800f2b4:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 800f2b8:	80e1      	strh	r1, [r4, #6]
 800f2ba:	2500      	movs	r5, #0
 800f2bc:	4638      	mov	r0, r7
 800f2be:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800f2c2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800f2c6:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800f2ca:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800f2ce:	460e      	mov	r6, r1
 800f2d0:	f7ff fd4b 	bl	800ed6a <VSS_Clear>
 800f2d4:	4629      	mov	r1, r5
 800f2d6:	4640      	mov	r0, r8
 800f2d8:	f7fe ffe9 	bl	800e2ae <STC_SetControlMode>
 800f2dc:	8861      	ldrh	r1, [r4, #2]
 800f2de:	b2b6      	uxth	r6, r6
 800f2e0:	fb11 f106 	smulbb	r1, r1, r6
 800f2e4:	b209      	sxth	r1, r1
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	f7ff feca 	bl	800f080 <VSS_SetMecAngle>
 800f2ec:	462a      	mov	r2, r5
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	4640      	mov	r0, r8
 800f2f2:	f7fe ffef 	bl	800e2d4 <STC_ExecRamp>
 800f2f6:	8a21      	ldrh	r1, [r4, #16]
 800f2f8:	89a2      	ldrh	r2, [r4, #12]
 800f2fa:	fb11 f106 	smulbb	r1, r1, r6
 800f2fe:	b209      	sxth	r1, r1
 800f300:	4640      	mov	r0, r8
 800f302:	f7fe ffe7 	bl	800e2d4 <STC_ExecRamp>
 800f306:	89e1      	ldrh	r1, [r4, #14]
 800f308:	89a2      	ldrh	r2, [r4, #12]
 800f30a:	fb11 f106 	smulbb	r1, r1, r6
 800f30e:	4638      	mov	r0, r7
 800f310:	b209      	sxth	r1, r1
 800f312:	f7ff fed3 	bl	800f0bc <VSS_SetMecAcceleration>
 800f316:	89a0      	ldrh	r0, [r4, #12]
 800f318:	8823      	ldrh	r3, [r4, #0]
 800f31a:	4907      	ldr	r1, [pc, #28]	; (800f338 <RUC_Clear+0x8c>)
 800f31c:	6962      	ldr	r2, [r4, #20]
 800f31e:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800f322:	fb03 f300 	mul.w	r3, r3, r0
 800f326:	fba1 1303 	umull	r1, r3, r1, r3
 800f32a:	099b      	lsrs	r3, r3, #6
 800f32c:	3301      	adds	r3, #1
 800f32e:	80a3      	strh	r3, [r4, #4]
 800f330:	60a2      	str	r2, [r4, #8]
 800f332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f336:	bf00      	nop
 800f338:	10624dd3 	.word	0x10624dd3

0800f33c <RUC_Exec>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	8883      	ldrh	r3, [r0, #4]
 800f340:	bb53      	cbnz	r3, 800f398 <RUC_Exec+0x5c>
 800f342:	6883      	ldr	r3, [r0, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d02e      	beq.n	800f3a6 <RUC_Exec+0x6a>
 800f348:	88c5      	ldrh	r5, [r0, #6]
 800f34a:	8899      	ldrh	r1, [r3, #4]
 800f34c:	881a      	ldrh	r2, [r3, #0]
 800f34e:	4604      	mov	r4, r0
 800f350:	fb11 f105 	smulbb	r1, r1, r5
 800f354:	b209      	sxth	r1, r1
 800f356:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f358:	f7fe ffbc 	bl	800e2d4 <STC_ExecRamp>
 800f35c:	68a3      	ldr	r3, [r4, #8]
 800f35e:	88e5      	ldrh	r5, [r4, #6]
 800f360:	8859      	ldrh	r1, [r3, #2]
 800f362:	881a      	ldrh	r2, [r3, #0]
 800f364:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f366:	fb11 f105 	smulbb	r1, r1, r5
 800f36a:	b209      	sxth	r1, r1
 800f36c:	f7ff fea6 	bl	800f0bc <VSS_SetMecAcceleration>
 800f370:	68a2      	ldr	r2, [r4, #8]
 800f372:	8823      	ldrh	r3, [r4, #0]
 800f374:	8810      	ldrh	r0, [r2, #0]
 800f376:	490d      	ldr	r1, [pc, #52]	; (800f3ac <RUC_Exec+0x70>)
 800f378:	6892      	ldr	r2, [r2, #8]
 800f37a:	60a2      	str	r2, [r4, #8]
 800f37c:	fb03 f300 	mul.w	r3, r3, r0
 800f380:	fba1 2303 	umull	r2, r3, r1, r3
 800f384:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800f388:	099b      	lsrs	r3, r3, #6
 800f38a:	3301      	adds	r3, #1
 800f38c:	3201      	adds	r2, #1
 800f38e:	80a3      	strh	r3, [r4, #4]
 800f390:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800f394:	2001      	movs	r0, #1
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	3b01      	subs	r3, #1
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	8083      	strh	r3, [r0, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d0cf      	beq.n	800f342 <RUC_Exec+0x6>
 800f3a2:	2001      	movs	r0, #1
 800f3a4:	e7f7      	b.n	800f396 <RUC_Exec+0x5a>
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	bd38      	pop	{r3, r4, r5, pc}
 800f3aa:	bf00      	nop
 800f3ac:	10624dd3 	.word	0x10624dd3

0800f3b0 <RUC_FirstAccelerationStageReached>:
 800f3b0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800f3b4:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 800f3b8:	4282      	cmp	r2, r0
 800f3ba:	bf34      	ite	cc
 800f3bc:	2000      	movcc	r0, #0
 800f3be:	2001      	movcs	r0, #1
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop

0800f3c4 <RUC_SetPhaseDurationms>:
 800f3c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f3c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3cc:	818a      	strh	r2, [r1, #12]
 800f3ce:	4770      	bx	lr

0800f3d0 <RUC_SetPhaseFinalMecSpeedUnit>:
 800f3d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f3d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3d8:	81ca      	strh	r2, [r1, #14]
 800f3da:	4770      	bx	lr

0800f3dc <RUC_SetPhaseFinalTorque>:
 800f3dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f3e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3e4:	820a      	strh	r2, [r1, #16]
 800f3e6:	4770      	bx	lr

0800f3e8 <RUC_GetPhaseDurationms>:
 800f3e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f3ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3f0:	8988      	ldrh	r0, [r1, #12]
 800f3f2:	4770      	bx	lr

0800f3f4 <RUC_GetPhaseFinalMecSpeedUnit>:
 800f3f4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f3f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3fc:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop

0800f404 <RUC_GetPhaseFinalTorque>:
 800f404:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f408:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f40c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop

0800f414 <RUC_GetNumberOfPhases>:
 800f414:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop

0800f41c <STO_PLL_CalcElAngle>:
 800f41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f420:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800f424:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 800f428:	4604      	mov	r4, r0
 800f42a:	03d8      	lsls	r0, r3, #15
 800f42c:	1ac2      	subs	r2, r0, r3
 800f42e:	4596      	cmp	lr, r2
 800f430:	b089      	sub	sp, #36	; 0x24
 800f432:	f340 80bb 	ble.w	800f5ac <STO_PLL_CalcElAngle+0x190>
 800f436:	66a2      	str	r2, [r4, #104]	; 0x68
 800f438:	4696      	mov	lr, r2
 800f43a:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800f43e:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800f442:	fa4e f605 	asr.w	r6, lr, r5
 800f446:	9605      	str	r6, [sp, #20]
 800f448:	4562      	cmp	r2, ip
 800f44a:	b236      	sxth	r6, r6
 800f44c:	9600      	str	r6, [sp, #0]
 800f44e:	f280 80bf 	bge.w	800f5d0 <STO_PLL_CalcElAngle+0x1b4>
 800f452:	66e2      	str	r2, [r4, #108]	; 0x6c
 800f454:	4694      	mov	ip, r2
 800f456:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800f45a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800f45c:	03de      	lsls	r6, r3, #15
 800f45e:	fa4c f205 	asr.w	r2, ip, r5
 800f462:	1af5      	subs	r5, r6, r3
 800f464:	9202      	str	r2, [sp, #8]
 800f466:	42a8      	cmp	r0, r5
 800f468:	b212      	sxth	r2, r2
 800f46a:	9201      	str	r2, [sp, #4]
 800f46c:	f340 80aa 	ble.w	800f5c4 <STO_PLL_CalcElAngle+0x1a8>
 800f470:	6625      	str	r5, [r4, #96]	; 0x60
 800f472:	4628      	mov	r0, r5
 800f474:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f476:	4295      	cmp	r5, r2
 800f478:	f280 809e 	bge.w	800f5b8 <STO_PLL_CalcElAngle+0x19c>
 800f47c:	6665      	str	r5, [r4, #100]	; 0x64
 800f47e:	462a      	mov	r2, r5
 800f480:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800f484:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
 800f488:	88cd      	ldrh	r5, [r1, #6]
 800f48a:	890e      	ldrh	r6, [r1, #8]
 800f48c:	f9b1 8000 	ldrsh.w	r8, [r1]
 800f490:	888f      	ldrh	r7, [r1, #4]
 800f492:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800f496:	9104      	str	r1, [sp, #16]
 800f498:	fa40 f903 	asr.w	r9, r0, r3
 800f49c:	fa42 f303 	asr.w	r3, r2, r3
 800f4a0:	fb13 f10a 	smulbb	r1, r3, sl
 800f4a4:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 800f4a8:	1a51      	subs	r1, r2, r1
 800f4aa:	eba9 0707 	sub.w	r7, r9, r7
 800f4ae:	fb19 f90a 	smulbb	r9, r9, sl
 800f4b2:	fb06 f208 	mul.w	r2, r6, r8
 800f4b6:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 800f4ba:	9103      	str	r1, [sp, #12]
 800f4bc:	b23f      	sxth	r7, r7
 800f4be:	eba0 0009 	sub.w	r0, r0, r9
 800f4c2:	9904      	ldr	r1, [sp, #16]
 800f4c4:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 800f4c8:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800f4cc:	fb0b 0007 	mla	r0, fp, r7, r0
 800f4d0:	1412      	asrs	r2, r2, #16
 800f4d2:	fb0a 0202 	mla	r2, sl, r2, r0
 800f4d6:	1b5b      	subs	r3, r3, r5
 800f4d8:	fb06 f601 	mul.w	r6, r6, r1
 800f4dc:	8e65      	ldrh	r5, [r4, #50]	; 0x32
 800f4de:	9801      	ldr	r0, [sp, #4]
 800f4e0:	9903      	ldr	r1, [sp, #12]
 800f4e2:	b21b      	sxth	r3, r3
 800f4e4:	fb0b 1103 	mla	r1, fp, r3, r1
 800f4e8:	fa40 fb05 	asr.w	fp, r0, r5
 800f4ec:	9800      	ldr	r0, [sp, #0]
 800f4ee:	1436      	asrs	r6, r6, #16
 800f4f0:	fb0a 1106 	mla	r1, sl, r6, r1
 800f4f4:	fa40 f505 	asr.w	r5, r0, r5
 800f4f8:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 800f4fc:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 800f500:	f9b4 a124 	ldrsh.w	sl, [r4, #292]	; 0x124
 800f504:	fb0b fb08 	mul.w	fp, fp, r8
 800f508:	fb05 f508 	mul.w	r5, r5, r8
 800f50c:	fb09 c303 	mla	r3, r9, r3, ip
 800f510:	fb07 e709 	mla	r7, r7, r9, lr
 800f514:	fb0b 7706 	mla	r7, fp, r6, r7
 800f518:	fb05 3616 	mls	r6, r5, r6, r3
 800f51c:	9b00      	ldr	r3, [sp, #0]
 800f51e:	fb00 2513 	mls	r5, r0, r3, r2
 800f522:	9a01      	ldr	r2, [sp, #4]
 800f524:	f1ba 0f00 	cmp.w	sl, #0
 800f528:	fb00 1b12 	mls	fp, r0, r2, r1
 800f52c:	4698      	mov	r8, r3
 800f52e:	db55      	blt.n	800f5dc <STO_PLL_CalcElAngle+0x1c0>
 800f530:	f04f 0901 	mov.w	r9, #1
 800f534:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800f538:	9b01      	ldr	r3, [sp, #4]
 800f53a:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 800f53e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f542:	f7f2 fd5f 	bl	8002004 <MCM_Trig_Functions>
 800f546:	9b02      	ldr	r3, [sp, #8]
 800f548:	fb13 f109 	smulbb	r1, r3, r9
 800f54c:	4249      	negs	r1, r1
 800f54e:	1403      	asrs	r3, r0, #16
 800f550:	fb10 f001 	smulbb	r0, r0, r1
 800f554:	fb08 f103 	mul.w	r1, r8, r3
 800f558:	f340 30cf 	sbfx	r0, r0, #15, #16
 800f55c:	f341 31cf 	sbfx	r1, r1, #15, #16
 800f560:	1a41      	subs	r1, r0, r1
 800f562:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f566:	f7fc f917 	bl	800b798 <PI_Controller>
 800f56a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800f56e:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 800f572:	8220      	strh	r0, [r4, #16]
 800f574:	3301      	adds	r3, #1
 800f576:	b2db      	uxtb	r3, r3
 800f578:	429a      	cmp	r2, r3
 800f57a:	bf0a      	itet	eq
 800f57c:	2200      	moveq	r2, #0
 800f57e:	461a      	movne	r2, r3
 800f580:	4613      	moveq	r3, r2
 800f582:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800f586:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800f58a:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800f58e:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800f592:	88a2      	ldrh	r2, [r4, #4]
 800f594:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800f598:	4410      	add	r0, r2
 800f59a:	b200      	sxth	r0, r0
 800f59c:	6625      	str	r5, [r4, #96]	; 0x60
 800f59e:	e9c4 b719 	strd	fp, r7, [r4, #100]	; 0x64
 800f5a2:	66e6      	str	r6, [r4, #108]	; 0x6c
 800f5a4:	80a0      	strh	r0, [r4, #4]
 800f5a6:	b009      	add	sp, #36	; 0x24
 800f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ac:	1a1d      	subs	r5, r3, r0
 800f5ae:	45ae      	cmp	lr, r5
 800f5b0:	bfdc      	itt	le
 800f5b2:	66a5      	strle	r5, [r4, #104]	; 0x68
 800f5b4:	46ae      	movle	lr, r5
 800f5b6:	e740      	b.n	800f43a <STO_PLL_CalcElAngle+0x1e>
 800f5b8:	1b9b      	subs	r3, r3, r6
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	bfdc      	itt	le
 800f5be:	6663      	strle	r3, [r4, #100]	; 0x64
 800f5c0:	461a      	movle	r2, r3
 800f5c2:	e75d      	b.n	800f480 <STO_PLL_CalcElAngle+0x64>
 800f5c4:	1b9a      	subs	r2, r3, r6
 800f5c6:	4290      	cmp	r0, r2
 800f5c8:	bfdc      	itt	le
 800f5ca:	6622      	strle	r2, [r4, #96]	; 0x60
 800f5cc:	4610      	movle	r0, r2
 800f5ce:	e751      	b.n	800f474 <STO_PLL_CalcElAngle+0x58>
 800f5d0:	1a1b      	subs	r3, r3, r0
 800f5d2:	459c      	cmp	ip, r3
 800f5d4:	bfdc      	itt	le
 800f5d6:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800f5d8:	469c      	movle	ip, r3
 800f5da:	e73c      	b.n	800f456 <STO_PLL_CalcElAngle+0x3a>
 800f5dc:	9b05      	ldr	r3, [sp, #20]
 800f5de:	f1c3 0800 	rsb	r8, r3, #0
 800f5e2:	fa0f f888 	sxth.w	r8, r8
 800f5e6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800f5ea:	9b00      	ldr	r3, [sp, #0]
 800f5ec:	e7a2      	b.n	800f534 <STO_PLL_CalcElAngle+0x118>
 800f5ee:	bf00      	nop

0800f5f0 <STO_PLL_CalcAvrgMecSpeedUnit>:
 800f5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5f2:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 800f5f6:	f1bc 0f00 	cmp.w	ip, #0
 800f5fa:	f000 8095 	beq.w	800f728 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800f5fe:	f10c 37ff 	add.w	r7, ip, #4294967295
 800f602:	b2fb      	uxtb	r3, r7
 800f604:	f100 0672 	add.w	r6, r0, #114	; 0x72
 800f608:	f100 0774 	add.w	r7, r0, #116	; 0x74
 800f60c:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800f610:	4632      	mov	r2, r6
 800f612:	2300      	movs	r3, #0
 800f614:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 800f618:	4297      	cmp	r7, r2
 800f61a:	442b      	add	r3, r5
 800f61c:	d1fa      	bne.n	800f614 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800f61e:	fb93 f5fc 	sdiv	r5, r3, ip
 800f622:	2400      	movs	r4, #0
 800f624:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800f628:	1b5b      	subs	r3, r3, r5
 800f62a:	42b2      	cmp	r2, r6
 800f62c:	fb03 4403 	mla	r4, r3, r3, r4
 800f630:	d1f8      	bne.n	800f624 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 800f632:	fb94 f4fc 	sdiv	r4, r4, ip
 800f636:	fb05 fc05 	mul.w	ip, r5, r5
 800f63a:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800f63e:	8b43      	ldrh	r3, [r0, #26]
 800f640:	7887      	ldrb	r7, [r0, #2]
 800f642:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 800f646:	fb0c fc02 	mul.w	ip, ip, r2
 800f64a:	ea4f 1cec 	mov.w	ip, ip, asr #7
 800f64e:	fb05 f303 	mul.w	r3, r5, r3
 800f652:	45a4      	cmp	ip, r4
 800f654:	69c2      	ldr	r2, [r0, #28]
 800f656:	bfd4      	ite	le
 800f658:	2500      	movle	r5, #0
 800f65a:	2501      	movgt	r5, #1
 800f65c:	fb03 f307 	mul.w	r3, r3, r7
 800f660:	fb93 f3f2 	sdiv	r3, r3, r2
 800f664:	7842      	ldrb	r2, [r0, #1]
 800f666:	fb93 f3f2 	sdiv	r3, r3, r2
 800f66a:	b21a      	sxth	r2, r3
 800f66c:	800a      	strh	r2, [r1, #0]
 800f66e:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 800f672:	8182      	strh	r2, [r0, #12]
 800f674:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 800f678:	b99e      	cbnz	r6, 800f6a2 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 800f67a:	b355      	cbz	r5, 800f6d2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f67c:	45a4      	cmp	ip, r4
 800f67e:	dc25      	bgt.n	800f6cc <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 800f680:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 800f684:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 800f688:	3301      	adds	r3, #1
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	429a      	cmp	r2, r3
 800f68e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f692:	d81e      	bhi.n	800f6d2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f694:	2300      	movs	r3, #0
 800f696:	78c2      	ldrb	r2, [r0, #3]
 800f698:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f69c:	7002      	strb	r2, [r0, #0]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 800f6a8:	bfb8      	it	lt
 800f6aa:	425b      	neglt	r3, r3
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	dc14      	bgt.n	800f6da <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	4616      	mov	r6, r2
 800f6b6:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 800f6ba:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 800f6be:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800f6c2:	b135      	cbz	r5, 800f6d2 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f6c4:	45a4      	cmp	ip, r4
 800f6c6:	dddb      	ble.n	800f680 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800f6c8:	2a00      	cmp	r2, #0
 800f6ca:	d0d9      	beq.n	800f680 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f6d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f6d6:	f7fe bce4 	b.w	800e0a2 <SPD_IsMecSpeedReliable>
 800f6da:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 800f6de:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800f6e2:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 800f6e6:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 800f6ea:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800f6ee:	fb93 f3fe 	sdiv	r3, r3, lr
 800f6f2:	fb03 f202 	mul.w	r2, r3, r2
 800f6f6:	2a00      	cmp	r2, #0
 800f6f8:	bfb8      	it	lt
 800f6fa:	323f      	addlt	r2, #63	; 0x3f
 800f6fc:	1192      	asrs	r2, r2, #6
 800f6fe:	fb02 f303 	mul.w	r3, r2, r3
 800f702:	fb07 f707 	mul.w	r7, r7, r7
 800f706:	2b00      	cmp	r3, #0
 800f708:	fb06 7606 	mla	r6, r6, r6, r7
 800f70c:	461a      	mov	r2, r3
 800f70e:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800f712:	bfb8      	it	lt
 800f714:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 800f718:	1192      	asrs	r2, r2, #6
 800f71a:	fb07 3212 	mls	r2, r7, r2, r3
 800f71e:	4296      	cmp	r6, r2
 800f720:	bfd4      	ite	le
 800f722:	2200      	movle	r2, #0
 800f724:	2201      	movgt	r2, #1
 800f726:	e7c6      	b.n	800f6b6 <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 800f728:	4664      	mov	r4, ip
 800f72a:	4665      	mov	r5, ip
 800f72c:	e785      	b.n	800f63a <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800f72e:	bf00      	nop

0800f730 <STO_PLL_CalcAvrgElSpeedDpp>:
 800f730:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 800f734:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 800f738:	b470      	push	{r4, r5, r6}
 800f73a:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 800f73e:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 800f742:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 800f746:	b2a6      	uxth	r6, r4
 800f748:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 800f74c:	1af3      	subs	r3, r6, r3
 800f74e:	b29b      	uxth	r3, r3
 800f750:	442a      	add	r2, r5
 800f752:	b19b      	cbz	r3, 800f77c <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 800f754:	440b      	add	r3, r1
 800f756:	b29b      	uxth	r3, r3
 800f758:	b219      	sxth	r1, r3
 800f75a:	428c      	cmp	r4, r1
 800f75c:	bfdc      	itt	le
 800f75e:	1b9b      	suble	r3, r3, r6
 800f760:	b219      	sxthle	r1, r3
 800f762:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800f766:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800f76a:	1ad3      	subs	r3, r2, r3
 800f76c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800f770:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800f774:	4113      	asrs	r3, r2
 800f776:	81c3      	strh	r3, [r0, #14]
 800f778:	bc70      	pop	{r4, r5, r6}
 800f77a:	4770      	bx	lr
 800f77c:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	e7f3      	b.n	800f76c <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

0800f784 <STO_PLL_Clear>:
 800f784:	b510      	push	{r4, lr}
 800f786:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800f78a:	2100      	movs	r1, #0
 800f78c:	4604      	mov	r4, r0
 800f78e:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 800f792:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 800f796:	8081      	strh	r1, [r0, #4]
 800f798:	81c1      	strh	r1, [r0, #14]
 800f79a:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 800f79e:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800f7a2:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800f7a6:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800f7aa:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 800f7ae:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800f7b2:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800f7b6:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 800f7ba:	b132      	cbz	r2, 800f7ca <STO_PLL_Clear+0x46>
 800f7bc:	3a01      	subs	r2, #1
 800f7be:	b2d2      	uxtb	r2, r2
 800f7c0:	3201      	adds	r2, #1
 800f7c2:	0052      	lsls	r2, r2, #1
 800f7c4:	3074      	adds	r0, #116	; 0x74
 800f7c6:	f000 f929 	bl	800fa1c <memset>
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 800f7d0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800f7d4:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7dc:	f7fb bf99 	b.w	800b712 <PID_SetIntegralTerm>

0800f7e0 <STO_PLL_Init>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 800f7e8:	4b18      	ldr	r3, [pc, #96]	; (800f84c <STO_PLL_Init+0x6c>)
 800f7ea:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800f7ee:	fb93 f3f5 	sdiv	r3, r3, r5
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	2101      	movs	r1, #1
 800f7f6:	b21b      	sxth	r3, r3
 800f7f8:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 800f7fc:	8662      	strh	r2, [r4, #50]	; 0x32
 800f7fe:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800f802:	b303      	cbz	r3, 800f846 <STO_PLL_Init+0x66>
 800f804:	4608      	mov	r0, r1
 800f806:	e000      	b.n	800f80a <STO_PLL_Init+0x2a>
 800f808:	4611      	mov	r1, r2
 800f80a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f80e:	1c4a      	adds	r2, r1, #1
 800f810:	105b      	asrs	r3, r3, #1
 800f812:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800f816:	b292      	uxth	r2, r2
 800f818:	d1f6      	bne.n	800f808 <STO_PLL_Init+0x28>
 800f81a:	b200      	sxth	r0, r0
 800f81c:	fb05 f200 	mul.w	r2, r5, r0
 800f820:	8661      	strh	r1, [r4, #50]	; 0x32
 800f822:	4b0b      	ldr	r3, [pc, #44]	; (800f850 <STO_PLL_Init+0x70>)
 800f824:	8620      	strh	r0, [r4, #48]	; 0x30
 800f826:	fb83 1302 	smull	r1, r3, r3, r2
 800f82a:	17d2      	asrs	r2, r2, #31
 800f82c:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 800f830:	8562      	strh	r2, [r4, #42]	; 0x2a
 800f832:	4620      	mov	r0, r4
 800f834:	f7ff ffa6 	bl	800f784 <STO_PLL_Clear>
 800f838:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f83c:	f7fb ff12 	bl	800b664 <PID_HandleInit>
 800f840:	2300      	movs	r3, #0
 800f842:	8263      	strh	r3, [r4, #18]
 800f844:	bd38      	pop	{r3, r4, r5, pc}
 800f846:	462a      	mov	r2, r5
 800f848:	4608      	mov	r0, r1
 800f84a:	e7ea      	b.n	800f822 <STO_PLL_Init+0x42>
 800f84c:	000fea5e 	.word	0x000fea5e
 800f850:	06488dc5 	.word	0x06488dc5

0800f854 <STO_PLL_IsObserverConverged>:
 800f854:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800f858:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
 800f85c:	4603      	mov	r3, r0
 800f85e:	b10a      	cbz	r2, 800f864 <STO_PLL_IsObserverConverged+0x10>
 800f860:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f864:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800f868:	2800      	cmp	r0, #0
 800f86a:	d143      	bne.n	800f8f4 <STO_PLL_IsObserverConverged+0xa0>
 800f86c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f870:	b430      	push	{r4, r5}
 800f872:	fb02 f501 	mul.w	r5, r2, r1
 800f876:	2d00      	cmp	r5, #0
 800f878:	460c      	mov	r4, r1
 800f87a:	dd34      	ble.n	800f8e6 <STO_PLL_IsObserverConverged+0x92>
 800f87c:	2a00      	cmp	r2, #0
 800f87e:	bfbc      	itt	lt
 800f880:	4252      	neglt	r2, r2
 800f882:	b212      	sxthlt	r2, r2
 800f884:	2900      	cmp	r1, #0
 800f886:	bfbc      	itt	lt
 800f888:	4249      	neglt	r1, r1
 800f88a:	b20c      	sxthlt	r4, r1
 800f88c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800f890:	b359      	cbz	r1, 800f8ea <STO_PLL_IsObserverConverged+0x96>
 800f892:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800f896:	b291      	uxth	r1, r2
 800f898:	428d      	cmp	r5, r1
 800f89a:	d226      	bcs.n	800f8ea <STO_PLL_IsObserverConverged+0x96>
 800f89c:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800f8a0:	fb04 f101 	mul.w	r1, r4, r1
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	bfb8      	it	lt
 800f8a8:	310f      	addlt	r1, #15
 800f8aa:	f341 110f 	sbfx	r1, r1, #4, #16
 800f8ae:	428a      	cmp	r2, r1
 800f8b0:	db1b      	blt.n	800f8ea <STO_PLL_IsObserverConverged+0x96>
 800f8b2:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800f8b6:	fb04 f101 	mul.w	r1, r4, r1
 800f8ba:	2900      	cmp	r1, #0
 800f8bc:	bfb8      	it	lt
 800f8be:	310f      	addlt	r1, #15
 800f8c0:	f341 110f 	sbfx	r1, r1, #4, #16
 800f8c4:	428a      	cmp	r2, r1
 800f8c6:	dc10      	bgt.n	800f8ea <STO_PLL_IsObserverConverged+0x96>
 800f8c8:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800f8cc:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 800f8d0:	3201      	adds	r2, #1
 800f8d2:	b2d2      	uxtb	r2, r2
 800f8d4:	4291      	cmp	r1, r2
 800f8d6:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800f8da:	d804      	bhi.n	800f8e6 <STO_PLL_IsObserverConverged+0x92>
 800f8dc:	2001      	movs	r0, #1
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800f8e4:	701a      	strb	r2, [r3, #0]
 800f8e6:	bc30      	pop	{r4, r5}
 800f8e8:	4770      	bx	lr
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800f8f0:	bc30      	pop	{r4, r5}
 800f8f2:	4770      	bx	lr
 800f8f4:	2001      	movs	r0, #1
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800f8fc:	701a      	strb	r2, [r3, #0]
 800f8fe:	4770      	bx	lr

0800f900 <STO_PLL_GetEstimatedBemf>:
 800f900:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f902:	2000      	movs	r0, #0
 800f904:	b29a      	uxth	r2, r3
 800f906:	f362 000f 	bfi	r0, r2, #0, #16
 800f90a:	0c1b      	lsrs	r3, r3, #16
 800f90c:	b082      	sub	sp, #8
 800f90e:	f363 401f 	bfi	r0, r3, #16, #16
 800f912:	b002      	add	sp, #8
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop

0800f918 <STO_PLL_GetEstimatedCurrent>:
 800f918:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 800f91c:	b410      	push	{r4}
 800f91e:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800f922:	4122      	asrs	r2, r4
 800f924:	b292      	uxth	r2, r2
 800f926:	4123      	asrs	r3, r4
 800f928:	2100      	movs	r1, #0
 800f92a:	b29b      	uxth	r3, r3
 800f92c:	f362 010f 	bfi	r1, r2, #0, #16
 800f930:	f363 411f 	bfi	r1, r3, #16, #16
 800f934:	b083      	sub	sp, #12
 800f936:	4608      	mov	r0, r1
 800f938:	b003      	add	sp, #12
 800f93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <STO_PLL_GetObserverGains>:
 800f940:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f944:	800b      	strh	r3, [r1, #0]
 800f946:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800f94a:	8013      	strh	r3, [r2, #0]
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop

0800f950 <STO_PLL_SetObserverGains>:
 800f950:	8441      	strh	r1, [r0, #34]	; 0x22
 800f952:	84c2      	strh	r2, [r0, #38]	; 0x26
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop

0800f958 <STO_GetPLLGains>:
 800f958:	b570      	push	{r4, r5, r6, lr}
 800f95a:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800f95e:	4620      	mov	r0, r4
 800f960:	460e      	mov	r6, r1
 800f962:	4615      	mov	r5, r2
 800f964:	f7fb febb 	bl	800b6de <PID_GetKP>
 800f968:	8030      	strh	r0, [r6, #0]
 800f96a:	4620      	mov	r0, r4
 800f96c:	f7fb fec4 	bl	800b6f8 <PID_GetKI>
 800f970:	8028      	strh	r0, [r5, #0]
 800f972:	bd70      	pop	{r4, r5, r6, pc}

0800f974 <STO_SetPLLGains>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800f97a:	4615      	mov	r5, r2
 800f97c:	4620      	mov	r0, r4
 800f97e:	f7fb fe90 	bl	800b6a2 <PID_SetKP>
 800f982:	4629      	mov	r1, r5
 800f984:	4620      	mov	r0, r4
 800f986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f98a:	f7fb be99 	b.w	800b6c0 <PID_SetKI>
 800f98e:	bf00      	nop

0800f990 <STO_OTF_ResetPLL>:
 800f990:	6800      	ldr	r0, [r0, #0]
 800f992:	2100      	movs	r1, #0
 800f994:	3034      	adds	r0, #52	; 0x34
 800f996:	f7fb bebc 	b.w	800b712 <PID_SetIntegralTerm>
 800f99a:	bf00      	nop

0800f99c <STO_ResetPLL>:
 800f99c:	3034      	adds	r0, #52	; 0x34
 800f99e:	2100      	movs	r1, #0
 800f9a0:	f7fb beb7 	b.w	800b712 <PID_SetIntegralTerm>

0800f9a4 <STO_PLL_GetEstimatedBemfLevel>:
 800f9a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop

0800f9ac <STO_PLL_GetObservedBemfLevel>:
 800f9ac:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop

0800f9b4 <STO_PLL_IsVarianceTight>:
 800f9b4:	6803      	ldr	r3, [r0, #0]
 800f9b6:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800f9ba:	4770      	bx	lr

0800f9bc <STO_PLL_ForceConvergency1>:
 800f9bc:	6803      	ldr	r3, [r0, #0]
 800f9be:	2201      	movs	r2, #1
 800f9c0:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop

0800f9c8 <STO_PLL_ForceConvergency2>:
 800f9c8:	6803      	ldr	r3, [r0, #0]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop

0800f9d4 <__libc_init_array>:
 800f9d4:	b570      	push	{r4, r5, r6, lr}
 800f9d6:	4d0d      	ldr	r5, [pc, #52]	; (800fa0c <__libc_init_array+0x38>)
 800f9d8:	4c0d      	ldr	r4, [pc, #52]	; (800fa10 <__libc_init_array+0x3c>)
 800f9da:	1b64      	subs	r4, r4, r5
 800f9dc:	10a4      	asrs	r4, r4, #2
 800f9de:	2600      	movs	r6, #0
 800f9e0:	42a6      	cmp	r6, r4
 800f9e2:	d109      	bne.n	800f9f8 <__libc_init_array+0x24>
 800f9e4:	4d0b      	ldr	r5, [pc, #44]	; (800fa14 <__libc_init_array+0x40>)
 800f9e6:	4c0c      	ldr	r4, [pc, #48]	; (800fa18 <__libc_init_array+0x44>)
 800f9e8:	f000 f820 	bl	800fa2c <_init>
 800f9ec:	1b64      	subs	r4, r4, r5
 800f9ee:	10a4      	asrs	r4, r4, #2
 800f9f0:	2600      	movs	r6, #0
 800f9f2:	42a6      	cmp	r6, r4
 800f9f4:	d105      	bne.n	800fa02 <__libc_init_array+0x2e>
 800f9f6:	bd70      	pop	{r4, r5, r6, pc}
 800f9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9fc:	4798      	blx	r3
 800f9fe:	3601      	adds	r6, #1
 800fa00:	e7ee      	b.n	800f9e0 <__libc_init_array+0xc>
 800fa02:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa06:	4798      	blx	r3
 800fa08:	3601      	adds	r6, #1
 800fa0a:	e7f2      	b.n	800f9f2 <__libc_init_array+0x1e>
 800fa0c:	0800fd68 	.word	0x0800fd68
 800fa10:	0800fd68 	.word	0x0800fd68
 800fa14:	0800fd68 	.word	0x0800fd68
 800fa18:	0800fd6c 	.word	0x0800fd6c

0800fa1c <memset>:
 800fa1c:	4402      	add	r2, r0
 800fa1e:	4603      	mov	r3, r0
 800fa20:	4293      	cmp	r3, r2
 800fa22:	d100      	bne.n	800fa26 <memset+0xa>
 800fa24:	4770      	bx	lr
 800fa26:	f803 1b01 	strb.w	r1, [r3], #1
 800fa2a:	e7f9      	b.n	800fa20 <memset+0x4>

0800fa2c <_init>:
 800fa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2e:	bf00      	nop
 800fa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa32:	bc08      	pop	{r3}
 800fa34:	469e      	mov	lr, r3
 800fa36:	4770      	bx	lr

0800fa38 <_fini>:
 800fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa3a:	bf00      	nop
 800fa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3e:	bc08      	pop	{r3}
 800fa40:	469e      	mov	lr, r3
 800fa42:	4770      	bx	lr
