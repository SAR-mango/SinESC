
SinESC_Wing_1.0A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f910  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800fa98  0800fa98  0001fa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdbc  0800fdbc  000206e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800fdbc  0800fdbc  000206e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fdbc  0800fdbc  000206e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdbc  0800fdbc  0001fdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdc0  0800fdc0  0001fdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006e4  20000000  0800fdc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200006e4  080104a8  000206e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be0  080104a8  00020be0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206e4  2**0
                  CONTENTS, READONLY
 12 .debug_line   000267fe  00000000  00000000  00020714  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000422e9  00000000  00000000  00046f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005b30  00000000  00000000  000891fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000021f8  00000000  00000000  0008ed30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d57a9  00000000  00000000  00090f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f50  00000000  00000000  001666d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00027444  00000000  00000000  00168628  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0018fa6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008db0  00000000  00000000  0018fb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200006e4 	.word	0x200006e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fa80 	.word	0x0800fa80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006e8 	.word	0x200006e8
 80001c4:	0800fa80 	.word	0x0800fa80

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f005 fdad 	bl	8005d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f00f fc17 	bl	800fa28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 fd61 	bl	8000cc0 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000204:	0800fdc4 	.word	0x0800fdc4
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	200006e4 	.word	0x200006e4
	ldr	r2, =_sbss
 8000210:	200006e4 	.word	0x200006e4
	ldr	r3, = _ebss
 8000214:	20000be0 	.word	0x20000be0

08000218 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC3_IRQHandler>

0800021a <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0201 	orr.w	r2, r3, #1
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800023a:	b480      	push	{r7}
 800023c:	b083      	sub	sp, #12
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6a1a      	ldr	r2, [r3, #32]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	621a      	str	r2, [r3, #32]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6a1a      	ldr	r2, [r3, #32]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	43db      	mvns	r3, r3
 800028a:	401a      	ands	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	621a      	str	r2, [r3, #32]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <LL_TIM_OC_GetCompareCH2>:
  * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000314:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	f06f 0202 	mvn.w	r2, #2
 8000336:	611a      	str	r2, [r3, #16]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f043 0202 	orr.w	r2, r3, #2
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <esc_boot>:
/**
  * @brief  Boot function to initialize the ESC board.
  * @retval none.
  */
void esc_boot(ESC_Handle_t * pHandle)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pESC_params->Command_TIM;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	60fb      	str	r3, [r7, #12]
  /*##- Start the Input Capture in interrupt mode ##########################*/
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH2);
 8000374:	2110      	movs	r1, #16
 8000376:	68f8      	ldr	r0, [r7, #12]
 8000378:	f7ff ff6d 	bl	8000256 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableIT_CC1 (TIMx);
 800037c:	68f8      	ldr	r0, [r7, #12]
 800037e:	f7ff ffe1 	bl	8000344 <LL_TIM_EnableIT_CC1>
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1);
 8000382:	2101      	movs	r1, #1
 8000384:	68f8      	ldr	r0, [r7, #12]
 8000386:	f7ff ff66 	bl	8000256 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIMx);
 800038a:	68f8      	ldr	r0, [r7, #12]
 800038c:	f7ff ff45 	bl	800021a <LL_TIM_EnableCounter>
#ifdef ESC_BEEP_FEATURE
  pHandle->beep_state = SM_BEEP_1;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2201      	movs	r2, #1
 8000394:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  pHandle->phase_check_status = false;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2200      	movs	r2, #0
 800039c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
#endif
  
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <esc_pwm_run>:
  pHandle->restart_delay = STOP_DURATION;  
  pHandle->arming_counter = 0;
}

ESC_State_t esc_pwm_run(ESC_Handle_t * pHandle)
{ 
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  uint32_t new_speed;
  ESC_Params_t const * pESC_params = pHandle->pESC_params;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	60fb      	str	r3, [r7, #12]
  bool cmd_status;
  ESC_State_t ESC_Fault_Occured = ESC_NOERROR;
 80003b6:	2300      	movs	r3, #0
 80003b8:	74fb      	strb	r3, [r7, #19]
 { 
    /* First we detect that we still receive signal from PWM input */
   if(pHandle->watchdog_counter == pHandle->watchdog_counter_prev)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d10f      	bne.n	80003ea <esc_pwm_run+0x42>
   {
     if(pHandle->pwm_timeout == 0)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	6a1b      	ldr	r3, [r3, #32]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d105      	bne.n	80003de <esc_pwm_run+0x36>
     {
       /* Ton_Value is not updated anymore, set to 0 for safety*/
       pHandle->Ton_value  = 0;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2200      	movs	r2, #0
 80003d6:	629a      	str	r2, [r3, #40]	; 0x28
       ESC_Fault_Occured = ESC_NOSIGNAL;
 80003d8:	2301      	movs	r3, #1
 80003da:	74fb      	strb	r3, [r7, #19]
 80003dc:	e012      	b.n	8000404 <esc_pwm_run+0x5c>
     }
     else 
     {
       pHandle->pwm_timeout--;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6a1b      	ldr	r3, [r3, #32]
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	621a      	str	r2, [r3, #32]
 80003e8:	e00c      	b.n	8000404 <esc_pwm_run+0x5c>
     }
   }
   else 
   {
     pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	68da      	ldr	r2, [r3, #12]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	621a      	str	r2, [r3, #32]
     pHandle->watchdog_counter_prev = pHandle->watchdog_counter;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     esc_reset_pwm_ch(pHandle);
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f000 fc1a 	bl	8000c38 <esc_reset_pwm_ch>
   }  
  /* User defined code */
  switch (pHandle->sm_state)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800040a:	2b03      	cmp	r3, #3
 800040c:	f200 8111 	bhi.w	8000632 <esc_pwm_run+0x28a>
 8000410:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <esc_pwm_run+0x70>)
 8000412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000416:	bf00      	nop
 8000418:	08000429 	.word	0x08000429
 800041c:	08000491 	.word	0x08000491
 8000420:	08000529 	.word	0x08000529
 8000424:	080005e5 	.word	0x080005e5
  {
   case ESC_ARMING:
    {
      if((pHandle->Ton_value >= pESC_params->Ton_arming) && (pHandle->Ton_value < pESC_params->Ton_min)) 
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	69db      	ldr	r3, [r3, #28]
 8000430:	429a      	cmp	r2, r3
 8000432:	d324      	bcc.n	800047e <esc_pwm_run+0xd6>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	429a      	cmp	r2, r3
 800043e:	d21e      	bcs.n	800047e <esc_pwm_run+0xd6>
      {
        pHandle->arming_counter++;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	61da      	str	r2, [r3, #28]
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	69da      	ldr	r2, [r3, #28]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	429a      	cmp	r2, r3
 8000454:	d91b      	bls.n	800048e <esc_pwm_run+0xe6>
         {
           pHandle->sm_state = ESC_ARMED;   
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2201      	movs	r2, #1
 800045a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
           pHandle->arming_counter  = 0;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2200      	movs	r2, #0
 8000462:	61da      	str	r2, [r3, #28]
           pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	68da      	ldr	r2, [r3, #12]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	621a      	str	r2, [r3, #32]
           pHandle->watchdog_counter = 0;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2200      	movs	r2, #0
 8000470:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
           pHandle->watchdog_counter_prev = 0;   
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2200      	movs	r2, #0
 8000478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 800047c:	e007      	b.n	800048e <esc_pwm_run+0xe6>
         }
      }
      else 
       {
         pHandle->sm_state = ESC_ARMING;          
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
         pHandle->arming_counter  = 0;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
       }
      }
    break;  
 800048c:	e0d1      	b.n	8000632 <esc_pwm_run+0x28a>
 800048e:	e0d0      	b.n	8000632 <esc_pwm_run+0x28a>
   case ESC_ARMED:
    {
      if (pHandle->Ton_value >= pESC_params->Ton_min)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	429a      	cmp	r2, r3
 800049a:	d336      	bcc.n	800050a <esc_pwm_run+0x162>
        /* Next state */
        /* This command sets what will be the first speed ramp after the 
          MC_StartMotor1 command. It requires as first parameter the 
          target mechanical speed in thenth of Hz and as
          second parameter the speed ramp duration in milliseconds. */
        MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (pESC_params->speed_min_valueRPM/6), 0 );
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004a2:	461a      	mov	r2, r3
 80004a4:	4b65      	ldr	r3, [pc, #404]	; (800063c <esc_pwm_run+0x294>)
 80004a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80004ae:	4a64      	ldr	r2, [pc, #400]	; (8000640 <esc_pwm_run+0x298>)
 80004b0:	fba2 2303 	umull	r2, r3, r2, r3
 80004b4:	089b      	lsrs	r3, r3, #2
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	b21b      	sxth	r3, r3
 80004ba:	2200      	movs	r2, #0
 80004bc:	4619      	mov	r1, r3
 80004be:	f001 fa2e 	bl	800191e <MCI_ExecSpeedRamp>
        
        /* This is a user command used to start the motor. The speed ramp shall be
          pre programmed before the command.*/
        cmd_status = MCI_StartMotor( pMCI[pESC_params->motor] );
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b5c      	ldr	r3, [pc, #368]	; (800063c <esc_pwm_run+0x294>)
 80004cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fa7a 	bl	80019ca <MCI_StartMotor>
 80004d6:	4603      	mov	r3, r0
 80004d8:	72fb      	strb	r3, [r7, #11]
      
        /* It verifies if the command  "MCI_StartMotor" is successfully executed 
          otherwise it tries to restart the procedure */
        if(cmd_status==false)    
 80004da:	7afb      	ldrb	r3, [r7, #11]
 80004dc:	f083 0301 	eor.w	r3, r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d004      	beq.n	80004f0 <esc_pwm_run+0x148>
        {
          pHandle->sm_state = ESC_ARMING;                       // Command NOT executed
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2200      	movs	r2, #0
 80004ea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80004ee:	e007      	b.n	8000500 <esc_pwm_run+0x158>
        }
        else 
        {
          pHandle->sm_state = ESC_POSITIVE_RUN;              // Command executed
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2202      	movs	r2, #2
 80004f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          /* From this point the motor is spinning and stop and restart requires STOP_DURATION delay*/
          pHandle->restart_delay = STOP_DURATION; 
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80004fe:	859a      	strh	r2, [r3, #44]	; 0x2c
        }
        pHandle->restart_delay = STOP_DURATION;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000506:	859a      	strh	r2, [r3, #44]	; 0x2c
          /* Nothing to do stay in ARMED state waiting for TON > TON_MIN*/
        }
      }
        
    }
    break;  
 8000508:	e090      	b.n	800062c <esc_pwm_run+0x284>
        if (pHandle->Ton_value < pESC_params->Ton_arming)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	429a      	cmp	r2, r3
 8000514:	f080 808a 	bcs.w	800062c <esc_pwm_run+0x284>
          pHandle->sm_state = ESC_ARMING;          
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          pHandle->arming_counter  = 0;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
    break;  
 8000526:	e081      	b.n	800062c <esc_pwm_run+0x284>
   case ESC_POSITIVE_RUN:
    {  
      if( pHandle->Ton_value < pESC_params->Ton_min)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	429a      	cmp	r2, r3
 8000532:	d21c      	bcs.n	800056e <esc_pwm_run+0x1c6>
      {
        pHandle->turnoff_delay --;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
        if(pHandle->turnoff_delay <= 0)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000542:	2b00      	cmp	r3, #0
 8000544:	dc74      	bgt.n	8000630 <esc_pwm_run+0x288>
        {
          pHandle->sm_state = ESC_STOP; 
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2203      	movs	r2, #3
 800054a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	625a      	str	r2, [r3, #36]	; 0x24
          /* This is a user command to stop the motor */
          MCI_StopMotor( pMCI[pESC_params->motor] );
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800055e:	461a      	mov	r2, r3
 8000560:	4b36      	ldr	r3, [pc, #216]	; (800063c <esc_pwm_run+0x294>)
 8000562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fa46 	bl	80019f8 <MCI_StopMotor>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );     
        }
      }
    }
      
   break;
 800056c:	e060      	b.n	8000630 <esc_pwm_run+0x288>
        pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	625a      	str	r2, [r3, #36]	; 0x24
        if(pHandle->Ton_value <= pESC_params->Ton_max)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	695b      	ldr	r3, [r3, #20]
 8000580:	429a      	cmp	r2, r3
 8000582:	d815      	bhi.n	80005b0 <esc_pwm_run+0x208>
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_min) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_max) + pESC_params->speed_min_valueRPM;  
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000592:	4611      	mov	r1, r2
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000598:	1a8a      	subs	r2, r1, r2
 800059a:	fb02 f203 	mul.w	r2, r2, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6a1b      	ldr	r3, [r3, #32]
 80005a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80005aa:	4413      	add	r3, r2
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	e002      	b.n	80005b6 <esc_pwm_run+0x20e>
          new_speed = pESC_params->speed_max_valueRPM;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005b4:	617b      	str	r3, [r7, #20]
        if (MC_GetSTMStateMotor1() == RUN)
 80005b6:	f001 f981 	bl	80018bc <MC_GetSTMStateMotor1>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b06      	cmp	r3, #6
 80005be:	d137      	bne.n	8000630 <esc_pwm_run+0x288>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );     
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80005c6:	461a      	mov	r2, r3
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <esc_pwm_run+0x294>)
 80005ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80005ce:	697b      	ldr	r3, [r7, #20]
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <esc_pwm_run+0x298>)
 80005d2:	fba2 2303 	umull	r2, r3, r2, r3
 80005d6:	089b      	lsrs	r3, r3, #2
 80005d8:	b21b      	sxth	r3, r3
 80005da:	2232      	movs	r2, #50	; 0x32
 80005dc:	4619      	mov	r1, r3
 80005de:	f001 f99e 	bl	800191e <MCI_ExecSpeedRamp>
   break;
 80005e2:	e025      	b.n	8000630 <esc_pwm_run+0x288>
   case ESC_STOP:
    {    
       /* After the time "STOP_DURATION" the motor will be restarted */
       if (pHandle->restart_delay == 0)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d114      	bne.n	8000618 <esc_pwm_run+0x270>
          {
            /* Next state */ 
            pHandle->sm_state = ESC_ARMING;  
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
            pHandle->Ton_value  = 0;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	; 0x28
            pHandle->arming_counter = 0;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
            pHandle->buffer_completed = false;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            pHandle->index_filter = 0;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
             pHandle->pwm_accumulator = 0;  
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
          else
          {
            pHandle->restart_delay--;
          }
    }
    break;  
 8000616:	e00c      	b.n	8000632 <esc_pwm_run+0x28a>
            pHandle->restart_delay--;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800061e:	b29b      	uxth	r3, r3
 8000620:	3b01      	subs	r3, #1
 8000622:	b29b      	uxth	r3, r3
 8000624:	b21a      	sxth	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;  
 800062a:	e002      	b.n	8000632 <esc_pwm_run+0x28a>
    break;  
 800062c:	bf00      	nop
 800062e:	e000      	b.n	8000632 <esc_pwm_run+0x28a>
   break;
 8000630:	bf00      	nop
  }
 }
 return (ESC_Fault_Occured);
 8000632:	7cfb      	ldrb	r3, [r7, #19]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3718      	adds	r7, #24
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000ae8 	.word	0x20000ae8
 8000640:	aaaaaaab 	.word	0xaaaaaaab

08000644 <esc_pwm_control>:
  * @brief  This is the main function to use in the main.c in order to start the current example 
  * @param  None
  * @retval None
  */
void esc_pwm_control(ESC_Handle_t * pHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
   ESC_State_t ESC_Fault_Occured;
 
  if(UI_IdleTimeHasElapsed()) {
 800064c:	f004 f9d2 	bl	80049f4 <UI_IdleTimeHasElapsed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d03f      	beq.n	80006d6 <esc_pwm_control+0x92>
    UI_SetIdleTime(USER_TIMEBASE_OCCURENCE_TICKS);   
 8000656:	2004      	movs	r0, #4
 8000658:	f004 f9e2 	bl	8004a20 <UI_SetIdleTime>
#ifdef ESC_BEEP_FEATURE    
    if ( pHandle->phase_check_status == false)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000662:	f083 0301 	eor.w	r3, r3, #1
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d008      	beq.n	800067e <esc_pwm_control+0x3a>
    {
      pHandle->phase_check_status = esc_phase_check (pHandle);
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f9c5 	bl	80009fc <esc_phase_check>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      {
       /* Nothing to do */
      }
    }
  }
}
 800067c:	e02b      	b.n	80006d6 <esc_pwm_control+0x92>
      if (MC_GetSTMStateMotor1() == FAULT_OVER)
 800067e:	f001 f91d 	bl	80018bc <MC_GetSTMStateMotor1>
 8000682:	4603      	mov	r3, r0
 8000684:	2b0b      	cmp	r3, #11
 8000686:	d115      	bne.n	80006b4 <esc_pwm_control+0x70>
       if (MC_GetOccurredFaultsMotor1() == MC_UNDER_VOLT)
 8000688:	f001 f90c 	bl	80018a4 <MC_GetOccurredFaultsMotor1>
 800068c:	4603      	mov	r3, r0
 800068e:	2b04      	cmp	r3, #4
 8000690:	d107      	bne.n	80006a2 <esc_pwm_control+0x5e>
         pHandle->phase_check_status = false;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
         pHandle-> start_check_flag = false;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
       MC_AcknowledgeFaultMotor1();
 80006a2:	f001 f8f3 	bl	800188c <MC_AcknowledgeFaultMotor1>
       pHandle->sm_state = ESC_ARMING;   
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
       pHandle->arming_counter  = 0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
      ESC_Fault_Occured = esc_pwm_run(pHandle);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fe77 	bl	80003a8 <esc_pwm_run>
 80006ba:	4603      	mov	r3, r0
 80006bc:	73fb      	strb	r3, [r7, #15]
      if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d108      	bne.n	80006d6 <esc_pwm_control+0x92>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d103      	bne.n	80006d6 <esc_pwm_control+0x92>
        esc_beep_loop(pHandle, 1);
 80006ce:	2101      	movs	r1, #1
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f889 	bl	80007e8 <esc_beep_loop>
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <esc_capture_filter>:

static uint32_t esc_capture_filter(ESC_Handle_t * pHandle, uint32_t capture_value)
{ 
 80006e0:	b480      	push	{r7}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
uint32_t pwm_filtered;
uint32_t pwm_max =0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]

  if(pHandle->buffer_completed == false)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80006f4:	f083 0301 	eor.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d024      	beq.n	8000748 <esc_capture_filter+0x68>
  {
     pHandle->pwm_accumulator += capture_value;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699a      	ldr	r2, [r3, #24]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	441a      	add	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	619a      	str	r2, [r3, #24]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	605a      	str	r2, [r3, #4]
     pHandle->index_filter++;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	615a      	str	r2, [r3, #20]
     pwm_filtered = pHandle->pwm_accumulator/pHandle->index_filter;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	617b      	str	r3, [r7, #20]
     if(pHandle->index_filter >= ESC_FILTER_DEEP) 
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	2b03      	cmp	r3, #3
 8000736:	d947      	bls.n	80007c8 <esc_capture_filter+0xe8>
       {
         pHandle->index_filter = 0;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
         pHandle->buffer_completed = true;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2201      	movs	r2, #1
 8000742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8000746:	e03f      	b.n	80007c8 <esc_capture_filter+0xe8>
       }
  }  
  else
  {
     /* We compute moving average, index_filter is the first data to remove*/
     pHandle->pwm_accumulator -= pHandle->pwm_buffer[pHandle->index_filter];
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	699a      	ldr	r2, [r3, #24]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	1ad2      	subs	r2, r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	619a      	str	r2, [r3, #24]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	4413      	add	r3, r2
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	605a      	str	r2, [r3, #4]
     pHandle->pwm_accumulator += capture_value;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	699a      	ldr	r2, [r3, #24]
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	441a      	add	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	619a      	str	r2, [r3, #24]
     for (uint8_t i =0; i< ESC_FILTER_DEEP; i++)
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e00c      	b.n	8000798 <esc_capture_filter+0xb8>
     {
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4293      	cmp	r3, r2
 800078c:	bf38      	it	cc
 800078e:	4613      	movcc	r3, r2
 8000790:	613b      	str	r3, [r7, #16]
     for (uint8_t i =0; i< ESC_FILTER_DEEP; i++)
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	3301      	adds	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d9ef      	bls.n	800077e <esc_capture_filter+0x9e>
     }
     pHandle->index_filter++;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	615a      	str	r2, [r3, #20]
     if(pHandle->index_filter >= ESC_FILTER_DEEP)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d902      	bls.n	80007b6 <esc_capture_filter+0xd6>
     {
      pHandle->index_filter = 0;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
     }
     /* Remove the max pwm input from the average computation*/
     pwm_filtered = (pHandle->pwm_accumulator - pwm_max ) / (ESC_FILTER_DEEP -1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	699a      	ldr	r2, [r3, #24]
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <esc_capture_filter+0x104>)
 80007c0:	fba2 2303 	umull	r2, r3, r2, r3
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  }
  pwm_filtered = (pwm_filtered==0) ? 1 : pwm_filtered ;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <esc_capture_filter+0xf2>
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	e000      	b.n	80007d4 <esc_capture_filter+0xf4>
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  
return(pwm_filtered);
 80007d6:	697b      	ldr	r3, [r7, #20]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	aaaaaaab 	.word	0xaaaaaaab

080007e8 <esc_beep_loop>:

#ifdef ESC_BEEP_FEATURE

static bool esc_beep_loop(ESC_Handle_t * pHandle, uint16_t number_beep)
{ 
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60bb      	str	r3, [r7, #8]
  
   bool ESC_Beep_loop_STATUS = false;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]
        
 /* TIMx Peripheral Configuration -------------------------------------------*/     
  if( pHandle-> start_check_flag == false)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000806:	f083 0301 	eor.w	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d017      	beq.n	8000840 <esc_beep_loop+0x58>
  {
     pHandle-> start_check_flag = true;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
     ESC_Beep_loop_STATUS = false;
 8000818:	2300      	movs	r3, #0
 800081a:	73fb      	strb	r3, [r7, #15]
   
    /* Set the Output State */
    LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR);
 800081c:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000820:	68b8      	ldr	r0, [r7, #8]
 8000822:	f7ff fd0a 	bl	800023a <LL_TIM_SetAutoReload>

    LL_TIM_CC_DisableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000826:	f240 5155 	movw	r1, #1365	; 0x555
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f7ff fd24 	bl	8000278 <LL_TIM_CC_DisableChannel>
                                   | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N 
                                   | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N);
    
    LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000830:	f240 1111 	movw	r1, #273	; 0x111
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f7ff fd0e 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                   | LL_TIM_CHANNEL_CH3 );
    
    LL_TIM_EnableAllOutputs (TIMx);
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fd64 	bl	8000308 <LL_TIM_EnableAllOutputs>
  }  
 { 
  /* User defined code */
  switch (pHandle->beep_state)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000846:	2b03      	cmp	r3, #3
 8000848:	f000 8087 	beq.w	800095a <esc_beep_loop+0x172>
 800084c:	2b04      	cmp	r3, #4
 800084e:	f000 809e 	beq.w	800098e <esc_beep_loop+0x1a6>
 8000852:	2b01      	cmp	r3, #1
 8000854:	f040 80cd 	bne.w	80009f2 <esc_beep_loop+0x20a>
  {
   case SM_BEEP_1:
    { 
      if(pHandle->beep_counter == 0)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800085c:	2b00      	cmp	r3, #0
 800085e:	d118      	bne.n	8000892 <esc_beep_loop+0xaa>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_DUTY);
 8000860:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f7ff fd19 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_FREQ_ARR);
 800086a:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f7ff fd22 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_FREQ_ARR);
 8000874:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000878:	68b8      	ldr	r0, [r7, #8]
 800087a:	f7ff fd2b 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 );
 800087e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000882:	68b8      	ldr	r0, [r7, #8]
 8000884:	f7ff fcf8 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N
 8000888:	f240 4145 	movw	r1, #1093	; 0x445
 800088c:	68b8      	ldr	r0, [r7, #8]
 800088e:	f7ff fce2 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N));
      }
      pHandle->beep_counter++;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000896:	3301      	adds	r3, #1
 8000898:	b29a      	uxth	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > BEEP_TIME_MAX)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80008a2:	2b64      	cmp	r3, #100	; 0x64
 80008a4:	f240 80a0 	bls.w	80009e8 <esc_beep_loop+0x200>
      {
        if(number_beep == 1)
 80008a8:	887b      	ldrh	r3, [r7, #2]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d107      	bne.n	80008be <esc_beep_loop+0xd6>
        {
          pHandle->beep_stop_time = 570;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f240 223a 	movw	r2, #570	; 0x23a
 80008b4:	85da      	strh	r2, [r3, #46]	; 0x2e
          pHandle->beep_state =  SM_BEEP_4; 
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2204      	movs	r2, #4
 80008ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        }
        if(number_beep == 2)
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d121      	bne.n	8000908 <esc_beep_loop+0x120>
        {
          pHandle->beep_num ++;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80008ca:	3301      	adds	r3, #1
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          if(pHandle->beep_num <= 2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d808      	bhi.n	80008f0 <esc_beep_loop+0x108>
          {
          LL_TIM_OC_SetCompareCH1 (TIMx,0);  
 80008de:	2100      	movs	r1, #0
 80008e0:	68b8      	ldr	r0, [r7, #8]
 80008e2:	f7ff fcdb 	bl	800029c <LL_TIM_OC_SetCompareCH1>
          pHandle->beep_state =  SM_BEEP_3; 
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2203      	movs	r2, #3
 80008ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80008ee:	e00b      	b.n	8000908 <esc_beep_loop+0x120>
          }
          else 
          {
            pHandle->beep_stop_time = 410;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80008f6:	85da      	strh	r2, [r3, #46]	; 0x2e
            pHandle->beep_state = SM_BEEP_4;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2204      	movs	r2, #4
 80008fc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            pHandle->beep_num = 1;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2201      	movs	r2, #1
 8000904:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          }
        } 
        if(number_beep == 3)
 8000908:	887b      	ldrh	r3, [r7, #2]
 800090a:	2b03      	cmp	r3, #3
 800090c:	d121      	bne.n	8000952 <esc_beep_loop+0x16a>
        {
          pHandle->beep_num ++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000914:	3301      	adds	r3, #1
 8000916:	b2da      	uxtb	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          if(pHandle->beep_num <= 3)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000924:	2b03      	cmp	r3, #3
 8000926:	d808      	bhi.n	800093a <esc_beep_loop+0x152>
          {
          LL_TIM_OC_SetCompareCH1 (TIMx,0); 
 8000928:	2100      	movs	r1, #0
 800092a:	68b8      	ldr	r0, [r7, #8]
 800092c:	f7ff fcb6 	bl	800029c <LL_TIM_OC_SetCompareCH1>
          pHandle->beep_state =  SM_BEEP_3; 
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2203      	movs	r2, #3
 8000934:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8000938:	e00b      	b.n	8000952 <esc_beep_loop+0x16a>
          }
          else 
          {
            pHandle->beep_stop_time = 270;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000940:	85da      	strh	r2, [r3, #46]	; 0x2e
            pHandle->beep_state = SM_BEEP_4;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2204      	movs	r2, #4
 8000946:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
            pHandle->beep_num = 1;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
          }
        }         
       pHandle->beep_counter = 0;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	861a      	strh	r2, [r3, #48]	; 0x30
      }
    }
   break; 
 8000958:	e046      	b.n	80009e8 <esc_beep_loop+0x200>
  case SM_BEEP_3:
    {
    if(pHandle->beep_counter == 0)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800095e:	2b00      	cmp	r3, #0
 8000960:	d103      	bne.n	800096a <esc_beep_loop+0x182>
      {
         LL_TIM_OC_SetCompareCH1 (TIMx,0); 
 8000962:	2100      	movs	r1, #0
 8000964:	68b8      	ldr	r0, [r7, #8]
 8000966:	f7ff fc99 	bl	800029c <LL_TIM_OC_SetCompareCH1>
      }
      pHandle->beep_counter++;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800096e:	3301      	adds	r3, #1
 8000970:	b29a      	uxth	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > 50)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800097a:	2b32      	cmp	r3, #50	; 0x32
 800097c:	d936      	bls.n	80009ec <esc_beep_loop+0x204>
      {
        pHandle->beep_state =  SM_BEEP_1; 
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	861a      	strh	r2, [r3, #48]	; 0x30
      }
    }
   break;      
 800098c:	e02e      	b.n	80009ec <esc_beep_loop+0x204>
   case SM_BEEP_4:
    {
    if(pHandle->beep_counter == 0)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10b      	bne.n	80009ae <esc_beep_loop+0x1c6>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,0);        
 8000996:	2100      	movs	r1, #0
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f7ff fc7f 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,0);  
 800099e:	2100      	movs	r1, #0
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f7ff fc89 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,0); 
 80009a6:	2100      	movs	r1, #0
 80009a8:	68b8      	ldr	r0, [r7, #8]
 80009aa:	f7ff fc93 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
      }
      pHandle->beep_counter++;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80009b2:	3301      	adds	r3, #1
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > pHandle->beep_stop_time)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d914      	bls.n	80009f0 <esc_beep_loop+0x208>
      {
        pHandle->beep_state =  SM_BEEP_1; 
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	861a      	strh	r2, [r3, #48]	; 0x30
        esc_reset_pwm_ch(pHandle);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f92f 	bl	8000c38 <esc_reset_pwm_ch>
        pHandle-> start_check_flag = false;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ESC_Beep_loop_STATUS = true;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
      }
    }
   break;   
 80009e6:	e003      	b.n	80009f0 <esc_beep_loop+0x208>
   break; 
 80009e8:	bf00      	nop
 80009ea:	e002      	b.n	80009f2 <esc_beep_loop+0x20a>
   break;      
 80009ec:	bf00      	nop
 80009ee:	e000      	b.n	80009f2 <esc_beep_loop+0x20a>
   break;   
 80009f0:	bf00      	nop
  }
 }
 return (ESC_Beep_loop_STATUS);
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <esc_phase_check>:

static bool esc_phase_check(ESC_Handle_t * pHandle)
{ 
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
   TIM_TypeDef * TIMx = pHandle->pESC_params->Motor_TIM;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	60bb      	str	r3, [r7, #8]
   bool ESC_phase_check_status = false;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]
 
 /* TIMx Peripheral Configuration -------------------------------------------*/    
  if(pHandle-> start_check_flag == false)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a16:	f083 0301 	eor.w	r3, r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d01e      	beq.n	8000a5e <esc_phase_check+0x62>
  {
    pHandle-> start_check_flag = true;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2201      	movs	r2, #1
 8000a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* Set the Output State */
    ESC_phase_check_status = false;   
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
    LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR);
 8000a2c:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000a30:	68b8      	ldr	r0, [r7, #8]
 8000a32:	f7ff fc02 	bl	800023a <LL_TIM_SetAutoReload>
    
    LL_TIM_CC_DisableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000a36:	f240 5155 	movw	r1, #1365	; 0x555
 8000a3a:	68b8      	ldr	r0, [r7, #8]
 8000a3c:	f7ff fc1c 	bl	8000278 <LL_TIM_CC_DisableChannel>
                                   | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N 
                                   | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N);
  
    LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000a40:	f240 1111 	movw	r1, #273	; 0x111
 8000a44:	68b8      	ldr	r0, [r7, #8]
 8000a46:	f7ff fc06 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                   | LL_TIM_CHANNEL_CH3 );
    
    LL_TIM_EnableAllOutputs (TIMx);
 8000a4a:	68b8      	ldr	r0, [r7, #8]
 8000a4c:	f7ff fc5c 	bl	8000308 <LL_TIM_EnableAllOutputs>
    pHandle->beep_state = SM_BEEP_1;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2201      	movs	r2, #1
 8000a54:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    pHandle->beep_counter = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	861a      	strh	r2, [r3, #48]	; 0x30

  }  
 { 
  /* User defined code */
  switch (pHandle->beep_state)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a64:	3b01      	subs	r3, #1
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	f200 80e0 	bhi.w	8000c2c <esc_phase_check+0x230>
 8000a6c:	a201      	add	r2, pc, #4	; (adr r2, 8000a74 <esc_phase_check+0x78>)
 8000a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a72:	bf00      	nop
 8000a74:	08000a85 	.word	0x08000a85
 8000a78:	08000af7 	.word	0x08000af7
 8000a7c:	08000b69 	.word	0x08000b69
 8000a80:	08000bc7 	.word	0x08000bc7
  {
   case SM_BEEP_1:
    { 
      if(pHandle->beep_counter == 0)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d117      	bne.n	8000abc <esc_phase_check+0xc0>
      {
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_DUTY); 
 8000a8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a90:	68b8      	ldr	r0, [r7, #8]
 8000a92:	f7ff fc1f 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_FREQ_ARR);
 8000a96:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000a9a:	68b8      	ldr	r0, [r7, #8]
 8000a9c:	f7ff fc0c 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_FREQ_ARR);
 8000aa0:	f64f 51e8 	movw	r1, #65000	; 0xfde8
 8000aa4:	68b8      	ldr	r0, [r7, #8]
 8000aa6:	f7ff fbf9 	bl	800029c <LL_TIM_OC_SetCompareCH1>

        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2 );
 8000aaa:	2111      	movs	r1, #17
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	f7ff fbe3 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH1N | LL_TIM_CHANNEL_CH2N
 8000ab2:	f240 5144 	movw	r1, #1348	; 0x544
 8000ab6:	68b8      	ldr	r0, [r7, #8]
 8000ab8:	f7ff fbcd 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH3N | LL_TIM_CHANNEL_CH3));        

      }
      pHandle->beep_counter++;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	861a      	strh	r2, [r3, #48]	; 0x30
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000acc:	2b64      	cmp	r3, #100	; 0x64
 8000ace:	f240 80a6 	bls.w	8000c1e <esc_phase_check+0x222>
      {
        pHandle->beep_state =  SM_BEEP_2; 
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	861a      	strh	r2, [r3, #48]	; 0x30
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_DUTY);
 8000ae0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	f7ff fbe7 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR1);
 8000aea:	f24f 2130 	movw	r1, #62000	; 0xf230
 8000aee:	68b8      	ldr	r0, [r7, #8]
 8000af0:	f7ff fba3 	bl	800023a <LL_TIM_SetAutoReload>
      }
    }
   break; 
 8000af4:	e093      	b.n	8000c1e <esc_phase_check+0x222>
   case SM_BEEP_2:
    {
    if(pHandle->beep_counter == 0)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d118      	bne.n	8000b30 <esc_phase_check+0x134>
      {
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_DUTY);
 8000afe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b02:	68b8      	ldr	r0, [r7, #8]
 8000b04:	f7ff fbd8 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_FREQ_ARR1);
 8000b08:	f24f 2130 	movw	r1, #62000	; 0xf230
 8000b0c:	68b8      	ldr	r0, [r7, #8]
 8000b0e:	f7ff fbc5 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_FREQ_ARR1);
 8000b12:	f24f 2130 	movw	r1, #62000	; 0xf230
 8000b16:	68b8      	ldr	r0, [r7, #8]
 8000b18:	f7ff fbdc 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1 );
 8000b1c:	f240 1101 	movw	r1, #257	; 0x101
 8000b20:	68b8      	ldr	r0, [r7, #8]
 8000b22:	f7ff fba9 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH3N | LL_TIM_CHANNEL_CH1N
 8000b26:	f240 4154 	movw	r1, #1108	; 0x454
 8000b2a:	68b8      	ldr	r0, [r7, #8]
 8000b2c:	f7ff fb93 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH2N));
      }
      pHandle->beep_counter++;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b34:	3301      	adds	r3, #1
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b40:	2b64      	cmp	r3, #100	; 0x64
 8000b42:	d96e      	bls.n	8000c22 <esc_phase_check+0x226>
      {
        pHandle->beep_state =  SM_BEEP_3; 
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2203      	movs	r2, #3
 8000b48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	861a      	strh	r2, [r3, #48]	; 0x30
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_DUTY);
 8000b52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b56:	68b8      	ldr	r0, [r7, #8]
 8000b58:	f7ff fba0 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_SetAutoReload (TIMx, BEEP_FREQ_ARR2);          
 8000b5c:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8000b60:	68b8      	ldr	r0, [r7, #8]
 8000b62:	f7ff fb6a 	bl	800023a <LL_TIM_SetAutoReload>
      }
    }
   break;  
 8000b66:	e05c      	b.n	8000c22 <esc_phase_check+0x226>
   case SM_BEEP_3:
    {
    if(pHandle->beep_counter == 0)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d118      	bne.n	8000ba2 <esc_phase_check+0x1a6>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,BEEP_DUTY);
 8000b70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b74:	68b8      	ldr	r0, [r7, #8]
 8000b76:	f7ff fb91 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,BEEP_FREQ_ARR2);
 8000b7a:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8000b7e:	68b8      	ldr	r0, [r7, #8]
 8000b80:	f7ff fb9a 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,BEEP_FREQ_ARR2);
 8000b84:	f24d 61d8 	movw	r1, #55000	; 0xd6d8
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f7ff fba3 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
        LL_TIM_CC_DisableChannel (TIMx,LL_TIM_CHANNEL_CH2 | LL_TIM_CHANNEL_CH3 );
 8000b8e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000b92:	68b8      	ldr	r0, [r7, #8]
 8000b94:	f7ff fb70 	bl	8000278 <LL_TIM_CC_DisableChannel>
        LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N
 8000b98:	f240 4145 	movw	r1, #1093	; 0x445
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f7ff fb5a 	bl	8000256 <LL_TIM_CC_EnableChannel>
                                     | LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH1N));       
      }
      pHandle->beep_counter++;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > BEEP_TIME_MAX_CHECK)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bb2:	2b64      	cmp	r3, #100	; 0x64
 8000bb4:	d937      	bls.n	8000c26 <esc_phase_check+0x22a>
      {
        pHandle->beep_state =  SM_BEEP_4; 
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2204      	movs	r2, #4
 8000bba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	861a      	strh	r2, [r3, #48]	; 0x30
      }    
    }
   break;  
 8000bc4:	e02f      	b.n	8000c26 <esc_phase_check+0x22a>
   case SM_BEEP_4:
    {
    if(pHandle->beep_counter == 0)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10b      	bne.n	8000be6 <esc_phase_check+0x1ea>
      {
        LL_TIM_OC_SetCompareCH1 (TIMx,0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fb63 	bl	800029c <LL_TIM_OC_SetCompareCH1>
        LL_TIM_OC_SetCompareCH2 (TIMx,0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	68b8      	ldr	r0, [r7, #8]
 8000bda:	f7ff fb6d 	bl	80002b8 <LL_TIM_OC_SetCompareCH2>
        LL_TIM_OC_SetCompareCH3 (TIMx,0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	68b8      	ldr	r0, [r7, #8]
 8000be2:	f7ff fb77 	bl	80002d4 <LL_TIM_OC_SetCompareCH3>
      }
      pHandle->beep_counter++;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	861a      	strh	r2, [r3, #48]	; 0x30
      
      if(pHandle->beep_counter > 1000)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bfa:	d916      	bls.n	8000c2a <esc_phase_check+0x22e>
      {
        pHandle->beep_state =  SM_BEEP_1; 
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
        pHandle->beep_counter = 0; 
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	861a      	strh	r2, [r3, #48]	; 0x30
        esc_reset_pwm_ch(pHandle);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f000 f814 	bl	8000c38 <esc_reset_pwm_ch>
        pHandle-> start_check_flag = false;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ESC_phase_check_status = true;       
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
      }
    }
   break;    
 8000c1c:	e005      	b.n	8000c2a <esc_phase_check+0x22e>
   break; 
 8000c1e:	bf00      	nop
 8000c20:	e004      	b.n	8000c2c <esc_phase_check+0x230>
   break;  
 8000c22:	bf00      	nop
 8000c24:	e002      	b.n	8000c2c <esc_phase_check+0x230>
   break;  
 8000c26:	bf00      	nop
 8000c28:	e000      	b.n	8000c2c <esc_phase_check+0x230>
   break;    
 8000c2a:	bf00      	nop
  }
 }
 return(ESC_phase_check_status);
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop

08000c38 <esc_reset_pwm_ch>:

#endif // ESC_BEEP_FEATURE

static void esc_reset_pwm_ch(ESC_Handle_t * pHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    TIM_TypeDef * TIMx = TIM1;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <esc_reset_pwm_ch+0x34>)
 8000c42:	60fb      	str	r3, [r7, #12]

    LL_TIM_CC_DisableChannel (TIMx, (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000c44:	f240 5155 	movw	r1, #1365	; 0x555
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f7ff fb15 	bl	8000278 <LL_TIM_CC_DisableChannel>
                           | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N
                           | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N ) );

    LL_TIM_SetAutoReload (TIMx, ((PWM_PERIOD_CYCLES) / 2));
 8000c4e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000c52:	68f8      	ldr	r0, [r7, #12]
 8000c54:	f7ff faf1 	bl	800023a <LL_TIM_SetAutoReload>
   
    /* Set the Output State */ 
    LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000c58:	f240 5155 	movw	r1, #1365	; 0x555
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f7ff fafa 	bl	8000256 <LL_TIM_CC_EnableChannel>
                           | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N
                           | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N ));
}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <TIM2_IRQHandler>:
  * @param  None
  * @retval None
  */

void TIM2_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* Clear TIM1 Capture compare interrupt pending bit */
  LL_TIM_ClearFlag_CC1 (TIM2);
 8000c74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c78:	f7ff fb56 	bl	8000328 <LL_TIM_ClearFlag_CC1>

  /* Get Pulse width and low pass filter it to remove spurious informations */    
  ESC_M1.Ton_value = esc_capture_filter(&ESC_M1, LL_TIM_OC_GetCompareCH2(TIM2));
 8000c7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c80:	f7ff fb36 	bl	80002f0 <LL_TIM_OC_GetCompareCH2>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4619      	mov	r1, r3
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <TIM2_IRQHandler+0x4c>)
 8000c8a:	f7ff fd29 	bl	80006e0 <esc_capture_filter>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <TIM2_IRQHandler+0x4c>)
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fail safe mechanism: stops the motor is the PWM input is disabled */
  ESC_M1.watchdog_counter++;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <TIM2_IRQHandler+0x4c>)
 8000c96:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <TIM2_IRQHandler+0x4c>)
 8000ca0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  if(ESC_M1.watchdog_counter == 0)
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <TIM2_IRQHandler+0x4c>)
 8000ca6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d103      	bne.n	8000cb6 <TIM2_IRQHandler+0x46>
     ESC_M1.watchdog_counter = 1;
 8000cae:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <TIM2_IRQHandler+0x4c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000694 	.word	0x20000694

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc4:	f005 f85a 	bl	8005d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc8:	f000 f84c 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ccc:	f000 fcc4 	bl	8001658 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cd0:	f000 f8d2 	bl	8000e78 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000cd4:	f000 f98c 	bl	8000ff0 <MX_ADC3_Init>
  MX_COMP2_Init();
 8000cd8:	f000 fa30 	bl	800113c <MX_COMP2_Init>
  MX_COMP4_Init();
 8000cdc:	f000 fa5e 	bl	800119c <MX_COMP4_Init>
  MX_COMP6_Init();
 8000ce0:	f000 fa8c 	bl	80011fc <MX_COMP6_Init>
  MX_TIM1_Init();
 8000ce4:	f000 fb22 	bl	800132c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ce8:	f000 fc00 	bl	80014ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000cec:	f000 fc84 	bl	80015f8 <MX_USART1_UART_Init>
  MX_MotorControl_Init();
 8000cf0:	f002 feaa 	bl	8003a48 <MX_MotorControl_Init>
  MX_CAN_Init();
 8000cf4:	f000 f9ee 	bl	80010d4 <MX_CAN_Init>
  MX_DAC_Init();
 8000cf8:	f000 fab0 	bl	800125c <MX_DAC_Init>
  MX_SPI1_Init();
 8000cfc:	f000 fad8 	bl	80012b0 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000d00:	f000 f88d 	bl	8000e1e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  
  /*Initialization of Electronic Speed Controller (STEVAL-ESC001V1)*/
  esc_boot(&ESC_M1);
 8000d04:	4815      	ldr	r0, [pc, #84]	; (8000d5c <main+0x9c>)
 8000d06:	f7ff fb2d 	bl	8000364 <esc_boot>

  /* Reset the driver */
  resetDriver ();
 8000d0a:	f000 fda1 	bl	8001850 <resetDriver>
  //SPIwrite (TMC6100_GSTAT, GSTAT_Write);
  SPIread (TMC6100_IOIN, SPIRxBuf);
 8000d0e:	4914      	ldr	r1, [pc, #80]	; (8000d60 <main+0xa0>)
 8000d10:	2004      	movs	r0, #4
 8000d12:	f000 fd25 	bl	8001760 <SPIread>
  SPIread (TMC6100_GSTAT, SPIRxBuf);
 8000d16:	4912      	ldr	r1, [pc, #72]	; (8000d60 <main+0xa0>)
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f000 fd21 	bl	8001760 <SPIread>
  SPIread (TMC6100_GCONF, SPIRxBuf);
 8000d1e:	4910      	ldr	r1, [pc, #64]	; (8000d60 <main+0xa0>)
 8000d20:	2000      	movs	r0, #0
 8000d22:	f000 fd1d 	bl	8001760 <SPIread>
  SPIread (TMC6100_SHORT_CONF, SPIRxBuf);
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <main+0xa0>)
 8000d28:	2009      	movs	r0, #9
 8000d2a:	f000 fd19 	bl	8001760 <SPIread>
  SPIread (TMC6100_DRV_CONF, SPIRxBuf);
 8000d2e:	490c      	ldr	r1, [pc, #48]	; (8000d60 <main+0xa0>)
 8000d30:	200a      	movs	r0, #10
 8000d32:	f000 fd15 	bl	8001760 <SPIread>
  /* Write driver configuration to its registers through SPI */
  configureDriver ();
 8000d36:	f000 fd75 	bl	8001824 <configureDriver>

  /* DEBUG: read the registers after writing */
  SPIread (TMC6100_GCONF, SPIRxBuf);
 8000d3a:	4909      	ldr	r1, [pc, #36]	; (8000d60 <main+0xa0>)
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f000 fd0f 	bl	8001760 <SPIread>
  SPIread (TMC6100_SHORT_CONF, SPIRxBuf);
 8000d42:	4907      	ldr	r1, [pc, #28]	; (8000d60 <main+0xa0>)
 8000d44:	2009      	movs	r0, #9
 8000d46:	f000 fd0b 	bl	8001760 <SPIread>
  SPIread (TMC6100_DRV_CONF, SPIRxBuf);
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <main+0xa0>)
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f000 fd07 	bl	8001760 <SPIread>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* Main routine for Electronic Speed Controller (STEVAL-ESC001V1) */
    esc_pwm_control(&ESC_M1); 
 8000d52:	4802      	ldr	r0, [pc, #8]	; (8000d5c <main+0x9c>)
 8000d54:	f7ff fc76 	bl	8000644 <esc_pwm_control>
 8000d58:	e7fb      	b.n	8000d52 <main+0x92>
 8000d5a:	bf00      	nop
 8000d5c:	20000694 	.word	0x20000694
 8000d60:	20000730 	.word	0x20000730

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09e      	sub	sp, #120	; 0x78
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d6e:	2228      	movs	r2, #40	; 0x28
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00e fe7c 	bl	800fa70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	463b      	mov	r3, r7
 8000d8a:	223c      	movs	r2, #60	; 0x3c
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00e fe6e 	bl	800fa70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d94:	2301      	movs	r3, #1
 8000d96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da2:	2301      	movs	r3, #1
 8000da4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000db4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fea6 	bl	8007b0c <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dc6:	f000 fd59 	bl	800187c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f007 fd98 	bl	800891c <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000df2:	f000 fd43 	bl	800187c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000df6:	f241 0301 	movw	r3, #4097	; 0x1001
 8000dfa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4618      	mov	r0, r3
 8000e08:	f007 ffbe 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000e12:	f000 fd33 	bl	800187c <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3778      	adds	r7, #120	; 0x78
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2104      	movs	r1, #4
 8000e26:	2018      	movs	r0, #24
 8000e28:	f006 fc2b 	bl	8007682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e2c:	2018      	movs	r0, #24
 8000e2e:	f006 fc44 	bl	80076ba <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2019      	movs	r0, #25
 8000e38:	f006 fc23 	bl	8007682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000e3c:	2019      	movs	r0, #25
 8000e3e:	f006 fc3c 	bl	80076ba <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2102      	movs	r1, #2
 8000e46:	2012      	movs	r0, #18
 8000e48:	f006 fc1b 	bl	8007682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e4c:	2012      	movs	r0, #18
 8000e4e:	f006 fc34 	bl	80076ba <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2103      	movs	r1, #3
 8000e56:	2025      	movs	r0, #37	; 0x25
 8000e58:	f006 fc13 	bl	8007682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e5c:	2025      	movs	r0, #37	; 0x25
 8000e5e:	f006 fc2c 	bl	80076ba <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2103      	movs	r1, #3
 8000e66:	201c      	movs	r0, #28
 8000e68:	f006 fc0b 	bl	8007682 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e6c:	201c      	movs	r0, #28
 8000e6e:	f006 fc24 	bl	80076ba <HAL_NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	2228      	movs	r2, #40	; 0x28
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00e fdec 	bl	800fa70 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea8:	4b50      	ldr	r3, [pc, #320]	; (8000fec <MX_ADC1_Init+0x174>)
 8000eaa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000eb0:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <MX_ADC1_Init+0x174>)
 8000eb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b4c      	ldr	r3, [pc, #304]	; (8000fec <MX_ADC1_Init+0x174>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ebe:	4b4b      	ldr	r3, [pc, #300]	; (8000fec <MX_ADC1_Init+0x174>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec4:	4b49      	ldr	r3, [pc, #292]	; (8000fec <MX_ADC1_Init+0x174>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b48      	ldr	r3, [pc, #288]	; (8000fec <MX_ADC1_Init+0x174>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <MX_ADC1_Init+0x174>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b44      	ldr	r3, [pc, #272]	; (8000fec <MX_ADC1_Init+0x174>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <MX_ADC1_Init+0x174>)
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ee4:	4b41      	ldr	r3, [pc, #260]	; (8000fec <MX_ADC1_Init+0x174>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eea:	4b40      	ldr	r3, [pc, #256]	; (8000fec <MX_ADC1_Init+0x174>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	; (8000fec <MX_ADC1_Init+0x174>)
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <MX_ADC1_Init+0x174>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efe:	4b3b      	ldr	r3, [pc, #236]	; (8000fec <MX_ADC1_Init+0x174>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f04:	4839      	ldr	r0, [pc, #228]	; (8000fec <MX_ADC1_Init+0x174>)
 8000f06:	f004 ffc1 	bl	8005e8c <HAL_ADC_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f10:	f000 fcb4 	bl	800187c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4833      	ldr	r0, [pc, #204]	; (8000fec <MX_ADC1_Init+0x174>)
 8000f20:	f006 f808 	bl	8006f34 <HAL_ADCEx_MultiModeConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f2a:	f000 fca7 	bl	800187c <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000f46:	2300      	movs	r3, #0
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sConfigInjected.QueueInjectedContext = ENABLE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  sConfigInjected.InjectedOffset = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4820      	ldr	r0, [pc, #128]	; (8000fec <MX_ADC1_Init+0x174>)
 8000f6c:	f005 fc5a 	bl	8006824 <HAL_ADCEx_InjectedConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000f76:	f000 fc81 	bl	800187c <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4818      	ldr	r0, [pc, #96]	; (8000fec <MX_ADC1_Init+0x174>)
 8000f8a:	f005 fc4b 	bl	8006824 <HAL_ADCEx_InjectedConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000f94:	f000 fc72 	bl	800187c <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_ADC1_Init+0x174>)
 8000fa8:	f005 fc3c 	bl	8006824 <HAL_ADCEx_InjectedConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000fb2:	f000 fc63 	bl	800187c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_ADC1_Init+0x174>)
 8000fd4:	f005 f93a 	bl	800624c <HAL_ADC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000fde:	f000 fc4d 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3750      	adds	r7, #80	; 0x50
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200007c0 	.word	0x200007c0

08000ff0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001014:	4a2e      	ldr	r2, [pc, #184]	; (80010d0 <MX_ADC3_Init+0xe0>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001018:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <MX_ADC3_Init+0xdc>)
 800101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <MX_ADC3_Init+0xdc>)
 800102e:	2200      	movs	r2, #0
 8001030:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_ADC3_Init+0xdc>)
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001042:	2201      	movs	r2, #1
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001048:	2220      	movs	r2, #32
 800104a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_ADC3_Init+0xdc>)
 800104e:	2201      	movs	r2, #1
 8001050:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_ADC3_Init+0xdc>)
 800105c:	2204      	movs	r2, #4
 800105e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001062:	2200      	movs	r2, #0
 8001064:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001068:	2201      	movs	r2, #1
 800106a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800106c:	4817      	ldr	r0, [pc, #92]	; (80010cc <MX_ADC3_Init+0xdc>)
 800106e:	f004 ff0d 	bl	8005e8c <HAL_ADC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8001078:	f000 fc00 	bl	800187c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_ADC3_Init+0xdc>)
 8001088:	f005 ff54 	bl	8006f34 <HAL_ADCEx_MultiModeConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8001092:	f000 fbf3 	bl	800187c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001096:	2305      	movs	r3, #5
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80010a2:	2304      	movs	r3, #4
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_ADC3_Init+0xdc>)
 80010b4:	f005 f8ca 	bl	800624c <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fbdd 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000810 	.word	0x20000810
 80010d0:	50000400 	.word	0x50000400

080010d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_CAN_Init+0x60>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_CAN_Init+0x64>)
 80010dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_CAN_Init+0x60>)
 80010e0:	2210      	movs	r2, #16
 80010e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_CAN_Init+0x60>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_CAN_Init+0x60>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_CAN_Init+0x60>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_CAN_Init+0x60>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_CAN_Init+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_CAN_Init+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_CAN_Init+0x60>)
 800110a:	2200      	movs	r2, #0
 800110c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_CAN_Init+0x60>)
 8001110:	2200      	movs	r2, #0
 8001112:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_CAN_Init+0x60>)
 8001116:	2200      	movs	r2, #0
 8001118:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_CAN_Init+0x60>)
 800111c:	2200      	movs	r2, #0
 800111e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_CAN_Init+0x60>)
 8001122:	f006 f858 	bl	80071d6 <HAL_CAN_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800112c:	f000 fba6 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000768 	.word	0x20000768
 8001138:	40006400 	.word	0x40006400

0800113c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_COMP2_Init+0x58>)
 8001142:	4a15      	ldr	r2, [pc, #84]	; (8001198 <MX_COMP2_Init+0x5c>)
 8001144:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_COMP2_Init+0x58>)
 8001148:	2210      	movs	r2, #16
 800114a:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_COMP2_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_COMP2_Init+0x58>)
 8001154:	f640 027f 	movw	r2, #2175	; 0x87f
 8001158:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_COMP2_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_COMP2_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <MX_COMP2_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_COMP2_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <MX_COMP2_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_COMP2_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_COMP2_Init+0x58>)
 8001180:	f006 f924 	bl	80073cc <HAL_COMP_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 fb77 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000934 	.word	0x20000934
 8001198:	40010020 	.word	0x40010020

0800119c <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <MX_COMP4_Init+0x5c>)
 80011a4:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011b4:	f640 027f 	movw	r2, #2175	; 0x87f
 80011b8:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_COMP4_Init+0x58>)
 80011e0:	f006 f8f4 	bl	80073cc <HAL_COMP_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 80011ea:	f000 fb47 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000790 	.word	0x20000790
 80011f8:	40010028 	.word	0x40010028

080011fc <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_COMP6_Init+0x58>)
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <MX_COMP6_Init+0x5c>)
 8001204:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <MX_COMP6_Init+0x58>)
 8001208:	2210      	movs	r2, #16
 800120a:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_COMP6_Init+0x58>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <MX_COMP6_Init+0x58>)
 8001214:	f640 027f 	movw	r2, #2175	; 0x87f
 8001218:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <MX_COMP6_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <MX_COMP6_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <MX_COMP6_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <MX_COMP6_Init+0x58>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <MX_COMP6_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <MX_COMP6_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_COMP6_Init+0x58>)
 8001240:	f006 f8c4 	bl	80073cc <HAL_COMP_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_COMP6_Init+0x52>
  {
    Error_Handler();
 800124a:	f000 fb17 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000738 	.word	0x20000738
 8001258:	40010030 	.word	0x40010030

0800125c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_DAC_Init+0x4c>)
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <MX_DAC_Init+0x50>)
 8001270:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001272:	480d      	ldr	r0, [pc, #52]	; (80012a8 <MX_DAC_Init+0x4c>)
 8001274:	f006 fa48 	bl	8007708 <HAL_DAC_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800127e:	f000 fafd 	bl	800187c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <MX_DAC_Init+0x4c>)
 8001292:	f006 fa5b 	bl	800774c <HAL_DAC_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 800129c:	f000 faee 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200008e0 	.word	0x200008e0
 80012ac:	40007400 	.word	0x40007400

080012b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <MX_SPI1_Init+0x74>)
 80012b6:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <MX_SPI1_Init+0x78>)
 80012b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_SPI1_Init+0x74>)
 80012bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c2:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_SPI1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_SPI1_Init+0x74>)
 80012ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_SPI1_Init+0x74>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_SPI1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_SPI1_Init+0x74>)
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_SPI1_Init+0x74>)
 80012e6:	2228      	movs	r2, #40	; 0x28
 80012e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_SPI1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_SPI1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_SPI1_Init+0x74>)
 80012fe:	2207      	movs	r2, #7
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_SPI1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_SPI1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_SPI1_Init+0x74>)
 8001310:	f007 feea 	bl	80090e8 <HAL_SPI_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800131a:	f000 faaf 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000964 	.word	0x20000964
 8001328:	40013000 	.word	0x40013000

0800132c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09a      	sub	sp, #104	; 0x68
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001332:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
 800135e:	615a      	str	r2, [r3, #20]
 8001360:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	222c      	movs	r2, #44	; 0x2c
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f00e fb81 	bl	800fa70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136e:	4b5d      	ldr	r3, [pc, #372]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 8001370:	4a5d      	ldr	r2, [pc, #372]	; (80014e8 <MX_TIM1_Init+0x1bc>)
 8001372:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001374:	4b5b      	ldr	r3, [pc, #364]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800137a:	4b5a      	ldr	r3, [pc, #360]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 800137c:	2220      	movs	r2, #32
 800137e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001380:	4b58      	ldr	r3, [pc, #352]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 8001382:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001386:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001388:	4b56      	ldr	r3, [pc, #344]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 800138a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800138e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001390:	4b54      	ldr	r3, [pc, #336]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 8001392:	2203      	movs	r2, #3
 8001394:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800139c:	4851      	ldr	r0, [pc, #324]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 800139e:	f008 fa65 	bl	800986c <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80013a8:	f000 fa68 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ac:	484d      	ldr	r0, [pc, #308]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 80013ae:	f008 fa88 	bl	80098c2 <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013b8:	f000 fa60 	bl	800187c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80013bc:	2306      	movs	r3, #6
 80013be:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80013c0:	2310      	movs	r3, #16
 80013c2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c8:	4619      	mov	r1, r3
 80013ca:	4846      	ldr	r0, [pc, #280]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 80013cc:	f008 fc98 	bl	8009d00 <HAL_TIM_SlaveConfigSynchro>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80013d6:	f000 fa51 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80013da:	2370      	movs	r3, #112	; 0x70
 80013dc:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ea:	4619      	mov	r1, r3
 80013ec:	483d      	ldr	r0, [pc, #244]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 80013ee:	f009 fa55 	bl	800a89c <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80013f8:	f000 fa40 	bl	800187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fc:	2360      	movs	r3, #96	; 0x60
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001408:	2308      	movs	r3, #8
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001418:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141e:	2200      	movs	r2, #0
 8001420:	4619      	mov	r1, r3
 8001422:	4830      	ldr	r0, [pc, #192]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 8001424:	f008 fb54 	bl	8009ad0 <HAL_TIM_PWM_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800142e:	f000 fa25 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001436:	2204      	movs	r2, #4
 8001438:	4619      	mov	r1, r3
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 800143c:	f008 fb48 	bl	8009ad0 <HAL_TIM_PWM_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001446:	f000 fa19 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800144a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144e:	2208      	movs	r2, #8
 8001450:	4619      	mov	r1, r3
 8001452:	4824      	ldr	r0, [pc, #144]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 8001454:	f008 fb3c 	bl	8009ad0 <HAL_TIM_PWM_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 800145e:	f000 fa0d 	bl	800187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001462:	2370      	movs	r3, #112	; 0x70
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001466:	f240 2357 	movw	r3, #599	; 0x257
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001474:	220c      	movs	r2, #12
 8001476:	4619      	mov	r1, r3
 8001478:	481a      	ldr	r0, [pc, #104]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 800147a:	f008 fb29 	bl	8009ad0 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001484:	f000 f9fa 	bl	800187c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800148c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800148e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001492:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8001494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001498:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 800149a:	2319      	movs	r3, #25
 800149c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80014ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014b6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 3;
 80014b8:	2303      	movs	r3, #3
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 80014c6:	f009 fa69 	bl	800a99c <HAL_TIMEx_ConfigBreakDeadTime>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 80014d0:	f000 f9d4 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_TIM1_Init+0x1b8>)
 80014d6:	f003 f95d 	bl	8004794 <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3768      	adds	r7, #104	; 0x68
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200008f4 	.word	0x200008f4
 80014e8:	40012c00 	.word	0x40012c00

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08c      	sub	sp, #48	; 0x30
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <MX_TIM2_Init+0x108>)
 800151c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <MX_TIM2_Init+0x108>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b32      	ldr	r3, [pc, #200]	; (80015f4 <MX_TIM2_Init+0x108>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 800152e:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <MX_TIM2_Init+0x108>)
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <MX_TIM2_Init+0x108>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_TIM2_Init+0x108>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001542:	482c      	ldr	r0, [pc, #176]	; (80015f4 <MX_TIM2_Init+0x108>)
 8001544:	f008 f992 	bl	800986c <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800154e:	f000 f995 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001552:	4828      	ldr	r0, [pc, #160]	; (80015f4 <MX_TIM2_Init+0x108>)
 8001554:	f008 f9ea 	bl	800992c <HAL_TIM_IC_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800155e:	f000 f98d 	bl	800187c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001562:	2304      	movs	r3, #4
 8001564:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001566:	2350      	movs	r3, #80	; 0x50
 8001568:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	481e      	ldr	r0, [pc, #120]	; (80015f4 <MX_TIM2_Init+0x108>)
 800157a:	f008 fbc1 	bl	8009d00 <HAL_TIM_SlaveConfigSynchro>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001584:	f000 f97a 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	4817      	ldr	r0, [pc, #92]	; (80015f4 <MX_TIM2_Init+0x108>)
 8001598:	f009 f980 	bl	800a89c <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80015a2:	f000 f96b 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015aa:	2301      	movs	r3, #1
 80015ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_TIM2_Init+0x108>)
 80015be:	f008 f9ea 	bl	8009996 <HAL_TIM_IC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80015c8:	f000 f958 	bl	800187c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80015cc:	2302      	movs	r3, #2
 80015ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	2204      	movs	r2, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_TIM2_Init+0x108>)
 80015dc:	f008 f9db 	bl	8009996 <HAL_TIM_IC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 80015e6:	f000 f949 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3730      	adds	r7, #48	; 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200009c8 	.word	0x200009c8

080015f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_USART1_UART_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <MX_USART1_UART_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART1_UART_Init+0x58>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART1_UART_Init+0x58>)
 800163c:	f009 fa2c 	bl	800aa98 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 f919 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000860 	.word	0x20000860
 8001654:	40013800 	.word	0x40013800

08001658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <MX_GPIO_Init+0x100>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a39      	ldr	r2, [pc, #228]	; (8001758 <MX_GPIO_Init+0x100>)
 8001674:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <MX_GPIO_Init+0x100>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <MX_GPIO_Init+0x100>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <MX_GPIO_Init+0x100>)
 800168c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001690:	6153      	str	r3, [r2, #20]
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <MX_GPIO_Init+0x100>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_GPIO_Init+0x100>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <MX_GPIO_Init+0x100>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a8:	6153      	str	r3, [r2, #20]
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_GPIO_Init+0x100>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT_LED_GPIO_Port, STAT_LED_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2104      	movs	r1, #4
 80016ba:	4828      	ldr	r0, [pc, #160]	; (800175c <MX_GPIO_Init+0x104>)
 80016bc:	f006 fa0e 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c6:	4825      	ldr	r0, [pc, #148]	; (800175c <MX_GPIO_Init+0x104>)
 80016c8:	f006 fa08 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_SOFT_GPIO_Port, SPI1_NSS_SOFT_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f006 fa01 	bl	8007adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 80016da:	2304      	movs	r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e2:	2302      	movs	r3, #2
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 030c 	add.w	r3, r7, #12
 80016ee:	4619      	mov	r1, r3
 80016f0:	481a      	ldr	r0, [pc, #104]	; (800175c <MX_GPIO_Init+0x104>)
 80016f2:	f006 f879 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 80016f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4619      	mov	r1, r3
 800170e:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_GPIO_Init+0x104>)
 8001710:	f006 f86a 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8001714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_GPIO_Init+0x104>)
 800172a:	f006 f85d 	bl	80077e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_SOFT_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_SOFT_Pin;
 800172e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_SOFT_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f006 f84d 	bl	80077e8 <HAL_GPIO_Init>

}
 800174e:	bf00      	nop
 8001750:	3720      	adds	r7, #32
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400

08001760 <SPIread>:

/* USER CODE BEGIN 4 */

void SPIread (uint8_t address, uint8_t *inputBuffer) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af02      	add	r7, sp, #8
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
	uint8_t outputBuffer [5] = {address, 0x00, 0x00, 0x00, 0x00};
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	723b      	strb	r3, [r7, #8]
 8001770:	2300      	movs	r3, #0
 8001772:	727b      	strb	r3, [r7, #9]
 8001774:	2300      	movs	r3, #0
 8001776:	72bb      	strb	r3, [r7, #10]
 8001778:	2300      	movs	r3, #0
 800177a:	72fb      	strb	r3, [r7, #11]
 800177c:	2300      	movs	r3, #0
 800177e:	733b      	strb	r3, [r7, #12]
	/* READ */
	/* Pull NSS LOW before beginning the transaction*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f006 f9a7 	bl	8007adc <HAL_GPIO_WritePin>
	/* Transaction */
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	2301      	movs	r3, #1
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2305      	movs	r3, #5
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <SPIread+0x58>)
 800179c:	f007 fd36 	bl	800920c <HAL_SPI_TransmitReceive>
	/* Transaction is over; pull NSS HIGH once again */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f006 f997 	bl	8007adc <HAL_GPIO_WritePin>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000964 	.word	0x20000964

080017bc <SPIwrite>:

void SPIwrite (uint8_t address, uint8_t *data) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	3b80      	subs	r3, #128	; 0x80
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	743b      	strb	r3, [r7, #16]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	747b      	strb	r3, [r7, #17]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	785b      	ldrb	r3, [r3, #1]
 80017da:	74bb      	strb	r3, [r7, #18]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	74fb      	strb	r3, [r7, #19]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	78db      	ldrb	r3, [r3, #3]
 80017e6:	753b      	strb	r3, [r7, #20]
	uint8_t inputBuffer [5];
	/* READ */
	/* Pull NSS LOW before beginning the transaction*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f006 f973 	bl	8007adc <HAL_GPIO_WritePin>
	/* Transaction */
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 80017f6:	f107 0208 	add.w	r2, r7, #8
 80017fa:	f107 0110 	add.w	r1, r7, #16
 80017fe:	2301      	movs	r3, #1
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2305      	movs	r3, #5
 8001804:	4806      	ldr	r0, [pc, #24]	; (8001820 <SPIwrite+0x64>)
 8001806:	f007 fd01 	bl	800920c <HAL_SPI_TransmitReceive>
	/* Transaction is over; pull NSS HIGH once again */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f006 f962 	bl	8007adc <HAL_GPIO_WritePin>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000964 	.word	0x20000964

08001824 <configureDriver>:

void configureDriver (void) {
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
	SPIwrite (TMC6100_GCONF, GCONF_Write);
 8001828:	4906      	ldr	r1, [pc, #24]	; (8001844 <configureDriver+0x20>)
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff ffc6 	bl	80017bc <SPIwrite>
	SPIwrite (TMC6100_SHORT_CONF, SHORT_CONF_Write);
 8001830:	4905      	ldr	r1, [pc, #20]	; (8001848 <configureDriver+0x24>)
 8001832:	2009      	movs	r0, #9
 8001834:	f7ff ffc2 	bl	80017bc <SPIwrite>
	SPIwrite (TMC6100_DRV_CONF, DRV_CONF_Write);
 8001838:	4904      	ldr	r1, [pc, #16]	; (800184c <configureDriver+0x28>)
 800183a:	200a      	movs	r0, #10
 800183c:	f7ff ffbe 	bl	80017bc <SPIwrite>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004
 800184c:	20000008 	.word	0x20000008

08001850 <resetDriver>:

void resetDriver (void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800185a:	4807      	ldr	r0, [pc, #28]	; (8001878 <resetDriver+0x28>)
 800185c:	f006 f93e 	bl	8007adc <HAL_GPIO_WritePin>
	HAL_Delay (50);
 8001860:	2032      	movs	r0, #50	; 0x32
 8001862:	f004 faf1 	bl	8005e48 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <resetDriver+0x28>)
 800186e:	f006 f935 	bl	8007adc <HAL_GPIO_WritePin>
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	48000400 	.word	0x48000400

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <MC_AcknowledgeFaultMotor1>:
 * the error condition that occured into account. If no error condition exists when
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	return MCI_FaultAcknowledged( pMCI[M1] );
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <MC_AcknowledgeFaultMotor1+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f8be 	bl	8001a16 <MCI_FaultAcknowledged>
 800189a:	4603      	mov	r3, r0
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000ae8 	.word	0x20000ae8

080018a4 <MC_GetOccurredFaultsMotor1>:
 *
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	return MCI_GetOccurredFaults( pMCI[M1] );
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <MC_GetOccurredFaultsMotor1+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 f940 	bl	8001b32 <MCI_GetOccurredFaults>
 80018b2:	4603      	mov	r3, r0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000ae8 	.word	0x20000ae8

080018bc <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	return MCI_GetSTMState( pMCI[M1] );
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <MC_GetSTMStateMotor1+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f926 	bl	8001b16 <MCI_GetSTMState>
 80018ca:	4603      	mov	r3, r0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000ae8 	.word	0x20000ae8

080018d4 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	603b      	str	r3, [r7, #0]
  pHandle->pSTM = pSTM;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	601a      	str	r2, [r3, #0]
  pHandle->pSTC = pSTC;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	605a      	str	r2, [r3, #4]
  pHandle->pFOCVars = pFOCVars;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	609a      	str	r2, [r3, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = 0;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	81da      	strh	r2, [r3, #14]
  pHandle->hFinalTorque = 0;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = 0;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	761a      	strb	r2, [r3, #24]
}
 8001912:	bf00      	nop
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]
 800192a:	4613      	mov	r3, r2
 800192c:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	81da      	strh	r2, [r3, #14]
  pHandle->hDurationms = hDurationms;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	883a      	ldrh	r2, [r7, #0]
 800193e:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	765a      	strb	r2, [r3, #25]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalTorque = hFinalTorque;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	887a      	ldrh	r2, [r7, #2]
 8001972:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = hDurationms;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	883a      	ldrh	r2, [r7, #0]
 8001978:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	765a      	strb	r2, [r3, #25]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	731a      	strb	r2, [r3, #12]
  pHandle->Iqdref.q = Iqdref.q;
 80019a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	825a      	strh	r2, [r3, #18]
  pHandle->Iqdref.d = Iqdref.d;
 80019aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	829a      	strh	r2, [r3, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	765a      	strb	r2, [r3, #25]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2103      	movs	r1, #3
 80019d8:	4618      	mov	r0, r3
 80019da:	f00c fe1d 	bl	800e618 <STM_NextState>
 80019de:	4603      	mov	r3, r0
 80019e0:	73fb      	strb	r3, [r7, #15]

  if ( RetVal == true )
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d002      	beq.n	80019ee <MCI_StartMotor+0x24>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	761a      	strb	r2, [r3, #24]
  }

  return RetVal;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2107      	movs	r1, #7
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00c fe06 	bl	800e618 <STM_NextState>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return STM_FaultAcknowledged( pHandle->pSTM );
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00c ffa4 	bl	800e970 <STM_FaultAcknowledged>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00c fde9 	bl	800e618 <STM_NextState>
 8001a46:	4603      	mov	r3, r0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ( pHandle != MC_NULL )
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d057      	beq.n	8001b0e <MCI_ExecBufferedCommands+0xbe>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7e1b      	ldrb	r3, [r3, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d153      	bne.n	8001b0e <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
      switch ( pHandle->lastCommand )
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7b1b      	ldrb	r3, [r3, #12]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d01c      	beq.n	8001aac <MCI_ExecBufferedCommands+0x5c>
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d032      	beq.n	8001adc <MCI_ExecBufferedCommands+0x8c>
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d000      	beq.n	8001a7c <MCI_ExecBufferedCommands+0x2c>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
        }
        break;
        default:
          break;
 8001a7a:	e03e      	b.n	8001afa <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00c fc37 	bl	800e300 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6858      	ldr	r0, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	8adb      	ldrh	r3, [r3, #22]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f00c fc3f 	bl	800e324 <STC_ExecRamp>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8001aaa:	e026      	b.n	8001afa <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00c fc1f 	bl	800e300 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6858      	ldr	r0, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8adb      	ldrh	r3, [r3, #22]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f00c fc27 	bl	800e324 <STC_ExecRamp>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8001ada:	e00e      	b.n	8001afa <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	3310      	adds	r3, #16
 8001aee:	3212      	adds	r2, #18
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
        break;
 8001af8:	bf00      	nop
      }

      if ( commandHasBeenExecuted )
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	761a      	strb	r2, [r3, #24]
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8001b06:	e002      	b.n	8001b0e <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	761a      	strb	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  return STM_GetState( pHandle->pSTM );
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00c ff18 	bl	800e958 <STM_GetState>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <MCI_GetOccurredFaults>:
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults( MCI_Handle_t * pHandle )
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) );
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00c ff2f 	bl	800e9a2 <STM_GetFaultState>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b29b      	uxth	r3, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return pHandle->LastModalitySetByUser;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e5b      	ldrb	r3, [r3, #25]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	81fb      	strh	r3, [r7, #14]

  switch ( pHandle->lastCommand )
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d00d      	beq.n	8001b98 <MCI_GetImposedMotorDirection+0x30>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d014      	beq.n	8001baa <MCI_GetImposedMotorDirection+0x42>
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d000      	beq.n	8001b86 <MCI_GetImposedMotorDirection+0x1e>
      {
        retVal = -1;
      }
      break;
    default:
      break;
 8001b84:	e01f      	b.n	8001bc6 <MCI_GetImposedMotorDirection+0x5e>
      if ( pHandle->hFinalSpeed < 0 )
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da15      	bge.n	8001bbc <MCI_GetImposedMotorDirection+0x54>
        retVal = -1;
 8001b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b94:	81fb      	strh	r3, [r7, #14]
      break;
 8001b96:	e011      	b.n	8001bbc <MCI_GetImposedMotorDirection+0x54>
      if ( pHandle->hFinalTorque < 0 )
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da0e      	bge.n	8001bc0 <MCI_GetImposedMotorDirection+0x58>
        retVal = -1;
 8001ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba6:	81fb      	strh	r3, [r7, #14]
      break;
 8001ba8:	e00a      	b.n	8001bc0 <MCI_GetImposedMotorDirection+0x58>
      if ( pHandle->Iqdref.q < 0 )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da07      	bge.n	8001bc4 <MCI_GetImposedMotorDirection+0x5c>
        retVal = -1;
 8001bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb8:	81fb      	strh	r3, [r7, #14]
      break;
 8001bba:	e003      	b.n	8001bc4 <MCI_GetImposedMotorDirection+0x5c>
      break;
 8001bbc:	bf00      	nop
 8001bbe:	e002      	b.n	8001bc6 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8001bc0:	bf00      	nop
 8001bc2:	e000      	b.n	8001bc6 <MCI_GetImposedMotorDirection+0x5e>
      break;
 8001bc4:	bf00      	nop
  }
  return retVal;
 8001bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in tehts
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  int16_t hRetVal = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	81fb      	strh	r3, [r7, #14]

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7b1b      	ldrb	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <MCI_GetLastRampFinalSpeed+0x1a>
  {
    hRetVal = pHandle->hFinalSpeed;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	89db      	ldrh	r3, [r3, #14]
 8001bee:	81fb      	strh	r3, [r7, #14]
  }
  return hRetVal;
 8001bf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
   STC_StopRamp( pHandle->pSTC );
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00c fc25 	bl	800e45c <STC_StopRamp>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f00c fb26 	bl	800e278 <STC_GetSpeedSensor>
 8001c2c:	60f8      	str	r0, [r7, #12]

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f00c fa46 	bl	800e0c0 <SPD_GetAvrgMecSpeedUnit>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00c fb32 	bl	800e2b4 <STC_GetMecSpeedRefUnit>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iab );
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	6810      	ldr	r0, [r2, #0]
 8001c6c:	6018      	str	r0, [r3, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	89ba      	ldrh	r2, [r7, #12]
 8001c72:	f362 030f 	bfi	r3, r2, #0, #16
 8001c76:	89fa      	ldrh	r2, [r7, #14]
 8001c78:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Ialphabeta );
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	3204      	adds	r2, #4
 8001c9a:	6810      	ldr	r0, [r2, #0]
 8001c9c:	6018      	str	r0, [r3, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	89ba      	ldrh	r2, [r7, #12]
 8001ca2:	f362 030f 	bfi	r3, r2, #0, #16
 8001ca6:	89fa      	ldrh	r2, [r7, #14]
 8001ca8:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqd );
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	320c      	adds	r2, #12
 8001cca:	6810      	ldr	r0, [r2, #0]
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	89ba      	ldrh	r2, [r7, #12]
 8001cd2:	f362 030f 	bfi	r3, r2, #0, #16
 8001cd6:	89fa      	ldrh	r2, [r7, #14]
 8001cd8:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqdref );
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	3210      	adds	r2, #16
 8001cfa:	6810      	ldr	r0, [r2, #0]
 8001cfc:	6018      	str	r0, [r3, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	89ba      	ldrh	r2, [r7, #12]
 8001d02:	f362 030f 	bfi	r3, r2, #0, #16
 8001d06:	89fa      	ldrh	r2, [r7, #14]
 8001d08:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Vqd );
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	3216      	adds	r2, #22
 8001d2a:	6810      	ldr	r0, [r2, #0]
 8001d2c:	6018      	str	r0, [r3, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	89ba      	ldrh	r2, [r7, #12]
 8001d32:	f362 030f 	bfi	r3, r2, #0, #16
 8001d36:	89fa      	ldrh	r2, [r7, #14]
 8001d38:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Valphabeta );
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	321a      	adds	r2, #26
 8001d5a:	6810      	ldr	r0, [r2, #0]
 8001d5c:	6018      	str	r0, [r3, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	89ba      	ldrh	r2, [r7, #12]
 8001d62:	f362 030f 	bfi	r3, r2, #0, #16
 8001d66:	89fa      	ldrh	r2, [r7, #14]
 8001d68:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->hTeref );
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <MCI_SetIdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	825a      	strh	r2, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	829a      	strh	r2, [r3, #20]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689c      	ldr	r4, [r3, #8]
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f00c fbe3 	bl	800e598 <STC_GetDefaultIqdref>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	8222      	strh	r2, [r4, #16]
 8001dd8:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001ddc:	8263      	strh	r3, [r4, #18]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}

08001de6 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 8001de6:	b480      	push	{r7}
 8001de8:	b089      	sub	sp, #36	; 0x24
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  int32_t a_divSQRT3_tmp, b_divSQRT3_tmp ;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 8001dee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001df2:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8001df4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001dfe:	fb03 f302 	mul.w	r3, r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8001e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001e0e:	fb03 f302 	mul.w	r3, r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	425a      	negs	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	1ad2      	subs	r2, r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	13db      	asrs	r3, r3, #15
 8001e22:	613b      	str	r3, [r7, #16]
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e2a:	db03      	blt.n	8001e34 <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 8001e2c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001e30:	83fb      	strh	r3, [r7, #30]
 8001e32:	e009      	b.n	8001e48 <MCM_Clarke+0x62>
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e3a:	da03      	bge.n	8001e44 <MCM_Clarke+0x5e>
  {
    hbeta_tmp = ( -32768 );
 8001e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e40:	83fb      	strh	r3, [r7, #30]
 8001e42:	e001      	b.n	8001e48 <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 8001e48:	8bfb      	ldrh	r3, [r7, #30]
 8001e4a:	817b      	strh	r3, [r7, #10]

  if ( Output.beta == ( int16_t )( -32768 ) )
 8001e4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e50:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e54:	d102      	bne.n	8001e5c <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 8001e56:	f248 0301 	movw	r3, #32769	; 0x8001
 8001e5a:	817b      	strh	r3, [r7, #10]
  }

  return ( Output );
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	2300      	movs	r3, #0
 8001e62:	89ba      	ldrh	r2, [r7, #12]
 8001e64:	f362 030f 	bfi	r3, r2, #0, #16
 8001e68:	89fa      	ldrh	r2, [r7, #14]
 8001e6a:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park( alphabeta_t Input, int16_t Theta )
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b08c      	sub	sp, #48	; 0x30
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	807b      	strh	r3, [r7, #2]
  int32_t d_tmp_1, d_tmp_2, q_tmp_1, q_tmp_2;
  Trig_Components Local_Vector_Components;
  int32_t wqd_tmp;
  int16_t hqd_tmp;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001e86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f8b0 	bl	8001ff0 <MCM_Trig_Functions>
 8001e90:	4603      	mov	r3, r0
 8001e92:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8001e94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e98:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8001ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	13db      	asrs	r3, r3, #15
 8001eb8:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Iq */
  if ( wqd_tmp > INT16_MAX )
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec0:	db03      	blt.n	8001eca <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 8001ec2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001ec6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ec8:	e009      	b.n	8001ede <MCM_Park+0x64>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001ed0:	da03      	bge.n	8001eda <MCM_Park+0x60>
  {
    hqd_tmp = ( -32768 );
 8001ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ed8:	e001      	b.n	8001ede <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001eda:	6a3b      	ldr	r3, [r7, #32]
 8001edc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 8001ede:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ee0:	823b      	strh	r3, [r7, #16]

  if ( Output.q == ( int16_t )( -32768 ) )
 8001ee2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ee6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001eea:	d102      	bne.n	8001ef2 <MCM_Park+0x78>
  {
    Output.q = -32767;
 8001eec:	f248 0301 	movw	r3, #32769	; 0x8001
 8001ef0:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8001ef2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ef6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001f00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f08:	fb02 f303 	mul.w	r3, r2, r3
 8001f0c:	61bb      	str	r3, [r7, #24]
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	4413      	add	r3, r2
 8001f14:	13db      	asrs	r3, r3, #15
 8001f16:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Id */
  if ( wqd_tmp > INT16_MAX )
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f1e:	db03      	blt.n	8001f28 <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 8001f20:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f26:	e009      	b.n	8001f3c <MCM_Park+0xc2>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001f2e:	da03      	bge.n	8001f38 <MCM_Park+0xbe>
  {
    hqd_tmp = ( -32768 );
 8001f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f36:	e001      	b.n	8001f3c <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 8001f3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f3e:	827b      	strh	r3, [r7, #18]

  if ( Output.d == ( int16_t )( -32768 ) )
 8001f40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f44:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001f48:	d102      	bne.n	8001f50 <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8001f4a:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f4e:	827b      	strh	r3, [r7, #18]
  }

  return ( Output );
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	2300      	movs	r3, #0
 8001f56:	8aba      	ldrh	r2, [r7, #20]
 8001f58:	f362 030f 	bfi	r3, r2, #0, #16
 8001f5c:	8afa      	ldrh	r2, [r7, #22]
 8001f5e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3730      	adds	r7, #48	; 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park( qd_t Input, int16_t Theta )
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b08a      	sub	sp, #40	; 0x28
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
 8001f72:	460b      	mov	r3, r1
 8001f74:	807b      	strh	r3, [r7, #2]
  int32_t alpha_tmp1, alpha_tmp2, beta_tmp1, beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001f76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f838 	bl	8001ff0 <MCM_Trig_Functions>
 8001f80:	4603      	mov	r3, r0
 8001f82:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8001f84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f88:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001f8c:	fb02 f303 	mul.w	r3, r2, r3
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	623b      	str	r3, [r7, #32]
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	13db      	asrs	r3, r3, #15
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	81bb      	strh	r3, [r7, #12]
#endif

  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8001fac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fb0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fc2:	fb02 f303 	mul.w	r3, r2, r3
 8001fc6:	61bb      	str	r3, [r7, #24]
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	13db      	asrs	r3, r3, #15
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	81fb      	strh	r3, [r7, #14]
#endif

  return ( Output );
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	8aba      	ldrh	r2, [r7, #20]
 8001fdc:	f362 030f 	bfi	r3, r2, #0, #16
 8001fe0:	8afa      	ldrh	r2, [r7, #22]
 8001fe2:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002002:	617b      	str	r3, [r7, #20]
  uhindex = ( uint16_t )shindex;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	827b      	strh	r3, [r7, #18]
  uhindex /= ( uint16_t )64;
 8002008:	8a7b      	ldrh	r3, [r7, #18]
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	827b      	strh	r3, [r7, #18]

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 800200e:	8a7b      	ldrh	r3, [r7, #18]
 8002010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002018:	d04b      	beq.n	80020b2 <MCM_Trig_Functions+0xc2>
 800201a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201e:	d802      	bhi.n	8002026 <MCM_Trig_Functions+0x36>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d02d      	beq.n	8002080 <MCM_Trig_Functions+0x90>
    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
 8002024:	e05a      	b.n	80020dc <MCM_Trig_Functions+0xec>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202a:	d003      	beq.n	8002034 <MCM_Trig_Functions+0x44>
 800202c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002030:	d011      	beq.n	8002056 <MCM_Trig_Functions+0x66>
      break;
 8002032:	e053      	b.n	80020dc <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002034:	8a7b      	ldrh	r3, [r7, #18]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	461a      	mov	r2, r3
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <MCM_Trig_Functions+0x10c>)
 800203c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002040:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002042:	8a7b      	ldrh	r3, [r7, #18]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <MCM_Trig_Functions+0x10c>)
 800204e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002052:	813b      	strh	r3, [r7, #8]
      break;
 8002054:	e042      	b.n	80020dc <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002056:	8a7b      	ldrh	r3, [r7, #18]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <MCM_Trig_Functions+0x10c>)
 8002062:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002066:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002068:	8a7b      	ldrh	r3, [r7, #18]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <MCM_Trig_Functions+0x10c>)
 8002070:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002074:	b29b      	uxth	r3, r3
 8002076:	425b      	negs	r3, r3
 8002078:	b29b      	uxth	r3, r3
 800207a:	b21b      	sxth	r3, r3
 800207c:	813b      	strh	r3, [r7, #8]
      break;
 800207e:	e02d      	b.n	80020dc <MCM_Trig_Functions+0xec>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002080:	8a7b      	ldrh	r3, [r7, #18]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <MCM_Trig_Functions+0x10c>)
 8002088:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800208c:	b29b      	uxth	r3, r3
 800208e:	425b      	negs	r3, r3
 8002090:	b29b      	uxth	r3, r3
 8002092:	b21b      	sxth	r3, r3
 8002094:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002096:	8a7b      	ldrh	r3, [r7, #18]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	4b16      	ldr	r3, [pc, #88]	; (80020fc <MCM_Trig_Functions+0x10c>)
 80020a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	425b      	negs	r3, r3
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	813b      	strh	r3, [r7, #8]
      break;
 80020b0:	e014      	b.n	80020dc <MCM_Trig_Functions+0xec>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80020b2:	8a7b      	ldrh	r3, [r7, #18]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MCM_Trig_Functions+0x10c>)
 80020be:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	425b      	negs	r3, r3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80020cc:	8a7b      	ldrh	r3, [r7, #18]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <MCM_Trig_Functions+0x10c>)
 80020d4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020d8:	813b      	strh	r3, [r7, #8]
      break;
 80020da:	bf00      	nop
  }
  return ( Local_Components );
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	2300      	movs	r3, #0
 80020e2:	89ba      	ldrh	r2, [r7, #12]
 80020e4:	f362 030f 	bfi	r3, r2, #0, #16
 80020e8:	89fa      	ldrh	r2, [r7, #14]
 80020ea:	f362 431f 	bfi	r3, r2, #16, #16
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	0800fa98 	.word	0x0800fa98

08002100 <LL_GPIO_LockPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	60fb      	str	r3, [r7, #12]
  (void) temp;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b087      	sub	sp, #28
 800213c:	af02      	add	r7, sp, #8
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  /* USER CODE END MCboot 0 */

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 8002142:	4877      	ldr	r0, [pc, #476]	; (8002320 <MCboot+0x1e8>)
 8002144:	f00c fa54 	bl	800e5f0 <STM_Init>

  bMCBootCompleted = 0;
 8002148:	4b76      	ldr	r3, [pc, #472]	; (8002324 <MCboot+0x1ec>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <MCboot+0x1f0>)
 8002150:	4a76      	ldr	r2, [pc, #472]	; (800232c <MCboot+0x1f4>)
 8002152:	601a      	str	r2, [r3, #0]

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002154:	4b76      	ldr	r3, [pc, #472]	; (8002330 <MCboot+0x1f8>)
 8002156:	4a77      	ldr	r2, [pc, #476]	; (8002334 <MCboot+0x1fc>)
 8002158:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 800215a:	4876      	ldr	r0, [pc, #472]	; (8002334 <MCboot+0x1fc>)
 800215c:	f00a fbfe 	bl	800c95c <R3_1_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();
 8002160:	f009 fcd4 	bl	800bb0c <startTimers>

  /******************************************************/
  /*   PID component initialization: speed regulation   */
  /******************************************************/
  PID_HandleInit(&PIDSpeedHandle_M1);
 8002164:	4874      	ldr	r0, [pc, #464]	; (8002338 <MCboot+0x200>)
 8002166:	f009 faa7 	bl	800b6b8 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800216a:	4b74      	ldr	r3, [pc, #464]	; (800233c <MCboot+0x204>)
 800216c:	4a72      	ldr	r2, [pc, #456]	; (8002338 <MCboot+0x200>)
 800216e:	601a      	str	r2, [r3, #0]

  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pSTC[M1] = &SpeednTorqCtrlM1;
 8002170:	4b73      	ldr	r3, [pc, #460]	; (8002340 <MCboot+0x208>)
 8002172:	4a74      	ldr	r2, [pc, #464]	; (8002344 <MCboot+0x20c>)
 8002174:	601a      	str	r2, [r3, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8002176:	4874      	ldr	r0, [pc, #464]	; (8002348 <MCboot+0x210>)
 8002178:	f00d fb5c 	bl	800f834 <STO_PLL_Init>

  /******************************************************/
  /*   Speed & torque component initialization          */
  /******************************************************/
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 800217c:	4b70      	ldr	r3, [pc, #448]	; (8002340 <MCboot+0x208>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	4b6e      	ldr	r3, [pc, #440]	; (800233c <MCboot+0x204>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a70      	ldr	r2, [pc, #448]	; (8002348 <MCboot+0x210>)
 8002186:	4619      	mov	r1, r3
 8002188:	f00c f83c 	bl	800e204 <STC_Init>

  /****************************************************/
  /*   Virtual speed sensor component initialization  */
  /****************************************************/
  VSS_Init (&VirtualSpeedSensorM1);
 800218c:	486f      	ldr	r0, [pc, #444]	; (800234c <MCboot+0x214>)
 800218e:	f00c fe0b 	bl	800eda8 <VSS_Init>

  /**************************************/
  /*   Rev-up component initialization  */
  /**************************************/
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002192:	4b6b      	ldr	r3, [pc, #428]	; (8002340 <MCboot+0x208>)
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	4b66      	ldr	r3, [pc, #408]	; (8002330 <MCboot+0x1f8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4b6c      	ldr	r3, [pc, #432]	; (8002350 <MCboot+0x218>)
 800219e:	4a6b      	ldr	r2, [pc, #428]	; (800234c <MCboot+0x214>)
 80021a0:	486c      	ldr	r0, [pc, #432]	; (8002354 <MCboot+0x21c>)
 80021a2:	f00d f86f 	bl	800f284 <RUC_Init>

  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 80021a6:	486c      	ldr	r0, [pc, #432]	; (8002358 <MCboot+0x220>)
 80021a8:	f009 fa86 	bl	800b6b8 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80021ac:	486b      	ldr	r0, [pc, #428]	; (800235c <MCboot+0x224>)
 80021ae:	f009 fa83 	bl	800b6b8 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80021b2:	4b6b      	ldr	r3, [pc, #428]	; (8002360 <MCboot+0x228>)
 80021b4:	4a68      	ldr	r2, [pc, #416]	; (8002358 <MCboot+0x220>)
 80021b6:	601a      	str	r2, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 80021b8:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <MCboot+0x22c>)
 80021ba:	4a68      	ldr	r2, [pc, #416]	; (800235c <MCboot+0x224>)
 80021bc:	601a      	str	r2, [r3, #0]

  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80021be:	4b6a      	ldr	r3, [pc, #424]	; (8002368 <MCboot+0x230>)
 80021c0:	4a6a      	ldr	r2, [pc, #424]	; (800236c <MCboot+0x234>)
 80021c2:	601a      	str	r2, [r3, #0]
  RVBS_Init(pBusSensorM1);
 80021c4:	4b68      	ldr	r3, [pc, #416]	; (8002368 <MCboot+0x230>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f00b fd41 	bl	800dc50 <RVBS_Init>

  /*************************************************/
  /*   Power measurement component initialization  */
  /*************************************************/
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80021ce:	4b68      	ldr	r3, [pc, #416]	; (8002370 <MCboot+0x238>)
 80021d0:	4a68      	ldr	r2, [pc, #416]	; (8002374 <MCboot+0x23c>)
 80021d2:	601a      	str	r2, [r3, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80021d4:	4b64      	ldr	r3, [pc, #400]	; (8002368 <MCboot+0x230>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b65      	ldr	r3, [pc, #404]	; (8002370 <MCboot+0x238>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80021e0:	4b63      	ldr	r3, [pc, #396]	; (8002370 <MCboot+0x238>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a64      	ldr	r2, [pc, #400]	; (8002378 <MCboot+0x240>)
 80021e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);
 80021ea:	4864      	ldr	r0, [pc, #400]	; (800237c <MCboot+0x244>)
 80021ec:	f009 f9c5 	bl	800b57a <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80021f0:	4b63      	ldr	r3, [pc, #396]	; (8002380 <MCboot+0x248>)
 80021f2:	4a62      	ldr	r2, [pc, #392]	; (800237c <MCboot+0x244>)
 80021f4:	601a      	str	r2, [r3, #0]

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <MCboot+0x24c>)
 80021f8:	4a63      	ldr	r2, [pc, #396]	; (8002388 <MCboot+0x250>)
 80021fa:	601a      	str	r2, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80021fc:	4b61      	ldr	r3, [pc, #388]	; (8002384 <MCboot+0x24c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f00b fe35 	bl	800de70 <REMNG_Init>

  FOC_Clear(M1);
 8002206:	2000      	movs	r0, #0
 8002208:	f000 fadc 	bl	80027c4 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800220c:	4b5a      	ldr	r3, [pc, #360]	; (8002378 <MCboot+0x240>)
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <MCboot+0x208>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4c57      	ldr	r4, [pc, #348]	; (8002378 <MCboot+0x240>)
 800221a:	4618      	mov	r0, r3
 800221c:	f00c f9bc 	bl	800e598 <STC_GetDefaultIqdref>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	8222      	strh	r2, [r4, #16]
 8002226:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800222a:	8263      	strh	r3, [r4, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800222c:	4b44      	ldr	r3, [pc, #272]	; (8002340 <MCboot+0x208>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f00c f9b1 	bl	800e598 <STC_GetDefaultIqdref>
 8002236:	4603      	mov	r3, r0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800223e:	4b4e      	ldr	r3, [pc, #312]	; (8002378 <MCboot+0x240>)
 8002240:	829a      	strh	r2, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 8002242:	4b52      	ldr	r3, [pc, #328]	; (800238c <MCboot+0x254>)
 8002244:	4a52      	ldr	r2, [pc, #328]	; (8002390 <MCboot+0x258>)
 8002246:	601a      	str	r2, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <MCboot+0x254>)
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	4b3c      	ldr	r3, [pc, #240]	; (8002340 <MCboot+0x208>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <MCboot+0x240>)
 8002252:	4933      	ldr	r1, [pc, #204]	; (8002320 <MCboot+0x1e8>)
 8002254:	f7ff fb3e 	bl	80018d4 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <MCboot+0x254>)
 800225a:	681c      	ldr	r4, [r3, #0]
 800225c:	4b38      	ldr	r3, [pc, #224]	; (8002340 <MCboot+0x208>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f00c f973 	bl	800e54c <STC_GetMecSpeedRefUnitDefault>
 8002266:	4603      	mov	r3, r0
 8002268:	2200      	movs	r2, #0
 800226a:	4619      	mov	r1, r3
 800226c:	4620      	mov	r0, r4
 800226e:	f7ff fb56 	bl	800191e <MCI_ExecSpeedRamp>
  STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
  pMCIList[M1] = oMCInterface[M1];
 8002272:	4b46      	ldr	r3, [pc, #280]	; (800238c <MCboot+0x254>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800227a:	4b30      	ldr	r3, [pc, #192]	; (800233c <MCboot+0x204>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a45      	ldr	r2, [pc, #276]	; (8002394 <MCboot+0x25c>)
 8002280:	6013      	str	r3, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <MCboot+0x228>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a43      	ldr	r2, [pc, #268]	; (8002394 <MCboot+0x25c>)
 8002288:	6053      	str	r3, [r2, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <MCboot+0x22c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a41      	ldr	r2, [pc, #260]	; (8002394 <MCboot+0x25c>)
 8002290:	6093      	str	r3, [r2, #8]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <MCboot+0x25c>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <MCboot+0x1f8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3d      	ldr	r2, [pc, #244]	; (8002394 <MCboot+0x25c>)
 800229e:	6113      	str	r3, [r2, #16]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 80022a0:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <MCboot+0x25c>)
 80022a2:	4a2c      	ldr	r2, [pc, #176]	; (8002354 <MCboot+0x21c>)
 80022a4:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <MCboot+0x25c>)
 80022a8:	4a27      	ldr	r2, [pc, #156]	; (8002348 <MCboot+0x210>)
 80022aa:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <MCboot+0x25c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <MCboot+0x25c>)
 80022b4:	4a25      	ldr	r2, [pc, #148]	; (800234c <MCboot+0x214>)
 80022b6:	621a      	str	r2, [r3, #32]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MCboot+0x208>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a35      	ldr	r2, [pc, #212]	; (8002394 <MCboot+0x25c>)
 80022be:	6253      	str	r3, [r2, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <MCboot+0x25c>)
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <MCboot+0x1e8>)
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <MCboot+0x248>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a32      	ldr	r2, [pc, #200]	; (8002394 <MCboot+0x25c>)
 80022cc:	62d3      	str	r3, [r2, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <MCboot+0x230>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <MCboot+0x25c>)
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <MCboot+0x25c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <MCboot+0x25c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <MCboot+0x238>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <MCboot+0x25c>)
 80022ea:	63d3      	str	r3, [r2, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 80022ec:	4b29      	ldr	r3, [pc, #164]	; (8002394 <MCboot+0x25c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 80022f2:	4b28      	ldr	r3, [pc, #160]	; (8002394 <MCboot+0x25c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44

  MCT[M1].pPosCtrl = MC_NULL;
 80022f8:	4b26      	ldr	r3, [pc, #152]	; (8002394 <MCboot+0x25c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	649a      	str	r2, [r3, #72]	; 0x48

  MCT[M1].pSCC = MC_NULL;
 80022fe:	4b25      	ldr	r3, [pc, #148]	; (8002394 <MCboot+0x25c>)
 8002300:	2200      	movs	r2, #0
 8002302:	64da      	str	r2, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8002304:	4b23      	ldr	r3, [pc, #140]	; (8002394 <MCboot+0x25c>)
 8002306:	2200      	movs	r2, #0
 8002308:	651a      	str	r2, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	4a21      	ldr	r2, [pc, #132]	; (8002394 <MCboot+0x25c>)
 800230e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MCboot 2 */

  /* USER CODE END MCboot 2 */

  bMCBootCompleted = 1;
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <MCboot+0x1ec>)
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	20000ad0 	.word	0x20000ad0
 8002324:	2000071e 	.word	0x2000071e
 8002328:	20000aac 	.word	0x20000aac
 800232c:	200004a4 	.word	0x200004a4
 8002330:	20000a1c 	.word	0x20000a1c
 8002334:	20000250 	.word	0x20000250
 8002338:	20000120 	.word	0x20000120
 800233c:	20000a20 	.word	0x20000a20
 8002340:	20000ae4 	.word	0x20000ae4
 8002344:	200001a4 	.word	0x200001a4
 8002348:	20000300 	.word	0x20000300
 800234c:	200002c8 	.word	0x200002c8
 8002350:	20000428 	.word	0x20000428
 8002354:	200001d8 	.word	0x200001d8
 8002358:	2000014c 	.word	0x2000014c
 800235c:	20000178 	.word	0x20000178
 8002360:	20000a24 	.word	0x20000a24
 8002364:	20000ae0 	.word	0x20000ae0
 8002368:	20000ab0 	.word	0x20000ab0
 800236c:	20000464 	.word	0x20000464
 8002370:	20000adc 	.word	0x20000adc
 8002374:	2000000c 	.word	0x2000000c
 8002378:	20000a30 	.word	0x20000a30
 800237c:	2000043c 	.word	0x2000043c
 8002380:	20000a18 	.word	0x20000a18
 8002384:	20000ad8 	.word	0x20000ad8
 8002388:	2000048c 	.word	0x2000048c
 800238c:	20000a28 	.word	0x20000a28
 8002390:	20000ab4 	.word	0x20000ab4
 8002394:	20000a58 	.word	0x20000a58

08002398 <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task.
 */
__weak void MC_RunMotorControlTasks(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  if ( bMCBootCompleted ) {
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <MC_RunMotorControlTasks+0x1c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <MC_RunMotorControlTasks+0x18>
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 80023a4:	f000 f808 	bl	80023b8 <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 80023a8:	f000 fc50 	bl	8002c4c <TSK_SafetyTask>

    /* ** User Interface Task ** */
    UI_Scheduler();
 80023ac:	f002 faf0 	bl	8004990 <UI_Scheduler>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	2000071e 	.word	0x2000071e

080023b8 <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance.
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (bMCBootCompleted == 1)
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <MC_Scheduler+0x64>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d129      	bne.n	8002418 <MC_Scheduler+0x60>
  {
    if(hMFTaskCounterM1 > 0u)
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <MC_Scheduler+0x68>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <MC_Scheduler+0x26>
    {
      hMFTaskCounterM1--;
 80023ce:	4b14      	ldr	r3, [pc, #80]	; (8002420 <MC_Scheduler+0x68>)
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <MC_Scheduler+0x68>)
 80023da:	801a      	strh	r2, [r3, #0]
 80023dc:	e004      	b.n	80023e8 <MC_Scheduler+0x30>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 80023de:	f000 f825 	bl	800242c <TSK_MediumFrequencyTaskM1>
      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <MC_Scheduler+0x68>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0u)
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <MC_Scheduler+0x6c>)
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <MC_Scheduler+0x48>
    {
      hBootCapDelayCounterM1--;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <MC_Scheduler+0x6c>)
 80023f4:	881b      	ldrh	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <MC_Scheduler+0x6c>)
 80023fe:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0u)
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MC_Scheduler+0x70>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <MC_Scheduler+0x60>
    {
      hStopPermanencyCounterM1--;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <MC_Scheduler+0x70>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	3b01      	subs	r3, #1
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <MC_Scheduler+0x70>)
 8002416:	801a      	strh	r2, [r3, #0]
  {
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8002418:	bf00      	nop
 800241a:	bd80      	pop	{r7, pc}
 800241c:	2000071e 	.word	0x2000071e
 8002420:	20000718 	.word	0x20000718
 8002424:	2000071a 	.word	0x2000071a
 8002428:	2000071c 	.word	0x2000071c

0800242c <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic
  * execution at a medium frequency rate (such as the speed controller for instance)
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 800242c:	b5b0      	push	{r4, r5, r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  State_t StateM1;
  int16_t wAux = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	827b      	strh	r3, [r7, #18]

  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8002436:	f107 0312 	add.w	r3, r7, #18
 800243a:	4619      	mov	r1, r3
 800243c:	48c2      	ldr	r0, [pc, #776]	; (8002748 <TSK_MediumFrequencyTaskM1+0x31c>)
 800243e:	f00d f901 	bl	800f644 <STO_PLL_CalcAvrgMecSpeedUnit>
 8002442:	4603      	mov	r3, r0
 8002444:	75bb      	strb	r3, [r7, #22]
  PQD_CalcElMotorPower( pMPM[M1] );
 8002446:	4bc1      	ldr	r3, [pc, #772]	; (800274c <TSK_MediumFrequencyTaskM1+0x320>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f009 fa60 	bl	800b910 <PQD_CalcElMotorPower>

  StateM1 = STM_GetState( &STM[M1] );
 8002450:	48bf      	ldr	r0, [pc, #764]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 8002452:	f00c fa81 	bl	800e958 <STM_GetState>
 8002456:	4603      	mov	r3, r0
 8002458:	757b      	strb	r3, [r7, #21]

  switch ( StateM1 )
 800245a:	7d7b      	ldrb	r3, [r7, #21]
 800245c:	3b03      	subs	r3, #3
 800245e:	2b10      	cmp	r3, #16
 8002460:	f200 8196 	bhi.w	8002790 <TSK_MediumFrequencyTaskM1+0x364>
 8002464:	a201      	add	r2, pc, #4	; (adr r2, 800246c <TSK_MediumFrequencyTaskM1+0x40>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	080024b1 	.word	0x080024b1
 8002470:	0800255b 	.word	0x0800255b
 8002474:	080026a9 	.word	0x080026a9
 8002478:	080026df 	.word	0x080026df
 800247c:	08002707 	.word	0x08002707
 8002480:	08002733 	.word	0x08002733
 8002484:	08002775 	.word	0x08002775
 8002488:	08002791 	.word	0x08002791
 800248c:	08002791 	.word	0x08002791
 8002490:	08002791 	.word	0x08002791
 8002494:	08002791 	.word	0x08002791
 8002498:	08002791 	.word	0x08002791
 800249c:	08002791 	.word	0x08002791
 80024a0:	080024df 	.word	0x080024df
 80024a4:	08002501 	.word	0x08002501
 80024a8:	0800251f 	.word	0x0800251f
 80024ac:	0800262d 	.word	0x0800262d
  {
  case IDLE_START:
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 80024b0:	4ba8      	ldr	r3, [pc, #672]	; (8002754 <TSK_MediumFrequencyTaskM1+0x328>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fb57 	bl	8001b68 <MCI_GetImposedMotorDirection>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4619      	mov	r1, r3
 80024be:	48a6      	ldr	r0, [pc, #664]	; (8002758 <TSK_MediumFrequencyTaskM1+0x32c>)
 80024c0:	f00c ff1e 	bl	800f300 <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 80024c4:	4ba5      	ldr	r3, [pc, #660]	; (800275c <TSK_MediumFrequencyTaskM1+0x330>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f00a fef0 	bl	800d2ae <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 80024ce:	2014      	movs	r0, #20
 80024d0:	f000 fa56 	bl	8002980 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80024d4:	2110      	movs	r1, #16
 80024d6:	489e      	ldr	r0, [pc, #632]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 80024d8:	f00c f89e 	bl	800e618 <STM_NextState>
    break;
 80024dc:	e167      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>

  case CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80024de:	f000 fa5f 	bl	80029a0 <TSK_ChargeBootCapDelayHasElapsedM1>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 8155 	beq.w	8002794 <TSK_MediumFrequencyTaskM1+0x368>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80024ea:	4b9c      	ldr	r3, [pc, #624]	; (800275c <TSK_MediumFrequencyTaskM1+0x330>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f009 fd9d 	bl	800c030 <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Charge BootCap elapsed */

      STM_NextState(&STM[M1],OFFSET_CALIB);
 80024f6:	2111      	movs	r1, #17
 80024f8:	4895      	ldr	r0, [pc, #596]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 80024fa:	f00c f88d 	bl	800e618 <STM_NextState>
    }
    break;
 80024fe:	e149      	b.n	8002794 <TSK_MediumFrequencyTaskM1+0x368>

  case OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8002500:	4b96      	ldr	r3, [pc, #600]	; (800275c <TSK_MediumFrequencyTaskM1+0x330>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f009 fd92 	bl	800c030 <PWMC_CurrentReadingCalibr>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8142 	beq.w	8002798 <TSK_MediumFrequencyTaskM1+0x36c>
    {
      STM_NextState( &STM[M1], CLEAR );
 8002514:	2112      	movs	r1, #18
 8002516:	488e      	ldr	r0, [pc, #568]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 8002518:	f00c f87e 	bl	800e618 <STM_NextState>
    }
    break;
 800251c:	e13c      	b.n	8002798 <TSK_MediumFrequencyTaskM1+0x36c>

  case CLEAR:
    /* In a sensorless configuration. Initiate the Revup procedure */
    FOCVars[M1].bDriveInput = EXTERNAL;
 800251e:	4b90      	ldr	r3, [pc, #576]	; (8002760 <TSK_MediumFrequencyTaskM1+0x334>)
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002526:	4b8f      	ldr	r3, [pc, #572]	; (8002764 <TSK_MediumFrequencyTaskM1+0x338>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	498f      	ldr	r1, [pc, #572]	; (8002768 <TSK_MediumFrequencyTaskM1+0x33c>)
 800252c:	4618      	mov	r0, r3
 800252e:	f00b fe95 	bl	800e25c <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8002532:	4885      	ldr	r0, [pc, #532]	; (8002748 <TSK_MediumFrequencyTaskM1+0x31c>)
 8002534:	f00d f950 	bl	800f7d8 <STO_PLL_Clear>

    if ( STM_NextState( &STM[M1], START ) == true )
 8002538:	2104      	movs	r1, #4
 800253a:	4885      	ldr	r0, [pc, #532]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 800253c:	f00c f86c 	bl	800e618 <STM_NextState>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 812a 	beq.w	800279c <TSK_MediumFrequencyTaskM1+0x370>
    {
      FOC_Clear( M1 );
 8002548:	2000      	movs	r0, #0
 800254a:	f000 f93b 	bl	80027c4 <FOC_Clear>

      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 800254e:	4b83      	ldr	r3, [pc, #524]	; (800275c <TSK_MediumFrequencyTaskM1+0x330>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f00a ff01 	bl	800d35a <R3_1_SwitchOnPWM>
    }
    break;
 8002558:	e120      	b.n	800279c <TSK_MediumFrequencyTaskM1+0x370>
    {

      /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
      int16_t hForcedMecSpeedUnit;
      qd_t IqdRef;
      bool ObserverConverged = false;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

      /* Execute the Rev Up procedure */
      if( ! RUC_Exec( &RevUpControlM1 ) )
 800255e:	487e      	ldr	r0, [pc, #504]	; (8002758 <TSK_MediumFrequencyTaskM1+0x32c>)
 8002560:	f00c ff16 	bl	800f390 <RUC_Exec>
 8002564:	4603      	mov	r3, r0
 8002566:	f083 0301 	eor.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <TSK_MediumFrequencyTaskM1+0x150>
      {
        /* The time allowed for the startup sequence has expired */
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002570:	2200      	movs	r2, #0
 8002572:	2110      	movs	r1, #16
 8002574:	4876      	ldr	r0, [pc, #472]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 8002576:	f00c f9b1 	bl	800e8dc <STM_FaultProcessing>
 800257a:	e010      	b.n	800259e <TSK_MediumFrequencyTaskM1+0x172>
      }
      else
      {
        /* Execute the torque open loop current start-up ramp:
         * Compute the Iq reference current as configured in the Rev Up sequence */
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 800257c:	4b79      	ldr	r3, [pc, #484]	; (8002764 <TSK_MediumFrequencyTaskM1+0x338>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f00b ff7b 	bl	800e47c <STC_CalcTorqueReference>
 8002586:	4603      	mov	r3, r0
 8002588:	81bb      	strh	r3, [r7, #12]
        IqdRef.d = FOCVars[M1].UserIdref;
 800258a:	4b75      	ldr	r3, [pc, #468]	; (8002760 <TSK_MediumFrequencyTaskM1+0x334>)
 800258c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002590:	81fb      	strh	r3, [r7, #14]
        /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
        FOCVars[M1].Iqdref = IqdRef;
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <TSK_MediumFrequencyTaskM1+0x334>)
 8002594:	3310      	adds	r3, #16
 8002596:	f107 020c 	add.w	r2, r7, #12
 800259a:	6810      	ldr	r0, [r2, #0]
 800259c:	6018      	str	r0, [r3, #0]
      }

      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	4619      	mov	r1, r3
 80025a4:	4870      	ldr	r0, [pc, #448]	; (8002768 <TSK_MediumFrequencyTaskM1+0x33c>)
 80025a6:	f00c fd00 	bl	800efaa <VSS_CalcAvrgMecSpeedUnit>

      /* check that startup stage where the observer has to be used has been reached */
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 80025aa:	486b      	ldr	r0, [pc, #428]	; (8002758 <TSK_MediumFrequencyTaskM1+0x32c>)
 80025ac:	f00c ff2a 	bl	800f404 <RUC_FirstAccelerationStageReached>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00c      	beq.n	80025d0 <TSK_MediumFrequencyTaskM1+0x1a4>
      {
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 80025b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025ba:	4619      	mov	r1, r3
 80025bc:	4862      	ldr	r0, [pc, #392]	; (8002748 <TSK_MediumFrequencyTaskM1+0x31c>)
 80025be:	f00d f973 	bl	800f8a8 <STO_PLL_IsObserverConverged>
 80025c2:	4603      	mov	r3, r0
 80025c4:	75fb      	strb	r3, [r7, #23]
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	4619      	mov	r1, r3
 80025ca:	4867      	ldr	r0, [pc, #412]	; (8002768 <TSK_MediumFrequencyTaskM1+0x33c>)
 80025cc:	f00c fe28 	bl	800f220 <VSS_SetStartTransition>
      }

      if ( ObserverConverged )
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80e4 	beq.w	80027a0 <TSK_MediumFrequencyTaskM1+0x374>
      {
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 80025d8:	485b      	ldr	r0, [pc, #364]	; (8002748 <TSK_MediumFrequencyTaskM1+0x31c>)
 80025da:	f00b fd64 	bl	800e0a6 <SPD_GetElAngle>
 80025de:	4603      	mov	r3, r0
 80025e0:	4619      	mov	r1, r3
 80025e2:	4b5f      	ldr	r3, [pc, #380]	; (8002760 <TSK_MediumFrequencyTaskM1+0x334>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	461a      	mov	r2, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f7ff fc45 	bl	8001e7a <MCM_Park>
 80025f0:	4603      	mov	r3, r0
 80025f2:	60bb      	str	r3, [r7, #8]

        /* Start switch over ramp. This ramp will transition from the revup to the closed loop FOC. */
        REMNG_Init( pREMNG[M1] );
 80025f4:	4b5d      	ldr	r3, [pc, #372]	; (800276c <TSK_MediumFrequencyTaskM1+0x340>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00b fc39 	bl	800de70 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80025fe:	4b5b      	ldr	r3, [pc, #364]	; (800276c <TSK_MediumFrequencyTaskM1+0x340>)
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	4b57      	ldr	r3, [pc, #348]	; (8002760 <TSK_MediumFrequencyTaskM1+0x334>)
 8002604:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002608:	2200      	movs	r2, #0
 800260a:	4619      	mov	r1, r3
 800260c:	f00b fc7e 	bl	800df0c <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 8002610:	4b56      	ldr	r3, [pc, #344]	; (800276c <TSK_MediumFrequencyTaskM1+0x340>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002618:	4611      	mov	r1, r2
 800261a:	2232      	movs	r2, #50	; 0x32
 800261c:	4618      	mov	r0, r3
 800261e:	f00b fc75 	bl	800df0c <REMNG_ExecRamp>

        STM_NextState( &STM[M1], SWITCH_OVER );
 8002622:	2113      	movs	r1, #19
 8002624:	484a      	ldr	r0, [pc, #296]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 8002626:	f00b fff7 	bl	800e618 <STM_NextState>
      }
    }
    break;
 800262a:	e0b9      	b.n	80027a0 <TSK_MediumFrequencyTaskM1+0x374>
  case SWITCH_OVER:
    {
      bool LoopClosed;
      int16_t hForcedMecSpeedUnit;

      if( ! RUC_Exec( &RevUpControlM1 ) )
 800262c:	484a      	ldr	r0, [pc, #296]	; (8002758 <TSK_MediumFrequencyTaskM1+0x32c>)
 800262e:	f00c feaf 	bl	800f390 <RUC_Exec>
 8002632:	4603      	mov	r3, r0
 8002634:	f083 0301 	eor.w	r3, r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <TSK_MediumFrequencyTaskM1+0x21e>
      {
          /* The time allowed for the startup sequence has expired */
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 800263e:	2200      	movs	r2, #0
 8002640:	2110      	movs	r1, #16
 8002642:	4843      	ldr	r0, [pc, #268]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 8002644:	f00c f94a 	bl	800e8dc <STM_FaultProcessing>
          STM_NextState( &STM[M1], START_RUN );
        }
      }
    }

    break;
 8002648:	e0ac      	b.n	80027a4 <TSK_MediumFrequencyTaskM1+0x378>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 800264a:	1dbb      	adds	r3, r7, #6
 800264c:	4619      	mov	r1, r3
 800264e:	4846      	ldr	r0, [pc, #280]	; (8002768 <TSK_MediumFrequencyTaskM1+0x33c>)
 8002650:	f00c fcab 	bl	800efaa <VSS_CalcAvrgMecSpeedUnit>
 8002654:	4603      	mov	r3, r0
 8002656:	753b      	strb	r3, [r7, #20]
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8002658:	4843      	ldr	r0, [pc, #268]	; (8002768 <TSK_MediumFrequencyTaskM1+0x33c>)
 800265a:	f00c fe05 	bl	800f268 <VSS_TransitionEnded>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	7d3b      	ldrb	r3, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	753b      	strb	r3, [r7, #20]
        if ( LoopClosed == true )
 8002672:	7d3b      	ldrb	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8095 	beq.w	80027a4 <TSK_MediumFrequencyTaskM1+0x378>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <TSK_MediumFrequencyTaskM1+0x344>)
 800267c:	681c      	ldr	r4, [r3, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <TSK_MediumFrequencyTaskM1+0x334>)
 8002680:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002684:	461d      	mov	r5, r3
 8002686:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <TSK_MediumFrequencyTaskM1+0x344>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f009 f885 	bl	800b79a <PID_GetKIDivisor>
 8002690:	4603      	mov	r3, r0
 8002692:	fb03 f305 	mul.w	r3, r3, r5
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8002696:	4619      	mov	r1, r3
 8002698:	4620      	mov	r0, r4
 800269a:	f009 f864 	bl	800b766 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 800269e:	2105      	movs	r1, #5
 80026a0:	482b      	ldr	r0, [pc, #172]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 80026a2:	f00b ffb9 	bl	800e618 <STM_NextState>
    break;
 80026a6:	e07d      	b.n	80027a4 <TSK_MediumFrequencyTaskM1+0x378>

  case START_RUN:
 /* only for sensor-less control */
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <TSK_MediumFrequencyTaskM1+0x338>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4926      	ldr	r1, [pc, #152]	; (8002748 <TSK_MediumFrequencyTaskM1+0x31c>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f00b fdd4 	bl	800e25c <STC_SetSpeedSensor>
    {
      /* USER CODE BEGIN MediumFrequencyTask M1 1 */

      /* USER CODE END MediumFrequencyTask M1 1 */
	  FOC_InitAdditionalMethods(M1);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f000 f91b 	bl	80028f0 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80026ba:	2000      	movs	r0, #0
 80026bc:	f000 f924 	bl	8002908 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80026c0:	2106      	movs	r1, #6
 80026c2:	4823      	ldr	r0, [pc, #140]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 80026c4:	f00b ffa8 	bl	800e618 <STM_NextState>
    }
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <TSK_MediumFrequencyTaskM1+0x338>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00b ff7e 	bl	800e5ce <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <TSK_MediumFrequencyTaskM1+0x328>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f9ba 	bl	8001a50 <MCI_ExecBufferedCommands>

    break;
 80026dc:	e067      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
  case RUN:
    /* USER CODE BEGIN MediumFrequencyTask M1 2 */

    /* USER CODE END MediumFrequencyTask M1 2 */

    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <TSK_MediumFrequencyTaskM1+0x328>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f9b4 	bl	8001a50 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80026e8:	2000      	movs	r0, #0
 80026ea:	f000 f90d 	bl	8002908 <FOC_CalcCurrRef>

    if( !IsSpeedReliable )
 80026ee:	7dbb      	ldrb	r3, [r7, #22]
 80026f0:	f083 0301 	eor.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d056      	beq.n	80027a8 <TSK_MediumFrequencyTaskM1+0x37c>
    {
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80026fa:	2200      	movs	r2, #0
 80026fc:	2120      	movs	r1, #32
 80026fe:	4814      	ldr	r0, [pc, #80]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 8002700:	f00c f8ec 	bl	800e8dc <STM_FaultProcessing>
    }

    /* USER CODE BEGIN MediumFrequencyTask M1 3 */

    /* USER CODE END MediumFrequencyTask M1 3 */
    break;
 8002704:	e050      	b.n	80027a8 <TSK_MediumFrequencyTaskM1+0x37c>

  case ANY_STOP:
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <TSK_MediumFrequencyTaskM1+0x330>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f00a fec6 	bl	800d49c <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 8002710:	2000      	movs	r0, #0
 8002712:	f000 f857 	bl	80027c4 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <TSK_MediumFrequencyTaskM1+0x320>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f008 fe95 	bl	800b44a <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8002720:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002724:	f000 f952 	bl	80029cc <TSK_SetStopPermanencyTimeM1>

    /* USER CODE BEGIN MediumFrequencyTask M1 4 */

    /* USER CODE END MediumFrequencyTask M1 4 */

    STM_NextState( &STM[M1], STOP );
 8002728:	2108      	movs	r1, #8
 800272a:	4809      	ldr	r0, [pc, #36]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 800272c:	f00b ff74 	bl	800e618 <STM_NextState>
    break;
 8002730:	e03d      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>

  case STOP:
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8002732:	f000 f95b 	bl	80029ec <TSK_StopPermanencyTimeHasElapsedM1>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d037      	beq.n	80027ac <TSK_MediumFrequencyTaskM1+0x380>
    {
      STM_NextState( &STM[M1], STOP_IDLE );
 800273c:	2109      	movs	r1, #9
 800273e:	4804      	ldr	r0, [pc, #16]	; (8002750 <TSK_MediumFrequencyTaskM1+0x324>)
 8002740:	f00b ff6a 	bl	800e618 <STM_NextState>
    }
    break;
 8002744:	e032      	b.n	80027ac <TSK_MediumFrequencyTaskM1+0x380>
 8002746:	bf00      	nop
 8002748:	20000300 	.word	0x20000300
 800274c:	20000adc 	.word	0x20000adc
 8002750:	20000ad0 	.word	0x20000ad0
 8002754:	20000a28 	.word	0x20000a28
 8002758:	200001d8 	.word	0x200001d8
 800275c:	20000a1c 	.word	0x20000a1c
 8002760:	20000a30 	.word	0x20000a30
 8002764:	20000ae4 	.word	0x20000ae4
 8002768:	200002c8 	.word	0x200002c8
 800276c:	20000ad8 	.word	0x20000ad8
 8002770:	20000a20 	.word	0x20000a20

  case STOP_IDLE:
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <TSK_MediumFrequencyTaskM1+0x38c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4910      	ldr	r1, [pc, #64]	; (80027bc <TSK_MediumFrequencyTaskM1+0x390>)
 800277a:	4618      	mov	r0, r3
 800277c:	f00b fd6e 	bl	800e25c <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8002780:	480e      	ldr	r0, [pc, #56]	; (80027bc <TSK_MediumFrequencyTaskM1+0x390>)
 8002782:	f00c fb1c 	bl	800edbe <VSS_Clear>

    /* USER CODE BEGIN MediumFrequencyTask M1 5 */

    /* USER CODE END MediumFrequencyTask M1 5 */
    STM_NextState( &STM[M1], IDLE );
 8002786:	2100      	movs	r1, #0
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <TSK_MediumFrequencyTaskM1+0x394>)
 800278a:	f00b ff45 	bl	800e618 <STM_NextState>
    break;
 800278e:	e00e      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>

  default:
    break;
 8002790:	bf00      	nop
 8002792:	e00c      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
    break;
 8002794:	bf00      	nop
 8002796:	e00a      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
    break;
 8002798:	bf00      	nop
 800279a:	e008      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
    break;
 800279c:	bf00      	nop
 800279e:	e006      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027a0:	bf00      	nop
 80027a2:	e004      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027a4:	bf00      	nop
 80027a6:	e002      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027a8:	bf00      	nop
 80027aa:	e000      	b.n	80027ae <TSK_MediumFrequencyTaskM1+0x382>
    break;
 80027ac:	bf00      	nop
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bdb0      	pop	{r4, r5, r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000ae4 	.word	0x20000ae4
 80027bc:	200002c8 	.word	0x200002c8
 80027c0:	20000ad0 	.word	0x20000ad0

080027c4 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
 80027ce:	2300      	movs	r3, #0
 80027d0:	82bb      	strh	r3, [r7, #20]
 80027d2:	2300      	movs	r3, #0
 80027d4:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
 80027d6:	2300      	movs	r3, #0
 80027d8:	823b      	strh	r3, [r7, #16]
 80027da:	2300      	movs	r3, #0
 80027dc:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
 80027de:	2300      	movs	r3, #0
 80027e0:	81bb      	strh	r3, [r7, #12]
 80027e2:	2300      	movs	r3, #0
 80027e4:	81fb      	strh	r3, [r7, #14]

  FOCVars[bMotor].Iab = NULL_ab;
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4a3c      	ldr	r2, [pc, #240]	; (80028dc <FOC_Clear+0x118>)
 80027ea:	2126      	movs	r1, #38	; 0x26
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	461a      	mov	r2, r3
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4a37      	ldr	r2, [pc, #220]	; (80028dc <FOC_Clear+0x118>)
 8002800:	2126      	movs	r1, #38	; 0x26
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3304      	adds	r3, #4
 800280a:	461a      	mov	r2, r3
 800280c:	f107 030c 	add.w	r3, r7, #12
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	4a31      	ldr	r2, [pc, #196]	; (80028dc <FOC_Clear+0x118>)
 8002818:	2126      	movs	r1, #38	; 0x26
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	330c      	adds	r3, #12
 8002822:	461a      	mov	r2, r3
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqdref = NULL_qd;
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	4a2b      	ldr	r2, [pc, #172]	; (80028dc <FOC_Clear+0x118>)
 8002830:	2126      	movs	r1, #38	; 0x26
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3310      	adds	r3, #16
 800283a:	461a      	mov	r2, r3
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	4a25      	ldr	r2, [pc, #148]	; (80028dc <FOC_Clear+0x118>)
 8002848:	2126      	movs	r1, #38	; 0x26
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	331e      	adds	r3, #30
 8002852:	2200      	movs	r2, #0
 8002854:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <FOC_Clear+0x118>)
 800285a:	2126      	movs	r1, #38	; 0x26
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3310      	adds	r3, #16
 8002864:	3306      	adds	r3, #6
 8002866:	f107 0210 	add.w	r2, r7, #16
 800286a:	6810      	ldr	r0, [r2, #0]
 800286c:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <FOC_Clear+0x118>)
 8002872:	2126      	movs	r1, #38	; 0x26
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3318      	adds	r3, #24
 800287c:	3302      	adds	r3, #2
 800287e:	f107 020c 	add.w	r2, r7, #12
 8002882:	6810      	ldr	r0, [r2, #0]
 8002884:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <FOC_Clear+0x118>)
 800288a:	2126      	movs	r1, #38	; 0x26
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	3320      	adds	r3, #32
 8002894:	2200      	movs	r2, #0
 8002896:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <FOC_Clear+0x11c>)
 800289c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f008 ff5f 	bl	800b766 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <FOC_Clear+0x120>)
 80028ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f008 ff57 	bl	800b766 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <FOC_Clear+0x124>)
 80028bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f00b fce5 	bl	800e290 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	4a08      	ldr	r2, [pc, #32]	; (80028ec <FOC_Clear+0x128>)
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f009 fba2 	bl	800c018 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80028d4:	bf00      	nop
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000a30 	.word	0x20000a30
 80028e0:	20000a24 	.word	0x20000a24
 80028e4:	20000ae0 	.word	0x20000ae0
 80028e8:	20000ae4 	.word	0x20000ae4
 80028ec:	20000a1c 	.word	0x20000a1c

080028f0 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	4603      	mov	r3, r0
 80028f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002908:	b590      	push	{r4, r7, lr}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <FOC_CalcCurrRef+0x70>)
 8002916:	2126      	movs	r1, #38	; 0x26
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3324      	adds	r3, #36	; 0x24
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d123      	bne.n	800296e <FOC_CalcCurrRef+0x66>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <FOC_CalcCurrRef+0x74>)
 800292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292e:	79fc      	ldrb	r4, [r7, #7]
 8002930:	4618      	mov	r0, r3
 8002932:	f00b fda3 	bl	800e47c <STC_CalcTorqueReference>
 8002936:	4603      	mov	r3, r0
 8002938:	4619      	mov	r1, r3
 800293a:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <FOC_CalcCurrRef+0x70>)
 800293c:	2326      	movs	r3, #38	; 0x26
 800293e:	fb03 f304 	mul.w	r3, r3, r4
 8002942:	4413      	add	r3, r2
 8002944:	331e      	adds	r3, #30
 8002946:	460a      	mov	r2, r1
 8002948:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800294a:	79fa      	ldrb	r2, [r7, #7]
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <FOC_CalcCurrRef+0x70>)
 8002950:	2026      	movs	r0, #38	; 0x26
 8002952:	fb00 f202 	mul.w	r2, r0, r2
 8002956:	440a      	add	r2, r1
 8002958:	321e      	adds	r2, #30
 800295a:	f9b2 0000 	ldrsh.w	r0, [r2]
 800295e:	4a06      	ldr	r2, [pc, #24]	; (8002978 <FOC_CalcCurrRef+0x70>)
 8002960:	2126      	movs	r1, #38	; 0x26
 8002962:	fb01 f303 	mul.w	r3, r1, r3
 8002966:	4413      	add	r3, r2
 8002968:	3310      	adds	r3, #16
 800296a:	4602      	mov	r2, r0
 800296c:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bd90      	pop	{r4, r7, pc}
 8002976:	bf00      	nop
 8002978:	20000a30 	.word	0x20000a30
 800297c:	20000ae4 	.word	0x20000ae4

08002980 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <TSK_SetChargeBootCapDelayM1+0x1c>)
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	8013      	strh	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	2000071a 	.word	0x2000071a

080029a0 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
  bool retVal = false;
 80029a6:	2300      	movs	r3, #0
 80029a8:	71fb      	strb	r3, [r7, #7]
  if (hBootCapDelayCounterM1 == 0)
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 80029b4:	2301      	movs	r3, #1
 80029b6:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 80029b8:	79fb      	ldrb	r3, [r7, #7]
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	2000071a 	.word	0x2000071a

080029cc <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 80029d6:	4a04      	ldr	r2, [pc, #16]	; (80029e8 <TSK_SetStopPermanencyTimeM1+0x1c>)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	8013      	strh	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	2000071c 	.word	0x2000071c

080029ec <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
  bool retVal = false;
 80029f2:	2300      	movs	r3, #0
 80029f4:	71fb      	strb	r3, [r7, #7]
  if (hStopPermanencyCounterM1 == 0)
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8002a00:	2301      	movs	r3, #1
 8002a02:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8002a04:	79fb      	ldrb	r3, [r7, #7]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	2000071c 	.word	0x2000071c

08002a18 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
  uint16_t hFOCreturn;

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002a22:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <TSK_HighFrequencyTask+0xe0>)
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	321a      	adds	r2, #26
 8002a28:	6810      	ldr	r0, [r2, #0]
 8002a2a:	6018      	str	r0, [r3, #0]
  if ( STM[M1].bState == SWITCH_OVER )
 8002a2c:	4b33      	ldr	r3, [pc, #204]	; (8002afc <TSK_HighFrequencyTask+0xe4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b13      	cmp	r3, #19
 8002a32:	d113      	bne.n	8002a5c <TSK_HighFrequencyTask+0x44>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002a34:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <TSK_HighFrequencyTask+0xe8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00b faf1 	bl	800e020 <REMNG_RampCompleted>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d008      	beq.n	8002a5c <TSK_HighFrequencyTask+0x44>
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <TSK_HighFrequencyTask+0xe8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f00b fa27 	bl	800dea2 <REMNG_Calc>
 8002a54:	4603      	mov	r3, r0
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <TSK_HighFrequencyTask+0xe0>)
 8002a5a:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8002a5c:	f000 f85a 	bl	8002b14 <FOC_CurrControllerM1>
 8002a60:	4603      	mov	r3, r0
 8002a62:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_FOC_DURATION)
 8002a64:	8abb      	ldrh	r3, [r7, #20]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d105      	bne.n	8002a76 <TSK_HighFrequencyTask+0x5e>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4823      	ldr	r0, [pc, #140]	; (8002afc <TSK_HighFrequencyTask+0xe4>)
 8002a70:	f00b ff34 	bl	800e8dc <STM_FaultProcessing>
 8002a74:	e03a      	b.n	8002aec <TSK_HighFrequencyTask+0xd4>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002a76:	4823      	ldr	r0, [pc, #140]	; (8002b04 <TSK_HighFrequencyTask+0xec>)
 8002a78:	f00c fcc4 	bl	800f404 <RUC_FirstAccelerationStageReached>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002a80:	4a1d      	ldr	r2, [pc, #116]	; (8002af8 <TSK_HighFrequencyTask+0xe0>)
 8002a82:	f107 0308 	add.w	r3, r7, #8
 8002a86:	3204      	adds	r2, #4
 8002a88:	6810      	ldr	r0, [r2, #0]
 8002a8a:	6018      	str	r0, [r3, #0]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <TSK_HighFrequencyTask+0xf0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f008 fbcb 	bl	800b22c <VBS_GetAvBusVoltage_d>
 8002a96:	4603      	mov	r3, r0
 8002a98:	81bb      	strh	r3, [r7, #12]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	481b      	ldr	r0, [pc, #108]	; (8002b0c <TSK_HighFrequencyTask+0xf4>)
 8002aa0:	f00c fce6 	bl	800f470 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002aa4:	4819      	ldr	r0, [pc, #100]	; (8002b0c <TSK_HighFrequencyTask+0xf4>)
 8002aa6:	f00c fe6d 	bl	800f784 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	f083 0301 	eor.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <TSK_HighFrequencyTask+0xa4>
    {
      STO_ResetPLL(&STO_PLL_M1);
 8002ab6:	4815      	ldr	r0, [pc, #84]	; (8002b0c <TSK_HighFrequencyTask+0xf4>)
 8002ab8:	f00c ff9a 	bl	800f9f0 <STO_ResetPLL>
    }
    hState = STM_GetState(&STM[M1]);
 8002abc:	480f      	ldr	r0, [pc, #60]	; (8002afc <TSK_HighFrequencyTask+0xe4>)
 8002abe:	f00b ff4b 	bl	800e958 <STM_GetState>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	823b      	strh	r3, [r7, #16]
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8002ac6:	8a3b      	ldrh	r3, [r7, #16]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d005      	beq.n	8002ad8 <TSK_HighFrequencyTask+0xc0>
 8002acc:	8a3b      	ldrh	r3, [r7, #16]
 8002ace:	2b13      	cmp	r3, #19
 8002ad0:	d002      	beq.n	8002ad8 <TSK_HighFrequencyTask+0xc0>
 8002ad2:	8a3b      	ldrh	r3, [r7, #16]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d109      	bne.n	8002aec <TSK_HighFrequencyTask+0xd4>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <TSK_HighFrequencyTask+0xf4>)
 8002ada:	f00b fae4 	bl	800e0a6 <SPD_GetElAngle>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	807b      	strh	r3, [r7, #2]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002ae2:	1cbb      	adds	r3, r7, #2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	480a      	ldr	r0, [pc, #40]	; (8002b10 <TSK_HighFrequencyTask+0xf8>)
 8002ae8:	f00c f9a9 	bl	800ee3e <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000a30 	.word	0x20000a30
 8002afc:	20000ad0 	.word	0x20000ad0
 8002b00:	20000ad8 	.word	0x20000ad8
 8002b04:	200001d8 	.word	0x200001d8
 8002b08:	20000ab0 	.word	0x20000ab0
 8002b0c:	20000300 	.word	0x20000300
 8002b10:	200002c8 	.word	0x200002c8

08002b14 <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_FOC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002b1a:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <FOC_CurrControllerM1+0x120>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f00b fbaa 	bl	800e278 <STC_GetSpeedSensor>
 8002b24:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 8002b26:	69f8      	ldr	r0, [r7, #28]
 8002b28:	f00b fabd 	bl	800e0a6 <SPD_GetElAngle>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8002b30:	69f8      	ldr	r0, [r7, #28]
 8002b32:	f00b fad2 	bl	800e0da <SPD_GetInstElSpeedDpp>
 8002b36:	2300      	movs	r3, #0
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	8b7b      	ldrh	r3, [r7, #26]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <FOC_CurrControllerM1+0x124>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f107 020c 	add.w	r2, r7, #12
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f009 f84c 	bl	800bbea <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff f947 	bl	8001de6 <MCM_Clarke>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002b5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b60:	4619      	mov	r1, r3
 8002b62:	68b8      	ldr	r0, [r7, #8]
 8002b64:	f7ff f989 	bl	8001e7a <MCM_Park>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002b6c:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <FOC_CurrControllerM1+0x128>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002b70:	4b33      	ldr	r3, [pc, #204]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002b72:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002b76:	4619      	mov	r1, r3
 8002b78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002b7c:	1acb      	subs	r3, r1, r3
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f008 fe33 	bl	800b7ec <PI_Controller>
 8002b86:	4603      	mov	r3, r0
 8002b88:	823b      	strh	r3, [r7, #16]

  Vqd.d = PI_Controller(pPIDId[M1],
 8002b8a:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <FOC_CurrControllerM1+0x130>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002b8e:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002b90:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002b9a:	1acb      	subs	r3, r1, r3
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f008 fe24 	bl	800b7ec <PI_Controller>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	827b      	strh	r3, [r7, #18]

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <FOC_CurrControllerM1+0x134>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6939      	ldr	r1, [r7, #16]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f008 fb61 	bl	800b276 <Circle_Limitation>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002bb8:	69f8      	ldr	r0, [r7, #28]
 8002bba:	f00b fa8e 	bl	800e0da <SPD_GetInstElSpeedDpp>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	8b7b      	ldrh	r3, [r7, #26]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002bca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6938      	ldr	r0, [r7, #16]
 8002bd2:	f7ff f9ca 	bl	8001f6a <MCM_Rev_Park>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <FOC_CurrControllerM1+0x124>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f009 f810 	bl	800bc06 <PWMC_SetPhaseVoltage>
 8002be6:	4603      	mov	r3, r0
 8002be8:	833b      	strh	r3, [r7, #24]
  FOCVars[M1].Vqd = Vqd;
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002bec:	3316      	adds	r3, #22
 8002bee:	f107 0210 	add.w	r2, r7, #16
 8002bf2:	6810      	ldr	r0, [r2, #0]
 8002bf4:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	6010      	str	r0, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002c04:	3304      	adds	r3, #4
 8002c06:	f107 0208 	add.w	r2, r7, #8
 8002c0a:	6810      	ldr	r0, [r2, #0]
 8002c0c:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iqd = Iqd;
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002c10:	330c      	adds	r3, #12
 8002c12:	f107 0214 	add.w	r2, r7, #20
 8002c16:	6810      	ldr	r0, [r2, #0]
 8002c18:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002c1c:	331a      	adds	r3, #26
 8002c1e:	1d3a      	adds	r2, r7, #4
 8002c20:	6810      	ldr	r0, [r2, #0]
 8002c22:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <FOC_CurrControllerM1+0x12c>)
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	8413      	strh	r3, [r2, #32]
  return(hCodeError);
 8002c2a:	8b3b      	ldrh	r3, [r7, #24]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000ae4 	.word	0x20000ae4
 8002c38:	20000a1c 	.word	0x20000a1c
 8002c3c:	20000a24 	.word	0x20000a24
 8002c40:	20000a30 	.word	0x20000a30
 8002c44:	20000ae0 	.word	0x20000ae0
 8002c48:	20000aac 	.word	0x20000aac

08002c4c <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <TSK_SafetyTask+0x1c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d104      	bne.n	8002c62 <TSK_SafetyTask+0x16>
  {
    TSK_SafetyTask_PWMOFF(M1);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f000 f807 	bl	8002c6c <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv ();
 8002c5e:	f001 f9a3 	bl	8003fa8 <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000071e 	.word	0x2000071e

08002c6c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
 8002c76:	2300      	movs	r3, #0
 8002c78:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 8002c7a:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8002c7e:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	f107 0210 	add.w	r2, r7, #16
 8002c88:	4413      	add	r3, r2
 8002c8a:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4a37      	ldr	r2, [pc, #220]	; (8002d70 <TSK_SafetyTask_PWMOFF+0x104>)
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f008 fc9d 	bl	800b5d6 <NTC_CalcAvTemp>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4023      	ands	r3, r4
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21a      	sxth	r2, r3
 8002ca4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	b21b      	sxth	r3, r3
 8002cac:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <TSK_SafetyTask_PWMOFF+0x108>)
 8002cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f009 f9fd 	bl	800c0b6 <PWMC_CheckOverCurrent>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	89fb      	ldrh	r3, [r7, #14]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d114      	bne.n	8002cf6 <TSK_SafetyTask_PWMOFF+0x8a>
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	f107 0210 	add.w	r2, r7, #16
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <TSK_SafetyTask_PWMOFF+0x10c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f00b f847 	bl	800dd72 <RVBS_CalcAvVbusFilt>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4023      	ands	r3, r4
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	81fb      	strh	r3, [r7, #14]
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 8002cf6:	79fa      	ldrb	r2, [r7, #7]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4a1e      	ldr	r2, [pc, #120]	; (8002d7c <TSK_SafetyTask_PWMOFF+0x110>)
 8002d02:	1898      	adds	r0, r3, r2
 8002d04:	89fb      	ldrh	r3, [r7, #14]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f00b fde5 	bl	800e8dc <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4a17      	ldr	r2, [pc, #92]	; (8002d7c <TSK_SafetyTask_PWMOFF+0x110>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f00b fe19 	bl	800e958 <STM_GetState>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b0a      	cmp	r3, #10
 8002d2a:	d002      	beq.n	8002d32 <TSK_SafetyTask_PWMOFF+0xc6>
 8002d2c:	2b0b      	cmp	r3, #11
 8002d2e:	d013      	beq.n	8002d58 <TSK_SafetyTask_PWMOFF+0xec>
	/* USER CODE BEGIN TSK_SafetyTask_PWMOFF 2 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 2 */
    break;
  default:
    break;
 8002d30:	e01a      	b.n	8002d68 <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <TSK_SafetyTask_PWMOFF+0x108>)
 8002d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f009 f96c 	bl	800c018 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fd3e 	bl	80027c4 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <TSK_SafetyTask_PWMOFF+0x114>)
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f008 fb7a 	bl	800b44a <MPM_Clear>
    break;
 8002d56:	e007      	b.n	8002d68 <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <TSK_SafetyTask_PWMOFF+0x108>)
 8002d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f009 f959 	bl	800c018 <PWMC_SwitchOffPWM>
    break;
 8002d66:	bf00      	nop
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	20000a18 	.word	0x20000a18
 8002d74:	20000a1c 	.word	0x20000a1c
 8002d78:	20000ab0 	.word	0x20000ab0
 8002d7c:	20000ad0 	.word	0x20000ad0
 8002d80:	20000adc 	.word	0x20000adc

08002d84 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <TSK_HardwareFaultTask+0x1c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f00a fb85 	bl	800d49c <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	4803      	ldr	r0, [pc, #12]	; (8002da4 <TSK_HardwareFaultTask+0x20>)
 8002d98:	f00b fda0 	bl	800e8dc <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20000a1c 	.word	0x20000a1c
 8002da4:	20000ad0 	.word	0x20000ad0

08002da8 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8002dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002db0:	4824      	ldr	r0, [pc, #144]	; (8002e44 <mc_lock_pins+0x9c>)
 8002db2:	f7ff f9a5 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 8002db6:	2104      	movs	r1, #4
 8002db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dbc:	f7ff f9a0 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc6:	f7ff f99b 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 8002dca:	2101      	movs	r1, #1
 8002dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd0:	f7ff f996 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	481b      	ldr	r0, [pc, #108]	; (8002e44 <mc_lock_pins+0x9c>)
 8002dd8:	f7ff f992 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 8002ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de0:	4818      	ldr	r0, [pc, #96]	; (8002e44 <mc_lock_pins+0x9c>)
 8002de2:	f7ff f98d 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dec:	f7ff f988 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_INPUT_GPIO_Port, M1_PWM_INPUT_Pin);
 8002df0:	2120      	movs	r1, #32
 8002df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df6:	f7ff f983 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 8002dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e02:	f7ff f97d 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 8002e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0e:	f7ff f977 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 8002e12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e16:	480b      	ldr	r0, [pc, #44]	; (8002e44 <mc_lock_pins+0x9c>)
 8002e18:	f7ff f972 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 8002e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e24:	f7ff f96c 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 8002e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <mc_lock_pins+0x9c>)
 8002e2e:	f7ff f967 	bl	8002100 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 8002e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f7ff f961 	bl	8002100 <LL_GPIO_LockPin>
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	48000400 	.word	0x48000400

08002e48 <MCP_Init>:
               FCP_Handle_t * pFCP,
               FCP_SendFct_t fFcpSend,
               FCP_ReceiveFct_t fFcpReceive,
               FCP_AbortReceiveFct_t fFcpAbortReceive,
               const char* s_fwVer )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	619a      	str	r2, [r3, #24]
  pHandle->s_fwVer = s_fwVer;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <MCP_Init+0x4c>)
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <MCP_Init+0x50>)
 8002e6a:	4a0c      	ldr	r2, [pc, #48]	; (8002e9c <MCP_Init+0x54>)
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	68b8      	ldr	r0, [r7, #8]
 8002e70:	f008 fa95 	bl	800b39e <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	61da      	str	r2, [r3, #28]
  pHandle->fFcpReceive = fFcpReceive;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	621a      	str	r2, [r3, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24

  MCP_WaitNextFrame(pHandle);
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f815 	bl	8002eb6 <MCP_WaitNextFrame>
}
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	08002ea1 	.word	0x08002ea1
 8002e98:	08002f09 	.word	0x08002f09
 8002e9c:	08002ee7 	.word	0x08002ee7

08002ea0 <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f804 	bl	8002eb6 <MCP_WaitNextFrame>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6992      	ldr	r2, [r2, #24]
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6992      	ldr	r2, [r2, #24]
 8002eda:	4610      	mov	r0, r2
 8002edc:	4798      	blx	r3
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	72fb      	strb	r3, [r7, #11]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f7ff ffdb 	bl	8002eb6 <MCP_WaitNextFrame>
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b0a9      	sub	sp, #164	; 0xa4
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	72fb      	strb	r3, [r7, #11]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool bNoError = false; // Default is error
 8002f22:	2300      	movs	r3, #0
 8002f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 8002f28:	7afb      	ldrb	r3, [r7, #11]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  if (bMotorSelection != 0)
 8002f30:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d014      	beq.n	8002f62 <MCP_ReceivedFrame+0x5a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	461a      	mov	r2, r3
 8002f42:	2100      	movs	r1, #0
 8002f44:	f001 fdd8 	bl	8004af8 <UI_SetReg>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <MCP_ReceivedFrame+0x50>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002f4e:	7afb      	ldrb	r3, [r7, #11]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	72fb      	strb	r3, [r7, #11]
 8002f56:	e004      	b.n	8002f62 <MCP_ReceivedFrame+0x5a>

    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002f5c:	230b      	movs	r3, #11
 8002f5e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
  }

  switch (Code)
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	2b12      	cmp	r3, #18
 8002f66:	f200 8543 	bhi.w	80039f0 <MCP_ReceivedFrame+0xae8>
 8002f6a:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <MCP_ReceivedFrame+0x68>)
 8002f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f70:	080039f9 	.word	0x080039f9
 8002f74:	08002fbd 	.word	0x08002fbd
 8002f78:	080032bd 	.word	0x080032bd
 8002f7c:	080035f5 	.word	0x080035f5
 8002f80:	080039f1 	.word	0x080039f1
 8002f84:	080039f1 	.word	0x080039f1
 8002f88:	08003619 	.word	0x08003619
 8002f8c:	080036dd 	.word	0x080036dd
 8002f90:	0800378f 	.word	0x0800378f
 8002f94:	0800382f 	.word	0x0800382f
 8002f98:	080038d7 	.word	0x080038d7
 8002f9c:	08003925 	.word	0x08003925
 8002fa0:	0800396b 	.word	0x0800396b
 8002fa4:	08003733 	.word	0x08003733
 8002fa8:	080039f1 	.word	0x080039f1
 8002fac:	080039f1 	.word	0x080039f1
 8002fb0:	080039f1 	.word	0x080039f1
 8002fb4:	080039f1 	.word	0x080039f1
 8002fb8:	080039f9 	.word	0x080039f9
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002fc4:	2305      	movs	r3, #5
 8002fc6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 8002fca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002fce:	2b88      	cmp	r3, #136	; 0x88
 8002fd0:	f200 816f 	bhi.w	80032b2 <MCP_ReceivedFrame+0x3aa>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <MCP_ReceivedFrame+0xd4>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003201 	.word	0x08003201
 8002fe0:	080032b3 	.word	0x080032b3
 8002fe4:	080032b3 	.word	0x080032b3
 8002fe8:	0800321f 	.word	0x0800321f
 8002fec:	080032b3 	.word	0x080032b3
 8002ff0:	0800324b 	.word	0x0800324b
 8002ff4:	0800324b 	.word	0x0800324b
 8002ff8:	0800324b 	.word	0x0800324b
 8002ffc:	0800324b 	.word	0x0800324b
 8003000:	0800324b 	.word	0x0800324b
 8003004:	0800324b 	.word	0x0800324b
 8003008:	0800324b 	.word	0x0800324b
 800300c:	0800324b 	.word	0x0800324b
 8003010:	0800324b 	.word	0x0800324b
 8003014:	0800324b 	.word	0x0800324b
 8003018:	0800324b 	.word	0x0800324b
 800301c:	08003275 	.word	0x08003275
 8003020:	08003275 	.word	0x08003275
 8003024:	080032b3 	.word	0x080032b3
 8003028:	080032b3 	.word	0x080032b3
 800302c:	0800324b 	.word	0x0800324b
 8003030:	0800324b 	.word	0x0800324b
 8003034:	0800324b 	.word	0x0800324b
 8003038:	0800324b 	.word	0x0800324b
 800303c:	0800324b 	.word	0x0800324b
 8003040:	080032b3 	.word	0x080032b3
 8003044:	080032b3 	.word	0x080032b3
 8003048:	080032b3 	.word	0x080032b3
 800304c:	0800323b 	.word	0x0800323b
 8003050:	08003243 	.word	0x08003243
 8003054:	080032b3 	.word	0x080032b3
 8003058:	080032b3 	.word	0x080032b3
 800305c:	080032b3 	.word	0x080032b3
 8003060:	080032b3 	.word	0x080032b3
 8003064:	080032b3 	.word	0x080032b3
 8003068:	080032b3 	.word	0x080032b3
 800306c:	080032b3 	.word	0x080032b3
 8003070:	080032b3 	.word	0x080032b3
 8003074:	080032b3 	.word	0x080032b3
 8003078:	080032b3 	.word	0x080032b3
 800307c:	080032b3 	.word	0x080032b3
 8003080:	080032b3 	.word	0x080032b3
 8003084:	080032b3 	.word	0x080032b3
 8003088:	080032b3 	.word	0x080032b3
 800308c:	080032b3 	.word	0x080032b3
 8003090:	080032b3 	.word	0x080032b3
 8003094:	080032b3 	.word	0x080032b3
 8003098:	080032b3 	.word	0x080032b3
 800309c:	080032b3 	.word	0x080032b3
 80030a0:	080032b3 	.word	0x080032b3
 80030a4:	080032b3 	.word	0x080032b3
 80030a8:	080032b3 	.word	0x080032b3
 80030ac:	080032b3 	.word	0x080032b3
 80030b0:	080032b3 	.word	0x080032b3
 80030b4:	080032b3 	.word	0x080032b3
 80030b8:	080032b3 	.word	0x080032b3
 80030bc:	080032b3 	.word	0x080032b3
 80030c0:	080032b3 	.word	0x080032b3
 80030c4:	080032b3 	.word	0x080032b3
 80030c8:	080032b3 	.word	0x080032b3
 80030cc:	080032b3 	.word	0x080032b3
 80030d0:	080032b3 	.word	0x080032b3
 80030d4:	080032b3 	.word	0x080032b3
 80030d8:	080032b3 	.word	0x080032b3
 80030dc:	080032b3 	.word	0x080032b3
 80030e0:	0800324b 	.word	0x0800324b
 80030e4:	080032b3 	.word	0x080032b3
 80030e8:	080032b3 	.word	0x080032b3
 80030ec:	080032b3 	.word	0x080032b3
 80030f0:	080032b3 	.word	0x080032b3
 80030f4:	08003275 	.word	0x08003275
 80030f8:	08003275 	.word	0x08003275
 80030fc:	08003275 	.word	0x08003275
 8003100:	080032b3 	.word	0x080032b3
 8003104:	080032b3 	.word	0x080032b3
 8003108:	080032b3 	.word	0x080032b3
 800310c:	080032b3 	.word	0x080032b3
 8003110:	080032b3 	.word	0x080032b3
 8003114:	080032b3 	.word	0x080032b3
 8003118:	0800324b 	.word	0x0800324b
 800311c:	080032b3 	.word	0x080032b3
 8003120:	080032b3 	.word	0x080032b3
 8003124:	080032b3 	.word	0x080032b3
 8003128:	0800324b 	.word	0x0800324b
 800312c:	0800324b 	.word	0x0800324b
 8003130:	0800324b 	.word	0x0800324b
 8003134:	0800324b 	.word	0x0800324b
 8003138:	0800324b 	.word	0x0800324b
 800313c:	0800324b 	.word	0x0800324b
 8003140:	0800324b 	.word	0x0800324b
 8003144:	080032b3 	.word	0x080032b3
 8003148:	08003275 	.word	0x08003275
 800314c:	080032b3 	.word	0x080032b3
 8003150:	080032b3 	.word	0x080032b3
 8003154:	080032b3 	.word	0x080032b3
 8003158:	080032b3 	.word	0x080032b3
 800315c:	080032b3 	.word	0x080032b3
 8003160:	0800324b 	.word	0x0800324b
 8003164:	080032b3 	.word	0x080032b3
 8003168:	080032b3 	.word	0x080032b3
 800316c:	0800324b 	.word	0x0800324b
 8003170:	0800324b 	.word	0x0800324b
 8003174:	080032b3 	.word	0x080032b3
 8003178:	080032b3 	.word	0x080032b3
 800317c:	080032b3 	.word	0x080032b3
 8003180:	080032b3 	.word	0x080032b3
 8003184:	080032b3 	.word	0x080032b3
 8003188:	080032b3 	.word	0x080032b3
 800318c:	080032b3 	.word	0x080032b3
 8003190:	080032b3 	.word	0x080032b3
 8003194:	080032b3 	.word	0x080032b3
 8003198:	080032b3 	.word	0x080032b3
 800319c:	080032b3 	.word	0x080032b3
 80031a0:	080032b3 	.word	0x080032b3
 80031a4:	080032b3 	.word	0x080032b3
 80031a8:	080032b3 	.word	0x080032b3
 80031ac:	0800321f 	.word	0x0800321f
 80031b0:	08003275 	.word	0x08003275
 80031b4:	08003275 	.word	0x08003275
 80031b8:	08003275 	.word	0x08003275
 80031bc:	08003275 	.word	0x08003275
 80031c0:	08003275 	.word	0x08003275
 80031c4:	080032b3 	.word	0x080032b3
 80031c8:	080032b3 	.word	0x080032b3
 80031cc:	080032b3 	.word	0x080032b3
 80031d0:	08003275 	.word	0x08003275
 80031d4:	08003275 	.word	0x08003275
 80031d8:	080032b3 	.word	0x080032b3
 80031dc:	080032b3 	.word	0x080032b3
 80031e0:	080032b3 	.word	0x080032b3
 80031e4:	080032b3 	.word	0x080032b3
 80031e8:	080032b3 	.word	0x080032b3
 80031ec:	080032b3 	.word	0x080032b3
 80031f0:	080032b3 	.word	0x080032b3
 80031f4:	0800324b 	.word	0x0800324b
 80031f8:	0800324b 	.word	0x0800324b
 80031fc:	0800324b 	.word	0x0800324b
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3301      	adds	r3, #1
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	663b      	str	r3, [r7, #96]	; 0x60

          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 800320e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fc71 	bl	8004af8 <UI_SetReg>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 800321c:	e04d      	b.n	80032ba <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3301      	adds	r3, #1
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800322c:	4619      	mov	r1, r3
 800322e:	f001 fc63 	bl	8004af8 <UI_SetReg>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003238:	e03f      	b.n	80032ba <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          bNoError = true; /* No check inside class return always true*/
 800323a:	2301      	movs	r3, #1
 800323c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003240:	e03b      	b.n	80032ba <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          bNoError = true; /* No check inside class return always true*/
 8003242:	2301      	movs	r3, #1
 8003244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003248:	e037      	b.n	80032ba <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3301      	adds	r3, #1
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3302      	adds	r3, #2
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	4413      	add	r3, r2
 800325c:	667b      	str	r3, [r7, #100]	; 0x64
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8003264:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003266:	4618      	mov	r0, r3
 8003268:	f001 fc46 	bl	8004af8 <UI_SetReg>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8003272:	e022      	b.n	80032ba <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3301      	adds	r3, #1
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3302      	adds	r3, #2
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3303      	adds	r3, #3
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	441a      	add	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	061b      	lsls	r3, r3, #24
 8003298:	4413      	add	r3, r2
 800329a:	66bb      	str	r3, [r7, #104]	; 0x68
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80032a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 fc27 	bl	8004af8 <UI_SetReg>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80032b0:	e003      	b.n	80032ba <MCP_ReceivedFrame+0x3b2>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        }
        break;
 80032b8:	bf00      	nop
      }
    }
    break;
 80032ba:	e3a0      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80032c4:	2303      	movs	r3, #3
 80032c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 80032ca:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80032ce:	2b88      	cmp	r3, #136	; 0x88
 80032d0:	f200 8182 	bhi.w	80035d8 <MCP_ReceivedFrame+0x6d0>
 80032d4:	a201      	add	r2, pc, #4	; (adr r2, 80032dc <MCP_ReceivedFrame+0x3d4>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003501 	.word	0x08003501
 80032e0:	0800356d 	.word	0x0800356d
 80032e4:	08003501 	.word	0x08003501
 80032e8:	08003501 	.word	0x08003501
 80032ec:	0800356d 	.word	0x0800356d
 80032f0:	08003537 	.word	0x08003537
 80032f4:	08003537 	.word	0x08003537
 80032f8:	08003537 	.word	0x08003537
 80032fc:	08003537 	.word	0x08003537
 8003300:	08003537 	.word	0x08003537
 8003304:	08003537 	.word	0x08003537
 8003308:	08003537 	.word	0x08003537
 800330c:	08003537 	.word	0x08003537
 8003310:	08003537 	.word	0x08003537
 8003314:	08003537 	.word	0x08003537
 8003318:	08003537 	.word	0x08003537
 800331c:	08003537 	.word	0x08003537
 8003320:	08003537 	.word	0x08003537
 8003324:	08003537 	.word	0x08003537
 8003328:	08003537 	.word	0x08003537
 800332c:	08003537 	.word	0x08003537
 8003330:	08003537 	.word	0x08003537
 8003334:	08003537 	.word	0x08003537
 8003338:	08003537 	.word	0x08003537
 800333c:	08003537 	.word	0x08003537
 8003340:	08003537 	.word	0x08003537
 8003344:	08003537 	.word	0x08003537
 8003348:	08003537 	.word	0x08003537
 800334c:	080035e1 	.word	0x080035e1
 8003350:	080035e1 	.word	0x080035e1
 8003354:	0800356d 	.word	0x0800356d
 8003358:	08003537 	.word	0x08003537
 800335c:	08003537 	.word	0x08003537
 8003360:	08003537 	.word	0x08003537
 8003364:	08003501 	.word	0x08003501
 8003368:	080035d9 	.word	0x080035d9
 800336c:	080035d9 	.word	0x080035d9
 8003370:	080035d9 	.word	0x080035d9
 8003374:	080035d9 	.word	0x080035d9
 8003378:	080035d9 	.word	0x080035d9
 800337c:	080035d9 	.word	0x080035d9
 8003380:	080035d9 	.word	0x080035d9
 8003384:	080035d9 	.word	0x080035d9
 8003388:	080035d9 	.word	0x080035d9
 800338c:	080035d9 	.word	0x080035d9
 8003390:	080035d9 	.word	0x080035d9
 8003394:	080035d9 	.word	0x080035d9
 8003398:	080035d9 	.word	0x080035d9
 800339c:	080035d9 	.word	0x080035d9
 80033a0:	080035d9 	.word	0x080035d9
 80033a4:	080035d9 	.word	0x080035d9
 80033a8:	080035d9 	.word	0x080035d9
 80033ac:	080035d9 	.word	0x080035d9
 80033b0:	080035d9 	.word	0x080035d9
 80033b4:	080035d9 	.word	0x080035d9
 80033b8:	080035d9 	.word	0x080035d9
 80033bc:	080035d9 	.word	0x080035d9
 80033c0:	080035d9 	.word	0x080035d9
 80033c4:	080035d9 	.word	0x080035d9
 80033c8:	080035d9 	.word	0x080035d9
 80033cc:	080035d9 	.word	0x080035d9
 80033d0:	080035d9 	.word	0x080035d9
 80033d4:	080035d9 	.word	0x080035d9
 80033d8:	080035d9 	.word	0x080035d9
 80033dc:	080035d9 	.word	0x080035d9
 80033e0:	08003537 	.word	0x08003537
 80033e4:	080035d9 	.word	0x080035d9
 80033e8:	080035d9 	.word	0x080035d9
 80033ec:	080035d9 	.word	0x080035d9
 80033f0:	080035d9 	.word	0x080035d9
 80033f4:	0800356d 	.word	0x0800356d
 80033f8:	0800356d 	.word	0x0800356d
 80033fc:	0800356d 	.word	0x0800356d
 8003400:	08003537 	.word	0x08003537
 8003404:	08003537 	.word	0x08003537
 8003408:	08003537 	.word	0x08003537
 800340c:	08003537 	.word	0x08003537
 8003410:	08003501 	.word	0x08003501
 8003414:	0800356d 	.word	0x0800356d
 8003418:	08003537 	.word	0x08003537
 800341c:	08003537 	.word	0x08003537
 8003420:	08003537 	.word	0x08003537
 8003424:	08003537 	.word	0x08003537
 8003428:	08003537 	.word	0x08003537
 800342c:	08003537 	.word	0x08003537
 8003430:	08003537 	.word	0x08003537
 8003434:	08003537 	.word	0x08003537
 8003438:	08003537 	.word	0x08003537
 800343c:	08003537 	.word	0x08003537
 8003440:	08003537 	.word	0x08003537
 8003444:	08003501 	.word	0x08003501
 8003448:	0800356d 	.word	0x0800356d
 800344c:	080035d9 	.word	0x080035d9
 8003450:	08003537 	.word	0x08003537
 8003454:	08003537 	.word	0x08003537
 8003458:	08003537 	.word	0x08003537
 800345c:	08003537 	.word	0x08003537
 8003460:	08003537 	.word	0x08003537
 8003464:	080035d9 	.word	0x080035d9
 8003468:	080035d9 	.word	0x080035d9
 800346c:	08003537 	.word	0x08003537
 8003470:	08003537 	.word	0x08003537
 8003474:	08003501 	.word	0x08003501
 8003478:	08003501 	.word	0x08003501
 800347c:	0800356d 	.word	0x0800356d
 8003480:	0800356d 	.word	0x0800356d
 8003484:	0800356d 	.word	0x0800356d
 8003488:	0800356d 	.word	0x0800356d
 800348c:	0800356d 	.word	0x0800356d
 8003490:	08003501 	.word	0x08003501
 8003494:	08003537 	.word	0x08003537
 8003498:	08003537 	.word	0x08003537
 800349c:	0800356d 	.word	0x0800356d
 80034a0:	080035d9 	.word	0x080035d9
 80034a4:	08003537 	.word	0x08003537
 80034a8:	08003537 	.word	0x08003537
 80034ac:	08003501 	.word	0x08003501
 80034b0:	0800356d 	.word	0x0800356d
 80034b4:	0800356d 	.word	0x0800356d
 80034b8:	0800356d 	.word	0x0800356d
 80034bc:	0800356d 	.word	0x0800356d
 80034c0:	0800356d 	.word	0x0800356d
 80034c4:	0800356d 	.word	0x0800356d
 80034c8:	0800356d 	.word	0x0800356d
 80034cc:	0800356d 	.word	0x0800356d
 80034d0:	0800356d 	.word	0x0800356d
 80034d4:	0800356d 	.word	0x0800356d
 80034d8:	0800356d 	.word	0x0800356d
 80034dc:	08003501 	.word	0x08003501
 80034e0:	080035d9 	.word	0x080035d9
 80034e4:	08003501 	.word	0x08003501
 80034e8:	080035a3 	.word	0x080035a3
 80034ec:	080035a3 	.word	0x080035a3
 80034f0:	080035a3 	.word	0x080035a3
 80034f4:	08003537 	.word	0x08003537
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003537 	.word	0x08003537
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8003506:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fd48 	bl	8004fa0 <UI_GetReg>
 8003510:	4603      	mov	r3, r0
 8003512:	65bb      	str	r3, [r7, #88]	; 0x58
           if ( bNoError == true )
 8003514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003518:	2b00      	cmp	r3, #0
 800351a:	d063      	beq.n	80035e4 <MCP_ReceivedFrame+0x6dc>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	69dc      	ldr	r4, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6998      	ldr	r0, [r3, #24]
 8003524:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003528:	2301      	movs	r3, #1
 800352a:	21f0      	movs	r1, #240	; 0xf0
 800352c:	47a0      	blx	r4
            RequireAck = false;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8003534:	e056      	b.n	80035e4 <MCP_ReceivedFrame+0x6dc>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800353c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fd2d 	bl	8004fa0 <UI_GetReg>
 8003546:	4603      	mov	r3, r0
 8003548:	657b      	str	r3, [r7, #84]	; 0x54
          if ( bNoError == true )
 800354a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04a      	beq.n	80035e8 <MCP_ReceivedFrame+0x6e0>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	69dc      	ldr	r4, [r3, #28]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6998      	ldr	r0, [r3, #24]
 800355a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800355e:	2302      	movs	r3, #2
 8003560:	21f0      	movs	r1, #240	; 0xf0
 8003562:	47a0      	blx	r4
            RequireAck = false;
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800356a:	e03d      	b.n	80035e8 <MCP_ReceivedFrame+0x6e0>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8003572:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fd12 	bl	8004fa0 <UI_GetReg>
 800357c:	4603      	mov	r3, r0
 800357e:	653b      	str	r3, [r7, #80]	; 0x50
          if ( bNoError == true )
 8003580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003584:	2b00      	cmp	r3, #0
 8003586:	d031      	beq.n	80035ec <MCP_ReceivedFrame+0x6e4>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	69dc      	ldr	r4, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6998      	ldr	r0, [r3, #24]
 8003590:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003594:	2304      	movs	r3, #4
 8003596:	21f0      	movs	r1, #240	; 0xf0
 8003598:	47a0      	blx	r4
            RequireAck = false;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80035a0:	e024      	b.n	80035ec <MCP_ReceivedFrame+0x6e4>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 80035a8:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fcf7 	bl	8004fa0 <UI_GetReg>
 80035b2:	4603      	mov	r3, r0
 80035b4:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ( bNoError == true )
 80035b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d018      	beq.n	80035f0 <MCP_ReceivedFrame+0x6e8>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	69dc      	ldr	r4, [r3, #28]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6998      	ldr	r0, [r3, #24]
 80035c6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80035ca:	2304      	movs	r3, #4
 80035cc:	21f0      	movs	r1, #240	; 0xf0
 80035ce:	47a0      	blx	r4
            RequireAck = false;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 80035d6:	e00b      	b.n	80035f0 <MCP_ReceivedFrame+0x6e8>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80035d8:	2303      	movs	r3, #3
 80035da:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        break;
 80035de:	e008      	b.n	80035f2 <MCP_ReceivedFrame+0x6ea>
        break;
 80035e0:	bf00      	nop
 80035e2:	e20c      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
        break;
 80035e4:	bf00      	nop
 80035e6:	e20a      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
        break;
 80035e8:	bf00      	nop
 80035ea:	e208      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
        break;
 80035ec:	bf00      	nop
 80035ee:	e206      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
        break;
 80035f0:	bf00      	nop
      }
    }
    break;
 80035f2:	e204      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80035fc:	2307      	movs	r3, #7
 80035fe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f002 fa60 	bl	8005ad0 <UI_ExecCmd>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003616:	e1f2      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800361e:	e00c      	b.n	800363a <MCP_ReceivedFrame+0x732>
      {
        outBuff[i] = 0;
 8003620:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003624:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003628:	4413      	add	r3, r2
 800362a:	2200      	movs	r2, #0
 800362c:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; i < 32; i++)
 8003630:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003634:	3301      	adds	r3, #1
 8003636:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800363a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800363e:	2b1f      	cmp	r3, #31
 8003640:	d9ee      	bls.n	8003620 <MCP_ReceivedFrame+0x718>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003642:	2300      	movs	r3, #0
 8003644:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003648:	e013      	b.n	8003672 <MCP_ReceivedFrame+0x76a>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003650:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003654:	441a      	add	r2, r3
 8003656:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800365a:	3303      	adds	r3, #3
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003662:	440b      	add	r3, r1
 8003664:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8003668:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800366c:	3301      	adds	r3, #1
 800366e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003672:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003676:	2b1c      	cmp	r3, #28
 8003678:	d808      	bhi.n	800368c <MCP_ReceivedFrame+0x784>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003680:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b09      	cmp	r3, #9
 800368a:	d1de      	bne.n	800364a <MCP_ReceivedFrame+0x742>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003692:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003696:	3305      	adds	r3, #5
 8003698:	4413      	add	r3, r2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	753b      	strb	r3, [r7, #20]
      outBuff[1] = pHandle->s_fwVer[i+7];
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80036a4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80036a8:	3307      	adds	r3, #7
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	757b      	strb	r3, [r7, #21]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80036b6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80036ba:	3309      	adds	r3, #9
 80036bc:	4413      	add	r3, r2
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	75bb      	strb	r3, [r7, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	69dc      	ldr	r4, [r3, #28]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6998      	ldr	r0, [r3, #24]
 80036ca:	f107 0214 	add.w	r2, r7, #20
 80036ce:	2320      	movs	r3, #32
 80036d0:	21f0      	movs	r1, #240	; 0xf0
 80036d2:	47a0      	blx	r4
      bNoError = true;
 80036d4:	2301      	movs	r3, #1
 80036d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80036da:	e190      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3305      	adds	r3, #5
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3301      	adds	r3, #1
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3302      	adds	r3, #2
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	441a      	add	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3303      	adds	r3, #3
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	4413      	add	r3, r2
 800371a:	673b      	str	r3, [r7, #112]	; 0x70
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003722:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fa3f 	bl	8005ba8 <UI_ExecSpeedRamp>
 800372a:	4603      	mov	r3, r0
 800372c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003730:	e165      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
    }
    break;

  case MC_PROTOCOL_CODE_SET_TORQUE_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b29a      	uxth	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3305      	adds	r3, #5
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	b29b      	uxth	r3, r3
 8003746:	4413      	add	r3, r2
 8003748:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3301      	adds	r3, #1
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3302      	adds	r3, #2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	441a      	add	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3303      	adds	r3, #3
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	4413      	add	r3, r2
 8003770:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800377a:	b211      	sxth	r1, r2
 800377c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8003780:	4618      	mov	r0, r3
 8003782:	f002 fa39 	bl	8005bf8 <UI_ExecTorqueRamp>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 800378c:	e137      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	7819      	ldrb	r1, [r3, #0]
 8003794:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003798:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800379c:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	4623      	mov	r3, r4
 80037a4:	f002 fa44 	bl	8005c30 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80037a8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80037ac:	461a      	mov	r2, r3
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4aa1      	ldr	r2, [pc, #644]	; (8003a3c <MCP_ReceivedFrame+0xb34>)
 80037b8:	fb82 1203 	smull	r1, r2, r2, r3
 80037bc:	1092      	asrs	r2, r2, #2
 80037be:	17db      	asrs	r3, r3, #31
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	67bb      	str	r3, [r7, #120]	; 0x78
      outBuff[0] = (uint8_t)(rpm);
 80037c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      outBuff[1] = (uint8_t)(rpm >> 8);
 80037cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ce:	121b      	asrs	r3, r3, #8
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      outBuff[2] = (uint8_t)(rpm >> 16);
 80037d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d8:	141b      	asrs	r3, r3, #16
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      outBuff[3] = (uint8_t)(rpm >> 24);
 80037e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e2:	161b      	asrs	r3, r3, #24
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      outBuff[4] = (uint8_t)(FinalTorque);
 80037ea:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80037f4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80037f8:	121b      	asrs	r3, r3, #8
 80037fa:	b21b      	sxth	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
      outBuff[6] = (uint8_t)(Durationms);
 8003802:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      outBuff[7] = (uint8_t)(Durationms >> 8);
 800380c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	b29b      	uxth	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	69dc      	ldr	r4, [r3, #28]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6998      	ldr	r0, [r3, #24]
 8003822:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003826:	2308      	movs	r3, #8
 8003828:	21f0      	movs	r1, #240	; 0xf0
 800382a:	47a0      	blx	r4
    }
    break;
 800382c:	e0e7      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
      uint8_t bStage;
      uint16_t hDurationms;
      int16_t hFinalMecSpeedUnit;
      int16_t hFinalTorque;
      int32_t rpm;
      bStage = buffer[0];
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      hDurationms = buffer[7] + (buffer[8] << 8);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3307      	adds	r3, #7
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3308      	adds	r3, #8
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	b29b      	uxth	r3, r3
 800384a:	4413      	add	r3, r2
 800384c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3301      	adds	r3, #1
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3302      	adds	r3, #2
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3303      	adds	r3, #3
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3304      	adds	r3, #4
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	4413      	add	r3, r2
 8003876:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800387a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4a6e      	ldr	r2, [pc, #440]	; (8003a40 <MCP_ReceivedFrame+0xb38>)
 8003888:	fb82 1203 	smull	r1, r2, r2, r3
 800388c:	441a      	add	r2, r3
 800388e:	1152      	asrs	r2, r2, #5
 8003890:	17db      	asrs	r3, r3, #31
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3305      	adds	r3, #5
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b29a      	uxth	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3306      	adds	r3, #6
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f9b7 407e 	ldrsh.w	r4, [r7, #126]	; 0x7e
 80038ba:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80038be:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 80038c2:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	4623      	mov	r3, r4
 80038ca:	f002 f9ea 	bl	8005ca2 <UI_SetRevupData>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80038d4:	e093      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_CURRENT_REF:
    {
      int16_t hIqRef;
      int16_t hIdRef;
      hIqRef = buffer[0] + (buffer[1] << 8);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
      hIdRef = buffer[2] + (buffer[3] << 8);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3302      	adds	r3, #2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3303      	adds	r3, #3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b29b      	uxth	r3, r3
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	b29b      	uxth	r3, r3
 8003904:	4413      	add	r3, r2
 8003906:	b29b      	uxth	r3, r3
 8003908:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 8003912:	f9b7 108a 	ldrsh.w	r1, [r7, #138]	; 0x8a
 8003916:	4618      	mov	r0, r3
 8003918:	f002 f9f2 	bl	8005d00 <UI_SetCurrentReferences>
      bNoError = true;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003922:	e06c      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_MP_INFO:
    {
      MPInfo_t stepList;
      stepList.data = buffer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
      stepList.len = Size;
 8003928:	7abb      	ldrb	r3, [r7, #10]
 800392a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800392e:	230c      	movs	r3, #12
 8003930:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8003934:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003938:	4942      	ldr	r1, [pc, #264]	; (8003a44 <MCP_ReceivedFrame+0xb3c>)
 800393a:	4618      	mov	r0, r3
 800393c:	f002 f9fc 	bl	8005d38 <UI_GetMPInfo>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      if (bNoError)
 8003946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800394a:	2b00      	cmp	r3, #0
 800394c:	d056      	beq.n	80039fc <MCP_ReceivedFrame+0xaf4>
      {
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	69dc      	ldr	r4, [r3, #28]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6998      	ldr	r0, [r3, #24]
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <MCP_ReceivedFrame+0xb3c>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <MCP_ReceivedFrame+0xb3c>)
 800395c:	791b      	ldrb	r3, [r3, #4]
 800395e:	21f0      	movs	r1, #240	; 0xf0
 8003960:	47a0      	blx	r4
        RequireAck = false;
 8003962:	2300      	movs	r3, #0
 8003964:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
    break;
 8003968:	e048      	b.n	80039fc <MCP_ReceivedFrame+0xaf4>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800396a:	2300      	movs	r3, #0
 800396c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003970:	e012      	b.n	8003998 <MCP_ReceivedFrame+0xa90>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003978:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800397c:	441a      	add	r2, r3
 800397e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003988:	440b      	add	r3, r1
 800398a:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800398e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003992:	3301      	adds	r3, #1
 8003994:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003998:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800399c:	2b1f      	cmp	r3, #31
 800399e:	d816      	bhi.n	80039ce <MCP_ReceivedFrame+0xac6>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80039a6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039aa:	4413      	add	r3, r2
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1df      	bne.n	8003972 <MCP_ReceivedFrame+0xa6a>
      }

      for (; i < 32; i++)
 80039b2:	e00c      	b.n	80039ce <MCP_ReceivedFrame+0xac6>
      {
        outBuff[i] = 0;
 80039b4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039b8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80039bc:	4413      	add	r3, r2
 80039be:	2200      	movs	r2, #0
 80039c0:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (; i < 32; i++)
 80039c4:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039c8:	3301      	adds	r3, #1
 80039ca:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80039ce:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80039d2:	2b1f      	cmp	r3, #31
 80039d4:	d9ee      	bls.n	80039b4 <MCP_ReceivedFrame+0xaac>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	69dc      	ldr	r4, [r3, #28]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6998      	ldr	r0, [r3, #24]
 80039de:	f107 0214 	add.w	r2, r7, #20
 80039e2:	2320      	movs	r3, #32
 80039e4:	21f0      	movs	r1, #240	; 0xf0
 80039e6:	47a0      	blx	r4
      bNoError = true;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80039ee:	e006      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
    break;
 80039f6:	e002      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
    break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <MCP_ReceivedFrame+0xaf6>
    break;
 80039fc:	bf00      	nop
  }

  if (RequireAck)
 80039fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d015      	beq.n	8003a32 <MCP_ReceivedFrame+0xb2a>
  {
    if (bNoError)
 8003a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <MCP_ReceivedFrame+0xb18>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	69dc      	ldr	r4, [r3, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6998      	ldr	r0, [r3, #24]
 8003a16:	2300      	movs	r3, #0
 8003a18:	2200      	movs	r2, #0
 8003a1a:	21f0      	movs	r1, #240	; 0xf0
 8003a1c:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 8003a1e:	e008      	b.n	8003a32 <MCP_ReceivedFrame+0xb2a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	69dc      	ldr	r4, [r3, #28]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6998      	ldr	r0, [r3, #24]
 8003a28:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	21ff      	movs	r1, #255	; 0xff
 8003a30:	47a0      	blx	r4
}
 8003a32:	bf00      	nop
 8003a34:	379c      	adds	r7, #156	; 0x9c
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	66666667 	.word	0x66666667
 8003a40:	88888889 	.word	0x88888889
 8003a44:	20000720 	.word	0x20000720

08003a48 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af02      	add	r7, sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003a4e:	f005 f94b 	bl	8008ce8 <HAL_RCC_GetHCLKFreq>
 8003a52:	4602      	mov	r2, r0
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <MX_MotorControl_Init+0x3c>)
 8003a56:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5a:	09db      	lsrs	r3, r3, #7
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 fe3a 	bl	80076d6 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8003a62:	4909      	ldr	r1, [pc, #36]	; (8003a88 <MX_MotorControl_Init+0x40>)
 8003a64:	4809      	ldr	r0, [pc, #36]	; (8003a8c <MX_MotorControl_Init+0x44>)
 8003a66:	f7fe fb67 	bl	8002138 <MCboot>
  mc_lock_pins();
 8003a6a:	f7ff f99d 	bl	8002da8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <MX_MotorControl_Init+0x48>)
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <MX_MotorControl_Init+0x40>)
 8003a74:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <MX_MotorControl_Init+0x44>)
 8003a76:	2101      	movs	r1, #1
 8003a78:	4806      	ldr	r0, [pc, #24]	; (8003a94 <MX_MotorControl_Init+0x4c>)
 8003a7a:	f000 ff49 	bl	8004910 <UI_TaskInit>
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	10624dd3 	.word	0x10624dd3
 8003a88:	20000aec 	.word	0x20000aec
 8003a8c:	20000ae8 	.word	0x20000ae8
 8003a90:	0800fd48 	.word	0x0800fd48
 8003a94:	200006d0 	.word	0x200006d0

08003a98 <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	f023 020f 	bic.w	r2, r3, #15
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003abe:	b490      	push	{r4, r7}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3330      	adds	r3, #48	; 0x30
 8003ace:	4619      	mov	r1, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003ada:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	fa92 f2a2 	rbit	r2, r2
 8003ae2:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	fab2 f282 	clz	r2, r2
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	40d3      	lsrs	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	211f      	movs	r1, #31
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	401a      	ands	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	f1c3 031a 	rsb	r3, r3, #26
 8003b16:	fa21 f303 	lsr.w	r3, r1, r3
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc90      	pop	{r4, r7}
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b28:	b490      	push	{r4, r7}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3314      	adds	r3, #20
 8003b38:	4619      	mov	r1, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	fa92 f2a2 	rbit	r2, r2
 8003b4c:	613a      	str	r2, [r7, #16]
  return result;
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	fab2 f282 	clz	r2, r2
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	40d3      	lsrs	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8003b5e:	6822      	ldr	r2, [r4, #0]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003b66:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003b6a:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	69f9      	ldr	r1, [r7, #28]
 8003b6e:	fa91 f1a1 	rbit	r1, r1
 8003b72:	61b9      	str	r1, [r7, #24]
  return result;
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	fab1 f181 	clz	r1, r1
 8003b7a:	b2c9      	uxtb	r1, r1
 8003b7c:	40cb      	lsrs	r3, r1
 8003b7e:	2107      	movs	r1, #7
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	401a      	ands	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003b8e:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003b92:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b96:	fa91 f1a1 	rbit	r1, r1
 8003b9a:	6239      	str	r1, [r7, #32]
  return result;
 8003b9c:	6a39      	ldr	r1, [r7, #32]
 8003b9e:	fab1 f181 	clz	r1, r1
 8003ba2:	b2c9      	uxtb	r1, r1
 8003ba4:	40cb      	lsrs	r3, r1
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	4313      	orrs	r3, r2
 8003bae:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8003bb0:	bf00      	nop
 8003bb2:	3728      	adds	r7, #40	; 0x28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc90      	pop	{r4, r7}
 8003bb8:	4770      	bx	lr

08003bba <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	bf0c      	ite	eq
 8003bf6:	2301      	moveq	r3, #1
 8003bf8:	2300      	movne	r3, #0
 8003bfa:	b2db      	uxtb	r3, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c4e:	bf0c      	ite	eq
 8003c50:	2301      	moveq	r3, #1
 8003c52:	2300      	movne	r3, #0
 8003c54:	b2db      	uxtb	r3, r3
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	b29b      	uxth	r3, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	601a      	str	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_ClearFlag_JEOC>:
  * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f023 0204 	bic.w	r2, r3, #4
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	605a      	str	r2, [r3, #4]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_ADC_DisableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f023 0220 	bic.w	r2, r3, #32
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint8_t handle=255;
 8003d48:	23ff      	movs	r3, #255	; 0xff
 8003d4a:	73fb      	strb	r3, [r7, #15]
  uint8_t i=0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73bb      	strb	r3, [r7, #14]

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 8003d50:	e029      	b.n	8003da6 <RCM_RegisterRegConv+0x66>
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003d52:	7bbb      	ldrb	r3, [r7, #14]
 8003d54:	4a53      	ldr	r2, [pc, #332]	; (8003ea4 <RCM_RegisterRegConv+0x164>)
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <RCM_RegisterRegConv+0x28>
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d901      	bls.n	8003d68 <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8003d64:	7bbb      	ldrb	r3, [r7, #14]
 8003d66:	73fb      	strb	r3, [r7, #15]
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
 8003d68:	7bbb      	ldrb	r3, [r7, #14]
 8003d6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ea4 <RCM_RegisterRegConv+0x164>)
 8003d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d74:	7bbb      	ldrb	r3, [r7, #14]
 8003d76:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <RCM_RegisterRegConv+0x164>)
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	791a      	ldrb	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	791b      	ldrb	r3, [r3, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d10c      	bne.n	8003da0 <RCM_RegisterRegConv+0x60>
            (RCM_handle_array [i]->regADC == regConv->regADC))
 8003d86:	7bbb      	ldrb	r3, [r7, #14]
 8003d88:	4a46      	ldr	r2, [pc, #280]	; (8003ea4 <RCM_RegisterRegConv+0x164>)
 8003d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d103      	bne.n	8003da0 <RCM_RegisterRegConv+0x60>
          {
           handle =i; /* Reuse the same handle */
 8003d98:	7bbb      	ldrb	r3, [r7, #14]
 8003d9a:	73fb      	strb	r3, [r7, #15]
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	73bb      	strb	r3, [r7, #14]
          }
      }
      i++;
 8003da0:	7bbb      	ldrb	r3, [r7, #14]
 8003da2:	3301      	adds	r3, #1
 8003da4:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 8003da6:	7bbb      	ldrb	r3, [r7, #14]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d9d2      	bls.n	8003d52 <RCM_RegisterRegConv+0x12>
    }
    if (handle < RCM_MAX_CONV )
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d872      	bhi.n	8003e98 <RCM_RegisterRegConv+0x158>
    {
      RCM_handle_array [handle] = regConv;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	493b      	ldr	r1, [pc, #236]	; (8003ea4 <RCM_RegisterRegConv+0x164>)
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	4a3a      	ldr	r2, [pc, #232]	; (8003ea8 <RCM_RegisterRegConv+0x168>)
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff09 	bl	8003be2 <LL_ADC_IsEnabled>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d127      	bne.n	8003e26 <RCM_RegisterRegConv+0xe6>
      {
       LL_ADC_DisableIT_EOC(regConv->regADC);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff8f 	bl	8003cfe <LL_ADC_DisableIT_EOC>
       LL_ADC_ClearFlag_EOC(regConv->regADC);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff70 	bl	8003cca <LL_ADC_ClearFlag_EOC>
       LL_ADC_DisableIT_JEOC(regConv->regADC);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff ff95 	bl	8003d1e <LL_ADC_DisableIT_JEOC>
       LL_ADC_ClearFlag_JEOC(regConv->regADC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff73 	bl	8003ce4 <LL_ADC_ClearFlag_JEOC>

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	217f      	movs	r1, #127	; 0x7f
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff feff 	bl	8003c08 <LL_ADC_StartCalibration>
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 8003e0a:	bf00      	nop
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff ff12 	bl	8003c3a <LL_ADC_IsCalibrationOnGoing>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f7      	bne.n	8003e0c <RCM_RegisterRegConv+0xcc>
        { }
        LL_ADC_Enable( regConv->regADC );
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff feca 	bl	8003bba <LL_ADC_Enable>
      }
      else
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fe33 	bl	8003a98 <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	791b      	ldrb	r3, [r3, #4]
 8003e3a:	2b09      	cmp	r3, #9
 8003e3c:	d812      	bhi.n	8003e64 <RCM_RegisterRegConv+0x124>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	791b      	ldrb	r3, [r3, #4]
 8003e42:	069b      	lsls	r3, r3, #26
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	408b      	lsls	r3, r1
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	791b      	ldrb	r3, [r3, #4]
 8003e56:	4619      	mov	r1, r3
 8003e58:	460b      	mov	r3, r1
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	440b      	add	r3, r1
 8003e5e:	051b      	lsls	r3, r3, #20
 8003e60:	4313      	orrs	r3, r2
 8003e62:	e014      	b.n	8003e8e <RCM_RegisterRegConv+0x14e>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	791b      	ldrb	r3, [r3, #4]
 8003e68:	069b      	lsls	r3, r3, #26
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	791b      	ldrb	r3, [r3, #4]
 8003e70:	4619      	mov	r1, r3
 8003e72:	2302      	movs	r3, #2
 8003e74:	408b      	lsls	r3, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	791b      	ldrb	r3, [r3, #4]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	460b      	mov	r3, r1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	440b      	add	r3, r1
 8003e84:	3b1e      	subs	r3, #30
 8003e86:	051b      	lsls	r3, r3, #20
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6892      	ldr	r2, [r2, #8]
 8003e92:	4619      	mov	r1, r3
 8003e94:	f7ff fe48 	bl	8003b28 <LL_ADC_SetChannelSamplingTime>
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	20000b18 	.word	0x20000b18
 8003ea8:	20000af4 	.word	0x20000af4

08003eac <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	4a3a      	ldr	r2, [pc, #232]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebe:	6818      	ldr	r0, [r3, #0]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003ec0:	79fb      	ldrb	r3, [r7, #7]
 8003ec2:	4a38      	ldr	r2, [pc, #224]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec8:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003eca:	2b09      	cmp	r3, #9
 8003ecc:	d81c      	bhi.n	8003f08 <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4a34      	ldr	r2, [pc, #208]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	069b      	lsls	r3, r3, #26
 8003eda:	4619      	mov	r1, r3
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	4a31      	ldr	r2, [pc, #196]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	791b      	ldrb	r3, [r3, #4]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2302      	movs	r3, #2
 8003eea:	4093      	lsls	r3, r2
 8003eec:	ea41 0203 	orr.w	r2, r1, r3
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	492c      	ldr	r1, [pc, #176]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003ef4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef8:	791b      	ldrb	r3, [r3, #4]
 8003efa:	4619      	mov	r1, r3
 8003efc:	460b      	mov	r3, r1
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	440b      	add	r3, r1
 8003f02:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003f04:	4313      	orrs	r3, r2
 8003f06:	e01e      	b.n	8003f46 <RCM_ExecRegularConv+0x9a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	4a26      	ldr	r2, [pc, #152]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f10:	791b      	ldrb	r3, [r3, #4]
 8003f12:	069b      	lsls	r3, r3, #26
 8003f14:	4619      	mov	r1, r3
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	4a22      	ldr	r2, [pc, #136]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1e:	791b      	ldrb	r3, [r3, #4]
 8003f20:	461a      	mov	r2, r3
 8003f22:	2302      	movs	r3, #2
 8003f24:	4093      	lsls	r3, r2
 8003f26:	ea41 0203 	orr.w	r2, r1, r3
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	491d      	ldr	r1, [pc, #116]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f32:	791b      	ldrb	r3, [r3, #4]
 8003f34:	4619      	mov	r1, r3
 8003f36:	460b      	mov	r3, r1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3b1e      	subs	r3, #30
 8003f3e:	051b      	lsls	r3, r3, #20
 8003f40:	4313      	orrs	r3, r2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f46:	461a      	mov	r2, r3
 8003f48:	2106      	movs	r1, #6
 8003f4a:	f7ff fdb8 	bl	8003abe <LL_ADC_REG_SetSequencerRanks>

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fe96 	bl	8003c8a <LL_ADC_REG_ReadConversionData12>

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fe7a 	bl	8003c62 <LL_ADC_REG_StartConversion>
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8003f6e:	bf00      	nop
 8003f70:	79fb      	ldrb	r3, [r7, #7]
 8003f72:	4a0c      	ldr	r2, [pc, #48]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fe92 	bl	8003ca4 <LL_ADC_IsActiveFlag_EOC>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f4      	beq.n	8003f70 <RCM_ExecRegularConv+0xc4>
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <RCM_ExecRegularConv+0xf8>)
 8003f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff fe7a 	bl	8003c8a <LL_ADC_REG_ReadConversionData12>
 8003f96:	4603      	mov	r3, r0
 8003f98:	81fb      	strh	r3, [r7, #14]
return retVal;
 8003f9a:	89fb      	ldrh	r3, [r7, #14]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20000b18 	.word	0x20000b18

08003fa8 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003fa8:	b598      	push	{r3, r4, r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <RCM_ExecUserConv+0x64>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d128      	bne.n	8004006 <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <RCM_ExecUserConv+0x68>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff77 	bl	8003eac <RCM_ExecRegularConv>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <RCM_ExecUserConv+0x6c>)
 8003fc4:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <RCM_ExecUserConv+0x64>)
 8003fc8:	2202      	movs	r2, #2
 8003fca:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <RCM_ExecUserConv+0x68>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <RCM_ExecUserConv+0x70>)
 8003fd4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <RCM_ExecUserConv+0x64>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <RCM_ExecUserConv+0x68>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <RCM_ExecUserConv+0x70>)
 8003fea:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <RCM_ExecUserConv+0x68>)
 8003ff0:	7818      	ldrb	r0, [r3, #0]
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <RCM_ExecUserConv+0x6c>)
 8003ff4:	8819      	ldrh	r1, [r3, #0]
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <RCM_ExecUserConv+0x68>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	4a07      	ldr	r2, [pc, #28]	; (8004018 <RCM_ExecUserConv+0x70>)
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	461a      	mov	r2, r3
 8004004:	47a0      	blx	r4
    }
  }
}
 8004006:	bf00      	nop
 8004008:	bd98      	pop	{r3, r4, r7, pc}
 800400a:	bf00      	nop
 800400c:	20000b14 	.word	0x20000b14
 8004010:	20000af0 	.word	0x20000af0
 8004014:	20000b28 	.word	0x20000b28
 8004018:	20000af4 	.word	0x20000af4

0800401c <LL_ADC_ClearFlag_JEOS>:
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2240      	movs	r2, #64	; 0x40
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_TIM_ClearFlag_UPDATE>:
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f06f 0201 	mvn.w	r2, #1
 8004044:	611a      	str	r2, [r3, #16]
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_TIM_ClearFlag_BRK>:
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004060:	611a      	str	r2, [r3, #16]
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_TIM_IsActiveFlag_BRK>:
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	d101      	bne.n	8004086 <LL_TIM_IsActiveFlag_BRK+0x18>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <LL_TIM_IsActiveFlag_BRK+0x1a>
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_TIM_ClearFlag_BRK2>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040a2:	611a      	str	r2, [r3, #16]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_TIM_IsActiveFlag_BRK2>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c4:	d101      	bne.n	80040ca <LL_TIM_IsActiveFlag_BRK2+0x1a>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <LL_TIM_IsActiveFlag_BRK2+0x1c>
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d101      	bne.n	80040f0 <LL_USART_IsActiveFlag_ORE+0x18>
 80040ec:	2301      	movs	r3, #1
 80040ee:	e000      	b.n	80040f2 <LL_USART_IsActiveFlag_ORE+0x1a>
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 0320 	and.w	r3, r3, #32
 800410e:	2b20      	cmp	r3, #32
 8004110:	d101      	bne.n	8004116 <LL_USART_IsActiveFlag_RXNE+0x18>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b80      	cmp	r3, #128	; 0x80
 8004136:	d101      	bne.n	800413c <LL_USART_IsActiveFlag_TXE+0x18>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <LL_USART_IsActiveFlag_TXE+0x1a>
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2208      	movs	r2, #8
 8004156:	621a      	str	r2, [r3, #32]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004170:	b29b      	uxth	r3, r3
 8004172:	b2db      	uxtb	r3, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );
 8004184:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004188:	f7ff ff48 	bl	800401c <LL_ADC_ClearFlag_JEOS>

  // Highfrequency task
  TSK_HighFrequencyTask();
 800418c:	f7fe fc44 	bl	8002a18 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8004190:	bf00      	nop
 8004192:	bd80      	pop	{r7, pc}

08004194 <TIM1_UP_TIM16_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
 8004198:	4803      	ldr	r0, [pc, #12]	; (80041a8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800419a:	f7ff ff4c 	bl	8004036 <LL_TIM_ClearFlag_UPDATE>
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800419e:	4803      	ldr	r0, [pc, #12]	; (80041ac <TIM1_UP_TIM16_IRQHandler+0x18>)
 80041a0:	f009 f9cd 	bl	800d53e <R3_1_TIMx_UP_IRQHandler>

 /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	20000250 	.word	0x20000250

080041b0 <TIM1_BRK_TIM15_IRQHandler>:

void TIMx_BRK_M1_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
 80041b4:	480d      	ldr	r0, [pc, #52]	; (80041ec <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041b6:	f7ff ff5a 	bl	800406e <LL_TIM_IsActiveFlag_BRK>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <TIM1_BRK_TIM15_IRQHandler+0x1c>
  {
    LL_TIM_ClearFlag_BRK(TIM1);
 80041c0:	480a      	ldr	r0, [pc, #40]	; (80041ec <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041c2:	f7ff ff46 	bl	8004052 <LL_TIM_ClearFlag_BRK>
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 80041c6:	480a      	ldr	r0, [pc, #40]	; (80041f0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80041c8:	f009 fa1f 	bl	800d60a <R3_1_BRK_IRQHandler>
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
 80041cc:	4807      	ldr	r0, [pc, #28]	; (80041ec <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041ce:	f7ff ff6f 	bl	80040b0 <LL_TIM_IsActiveFlag_BRK2>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <TIM1_BRK_TIM15_IRQHandler+0x34>
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
 80041d8:	4804      	ldr	r0, [pc, #16]	; (80041ec <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80041da:	f7ff ff5b 	bl	8004094 <LL_TIM_ClearFlag_BRK2>
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);
 80041de:	4804      	ldr	r0, [pc, #16]	; (80041f0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80041e0:	f009 f9d6 	bl	800d590 <R3_1_BRK2_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 80041e4:	f7fe f8e8 	bl	80023b8 <MC_Scheduler>

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80041e8:	bf00      	nop
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	20000250 	.word	0x20000250

080041f4 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80041fa:	4b23      	ldr	r3, [pc, #140]	; (8004288 <USART1_IRQHandler+0x94>)
 80041fc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff7c 	bl	80040fe <LL_USART_IsActiveFlag_RXNE>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d018      	beq.n	800423e <USART1_IRQHandler+0x4a>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <USART1_IRQHandler+0x94>)
 800420e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff ffa6 	bl	8004164 <LL_USART_ReceiveData8>
 8004218:	4603      	mov	r3, r0
 800421a:	b29b      	uxth	r3, r3
 800421c:	4619      	mov	r1, r3
 800421e:	481a      	ldr	r0, [pc, #104]	; (8004288 <USART1_IRQHandler+0x94>)
 8004220:	f00a fc30 	bl	800ea84 <UFCP_RX_IRQ_Handler>
 8004224:	4603      	mov	r3, r0
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	80fb      	strh	r3, [r7, #6]
    if (retVal == 1)
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <USART1_IRQHandler+0x40>
    {
      UI_SerialCommunicationTimeOutStart();
 8004230:	f000 fc12 	bl	8004a58 <UI_SerialCommunicationTimeOutStart>
    }
    if (retVal == 2)
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d101      	bne.n	800423e <USART1_IRQHandler+0x4a>
    {
      UI_SerialCommunicationTimeOutStop();
 800423a:	f000 fc01 	bl	8004a40 <UI_SerialCommunicationTimeOutStop>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <USART1_IRQHandler+0x94>)
 8004240:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff ff6d 	bl	8004124 <LL_USART_IsActiveFlag_TXE>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <USART1_IRQHandler+0x62>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8004250:	480d      	ldr	r0, [pc, #52]	; (8004288 <USART1_IRQHandler+0x94>)
 8004252:	f00a fcbb 	bl	800ebcc <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <USART1_IRQHandler+0x94>)
 8004258:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff3b 	bl	80040d8 <LL_USART_IsActiveFlag_ORE>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <USART1_IRQHandler+0x8a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8004268:	4807      	ldr	r0, [pc, #28]	; (8004288 <USART1_IRQHandler+0x94>)
 800426a:	f00a fd0f 	bl	800ec8c <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800426e:	4b06      	ldr	r3, [pc, #24]	; (8004288 <USART1_IRQHandler+0x94>)
 8004270:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff ff68 	bl	800414a <LL_USART_ClearFlag_ORE>
    UI_SerialCommunicationTimeOutStop();
 800427a:	f000 fbe1 	bl	8004a40 <UI_SerialCommunicationTimeOutStop>
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */

}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000558 	.word	0x20000558

0800428c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8004292:	f7fe fd77 	bl	8002d84 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004296:	4b21      	ldr	r3, [pc, #132]	; (800431c <HardFault_Handler+0x90>)
 8004298:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff1b 	bl	80040d8 <LL_USART_IsActiveFlag_ORE>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HardFault_Handler+0x32>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80042a8:	481c      	ldr	r0, [pc, #112]	; (800431c <HardFault_Handler+0x90>)
 80042aa:	f00a fcef 	bl	800ec8c <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80042ae:	4b1b      	ldr	r3, [pc, #108]	; (800431c <HardFault_Handler+0x90>)
 80042b0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff ff48 	bl	800414a <LL_USART_ClearFlag_ORE>
        UI_SerialCommunicationTimeOutStop();
 80042ba:	f000 fbc1 	bl	8004a40 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <HardFault_Handler+0x90>)
 80042c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ff2d 	bl	8004124 <LL_USART_IsActiveFlag_TXE>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HardFault_Handler+0x4a>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 80042d0:	4812      	ldr	r0, [pc, #72]	; (800431c <HardFault_Handler+0x90>)
 80042d2:	f00a fc7b 	bl	800ebcc <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <HardFault_Handler+0x90>)
 80042d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff0e 	bl	80040fe <LL_USART_IsActiveFlag_RXNE>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0d6      	beq.n	8004296 <HardFault_Handler+0xa>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HardFault_Handler+0x90>)
 80042ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff38 	bl	8004164 <LL_USART_ReceiveData8>
 80042f4:	4603      	mov	r3, r0
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4619      	mov	r1, r3
 80042fa:	4808      	ldr	r0, [pc, #32]	; (800431c <HardFault_Handler+0x90>)
 80042fc:	f00a fbc2 	bl	800ea84 <UFCP_RX_IRQ_Handler>
 8004300:	4603      	mov	r3, r0
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	80fb      	strh	r3, [r7, #6]
        if (retVal == 1)
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HardFault_Handler+0x84>
        {
          UI_SerialCommunicationTimeOutStart();
 800430c:	f000 fba4 	bl	8004a58 <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d1bf      	bne.n	8004296 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8004316:	f000 fb93 	bl	8004a40 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800431a:	e7bc      	b.n	8004296 <HardFault_Handler+0xa>
 800431c:	20000558 	.word	0x20000558

08004320 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004324:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <SysTick_Handler+0x30>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b02      	cmp	r3, #2
 800432a:	d106      	bne.n	800433a <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 800432c:	f001 fd6c 	bl	8005e08 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004330:	f003 f9dd 	bl	80076ee <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <SysTick_Handler+0x30>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <SysTick_Handler+0x30>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b03      	ldr	r3, [pc, #12]	; (8004350 <SysTick_Handler+0x30>)
 8004344:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8004346:	f7fe f827 	bl	8002398 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800434a:	bf00      	nop
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200006d4 	.word	0x200006d4

08004354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_MspInit+0x44>)
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	4a0e      	ldr	r2, [pc, #56]	; (8004398 <HAL_MspInit+0x44>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6193      	str	r3, [r2, #24]
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <HAL_MspInit+0x44>)
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_MspInit+0x44>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	4a08      	ldr	r2, [pc, #32]	; (8004398 <HAL_MspInit+0x44>)
 8004378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800437c:	61d3      	str	r3, [r2, #28]
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_MspInit+0x44>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800438a:	2004      	movs	r0, #4
 800438c:	f003 f96e 	bl	800766c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000

0800439c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	; 0x30
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043bc:	d125      	bne.n	800440a <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80043be:	4b2a      	ldr	r3, [pc, #168]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4a29      	ldr	r2, [pc, #164]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6153      	str	r3, [r2, #20]
 80043ca:	4b27      	ldr	r3, [pc, #156]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4a23      	ldr	r2, [pc, #140]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 80043dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e0:	6153      	str	r3, [r2, #20]
 80043e2:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 80043ee:	2307      	movs	r3, #7
 80043f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043f2:	2303      	movs	r3, #3
 80043f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fa:	f107 031c 	add.w	r3, r7, #28
 80043fe:	4619      	mov	r1, r3
 8004400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004404:	f003 f9f0 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004408:	e029      	b.n	800445e <HAL_ADC_MspInit+0xc2>
  else if(hadc->Instance==ADC3)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_ADC_MspInit+0xd0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d124      	bne.n	800445e <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8004414:	4b14      	ldr	r3, [pc, #80]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	4a13      	ldr	r2, [pc, #76]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 800441a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800441e:	6153      	str	r3, [r2, #20]
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442c:	4b0e      	ldr	r3, [pc, #56]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	4a0d      	ldr	r2, [pc, #52]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 8004432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004436:	6153      	str	r3, [r2, #20]
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_ADC_MspInit+0xcc>)
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8004444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800444a:	2303      	movs	r3, #3
 800444c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8004452:	f107 031c 	add.w	r3, r7, #28
 8004456:	4619      	mov	r1, r3
 8004458:	4805      	ldr	r0, [pc, #20]	; (8004470 <HAL_ADC_MspInit+0xd4>)
 800445a:	f003 f9c5 	bl	80077e8 <HAL_GPIO_Init>
}
 800445e:	bf00      	nop
 8004460:	3730      	adds	r7, #48	; 0x30
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	50000400 	.word	0x50000400
 8004470:	48000400 	.word	0x48000400

08004474 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b08a      	sub	sp, #40	; 0x28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	609a      	str	r2, [r3, #8]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <HAL_CAN_MspInit+0x7c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d128      	bne.n	80044e8 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004496:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <HAL_CAN_MspInit+0x80>)
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <HAL_CAN_MspInit+0x80>)
 800449c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044a0:	61d3      	str	r3, [r2, #28]
 80044a2:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <HAL_CAN_MspInit+0x80>)
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ae:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <HAL_CAN_MspInit+0x80>)
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4a10      	ldr	r2, [pc, #64]	; (80044f4 <HAL_CAN_MspInit+0x80>)
 80044b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b8:	6153      	str	r3, [r2, #20]
 80044ba:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <HAL_CAN_MspInit+0x80>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044cc:	2302      	movs	r3, #2
 80044ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044d4:	2303      	movs	r3, #3
 80044d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80044d8:	2309      	movs	r3, #9
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044dc:	f107 0314 	add.w	r3, r7, #20
 80044e0:	4619      	mov	r1, r3
 80044e2:	4805      	ldr	r0, [pc, #20]	; (80044f8 <HAL_CAN_MspInit+0x84>)
 80044e4:	f003 f980 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80044e8:	bf00      	nop
 80044ea:	3728      	adds	r7, #40	; 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40006400 	.word	0x40006400
 80044f4:	40021000 	.word	0x40021000
 80044f8:	48000400 	.word	0x48000400

080044fc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2e      	ldr	r2, [pc, #184]	; (80045d4 <HAL_COMP_MspInit+0xd8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d119      	bne.n	8004552 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800451e:	4b2e      	ldr	r3, [pc, #184]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	4a2d      	ldr	r2, [pc, #180]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	6153      	str	r3, [r2, #20]
 800452a:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800453a:	2303      	movs	r3, #3
 800453c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8004542:	f107 0314 	add.w	r3, r7, #20
 8004546:	4619      	mov	r1, r3
 8004548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800454c:	f003 f94c 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8004550:	e03b      	b.n	80045ca <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP4)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a21      	ldr	r2, [pc, #132]	; (80045dc <HAL_COMP_MspInit+0xe0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d118      	bne.n	800458e <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 8004562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004566:	6153      	str	r3, [r2, #20]
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004574:	2301      	movs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004578:	2303      	movs	r3, #3
 800457a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4619      	mov	r1, r3
 8004586:	4816      	ldr	r0, [pc, #88]	; (80045e0 <HAL_COMP_MspInit+0xe4>)
 8004588:	f003 f92e 	bl	80077e8 <HAL_GPIO_Init>
}
 800458c:	e01d      	b.n	80045ca <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP6)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <HAL_COMP_MspInit+0xe8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d118      	bne.n	80045ca <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 800459e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a2:	6153      	str	r3, [r2, #20]
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_COMP_MspInit+0xdc>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80045b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045b6:	2303      	movs	r3, #3
 80045b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80045be:	f107 0314 	add.w	r3, r7, #20
 80045c2:	4619      	mov	r1, r3
 80045c4:	4806      	ldr	r0, [pc, #24]	; (80045e0 <HAL_COMP_MspInit+0xe4>)
 80045c6:	f003 f90f 	bl	80077e8 <HAL_GPIO_Init>
}
 80045ca:	bf00      	nop
 80045cc:	3728      	adds	r7, #40	; 0x28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40010020 	.word	0x40010020
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40010028 	.word	0x40010028
 80045e0:	48000400 	.word	0x48000400
 80045e4:	40010030 	.word	0x40010030

080045e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08a      	sub	sp, #40	; 0x28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f0:	f107 0314 	add.w	r3, r7, #20
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	609a      	str	r2, [r3, #8]
 80045fc:	60da      	str	r2, [r3, #12]
 80045fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a15      	ldr	r2, [pc, #84]	; (800465c <HAL_DAC_MspInit+0x74>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d124      	bne.n	8004654 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <HAL_DAC_MspInit+0x78>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4a14      	ldr	r2, [pc, #80]	; (8004660 <HAL_DAC_MspInit+0x78>)
 8004610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004614:	61d3      	str	r3, [r2, #28]
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_DAC_MspInit+0x78>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <HAL_DAC_MspInit+0x78>)
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4a0e      	ldr	r2, [pc, #56]	; (8004660 <HAL_DAC_MspInit+0x78>)
 8004628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800462c:	6153      	str	r3, [r2, #20]
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <HAL_DAC_MspInit+0x78>)
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800463a:	2310      	movs	r3, #16
 800463c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463e:	2303      	movs	r3, #3
 8004640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004646:	f107 0314 	add.w	r3, r7, #20
 800464a:	4619      	mov	r1, r3
 800464c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004650:	f003 f8ca 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004654:	bf00      	nop
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40007400 	.word	0x40007400
 8004660:	40021000 	.word	0x40021000

08004664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	609a      	str	r2, [r3, #8]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_SPI_MspInit+0x7c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d127      	bne.n	80046d6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004686:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <HAL_SPI_MspInit+0x80>)
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_SPI_MspInit+0x80>)
 800468c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004690:	6193      	str	r3, [r2, #24]
 8004692:	4b14      	ldr	r3, [pc, #80]	; (80046e4 <HAL_SPI_MspInit+0x80>)
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469e:	4b11      	ldr	r3, [pc, #68]	; (80046e4 <HAL_SPI_MspInit+0x80>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <HAL_SPI_MspInit+0x80>)
 80046a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a8:	6153      	str	r3, [r2, #20]
 80046aa:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <HAL_SPI_MspInit+0x80>)
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80046b6:	2338      	movs	r3, #56	; 0x38
 80046b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	2302      	movs	r3, #2
 80046bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046be:	2301      	movs	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046c2:	2303      	movs	r3, #3
 80046c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046c6:	2305      	movs	r3, #5
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ca:	f107 0314 	add.w	r3, r7, #20
 80046ce:	4619      	mov	r1, r3
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <HAL_SPI_MspInit+0x84>)
 80046d2:	f003 f889 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80046d6:	bf00      	nop
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40013000 	.word	0x40013000
 80046e4:	40021000 	.word	0x40021000
 80046e8:	48000400 	.word	0x48000400

080046ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a20      	ldr	r2, [pc, #128]	; (800478c <HAL_TIM_Base_MspInit+0xa0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10c      	bne.n	8004728 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800470e:	4b20      	ldr	r3, [pc, #128]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	4a1f      	ldr	r2, [pc, #124]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 8004714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004718:	6193      	str	r3, [r2, #24]
 800471a:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004726:	e02d      	b.n	8004784 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d128      	bne.n	8004784 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	4a16      	ldr	r2, [pc, #88]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	61d3      	str	r3, [r2, #28]
 800473e:	4b14      	ldr	r3, [pc, #80]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800474a:	4b11      	ldr	r3, [pc, #68]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4a10      	ldr	r2, [pc, #64]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 8004750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004754:	6153      	str	r3, [r2, #20]
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <HAL_TIM_Base_MspInit+0xa4>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_PWM_INPUT_Pin;
 8004762:	2320      	movs	r3, #32
 8004764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800476a:	2302      	movs	r3, #2
 800476c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800476e:	2303      	movs	r3, #3
 8004770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004772:	2301      	movs	r3, #1
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	4619      	mov	r1, r3
 800477c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004780:	f003 f832 	bl	80077e8 <HAL_GPIO_Init>
}
 8004784:	bf00      	nop
 8004786:	3728      	adds	r7, #40	; 0x28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40021000 	.word	0x40021000

08004794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08a      	sub	sp, #40	; 0x28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800479c:	f107 0314 	add.w	r3, r7, #20
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a32      	ldr	r2, [pc, #200]	; (800487c <HAL_TIM_MspPostInit+0xe8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d15d      	bne.n	8004872 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	4b32      	ldr	r3, [pc, #200]	; (8004880 <HAL_TIM_MspPostInit+0xec>)
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	4a31      	ldr	r2, [pc, #196]	; (8004880 <HAL_TIM_MspPostInit+0xec>)
 80047bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c0:	6153      	str	r3, [r2, #20]
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <HAL_TIM_MspPostInit+0xec>)
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ce:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <HAL_TIM_MspPostInit+0xec>)
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	4a2b      	ldr	r2, [pc, #172]	; (8004880 <HAL_TIM_MspPostInit+0xec>)
 80047d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d8:	6153      	str	r3, [r2, #20]
 80047da:	4b29      	ldr	r3, [pc, #164]	; (8004880 <HAL_TIM_MspPostInit+0xec>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 80047e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f0:	2301      	movs	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80047f8:	2306      	movs	r3, #6
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 80047fc:	f107 0314 	add.w	r3, r7, #20
 8004800:	4619      	mov	r1, r3
 8004802:	4820      	ldr	r0, [pc, #128]	; (8004884 <HAL_TIM_MspPostInit+0xf0>)
 8004804:	f002 fff0 	bl	80077e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480e:	2302      	movs	r3, #2
 8004810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004812:	2301      	movs	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004816:	2303      	movs	r3, #3
 8004818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800481a:	2304      	movs	r3, #4
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800481e:	f107 0314 	add.w	r3, r7, #20
 8004822:	4619      	mov	r1, r3
 8004824:	4817      	ldr	r0, [pc, #92]	; (8004884 <HAL_TIM_MspPostInit+0xf0>)
 8004826:	f002 ffdf 	bl	80077e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800482a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800482e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004830:	2302      	movs	r3, #2
 8004832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004834:	2302      	movs	r3, #2
 8004836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004838:	2303      	movs	r3, #3
 800483a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800483c:	2306      	movs	r3, #6
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	4619      	mov	r1, r3
 8004846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800484a:	f002 ffcd 	bl	80077e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800484e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004854:	2302      	movs	r3, #2
 8004856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004858:	2301      	movs	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800485c:	2303      	movs	r3, #3
 800485e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004860:	2306      	movs	r3, #6
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004864:	f107 0314 	add.w	r3, r7, #20
 8004868:	4619      	mov	r1, r3
 800486a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800486e:	f002 ffbb 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004872:	bf00      	nop
 8004874:	3728      	adds	r7, #40	; 0x28
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40012c00 	.word	0x40012c00
 8004880:	40021000 	.word	0x40021000
 8004884:	48000400 	.word	0x48000400

08004888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	; 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004890:	f107 0314 	add.w	r3, r7, #20
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a17      	ldr	r2, [pc, #92]	; (8004904 <HAL_UART_MspInit+0x7c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d127      	bne.n	80048fa <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <HAL_UART_MspInit+0x80>)
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	4a16      	ldr	r2, [pc, #88]	; (8004908 <HAL_UART_MspInit+0x80>)
 80048b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b4:	6193      	str	r3, [r2, #24]
 80048b6:	4b14      	ldr	r3, [pc, #80]	; (8004908 <HAL_UART_MspInit+0x80>)
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c2:	4b11      	ldr	r3, [pc, #68]	; (8004908 <HAL_UART_MspInit+0x80>)
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	4a10      	ldr	r2, [pc, #64]	; (8004908 <HAL_UART_MspInit+0x80>)
 80048c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048cc:	6153      	str	r3, [r2, #20]
 80048ce:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <HAL_UART_MspInit+0x80>)
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80048da:	23c0      	movs	r3, #192	; 0xc0
 80048dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048de:	2302      	movs	r3, #2
 80048e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048ea:	2307      	movs	r3, #7
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ee:	f107 0314 	add.w	r3, r7, #20
 80048f2:	4619      	mov	r1, r3
 80048f4:	4805      	ldr	r0, [pc, #20]	; (800490c <HAL_UART_MspInit+0x84>)
 80048f6:	f002 ff77 	bl	80077e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048fa:	bf00      	nop
 80048fc:	3728      	adds	r7, #40	; 0x28
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40013800 	.word	0x40013800
 8004908:	40021000 	.word	0x40021000
 800490c:	48000400 	.word	0x48000400

08004910 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8004910:	b5b0      	push	{r4, r5, r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	460b      	mov	r3, r1
 800491e:	72fb      	strb	r3, [r7, #11]

    pMCP = &MCP_UI_Params;
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <UI_TaskInit+0x64>)
 8004922:	4a15      	ldr	r2, [pc, #84]	; (8004978 <UI_TaskInit+0x68>)
 8004924:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <UI_TaskInit+0x64>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a14      	ldr	r2, [pc, #80]	; (800497c <UI_TaskInit+0x6c>)
 800492c:	461c      	mov	r4, r3
 800492e:	4615      	mov	r5, r2
 8004930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004934:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004938:	e884 0003 	stmia.w	r4, {r0, r1}

    UFCP_Init( & pUSART );
 800493c:	4810      	ldr	r0, [pc, #64]	; (8004980 <UI_TaskInit+0x70>)
 800493e:	f00a f894 	bl	800ea6a <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <UI_TaskInit+0x64>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <UI_TaskInit+0x74>)
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <UI_TaskInit+0x78>)
 8004950:	4a0e      	ldr	r2, [pc, #56]	; (800498c <UI_TaskInit+0x7c>)
 8004952:	490b      	ldr	r1, [pc, #44]	; (8004980 <UI_TaskInit+0x70>)
 8004954:	f7fe fa78 	bl	8002e48 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <UI_TaskInit+0x64>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	7af9      	ldrb	r1, [r7, #11]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	f000 f882 	bl	8004a70 <UI_Init>

}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bdb0      	pop	{r4, r5, r7, pc}
 8004974:	20000728 	.word	0x20000728
 8004978:	20000b2c 	.word	0x20000b2c
 800497c:	20000700 	.word	0x20000700
 8004980:	20000558 	.word	0x20000558
 8004984:	0800ed8d 	.word	0x0800ed8d
 8004988:	0800ecb3 	.word	0x0800ecb3
 800498c:	0800ecf9 	.word	0x0800ecf9

08004990 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  if(bUITaskCounter > 0u)
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <UI_Scheduler+0x58>)
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d006      	beq.n	80049ac <UI_Scheduler+0x1c>
  {
    bUITaskCounter--;
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <UI_Scheduler+0x58>)
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <UI_Scheduler+0x58>)
 80049aa:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <UI_Scheduler+0x5c>)
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d906      	bls.n	80049c4 <UI_Scheduler+0x34>
  {
    bCOMTimeoutCounter--;
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <UI_Scheduler+0x5c>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <UI_Scheduler+0x5c>)
 80049c2:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <UI_Scheduler+0x60>)
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d906      	bls.n	80049dc <UI_Scheduler+0x4c>
  {
    bCOMATRTimeCounter--;
 80049ce:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <UI_Scheduler+0x60>)
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <UI_Scheduler+0x60>)
 80049da:	801a      	strh	r2, [r3, #0]
  }
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	2000072c 	.word	0x2000072c
 80049ec:	2000072e 	.word	0x2000072e
 80049f0:	200006d6 	.word	0x200006d6

080049f4 <UI_IdleTimeHasElapsed>:
{
  return pMCP;
}

__weak bool UI_IdleTimeHasElapsed(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
  bool retVal = false;
 80049fa:	2300      	movs	r3, #0
 80049fc:	71fb      	strb	r3, [r7, #7]
  if (bUITaskCounter == 0u)
 80049fe:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <UI_IdleTimeHasElapsed+0x28>)
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <UI_IdleTimeHasElapsed+0x18>
  {
    retVal = true;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	2000072c 	.word	0x2000072c

08004a20 <UI_SetIdleTime>:

__weak void UI_SetIdleTime(uint16_t SysTickCount)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  bUITaskCounter = SysTickCount;
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <UI_SetIdleTime+0x1c>)
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	8013      	strh	r3, [r2, #0]
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	2000072c 	.word	0x2000072c

08004a40 <UI_SerialCommunicationTimeOutStop>:
  }
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = 0u;
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <UI_SerialCommunicationTimeOutStop+0x14>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	801a      	strh	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	2000072e 	.word	0x2000072e

08004a58 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <UI_SerialCommunicationTimeOutStart+0x14>)
 8004a5e:	224f      	movs	r2, #79	; 0x4f
 8004a60:	801a      	strh	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	2000072e 	.word	0x2000072e

08004a70 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	7afa      	ldrb	r2, [r7, #11]
 8004a84:	711a      	strb	r2, [r3, #4]
  pHandle->pMCI = pMCI;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
  pHandle->pMCT = pMCT;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	60da      	str	r2, [r3, #12]
  pHandle->bSelectedDrive = 0u;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	751a      	strb	r2, [r3, #20]
  pHandle->pUICfg = pUICfg;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	611a      	str	r2, [r3, #16]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	791b      	ldrb	r3, [r3, #4]
 8004abe:	78fa      	ldrb	r2, [r7, #3]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d302      	bcc.n	8004aca <UI_SelectMC+0x20>
  {
    retVal = false;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e002      	b.n	8004ad0 <UI_SelectMC+0x26>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	751a      	strb	r2, [r3, #20]
  }
  return retVal;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7d1b      	ldrb	r3, [r3, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
	...

08004af8 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b096      	sub	sp, #88	; 0x58
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	460b      	mov	r3, r1
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	72fb      	strb	r3, [r7, #11]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	7d1b      	ldrb	r3, [r3, #20]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	643b      	str	r3, [r7, #64]	; 0x40
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	7d1b      	ldrb	r3, [r3, #20]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c

  bool retVal = true;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  switch (bRegID)
 8004b2c:	7afb      	ldrb	r3, [r7, #11]
 8004b2e:	2b5b      	cmp	r3, #91	; 0x5b
 8004b30:	f200 8223 	bhi.w	8004f7a <UI_SetReg+0x482>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UI_SetReg+0x44>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004cad 	.word	0x08004cad
 8004b40:	08004f7b 	.word	0x08004f7b
 8004b44:	08004f7b 	.word	0x08004f7b
 8004b48:	08004d1d 	.word	0x08004d1d
 8004b4c:	08004f7b 	.word	0x08004f7b
 8004b50:	08004ce7 	.word	0x08004ce7
 8004b54:	08004cf9 	.word	0x08004cf9
 8004b58:	08004d0b 	.word	0x08004d0b
 8004b5c:	08004d55 	.word	0x08004d55
 8004b60:	08004d6f 	.word	0x08004d6f
 8004b64:	08004d81 	.word	0x08004d81
 8004b68:	08004d93 	.word	0x08004d93
 8004b6c:	08004da5 	.word	0x08004da5
 8004b70:	08004dbf 	.word	0x08004dbf
 8004b74:	08004dd1 	.word	0x08004dd1
 8004b78:	08004de3 	.word	0x08004de3
 8004b7c:	08004df5 	.word	0x08004df5
 8004b80:	08004e53 	.word	0x08004e53
 8004b84:	08004f7b 	.word	0x08004f7b
 8004b88:	08004f7b 	.word	0x08004f7b
 8004b8c:	08004eaf 	.word	0x08004eaf
 8004b90:	08004f0b 	.word	0x08004f0b
 8004b94:	08004f7b 	.word	0x08004f7b
 8004b98:	08004f7b 	.word	0x08004f7b
 8004b9c:	08004f7b 	.word	0x08004f7b
 8004ba0:	08004f7b 	.word	0x08004f7b
 8004ba4:	08004f7b 	.word	0x08004f7b
 8004ba8:	08004f7b 	.word	0x08004f7b
 8004bac:	08004f7b 	.word	0x08004f7b
 8004bb0:	08004f7b 	.word	0x08004f7b
 8004bb4:	08004f7b 	.word	0x08004f7b
 8004bb8:	08004f7b 	.word	0x08004f7b
 8004bbc:	08004f7b 	.word	0x08004f7b
 8004bc0:	08004f7b 	.word	0x08004f7b
 8004bc4:	08004f7b 	.word	0x08004f7b
 8004bc8:	08004f7b 	.word	0x08004f7b
 8004bcc:	08004f7b 	.word	0x08004f7b
 8004bd0:	08004f7b 	.word	0x08004f7b
 8004bd4:	08004f7b 	.word	0x08004f7b
 8004bd8:	08004f7b 	.word	0x08004f7b
 8004bdc:	08004f7b 	.word	0x08004f7b
 8004be0:	08004f7b 	.word	0x08004f7b
 8004be4:	08004f7b 	.word	0x08004f7b
 8004be8:	08004f7b 	.word	0x08004f7b
 8004bec:	08004f7b 	.word	0x08004f7b
 8004bf0:	08004f7b 	.word	0x08004f7b
 8004bf4:	08004f7b 	.word	0x08004f7b
 8004bf8:	08004f7b 	.word	0x08004f7b
 8004bfc:	08004f7b 	.word	0x08004f7b
 8004c00:	08004f7b 	.word	0x08004f7b
 8004c04:	08004f7b 	.word	0x08004f7b
 8004c08:	08004f7b 	.word	0x08004f7b
 8004c0c:	08004f7b 	.word	0x08004f7b
 8004c10:	08004f7b 	.word	0x08004f7b
 8004c14:	08004f7b 	.word	0x08004f7b
 8004c18:	08004f7b 	.word	0x08004f7b
 8004c1c:	08004f7b 	.word	0x08004f7b
 8004c20:	08004f7b 	.word	0x08004f7b
 8004c24:	08004f7b 	.word	0x08004f7b
 8004c28:	08004f7b 	.word	0x08004f7b
 8004c2c:	08004f7b 	.word	0x08004f7b
 8004c30:	08004f7b 	.word	0x08004f7b
 8004c34:	08004f7b 	.word	0x08004f7b
 8004c38:	08004f7b 	.word	0x08004f7b
 8004c3c:	08004f7b 	.word	0x08004f7b
 8004c40:	08004f6d 	.word	0x08004f6d
 8004c44:	08004f7b 	.word	0x08004f7b
 8004c48:	08004f7b 	.word	0x08004f7b
 8004c4c:	08004f7b 	.word	0x08004f7b
 8004c50:	08004f7b 	.word	0x08004f7b
 8004c54:	08004f7b 	.word	0x08004f7b
 8004c58:	08004f7b 	.word	0x08004f7b
 8004c5c:	08004f7b 	.word	0x08004f7b
 8004c60:	08004f7b 	.word	0x08004f7b
 8004c64:	08004f7b 	.word	0x08004f7b
 8004c68:	08004f7b 	.word	0x08004f7b
 8004c6c:	08004f7b 	.word	0x08004f7b
 8004c70:	08004f7b 	.word	0x08004f7b
 8004c74:	08004f7b 	.word	0x08004f7b
 8004c78:	08004f7b 	.word	0x08004f7b
 8004c7c:	08004f7b 	.word	0x08004f7b
 8004c80:	08004f7b 	.word	0x08004f7b
 8004c84:	08004f7b 	.word	0x08004f7b
 8004c88:	08004f7b 	.word	0x08004f7b
 8004c8c:	08004f7b 	.word	0x08004f7b
 8004c90:	08004f7b 	.word	0x08004f7b
 8004c94:	08004f7b 	.word	0x08004f7b
 8004c98:	08004f7b 	.word	0x08004f7b
 8004c9c:	08004f7b 	.word	0x08004f7b
 8004ca0:	08004f7b 	.word	0x08004f7b
 8004ca4:	08004f7b 	.word	0x08004f7b
 8004ca8:	08004cc1 	.word	0x08004cc1
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff fef9 	bl	8004aaa <UI_SelectMC>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
    break;
 8004cbe:	e169      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4aa7      	ldr	r2, [pc, #668]	; (8004f68 <UI_SetReg+0x470>)
 8004ccc:	fb82 1203 	smull	r1, r2, r2, r3
 8004cd0:	441a      	add	r2, r3
 8004cd2:	1152      	asrs	r2, r2, #5
 8004cd4:	17db      	asrs	r3, r3, #31
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	b21b      	sxth	r3, r3
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004ce0:	f7fc fe1d 	bl	800191e <MCI_ExecSpeedRamp>
    }
    break;
 8004ce4:	e156      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	b212      	sxth	r2, r2
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f006 fd00 	bl	800b6f6 <PID_SetKP>
    }
    break;
 8004cf6:	e14d      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	b212      	sxth	r2, r2
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f006 fd06 	bl	800b714 <PID_SetKI>
    }
    break;
 8004d08:	e144      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8004d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	b212      	sxth	r2, r2
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f006 fd4c 	bl	800b7b2 <PID_SetKD>
    }
    break;
 8004d1a:	e13b      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <UI_SetReg+0x23e>
      {
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8004d24:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d26:	f7fd f827 	bl	8001d78 <MCI_GetTeref>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d32:	f7fc fe11 	bl	8001958 <MCI_ExecTorqueRamp>
      }
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	f040 8121 	bne.w	8004f82 <UI_SetReg+0x48a>
      {
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8004d40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d42:	f7fc ff7c 	bl	8001c3e <MCI_GetMecSpeedRefUnit>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d4e:	f7fc fde6 	bl	800191e <MCI_ExecSpeedRamp>
      }
    }
    break;
 8004d52:	e116      	b.n	8004f82 <UI_SetReg+0x48a>

  case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004d54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d56:	f7fc ffc7 	bl	8001ce8 <MCI_GetIqdref>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28
      currComp.q = (int16_t)wValue;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	b21b      	sxth	r3, r3
 8004d62:	853b      	strh	r3, [r7, #40]	; 0x28
      MCI_SetCurrentReferences(pMCI,currComp);
 8004d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d68:	f7fc fe13 	bl	8001992 <MCI_SetCurrentReferences>
    }
    break;
 8004d6c:	e112      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KP:
    {
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8004d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	b212      	sxth	r2, r2
 8004d76:	4611      	mov	r1, r2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f006 fcbc 	bl	800b6f6 <PID_SetKP>
    }
    break;
 8004d7e:	e109      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KI:
    {
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8004d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	b212      	sxth	r2, r2
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f006 fcc2 	bl	800b714 <PID_SetKI>
    }
    break;
 8004d90:	e100      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KD:
    {
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8004d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	b212      	sxth	r2, r2
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f006 fd08 	bl	800b7b2 <PID_SetKD>
    }
    break;
 8004da2:	e0f7      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004da4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004da6:	f7fc ff9f 	bl	8001ce8 <MCI_GetIqdref>
 8004daa:	4603      	mov	r3, r0
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
      currComp.d = (int16_t)wValue;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	b21b      	sxth	r3, r3
 8004db2:	84fb      	strh	r3, [r7, #38]	; 0x26
      MCI_SetCurrentReferences(pMCI,currComp);
 8004db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004db8:	f7fc fdeb 	bl	8001992 <MCI_SetCurrentReferences>
    }
    break;
 8004dbc:	e0ea      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KP:
    {
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8004dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	b212      	sxth	r2, r2
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f006 fc94 	bl	800b6f6 <PID_SetKP>
    }
    break;
 8004dce:	e0e1      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KI:
    {
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8004dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	b212      	sxth	r2, r2
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f006 fc9a 	bl	800b714 <PID_SetKI>
    }
    break;
 8004de0:	e0d8      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KD:
    {
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8004de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	b212      	sxth	r2, r2
 8004dea:	4611      	mov	r1, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f006 fce0 	bl	800b7b2 <PID_SetKD>
    }
    break;
 8004df2:	e0cf      	b.n	8004f94 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	7d1b      	ldrb	r3, [r3, #20]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	653b      	str	r3, [r7, #80]	; 0x50
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	0f1b      	lsrs	r3, r3, #28
 8004e0c:	2b09      	cmp	r3, #9
 8004e0e:	d102      	bne.n	8004e16 <UI_SetReg+0x31e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	0e1b      	lsrs	r3, r3, #24
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	2b09      	cmp	r3, #9
 8004e20:	d102      	bne.n	8004e28 <UI_SetReg+0x330>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (pSPD != MC_NULL)
 8004e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80ab 	beq.w	8004f86 <UI_SetReg+0x48e>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004e30:	f107 0220 	add.w	r2, r7, #32
 8004e34:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e3c:	f00a fdaa 	bl	800f994 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	b21b      	sxth	r3, r3
 8004e44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e4c:	f00a fdaa 	bl	800f9a4 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8004e50:	e099      	b.n	8004f86 <UI_SetReg+0x48e>

  case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	7d1b      	ldrb	r3, [r3, #20]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	633b      	str	r3, [r7, #48]	; 0x30
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004e62:	2300      	movs	r3, #0
 8004e64:	64fb      	str	r3, [r7, #76]	; 0x4c
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	0f1b      	lsrs	r3, r3, #28
 8004e6a:	2b09      	cmp	r3, #9
 8004e6c:	d102      	bne.n	8004e74 <UI_SetReg+0x37c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	0e1b      	lsrs	r3, r3, #24
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	2b09      	cmp	r3, #9
 8004e7e:	d102      	bne.n	8004e86 <UI_SetReg+0x38e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (pSPD != MC_NULL)
 8004e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d07e      	beq.n	8004f8a <UI_SetReg+0x492>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004e8c:	f107 021c 	add.w	r2, r7, #28
 8004e90:	f107 031e 	add.w	r3, r7, #30
 8004e94:	4619      	mov	r1, r3
 8004e96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004e98:	f00a fd7c 	bl	800f994 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8004e9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	b212      	sxth	r2, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004ea8:	f00a fd7c 	bl	800f9a4 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8004eac:	e06d      	b.n	8004f8a <UI_SetReg+0x492>

  case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	7d1b      	ldrb	r3, [r3, #20]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec4:	0f1b      	lsrs	r3, r3, #28
 8004ec6:	2b09      	cmp	r3, #9
 8004ec8:	d102      	bne.n	8004ed0 <UI_SetReg+0x3d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	0e1b      	lsrs	r3, r3, #24
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	2b09      	cmp	r3, #9
 8004eda:	d102      	bne.n	8004ee2 <UI_SetReg+0x3ea>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (pSPD != MC_NULL)
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d052      	beq.n	8004f8e <UI_SetReg+0x496>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004ee8:	f107 0218 	add.w	r2, r7, #24
 8004eec:	f107 031a 	add.w	r3, r7, #26
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ef4:	f00a fd5a 	bl	800f9ac <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8004ef8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	b212      	sxth	r2, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004f04:	f00a fd60 	bl	800f9c8 <STO_SetPLLGains>
      }
    }
    break;
 8004f08:	e041      	b.n	8004f8e <UI_SetReg+0x496>

  case MC_PROTOCOL_REG_PLL_KP:
	{
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	7d1b      	ldrb	r3, [r3, #20]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	647b      	str	r3, [r7, #68]	; 0x44
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	0f1b      	lsrs	r3, r3, #28
 8004f22:	2b09      	cmp	r3, #9
 8004f24:	d102      	bne.n	8004f2c <UI_SetReg+0x434>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2e:	0e1b      	lsrs	r3, r3, #24
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d102      	bne.n	8004f3e <UI_SetReg+0x446>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (pSPD != MC_NULL)
 8004f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d026      	beq.n	8004f92 <UI_SetReg+0x49a>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8004f44:	f107 0214 	add.w	r2, r7, #20
 8004f48:	f107 0316 	add.w	r3, r7, #22
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004f50:	f00a fd2c 	bl	800f9ac <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	b21b      	sxth	r3, r3
 8004f58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004f60:	f00a fd32 	bl	800f9c8 <STO_SetPLLGains>
      }
    }
    break;
 8004f64:	e015      	b.n	8004f92 <UI_SetReg+0x49a>
 8004f66:	bf00      	nop
 8004f68:	88888889 	.word	0x88888889

  case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	b21b      	sxth	r3, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004f74:	f7fc ff0e 	bl	8001d94 <MCI_SetIdref>
    }
    break;
 8004f78:	e00c      	b.n	8004f94 <UI_SetReg+0x49c>

  default:
    retVal = false;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    break;
 8004f80:	e008      	b.n	8004f94 <UI_SetReg+0x49c>
    break;
 8004f82:	bf00      	nop
 8004f84:	e006      	b.n	8004f94 <UI_SetReg+0x49c>
    break;
 8004f86:	bf00      	nop
 8004f88:	e004      	b.n	8004f94 <UI_SetReg+0x49c>
    break;
 8004f8a:	bf00      	nop
 8004f8c:	e002      	b.n	8004f94 <UI_SetReg+0x49c>
    break;
 8004f8e:	bf00      	nop
 8004f90:	e000      	b.n	8004f94 <UI_SetReg+0x49c>
    break;
 8004f92:	bf00      	nop
  }

  return retVal;
 8004f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3758      	adds	r7, #88	; 0x58
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b0b6      	sub	sp, #216	; 0xd8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	72fb      	strb	r3, [r7, #11]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	7d1b      	ldrb	r3, [r3, #20]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	7d1b      	ldrb	r3, [r3, #20]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  int32_t bRetVal = 0;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  if ( success != (bool *) 0 )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <UI_GetReg+0x44>
  {
    *success = true;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 8004fe4:	7afb      	ldrb	r3, [r7, #11]
 8004fe6:	2b81      	cmp	r3, #129	; 0x81
 8004fe8:	f200 8552 	bhi.w	8005a90 <UI_GetReg+0xaf0>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <UI_GetReg+0x54>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	080051fd 	.word	0x080051fd
 8004ff8:	0800520d 	.word	0x0800520d
 8004ffc:	08005223 	.word	0x08005223
 8005000:	08005343 	.word	0x08005343
 8005004:	08005239 	.word	0x08005239
 8005008:	08005261 	.word	0x08005261
 800500c:	08005277 	.word	0x08005277
 8005010:	0800528d 	.word	0x0800528d
 8005014:	08005317 	.word	0x08005317
 8005018:	080053d5 	.word	0x080053d5
 800501c:	080053e9 	.word	0x080053e9
 8005020:	080053fd 	.word	0x080053fd
 8005024:	0800532d 	.word	0x0800532d
 8005028:	08005427 	.word	0x08005427
 800502c:	0800543b 	.word	0x0800543b
 8005030:	0800544f 	.word	0x0800544f
 8005034:	08005463 	.word	0x08005463
 8005038:	080054c5 	.word	0x080054c5
 800503c:	08005a91 	.word	0x08005a91
 8005040:	08005a91 	.word	0x08005a91
 8005044:	080055eb 	.word	0x080055eb
 8005048:	08005589 	.word	0x08005589
 800504c:	08005a91 	.word	0x08005a91
 8005050:	08005a91 	.word	0x08005a91
 8005054:	08005a91 	.word	0x08005a91
 8005058:	080052a3 	.word	0x080052a3
 800505c:	080052b9 	.word	0x080052b9
 8005060:	080058fb 	.word	0x080058fb
 8005064:	08005a91 	.word	0x08005a91
 8005068:	08005a91 	.word	0x08005a91
 800506c:	080052cd 	.word	0x080052cd
 8005070:	08005963 	.word	0x08005963
 8005074:	08005979 	.word	0x08005979
 8005078:	08005a91 	.word	0x08005a91
 800507c:	0800598f 	.word	0x0800598f
 8005080:	080059b5 	.word	0x080059b5
 8005084:	080059cb 	.word	0x080059cb
 8005088:	080059e1 	.word	0x080059e1
 800508c:	080059f7 	.word	0x080059f7
 8005090:	08005963 	.word	0x08005963
 8005094:	08005979 	.word	0x08005979
 8005098:	08005a0d 	.word	0x08005a0d
 800509c:	08005a23 	.word	0x08005a23
 80050a0:	08005a39 	.word	0x08005a39
 80050a4:	08005a4f 	.word	0x08005a4f
 80050a8:	08005a65 	.word	0x08005a65
 80050ac:	08005a7b 	.word	0x08005a7b
 80050b0:	08005a91 	.word	0x08005a91
 80050b4:	08005a91 	.word	0x08005a91
 80050b8:	08005527 	.word	0x08005527
 80050bc:	0800564d 	.word	0x0800564d
 80050c0:	080056ab 	.word	0x080056ab
 80050c4:	0800570f 	.word	0x0800570f
 80050c8:	08005773 	.word	0x08005773
 80050cc:	080057d7 	.word	0x080057d7
 80050d0:	08005a91 	.word	0x08005a91
 80050d4:	08005a91 	.word	0x08005a91
 80050d8:	08005a91 	.word	0x08005a91
 80050dc:	08005a91 	.word	0x08005a91
 80050e0:	08005a91 	.word	0x08005a91
 80050e4:	08005a91 	.word	0x08005a91
 80050e8:	08005a91 	.word	0x08005a91
 80050ec:	08005a91 	.word	0x08005a91
 80050f0:	0800590f 	.word	0x0800590f
 80050f4:	08005939 	.word	0x08005939
 80050f8:	08005411 	.word	0x08005411
 80050fc:	0800583b 	.word	0x0800583b
 8005100:	0800589b 	.word	0x0800589b
 8005104:	08005a91 	.word	0x08005a91
 8005108:	08005a91 	.word	0x08005a91
 800510c:	08005a91 	.word	0x08005a91
 8005110:	08005a91 	.word	0x08005a91
 8005114:	08005a91 	.word	0x08005a91
 8005118:	08005a91 	.word	0x08005a91
 800511c:	08005a91 	.word	0x08005a91
 8005120:	08005a91 	.word	0x08005a91
 8005124:	08005a91 	.word	0x08005a91
 8005128:	08005a91 	.word	0x08005a91
 800512c:	08005a91 	.word	0x08005a91
 8005130:	08005a91 	.word	0x08005a91
 8005134:	08005a91 	.word	0x08005a91
 8005138:	08005a91 	.word	0x08005a91
 800513c:	08005a91 	.word	0x08005a91
 8005140:	08005a91 	.word	0x08005a91
 8005144:	08005a91 	.word	0x08005a91
 8005148:	08005a91 	.word	0x08005a91
 800514c:	08005a91 	.word	0x08005a91
 8005150:	08005a91 	.word	0x08005a91
 8005154:	08005a91 	.word	0x08005a91
 8005158:	08005a91 	.word	0x08005a91
 800515c:	08005a91 	.word	0x08005a91
 8005160:	08005353 	.word	0x08005353
 8005164:	08005a91 	.word	0x08005a91
 8005168:	08005a91 	.word	0x08005a91
 800516c:	08005a91 	.word	0x08005a91
 8005170:	08005a91 	.word	0x08005a91
 8005174:	08005a91 	.word	0x08005a91
 8005178:	08005a91 	.word	0x08005a91
 800517c:	08005a91 	.word	0x08005a91
 8005180:	08005a91 	.word	0x08005a91
 8005184:	08005a91 	.word	0x08005a91
 8005188:	08005a91 	.word	0x08005a91
 800518c:	08005a91 	.word	0x08005a91
 8005190:	08005a91 	.word	0x08005a91
 8005194:	08005a91 	.word	0x08005a91
 8005198:	08005a91 	.word	0x08005a91
 800519c:	08005a91 	.word	0x08005a91
 80051a0:	08005a91 	.word	0x08005a91
 80051a4:	08005a91 	.word	0x08005a91
 80051a8:	08005a91 	.word	0x08005a91
 80051ac:	080053ad 	.word	0x080053ad
 80051b0:	080053c1 	.word	0x080053c1
 80051b4:	080052f3 	.word	0x080052f3
 80051b8:	08005a91 	.word	0x08005a91
 80051bc:	080052fb 	.word	0x080052fb
 80051c0:	08005305 	.word	0x08005305
 80051c4:	08005a91 	.word	0x08005a91
 80051c8:	08005a91 	.word	0x08005a91
 80051cc:	08005a91 	.word	0x08005a91
 80051d0:	08005a91 	.word	0x08005a91
 80051d4:	08005a91 	.word	0x08005a91
 80051d8:	08005a91 	.word	0x08005a91
 80051dc:	08005a91 	.word	0x08005a91
 80051e0:	08005a91 	.word	0x08005a91
 80051e4:	08005a91 	.word	0x08005a91
 80051e8:	08005a91 	.word	0x08005a91
 80051ec:	08005a91 	.word	0x08005a91
 80051f0:	08005a91 	.word	0x08005a91
 80051f4:	08005a91 	.word	0x08005a91
 80051f8:	0800530f 	.word	0x0800530f
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f7ff fc6e 	bl	8004ade <UI_GetSelectedMC>
 8005202:	4603      	mov	r3, r0
 8005204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005208:	f000 bc5a 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLAGS:
    {
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800520c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	4618      	mov	r0, r3
 8005214:	f009 fbc5 	bl	800e9a2 <STM_GetFaultState>
 8005218:	4603      	mov	r3, r0
 800521a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 800521e:	f000 bc4f 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_STATUS:
    {
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8005222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	4618      	mov	r0, r3
 800522a:	f009 fb95 	bl	800e958 <STM_GetState>
 800522e:	4603      	mov	r3, r0
 8005230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 8005234:	f000 bc44 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8005238:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800523c:	f7fc fcff 	bl	8001c3e <MCI_GetMecSpeedRefUnit>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4acc      	ldr	r2, [pc, #816]	; (8005580 <UI_GetReg+0x5e0>)
 800524e:	fb82 1203 	smull	r1, r2, r2, r3
 8005252:	1092      	asrs	r2, r2, #2
 8005254:	17db      	asrs	r3, r3, #31
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800525c:	f000 bc30 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8005260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f006 fa63 	bl	800b732 <PID_GetKP>
 800526c:	4603      	mov	r3, r0
 800526e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005272:	f000 bc25 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8005276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f006 fa65 	bl	800b74c <PID_GetKI>
 8005282:	4603      	mov	r3, r0
 8005284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005288:	f000 bc1a 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 800528c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f006 fa9c 	bl	800b7d0 <PID_GetKD>
 8005298:	4603      	mov	r3, r0
 800529a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800529e:	f000 bc0f 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80052a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	4618      	mov	r0, r3
 80052aa:	f005 ffcb 	bl	800b244 <VBS_GetAvBusVoltage_V>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052b4:	f000 bc04 	b.w	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80052b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	4618      	mov	r0, r3
 80052c0:	f006 f9c9 	bl	800b656 <NTC_GetAvTemp_C>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052ca:	e3f9      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80052cc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80052d0:	f7fc fca3 	bl	8001c1a <MCI_GetAvrgMecSpeedUnit>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	4613      	mov	r3, r2
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4aa7      	ldr	r2, [pc, #668]	; (8005580 <UI_GetReg+0x5e0>)
 80052e2:	fb82 1203 	smull	r1, r2, r2, r3
 80052e6:	1092      	asrs	r2, r2, #2
 80052e8:	17db      	asrs	r3, r3, #31
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052f0:	e3e6      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 80052f2:	4ba4      	ldr	r3, [pc, #656]	; (8005584 <UI_GetReg+0x5e4>)
 80052f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80052f8:	e3e2      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 80052fa:	f242 731d 	movw	r3, #10013	; 0x271d
 80052fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005302:	e3dd      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 8005304:	f242 731d 	movw	r3, #10013	; 0x271d
 8005308:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800530c:	e3d8      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 800530e:	2300      	movs	r3, #0
 8005310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005314:	e3d4      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8005316:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800531a:	f7fc fce5 	bl	8001ce8 <MCI_GetIqdref>
 800531e:	4603      	mov	r3, r0
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
      bRetVal = (int32_t)currComp.q;
 8005322:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800532a:	e3c9      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 800532c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005330:	f7fc fcda 	bl	8001ce8 <MCI_GetIqdref>
 8005334:	4603      	mov	r3, r0
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
      bRetVal = (int32_t)currComp.d;
 8005338:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800533c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005340:	e3be      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8005342:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005346:	f7fc fc03 	bl	8001b50 <MCI_GetControlMode>
 800534a:	4603      	mov	r3, r0
 800534c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005350:	e3b6      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8005352:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005356:	f7fc fbfb 	bl	8001b50 <MCI_GetControlMode>
 800535a:	4603      	mov	r3, r0
 800535c:	2b01      	cmp	r3, #1
 800535e:	d112      	bne.n	8005386 <UI_GetReg+0x3e6>
      {
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8005360:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005364:	f7fc fc37 	bl	8001bd6 <MCI_GetLastRampFinalSpeed>
 8005368:	4603      	mov	r3, r0
 800536a:	461a      	mov	r2, r3
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4a82      	ldr	r2, [pc, #520]	; (8005580 <UI_GetReg+0x5e0>)
 8005376:	fb82 1203 	smull	r1, r2, r2, r3
 800537a:	1092      	asrs	r2, r2, #2
 800537c:	17db      	asrs	r3, r3, #31
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
      }
    }
    break;
 8005384:	e39c      	b.n	8005ac0 <UI_GetReg+0xb20>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8005386:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800538a:	f7fc fc58 	bl	8001c3e <MCI_GetMecSpeedRefUnit>
 800538e:	4603      	mov	r3, r0
 8005390:	461a      	mov	r2, r3
 8005392:	4613      	mov	r3, r2
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a79      	ldr	r2, [pc, #484]	; (8005580 <UI_GetReg+0x5e0>)
 800539c:	fb82 1203 	smull	r1, r2, r2, r3
 80053a0:	1092      	asrs	r2, r2, #2
 80053a2:	17db      	asrs	r3, r3, #31
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 80053aa:	e389      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP_DIV:
    {
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 80053ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f006 f9e5 	bl	800b782 <PID_GetKPDivisor>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053be:	e37f      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI_DIV:
    {
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80053c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f006 f9e7 	bl	800b79a <PID_GetKIDivisor>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053d2:	e375      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 80053d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4618      	mov	r0, r3
 80053dc:	f006 f9a9 	bl	800b732 <PID_GetKP>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053e6:	e36b      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 80053e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f006 f9ac 	bl	800b74c <PID_GetKI>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053fa:	e361      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 80053fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4618      	mov	r0, r3
 8005404:	f006 f9e4 	bl	800b7d0 <PID_GetKD>
 8005408:	4603      	mov	r3, r0
 800540a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800540e:	e357      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8005410:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005414:	f7fc fc68 	bl	8001ce8 <MCI_GetIqdref>
 8005418:	4603      	mov	r3, r0
 800541a:	623b      	str	r3, [r7, #32]
      bRetVal = (int32_t)currComp.d;
 800541c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005424:	e34c      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8005426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f006 f980 	bl	800b732 <PID_GetKP>
 8005432:	4603      	mov	r3, r0
 8005434:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005438:	e342      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 800543a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4618      	mov	r0, r3
 8005442:	f006 f983 	bl	800b74c <PID_GetKI>
 8005446:	4603      	mov	r3, r0
 8005448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800544c:	e338      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800544e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	4618      	mov	r0, r3
 8005456:	f006 f9bb 	bl	800b7d0 <PID_GetKD>
 800545a:	4603      	mov	r3, r0
 800545c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005460:	e32e      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691a      	ldr	r2, [r3, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	7d1b      	ldrb	r3, [r3, #20]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	66fb      	str	r3, [r7, #108]	; 0x6c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547a:	0f1b      	lsrs	r3, r3, #28
 800547c:	2b09      	cmp	r3, #9
 800547e:	d104      	bne.n	800548a <UI_GetReg+0x4ea>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005480:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	0e1b      	lsrs	r3, r3, #24
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	2b09      	cmp	r3, #9
 8005494:	d104      	bne.n	80054a0 <UI_GetReg+0x500>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (pSPD != MC_NULL)
 80054a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <UI_GetReg+0x51a>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80054a8:	f107 021c 	add.w	r2, r7, #28
 80054ac:	f107 031e 	add.w	r3, r7, #30
 80054b0:	4619      	mov	r1, r3
 80054b2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80054b6:	f00a fa6d 	bl	800f994 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC1;
 80054ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80054be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80054c2:	e2fd      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	7d1b      	ldrb	r3, [r3, #20]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	673b      	str	r3, [r7, #112]	; 0x70
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80054da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054dc:	0f1b      	lsrs	r3, r3, #28
 80054de:	2b09      	cmp	r3, #9
 80054e0:	d104      	bne.n	80054ec <UI_GetReg+0x54c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80054e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80054ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ee:	0e1b      	lsrs	r3, r3, #24
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d104      	bne.n	8005502 <UI_GetReg+0x562>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80054f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (pSPD != MC_NULL)
 8005502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <UI_GetReg+0x57c>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800550a:	f107 0218 	add.w	r2, r7, #24
 800550e:	f107 031a 	add.w	r3, r7, #26
 8005512:	4619      	mov	r1, r3
 8005514:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8005518:	f00a fa3c 	bl	800f994 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC2;
 800551c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8005520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005524:	e2cc      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	7d1b      	ldrb	r3, [r3, #20]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	67fb      	str	r3, [r7, #124]	; 0x7c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800553c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800553e:	0f1b      	lsrs	r3, r3, #28
 8005540:	2b09      	cmp	r3, #9
 8005542:	d104      	bne.n	800554e <UI_GetReg+0x5ae>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800554e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005550:	0e1b      	lsrs	r3, r3, #24
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	2b09      	cmp	r3, #9
 8005558:	d104      	bne.n	8005564 <UI_GetReg+0x5c4>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800555a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (pSPD != MC_NULL)
 8005564:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8298 	beq.w	8005a9e <UI_GetReg+0xafe>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 800556e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005572:	f008 fd98 	bl	800e0a6 <SPD_GetElAngle>
 8005576:	4603      	mov	r3, r0
 8005578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800557c:	e28f      	b.n	8005a9e <UI_GetReg+0xafe>
 800557e:	bf00      	nop
 8005580:	66666667 	.word	0x66666667
 8005584:	34a6847a 	.word	0x34a6847a

    case MC_PROTOCOL_REG_PLL_KP:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	7d1b      	ldrb	r3, [r3, #20]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	67bb      	str	r3, [r7, #120]	; 0x78
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800559e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a0:	0f1b      	lsrs	r3, r3, #28
 80055a2:	2b09      	cmp	r3, #9
 80055a4:	d104      	bne.n	80055b0 <UI_GetReg+0x610>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80055a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80055b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b2:	0e1b      	lsrs	r3, r3, #24
 80055b4:	f003 030f 	and.w	r3, r3, #15
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	d104      	bne.n	80055c6 <UI_GetReg+0x626>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80055bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (pSPD != MC_NULL)
 80055c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d008      	beq.n	80055e0 <UI_GetReg+0x640>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80055ce:	f107 0214 	add.w	r2, r7, #20
 80055d2:	f107 0316 	add.w	r3, r7, #22
 80055d6:	4619      	mov	r1, r3
 80055d8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80055dc:	f00a f9e6 	bl	800f9ac <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hPgain;
 80055e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80055e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80055e8:	e26a      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	7d1b      	ldrb	r3, [r3, #20]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	677b      	str	r3, [r7, #116]	; 0x74
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005602:	0f1b      	lsrs	r3, r3, #28
 8005604:	2b09      	cmp	r3, #9
 8005606:	d104      	bne.n	8005612 <UI_GetReg+0x672>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005614:	0e1b      	lsrs	r3, r3, #24
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	2b09      	cmp	r3, #9
 800561c:	d104      	bne.n	8005628 <UI_GetReg+0x688>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800561e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (pSPD != MC_NULL)
 8005628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <UI_GetReg+0x6a2>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8005630:	f107 0210 	add.w	r2, r7, #16
 8005634:	f107 0312 	add.w	r3, r7, #18
 8005638:	4619      	mov	r1, r3
 800563a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800563e:	f00a f9b5 	bl	800f9ac <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hIgain;
 8005642:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800564a:	e239      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	7d1b      	ldrb	r3, [r3, #20]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005668:	0f1b      	lsrs	r3, r3, #28
 800566a:	2b09      	cmp	r3, #9
 800566c:	d104      	bne.n	8005678 <UI_GetReg+0x6d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800566e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800567c:	0e1b      	lsrs	r3, r3, #24
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	2b09      	cmp	r3, #9
 8005684:	d104      	bne.n	8005690 <UI_GetReg+0x6f0>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (pSPD != MC_NULL)
 8005690:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8204 	beq.w	8005aa2 <UI_GetReg+0xb02>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 800569a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800569e:	f008 fd94 	bl	800e1ca <SPD_GetS16Speed>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80056a8:	e1fb      	b.n	8005aa2 <UI_GetReg+0xb02>

    case MC_PROTOCOL_REG_OBS_I_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	7d1b      	ldrb	r3, [r3, #20]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056c6:	0f1b      	lsrs	r3, r3, #28
 80056c8:	2b09      	cmp	r3, #9
 80056ca:	d104      	bne.n	80056d6 <UI_GetReg+0x736>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80056cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80056d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056da:	0e1b      	lsrs	r3, r3, #24
 80056dc:	f003 030f 	and.w	r3, r3, #15
 80056e0:	2b09      	cmp	r3, #9
 80056e2:	d104      	bne.n	80056ee <UI_GetReg+0x74e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80056e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (pSPD != MC_NULL)
 80056ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 81d7 	beq.w	8005aa6 <UI_GetReg+0xb06>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80056f8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80056fc:	f00a f936 	bl	800f96c <STO_PLL_GetEstimatedCurrent>
 8005700:	4603      	mov	r3, r0
 8005702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005704:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800570c:	e1cb      	b.n	8005aa6 <UI_GetReg+0xb06>

    case MC_PROTOCOL_REG_OBS_I_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	691a      	ldr	r2, [r3, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	7d1b      	ldrb	r3, [r3, #20]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800572a:	0f1b      	lsrs	r3, r3, #28
 800572c:	2b09      	cmp	r3, #9
 800572e:	d104      	bne.n	800573a <UI_GetReg+0x79a>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800573a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800573e:	0e1b      	lsrs	r3, r3, #24
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	2b09      	cmp	r3, #9
 8005746:	d104      	bne.n	8005752 <UI_GetReg+0x7b2>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005748:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (pSPD != MC_NULL)
 8005752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 81a7 	beq.w	8005aaa <UI_GetReg+0xb0a>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 800575c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005760:	f00a f904 	bl	800f96c <STO_PLL_GetEstimatedCurrent>
 8005764:	4603      	mov	r3, r0
 8005766:	633b      	str	r3, [r7, #48]	; 0x30
 8005768:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800576c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005770:	e19b      	b.n	8005aaa <UI_GetReg+0xb0a>

    case MC_PROTOCOL_REG_OBS_BEMF_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	7d1b      	ldrb	r3, [r3, #20]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800578a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800578e:	0f1b      	lsrs	r3, r3, #28
 8005790:	2b09      	cmp	r3, #9
 8005792:	d104      	bne.n	800579e <UI_GetReg+0x7fe>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800579e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a2:	0e1b      	lsrs	r3, r3, #24
 80057a4:	f003 030f 	and.w	r3, r3, #15
 80057a8:	2b09      	cmp	r3, #9
 80057aa:	d104      	bne.n	80057b6 <UI_GetReg+0x816>
      {
        pSPD =  pMCT->pSpeedSensorAux;
 80057ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (pSPD != MC_NULL)
 80057b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8177 	beq.w	8005aae <UI_GetReg+0xb0e>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 80057c0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80057c4:	f00a f8c6 	bl	800f954 <STO_PLL_GetEstimatedBemf>
 80057c8:	4603      	mov	r3, r0
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
 80057cc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80057d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80057d4:	e16b      	b.n	8005aae <UI_GetReg+0xb0e>

    case MC_PROTOCOL_REG_OBS_BEMF_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	7d1b      	ldrb	r3, [r3, #20]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80057ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057f2:	0f1b      	lsrs	r3, r3, #28
 80057f4:	2b09      	cmp	r3, #9
 80057f6:	d104      	bne.n	8005802 <UI_GetReg+0x862>
      {
       pSPD = pMCT->pSpeedSensorMain;
 80057f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005806:	0e1b      	lsrs	r3, r3, #24
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	2b09      	cmp	r3, #9
 800580e:	d104      	bne.n	800581a <UI_GetReg+0x87a>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005810:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (pSPD != MC_NULL)
 800581a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8147 	beq.w	8005ab2 <UI_GetReg+0xb12>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 8005824:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005828:	f00a f894 	bl	800f954 <STO_PLL_GetEstimatedBemf>
 800582c:	4603      	mov	r3, r0
 800582e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005830:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8005834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005838:	e13b      	b.n	8005ab2 <UI_GetReg+0xb12>

    case MC_PROTOCOL_REG_EST_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	7d1b      	ldrb	r3, [r3, #20]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005852:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005856:	0f1b      	lsrs	r3, r3, #28
 8005858:	2b09      	cmp	r3, #9
 800585a:	d104      	bne.n	8005866 <UI_GetReg+0x8c6>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800585c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005866:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800586a:	0e1b      	lsrs	r3, r3, #24
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2b09      	cmp	r3, #9
 8005872:	d104      	bne.n	800587e <UI_GetReg+0x8de>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (pSPD != MC_NULL)
 800587e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8117 	beq.w	8005ab6 <UI_GetReg+0xb16>
      {
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8005888:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800588c:	f00a f8b4 	bl	800f9f8 <STO_PLL_GetEstimatedBemfLevel>
 8005890:	4603      	mov	r3, r0
 8005892:	141b      	asrs	r3, r3, #16
 8005894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005898:	e10d      	b.n	8005ab6 <UI_GetReg+0xb16>

    case MC_PROTOCOL_REG_OBS_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	7d1b      	ldrb	r3, [r3, #20]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80058b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058b6:	0f1b      	lsrs	r3, r3, #28
 80058b8:	2b09      	cmp	r3, #9
 80058ba:	d104      	bne.n	80058c6 <UI_GetReg+0x926>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80058bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80058c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058ca:	0e1b      	lsrs	r3, r3, #24
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	2b09      	cmp	r3, #9
 80058d2:	d104      	bne.n	80058de <UI_GetReg+0x93e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80058d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (pSPD != MC_NULL)
 80058de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80e9 	beq.w	8005aba <UI_GetReg+0xb1a>
      {
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 80058e8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80058ec:	f00a f888 	bl	800fa00 <STO_PLL_GetObservedBemfLevel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	141b      	asrs	r3, r3, #16
 80058f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80058f8:	e0df      	b.n	8005aba <UI_GetReg+0xb1a>

    case MC_PROTOCOL_REG_MOTOR_POWER:
    {
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80058fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	4618      	mov	r0, r3
 8005902:	f005 fe0d 	bl	800b520 <MPM_GetAvrgElMotorPowerW>
 8005906:	4603      	mov	r3, r0
 8005908:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800590c:	e0d8      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MAX_APP_SPEED:
    {
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800590e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	4618      	mov	r0, r3
 8005916:	f008 fe26 	bl	800e566 <STC_GetMaxAppPositiveMecSpeedUnit>
 800591a:	4603      	mov	r3, r0
 800591c:	461a      	mov	r2, r3
 800591e:	4613      	mov	r3, r2
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4a69      	ldr	r2, [pc, #420]	; (8005acc <UI_GetReg+0xb2c>)
 8005928:	fb82 1203 	smull	r1, r2, r2, r3
 800592c:	1092      	asrs	r2, r2, #2
 800592e:	17db      	asrs	r3, r3, #31
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005936:	e0c3      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MIN_APP_SPEED:
    {
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8005938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	4618      	mov	r0, r3
 8005940:	f008 fe1d 	bl	800e57e <STC_GetMinAppNegativeMecSpeedUnit>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	4613      	mov	r3, r2
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	1a9b      	subs	r3, r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4a5e      	ldr	r2, [pc, #376]	; (8005acc <UI_GetReg+0xb2c>)
 8005952:	fb82 1203 	smull	r1, r2, r2, r3
 8005956:	1092      	asrs	r2, r2, #2
 8005958:	17db      	asrs	r3, r3, #31
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005960:	e0ae      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_MEAS:
    case MC_PROTOCOL_REG_I_Q:
    {
      bRetVal = MCI_GetIqd(pMCI).q;
 8005962:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005966:	f7fc f9a7 	bl	8001cb8 <MCI_GetIqd>
 800596a:	4603      	mov	r3, r0
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800596e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8005972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005976:	e0a3      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_MEAS:
    case MC_PROTOCOL_REG_I_D:
    {
      bRetVal = MCI_GetIqd(pMCI).d;
 8005978:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800597c:	f7fc f99c 	bl	8001cb8 <MCI_GetIqd>
 8005980:	4603      	mov	r3, r0
 8005982:	643b      	str	r3, [r7, #64]	; 0x40
 8005984:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8005988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800598c:	e098      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RUC_STAGE_NBR:
    {
      if (pMCT->pRevupCtrl)
 800598e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <UI_GetReg+0xa0c>
      {
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8005998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	4618      	mov	r0, r3
 80059a0:	f009 fd62 	bl	800f468 <RUC_GetNumberOfPhases>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 80059aa:	e089      	b.n	8005ac0 <UI_GetReg+0xb20>
        bRetVal = (uint32_t) 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 80059b2:	e085      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_A:
    {
      bRetVal = MCI_GetIab(pMCI).a;
 80059b4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059b8:	f7fc f94f 	bl	8001c5a <MCI_GetIab>
 80059bc:	4603      	mov	r3, r0
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
 80059c0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80059c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80059c8:	e07a      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_B:
    {
      bRetVal = MCI_GetIab(pMCI).b;
 80059ca:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059ce:	f7fc f944 	bl	8001c5a <MCI_GetIab>
 80059d2:	4603      	mov	r3, r0
 80059d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80059da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80059de:	e06f      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_ALPHA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80059e0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059e4:	f7fc f950 	bl	8001c88 <MCI_GetIalphabeta>
 80059e8:	4603      	mov	r3, r0
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80059f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80059f4:	e064      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_BETA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80059f6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80059fa:	f7fc f945 	bl	8001c88 <MCI_GetIalphabeta>
 80059fe:	4603      	mov	r3, r0
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50
 8005a02:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a0a:	e059      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_Q_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).q;
 8005a0c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a10:	f7fc f96a 	bl	8001ce8 <MCI_GetIqdref>
 8005a14:	4603      	mov	r3, r0
 8005a16:	657b      	str	r3, [r7, #84]	; 0x54
 8005a18:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8005a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a20:	e04e      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8005a22:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a26:	f7fc f95f 	bl	8001ce8 <MCI_GetIqdref>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a2e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8005a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a36:	e043      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_Q:
    {
      bRetVal = MCI_GetVqd(pMCI).q;
 8005a38:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a3c:	f7fc f96c 	bl	8001d18 <MCI_GetVqd>
 8005a40:	4603      	mov	r3, r0
 8005a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a44:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8005a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a4c:	e038      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_D:
    {
      bRetVal = MCI_GetVqd(pMCI).d;
 8005a4e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a52:	f7fc f961 	bl	8001d18 <MCI_GetVqd>
 8005a56:	4603      	mov	r3, r0
 8005a58:	663b      	str	r3, [r7, #96]	; 0x60
 8005a5a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8005a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a62:	e02d      	b.n	8005ac0 <UI_GetReg+0xb20>

   case MC_PROTOCOL_REG_V_ALPHA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8005a64:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a68:	f7fc f96e 	bl	8001d48 <MCI_GetValphabeta>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a70:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8005a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a78:	e022      	b.n	8005ac0 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_BETA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8005a7a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005a7e:	f7fc f963 	bl	8001d48 <MCI_GetValphabeta>
 8005a82:	4603      	mov	r3, r0
 8005a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a86:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8005a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005a8e:	e017      	b.n	8005ac0 <UI_GetReg+0xb20>

    default:
	{
      if ( success != (bool *) 0 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d013      	beq.n	8005abe <UI_GetReg+0xb1e>
      {
        *success = false;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 8005a9c:	e00f      	b.n	8005abe <UI_GetReg+0xb1e>
    break;
 8005a9e:	bf00      	nop
 8005aa0:	e00e      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005aa2:	bf00      	nop
 8005aa4:	e00c      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005aa6:	bf00      	nop
 8005aa8:	e00a      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005aaa:	bf00      	nop
 8005aac:	e008      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005aae:	bf00      	nop
 8005ab0:	e006      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005ab2:	bf00      	nop
 8005ab4:	e004      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005ab6:	bf00      	nop
 8005ab8:	e002      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005aba:	bf00      	nop
 8005abc:	e000      	b.n	8005ac0 <UI_GetReg+0xb20>
    break;
 8005abe:	bf00      	nop
  }
  return bRetVal;
 8005ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	37d8      	adds	r7, #216	; 0xd8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	66666667 	.word	0x66666667

08005ad0 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	7d1b      	ldrb	r3, [r3, #20]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60bb      	str	r3, [r7, #8]

  switch (bCmdID)
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	2b0d      	cmp	r3, #13
 8005af6:	d84b      	bhi.n	8005b90 <UI_ExecCmd+0xc0>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <UI_ExecCmd+0x30>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b39 	.word	0x08005b39
 8005b04:	08005b41 	.word	0x08005b41
 8005b08:	08005b49 	.word	0x08005b49
 8005b0c:	08005b97 	.word	0x08005b97
 8005b10:	08005b97 	.word	0x08005b97
 8005b14:	08005b5d 	.word	0x08005b5d
 8005b18:	08005b79 	.word	0x08005b79
 8005b1c:	08005b81 	.word	0x08005b81
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b91 	.word	0x08005b91
 8005b28:	08005b91 	.word	0x08005b91
 8005b2c:	08005b91 	.word	0x08005b91
 8005b30:	08005b91 	.word	0x08005b91
 8005b34:	08005b41 	.word	0x08005b41
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      /* Call MCI Start motor; */
      MCI_StartMotor(pMCI);
 8005b38:	68b8      	ldr	r0, [r7, #8]
 8005b3a:	f7fb ff46 	bl	80019ca <MCI_StartMotor>
    }
    break;
 8005b3e:	e02d      	b.n	8005b9c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      /* Call MCI Stop motor; */
      MCI_StopMotor(pMCI);
 8005b40:	68b8      	ldr	r0, [r7, #8]
 8005b42:	f7fb ff59 	bl	80019f8 <MCI_StopMotor>
    }
    break;
 8005b46:	e029      	b.n	8005b9c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f7fb ffe4 	bl	8001b16 <MCI_GetSTMState>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b06      	cmp	r3, #6
 8005b52:	d122      	bne.n	8005b9a <UI_ExecCmd+0xca>
      {
        MCI_StopRamp(pMCI);
 8005b54:	68b8      	ldr	r0, [r7, #8]
 8005b56:	f7fc f853 	bl	8001c00 <MCI_StopRamp>
      }
    }
    break;
 8005b5a:	e01e      	b.n	8005b9a <UI_ExecCmd+0xca>
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8005b5c:	68b8      	ldr	r0, [r7, #8]
 8005b5e:	f7fb ffda 	bl	8001b16 <MCI_GetSTMState>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d103      	bne.n	8005b70 <UI_ExecCmd+0xa0>
      {
        MCI_StartMotor(pMCI);
 8005b68:	68b8      	ldr	r0, [r7, #8]
 8005b6a:	f7fb ff2e 	bl	80019ca <MCI_StartMotor>
      else
      {
        MCI_StopMotor(pMCI);
      }
    }
    break;
 8005b6e:	e015      	b.n	8005b9c <UI_ExecCmd+0xcc>
        MCI_StopMotor(pMCI);
 8005b70:	68b8      	ldr	r0, [r7, #8]
 8005b72:	f7fb ff41 	bl	80019f8 <MCI_StopMotor>
    break;
 8005b76:	e011      	b.n	8005b9c <UI_ExecCmd+0xcc>
    }
    break;

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MCI_FaultAcknowledged(pMCI);
 8005b78:	68b8      	ldr	r0, [r7, #8]
 8005b7a:	f7fb ff4c 	bl	8001a16 <MCI_FaultAcknowledged>
    }
    break;
 8005b7e:	e00d      	b.n	8005b9c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_ENCODER_ALIGN:
    {
      MCI_EncoderAlign(pMCI);
 8005b80:	68b8      	ldr	r0, [r7, #8]
 8005b82:	f7fb ff56 	bl	8001a32 <MCI_EncoderAlign>
    }
    break;
 8005b86:	e009      	b.n	8005b9c <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_IQDREF_CLEAR:
    {
      MCI_Clear_Iqdref(pMCI);
 8005b88:	68b8      	ldr	r0, [r7, #8]
 8005b8a:	f7fc f917 	bl	8001dbc <MCI_Clear_Iqdref>
    }
    break;
 8005b8e:	e005      	b.n	8005b9c <UI_ExecCmd+0xcc>

  default:
    {
    retVal = false;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
	}
    break;
 8005b94:	e002      	b.n	8005b9c <UI_ExecCmd+0xcc>
    break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <UI_ExecCmd+0xcc>
    break;
 8005b9a:	bf00      	nop
  }
  return retVal;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop

08005ba8 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80fb      	strh	r3, [r7, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	7d1b      	ldrb	r3, [r3, #20]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <UI_ExecSpeedRamp+0x4c>)
 8005bd2:	fb82 1203 	smull	r1, r2, r2, r3
 8005bd6:	441a      	add	r2, r3
 8005bd8:	1152      	asrs	r2, r2, #5
 8005bda:	17db      	asrs	r3, r3, #31
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	4619      	mov	r1, r3
 8005be4:	6978      	ldr	r0, [r7, #20]
 8005be6:	f7fb fe9a 	bl	800191e <MCI_ExecSpeedRamp>
  return true;
 8005bea:	2301      	movs	r3, #1
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	88888889 	.word	0x88888889

08005bf8 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
 8005c04:	4613      	mov	r3, r2
 8005c06:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	7d1b      	ldrb	r3, [r3, #20]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8005c18:	883a      	ldrh	r2, [r7, #0]
 8005c1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f7fb fe99 	bl	8001958 <MCI_ExecTorqueRamp>
  return true;
 8005c26:	2301      	movs	r3, #1
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	72fb      	strb	r3, [r7, #11]
  bool hRetVal = true;
 8005c40:	2301      	movs	r3, #1
 8005c42:	75fb      	strb	r3, [r7, #23]

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	7d1b      	ldrb	r3, [r3, #20]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	613b      	str	r3, [r7, #16]
  if (pRevupCtrl)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01b      	beq.n	8005c94 <UI_GetRevupData+0x64>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8005c5c:	7afb      	ldrb	r3, [r7, #11]
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6938      	ldr	r0, [r7, #16]
 8005c62:	f009 fbeb 	bl	800f43c <RUC_GetPhaseDurationms>
 8005c66:	4603      	mov	r3, r0
 8005c68:	461a      	mov	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	801a      	strh	r2, [r3, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8005c6e:	7afb      	ldrb	r3, [r7, #11]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6938      	ldr	r0, [r7, #16]
 8005c74:	f009 fbe8 	bl	800f448 <RUC_GetPhaseFinalMecSpeedUnit>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	801a      	strh	r2, [r3, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005c80:	7afb      	ldrb	r3, [r7, #11]
 8005c82:	4619      	mov	r1, r3
 8005c84:	6938      	ldr	r0, [r7, #16]
 8005c86:	f009 fbe7 	bl	800f458 <RUC_GetPhaseFinalTorque>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	e001      	b.n	8005c98 <UI_GetRevupData+0x68>
  }
  else
  {
    hRetVal = false;
 8005c94:	2300      	movs	r3, #0
 8005c96:	75fb      	strb	r3, [r7, #23]
  }
  return hRetVal;
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	4608      	mov	r0, r1
 8005cac:	4611      	mov	r1, r2
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	72fb      	strb	r3, [r7, #11]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	813b      	strh	r3, [r7, #8]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	80fb      	strh	r3, [r7, #6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	7d1b      	ldrb	r3, [r3, #20]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	617b      	str	r3, [r7, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8005cce:	893a      	ldrh	r2, [r7, #8]
 8005cd0:	7afb      	ldrb	r3, [r7, #11]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6978      	ldr	r0, [r7, #20]
 8005cd6:	f009 fb9f 	bl	800f418 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8005cda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f009 fb9e 	bl	800f424 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8005ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005cec:	7afb      	ldrb	r3, [r7, #11]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6978      	ldr	r0, [r7, #20]
 8005cf2:	f009 fb9d 	bl	800f430 <RUC_SetPhaseFinalTorque>
  return true;
 8005cf6:	2301      	movs	r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	7d1b      	ldrb	r3, [r3, #20]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
  qd_t currComp;
  currComp.q = hIqRef;
 8005d20:	887b      	ldrh	r3, [r7, #2]
 8005d22:	813b      	strh	r3, [r7, #8]
  currComp.d = hIdRef;
 8005d24:	883b      	ldrh	r3, [r7, #0]
 8005d26:	817b      	strh	r3, [r7, #10]
  MCI_SetCurrentReferences(pMCI,currComp);
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7fb fe31 	bl	8001992 <MCI_SetCurrentReferences>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <UI_GetMPInfo>:
  * @param  pMPInfo: The returned list of register.
  *         It is populated by this function.
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
    return false;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d54:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <SystemInit+0x28>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	4a07      	ldr	r2, [pc, #28]	; (8005d78 <SystemInit+0x28>)
 8005d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <SystemInit+0x28>)
 8005d66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d6a:	609a      	str	r2, [r3, #8]
#endif
}
 8005d6c:	bf00      	nop
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	e000ed00 	.word	0xe000ed00

08005d7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d80:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <HAL_Init+0x28>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a07      	ldr	r2, [pc, #28]	; (8005da4 <HAL_Init+0x28>)
 8005d86:	f043 0310 	orr.w	r3, r3, #16
 8005d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d8c:	2003      	movs	r0, #3
 8005d8e:	f001 fc6d 	bl	800766c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d92:	2004      	movs	r0, #4
 8005d94:	f000 f808 	bl	8005da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d98:	f7fe fadc 	bl	8004354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40022000 	.word	0x40022000

08005da8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005db0:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <HAL_InitTick+0x54>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_InitTick+0x58>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fc85 	bl	80076d6 <HAL_SYSTICK_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e00e      	b.n	8005df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b0f      	cmp	r3, #15
 8005dda:	d80a      	bhi.n	8005df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ddc:	2200      	movs	r2, #0
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	f001 fc4d 	bl	8007682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005de8:	4a06      	ldr	r2, [pc, #24]	; (8005e04 <HAL_InitTick+0x5c>)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e000      	b.n	8005df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	200006d8 	.word	0x200006d8
 8005e00:	200006e0 	.word	0x200006e0
 8005e04:	200006dc 	.word	0x200006dc

08005e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_IncTick+0x20>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_IncTick+0x24>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4413      	add	r3, r2
 8005e18:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <HAL_IncTick+0x24>)
 8005e1a:	6013      	str	r3, [r2, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	200006e0 	.word	0x200006e0
 8005e2c:	20000bdc 	.word	0x20000bdc

08005e30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return uwTick;  
 8005e34:	4b03      	ldr	r3, [pc, #12]	; (8005e44 <HAL_GetTick+0x14>)
 8005e36:	681b      	ldr	r3, [r3, #0]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	20000bdc 	.word	0x20000bdc

08005e48 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e50:	f7ff ffee 	bl	8005e30 <HAL_GetTick>
 8005e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d005      	beq.n	8005e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e62:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_Delay+0x40>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005e6e:	bf00      	nop
 8005e70:	f7ff ffde 	bl	8005e30 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d8f7      	bhi.n	8005e70 <HAL_Delay+0x28>
  {
  }
}
 8005e80:	bf00      	nop
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	200006e0 	.word	0x200006e0

08005e8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b09a      	sub	sp, #104	; 0x68
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e1c9      	b.n	8006240 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d176      	bne.n	8005fac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d152      	bne.n	8005f6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fe fa5b 	bl	800439c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d13b      	bne.n	8005f6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f001 f90f 	bl	8007118 <ADC_Disable>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d12f      	bne.n	8005f6c <HAL_ADC_Init+0xe0>
 8005f0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d12b      	bne.n	8005f6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f1c:	f023 0302 	bic.w	r3, r3, #2
 8005f20:	f043 0202 	orr.w	r2, r3, #2
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005f48:	4b86      	ldr	r3, [pc, #536]	; (8006164 <HAL_ADC_Init+0x2d8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a86      	ldr	r2, [pc, #536]	; (8006168 <HAL_ADC_Init+0x2dc>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	0c9a      	lsrs	r2, r3, #18
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f5e:	e002      	b.n	8005f66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f9      	bne.n	8005f60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f88:	d110      	bne.n	8005fac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	f023 0312 	bic.w	r3, r3, #18
 8005f92:	f043 0210 	orr.w	r2, r3, #16
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 8136 	bne.w	8006226 <HAL_ADC_Init+0x39a>
 8005fba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 8131 	bne.w	8006226 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 8129 	bne.w	8006226 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005fdc:	f043 0202 	orr.w	r2, r3, #2
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fec:	d004      	beq.n	8005ff8 <HAL_ADC_Init+0x16c>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a5e      	ldr	r2, [pc, #376]	; (800616c <HAL_ADC_Init+0x2e0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d101      	bne.n	8005ffc <HAL_ADC_Init+0x170>
 8005ff8:	4b5d      	ldr	r3, [pc, #372]	; (8006170 <HAL_ADC_Init+0x2e4>)
 8005ffa:	e000      	b.n	8005ffe <HAL_ADC_Init+0x172>
 8005ffc:	4b5d      	ldr	r3, [pc, #372]	; (8006174 <HAL_ADC_Init+0x2e8>)
 8005ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006008:	d102      	bne.n	8006010 <HAL_ADC_Init+0x184>
 800600a:	4b58      	ldr	r3, [pc, #352]	; (800616c <HAL_ADC_Init+0x2e0>)
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e01a      	b.n	8006046 <HAL_ADC_Init+0x1ba>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a55      	ldr	r2, [pc, #340]	; (800616c <HAL_ADC_Init+0x2e0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d103      	bne.n	8006022 <HAL_ADC_Init+0x196>
 800601a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	e011      	b.n	8006046 <HAL_ADC_Init+0x1ba>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a54      	ldr	r2, [pc, #336]	; (8006178 <HAL_ADC_Init+0x2ec>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d102      	bne.n	8006032 <HAL_ADC_Init+0x1a6>
 800602c:	4b53      	ldr	r3, [pc, #332]	; (800617c <HAL_ADC_Init+0x2f0>)
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e009      	b.n	8006046 <HAL_ADC_Init+0x1ba>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a51      	ldr	r2, [pc, #324]	; (800617c <HAL_ADC_Init+0x2f0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d102      	bne.n	8006042 <HAL_ADC_Init+0x1b6>
 800603c:	4b4e      	ldr	r3, [pc, #312]	; (8006178 <HAL_ADC_Init+0x2ec>)
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e001      	b.n	8006046 <HAL_ADC_Init+0x1ba>
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d108      	bne.n	8006066 <HAL_ADC_Init+0x1da>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_ADC_Init+0x1da>
 8006062:	2301      	movs	r3, #1
 8006064:	e000      	b.n	8006068 <HAL_ADC_Init+0x1dc>
 8006066:	2300      	movs	r3, #0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d11c      	bne.n	80060a6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800606c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800606e:	2b00      	cmp	r3, #0
 8006070:	d010      	beq.n	8006094 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	2b01      	cmp	r3, #1
 800607c:	d107      	bne.n	800608e <HAL_ADC_Init+0x202>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b01      	cmp	r3, #1
 8006088:	d101      	bne.n	800608e <HAL_ADC_Init+0x202>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <HAL_ADC_Init+0x204>
 800608e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006090:	2b00      	cmp	r3, #0
 8006092:	d108      	bne.n	80060a6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8006094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	431a      	orrs	r2, r3
 80060a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7e5b      	ldrb	r3, [r3, #25]
 80060aa:	035b      	lsls	r3, r3, #13
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060b0:	2a01      	cmp	r2, #1
 80060b2:	d002      	beq.n	80060ba <HAL_ADC_Init+0x22e>
 80060b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060b8:	e000      	b.n	80060bc <HAL_ADC_Init+0x230>
 80060ba:	2200      	movs	r2, #0
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060cc:	4313      	orrs	r3, r2
 80060ce:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d11b      	bne.n	8006112 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	7e5b      	ldrb	r3, [r3, #25]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	3b01      	subs	r3, #1
 80060e8:	045a      	lsls	r2, r3, #17
 80060ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f2:	663b      	str	r3, [r7, #96]	; 0x60
 80060f4:	e00d      	b.n	8006112 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	f043 0201 	orr.w	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006116:	2b01      	cmp	r3, #1
 8006118:	d03a      	beq.n	8006190 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a16      	ldr	r2, [pc, #88]	; (8006178 <HAL_ADC_Init+0x2ec>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_ADC_Init+0x2a2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a14      	ldr	r2, [pc, #80]	; (800617c <HAL_ADC_Init+0x2f0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d128      	bne.n	8006180 <HAL_ADC_Init+0x2f4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8006136:	d012      	beq.n	800615e <HAL_ADC_Init+0x2d2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006140:	d00a      	beq.n	8006158 <HAL_ADC_Init+0x2cc>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800614a:	d002      	beq.n	8006152 <HAL_ADC_Init+0x2c6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	e018      	b.n	8006184 <HAL_ADC_Init+0x2f8>
 8006152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006156:	e015      	b.n	8006184 <HAL_ADC_Init+0x2f8>
 8006158:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800615c:	e012      	b.n	8006184 <HAL_ADC_Init+0x2f8>
 800615e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8006162:	e00f      	b.n	8006184 <HAL_ADC_Init+0x2f8>
 8006164:	200006d8 	.word	0x200006d8
 8006168:	431bde83 	.word	0x431bde83
 800616c:	50000100 	.word	0x50000100
 8006170:	50000300 	.word	0x50000300
 8006174:	50000700 	.word	0x50000700
 8006178:	50000400 	.word	0x50000400
 800617c:	50000500 	.word	0x50000500
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006188:	4313      	orrs	r3, r2
 800618a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800618c:	4313      	orrs	r3, r2
 800618e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b00      	cmp	r3, #0
 800619c:	d114      	bne.n	80061c8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6812      	ldr	r2, [r2, #0]
 80061a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ac:	f023 0302 	bic.w	r3, r3, #2
 80061b0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7e1b      	ldrb	r3, [r3, #24]
 80061b6:	039a      	lsls	r2, r3, #14
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4313      	orrs	r3, r2
 80061c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061c4:	4313      	orrs	r3, r2
 80061c6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <HAL_ADC_Init+0x3bc>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80061d8:	430b      	orrs	r3, r1
 80061da:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d10c      	bne.n	80061fe <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	f023 010f 	bic.w	r1, r3, #15
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	1e5a      	subs	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30
 80061fc:	e007      	b.n	800620e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 020f 	bic.w	r2, r2, #15
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	f023 0303 	bic.w	r3, r3, #3
 800621c:	f043 0201 	orr.w	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	641a      	str	r2, [r3, #64]	; 0x40
 8006224:	e00a      	b.n	800623c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f023 0312 	bic.w	r3, r3, #18
 800622e:	f043 0210 	orr.w	r2, r3, #16
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800623c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006240:	4618      	mov	r0, r3
 8006242:	3768      	adds	r7, #104	; 0x68
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	fff0c007 	.word	0xfff0c007

0800624c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800624c:	b480      	push	{r7}
 800624e:	b09b      	sub	sp, #108	; 0x6c
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006266:	2b01      	cmp	r3, #1
 8006268:	d101      	bne.n	800626e <HAL_ADC_ConfigChannel+0x22>
 800626a:	2302      	movs	r3, #2
 800626c:	e2cb      	b.n	8006806 <HAL_ADC_ConfigChannel+0x5ba>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	f040 82af 	bne.w	80067e4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b04      	cmp	r3, #4
 800628c:	d81c      	bhi.n	80062c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	4413      	add	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	461a      	mov	r2, r3
 80062a2:	231f      	movs	r3, #31
 80062a4:	4093      	lsls	r3, r2
 80062a6:	43db      	mvns	r3, r3
 80062a8:	4019      	ands	r1, r3
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	fa00 f203 	lsl.w	r2, r0, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
 80062c6:	e063      	b.n	8006390 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b09      	cmp	r3, #9
 80062ce:	d81e      	bhi.n	800630e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	3b1e      	subs	r3, #30
 80062e4:	221f      	movs	r2, #31
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	43db      	mvns	r3, r3
 80062ec:	4019      	ands	r1, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	3b1e      	subs	r3, #30
 8006300:	fa00 f203 	lsl.w	r2, r0, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	635a      	str	r2, [r3, #52]	; 0x34
 800630c:	e040      	b.n	8006390 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b0e      	cmp	r3, #14
 8006314:	d81e      	bhi.n	8006354 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	3b3c      	subs	r3, #60	; 0x3c
 800632a:	221f      	movs	r2, #31
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	4019      	ands	r1, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	4413      	add	r3, r2
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	3b3c      	subs	r3, #60	; 0x3c
 8006346:	fa00 f203 	lsl.w	r2, r0, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
 8006352:	e01d      	b.n	8006390 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	3b5a      	subs	r3, #90	; 0x5a
 8006368:	221f      	movs	r2, #31
 800636a:	fa02 f303 	lsl.w	r3, r2, r3
 800636e:	43db      	mvns	r3, r3
 8006370:	4019      	ands	r1, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	4613      	mov	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4413      	add	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	3b5a      	subs	r3, #90	; 0x5a
 8006384:	fa00 f203 	lsl.w	r2, r0, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 80e5 	bne.w	800656a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b09      	cmp	r3, #9
 80063a6:	d91c      	bls.n	80063e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6999      	ldr	r1, [r3, #24]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	3b1e      	subs	r3, #30
 80063ba:	2207      	movs	r2, #7
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	4019      	ands	r1, r3
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	6898      	ldr	r0, [r3, #8]
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	005b      	lsls	r3, r3, #1
 80063d0:	4413      	add	r3, r2
 80063d2:	3b1e      	subs	r3, #30
 80063d4:	fa00 f203 	lsl.w	r2, r0, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	619a      	str	r2, [r3, #24]
 80063e0:	e019      	b.n	8006416 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6959      	ldr	r1, [r3, #20]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	4413      	add	r3, r2
 80063f2:	2207      	movs	r2, #7
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	4019      	ands	r1, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6898      	ldr	r0, [r3, #8]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	4413      	add	r3, r2
 800640a:	fa00 f203 	lsl.w	r2, r0, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695a      	ldr	r2, [r3, #20]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	fa02 f303 	lsl.w	r3, r2, r3
 800642c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	3b01      	subs	r3, #1
 8006434:	2b03      	cmp	r3, #3
 8006436:	d84f      	bhi.n	80064d8 <HAL_ADC_ConfigChannel+0x28c>
 8006438:	a201      	add	r2, pc, #4	; (adr r2, 8006440 <HAL_ADC_ConfigChannel+0x1f4>)
 800643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643e:	bf00      	nop
 8006440:	08006451 	.word	0x08006451
 8006444:	08006473 	.word	0x08006473
 8006448:	08006495 	.word	0x08006495
 800644c:	080064b7 	.word	0x080064b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006456:	4b9f      	ldr	r3, [pc, #636]	; (80066d4 <HAL_ADC_ConfigChannel+0x488>)
 8006458:	4013      	ands	r3, r2
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	0691      	lsls	r1, r2, #26
 8006460:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006462:	430a      	orrs	r2, r1
 8006464:	431a      	orrs	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800646e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006470:	e07e      	b.n	8006570 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006478:	4b96      	ldr	r3, [pc, #600]	; (80066d4 <HAL_ADC_ConfigChannel+0x488>)
 800647a:	4013      	ands	r3, r2
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	0691      	lsls	r1, r2, #26
 8006482:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006484:	430a      	orrs	r2, r1
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006490:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006492:	e06d      	b.n	8006570 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800649a:	4b8e      	ldr	r3, [pc, #568]	; (80066d4 <HAL_ADC_ConfigChannel+0x488>)
 800649c:	4013      	ands	r3, r2
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	0691      	lsls	r1, r2, #26
 80064a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064a6:	430a      	orrs	r2, r1
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80064b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80064b4:	e05c      	b.n	8006570 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80064bc:	4b85      	ldr	r3, [pc, #532]	; (80066d4 <HAL_ADC_ConfigChannel+0x488>)
 80064be:	4013      	ands	r3, r2
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	0691      	lsls	r1, r2, #26
 80064c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064c8:	430a      	orrs	r2, r1
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80064d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80064d6:	e04b      	b.n	8006570 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	069b      	lsls	r3, r3, #26
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d107      	bne.n	80064fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	069b      	lsls	r3, r3, #26
 800650c:	429a      	cmp	r2, r3
 800650e:	d107      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800651e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006526:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	069b      	lsls	r3, r3, #26
 8006530:	429a      	cmp	r2, r3
 8006532:	d107      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006542:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800654a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	069b      	lsls	r3, r3, #26
 8006554:	429a      	cmp	r2, r3
 8006556:	d10a      	bne.n	800656e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006566:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8006568:	e001      	b.n	800656e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800656a:	bf00      	nop
 800656c:	e000      	b.n	8006570 <HAL_ADC_ConfigChannel+0x324>
      break;
 800656e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b01      	cmp	r3, #1
 800657c:	d108      	bne.n	8006590 <HAL_ADC_ConfigChannel+0x344>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_ADC_ConfigChannel+0x344>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_ADC_ConfigChannel+0x346>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	f040 8131 	bne.w	80067fa <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d00f      	beq.n	80065c0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2201      	movs	r2, #1
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43da      	mvns	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	400a      	ands	r2, r1
 80065ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80065be:	e049      	b.n	8006654 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2201      	movs	r2, #1
 80065ce:	409a      	lsls	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d91c      	bls.n	800661c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6999      	ldr	r1, [r3, #24]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4413      	add	r3, r2
 80065f2:	3b1b      	subs	r3, #27
 80065f4:	2207      	movs	r2, #7
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43db      	mvns	r3, r3
 80065fc:	4019      	ands	r1, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6898      	ldr	r0, [r3, #8]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	4413      	add	r3, r2
 800660c:	3b1b      	subs	r3, #27
 800660e:	fa00 f203 	lsl.w	r2, r0, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	619a      	str	r2, [r3, #24]
 800661a:	e01b      	b.n	8006654 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6959      	ldr	r1, [r3, #20]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	4613      	mov	r3, r2
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	4413      	add	r3, r2
 800662e:	2207      	movs	r2, #7
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	4019      	ands	r1, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6898      	ldr	r0, [r3, #8]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	4613      	mov	r3, r2
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	4413      	add	r3, r2
 8006648:	fa00 f203 	lsl.w	r2, r0, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800665c:	d004      	beq.n	8006668 <HAL_ADC_ConfigChannel+0x41c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <HAL_ADC_ConfigChannel+0x48c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_ADC_ConfigChannel+0x420>
 8006668:	4b1c      	ldr	r3, [pc, #112]	; (80066dc <HAL_ADC_ConfigChannel+0x490>)
 800666a:	e000      	b.n	800666e <HAL_ADC_ConfigChannel+0x422>
 800666c:	4b1c      	ldr	r3, [pc, #112]	; (80066e0 <HAL_ADC_ConfigChannel+0x494>)
 800666e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b10      	cmp	r3, #16
 8006676:	d105      	bne.n	8006684 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006688:	2b11      	cmp	r3, #17
 800668a:	d105      	bne.n	8006698 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800668c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800669c:	2b12      	cmp	r3, #18
 800669e:	f040 80ac 	bne.w	80067fa <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80066a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f040 80a5 	bne.w	80067fa <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066b8:	d102      	bne.n	80066c0 <HAL_ADC_ConfigChannel+0x474>
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_ADC_ConfigChannel+0x48c>)
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e023      	b.n	8006708 <HAL_ADC_ConfigChannel+0x4bc>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <HAL_ADC_ConfigChannel+0x48c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d10c      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x498>
 80066ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	e01a      	b.n	8006708 <HAL_ADC_ConfigChannel+0x4bc>
 80066d2:	bf00      	nop
 80066d4:	83fff000 	.word	0x83fff000
 80066d8:	50000100 	.word	0x50000100
 80066dc:	50000300 	.word	0x50000300
 80066e0:	50000700 	.word	0x50000700
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a4a      	ldr	r2, [pc, #296]	; (8006814 <HAL_ADC_ConfigChannel+0x5c8>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d102      	bne.n	80066f4 <HAL_ADC_ConfigChannel+0x4a8>
 80066ee:	4b4a      	ldr	r3, [pc, #296]	; (8006818 <HAL_ADC_ConfigChannel+0x5cc>)
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e009      	b.n	8006708 <HAL_ADC_ConfigChannel+0x4bc>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a47      	ldr	r2, [pc, #284]	; (8006818 <HAL_ADC_ConfigChannel+0x5cc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d102      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x4b8>
 80066fe:	4b45      	ldr	r3, [pc, #276]	; (8006814 <HAL_ADC_ConfigChannel+0x5c8>)
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e001      	b.n	8006708 <HAL_ADC_ConfigChannel+0x4bc>
 8006704:	2300      	movs	r3, #0
 8006706:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b01      	cmp	r3, #1
 8006714:	d108      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x4dc>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_ADC_ConfigChannel+0x4dc>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <HAL_ADC_ConfigChannel+0x4de>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d150      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800672e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006730:	2b00      	cmp	r3, #0
 8006732:	d010      	beq.n	8006756 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	2b01      	cmp	r3, #1
 800673e:	d107      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x504>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b01      	cmp	r3, #1
 800674a:	d101      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x504>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_ADC_ConfigChannel+0x506>
 8006750:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006752:	2b00      	cmp	r3, #0
 8006754:	d13c      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b10      	cmp	r3, #16
 800675c:	d11d      	bne.n	800679a <HAL_ADC_ConfigChannel+0x54e>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006766:	d118      	bne.n	800679a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006772:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006774:	4b29      	ldr	r3, [pc, #164]	; (800681c <HAL_ADC_ConfigChannel+0x5d0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a29      	ldr	r2, [pc, #164]	; (8006820 <HAL_ADC_ConfigChannel+0x5d4>)
 800677a:	fba2 2303 	umull	r2, r3, r2, r3
 800677e:	0c9a      	lsrs	r2, r3, #18
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800678a:	e002      	b.n	8006792 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	3b01      	subs	r3, #1
 8006790:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f9      	bne.n	800678c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006798:	e02e      	b.n	80067f8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b11      	cmp	r3, #17
 80067a0:	d10b      	bne.n	80067ba <HAL_ADC_ConfigChannel+0x56e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067aa:	d106      	bne.n	80067ba <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80067ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80067b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067b6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80067b8:	e01e      	b.n	80067f8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b12      	cmp	r3, #18
 80067c0:	d11a      	bne.n	80067f8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80067c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80067ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067cc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80067ce:	e013      	b.n	80067f8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80067e2:	e00a      	b.n	80067fa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80067f6:	e000      	b.n	80067fa <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80067f8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006802:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006806:	4618      	mov	r0, r3
 8006808:	376c      	adds	r7, #108	; 0x6c
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	50000400 	.word	0x50000400
 8006818:	50000500 	.word	0x50000500
 800681c:	200006d8 	.word	0x200006d8
 8006820:	431bde83 	.word	0x431bde83

08006824 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006824:	b480      	push	{r7}
 8006826:	b09d      	sub	sp, #116	; 0x74
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_ADCEx_InjectedConfigChannel+0x26>
 8006846:	2302      	movs	r3, #2
 8006848:	e365      	b.n	8006f16 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800685e:	2b01      	cmp	r3, #1
 8006860:	d151      	bne.n	8006906 <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d143      	bne.n	80068f2 <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d02b      	beq.n	80068ca <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	021a      	lsls	r2, r3, #8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4984      	ldr	r1, [pc, #528]	; (8006a90 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 800687e:	428b      	cmp	r3, r1
 8006880:	d004      	beq.n	800688c <HAL_ADCEx_InjectedConfigChannel+0x68>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4983      	ldr	r1, [pc, #524]	; (8006a94 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 8006888:	428b      	cmp	r3, r1
 800688a:	d114      	bne.n	80068b6 <HAL_ADCEx_InjectedConfigChannel+0x92>
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	2b08      	cmp	r3, #8
 8006892:	d00e      	beq.n	80068b2 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	2b14      	cmp	r3, #20
 800689a:	d008      	beq.n	80068ae <HAL_ADCEx_InjectedConfigChannel+0x8a>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	2b1c      	cmp	r3, #28
 80068a2:	d002      	beq.n	80068aa <HAL_ADCEx_InjectedConfigChannel+0x86>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	e007      	b.n	80068ba <HAL_ADCEx_InjectedConfigChannel+0x96>
 80068aa:	2310      	movs	r3, #16
 80068ac:	e005      	b.n	80068ba <HAL_ADCEx_InjectedConfigChannel+0x96>
 80068ae:	231c      	movs	r3, #28
 80068b0:	e003      	b.n	80068ba <HAL_ADCEx_InjectedConfigChannel+0x96>
 80068b2:	2334      	movs	r3, #52	; 0x34
 80068b4:	e001      	b.n	80068ba <HAL_ADCEx_InjectedConfigChannel+0x96>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	4313      	orrs	r3, r2
 80068c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068c4:	4313      	orrs	r3, r2
 80068c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c8:	e005      	b.n	80068d6 <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068d2:	4313      	orrs	r3, r2
 80068d4:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068dc:	4b6e      	ldr	r3, [pc, #440]	; (8006a98 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80068de:	4013      	ands	r3, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068e6:	430b      	orrs	r3, r1
 80068e8:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068ee:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80068f0:	e07f      	b.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006904:	e075      	b.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d140      	bne.n	8006990 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	699a      	ldr	r2, [r3, #24]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d02d      	beq.n	8006980 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	1e59      	subs	r1, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4857      	ldr	r0, [pc, #348]	; (8006a90 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8006934:	4283      	cmp	r3, r0
 8006936:	d004      	beq.n	8006942 <HAL_ADCEx_InjectedConfigChannel+0x11e>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4855      	ldr	r0, [pc, #340]	; (8006a94 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 800693e:	4283      	cmp	r3, r0
 8006940:	d114      	bne.n	800696c <HAL_ADCEx_InjectedConfigChannel+0x148>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	2b08      	cmp	r3, #8
 8006948:	d00e      	beq.n	8006968 <HAL_ADCEx_InjectedConfigChannel+0x144>
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	2b14      	cmp	r3, #20
 8006950:	d008      	beq.n	8006964 <HAL_ADCEx_InjectedConfigChannel+0x140>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	2b1c      	cmp	r3, #28
 8006958:	d002      	beq.n	8006960 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	e007      	b.n	8006970 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8006960:	2310      	movs	r3, #16
 8006962:	e005      	b.n	8006970 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8006964:	231c      	movs	r3, #28
 8006966:	e003      	b.n	8006970 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8006968:	2334      	movs	r3, #52	; 0x34
 800696a:	e001      	b.n	8006970 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	4319      	orrs	r1, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006976:	430b      	orrs	r3, r1
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	649a      	str	r2, [r3, #72]	; 0x48
 800697e:	e007      	b.n	8006990 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	3b01      	subs	r3, #1
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4413      	add	r3, r2
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	3302      	adds	r3, #2
 80069a2:	221f      	movs	r2, #31
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	43db      	mvns	r3, r3
 80069aa:	4019      	ands	r1, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	4413      	add	r3, r2
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	3302      	adds	r3, #2
 80069be:	fa00 f303 	lsl.w	r3, r0, r3
 80069c2:	ea41 0203 	orr.w	r2, r1, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069e2:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <HAL_ADCEx_InjectedConfigChannel+0x274>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6812      	ldr	r2, [r2, #0]
 80069ee:	430b      	orrs	r3, r1
 80069f0:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 0308 	and.w	r3, r3, #8
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d12d      	bne.n	8006a5c <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	7f5b      	ldrb	r3, [r3, #29]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d110      	bne.n	8006a2a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	7f9b      	ldrb	r3, [r3, #30]
 8006a16:	055a      	lsls	r2, r3, #21
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	7f1b      	ldrb	r3, [r3, #28]
 8006a1c:	051b      	lsls	r3, r3, #20
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	60da      	str	r2, [r3, #12]
 8006a28:	e018      	b.n	8006a5c <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	7f9b      	ldrb	r3, [r3, #30]
 8006a38:	055a      	lsls	r2, r3, #21
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	7f1b      	ldrb	r3, [r3, #28]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d108      	bne.n	8006a5c <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f043 0220 	orr.w	r2, r3, #32
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 030c 	and.w	r3, r3, #12
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 8111 	bne.w	8006c8e <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d113      	bne.n	8006a9c <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	7f5b      	ldrb	r3, [r3, #29]
 8006a82:	065a      	lsls	r2, r3, #25
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	60da      	str	r2, [r3, #12]
 8006a8c:	e01b      	b.n	8006ac6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8006a8e:	bf00      	nop
 8006a90:	50000400 	.word	0x50000400
 8006a94:	50000500 	.word	0x50000500
 8006a98:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006aaa:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	7f5b      	ldrb	r3, [r3, #29]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d108      	bne.n	8006ac6 <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	f043 0220 	orr.w	r2, r3, #32
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b09      	cmp	r3, #9
 8006acc:	d91c      	bls.n	8006b08 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6999      	ldr	r1, [r3, #24]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4413      	add	r3, r2
 8006ade:	3b1e      	subs	r3, #30
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae6:	43db      	mvns	r3, r3
 8006ae8:	4019      	ands	r1, r3
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6898      	ldr	r0, [r3, #8]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4613      	mov	r3, r2
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	4413      	add	r3, r2
 8006af8:	3b1e      	subs	r3, #30
 8006afa:	fa00 f203 	lsl.w	r2, r0, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	430a      	orrs	r2, r1
 8006b04:	619a      	str	r2, [r3, #24]
 8006b06:	e019      	b.n	8006b3c <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6959      	ldr	r1, [r3, #20]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	2207      	movs	r2, #7
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	4019      	ands	r1, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6898      	ldr	r0, [r3, #8]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	fa00 f203 	lsl.w	r2, r0, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	08db      	lsrs	r3, r3, #3
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d84e      	bhi.n	8006bfc <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8006b5e:	a201      	add	r2, pc, #4	; (adr r2, 8006b64 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8006b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b64:	08006b75 	.word	0x08006b75
 8006b68:	08006b97 	.word	0x08006b97
 8006b6c:	08006bb9 	.word	0x08006bb9
 8006b70:	08006bdb 	.word	0x08006bdb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b7a:	4b9f      	ldr	r3, [pc, #636]	; (8006df8 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	0691      	lsls	r1, r2, #26
 8006b84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006b86:	430a      	orrs	r2, r1
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006b92:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006b94:	e07e      	b.n	8006c94 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006b9c:	4b96      	ldr	r3, [pc, #600]	; (8006df8 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	0691      	lsls	r1, r2, #26
 8006ba6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006bb4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006bb6:	e06d      	b.n	8006c94 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006bbe:	4b8e      	ldr	r3, [pc, #568]	; (8006df8 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	0691      	lsls	r1, r2, #26
 8006bc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006bd6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006bd8:	e05c      	b.n	8006c94 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006be0:	4b85      	ldr	r3, [pc, #532]	; (8006df8 <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	0691      	lsls	r1, r2, #26
 8006bea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bec:	430a      	orrs	r2, r1
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006bf8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006bfa:	e04b      	b.n	8006c94 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	069b      	lsls	r3, r3, #26
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d107      	bne.n	8006c20 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006c1e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	069b      	lsls	r3, r3, #26
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d107      	bne.n	8006c44 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006c42:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	069b      	lsls	r3, r3, #26
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d107      	bne.n	8006c68 <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006c66:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	069b      	lsls	r3, r3, #26
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d10a      	bne.n	8006c92 <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006c8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8006c8c:	e001      	b.n	8006c92 <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8006c92:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d108      	bne.n	8006cb4 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_ADCEx_InjectedConfigChannel+0x492>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 8127 	bne.w	8006f0a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d00f      	beq.n	8006ce4 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd6:	43da      	mvns	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	400a      	ands	r2, r1
 8006cde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006ce2:	e049      	b.n	8006d78 <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b09      	cmp	r3, #9
 8006d04:	d91c      	bls.n	8006d40 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6999      	ldr	r1, [r3, #24]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	4413      	add	r3, r2
 8006d16:	3b1b      	subs	r3, #27
 8006d18:	2207      	movs	r2, #7
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	4019      	ands	r1, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6898      	ldr	r0, [r3, #8]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	3b1b      	subs	r3, #27
 8006d32:	fa00 f203 	lsl.w	r2, r0, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	619a      	str	r2, [r3, #24]
 8006d3e:	e01b      	b.n	8006d78 <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6959      	ldr	r1, [r3, #20]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	4413      	add	r3, r2
 8006d52:	2207      	movs	r2, #7
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	4019      	ands	r1, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	6898      	ldr	r0, [r3, #8]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	4613      	mov	r3, r2
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4413      	add	r3, r2
 8006d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d80:	d004      	beq.n	8006d8c <HAL_ADCEx_InjectedConfigChannel+0x568>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1d      	ldr	r2, [pc, #116]	; (8006dfc <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d101      	bne.n	8006d90 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <HAL_ADCEx_InjectedConfigChannel+0x5dc>)
 8006d8e:	e000      	b.n	8006d92 <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8006d90:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <HAL_ADCEx_InjectedConfigChannel+0x5e0>)
 8006d92:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d105      	bne.n	8006da8 <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d015      	beq.n	8006dd4 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006dac:	2b11      	cmp	r3, #17
 8006dae:	d105      	bne.n	8006dbc <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006dc0:	2b12      	cmp	r3, #18
 8006dc2:	f040 80a2 	bne.w	8006f0a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f040 809b 	bne.w	8006f0a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ddc:	d102      	bne.n	8006de4 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	e023      	b.n	8006e2c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a04      	ldr	r2, [pc, #16]	; (8006dfc <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8006dee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	e01a      	b.n	8006e2c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006df6:	bf00      	nop
 8006df8:	83fff000 	.word	0x83fff000
 8006dfc:	50000100 	.word	0x50000100
 8006e00:	50000300 	.word	0x50000300
 8006e04:	50000700 	.word	0x50000700
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a45      	ldr	r2, [pc, #276]	; (8006f24 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d102      	bne.n	8006e18 <HAL_ADCEx_InjectedConfigChannel+0x5f4>
 8006e12:	4b45      	ldr	r3, [pc, #276]	; (8006f28 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	e009      	b.n	8006e2c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a42      	ldr	r2, [pc, #264]	; (8006f28 <HAL_ADCEx_InjectedConfigChannel+0x704>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d102      	bne.n	8006e28 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8006e22:	4b40      	ldr	r3, [pc, #256]	; (8006f24 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	e001      	b.n	8006e2c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d108      	bne.n	8006e4c <HAL_ADCEx_InjectedConfigChannel+0x628>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_ADCEx_InjectedConfigChannel+0x628>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <HAL_ADCEx_InjectedConfigChannel+0x62a>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d150      	bne.n	8006ef4 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006e52:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d010      	beq.n	8006e7a <HAL_ADCEx_InjectedConfigChannel+0x656>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0303 	and.w	r3, r3, #3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d107      	bne.n	8006e74 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <HAL_ADCEx_InjectedConfigChannel+0x652>
 8006e74:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d13c      	bne.n	8006ef4 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d11d      	bne.n	8006ebe <HAL_ADCEx_InjectedConfigChannel+0x69a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e8a:	d118      	bne.n	8006ebe <HAL_ADCEx_InjectedConfigChannel+0x69a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e96:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e98:	4b24      	ldr	r3, [pc, #144]	; (8006f2c <HAL_ADCEx_InjectedConfigChannel+0x708>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a24      	ldr	r2, [pc, #144]	; (8006f30 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8006e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea2:	0c9a      	lsrs	r2, r3, #18
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8006eae:	e002      	b.n	8006eb6 <HAL_ADCEx_InjectedConfigChannel+0x692>
          {
            wait_loop_index--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f9      	bne.n	8006eb0 <HAL_ADCEx_InjectedConfigChannel+0x68c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006ebc:	e024      	b.n	8006f08 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b11      	cmp	r3, #17
 8006ec4:	d10b      	bne.n	8006ede <HAL_ADCEx_InjectedConfigChannel+0x6ba>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ece:	d106      	bne.n	8006ede <HAL_ADCEx_InjectedConfigChannel+0x6ba>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006eda:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006edc:	e014      	b.n	8006f08 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b12      	cmp	r3, #18
 8006ee4:	d110      	bne.n	8006f08 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef0:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006ef2:	e009      	b.n	8006f08 <HAL_ADCEx_InjectedConfigChannel+0x6e4>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	f043 0220 	orr.w	r2, r3, #32
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006f06:	e000      	b.n	8006f0a <HAL_ADCEx_InjectedConfigChannel+0x6e6>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006f08:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006f12:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3774      	adds	r7, #116	; 0x74
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	50000400 	.word	0x50000400
 8006f28:	50000500 	.word	0x50000500
 8006f2c:	200006d8 	.word	0x200006d8
 8006f30:	431bde83 	.word	0x431bde83

08006f34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b099      	sub	sp, #100	; 0x64
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f4c:	d102      	bne.n	8006f54 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006f4e:	4b6d      	ldr	r3, [pc, #436]	; (8007104 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006f50:	60bb      	str	r3, [r7, #8]
 8006f52:	e01a      	b.n	8006f8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a6a      	ldr	r2, [pc, #424]	; (8007104 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d103      	bne.n	8006f66 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006f5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006f62:	60bb      	str	r3, [r7, #8]
 8006f64:	e011      	b.n	8006f8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a67      	ldr	r2, [pc, #412]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d102      	bne.n	8006f76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f70:	4b66      	ldr	r3, [pc, #408]	; (800710c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006f72:	60bb      	str	r3, [r7, #8]
 8006f74:	e009      	b.n	8006f8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a64      	ldr	r2, [pc, #400]	; (800710c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d102      	bne.n	8006f86 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006f80:	4b61      	ldr	r3, [pc, #388]	; (8007108 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006f82:	60bb      	str	r3, [r7, #8]
 8006f84:	e001      	b.n	8006f8a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0b0      	b.n	80070f6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e0a9      	b.n	80070f6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 808d 	bne.w	80070d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0304 	and.w	r3, r3, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 8086 	bne.w	80070d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006fd0:	d004      	beq.n	8006fdc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a4b      	ldr	r2, [pc, #300]	; (8007104 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d101      	bne.n	8006fe0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006fdc:	4b4c      	ldr	r3, [pc, #304]	; (8007110 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006fde:	e000      	b.n	8006fe2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006fe0:	4b4c      	ldr	r3, [pc, #304]	; (8007114 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006fe2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d040      	beq.n	800706e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006fec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	6859      	ldr	r1, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ffe:	035b      	lsls	r3, r3, #13
 8007000:	430b      	orrs	r3, r1
 8007002:	431a      	orrs	r2, r3
 8007004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007006:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d108      	bne.n	8007028 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8007024:	2301      	movs	r3, #1
 8007026:	e000      	b.n	800702a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8007028:	2300      	movs	r3, #0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d15c      	bne.n	80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	2b01      	cmp	r3, #1
 8007038:	d107      	bne.n	800704a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800704a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800704c:	2b00      	cmp	r3, #0
 800704e:	d14b      	bne.n	80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8007050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007058:	f023 030f 	bic.w	r3, r3, #15
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	6811      	ldr	r1, [r2, #0]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	6892      	ldr	r2, [r2, #8]
 8007064:	430a      	orrs	r2, r1
 8007066:	431a      	orrs	r2, r3
 8007068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800706a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800706c:	e03c      	b.n	80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800706e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007078:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	2b01      	cmp	r3, #1
 8007086:	d108      	bne.n	800709a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800709a:	2300      	movs	r3, #0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d123      	bne.n	80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d107      	bne.n	80070bc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80070bc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d112      	bne.n	80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80070c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80070ca:	f023 030f 	bic.w	r3, r3, #15
 80070ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070d0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80070d2:	e009      	b.n	80070e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f043 0220 	orr.w	r2, r3, #32
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80070e6:	e000      	b.n	80070ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80070e8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80070f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80070f6:	4618      	mov	r0, r3
 80070f8:	3764      	adds	r7, #100	; 0x64
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	50000100 	.word	0x50000100
 8007108:	50000400 	.word	0x50000400
 800710c:	50000500 	.word	0x50000500
 8007110:	50000300 	.word	0x50000300
 8007114:	50000700 	.word	0x50000700

08007118 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	2b01      	cmp	r3, #1
 8007130:	d108      	bne.n	8007144 <ADC_Disable+0x2c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <ADC_Disable+0x2c>
 8007140:	2301      	movs	r3, #1
 8007142:	e000      	b.n	8007146 <ADC_Disable+0x2e>
 8007144:	2300      	movs	r3, #0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d040      	beq.n	80071cc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 030d 	and.w	r3, r3, #13
 8007154:	2b01      	cmp	r3, #1
 8007156:	d10f      	bne.n	8007178 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0202 	orr.w	r2, r2, #2
 8007166:	609a      	str	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2203      	movs	r2, #3
 800716e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8007170:	f7fe fe5e 	bl	8005e30 <HAL_GetTick>
 8007174:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007176:	e022      	b.n	80071be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	f043 0210 	orr.w	r2, r3, #16
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	f043 0201 	orr.w	r2, r3, #1
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e01c      	b.n	80071ce <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007194:	f7fe fe4c 	bl	8005e30 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d90d      	bls.n	80071be <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f043 0210 	orr.w	r2, r3, #16
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	f043 0201 	orr.w	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e007      	b.n	80071ce <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d0e3      	beq.n	8007194 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0ed      	b.n	80073c4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fd f93d 	bl	8004474 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0202 	bic.w	r2, r2, #2
 8007208:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800720a:	f7fe fe11 	bl	8005e30 <HAL_GetTick>
 800720e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007210:	e012      	b.n	8007238 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007212:	f7fe fe0d 	bl	8005e30 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b0a      	cmp	r3, #10
 800721e:	d90b      	bls.n	8007238 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2205      	movs	r2, #5
 8007230:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e0c5      	b.n	80073c4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e5      	bne.n	8007212 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007256:	f7fe fdeb 	bl	8005e30 <HAL_GetTick>
 800725a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800725c:	e012      	b.n	8007284 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800725e:	f7fe fde7 	bl	8005e30 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b0a      	cmp	r3, #10
 800726a:	d90b      	bls.n	8007284 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2205      	movs	r2, #5
 800727c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e09f      	b.n	80073c4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0e5      	beq.n	800725e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7e1b      	ldrb	r3, [r3, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d108      	bne.n	80072ac <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e007      	b.n	80072bc <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	7e5b      	ldrb	r3, [r3, #25]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d108      	bne.n	80072d6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	e007      	b.n	80072e6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7e9b      	ldrb	r3, [r3, #26]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d108      	bne.n	8007300 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0220 	orr.w	r2, r2, #32
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e007      	b.n	8007310 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0220 	bic.w	r2, r2, #32
 800730e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7edb      	ldrb	r3, [r3, #27]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d108      	bne.n	800732a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0210 	bic.w	r2, r2, #16
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e007      	b.n	800733a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f042 0210 	orr.w	r2, r2, #16
 8007338:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7f1b      	ldrb	r3, [r3, #28]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d108      	bne.n	8007354 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0208 	orr.w	r2, r2, #8
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e007      	b.n	8007364 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0208 	bic.w	r2, r2, #8
 8007362:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	7f5b      	ldrb	r3, [r3, #29]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d108      	bne.n	800737e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0204 	orr.w	r2, r2, #4
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e007      	b.n	800738e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0204 	bic.w	r2, r2, #4
 800738c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	ea42 0103 	orr.w	r1, r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	1e5a      	subs	r2, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_COMP_Init+0x22>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
 80073f2:	e064      	b.n	80074be <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073f4:	4b34      	ldr	r3, [pc, #208]	; (80074c8 <HAL_COMP_Init+0xfc>)
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	4a33      	ldr	r2, [pc, #204]	; (80074c8 <HAL_COMP_Init+0xfc>)
 80073fa:	f043 0301 	orr.w	r3, r3, #1
 80073fe:	6193      	str	r3, [r2, #24]
 8007400:	4b31      	ldr	r3, [pc, #196]	; (80074c8 <HAL_COMP_Init+0xfc>)
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fd f875 	bl	80044fc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d103      	bne.n	8007426 <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 020c 	bic.w	r2, r3, #12
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	4313      	orrs	r3, r2
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40021000 	.word	0x40021000

080074cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80074dc:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <__NVIC_SetPriorityGrouping+0x44>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80074e8:	4013      	ands	r3, r2
 80074ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80074f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80074f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80074fe:	4a04      	ldr	r2, [pc, #16]	; (8007510 <__NVIC_SetPriorityGrouping+0x44>)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	60d3      	str	r3, [r2, #12]
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	e000ed00 	.word	0xe000ed00

08007514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <__NVIC_GetPriorityGrouping+0x18>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	0a1b      	lsrs	r3, r3, #8
 800751e:	f003 0307 	and.w	r3, r3, #7
}
 8007522:	4618      	mov	r0, r3
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	e000ed00 	.word	0xe000ed00

08007530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800753a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800753e:	2b00      	cmp	r3, #0
 8007540:	db0b      	blt.n	800755a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	f003 021f 	and.w	r2, r3, #31
 8007548:	4907      	ldr	r1, [pc, #28]	; (8007568 <__NVIC_EnableIRQ+0x38>)
 800754a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	2001      	movs	r0, #1
 8007552:	fa00 f202 	lsl.w	r2, r0, r2
 8007556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	e000e100 	.word	0xe000e100

0800756c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	4603      	mov	r3, r0
 8007574:	6039      	str	r1, [r7, #0]
 8007576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800757c:	2b00      	cmp	r3, #0
 800757e:	db0a      	blt.n	8007596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	b2da      	uxtb	r2, r3
 8007584:	490c      	ldr	r1, [pc, #48]	; (80075b8 <__NVIC_SetPriority+0x4c>)
 8007586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800758a:	0112      	lsls	r2, r2, #4
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	440b      	add	r3, r1
 8007590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007594:	e00a      	b.n	80075ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	b2da      	uxtb	r2, r3
 800759a:	4908      	ldr	r1, [pc, #32]	; (80075bc <__NVIC_SetPriority+0x50>)
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	3b04      	subs	r3, #4
 80075a4:	0112      	lsls	r2, r2, #4
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	440b      	add	r3, r1
 80075aa:	761a      	strb	r2, [r3, #24]
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	e000e100 	.word	0xe000e100
 80075bc:	e000ed00 	.word	0xe000ed00

080075c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b089      	sub	sp, #36	; 0x24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f1c3 0307 	rsb	r3, r3, #7
 80075da:	2b04      	cmp	r3, #4
 80075dc:	bf28      	it	cs
 80075de:	2304      	movcs	r3, #4
 80075e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	3304      	adds	r3, #4
 80075e6:	2b06      	cmp	r3, #6
 80075e8:	d902      	bls.n	80075f0 <NVIC_EncodePriority+0x30>
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	3b03      	subs	r3, #3
 80075ee:	e000      	b.n	80075f2 <NVIC_EncodePriority+0x32>
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43da      	mvns	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	401a      	ands	r2, r3
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007608:	f04f 31ff 	mov.w	r1, #4294967295
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	fa01 f303 	lsl.w	r3, r1, r3
 8007612:	43d9      	mvns	r1, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007618:	4313      	orrs	r3, r2
         );
}
 800761a:	4618      	mov	r0, r3
 800761c:	3724      	adds	r7, #36	; 0x24
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3b01      	subs	r3, #1
 8007634:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007638:	d301      	bcc.n	800763e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800763a:	2301      	movs	r3, #1
 800763c:	e00f      	b.n	800765e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <SysTick_Config+0x40>)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3b01      	subs	r3, #1
 8007644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007646:	210f      	movs	r1, #15
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	f7ff ff8e 	bl	800756c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <SysTick_Config+0x40>)
 8007652:	2200      	movs	r2, #0
 8007654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007656:	4b04      	ldr	r3, [pc, #16]	; (8007668 <SysTick_Config+0x40>)
 8007658:	2207      	movs	r2, #7
 800765a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	e000e010 	.word	0xe000e010

0800766c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff ff29 	bl	80074cc <__NVIC_SetPriorityGrouping>
}
 800767a:	bf00      	nop
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	4603      	mov	r3, r0
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007690:	2300      	movs	r3, #0
 8007692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007694:	f7ff ff3e 	bl	8007514 <__NVIC_GetPriorityGrouping>
 8007698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	6978      	ldr	r0, [r7, #20]
 80076a0:	f7ff ff8e 	bl	80075c0 <NVIC_EncodePriority>
 80076a4:	4602      	mov	r2, r0
 80076a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7ff ff5d 	bl	800756c <__NVIC_SetPriority>
}
 80076b2:	bf00      	nop
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	4603      	mov	r3, r0
 80076c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80076c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c8:	4618      	mov	r0, r3
 80076ca:	f7ff ff31 	bl	8007530 <__NVIC_EnableIRQ>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7ff ffa2 	bl	8007628 <SysTick_Config>
 80076e4:	4603      	mov	r3, r0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80076f2:	f000 f802 	bl	80076fa <HAL_SYSTICK_Callback>
}
 80076f6:	bf00      	nop
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80076fa:	b480      	push	{r7}
 80076fc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80076fe:	bf00      	nop
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e014      	b.n	8007744 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fc ff5c 	bl	80045e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	795b      	ldrb	r3, [r3, #5]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_DAC_ConfigChannel+0x20>
 8007768:	2302      	movs	r3, #2
 800776a:	e036      	b.n	80077da <HAL_DAC_ConfigChannel+0x8e>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2202      	movs	r2, #2
 8007776:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8007780:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	fa02 f303 	lsl.w	r3, r2, r3
 800778a:	43db      	mvns	r3, r3
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4013      	ands	r3, r2
 8007790:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6819      	ldr	r1, [r3, #0]
 80077ba:	22c0      	movs	r2, #192	; 0xc0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	43da      	mvns	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	400a      	ands	r2, r1
 80077ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
	...

080077e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80077f2:	2300      	movs	r3, #0
 80077f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077f6:	e154      	b.n	8007aa2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	2101      	movs	r1, #1
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	4013      	ands	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8146 	beq.w	8007a9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d003      	beq.n	8007820 <HAL_GPIO_Init+0x38>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b12      	cmp	r3, #18
 800781e:	d123      	bne.n	8007868 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	08da      	lsrs	r2, r3, #3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3208      	adds	r2, #8
 8007828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	220f      	movs	r2, #15
 8007838:	fa02 f303 	lsl.w	r3, r2, r3
 800783c:	43db      	mvns	r3, r3
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4013      	ands	r3, r2
 8007842:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	08da      	lsrs	r2, r3, #3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3208      	adds	r2, #8
 8007862:	6939      	ldr	r1, [r7, #16]
 8007864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	2203      	movs	r2, #3
 8007874:	fa02 f303 	lsl.w	r3, r2, r3
 8007878:	43db      	mvns	r3, r3
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4013      	ands	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f003 0203 	and.w	r2, r3, #3
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	fa02 f303 	lsl.w	r3, r2, r3
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d00b      	beq.n	80078bc <HAL_GPIO_Init+0xd4>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d007      	beq.n	80078bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80078b0:	2b11      	cmp	r3, #17
 80078b2:	d003      	beq.n	80078bc <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	2b12      	cmp	r3, #18
 80078ba:	d130      	bne.n	800791e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	2203      	movs	r2, #3
 80078c8:	fa02 f303 	lsl.w	r3, r2, r3
 80078cc:	43db      	mvns	r3, r3
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	4013      	ands	r3, r2
 80078d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68da      	ldr	r2, [r3, #12]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80078f2:	2201      	movs	r2, #1
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	fa02 f303 	lsl.w	r3, r2, r3
 80078fa:	43db      	mvns	r3, r3
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4013      	ands	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	091b      	lsrs	r3, r3, #4
 8007908:	f003 0201 	and.w	r2, r3, #1
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	2203      	movs	r2, #3
 800792a:	fa02 f303 	lsl.w	r3, r2, r3
 800792e:	43db      	mvns	r3, r3
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4013      	ands	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	fa02 f303 	lsl.w	r3, r2, r3
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80a0 	beq.w	8007a9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800795c:	4b58      	ldr	r3, [pc, #352]	; (8007ac0 <HAL_GPIO_Init+0x2d8>)
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	4a57      	ldr	r2, [pc, #348]	; (8007ac0 <HAL_GPIO_Init+0x2d8>)
 8007962:	f043 0301 	orr.w	r3, r3, #1
 8007966:	6193      	str	r3, [r2, #24]
 8007968:	4b55      	ldr	r3, [pc, #340]	; (8007ac0 <HAL_GPIO_Init+0x2d8>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	60bb      	str	r3, [r7, #8]
 8007972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007974:	4a53      	ldr	r2, [pc, #332]	; (8007ac4 <HAL_GPIO_Init+0x2dc>)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	089b      	lsrs	r3, r3, #2
 800797a:	3302      	adds	r3, #2
 800797c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	220f      	movs	r2, #15
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	43db      	mvns	r3, r3
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	4013      	ands	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800799e:	d019      	beq.n	80079d4 <HAL_GPIO_Init+0x1ec>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a49      	ldr	r2, [pc, #292]	; (8007ac8 <HAL_GPIO_Init+0x2e0>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d013      	beq.n	80079d0 <HAL_GPIO_Init+0x1e8>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a48      	ldr	r2, [pc, #288]	; (8007acc <HAL_GPIO_Init+0x2e4>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00d      	beq.n	80079cc <HAL_GPIO_Init+0x1e4>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a47      	ldr	r2, [pc, #284]	; (8007ad0 <HAL_GPIO_Init+0x2e8>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d007      	beq.n	80079c8 <HAL_GPIO_Init+0x1e0>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a46      	ldr	r2, [pc, #280]	; (8007ad4 <HAL_GPIO_Init+0x2ec>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d101      	bne.n	80079c4 <HAL_GPIO_Init+0x1dc>
 80079c0:	2304      	movs	r3, #4
 80079c2:	e008      	b.n	80079d6 <HAL_GPIO_Init+0x1ee>
 80079c4:	2305      	movs	r3, #5
 80079c6:	e006      	b.n	80079d6 <HAL_GPIO_Init+0x1ee>
 80079c8:	2303      	movs	r3, #3
 80079ca:	e004      	b.n	80079d6 <HAL_GPIO_Init+0x1ee>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e002      	b.n	80079d6 <HAL_GPIO_Init+0x1ee>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <HAL_GPIO_Init+0x1ee>
 80079d4:	2300      	movs	r3, #0
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	f002 0203 	and.w	r2, r2, #3
 80079dc:	0092      	lsls	r2, r2, #2
 80079de:	4093      	lsls	r3, r2
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80079e6:	4937      	ldr	r1, [pc, #220]	; (8007ac4 <HAL_GPIO_Init+0x2dc>)
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	3302      	adds	r3, #2
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80079f4:	4b38      	ldr	r3, [pc, #224]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	43db      	mvns	r3, r3
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4013      	ands	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007a18:	4a2f      	ldr	r2, [pc, #188]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007a1e:	4b2e      	ldr	r3, [pc, #184]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	43db      	mvns	r3, r3
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007a42:	4a25      	ldr	r2, [pc, #148]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a48:	4b23      	ldr	r3, [pc, #140]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	4013      	ands	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007a6c:	4a1a      	ldr	r2, [pc, #104]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a72:	4b19      	ldr	r3, [pc, #100]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007a96:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <HAL_GPIO_Init+0x2f0>)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f47f aea3 	bne.w	80077f8 <HAL_GPIO_Init+0x10>
  }
}
 8007ab2:	bf00      	nop
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	40021000 	.word	0x40021000
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	48000400 	.word	0x48000400
 8007acc:	48000800 	.word	0x48000800
 8007ad0:	48000c00 	.word	0x48000c00
 8007ad4:	48001000 	.word	0x48001000
 8007ad8:	40010400 	.word	0x40010400

08007adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	807b      	strh	r3, [r7, #2]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007aec:	787b      	ldrb	r3, [r7, #1]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007af2:	887a      	ldrh	r2, [r7, #2]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007af8:	e002      	b.n	8007b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b18:	1d3b      	adds	r3, r7, #4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f000 bef4 	b.w	800890e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b26:	1d3b      	adds	r3, r7, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 816a 	beq.w	8007e0a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007b36:	4bb3      	ldr	r3, [pc, #716]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f003 030c 	and.w	r3, r3, #12
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d00c      	beq.n	8007b5c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007b42:	4bb0      	ldr	r3, [pc, #704]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f003 030c 	and.w	r3, r3, #12
 8007b4a:	2b08      	cmp	r3, #8
 8007b4c:	d159      	bne.n	8007c02 <HAL_RCC_OscConfig+0xf6>
 8007b4e:	4bad      	ldr	r3, [pc, #692]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5a:	d152      	bne.n	8007c02 <HAL_RCC_OscConfig+0xf6>
 8007b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b64:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007b68:	fa93 f3a3 	rbit	r3, r3
 8007b6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8007b70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b74:	fab3 f383 	clz	r3, r3
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d102      	bne.n	8007b8e <HAL_RCC_OscConfig+0x82>
 8007b88:	4b9e      	ldr	r3, [pc, #632]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	e015      	b.n	8007bba <HAL_RCC_OscConfig+0xae>
 8007b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b92:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b96:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007b9a:	fa93 f3a3 	rbit	r3, r3
 8007b9e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ba6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007baa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007bae:	fa93 f3a3 	rbit	r3, r3
 8007bb2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007bb6:	4b93      	ldr	r3, [pc, #588]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bbe:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007bc2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007bc6:	fa92 f2a2 	rbit	r2, r2
 8007bca:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007bce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007bd2:	fab2 f282 	clz	r2, r2
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	f042 0220 	orr.w	r2, r2, #32
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	f002 021f 	and.w	r2, r2, #31
 8007be2:	2101      	movs	r1, #1
 8007be4:	fa01 f202 	lsl.w	r2, r1, r2
 8007be8:	4013      	ands	r3, r2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 810c 	beq.w	8007e08 <HAL_RCC_OscConfig+0x2fc>
 8007bf0:	1d3b      	adds	r3, r7, #4
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f040 8106 	bne.w	8007e08 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f000 be86 	b.w	800890e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c02:	1d3b      	adds	r3, r7, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0c:	d106      	bne.n	8007c1c <HAL_RCC_OscConfig+0x110>
 8007c0e:	4b7d      	ldr	r3, [pc, #500]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a7c      	ldr	r2, [pc, #496]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e030      	b.n	8007c7e <HAL_RCC_OscConfig+0x172>
 8007c1c:	1d3b      	adds	r3, r7, #4
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10c      	bne.n	8007c40 <HAL_RCC_OscConfig+0x134>
 8007c26:	4b77      	ldr	r3, [pc, #476]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a76      	ldr	r2, [pc, #472]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4b74      	ldr	r3, [pc, #464]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a73      	ldr	r2, [pc, #460]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	e01e      	b.n	8007c7e <HAL_RCC_OscConfig+0x172>
 8007c40:	1d3b      	adds	r3, r7, #4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c4a:	d10c      	bne.n	8007c66 <HAL_RCC_OscConfig+0x15a>
 8007c4c:	4b6d      	ldr	r3, [pc, #436]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a6c      	ldr	r2, [pc, #432]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	4b6a      	ldr	r3, [pc, #424]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a69      	ldr	r2, [pc, #420]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	e00b      	b.n	8007c7e <HAL_RCC_OscConfig+0x172>
 8007c66:	4b67      	ldr	r3, [pc, #412]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a66      	ldr	r2, [pc, #408]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	4b64      	ldr	r3, [pc, #400]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a63      	ldr	r2, [pc, #396]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c7c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007c7e:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	f023 020f 	bic.w	r2, r3, #15
 8007c86:	1d3b      	adds	r3, r7, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	495d      	ldr	r1, [pc, #372]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c92:	1d3b      	adds	r3, r7, #4
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d059      	beq.n	8007d50 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c9c:	f7fe f8c8 	bl	8005e30 <HAL_GetTick>
 8007ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ca4:	e00a      	b.n	8007cbc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ca6:	f7fe f8c3 	bl	8005e30 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b64      	cmp	r3, #100	; 0x64
 8007cb4:	d902      	bls.n	8007cbc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	f000 be29 	b.w	800890e <HAL_RCC_OscConfig+0xe02>
 8007cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cc0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007cc8:	fa93 f3a3 	rbit	r3, r3
 8007ccc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007cd0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cd4:	fab3 f383 	clz	r3, r3
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	f043 0301 	orr.w	r3, r3, #1
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d102      	bne.n	8007cee <HAL_RCC_OscConfig+0x1e2>
 8007ce8:	4b46      	ldr	r3, [pc, #280]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	e015      	b.n	8007d1a <HAL_RCC_OscConfig+0x20e>
 8007cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007cf2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007cfa:	fa93 f3a3 	rbit	r3, r3
 8007cfe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d06:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007d0a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007d0e:	fa93 f3a3 	rbit	r3, r3
 8007d12:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007d16:	4b3b      	ldr	r3, [pc, #236]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007d1e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007d22:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007d26:	fa92 f2a2 	rbit	r2, r2
 8007d2a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007d2e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007d32:	fab2 f282 	clz	r2, r2
 8007d36:	b2d2      	uxtb	r2, r2
 8007d38:	f042 0220 	orr.w	r2, r2, #32
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	f002 021f 	and.w	r2, r2, #31
 8007d42:	2101      	movs	r1, #1
 8007d44:	fa01 f202 	lsl.w	r2, r1, r2
 8007d48:	4013      	ands	r3, r2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0ab      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x19a>
 8007d4e:	e05c      	b.n	8007e0a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d50:	f7fe f86e 	bl	8005e30 <HAL_GetTick>
 8007d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d58:	e00a      	b.n	8007d70 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d5a:	f7fe f869 	bl	8005e30 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b64      	cmp	r3, #100	; 0x64
 8007d68:	d902      	bls.n	8007d70 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	f000 bdcf 	b.w	800890e <HAL_RCC_OscConfig+0xe02>
 8007d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007d74:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d78:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007d7c:	fa93 f3a3 	rbit	r3, r3
 8007d80:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007d84:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d88:	fab3 f383 	clz	r3, r3
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	f043 0301 	orr.w	r3, r3, #1
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d102      	bne.n	8007da2 <HAL_RCC_OscConfig+0x296>
 8007d9c:	4b19      	ldr	r3, [pc, #100]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	e015      	b.n	8007dce <HAL_RCC_OscConfig+0x2c2>
 8007da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007da6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007daa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007dae:	fa93 f3a3 	rbit	r3, r3
 8007db2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007dbe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007dc2:	fa93 f3a3 	rbit	r3, r3
 8007dc6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007dca:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <HAL_RCC_OscConfig+0x2f8>)
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007dd2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007dd6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007dda:	fa92 f2a2 	rbit	r2, r2
 8007dde:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007de2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007de6:	fab2 f282 	clz	r2, r2
 8007dea:	b2d2      	uxtb	r2, r2
 8007dec:	f042 0220 	orr.w	r2, r2, #32
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	f002 021f 	and.w	r2, r2, #31
 8007df6:	2101      	movs	r1, #1
 8007df8:	fa01 f202 	lsl.w	r2, r1, r2
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1ab      	bne.n	8007d5a <HAL_RCC_OscConfig+0x24e>
 8007e02:	e002      	b.n	8007e0a <HAL_RCC_OscConfig+0x2fe>
 8007e04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e0a:	1d3b      	adds	r3, r7, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0302 	and.w	r3, r3, #2
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 816f 	beq.w	80080f8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007e1a:	4bd0      	ldr	r3, [pc, #832]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f003 030c 	and.w	r3, r3, #12
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007e26:	4bcd      	ldr	r3, [pc, #820]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f003 030c 	and.w	r3, r3, #12
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d16c      	bne.n	8007f0c <HAL_RCC_OscConfig+0x400>
 8007e32:	4bca      	ldr	r3, [pc, #808]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d166      	bne.n	8007f0c <HAL_RCC_OscConfig+0x400>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e44:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007e48:	fa93 f3a3 	rbit	r3, r3
 8007e4c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007e50:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e54:	fab3 f383 	clz	r3, r3
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d102      	bne.n	8007e6e <HAL_RCC_OscConfig+0x362>
 8007e68:	4bbc      	ldr	r3, [pc, #752]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	e013      	b.n	8007e96 <HAL_RCC_OscConfig+0x38a>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e74:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007e78:	fa93 f3a3 	rbit	r3, r3
 8007e7c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007e80:	2302      	movs	r3, #2
 8007e82:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007e86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007e8a:	fa93 f3a3 	rbit	r3, r3
 8007e8e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007e92:	4bb2      	ldr	r3, [pc, #712]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	2202      	movs	r2, #2
 8007e98:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007e9c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007ea0:	fa92 f2a2 	rbit	r2, r2
 8007ea4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007ea8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007eac:	fab2 f282 	clz	r2, r2
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	f042 0220 	orr.w	r2, r2, #32
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	f002 021f 	and.w	r2, r2, #31
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d007      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x3cc>
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d002      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	f000 bd1b 	b.w	800890e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed8:	4ba0      	ldr	r3, [pc, #640]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ee0:	1d3b      	adds	r3, r7, #4
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	21f8      	movs	r1, #248	; 0xf8
 8007ee8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007ef0:	fa91 f1a1 	rbit	r1, r1
 8007ef4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007ef8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007efc:	fab1 f181 	clz	r1, r1
 8007f00:	b2c9      	uxtb	r1, r1
 8007f02:	408b      	lsls	r3, r1
 8007f04:	4995      	ldr	r1, [pc, #596]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f0a:	e0f5      	b.n	80080f8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f0c:	1d3b      	adds	r3, r7, #4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 8085 	beq.w	8008022 <HAL_RCC_OscConfig+0x516>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f1e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007f22:	fa93 f3a3 	rbit	r3, r3
 8007f26:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007f2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f2e:	fab3 f383 	clz	r3, r3
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	461a      	mov	r2, r3
 8007f40:	2301      	movs	r3, #1
 8007f42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f44:	f7fd ff74 	bl	8005e30 <HAL_GetTick>
 8007f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f4c:	e00a      	b.n	8007f64 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f4e:	f7fd ff6f 	bl	8005e30 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d902      	bls.n	8007f64 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	f000 bcd5 	b.w	800890e <HAL_RCC_OscConfig+0xe02>
 8007f64:	2302      	movs	r3, #2
 8007f66:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007f6e:	fa93 f3a3 	rbit	r3, r3
 8007f72:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007f76:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f7a:	fab3 f383 	clz	r3, r3
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	095b      	lsrs	r3, r3, #5
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f043 0301 	orr.w	r3, r3, #1
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCC_OscConfig+0x488>
 8007f8e:	4b73      	ldr	r3, [pc, #460]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	e013      	b.n	8007fbc <HAL_RCC_OscConfig+0x4b0>
 8007f94:	2302      	movs	r3, #2
 8007f96:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007f9e:	fa93 f3a3 	rbit	r3, r3
 8007fa2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007fac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007fb0:	fa93 f3a3 	rbit	r3, r3
 8007fb4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007fb8:	4b68      	ldr	r3, [pc, #416]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007fc2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007fc6:	fa92 f2a2 	rbit	r2, r2
 8007fca:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007fce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007fd2:	fab2 f282 	clz	r2, r2
 8007fd6:	b2d2      	uxtb	r2, r2
 8007fd8:	f042 0220 	orr.w	r2, r2, #32
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	f002 021f 	and.w	r2, r2, #31
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8007fe8:	4013      	ands	r3, r2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0af      	beq.n	8007f4e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fee:	4b5b      	ldr	r3, [pc, #364]	; (800815c <HAL_RCC_OscConfig+0x650>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ff6:	1d3b      	adds	r3, r7, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	21f8      	movs	r1, #248	; 0xf8
 8007ffe:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008002:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008006:	fa91 f1a1 	rbit	r1, r1
 800800a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800800e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8008012:	fab1 f181 	clz	r1, r1
 8008016:	b2c9      	uxtb	r1, r1
 8008018:	408b      	lsls	r3, r1
 800801a:	4950      	ldr	r1, [pc, #320]	; (800815c <HAL_RCC_OscConfig+0x650>)
 800801c:	4313      	orrs	r3, r2
 800801e:	600b      	str	r3, [r1, #0]
 8008020:	e06a      	b.n	80080f8 <HAL_RCC_OscConfig+0x5ec>
 8008022:	2301      	movs	r3, #1
 8008024:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008028:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800802c:	fa93 f3a3 	rbit	r3, r3
 8008030:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8008034:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008038:	fab3 f383 	clz	r3, r3
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008042:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	461a      	mov	r2, r3
 800804a:	2300      	movs	r3, #0
 800804c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800804e:	f7fd feef 	bl	8005e30 <HAL_GetTick>
 8008052:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008056:	e00a      	b.n	800806e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008058:	f7fd feea 	bl	8005e30 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d902      	bls.n	800806e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	f000 bc50 	b.w	800890e <HAL_RCC_OscConfig+0xe02>
 800806e:	2302      	movs	r3, #2
 8008070:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008074:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008078:	fa93 f3a3 	rbit	r3, r3
 800807c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8008080:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008084:	fab3 f383 	clz	r3, r3
 8008088:	b2db      	uxtb	r3, r3
 800808a:	095b      	lsrs	r3, r3, #5
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f043 0301 	orr.w	r3, r3, #1
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b01      	cmp	r3, #1
 8008096:	d102      	bne.n	800809e <HAL_RCC_OscConfig+0x592>
 8008098:	4b30      	ldr	r3, [pc, #192]	; (800815c <HAL_RCC_OscConfig+0x650>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	e013      	b.n	80080c6 <HAL_RCC_OscConfig+0x5ba>
 800809e:	2302      	movs	r3, #2
 80080a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080a8:	fa93 f3a3 	rbit	r3, r3
 80080ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80080b0:	2302      	movs	r3, #2
 80080b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80080b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80080ba:	fa93 f3a3 	rbit	r3, r3
 80080be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80080c2:	4b26      	ldr	r3, [pc, #152]	; (800815c <HAL_RCC_OscConfig+0x650>)
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2202      	movs	r2, #2
 80080c8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80080cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80080d0:	fa92 f2a2 	rbit	r2, r2
 80080d4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80080d8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80080dc:	fab2 f282 	clz	r2, r2
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	f042 0220 	orr.w	r2, r2, #32
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	f002 021f 	and.w	r2, r2, #31
 80080ec:	2101      	movs	r1, #1
 80080ee:	fa01 f202 	lsl.w	r2, r1, r2
 80080f2:	4013      	ands	r3, r2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1af      	bne.n	8008058 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080f8:	1d3b      	adds	r3, r7, #4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80da 	beq.w	80082bc <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008108:	1d3b      	adds	r3, r7, #4
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d069      	beq.n	80081e6 <HAL_RCC_OscConfig+0x6da>
 8008112:	2301      	movs	r3, #1
 8008114:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008118:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800811c:	fa93 f3a3 	rbit	r3, r3
 8008120:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8008124:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008128:	fab3 f383 	clz	r3, r3
 800812c:	b2db      	uxtb	r3, r3
 800812e:	461a      	mov	r2, r3
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <HAL_RCC_OscConfig+0x654>)
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	461a      	mov	r2, r3
 8008138:	2301      	movs	r3, #1
 800813a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800813c:	f7fd fe78 	bl	8005e30 <HAL_GetTick>
 8008140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008144:	e00e      	b.n	8008164 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008146:	f7fd fe73 	bl	8005e30 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d906      	bls.n	8008164 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e3d9      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
 800815a:	bf00      	nop
 800815c:	40021000 	.word	0x40021000
 8008160:	10908120 	.word	0x10908120
 8008164:	2302      	movs	r3, #2
 8008166:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800816a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800816e:	fa93 f3a3 	rbit	r3, r3
 8008172:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008176:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800817a:	2202      	movs	r2, #2
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	fa93 f2a3 	rbit	r2, r3
 8008188:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008192:	2202      	movs	r2, #2
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	fa93 f2a3 	rbit	r2, r3
 80081a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80081a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081a6:	4ba5      	ldr	r3, [pc, #660]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80081a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80081ae:	2102      	movs	r1, #2
 80081b0:	6019      	str	r1, [r3, #0]
 80081b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	fa93 f1a3 	rbit	r1, r3
 80081bc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80081c0:	6019      	str	r1, [r3, #0]
  return result;
 80081c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	fab3 f383 	clz	r3, r3
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 031f 	and.w	r3, r3, #31
 80081d8:	2101      	movs	r1, #1
 80081da:	fa01 f303 	lsl.w	r3, r1, r3
 80081de:	4013      	ands	r3, r2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0b0      	beq.n	8008146 <HAL_RCC_OscConfig+0x63a>
 80081e4:	e06a      	b.n	80082bc <HAL_RCC_OscConfig+0x7b0>
 80081e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	fa93 f2a3 	rbit	r2, r3
 80081f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80081fc:	601a      	str	r2, [r3, #0]
  return result;
 80081fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008202:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008204:	fab3 f383 	clz	r3, r3
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	4b8c      	ldr	r3, [pc, #560]	; (8008440 <HAL_RCC_OscConfig+0x934>)
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	461a      	mov	r2, r3
 8008214:	2300      	movs	r3, #0
 8008216:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008218:	f7fd fe0a 	bl	8005e30 <HAL_GetTick>
 800821c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008220:	e009      	b.n	8008236 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008222:	f7fd fe05 	bl	8005e30 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e36b      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
 8008236:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800823a:	2202      	movs	r2, #2
 800823c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800823e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	fa93 f2a3 	rbit	r2, r3
 8008248:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8008252:	2202      	movs	r2, #2
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	fa93 f2a3 	rbit	r2, r3
 8008260:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800826a:	2202      	movs	r2, #2
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	fa93 f2a3 	rbit	r2, r3
 8008278:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800827c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800827e:	4b6f      	ldr	r3, [pc, #444]	; (800843c <HAL_RCC_OscConfig+0x930>)
 8008280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008282:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008286:	2102      	movs	r1, #2
 8008288:	6019      	str	r1, [r3, #0]
 800828a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	fa93 f1a3 	rbit	r1, r3
 8008294:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008298:	6019      	str	r1, [r3, #0]
  return result;
 800829a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	fab3 f383 	clz	r3, r3
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 031f 	and.w	r3, r3, #31
 80082b0:	2101      	movs	r1, #1
 80082b2:	fa01 f303 	lsl.w	r3, r1, r3
 80082b6:	4013      	ands	r3, r2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1b2      	bne.n	8008222 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 8158 	beq.w	800857c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082cc:	2300      	movs	r3, #0
 80082ce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082d2:	4b5a      	ldr	r3, [pc, #360]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d112      	bne.n	8008304 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	4b57      	ldr	r3, [pc, #348]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	4a56      	ldr	r2, [pc, #344]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80082e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e8:	61d3      	str	r3, [r2, #28]
 80082ea:	4b54      	ldr	r3, [pc, #336]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f107 0308 	add.w	r3, r7, #8
 80082fc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008304:	4b4f      	ldr	r3, [pc, #316]	; (8008444 <HAL_RCC_OscConfig+0x938>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830c:	2b00      	cmp	r3, #0
 800830e:	d11a      	bne.n	8008346 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008310:	4b4c      	ldr	r3, [pc, #304]	; (8008444 <HAL_RCC_OscConfig+0x938>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a4b      	ldr	r2, [pc, #300]	; (8008444 <HAL_RCC_OscConfig+0x938>)
 8008316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800831a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800831c:	f7fd fd88 	bl	8005e30 <HAL_GetTick>
 8008320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008324:	e009      	b.n	800833a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008326:	f7fd fd83 	bl	8005e30 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b64      	cmp	r3, #100	; 0x64
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e2e9      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800833a:	4b42      	ldr	r3, [pc, #264]	; (8008444 <HAL_RCC_OscConfig+0x938>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0ef      	beq.n	8008326 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008346:	1d3b      	adds	r3, r7, #4
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d106      	bne.n	800835e <HAL_RCC_OscConfig+0x852>
 8008350:	4b3a      	ldr	r3, [pc, #232]	; (800843c <HAL_RCC_OscConfig+0x930>)
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	4a39      	ldr	r2, [pc, #228]	; (800843c <HAL_RCC_OscConfig+0x930>)
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	6213      	str	r3, [r2, #32]
 800835c:	e02f      	b.n	80083be <HAL_RCC_OscConfig+0x8b2>
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10c      	bne.n	8008382 <HAL_RCC_OscConfig+0x876>
 8008368:	4b34      	ldr	r3, [pc, #208]	; (800843c <HAL_RCC_OscConfig+0x930>)
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	4a33      	ldr	r2, [pc, #204]	; (800843c <HAL_RCC_OscConfig+0x930>)
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	6213      	str	r3, [r2, #32]
 8008374:	4b31      	ldr	r3, [pc, #196]	; (800843c <HAL_RCC_OscConfig+0x930>)
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	4a30      	ldr	r2, [pc, #192]	; (800843c <HAL_RCC_OscConfig+0x930>)
 800837a:	f023 0304 	bic.w	r3, r3, #4
 800837e:	6213      	str	r3, [r2, #32]
 8008380:	e01d      	b.n	80083be <HAL_RCC_OscConfig+0x8b2>
 8008382:	1d3b      	adds	r3, r7, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	2b05      	cmp	r3, #5
 800838a:	d10c      	bne.n	80083a6 <HAL_RCC_OscConfig+0x89a>
 800838c:	4b2b      	ldr	r3, [pc, #172]	; (800843c <HAL_RCC_OscConfig+0x930>)
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	4a2a      	ldr	r2, [pc, #168]	; (800843c <HAL_RCC_OscConfig+0x930>)
 8008392:	f043 0304 	orr.w	r3, r3, #4
 8008396:	6213      	str	r3, [r2, #32]
 8008398:	4b28      	ldr	r3, [pc, #160]	; (800843c <HAL_RCC_OscConfig+0x930>)
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	4a27      	ldr	r2, [pc, #156]	; (800843c <HAL_RCC_OscConfig+0x930>)
 800839e:	f043 0301 	orr.w	r3, r3, #1
 80083a2:	6213      	str	r3, [r2, #32]
 80083a4:	e00b      	b.n	80083be <HAL_RCC_OscConfig+0x8b2>
 80083a6:	4b25      	ldr	r3, [pc, #148]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	4a24      	ldr	r2, [pc, #144]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	6213      	str	r3, [r2, #32]
 80083b2:	4b22      	ldr	r3, [pc, #136]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	4a21      	ldr	r2, [pc, #132]	; (800843c <HAL_RCC_OscConfig+0x930>)
 80083b8:	f023 0304 	bic.w	r3, r3, #4
 80083bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d06b      	beq.n	80084a0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083c8:	f7fd fd32 	bl	8005e30 <HAL_GetTick>
 80083cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d0:	e00b      	b.n	80083ea <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083d2:	f7fd fd2d 	bl	8005e30 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e291      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
 80083ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80083ee:	2202      	movs	r2, #2
 80083f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	fa93 f2a3 	rbit	r2, r3
 80083fc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8008406:	2202      	movs	r2, #2
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	fa93 f2a3 	rbit	r2, r3
 8008414:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8008418:	601a      	str	r2, [r3, #0]
  return result;
 800841a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800841e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008420:	fab3 f383 	clz	r3, r3
 8008424:	b2db      	uxtb	r3, r3
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	b2db      	uxtb	r3, r3
 800842a:	f043 0302 	orr.w	r3, r3, #2
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d109      	bne.n	8008448 <HAL_RCC_OscConfig+0x93c>
 8008434:	4b01      	ldr	r3, [pc, #4]	; (800843c <HAL_RCC_OscConfig+0x930>)
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	e014      	b.n	8008464 <HAL_RCC_OscConfig+0x958>
 800843a:	bf00      	nop
 800843c:	40021000 	.word	0x40021000
 8008440:	10908120 	.word	0x10908120
 8008444:	40007000 	.word	0x40007000
 8008448:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800844c:	2202      	movs	r2, #2
 800844e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008450:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	fa93 f2a3 	rbit	r2, r3
 800845a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	4bbb      	ldr	r3, [pc, #748]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008468:	2102      	movs	r1, #2
 800846a:	6011      	str	r1, [r2, #0]
 800846c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008470:	6812      	ldr	r2, [r2, #0]
 8008472:	fa92 f1a2 	rbit	r1, r2
 8008476:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800847a:	6011      	str	r1, [r2, #0]
  return result;
 800847c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8008480:	6812      	ldr	r2, [r2, #0]
 8008482:	fab2 f282 	clz	r2, r2
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800848c:	b2d2      	uxtb	r2, r2
 800848e:	f002 021f 	and.w	r2, r2, #31
 8008492:	2101      	movs	r1, #1
 8008494:	fa01 f202 	lsl.w	r2, r1, r2
 8008498:	4013      	ands	r3, r2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d099      	beq.n	80083d2 <HAL_RCC_OscConfig+0x8c6>
 800849e:	e063      	b.n	8008568 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084a0:	f7fd fcc6 	bl	8005e30 <HAL_GetTick>
 80084a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084a8:	e00b      	b.n	80084c2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084aa:	f7fd fcc1 	bl	8005e30 <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d901      	bls.n	80084c2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e225      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
 80084c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084c6:	2202      	movs	r2, #2
 80084c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	fa93 f2a3 	rbit	r2, r3
 80084d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80084de:	2202      	movs	r2, #2
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	fa93 f2a3 	rbit	r2, r3
 80084ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80084f0:	601a      	str	r2, [r3, #0]
  return result;
 80084f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80084f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084f8:	fab3 f383 	clz	r3, r3
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	b2db      	uxtb	r3, r3
 8008502:	f043 0302 	orr.w	r3, r3, #2
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d102      	bne.n	8008512 <HAL_RCC_OscConfig+0xa06>
 800850c:	4b90      	ldr	r3, [pc, #576]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	e00d      	b.n	800852e <HAL_RCC_OscConfig+0xa22>
 8008512:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008516:	2202      	movs	r2, #2
 8008518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800851a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	fa93 f2a3 	rbit	r2, r3
 8008524:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	4b89      	ldr	r3, [pc, #548]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008532:	2102      	movs	r1, #2
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	fa92 f1a2 	rbit	r1, r2
 8008540:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008544:	6011      	str	r1, [r2, #0]
  return result;
 8008546:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	fab2 f282 	clz	r2, r2
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008556:	b2d2      	uxtb	r2, r2
 8008558:	f002 021f 	and.w	r2, r2, #31
 800855c:	2101      	movs	r1, #1
 800855e:	fa01 f202 	lsl.w	r2, r1, r2
 8008562:	4013      	ands	r3, r2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1a0      	bne.n	80084aa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008568:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800856c:	2b01      	cmp	r3, #1
 800856e:	d105      	bne.n	800857c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008570:	4b77      	ldr	r3, [pc, #476]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	4a76      	ldr	r2, [pc, #472]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 8008576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800857a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800857c:	1d3b      	adds	r3, r7, #4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 81c2 	beq.w	800890c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008588:	4b71      	ldr	r3, [pc, #452]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f003 030c 	and.w	r3, r3, #12
 8008590:	2b08      	cmp	r3, #8
 8008592:	f000 819c 	beq.w	80088ce <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008596:	1d3b      	adds	r3, r7, #4
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	2b02      	cmp	r3, #2
 800859e:	f040 8114 	bne.w	80087ca <HAL_RCC_OscConfig+0xcbe>
 80085a2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80085a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	fa93 f2a3 	rbit	r2, r3
 80085b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80085ba:	601a      	str	r2, [r3, #0]
  return result;
 80085bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80085c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085c2:	fab3 f383 	clz	r3, r3
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80085cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	461a      	mov	r2, r3
 80085d4:	2300      	movs	r3, #0
 80085d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d8:	f7fd fc2a 	bl	8005e30 <HAL_GetTick>
 80085dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80085e0:	e009      	b.n	80085f6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085e2:	f7fd fc25 	bl	8005e30 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d901      	bls.n	80085f6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e18b      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
 80085f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80085fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80085fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008600:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	fa93 f2a3 	rbit	r2, r3
 800860a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800860e:	601a      	str	r2, [r3, #0]
  return result;
 8008610:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008614:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008616:	fab3 f383 	clz	r3, r3
 800861a:	b2db      	uxtb	r3, r3
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	b2db      	uxtb	r3, r3
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b01      	cmp	r3, #1
 8008628:	d102      	bne.n	8008630 <HAL_RCC_OscConfig+0xb24>
 800862a:	4b49      	ldr	r3, [pc, #292]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	e01b      	b.n	8008668 <HAL_RCC_OscConfig+0xb5c>
 8008630:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008634:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800863a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	fa93 f2a3 	rbit	r2, r3
 8008644:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800864e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	fa93 f2a3 	rbit	r2, r3
 800865e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	4b3a      	ldr	r3, [pc, #232]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800866c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008670:	6011      	str	r1, [r2, #0]
 8008672:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008676:	6812      	ldr	r2, [r2, #0]
 8008678:	fa92 f1a2 	rbit	r1, r2
 800867c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008680:	6011      	str	r1, [r2, #0]
  return result;
 8008682:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	fab2 f282 	clz	r2, r2
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	f042 0220 	orr.w	r2, r2, #32
 8008692:	b2d2      	uxtb	r2, r2
 8008694:	f002 021f 	and.w	r2, r2, #31
 8008698:	2101      	movs	r1, #1
 800869a:	fa01 f202 	lsl.w	r2, r1, r2
 800869e:	4013      	ands	r3, r2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d19e      	bne.n	80085e2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086a4:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80086ac:	1d3b      	adds	r3, r7, #4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	430b      	orrs	r3, r1
 80086ba:	4925      	ldr	r1, [pc, #148]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 80086bc:	4313      	orrs	r3, r2
 80086be:	604b      	str	r3, [r1, #4]
 80086c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	fa93 f2a3 	rbit	r2, r3
 80086d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086d8:	601a      	str	r2, [r3, #0]
  return result;
 80086da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80086de:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086e0:	fab3 f383 	clz	r3, r3
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80086ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	461a      	mov	r2, r3
 80086f2:	2301      	movs	r3, #1
 80086f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086f6:	f7fd fb9b 	bl	8005e30 <HAL_GetTick>
 80086fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80086fe:	e009      	b.n	8008714 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008700:	f7fd fb96 	bl	8005e30 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e0fc      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
 8008714:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800871c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800871e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	fa93 f2a3 	rbit	r2, r3
 8008728:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800872c:	601a      	str	r2, [r3, #0]
  return result;
 800872e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008732:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008734:	fab3 f383 	clz	r3, r3
 8008738:	b2db      	uxtb	r3, r3
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f043 0301 	orr.w	r3, r3, #1
 8008742:	b2db      	uxtb	r3, r3
 8008744:	2b01      	cmp	r3, #1
 8008746:	d105      	bne.n	8008754 <HAL_RCC_OscConfig+0xc48>
 8008748:	4b01      	ldr	r3, [pc, #4]	; (8008750 <HAL_RCC_OscConfig+0xc44>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	e01e      	b.n	800878c <HAL_RCC_OscConfig+0xc80>
 800874e:	bf00      	nop
 8008750:	40021000 	.word	0x40021000
 8008754:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800875c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800875e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	fa93 f2a3 	rbit	r2, r3
 8008768:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	fa93 f2a3 	rbit	r2, r3
 8008782:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008786:	601a      	str	r2, [r3, #0]
 8008788:	4b63      	ldr	r3, [pc, #396]	; (8008918 <HAL_RCC_OscConfig+0xe0c>)
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008790:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008794:	6011      	str	r1, [r2, #0]
 8008796:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800879a:	6812      	ldr	r2, [r2, #0]
 800879c:	fa92 f1a2 	rbit	r1, r2
 80087a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80087a4:	6011      	str	r1, [r2, #0]
  return result;
 80087a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80087aa:	6812      	ldr	r2, [r2, #0]
 80087ac:	fab2 f282 	clz	r2, r2
 80087b0:	b2d2      	uxtb	r2, r2
 80087b2:	f042 0220 	orr.w	r2, r2, #32
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	f002 021f 	and.w	r2, r2, #31
 80087bc:	2101      	movs	r1, #1
 80087be:	fa01 f202 	lsl.w	r2, r1, r2
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d09b      	beq.n	8008700 <HAL_RCC_OscConfig+0xbf4>
 80087c8:	e0a0      	b.n	800890c <HAL_RCC_OscConfig+0xe00>
 80087ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	fa93 f2a3 	rbit	r2, r3
 80087de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087e2:	601a      	str	r2, [r3, #0]
  return result;
 80087e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80087e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ea:	fab3 f383 	clz	r3, r3
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80087f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	461a      	mov	r2, r3
 80087fc:	2300      	movs	r3, #0
 80087fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008800:	f7fd fb16 	bl	8005e30 <HAL_GetTick>
 8008804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008808:	e009      	b.n	800881e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800880a:	f7fd fb11 	bl	8005e30 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e077      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
 800881e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	fa93 f2a3 	rbit	r2, r3
 8008832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008836:	601a      	str	r2, [r3, #0]
  return result;
 8008838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800883c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800883e:	fab3 f383 	clz	r3, r3
 8008842:	b2db      	uxtb	r3, r3
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	b2db      	uxtb	r3, r3
 8008848:	f043 0301 	orr.w	r3, r3, #1
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b01      	cmp	r3, #1
 8008850:	d102      	bne.n	8008858 <HAL_RCC_OscConfig+0xd4c>
 8008852:	4b31      	ldr	r3, [pc, #196]	; (8008918 <HAL_RCC_OscConfig+0xe0c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	e01b      	b.n	8008890 <HAL_RCC_OscConfig+0xd84>
 8008858:	f107 0320 	add.w	r3, r7, #32
 800885c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008862:	f107 0320 	add.w	r3, r7, #32
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	fa93 f2a3 	rbit	r2, r3
 800886c:	f107 031c 	add.w	r3, r7, #28
 8008870:	601a      	str	r2, [r3, #0]
 8008872:	f107 0318 	add.w	r3, r7, #24
 8008876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	f107 0318 	add.w	r3, r7, #24
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	fa93 f2a3 	rbit	r2, r3
 8008886:	f107 0314 	add.w	r3, r7, #20
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	4b22      	ldr	r3, [pc, #136]	; (8008918 <HAL_RCC_OscConfig+0xe0c>)
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	f107 0210 	add.w	r2, r7, #16
 8008894:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008898:	6011      	str	r1, [r2, #0]
 800889a:	f107 0210 	add.w	r2, r7, #16
 800889e:	6812      	ldr	r2, [r2, #0]
 80088a0:	fa92 f1a2 	rbit	r1, r2
 80088a4:	f107 020c 	add.w	r2, r7, #12
 80088a8:	6011      	str	r1, [r2, #0]
  return result;
 80088aa:	f107 020c 	add.w	r2, r7, #12
 80088ae:	6812      	ldr	r2, [r2, #0]
 80088b0:	fab2 f282 	clz	r2, r2
 80088b4:	b2d2      	uxtb	r2, r2
 80088b6:	f042 0220 	orr.w	r2, r2, #32
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	f002 021f 	and.w	r2, r2, #31
 80088c0:	2101      	movs	r1, #1
 80088c2:	fa01 f202 	lsl.w	r2, r1, r2
 80088c6:	4013      	ands	r3, r2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d19e      	bne.n	800880a <HAL_RCC_OscConfig+0xcfe>
 80088cc:	e01e      	b.n	800890c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088ce:	1d3b      	adds	r3, r7, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e018      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80088dc:	4b0e      	ldr	r3, [pc, #56]	; (8008918 <HAL_RCC_OscConfig+0xe0c>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80088e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80088e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80088ec:	1d3b      	adds	r3, r7, #4
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d108      	bne.n	8008908 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80088f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80088fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80088fe:	1d3b      	adds	r3, r7, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008904:	429a      	cmp	r2, r3
 8008906:	d001      	beq.n	800890c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	40021000 	.word	0x40021000

0800891c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b09e      	sub	sp, #120	; 0x78
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e162      	b.n	8008bfa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008934:	4b90      	ldr	r3, [pc, #576]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d910      	bls.n	8008964 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008942:	4b8d      	ldr	r3, [pc, #564]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f023 0207 	bic.w	r2, r3, #7
 800894a:	498b      	ldr	r1, [pc, #556]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	4313      	orrs	r3, r2
 8008950:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008952:	4b89      	ldr	r3, [pc, #548]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	683a      	ldr	r2, [r7, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d001      	beq.n	8008964 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e14a      	b.n	8008bfa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d008      	beq.n	8008982 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008970:	4b82      	ldr	r3, [pc, #520]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	497f      	ldr	r1, [pc, #508]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 800897e:	4313      	orrs	r3, r2
 8008980:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 80dc 	beq.w	8008b48 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d13c      	bne.n	8008a12 <HAL_RCC_ClockConfig+0xf6>
 8008998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800899c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089a0:	fa93 f3a3 	rbit	r3, r3
 80089a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80089a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089a8:	fab3 f383 	clz	r3, r3
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d102      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xa6>
 80089bc:	4b6f      	ldr	r3, [pc, #444]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	e00f      	b.n	80089e2 <HAL_RCC_ClockConfig+0xc6>
 80089c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ca:	fa93 f3a3 	rbit	r3, r3
 80089ce:	667b      	str	r3, [r7, #100]	; 0x64
 80089d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089d4:	663b      	str	r3, [r7, #96]	; 0x60
 80089d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089d8:	fa93 f3a3 	rbit	r3, r3
 80089dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089de:	4b67      	ldr	r3, [pc, #412]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 80089e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80089e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80089e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089ea:	fa92 f2a2 	rbit	r2, r2
 80089ee:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80089f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80089f2:	fab2 f282 	clz	r2, r2
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	f042 0220 	orr.w	r2, r2, #32
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	f002 021f 	and.w	r2, r2, #31
 8008a02:	2101      	movs	r1, #1
 8008a04:	fa01 f202 	lsl.w	r2, r1, r2
 8008a08:	4013      	ands	r3, r2
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d17b      	bne.n	8008b06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e0f3      	b.n	8008bfa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d13c      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x178>
 8008a1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a22:	fa93 f3a3 	rbit	r3, r3
 8008a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a2a:	fab3 f383 	clz	r3, r3
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	095b      	lsrs	r3, r3, #5
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f043 0301 	orr.w	r3, r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d102      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x128>
 8008a3e:	4b4f      	ldr	r3, [pc, #316]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	e00f      	b.n	8008a64 <HAL_RCC_ClockConfig+0x148>
 8008a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a4c:	fa93 f3a3 	rbit	r3, r3
 8008a50:	647b      	str	r3, [r7, #68]	; 0x44
 8008a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a56:	643b      	str	r3, [r7, #64]	; 0x40
 8008a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5a:	fa93 f3a3 	rbit	r3, r3
 8008a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a60:	4b46      	ldr	r3, [pc, #280]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008a68:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a6c:	fa92 f2a2 	rbit	r2, r2
 8008a70:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a74:	fab2 f282 	clz	r2, r2
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	f042 0220 	orr.w	r2, r2, #32
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	f002 021f 	and.w	r2, r2, #31
 8008a84:	2101      	movs	r1, #1
 8008a86:	fa01 f202 	lsl.w	r2, r1, r2
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d13a      	bne.n	8008b06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0b2      	b.n	8008bfa <HAL_RCC_ClockConfig+0x2de>
 8008a94:	2302      	movs	r3, #2
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	fa93 f3a3 	rbit	r3, r3
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aa2:	fab3 f383 	clz	r3, r3
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d102      	bne.n	8008abc <HAL_RCC_ClockConfig+0x1a0>
 8008ab6:	4b31      	ldr	r3, [pc, #196]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	e00d      	b.n	8008ad8 <HAL_RCC_ClockConfig+0x1bc>
 8008abc:	2302      	movs	r3, #2
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	fa93 f3a3 	rbit	r3, r3
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac8:	2302      	movs	r3, #2
 8008aca:	623b      	str	r3, [r7, #32]
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	fa93 f3a3 	rbit	r3, r3
 8008ad2:	61fb      	str	r3, [r7, #28]
 8008ad4:	4b29      	ldr	r3, [pc, #164]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	2202      	movs	r2, #2
 8008ada:	61ba      	str	r2, [r7, #24]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	fa92 f2a2 	rbit	r2, r2
 8008ae2:	617a      	str	r2, [r7, #20]
  return result;
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	fab2 f282 	clz	r2, r2
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	f042 0220 	orr.w	r2, r2, #32
 8008af0:	b2d2      	uxtb	r2, r2
 8008af2:	f002 021f 	and.w	r2, r2, #31
 8008af6:	2101      	movs	r1, #1
 8008af8:	fa01 f202 	lsl.w	r2, r1, r2
 8008afc:	4013      	ands	r3, r2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e079      	b.n	8008bfa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b06:	4b1d      	ldr	r3, [pc, #116]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f023 0203 	bic.w	r2, r3, #3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	491a      	ldr	r1, [pc, #104]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b18:	f7fd f98a 	bl	8005e30 <HAL_GetTick>
 8008b1c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b1e:	e00a      	b.n	8008b36 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b20:	f7fd f986 	bl	8005e30 <HAL_GetTick>
 8008b24:	4602      	mov	r2, r0
 8008b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e061      	b.n	8008bfa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b36:	4b11      	ldr	r3, [pc, #68]	; (8008b7c <HAL_RCC_ClockConfig+0x260>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f003 020c 	and.w	r2, r3, #12
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d1eb      	bne.n	8008b20 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b48:	4b0b      	ldr	r3, [pc, #44]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d214      	bcs.n	8008b80 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b56:	4b08      	ldr	r3, [pc, #32]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f023 0207 	bic.w	r2, r3, #7
 8008b5e:	4906      	ldr	r1, [pc, #24]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b66:	4b04      	ldr	r3, [pc, #16]	; (8008b78 <HAL_RCC_ClockConfig+0x25c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d005      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e040      	b.n	8008bfa <HAL_RCC_ClockConfig+0x2de>
 8008b78:	40022000 	.word	0x40022000
 8008b7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <HAL_RCC_ClockConfig+0x2e8>)
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	491a      	ldr	r1, [pc, #104]	; (8008c04 <HAL_RCC_ClockConfig+0x2e8>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008baa:	4b16      	ldr	r3, [pc, #88]	; (8008c04 <HAL_RCC_ClockConfig+0x2e8>)
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	4912      	ldr	r1, [pc, #72]	; (8008c04 <HAL_RCC_ClockConfig+0x2e8>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008bbe:	f000 f829 	bl	8008c14 <HAL_RCC_GetSysClockFreq>
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <HAL_RCC_ClockConfig+0x2e8>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bcc:	22f0      	movs	r2, #240	; 0xf0
 8008bce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	fa92 f2a2 	rbit	r2, r2
 8008bd6:	60fa      	str	r2, [r7, #12]
  return result;
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	fab2 f282 	clz	r2, r2
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	40d3      	lsrs	r3, r2
 8008be2:	4a09      	ldr	r2, [pc, #36]	; (8008c08 <HAL_RCC_ClockConfig+0x2ec>)
 8008be4:	5cd3      	ldrb	r3, [r2, r3]
 8008be6:	fa21 f303 	lsr.w	r3, r1, r3
 8008bea:	4a08      	ldr	r2, [pc, #32]	; (8008c0c <HAL_RCC_ClockConfig+0x2f0>)
 8008bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008bee:	4b08      	ldr	r3, [pc, #32]	; (8008c10 <HAL_RCC_ClockConfig+0x2f4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fd f8d8 	bl	8005da8 <HAL_InitTick>
  
  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3778      	adds	r7, #120	; 0x78
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	40021000 	.word	0x40021000
 8008c08:	0800fd68 	.word	0x0800fd68
 8008c0c:	200006d8 	.word	0x200006d8
 8008c10:	200006dc 	.word	0x200006dc

08008c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b08b      	sub	sp, #44	; 0x2c
 8008c18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61bb      	str	r3, [r7, #24]
 8008c22:	2300      	movs	r3, #0
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
 8008c26:	2300      	movs	r3, #0
 8008c28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008c2e:	4b29      	ldr	r3, [pc, #164]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f003 030c 	and.w	r3, r3, #12
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d002      	beq.n	8008c44 <HAL_RCC_GetSysClockFreq+0x30>
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d003      	beq.n	8008c4a <HAL_RCC_GetSysClockFreq+0x36>
 8008c42:	e03c      	b.n	8008cbe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008c44:	4b24      	ldr	r3, [pc, #144]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c46:	623b      	str	r3, [r7, #32]
      break;
 8008c48:	e03c      	b.n	8008cc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008c50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008c54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	fa92 f2a2 	rbit	r2, r2
 8008c5c:	607a      	str	r2, [r7, #4]
  return result;
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	fab2 f282 	clz	r2, r2
 8008c64:	b2d2      	uxtb	r2, r2
 8008c66:	40d3      	lsrs	r3, r2
 8008c68:	4a1c      	ldr	r2, [pc, #112]	; (8008cdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8008c6a:	5cd3      	ldrb	r3, [r2, r3]
 8008c6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008c6e:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	220f      	movs	r2, #15
 8008c78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	fa92 f2a2 	rbit	r2, r2
 8008c80:	60fa      	str	r2, [r7, #12]
  return result;
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	fab2 f282 	clz	r2, r2
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	40d3      	lsrs	r3, r2
 8008c8c:	4a14      	ldr	r2, [pc, #80]	; (8008ce0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008c8e:	5cd3      	ldrb	r3, [r2, r3]
 8008c90:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008c9c:	4a0e      	ldr	r2, [pc, #56]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	fb02 f303 	mul.w	r3, r2, r3
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cac:	e004      	b.n	8008cb8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	4a0c      	ldr	r2, [pc, #48]	; (8008ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cba:	623b      	str	r3, [r7, #32]
      break;
 8008cbc:	e002      	b.n	8008cc4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008cbe:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008cc0:	623b      	str	r3, [r7, #32]
      break;
 8008cc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	372c      	adds	r7, #44	; 0x2c
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	007a1200 	.word	0x007a1200
 8008cdc:	0800fd80 	.word	0x0800fd80
 8008ce0:	0800fd90 	.word	0x0800fd90
 8008ce4:	003d0900 	.word	0x003d0900

08008ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cec:	4b03      	ldr	r3, [pc, #12]	; (8008cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8008cee:	681b      	ldr	r3, [r3, #0]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	200006d8 	.word	0x200006d8

08008d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008d06:	f7ff ffef 	bl	8008ce8 <HAL_RCC_GetHCLKFreq>
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d14:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008d18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	fa92 f2a2 	rbit	r2, r2
 8008d20:	603a      	str	r2, [r7, #0]
  return result;
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	fab2 f282 	clz	r2, r2
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	40d3      	lsrs	r3, r2
 8008d2c:	4a04      	ldr	r2, [pc, #16]	; (8008d40 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008d2e:	5cd3      	ldrb	r3, [r2, r3]
 8008d30:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008d34:	4618      	mov	r0, r3
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	40021000 	.word	0x40021000
 8008d40:	0800fd78 	.word	0x0800fd78

08008d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008d4a:	f7ff ffcd 	bl	8008ce8 <HAL_RCC_GetHCLKFreq>
 8008d4e:	4601      	mov	r1, r0
 8008d50:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008d58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008d5c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	fa92 f2a2 	rbit	r2, r2
 8008d64:	603a      	str	r2, [r7, #0]
  return result;
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	fab2 f282 	clz	r2, r2
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	40d3      	lsrs	r3, r2
 8008d70:	4a04      	ldr	r2, [pc, #16]	; (8008d84 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008d72:	5cd3      	ldrb	r3, [r2, r3]
 8008d74:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40021000 	.word	0x40021000
 8008d84:	0800fd78 	.word	0x0800fd78

08008d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b092      	sub	sp, #72	; 0x48
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80d7 	beq.w	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8008da6:	2300      	movs	r3, #0
 8008da8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dac:	4b4e      	ldr	r3, [pc, #312]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10e      	bne.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008db8:	4b4b      	ldr	r3, [pc, #300]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	4a4a      	ldr	r2, [pc, #296]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc2:	61d3      	str	r3, [r2, #28]
 8008dc4:	4b48      	ldr	r3, [pc, #288]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dcc:	60bb      	str	r3, [r7, #8]
 8008dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd6:	4b45      	ldr	r3, [pc, #276]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d118      	bne.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008de2:	4b42      	ldr	r3, [pc, #264]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a41      	ldr	r2, [pc, #260]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dee:	f7fd f81f 	bl	8005e30 <HAL_GetTick>
 8008df2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df4:	e008      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008df6:	f7fd f81b 	bl	8005e30 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	2b64      	cmp	r3, #100	; 0x64
 8008e02:	d901      	bls.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e169      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e08:	4b38      	ldr	r3, [pc, #224]	; (8008eec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0f0      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e14:	4b34      	ldr	r3, [pc, #208]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 8084 	beq.w	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d07c      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e34:	4b2c      	ldr	r3, [pc, #176]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e46:	fa93 f3a3 	rbit	r3, r3
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e4e:	fab3 f383 	clz	r3, r3
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	461a      	mov	r2, r3
 8008e56:	4b26      	ldr	r3, [pc, #152]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	2301      	movs	r3, #1
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	fa93 f3a3 	rbit	r3, r3
 8008e6e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e72:	fab3 f383 	clz	r3, r3
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	461a      	mov	r2, r3
 8008e7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	461a      	mov	r2, r3
 8008e82:	2300      	movs	r3, #0
 8008e84:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008e86:	4a18      	ldr	r2, [pc, #96]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d04b      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e96:	f7fc ffcb 	bl	8005e30 <HAL_GetTick>
 8008e9a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e9c:	e00a      	b.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e9e:	f7fc ffc7 	bl	8005e30 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d901      	bls.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e113      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	fa93 f3a3 	rbit	r3, r3
 8008ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	623b      	str	r3, [r7, #32]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	fa93 f3a3 	rbit	r3, r3
 8008eca:	61fb      	str	r3, [r7, #28]
  return result;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ece:	fab3 f383 	clz	r3, r3
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	095b      	lsrs	r3, r3, #5
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f043 0302 	orr.w	r3, r3, #2
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d108      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008ee2:	4b01      	ldr	r3, [pc, #4]	; (8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	e00d      	b.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008ee8:	40021000 	.word	0x40021000
 8008eec:	40007000 	.word	0x40007000
 8008ef0:	10908100 	.word	0x10908100
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	fa93 f3a3 	rbit	r3, r3
 8008efe:	617b      	str	r3, [r7, #20]
 8008f00:	4b78      	ldr	r3, [pc, #480]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2202      	movs	r2, #2
 8008f06:	613a      	str	r2, [r7, #16]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	fa92 f2a2 	rbit	r2, r2
 8008f0e:	60fa      	str	r2, [r7, #12]
  return result;
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	fab2 f282 	clz	r2, r2
 8008f16:	b2d2      	uxtb	r2, r2
 8008f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	f002 021f 	and.w	r2, r2, #31
 8008f22:	2101      	movs	r1, #1
 8008f24:	fa01 f202 	lsl.w	r2, r1, r2
 8008f28:	4013      	ands	r3, r2
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d0b7      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008f2e:	4b6d      	ldr	r3, [pc, #436]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	496a      	ldr	r1, [pc, #424]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008f40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d105      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f48:	4b66      	ldr	r3, [pc, #408]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	4a65      	ldr	r2, [pc, #404]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d008      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f60:	4b60      	ldr	r3, [pc, #384]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f64:	f023 0203 	bic.w	r2, r3, #3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	495d      	ldr	r1, [pc, #372]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f7e:	4b59      	ldr	r3, [pc, #356]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	4956      	ldr	r1, [pc, #344]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0304 	and.w	r3, r3, #4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d008      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f9c:	4b51      	ldr	r3, [pc, #324]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	494e      	ldr	r1, [pc, #312]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d008      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fba:	4b4a      	ldr	r3, [pc, #296]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	f023 0210 	bic.w	r2, r3, #16
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	4947      	ldr	r1, [pc, #284]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d008      	beq.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008fd8:	4b42      	ldr	r3, [pc, #264]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe4:	493f      	ldr	r1, [pc, #252]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ff6:	4b3b      	ldr	r3, [pc, #236]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	f023 0220 	bic.w	r2, r3, #32
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	4938      	ldr	r1, [pc, #224]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009004:	4313      	orrs	r3, r2
 8009006:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0308 	and.w	r3, r3, #8
 8009010:	2b00      	cmp	r3, #0
 8009012:	d008      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009014:	4b33      	ldr	r3, [pc, #204]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	4930      	ldr	r1, [pc, #192]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009022:	4313      	orrs	r3, r2
 8009024:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	d008      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009032:	4b2c      	ldr	r3, [pc, #176]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	4929      	ldr	r1, [pc, #164]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009040:	4313      	orrs	r3, r2
 8009042:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800904c:	2b00      	cmp	r3, #0
 800904e:	d008      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009050:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4921      	ldr	r1, [pc, #132]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800905e:	4313      	orrs	r3, r2
 8009060:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906a:	2b00      	cmp	r3, #0
 800906c:	d008      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800906e:	4b1d      	ldr	r3, [pc, #116]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	491a      	ldr	r1, [pc, #104]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800907c:	4313      	orrs	r3, r2
 800907e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d008      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800908c:	4b15      	ldr	r3, [pc, #84]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009098:	4912      	ldr	r1, [pc, #72]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800909a:	4313      	orrs	r3, r2
 800909c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d008      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80090aa:	4b0e      	ldr	r3, [pc, #56]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b6:	490b      	ldr	r1, [pc, #44]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d008      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80090c8:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d4:	4903      	ldr	r1, [pc, #12]	; (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3748      	adds	r7, #72	; 0x48
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	40021000 	.word	0x40021000

080090e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e084      	b.n	8009204 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d106      	bne.n	800911a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f7fb faa5 	bl	8004664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2202      	movs	r2, #2
 800911e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009130:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800913a:	d902      	bls.n	8009142 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e002      	b.n	8009148 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009146:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009150:	d007      	beq.n	8009162 <HAL_SPI_Init+0x7a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800915a:	d002      	beq.n	8009162 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10b      	bne.n	8009182 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009172:	d903      	bls.n	800917c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	631a      	str	r2, [r3, #48]	; 0x30
 800917a:	e002      	b.n	8009182 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	431a      	orrs	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	431a      	orrs	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	ea42 0103 	orr.w	r1, r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	0c1b      	lsrs	r3, r3, #16
 80091c2:	f003 0204 	and.w	r2, r3, #4
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d0:	431a      	orrs	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	ea42 0103 	orr.w	r1, r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69da      	ldr	r2, [r3, #28]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08a      	sub	sp, #40	; 0x28
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800921a:	2301      	movs	r3, #1
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_SPI_TransmitReceive+0x26>
 800922e:	2302      	movs	r3, #2
 8009230:	e1fb      	b.n	800962a <HAL_SPI_TransmitReceive+0x41e>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800923a:	f7fc fdf9 	bl	8005e30 <HAL_GetTick>
 800923e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009246:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800924e:	887b      	ldrh	r3, [r7, #2]
 8009250:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009252:	887b      	ldrh	r3, [r7, #2]
 8009254:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009256:	7efb      	ldrb	r3, [r7, #27]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d00e      	beq.n	800927a <HAL_SPI_TransmitReceive+0x6e>
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009262:	d106      	bne.n	8009272 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <HAL_SPI_TransmitReceive+0x66>
 800926c:	7efb      	ldrb	r3, [r7, #27]
 800926e:	2b04      	cmp	r3, #4
 8009270:	d003      	beq.n	800927a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009272:	2302      	movs	r3, #2
 8009274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009278:	e1cd      	b.n	8009616 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <HAL_SPI_TransmitReceive+0x80>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <HAL_SPI_TransmitReceive+0x80>
 8009286:	887b      	ldrh	r3, [r7, #2]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009292:	e1c0      	b.n	8009616 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b04      	cmp	r3, #4
 800929e:	d003      	beq.n	80092a8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2205      	movs	r2, #5
 80092a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	887a      	ldrh	r2, [r7, #2]
 80092b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	887a      	ldrh	r2, [r7, #2]
 80092c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	887a      	ldrh	r2, [r7, #2]
 80092ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	887a      	ldrh	r2, [r7, #2]
 80092d4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092ea:	d802      	bhi.n	80092f2 <HAL_SPI_TransmitReceive+0xe6>
 80092ec:	8a3b      	ldrh	r3, [r7, #16]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d908      	bls.n	8009304 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009300:	605a      	str	r2, [r3, #4]
 8009302:	e007      	b.n	8009314 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009312:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931e:	2b40      	cmp	r3, #64	; 0x40
 8009320:	d007      	beq.n	8009332 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009330:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800933a:	d97c      	bls.n	8009436 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_TransmitReceive+0x13e>
 8009344:	8a7b      	ldrh	r3, [r7, #18]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d169      	bne.n	800941e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	881a      	ldrh	r2, [r3, #0]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	1c9a      	adds	r2, r3, #2
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009364:	b29b      	uxth	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	b29a      	uxth	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800936e:	e056      	b.n	800941e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b02      	cmp	r3, #2
 800937c:	d11b      	bne.n	80093b6 <HAL_SPI_TransmitReceive+0x1aa>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009382:	b29b      	uxth	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d016      	beq.n	80093b6 <HAL_SPI_TransmitReceive+0x1aa>
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	2b01      	cmp	r3, #1
 800938c:	d113      	bne.n	80093b6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009392:	881a      	ldrh	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939e:	1c9a      	adds	r2, r3, #2
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	3b01      	subs	r3, #1
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d11c      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x1f2>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d016      	beq.n	80093fe <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093da:	b292      	uxth	r2, r2
 80093dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	1c9a      	adds	r2, r3, #2
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	3b01      	subs	r3, #1
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093fa:	2301      	movs	r3, #1
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093fe:	f7fc fd17 	bl	8005e30 <HAL_GetTick>
 8009402:	4602      	mov	r2, r0
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940a:	429a      	cmp	r2, r3
 800940c:	d807      	bhi.n	800941e <HAL_SPI_TransmitReceive+0x212>
 800940e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009414:	d003      	beq.n	800941e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800941c:	e0fb      	b.n	8009616 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009422:	b29b      	uxth	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1a3      	bne.n	8009370 <HAL_SPI_TransmitReceive+0x164>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d19d      	bne.n	8009370 <HAL_SPI_TransmitReceive+0x164>
 8009434:	e0df      	b.n	80095f6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <HAL_SPI_TransmitReceive+0x23a>
 800943e:	8a7b      	ldrh	r3, [r7, #18]
 8009440:	2b01      	cmp	r3, #1
 8009442:	f040 80cb 	bne.w	80095dc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b01      	cmp	r3, #1
 800944e:	d912      	bls.n	8009476 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	881a      	ldrh	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009460:	1c9a      	adds	r2, r3, #2
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800946a:	b29b      	uxth	r3, r3
 800946c:	3b02      	subs	r3, #2
 800946e:	b29a      	uxth	r2, r3
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009474:	e0b2      	b.n	80095dc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	330c      	adds	r3, #12
 8009480:	7812      	ldrb	r2, [r2, #0]
 8009482:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009492:	b29b      	uxth	r3, r3
 8009494:	3b01      	subs	r3, #1
 8009496:	b29a      	uxth	r2, r3
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800949c:	e09e      	b.n	80095dc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f003 0302 	and.w	r3, r3, #2
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d134      	bne.n	8009516 <HAL_SPI_TransmitReceive+0x30a>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d02f      	beq.n	8009516 <HAL_SPI_TransmitReceive+0x30a>
 80094b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d12c      	bne.n	8009516 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d912      	bls.n	80094ec <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	881a      	ldrh	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	1c9a      	adds	r2, r3, #2
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b02      	subs	r3, #2
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094ea:	e012      	b.n	8009512 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	7812      	ldrb	r2, [r2, #0]
 80094f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	2b01      	cmp	r3, #1
 8009522:	d148      	bne.n	80095b6 <HAL_SPI_TransmitReceive+0x3aa>
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800952a:	b29b      	uxth	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d042      	beq.n	80095b6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009536:	b29b      	uxth	r3, r3
 8009538:	2b01      	cmp	r3, #1
 800953a:	d923      	bls.n	8009584 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68da      	ldr	r2, [r3, #12]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	b292      	uxth	r2, r2
 8009548:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	1c9a      	adds	r2, r3, #2
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b02      	subs	r3, #2
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800956c:	b29b      	uxth	r3, r3
 800956e:	2b01      	cmp	r3, #1
 8009570:	d81f      	bhi.n	80095b2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	e016      	b.n	80095b2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f103 020c 	add.w	r2, r3, #12
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	7812      	ldrb	r2, [r2, #0]
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	3b01      	subs	r3, #1
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095b2:	2301      	movs	r3, #1
 80095b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095b6:	f7fc fc3b 	bl	8005e30 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d803      	bhi.n	80095ce <HAL_SPI_TransmitReceive+0x3c2>
 80095c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095cc:	d102      	bne.n	80095d4 <HAL_SPI_TransmitReceive+0x3c8>
 80095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d103      	bne.n	80095dc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80095da:	e01c      	b.n	8009616 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	f47f af5b 	bne.w	800949e <HAL_SPI_TransmitReceive+0x292>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f47f af54 	bne.w	800949e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095f6:	69fa      	ldr	r2, [r7, #28]
 80095f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095fa:	68f8      	ldr	r0, [r7, #12]
 80095fc:	f000 f8f0 	bl	80097e0 <SPI_EndRxTxTransaction>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d006      	beq.n	8009614 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	661a      	str	r2, [r3, #96]	; 0x60
 8009612:	e000      	b.n	8009616 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009614:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800962a:	4618      	mov	r0, r3
 800962c:	3728      	adds	r7, #40	; 0x28
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	60f8      	str	r0, [r7, #12]
 800963a:	60b9      	str	r1, [r7, #8]
 800963c:	603b      	str	r3, [r7, #0]
 800963e:	4613      	mov	r3, r2
 8009640:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009642:	e04c      	b.n	80096de <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d048      	beq.n	80096de <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800964c:	f7fc fbf0 	bl	8005e30 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d902      	bls.n	8009662 <SPI_WaitFlagStateUntilTimeout+0x30>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d13d      	bne.n	80096de <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800967a:	d111      	bne.n	80096a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009684:	d004      	beq.n	8009690 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800968e:	d107      	bne.n	80096a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800969e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096a8:	d10f      	bne.n	80096ca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e00f      	b.n	80096fe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4013      	ands	r3, r2
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	bf0c      	ite	eq
 80096ee:	2301      	moveq	r3, #1
 80096f0:	2300      	movne	r3, #0
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d1a3      	bne.n	8009644 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
 8009712:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009714:	e057      	b.n	80097c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800971c:	d106      	bne.n	800972c <SPI_WaitFifoStateUntilTimeout+0x26>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	330c      	adds	r3, #12
 800972a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d048      	beq.n	80097c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009734:	f7fc fb7c 	bl	8005e30 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	429a      	cmp	r2, r3
 8009742:	d902      	bls.n	800974a <SPI_WaitFifoStateUntilTimeout+0x44>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d13d      	bne.n	80097c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009762:	d111      	bne.n	8009788 <SPI_WaitFifoStateUntilTimeout+0x82>
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800976c:	d004      	beq.n	8009778 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009776:	d107      	bne.n	8009788 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009790:	d10f      	bne.n	80097b2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e008      	b.n	80097d8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4013      	ands	r3, r2
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d19f      	bne.n	8009716 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f7ff ff84 	bl	8009706 <SPI_WaitFifoStateUntilTimeout>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009808:	f043 0220 	orr.w	r2, r3, #32
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e027      	b.n	8009864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2200      	movs	r2, #0
 800981c:	2180      	movs	r1, #128	; 0x80
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f7ff ff07 	bl	8009632 <SPI_WaitFlagStateUntilTimeout>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800982e:	f043 0220 	orr.w	r2, r3, #32
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	e014      	b.n	8009864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff ff5d 	bl	8009706 <SPI_WaitFifoStateUntilTimeout>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d007      	beq.n	8009862 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009856:	f043 0220 	orr.w	r2, r3, #32
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e000      	b.n	8009864 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e01d      	b.n	80098ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7fa ff2a 	bl	80046ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	3304      	adds	r3, #4
 80098a8:	4619      	mov	r1, r3
 80098aa:	4610      	mov	r0, r2
 80098ac:	f000 fa6a 	bl	8009d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e01d      	b.n	8009910 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f815 	bl	8009918 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3304      	adds	r3, #4
 80098fe:	4619      	mov	r1, r3
 8009900:	4610      	mov	r0, r2
 8009902:	f000 fa3f 	bl	8009d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e01d      	b.n	800997a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	d106      	bne.n	8009958 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f815 	bl	8009982 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f000 fa0a 	bl	8009d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800998a:	bf00      	nop
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b084      	sub	sp, #16
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d101      	bne.n	80099b0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80099ac:	2302      	movs	r3, #2
 80099ae:	e08a      	b.n	8009ac6 <HAL_TIM_IC_ConfigChannel+0x130>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d11b      	bne.n	80099fe <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6818      	ldr	r0, [r3, #0]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	6819      	ldr	r1, [r3, #0]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f000 fdc3 	bl	800a560 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f022 020c 	bic.w	r2, r2, #12
 80099e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6999      	ldr	r1, [r3, #24]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	430a      	orrs	r2, r1
 80099fa:	619a      	str	r2, [r3, #24]
 80099fc:	e05a      	b.n	8009ab4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b04      	cmp	r3, #4
 8009a02:	d11c      	bne.n	8009a3e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	6819      	ldr	r1, [r3, #0]
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f000 fe3b 	bl	800a68e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	699a      	ldr	r2, [r3, #24]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6999      	ldr	r1, [r3, #24]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	021a      	lsls	r2, r3, #8
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	430a      	orrs	r2, r1
 8009a3a:	619a      	str	r2, [r3, #24]
 8009a3c:	e03a      	b.n	8009ab4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	d11b      	bne.n	8009a7c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6818      	ldr	r0, [r3, #0]
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	6819      	ldr	r1, [r3, #0]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	f000 fe88 	bl	800a768 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69da      	ldr	r2, [r3, #28]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f022 020c 	bic.w	r2, r2, #12
 8009a66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	69d9      	ldr	r1, [r3, #28]
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	689a      	ldr	r2, [r3, #8]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	430a      	orrs	r2, r1
 8009a78:	61da      	str	r2, [r3, #28]
 8009a7a:	e01b      	b.n	8009ab4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	6819      	ldr	r1, [r3, #0]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f000 fea8 	bl	800a7e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	69da      	ldr	r2, [r3, #28]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009a9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	69d9      	ldr	r1, [r3, #28]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	021a      	lsls	r2, r3, #8
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
	...

08009ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e105      	b.n	8009cf6 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2202      	movs	r2, #2
 8009af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2b14      	cmp	r3, #20
 8009afe:	f200 80f0 	bhi.w	8009ce2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b5d 	.word	0x08009b5d
 8009b0c:	08009ce3 	.word	0x08009ce3
 8009b10:	08009ce3 	.word	0x08009ce3
 8009b14:	08009ce3 	.word	0x08009ce3
 8009b18:	08009b9d 	.word	0x08009b9d
 8009b1c:	08009ce3 	.word	0x08009ce3
 8009b20:	08009ce3 	.word	0x08009ce3
 8009b24:	08009ce3 	.word	0x08009ce3
 8009b28:	08009bdf 	.word	0x08009bdf
 8009b2c:	08009ce3 	.word	0x08009ce3
 8009b30:	08009ce3 	.word	0x08009ce3
 8009b34:	08009ce3 	.word	0x08009ce3
 8009b38:	08009c1f 	.word	0x08009c1f
 8009b3c:	08009ce3 	.word	0x08009ce3
 8009b40:	08009ce3 	.word	0x08009ce3
 8009b44:	08009ce3 	.word	0x08009ce3
 8009b48:	08009c61 	.word	0x08009c61
 8009b4c:	08009ce3 	.word	0x08009ce3
 8009b50:	08009ce3 	.word	0x08009ce3
 8009b54:	08009ce3 	.word	0x08009ce3
 8009b58:	08009ca1 	.word	0x08009ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 f99e 	bl	8009ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699a      	ldr	r2, [r3, #24]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f042 0208 	orr.w	r2, r2, #8
 8009b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f022 0204 	bic.w	r2, r2, #4
 8009b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6999      	ldr	r1, [r3, #24]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	691a      	ldr	r2, [r3, #16]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	430a      	orrs	r2, r1
 8009b98:	619a      	str	r2, [r3, #24]
      break;
 8009b9a:	e0a3      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68b9      	ldr	r1, [r7, #8]
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 fa0e 	bl	8009fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699a      	ldr	r2, [r3, #24]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6999      	ldr	r1, [r3, #24]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	021a      	lsls	r2, r3, #8
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	619a      	str	r2, [r3, #24]
      break;
 8009bdc:	e082      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68b9      	ldr	r1, [r7, #8]
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fa77 	bl	800a0d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	69da      	ldr	r2, [r3, #28]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0208 	orr.w	r2, r2, #8
 8009bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69da      	ldr	r2, [r3, #28]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0204 	bic.w	r2, r2, #4
 8009c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	69d9      	ldr	r1, [r3, #28]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	691a      	ldr	r2, [r3, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	61da      	str	r2, [r3, #28]
      break;
 8009c1c:	e062      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	68b9      	ldr	r1, [r7, #8]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f000 fadf 	bl	800a1e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69da      	ldr	r2, [r3, #28]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69da      	ldr	r2, [r3, #28]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	69d9      	ldr	r1, [r3, #28]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	021a      	lsls	r2, r3, #8
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	61da      	str	r2, [r3, #28]
      break;
 8009c5e:	e041      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68b9      	ldr	r1, [r7, #8]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fb28 	bl	800a2bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0208 	orr.w	r2, r2, #8
 8009c7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 0204 	bic.w	r2, r2, #4
 8009c8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	691a      	ldr	r2, [r3, #16]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	430a      	orrs	r2, r1
 8009c9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009c9e:	e021      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	68b9      	ldr	r1, [r7, #8]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fb6c 	bl	800a384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	021a      	lsls	r2, r3, #8
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	430a      	orrs	r2, r1
 8009cde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ce0:	e000      	b.n	8009ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8009ce2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop

08009d00 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d101      	bne.n	8009d18 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e031      	b.n	8009d7c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fb90 	bl	800a450 <TIM_SlaveTimer_SetConfig>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d009      	beq.n	8009d4a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e018      	b.n	8009d7c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68da      	ldr	r2, [r3, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d58:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	68da      	ldr	r2, [r3, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d68:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a3c      	ldr	r2, [pc, #240]	; (8009e88 <TIM_Base_SetConfig+0x104>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d00f      	beq.n	8009dbc <TIM_Base_SetConfig+0x38>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da2:	d00b      	beq.n	8009dbc <TIM_Base_SetConfig+0x38>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a39      	ldr	r2, [pc, #228]	; (8009e8c <TIM_Base_SetConfig+0x108>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d007      	beq.n	8009dbc <TIM_Base_SetConfig+0x38>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a38      	ldr	r2, [pc, #224]	; (8009e90 <TIM_Base_SetConfig+0x10c>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d003      	beq.n	8009dbc <TIM_Base_SetConfig+0x38>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a37      	ldr	r2, [pc, #220]	; (8009e94 <TIM_Base_SetConfig+0x110>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d108      	bne.n	8009dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a2d      	ldr	r2, [pc, #180]	; (8009e88 <TIM_Base_SetConfig+0x104>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d01b      	beq.n	8009e0e <TIM_Base_SetConfig+0x8a>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ddc:	d017      	beq.n	8009e0e <TIM_Base_SetConfig+0x8a>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a2a      	ldr	r2, [pc, #168]	; (8009e8c <TIM_Base_SetConfig+0x108>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d013      	beq.n	8009e0e <TIM_Base_SetConfig+0x8a>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a29      	ldr	r2, [pc, #164]	; (8009e90 <TIM_Base_SetConfig+0x10c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d00f      	beq.n	8009e0e <TIM_Base_SetConfig+0x8a>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a28      	ldr	r2, [pc, #160]	; (8009e94 <TIM_Base_SetConfig+0x110>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d00b      	beq.n	8009e0e <TIM_Base_SetConfig+0x8a>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a27      	ldr	r2, [pc, #156]	; (8009e98 <TIM_Base_SetConfig+0x114>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d007      	beq.n	8009e0e <TIM_Base_SetConfig+0x8a>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a26      	ldr	r2, [pc, #152]	; (8009e9c <TIM_Base_SetConfig+0x118>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d003      	beq.n	8009e0e <TIM_Base_SetConfig+0x8a>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a25      	ldr	r2, [pc, #148]	; (8009ea0 <TIM_Base_SetConfig+0x11c>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d108      	bne.n	8009e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a10      	ldr	r2, [pc, #64]	; (8009e88 <TIM_Base_SetConfig+0x104>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d00f      	beq.n	8009e6c <TIM_Base_SetConfig+0xe8>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a11      	ldr	r2, [pc, #68]	; (8009e94 <TIM_Base_SetConfig+0x110>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00b      	beq.n	8009e6c <TIM_Base_SetConfig+0xe8>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a10      	ldr	r2, [pc, #64]	; (8009e98 <TIM_Base_SetConfig+0x114>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d007      	beq.n	8009e6c <TIM_Base_SetConfig+0xe8>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a0f      	ldr	r2, [pc, #60]	; (8009e9c <TIM_Base_SetConfig+0x118>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_Base_SetConfig+0xe8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a0e      	ldr	r2, [pc, #56]	; (8009ea0 <TIM_Base_SetConfig+0x11c>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d103      	bne.n	8009e74 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	691a      	ldr	r2, [r3, #16]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	615a      	str	r2, [r3, #20]
}
 8009e7a:	bf00      	nop
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop
 8009e88:	40012c00 	.word	0x40012c00
 8009e8c:	40000400 	.word	0x40000400
 8009e90:	40000800 	.word	0x40000800
 8009e94:	40013400 	.word	0x40013400
 8009e98:	40014000 	.word	0x40014000
 8009e9c:	40014400 	.word	0x40014400
 8009ea0:	40014800 	.word	0x40014800

08009ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a1b      	ldr	r3, [r3, #32]
 8009eb2:	f023 0201 	bic.w	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f023 0302 	bic.w	r3, r3, #2
 8009ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a2c      	ldr	r2, [pc, #176]	; (8009fb0 <TIM_OC1_SetConfig+0x10c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00f      	beq.n	8009f24 <TIM_OC1_SetConfig+0x80>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a2b      	ldr	r2, [pc, #172]	; (8009fb4 <TIM_OC1_SetConfig+0x110>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d00b      	beq.n	8009f24 <TIM_OC1_SetConfig+0x80>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	; (8009fb8 <TIM_OC1_SetConfig+0x114>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d007      	beq.n	8009f24 <TIM_OC1_SetConfig+0x80>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a29      	ldr	r2, [pc, #164]	; (8009fbc <TIM_OC1_SetConfig+0x118>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d003      	beq.n	8009f24 <TIM_OC1_SetConfig+0x80>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a28      	ldr	r2, [pc, #160]	; (8009fc0 <TIM_OC1_SetConfig+0x11c>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d10c      	bne.n	8009f3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f023 0308 	bic.w	r3, r3, #8
 8009f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f023 0304 	bic.w	r3, r3, #4
 8009f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a1b      	ldr	r2, [pc, #108]	; (8009fb0 <TIM_OC1_SetConfig+0x10c>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00f      	beq.n	8009f66 <TIM_OC1_SetConfig+0xc2>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a1a      	ldr	r2, [pc, #104]	; (8009fb4 <TIM_OC1_SetConfig+0x110>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00b      	beq.n	8009f66 <TIM_OC1_SetConfig+0xc2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a19      	ldr	r2, [pc, #100]	; (8009fb8 <TIM_OC1_SetConfig+0x114>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d007      	beq.n	8009f66 <TIM_OC1_SetConfig+0xc2>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a18      	ldr	r2, [pc, #96]	; (8009fbc <TIM_OC1_SetConfig+0x118>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d003      	beq.n	8009f66 <TIM_OC1_SetConfig+0xc2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a17      	ldr	r2, [pc, #92]	; (8009fc0 <TIM_OC1_SetConfig+0x11c>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d111      	bne.n	8009f8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	693a      	ldr	r2, [r7, #16]
 8009f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	621a      	str	r2, [r3, #32]
}
 8009fa4:	bf00      	nop
 8009fa6:	371c      	adds	r7, #28
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	40012c00 	.word	0x40012c00
 8009fb4:	40013400 	.word	0x40013400
 8009fb8:	40014000 	.word	0x40014000
 8009fbc:	40014400 	.word	0x40014400
 8009fc0:	40014800 	.word	0x40014800

08009fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	f023 0210 	bic.w	r2, r3, #16
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	021b      	lsls	r3, r3, #8
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	f023 0320 	bic.w	r3, r3, #32
 800a012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	011b      	lsls	r3, r3, #4
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a28      	ldr	r2, [pc, #160]	; (800a0c4 <TIM_OC2_SetConfig+0x100>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d003      	beq.n	800a030 <TIM_OC2_SetConfig+0x6c>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a27      	ldr	r2, [pc, #156]	; (800a0c8 <TIM_OC2_SetConfig+0x104>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d10d      	bne.n	800a04c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	011b      	lsls	r3, r3, #4
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4313      	orrs	r3, r2
 800a042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a04a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a1d      	ldr	r2, [pc, #116]	; (800a0c4 <TIM_OC2_SetConfig+0x100>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d00f      	beq.n	800a074 <TIM_OC2_SetConfig+0xb0>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a1c      	ldr	r2, [pc, #112]	; (800a0c8 <TIM_OC2_SetConfig+0x104>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d00b      	beq.n	800a074 <TIM_OC2_SetConfig+0xb0>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a1b      	ldr	r2, [pc, #108]	; (800a0cc <TIM_OC2_SetConfig+0x108>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d007      	beq.n	800a074 <TIM_OC2_SetConfig+0xb0>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a1a      	ldr	r2, [pc, #104]	; (800a0d0 <TIM_OC2_SetConfig+0x10c>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d003      	beq.n	800a074 <TIM_OC2_SetConfig+0xb0>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	4a19      	ldr	r2, [pc, #100]	; (800a0d4 <TIM_OC2_SetConfig+0x110>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d113      	bne.n	800a09c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a07a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a082:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	693a      	ldr	r2, [r7, #16]
 800a098:	4313      	orrs	r3, r2
 800a09a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	697a      	ldr	r2, [r7, #20]
 800a0b4:	621a      	str	r2, [r3, #32]
}
 800a0b6:	bf00      	nop
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
 800a0c2:	bf00      	nop
 800a0c4:	40012c00 	.word	0x40012c00
 800a0c8:	40013400 	.word	0x40013400
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40014400 	.word	0x40014400
 800a0d4:	40014800 	.word	0x40014800

0800a0d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	4313      	orrs	r3, r2
 800a130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a27      	ldr	r2, [pc, #156]	; (800a1d4 <TIM_OC3_SetConfig+0xfc>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d003      	beq.n	800a142 <TIM_OC3_SetConfig+0x6a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a26      	ldr	r2, [pc, #152]	; (800a1d8 <TIM_OC3_SetConfig+0x100>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d10d      	bne.n	800a15e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	4313      	orrs	r3, r2
 800a154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a15c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a1c      	ldr	r2, [pc, #112]	; (800a1d4 <TIM_OC3_SetConfig+0xfc>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d00f      	beq.n	800a186 <TIM_OC3_SetConfig+0xae>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	4a1b      	ldr	r2, [pc, #108]	; (800a1d8 <TIM_OC3_SetConfig+0x100>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d00b      	beq.n	800a186 <TIM_OC3_SetConfig+0xae>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a1a      	ldr	r2, [pc, #104]	; (800a1dc <TIM_OC3_SetConfig+0x104>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d007      	beq.n	800a186 <TIM_OC3_SetConfig+0xae>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a19      	ldr	r2, [pc, #100]	; (800a1e0 <TIM_OC3_SetConfig+0x108>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d003      	beq.n	800a186 <TIM_OC3_SetConfig+0xae>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a18      	ldr	r2, [pc, #96]	; (800a1e4 <TIM_OC3_SetConfig+0x10c>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d113      	bne.n	800a1ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a18c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	695b      	ldr	r3, [r3, #20]
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	011b      	lsls	r3, r3, #4
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	621a      	str	r2, [r3, #32]
}
 800a1c8:	bf00      	nop
 800a1ca:	371c      	adds	r7, #28
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	40012c00 	.word	0x40012c00
 800a1d8:	40013400 	.word	0x40013400
 800a1dc:	40014000 	.word	0x40014000
 800a1e0:	40014400 	.word	0x40014400
 800a1e4:	40014800 	.word	0x40014800

0800a1e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	021b      	lsls	r3, r3, #8
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	031b      	lsls	r3, r3, #12
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <TIM_OC4_SetConfig+0xc0>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00f      	beq.n	800a26c <TIM_OC4_SetConfig+0x84>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a17      	ldr	r2, [pc, #92]	; (800a2ac <TIM_OC4_SetConfig+0xc4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d00b      	beq.n	800a26c <TIM_OC4_SetConfig+0x84>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a16      	ldr	r2, [pc, #88]	; (800a2b0 <TIM_OC4_SetConfig+0xc8>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d007      	beq.n	800a26c <TIM_OC4_SetConfig+0x84>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a15      	ldr	r2, [pc, #84]	; (800a2b4 <TIM_OC4_SetConfig+0xcc>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d003      	beq.n	800a26c <TIM_OC4_SetConfig+0x84>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a14      	ldr	r2, [pc, #80]	; (800a2b8 <TIM_OC4_SetConfig+0xd0>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d109      	bne.n	800a280 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	695b      	ldr	r3, [r3, #20]
 800a278:	019b      	lsls	r3, r3, #6
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	621a      	str	r2, [r3, #32]
}
 800a29a:	bf00      	nop
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	40012c00 	.word	0x40012c00
 800a2ac:	40013400 	.word	0x40013400
 800a2b0:	40014000 	.word	0x40014000
 800a2b4:	40014400 	.word	0x40014400
 800a2b8:	40014800 	.word	0x40014800

0800a2bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	041b      	lsls	r3, r3, #16
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a17      	ldr	r2, [pc, #92]	; (800a370 <TIM_OC5_SetConfig+0xb4>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d00f      	beq.n	800a336 <TIM_OC5_SetConfig+0x7a>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a16      	ldr	r2, [pc, #88]	; (800a374 <TIM_OC5_SetConfig+0xb8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d00b      	beq.n	800a336 <TIM_OC5_SetConfig+0x7a>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a15      	ldr	r2, [pc, #84]	; (800a378 <TIM_OC5_SetConfig+0xbc>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d007      	beq.n	800a336 <TIM_OC5_SetConfig+0x7a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a14      	ldr	r2, [pc, #80]	; (800a37c <TIM_OC5_SetConfig+0xc0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d003      	beq.n	800a336 <TIM_OC5_SetConfig+0x7a>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a13      	ldr	r2, [pc, #76]	; (800a380 <TIM_OC5_SetConfig+0xc4>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d109      	bne.n	800a34a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a33c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	021b      	lsls	r3, r3, #8
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	4313      	orrs	r3, r2
 800a348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	693a      	ldr	r2, [r7, #16]
 800a362:	621a      	str	r2, [r3, #32]
}
 800a364:	bf00      	nop
 800a366:	371c      	adds	r7, #28
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	40012c00 	.word	0x40012c00
 800a374:	40013400 	.word	0x40013400
 800a378:	40014000 	.word	0x40014000
 800a37c:	40014400 	.word	0x40014400
 800a380:	40014800 	.word	0x40014800

0800a384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a384:	b480      	push	{r7}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	051b      	lsls	r3, r3, #20
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a18      	ldr	r2, [pc, #96]	; (800a43c <TIM_OC6_SetConfig+0xb8>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d00f      	beq.n	800a400 <TIM_OC6_SetConfig+0x7c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a17      	ldr	r2, [pc, #92]	; (800a440 <TIM_OC6_SetConfig+0xbc>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d00b      	beq.n	800a400 <TIM_OC6_SetConfig+0x7c>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a16      	ldr	r2, [pc, #88]	; (800a444 <TIM_OC6_SetConfig+0xc0>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d007      	beq.n	800a400 <TIM_OC6_SetConfig+0x7c>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a15      	ldr	r2, [pc, #84]	; (800a448 <TIM_OC6_SetConfig+0xc4>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d003      	beq.n	800a400 <TIM_OC6_SetConfig+0x7c>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a14      	ldr	r2, [pc, #80]	; (800a44c <TIM_OC6_SetConfig+0xc8>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d109      	bne.n	800a414 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	029b      	lsls	r3, r3, #10
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	4313      	orrs	r3, r2
 800a412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	621a      	str	r2, [r3, #32]
}
 800a42e:	bf00      	nop
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40012c00 	.word	0x40012c00
 800a440:	40013400 	.word	0x40013400
 800a444:	40014000 	.word	0x40014000
 800a448:	40014400 	.word	0x40014400
 800a44c:	40014800 	.word	0x40014800

0800a450 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a468:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	4313      	orrs	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a47a:	f023 0307 	bic.w	r3, r3, #7
 800a47e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b30      	cmp	r3, #48	; 0x30
 800a498:	d05c      	beq.n	800a554 <TIM_SlaveTimer_SetConfig+0x104>
 800a49a:	2b30      	cmp	r3, #48	; 0x30
 800a49c:	d806      	bhi.n	800a4ac <TIM_SlaveTimer_SetConfig+0x5c>
 800a49e:	2b10      	cmp	r3, #16
 800a4a0:	d058      	beq.n	800a554 <TIM_SlaveTimer_SetConfig+0x104>
 800a4a2:	2b20      	cmp	r3, #32
 800a4a4:	d056      	beq.n	800a554 <TIM_SlaveTimer_SetConfig+0x104>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d054      	beq.n	800a554 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a4aa:	e054      	b.n	800a556 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800a4ac:	2b50      	cmp	r3, #80	; 0x50
 800a4ae:	d03d      	beq.n	800a52c <TIM_SlaveTimer_SetConfig+0xdc>
 800a4b0:	2b50      	cmp	r3, #80	; 0x50
 800a4b2:	d802      	bhi.n	800a4ba <TIM_SlaveTimer_SetConfig+0x6a>
 800a4b4:	2b40      	cmp	r3, #64	; 0x40
 800a4b6:	d010      	beq.n	800a4da <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 800a4b8:	e04d      	b.n	800a556 <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800a4ba:	2b60      	cmp	r3, #96	; 0x60
 800a4bc:	d040      	beq.n	800a540 <TIM_SlaveTimer_SetConfig+0xf0>
 800a4be:	2b70      	cmp	r3, #112	; 0x70
 800a4c0:	d000      	beq.n	800a4c4 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 800a4c2:	e048      	b.n	800a556 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6818      	ldr	r0, [r3, #0]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	68d9      	ldr	r1, [r3, #12]
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	f000 f9c1 	bl	800a85a <TIM_ETR_SetConfig>
      break;
 800a4d8:	e03d      	b.n	800a556 <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b05      	cmp	r3, #5
 800a4e0:	d101      	bne.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e038      	b.n	800a558 <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6a1a      	ldr	r2, [r3, #32]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 0201 	bic.w	r2, r2, #1
 800a4fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a50c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	011b      	lsls	r3, r3, #4
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	4313      	orrs	r3, r2
 800a518:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	621a      	str	r2, [r3, #32]
      break;
 800a52a:	e014      	b.n	800a556 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6899      	ldr	r1, [r3, #8]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	461a      	mov	r2, r3
 800a53a:	f000 f879 	bl	800a630 <TIM_TI1_ConfigInputStage>
      break;
 800a53e:	e00a      	b.n	800a556 <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6818      	ldr	r0, [r3, #0]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	6899      	ldr	r1, [r3, #8]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	461a      	mov	r2, r3
 800a54e:	f000 f8db 	bl	800a708 <TIM_TI2_ConfigInputStage>
      break;
 800a552:	e000      	b.n	800a556 <TIM_SlaveTimer_SetConfig+0x106>
      break;
 800a554:	bf00      	nop
  }
  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a1b      	ldr	r3, [r3, #32]
 800a572:	f023 0201 	bic.w	r2, r3, #1
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	699b      	ldr	r3, [r3, #24]
 800a57e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6a1b      	ldr	r3, [r3, #32]
 800a584:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	4a24      	ldr	r2, [pc, #144]	; (800a61c <TIM_TI1_SetConfig+0xbc>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d013      	beq.n	800a5b6 <TIM_TI1_SetConfig+0x56>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a594:	d00f      	beq.n	800a5b6 <TIM_TI1_SetConfig+0x56>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4a21      	ldr	r2, [pc, #132]	; (800a620 <TIM_TI1_SetConfig+0xc0>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d00b      	beq.n	800a5b6 <TIM_TI1_SetConfig+0x56>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	4a20      	ldr	r2, [pc, #128]	; (800a624 <TIM_TI1_SetConfig+0xc4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d007      	beq.n	800a5b6 <TIM_TI1_SetConfig+0x56>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4a1f      	ldr	r2, [pc, #124]	; (800a628 <TIM_TI1_SetConfig+0xc8>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d003      	beq.n	800a5b6 <TIM_TI1_SetConfig+0x56>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4a1e      	ldr	r2, [pc, #120]	; (800a62c <TIM_TI1_SetConfig+0xcc>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d101      	bne.n	800a5ba <TIM_TI1_SetConfig+0x5a>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e000      	b.n	800a5bc <TIM_TI1_SetConfig+0x5c>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d008      	beq.n	800a5d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f023 0303 	bic.w	r3, r3, #3
 800a5c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	617b      	str	r3, [r7, #20]
 800a5d0:	e003      	b.n	800a5da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f043 0301 	orr.w	r3, r3, #1
 800a5d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	011b      	lsls	r3, r3, #4
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	f023 030a 	bic.w	r3, r3, #10
 800a5f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	f003 030a 	and.w	r3, r3, #10
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	40012c00 	.word	0x40012c00
 800a620:	40000400 	.word	0x40000400
 800a624:	40000800 	.word	0x40000800
 800a628:	40013400 	.word	0x40013400
 800a62c:	40014000 	.word	0x40014000

0800a630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	f023 0201 	bic.w	r2, r3, #1
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a65a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	011b      	lsls	r3, r3, #4
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	4313      	orrs	r3, r2
 800a664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f023 030a 	bic.w	r3, r3, #10
 800a66c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	4313      	orrs	r3, r2
 800a674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	621a      	str	r2, [r3, #32]
}
 800a682:	bf00      	nop
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a68e:	b480      	push	{r7}
 800a690:	b087      	sub	sp, #28
 800a692:	af00      	add	r7, sp, #0
 800a694:	60f8      	str	r0, [r7, #12]
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	607a      	str	r2, [r7, #4]
 800a69a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	f023 0210 	bic.w	r2, r3, #16
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	021b      	lsls	r3, r3, #8
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	031b      	lsls	r3, r3, #12
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	621a      	str	r2, [r3, #32]
}
 800a6fc:	bf00      	nop
 800a6fe:	371c      	adds	r7, #28
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	f023 0210 	bic.w	r2, r3, #16
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a732:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	031b      	lsls	r3, r3, #12
 800a738:	697a      	ldr	r2, [r7, #20]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a744:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	011b      	lsls	r3, r3, #4
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	621a      	str	r2, [r3, #32]
}
 800a75c:	bf00      	nop
 800a75e:	371c      	adds	r7, #28
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f023 0303 	bic.w	r3, r3, #3
 800a794:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a7a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	011b      	lsls	r3, r3, #4
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a7b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	021b      	lsls	r3, r3, #8
 800a7be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a7c2:	693a      	ldr	r2, [r7, #16]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	621a      	str	r2, [r3, #32]
}
 800a7d4:	bf00      	nop
 800a7d6:	371c      	adds	r7, #28
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
 800a7ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a80c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a81e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	031b      	lsls	r3, r3, #12
 800a824:	b29b      	uxth	r3, r3
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a832:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	031b      	lsls	r3, r3, #12
 800a838:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	4313      	orrs	r3, r2
 800a840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	621a      	str	r2, [r3, #32]
}
 800a84e:	bf00      	nop
 800a850:	371c      	adds	r7, #28
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b087      	sub	sp, #28
 800a85e:	af00      	add	r7, sp, #0
 800a860:	60f8      	str	r0, [r7, #12]
 800a862:	60b9      	str	r1, [r7, #8]
 800a864:	607a      	str	r2, [r7, #4]
 800a866:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a874:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	021a      	lsls	r2, r3, #8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	431a      	orrs	r2, r3
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	4313      	orrs	r3, r2
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	4313      	orrs	r3, r2
 800a886:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	609a      	str	r2, [r3, #8]
}
 800a88e:	bf00      	nop
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d101      	bne.n	800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	e063      	b.n	800a97c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a2b      	ldr	r2, [pc, #172]	; (800a988 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d004      	beq.n	800a8e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a2a      	ldr	r2, [pc, #168]	; (800a98c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d108      	bne.n	800a8fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a900:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	4313      	orrs	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a1b      	ldr	r2, [pc, #108]	; (800a988 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d018      	beq.n	800a950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a926:	d013      	beq.n	800a950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a18      	ldr	r2, [pc, #96]	; (800a990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d00e      	beq.n	800a950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4a17      	ldr	r2, [pc, #92]	; (800a994 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d009      	beq.n	800a950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a12      	ldr	r2, [pc, #72]	; (800a98c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d004      	beq.n	800a950 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a13      	ldr	r2, [pc, #76]	; (800a998 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d10c      	bne.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a956:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	4313      	orrs	r3, r2
 800a960:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	40012c00 	.word	0x40012c00
 800a98c:	40013400 	.word	0x40013400
 800a990:	40000400 	.word	0x40000400
 800a994:	40000800 	.word	0x40000800
 800a998:	40014000 	.word	0x40014000

0800a99c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d101      	bne.n	800a9b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9b4:	2302      	movs	r3, #2
 800a9b6:	e065      	b.n	800aa84 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	041b      	lsls	r3, r3, #16
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a16      	ldr	r2, [pc, #88]	; (800aa90 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d004      	beq.n	800aa46 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a14      	ldr	r2, [pc, #80]	; (800aa94 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d115      	bne.n	800aa72 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	051b      	lsls	r3, r3, #20
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	40012c00 	.word	0x40012c00
 800aa94:	40013400 	.word	0x40013400

0800aa98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e040      	b.n	800ab2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7f9 fee4 	bl	8004888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2224      	movs	r2, #36	; 0x24
 800aac4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f022 0201 	bic.w	r2, r2, #1
 800aad4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f82c 	bl	800ab34 <UART_SetConfig>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d101      	bne.n	800aae6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e022      	b.n	800ab2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d002      	beq.n	800aaf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fa3a 	bl	800af68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f042 0201 	orr.w	r2, r2, #1
 800ab22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fac1 	bl	800b0ac <UART_CheckIdleState>
 800ab2a:	4603      	mov	r3, r0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	69db      	ldr	r3, [r3, #28]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab66:	f023 030c 	bic.w	r3, r3, #12
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	6812      	ldr	r2, [r2, #0]
 800ab6e:	6939      	ldr	r1, [r7, #16]
 800ab70:	430b      	orrs	r3, r1
 800ab72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a1b      	ldr	r3, [r3, #32]
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	430a      	orrs	r2, r1
 800abac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4aa9      	ldr	r2, [pc, #676]	; (800ae58 <UART_SetConfig+0x324>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d121      	bne.n	800abfc <UART_SetConfig+0xc8>
 800abb8:	4ba8      	ldr	r3, [pc, #672]	; (800ae5c <UART_SetConfig+0x328>)
 800abba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abbc:	f003 0303 	and.w	r3, r3, #3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d817      	bhi.n	800abf4 <UART_SetConfig+0xc0>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <UART_SetConfig+0x98>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800abdd 	.word	0x0800abdd
 800abd0:	0800abe9 	.word	0x0800abe9
 800abd4:	0800abef 	.word	0x0800abef
 800abd8:	0800abe3 	.word	0x0800abe3
 800abdc:	2301      	movs	r3, #1
 800abde:	77fb      	strb	r3, [r7, #31]
 800abe0:	e0b2      	b.n	800ad48 <UART_SetConfig+0x214>
 800abe2:	2302      	movs	r3, #2
 800abe4:	77fb      	strb	r3, [r7, #31]
 800abe6:	e0af      	b.n	800ad48 <UART_SetConfig+0x214>
 800abe8:	2304      	movs	r3, #4
 800abea:	77fb      	strb	r3, [r7, #31]
 800abec:	e0ac      	b.n	800ad48 <UART_SetConfig+0x214>
 800abee:	2308      	movs	r3, #8
 800abf0:	77fb      	strb	r3, [r7, #31]
 800abf2:	e0a9      	b.n	800ad48 <UART_SetConfig+0x214>
 800abf4:	2310      	movs	r3, #16
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	bf00      	nop
 800abfa:	e0a5      	b.n	800ad48 <UART_SetConfig+0x214>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a97      	ldr	r2, [pc, #604]	; (800ae60 <UART_SetConfig+0x32c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d123      	bne.n	800ac4e <UART_SetConfig+0x11a>
 800ac06:	4b95      	ldr	r3, [pc, #596]	; (800ae5c <UART_SetConfig+0x328>)
 800ac08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac12:	d012      	beq.n	800ac3a <UART_SetConfig+0x106>
 800ac14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac18:	d802      	bhi.n	800ac20 <UART_SetConfig+0xec>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d007      	beq.n	800ac2e <UART_SetConfig+0xfa>
 800ac1e:	e012      	b.n	800ac46 <UART_SetConfig+0x112>
 800ac20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac24:	d00c      	beq.n	800ac40 <UART_SetConfig+0x10c>
 800ac26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac2a:	d003      	beq.n	800ac34 <UART_SetConfig+0x100>
 800ac2c:	e00b      	b.n	800ac46 <UART_SetConfig+0x112>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	77fb      	strb	r3, [r7, #31]
 800ac32:	e089      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac34:	2302      	movs	r3, #2
 800ac36:	77fb      	strb	r3, [r7, #31]
 800ac38:	e086      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac3a:	2304      	movs	r3, #4
 800ac3c:	77fb      	strb	r3, [r7, #31]
 800ac3e:	e083      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac40:	2308      	movs	r3, #8
 800ac42:	77fb      	strb	r3, [r7, #31]
 800ac44:	e080      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac46:	2310      	movs	r3, #16
 800ac48:	77fb      	strb	r3, [r7, #31]
 800ac4a:	bf00      	nop
 800ac4c:	e07c      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a84      	ldr	r2, [pc, #528]	; (800ae64 <UART_SetConfig+0x330>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d123      	bne.n	800aca0 <UART_SetConfig+0x16c>
 800ac58:	4b80      	ldr	r3, [pc, #512]	; (800ae5c <UART_SetConfig+0x328>)
 800ac5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800ac60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac64:	d012      	beq.n	800ac8c <UART_SetConfig+0x158>
 800ac66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac6a:	d802      	bhi.n	800ac72 <UART_SetConfig+0x13e>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d007      	beq.n	800ac80 <UART_SetConfig+0x14c>
 800ac70:	e012      	b.n	800ac98 <UART_SetConfig+0x164>
 800ac72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ac76:	d00c      	beq.n	800ac92 <UART_SetConfig+0x15e>
 800ac78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ac7c:	d003      	beq.n	800ac86 <UART_SetConfig+0x152>
 800ac7e:	e00b      	b.n	800ac98 <UART_SetConfig+0x164>
 800ac80:	2300      	movs	r3, #0
 800ac82:	77fb      	strb	r3, [r7, #31]
 800ac84:	e060      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac86:	2302      	movs	r3, #2
 800ac88:	77fb      	strb	r3, [r7, #31]
 800ac8a:	e05d      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	77fb      	strb	r3, [r7, #31]
 800ac90:	e05a      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac92:	2308      	movs	r3, #8
 800ac94:	77fb      	strb	r3, [r7, #31]
 800ac96:	e057      	b.n	800ad48 <UART_SetConfig+0x214>
 800ac98:	2310      	movs	r3, #16
 800ac9a:	77fb      	strb	r3, [r7, #31]
 800ac9c:	bf00      	nop
 800ac9e:	e053      	b.n	800ad48 <UART_SetConfig+0x214>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a70      	ldr	r2, [pc, #448]	; (800ae68 <UART_SetConfig+0x334>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d123      	bne.n	800acf2 <UART_SetConfig+0x1be>
 800acaa:	4b6c      	ldr	r3, [pc, #432]	; (800ae5c <UART_SetConfig+0x328>)
 800acac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800acb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acb6:	d012      	beq.n	800acde <UART_SetConfig+0x1aa>
 800acb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acbc:	d802      	bhi.n	800acc4 <UART_SetConfig+0x190>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d007      	beq.n	800acd2 <UART_SetConfig+0x19e>
 800acc2:	e012      	b.n	800acea <UART_SetConfig+0x1b6>
 800acc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acc8:	d00c      	beq.n	800ace4 <UART_SetConfig+0x1b0>
 800acca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acce:	d003      	beq.n	800acd8 <UART_SetConfig+0x1a4>
 800acd0:	e00b      	b.n	800acea <UART_SetConfig+0x1b6>
 800acd2:	2300      	movs	r3, #0
 800acd4:	77fb      	strb	r3, [r7, #31]
 800acd6:	e037      	b.n	800ad48 <UART_SetConfig+0x214>
 800acd8:	2302      	movs	r3, #2
 800acda:	77fb      	strb	r3, [r7, #31]
 800acdc:	e034      	b.n	800ad48 <UART_SetConfig+0x214>
 800acde:	2304      	movs	r3, #4
 800ace0:	77fb      	strb	r3, [r7, #31]
 800ace2:	e031      	b.n	800ad48 <UART_SetConfig+0x214>
 800ace4:	2308      	movs	r3, #8
 800ace6:	77fb      	strb	r3, [r7, #31]
 800ace8:	e02e      	b.n	800ad48 <UART_SetConfig+0x214>
 800acea:	2310      	movs	r3, #16
 800acec:	77fb      	strb	r3, [r7, #31]
 800acee:	bf00      	nop
 800acf0:	e02a      	b.n	800ad48 <UART_SetConfig+0x214>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a5d      	ldr	r2, [pc, #372]	; (800ae6c <UART_SetConfig+0x338>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d123      	bne.n	800ad44 <UART_SetConfig+0x210>
 800acfc:	4b57      	ldr	r3, [pc, #348]	; (800ae5c <UART_SetConfig+0x328>)
 800acfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad00:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ad04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad08:	d012      	beq.n	800ad30 <UART_SetConfig+0x1fc>
 800ad0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad0e:	d802      	bhi.n	800ad16 <UART_SetConfig+0x1e2>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <UART_SetConfig+0x1f0>
 800ad14:	e012      	b.n	800ad3c <UART_SetConfig+0x208>
 800ad16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad1a:	d00c      	beq.n	800ad36 <UART_SetConfig+0x202>
 800ad1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ad20:	d003      	beq.n	800ad2a <UART_SetConfig+0x1f6>
 800ad22:	e00b      	b.n	800ad3c <UART_SetConfig+0x208>
 800ad24:	2300      	movs	r3, #0
 800ad26:	77fb      	strb	r3, [r7, #31]
 800ad28:	e00e      	b.n	800ad48 <UART_SetConfig+0x214>
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	77fb      	strb	r3, [r7, #31]
 800ad2e:	e00b      	b.n	800ad48 <UART_SetConfig+0x214>
 800ad30:	2304      	movs	r3, #4
 800ad32:	77fb      	strb	r3, [r7, #31]
 800ad34:	e008      	b.n	800ad48 <UART_SetConfig+0x214>
 800ad36:	2308      	movs	r3, #8
 800ad38:	77fb      	strb	r3, [r7, #31]
 800ad3a:	e005      	b.n	800ad48 <UART_SetConfig+0x214>
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	77fb      	strb	r3, [r7, #31]
 800ad40:	bf00      	nop
 800ad42:	e001      	b.n	800ad48 <UART_SetConfig+0x214>
 800ad44:	2310      	movs	r3, #16
 800ad46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad50:	f040 808e 	bne.w	800ae70 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800ad54:	7ffb      	ldrb	r3, [r7, #31]
 800ad56:	2b08      	cmp	r3, #8
 800ad58:	d85e      	bhi.n	800ae18 <UART_SetConfig+0x2e4>
 800ad5a:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <UART_SetConfig+0x22c>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad85 	.word	0x0800ad85
 800ad64:	0800ada5 	.word	0x0800ada5
 800ad68:	0800adc5 	.word	0x0800adc5
 800ad6c:	0800ae19 	.word	0x0800ae19
 800ad70:	0800ade1 	.word	0x0800ade1
 800ad74:	0800ae19 	.word	0x0800ae19
 800ad78:	0800ae19 	.word	0x0800ae19
 800ad7c:	0800ae19 	.word	0x0800ae19
 800ad80:	0800ae01 	.word	0x0800ae01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad84:	f7fd ffbc 	bl	8008d00 <HAL_RCC_GetPCLK1Freq>
 800ad88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	005a      	lsls	r2, r3, #1
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	085b      	lsrs	r3, r3, #1
 800ad94:	441a      	add	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	61bb      	str	r3, [r7, #24]
        break;
 800ada2:	e03c      	b.n	800ae1e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ada4:	f7fd ffce 	bl	8008d44 <HAL_RCC_GetPCLK2Freq>
 800ada8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	005a      	lsls	r2, r3, #1
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	085b      	lsrs	r3, r3, #1
 800adb4:	441a      	add	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	fbb2 f3f3 	udiv	r3, r2, r3
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	61bb      	str	r3, [r7, #24]
        break;
 800adc2:	e02c      	b.n	800ae1e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	085b      	lsrs	r3, r3, #1
 800adca:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800adce:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	6852      	ldr	r2, [r2, #4]
 800add6:	fbb3 f3f2 	udiv	r3, r3, r2
 800adda:	b29b      	uxth	r3, r3
 800addc:	61bb      	str	r3, [r7, #24]
        break;
 800adde:	e01e      	b.n	800ae1e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ade0:	f7fd ff18 	bl	8008c14 <HAL_RCC_GetSysClockFreq>
 800ade4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	005a      	lsls	r2, r3, #1
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	085b      	lsrs	r3, r3, #1
 800adf0:	441a      	add	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	61bb      	str	r3, [r7, #24]
        break;
 800adfe:	e00e      	b.n	800ae1e <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	085b      	lsrs	r3, r3, #1
 800ae06:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	61bb      	str	r3, [r7, #24]
        break;
 800ae16:	e002      	b.n	800ae1e <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	75fb      	strb	r3, [r7, #23]
        break;
 800ae1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b0f      	cmp	r3, #15
 800ae22:	d916      	bls.n	800ae52 <UART_SetConfig+0x31e>
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae2a:	d212      	bcs.n	800ae52 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	f023 030f 	bic.w	r3, r3, #15
 800ae34:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	085b      	lsrs	r3, r3, #1
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	f003 0307 	and.w	r3, r3, #7
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	897b      	ldrh	r3, [r7, #10]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	897a      	ldrh	r2, [r7, #10]
 800ae4e:	60da      	str	r2, [r3, #12]
 800ae50:	e07e      	b.n	800af50 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	75fb      	strb	r3, [r7, #23]
 800ae56:	e07b      	b.n	800af50 <UART_SetConfig+0x41c>
 800ae58:	40013800 	.word	0x40013800
 800ae5c:	40021000 	.word	0x40021000
 800ae60:	40004400 	.word	0x40004400
 800ae64:	40004800 	.word	0x40004800
 800ae68:	40004c00 	.word	0x40004c00
 800ae6c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 800ae70:	7ffb      	ldrb	r3, [r7, #31]
 800ae72:	2b08      	cmp	r3, #8
 800ae74:	d85b      	bhi.n	800af2e <UART_SetConfig+0x3fa>
 800ae76:	a201      	add	r2, pc, #4	; (adr r2, 800ae7c <UART_SetConfig+0x348>)
 800ae78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae7c:	0800aea1 	.word	0x0800aea1
 800ae80:	0800aebf 	.word	0x0800aebf
 800ae84:	0800aedd 	.word	0x0800aedd
 800ae88:	0800af2f 	.word	0x0800af2f
 800ae8c:	0800aef9 	.word	0x0800aef9
 800ae90:	0800af2f 	.word	0x0800af2f
 800ae94:	0800af2f 	.word	0x0800af2f
 800ae98:	0800af2f 	.word	0x0800af2f
 800ae9c:	0800af17 	.word	0x0800af17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aea0:	f7fd ff2e 	bl	8008d00 <HAL_RCC_GetPCLK1Freq>
 800aea4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	085a      	lsrs	r2, r3, #1
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	441a      	add	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	61bb      	str	r3, [r7, #24]
        break;
 800aebc:	e03a      	b.n	800af34 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aebe:	f7fd ff41 	bl	8008d44 <HAL_RCC_GetPCLK2Freq>
 800aec2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	085a      	lsrs	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	441a      	add	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	61bb      	str	r3, [r7, #24]
        break;
 800aeda:	e02b      	b.n	800af34 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	085b      	lsrs	r3, r3, #1
 800aee2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800aee6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800aeea:	687a      	ldr	r2, [r7, #4]
 800aeec:	6852      	ldr	r2, [r2, #4]
 800aeee:	fbb3 f3f2 	udiv	r3, r3, r2
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	61bb      	str	r3, [r7, #24]
        break;
 800aef6:	e01d      	b.n	800af34 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aef8:	f7fd fe8c 	bl	8008c14 <HAL_RCC_GetSysClockFreq>
 800aefc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	085a      	lsrs	r2, r3, #1
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	441a      	add	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af10:	b29b      	uxth	r3, r3
 800af12:	61bb      	str	r3, [r7, #24]
        break;
 800af14:	e00e      	b.n	800af34 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	085b      	lsrs	r3, r3, #1
 800af1c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	fbb2 f3f3 	udiv	r3, r2, r3
 800af28:	b29b      	uxth	r3, r3
 800af2a:	61bb      	str	r3, [r7, #24]
        break;
 800af2c:	e002      	b.n	800af34 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	75fb      	strb	r3, [r7, #23]
        break;
 800af32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af34:	69bb      	ldr	r3, [r7, #24]
 800af36:	2b0f      	cmp	r3, #15
 800af38:	d908      	bls.n	800af4c <UART_SetConfig+0x418>
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af40:	d204      	bcs.n	800af4c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	69ba      	ldr	r2, [r7, #24]
 800af48:	60da      	str	r2, [r3, #12]
 800af4a:	e001      	b.n	800af50 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop

0800af68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00a      	beq.n	800af92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	430a      	orrs	r2, r1
 800af90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00a      	beq.n	800afd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	f003 0308 	and.w	r3, r3, #8
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affc:	f003 0310 	and.w	r3, r3, #16
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00a      	beq.n	800b03c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01a      	beq.n	800b07e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b066:	d10a      	bne.n	800b07e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00a      	beq.n	800b0a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	430a      	orrs	r2, r1
 800b09e:	605a      	str	r2, [r3, #4]
  }
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b0ba:	f7fa feb9 	bl	8005e30 <HAL_GetTick>
 800b0be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b08      	cmp	r3, #8
 800b0cc:	d10e      	bne.n	800b0ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f82a 	bl	800b136 <UART_WaitOnFlagUntilTimeout>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e020      	b.n	800b12e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 0304 	and.w	r3, r3, #4
 800b0f6:	2b04      	cmp	r3, #4
 800b0f8:	d10e      	bne.n	800b118 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f814 	bl	800b136 <UART_WaitOnFlagUntilTimeout>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b114:	2303      	movs	r3, #3
 800b116:	e00a      	b.n	800b12e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2220      	movs	r2, #32
 800b11c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2220      	movs	r2, #32
 800b122:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	603b      	str	r3, [r7, #0]
 800b142:	4613      	mov	r3, r2
 800b144:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b146:	e05d      	b.n	800b204 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14e:	d059      	beq.n	800b204 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b150:	f7fa fe6e 	bl	8005e30 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	69ba      	ldr	r2, [r7, #24]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d302      	bcc.n	800b166 <UART_WaitOnFlagUntilTimeout+0x30>
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d11b      	bne.n	800b19e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b174:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 0201 	bic.w	r2, r2, #1
 800b184:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2220      	movs	r2, #32
 800b18a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2220      	movs	r2, #32
 800b190:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e042      	b.n	800b224 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d02b      	beq.n	800b204 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1ba:	d123      	bne.n	800b204 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b1d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	689a      	ldr	r2, [r3, #8]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0201 	bic.w	r2, r2, #1
 800b1e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2220      	movs	r2, #32
 800b1ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2220      	movs	r2, #32
 800b1f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2220      	movs	r2, #32
 800b1f6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b200:	2303      	movs	r3, #3
 800b202:	e00f      	b.n	800b224 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	69da      	ldr	r2, [r3, #28]
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	4013      	ands	r3, r2
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	429a      	cmp	r2, r3
 800b212:	bf0c      	ite	eq
 800b214:	2301      	moveq	r3, #1
 800b216:	2300      	movne	r3, #0
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	461a      	mov	r2, r3
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d092      	beq.n	800b148 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b222:	2300      	movs	r3, #0
}
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}

0800b22c <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  return ( pHandle->AvBusVoltage_d );
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	88db      	ldrh	r3, [r3, #6]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	88db      	ldrh	r3, [r3, #6]
 800b250:	60fb      	str	r3, [r7, #12]
  temp *= pHandle->ConversionFactor;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	885b      	ldrh	r3, [r3, #2]
 800b256:	461a      	mov	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	fb02 f303 	mul.w	r3, r2, r3
 800b25e:	60fb      	str	r3, [r7, #12]
  temp /= 65536u;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	0c1b      	lsrs	r3, r3, #16
 800b264:	60fb      	str	r3, [r7, #12]

  return ( ( uint16_t )temp );
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	b29b      	uxth	r3, r3
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800b276:	b480      	push	{r7}
 800b278:	b089      	sub	sp, #36	; 0x24
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	60fb      	str	r3, [r7, #12]

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800b284:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b288:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b28c:	fb02 f203 	mul.w	r2, r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 800b290:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b294:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800b298:	fb01 f303 	mul.w	r3, r1, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800b29c:	4413      	add	r3, r2
 800b29e:	61fb      	str	r3, [r7, #28]

  uw_temp = ( uint32_t ) sw_temp;
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	61bb      	str	r3, [r7, #24]

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	fb03 f302 	mul.w	r3, r3, r2
 800b2b2:	69ba      	ldr	r2, [r7, #24]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d930      	bls.n	800b31a <Circle_Limitation+0xa4>
  {

    uw_temp /= ( uint32_t )( 16777216 );
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	0e1b      	lsrs	r3, r3, #24
 800b2bc:	61bb      	str	r3, [r7, #24]

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	1a9b      	subs	r3, r3, r2
 800b2ca:	61bb      	str	r3, [r7, #24]

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	4413      	add	r3, r2
 800b2d6:	889b      	ldrh	r3, [r3, #4]
 800b2d8:	82fb      	strh	r3, [r7, #22]

    sw_temp = Vqd.q * ( int32_t )table_element;
 800b2da:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	8afb      	ldrh	r3, [r7, #22]
 800b2e2:	fb03 f302 	mul.w	r3, r3, r2
 800b2e6:	61fb      	str	r3, [r7, #28]
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	da02      	bge.n	800b2f4 <Circle_Limitation+0x7e>
 800b2ee:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b2f2:	337f      	adds	r3, #127	; 0x7f
 800b2f4:	13db      	asrs	r3, r3, #15
 800b2f6:	b21b      	sxth	r3, r3
 800b2f8:	81bb      	strh	r3, [r7, #12]

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800b2fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2fe:	461a      	mov	r2, r3
 800b300:	8afb      	ldrh	r3, [r7, #22]
 800b302:	fb03 f302 	mul.w	r3, r3, r2
 800b306:	61fb      	str	r3, [r7, #28]
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da02      	bge.n	800b314 <Circle_Limitation+0x9e>
 800b30e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b312:	337f      	adds	r3, #127	; 0x7f
 800b314:	13db      	asrs	r3, r3, #15
 800b316:	b21b      	sxth	r3, r3
 800b318:	81fb      	strh	r3, [r7, #14]
  }

  return ( local_vqd );
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	613b      	str	r3, [r7, #16]
 800b31e:	2300      	movs	r3, #0
 800b320:	8a3a      	ldrh	r2, [r7, #16]
 800b322:	f362 030f 	bfi	r3, r2, #0, #16
 800b326:	8a7a      	ldrh	r2, [r7, #18]
 800b328:	f362 431f 	bfi	r3, r2, #16, #16
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3724      	adds	r7, #36	; 0x24
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	607a      	str	r2, [r7, #4]
 800b3aa:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00b      	beq.n	800b3ca <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	69ba      	ldr	r2, [r7, #24]
 800b3c8:	60da      	str	r2, [r3, #12]
  }
}
 800b3ca:	bf00      	nop
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b085      	sub	sp, #20
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d027      	beq.n	800b43c <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	89bb      	ldrh	r3, [r7, #12]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	785b      	ldrb	r3, [r3, #1]
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	89bb      	ldrh	r3, [r7, #12]
 800b400:	4413      	add	r3, r2
 800b402:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800b404:	2300      	movs	r3, #0
 800b406:	72fb      	strb	r3, [r7, #11]
 800b408:	e00a      	b.n	800b420 <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 800b40a:	7afb      	ldrb	r3, [r7, #11]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	4413      	add	r3, r2
 800b410:	789b      	ldrb	r3, [r3, #2]
 800b412:	b29a      	uxth	r2, r3
 800b414:	89bb      	ldrh	r3, [r7, #12]
 800b416:	4413      	add	r3, r2
 800b418:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800b41a:	7afb      	ldrb	r3, [r7, #11]
 800b41c:	3301      	adds	r3, #1
 800b41e:	72fb      	strb	r3, [r7, #11]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	785b      	ldrb	r3, [r3, #1]
 800b424:	7afa      	ldrb	r2, [r7, #11]
 800b426:	429a      	cmp	r2, r3
 800b428:	d3ef      	bcc.n	800b40a <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 800b42a:	89bb      	ldrh	r3, [r7, #12]
 800b42c:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800b42e:	89bb      	ldrh	r3, [r7, #12]
 800b430:	0a1b      	lsrs	r3, r3, #8
 800b432:	b29b      	uxth	r3, r3
 800b434:	b2da      	uxtb	r2, r3
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	4413      	add	r3, r2
 800b43a:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 800b43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3714      	adds	r7, #20
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b452:	2300      	movs	r3, #0
 800b454:	81fb      	strh	r3, [r7, #14]
 800b456:	e007      	b.n	800b468 <MPM_Clear+0x1e>
  {
    pHandle->hMeasBuffer[i] = 0;
 800b458:	89fa      	ldrh	r2, [r7, #14]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2100      	movs	r1, #0
 800b45e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b462:	89fb      	ldrh	r3, [r7, #14]
 800b464:	3301      	adds	r3, #1
 800b466:	81fb      	strh	r3, [r7, #14]
 800b468:	89fb      	ldrh	r3, [r7, #14]
 800b46a:	2b7f      	cmp	r3, #127	; 0x7f
 800b46c:	d9f4      	bls.n	800b458 <MPM_Clear+0xe>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

}
 800b47e:	bf00      	nop
 800b480:	3714      	adds	r7, #20
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr

0800b48a <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	460b      	mov	r3, r1
 800b494:	807b      	strh	r3, [r7, #2]
  uint16_t i;
  int32_t wAux = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	60bb      	str	r3, [r7, #8]

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	887a      	ldrh	r2, [r7, #2]
 800b4a6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
  pHandle->hNextMeasBufferIndex++;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b4bc:	3301      	adds	r3, #1
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800b4cc:	2b7f      	cmp	r3, #127	; 0x7f
 800b4ce:	d903      	bls.n	800b4d8 <MPM_CalcElMotorPower+0x4e>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b4d8:	2300      	movs	r3, #0
 800b4da:	81fb      	strh	r3, [r7, #14]
 800b4dc:	e00a      	b.n	800b4f4 <MPM_CalcElMotorPower+0x6a>
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800b4de:	89fa      	ldrh	r2, [r7, #14]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	60bb      	str	r3, [r7, #8]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800b4ee:	89fb      	ldrh	r3, [r7, #14]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	81fb      	strh	r3, [r7, #14]
 800b4f4:	89fb      	ldrh	r3, [r7, #14]
 800b4f6:	2b7f      	cmp	r3, #127	; 0x7f
 800b4f8:	d9f1      	bls.n	800b4de <MPM_CalcElMotorPower+0x54>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	da00      	bge.n	800b502 <MPM_CalcElMotorPower+0x78>
 800b500:	337f      	adds	r3, #127	; 0x7f
 800b502:	11db      	asrs	r3, r3, #7
 800b504:	60bb      	str	r3, [r7, #8]
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	b21a      	sxth	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
 800b510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <MPM_GetAvrgElMotorPowerW>:
  *         expressed in watt.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrgElMotorPowerW );
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
}
 800b52e:	4618      	mov	r0, r3
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <NTC_SetFaultState>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
 800b53a:	b480      	push	{r7}
 800b53c:	b085      	sub	sp, #20
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	8a1a      	ldrh	r2, [r3, #16]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	8b5b      	ldrh	r3, [r3, #26]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d902      	bls.n	800b554 <NTC_SetFaultState+0x1a>
  {
    hFault = MC_OVER_TEMP;
 800b54e:	2308      	movs	r3, #8
 800b550:	81fb      	strh	r3, [r7, #14]
 800b552:	e00b      	b.n	800b56c <NTC_SetFaultState+0x32>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	8a1a      	ldrh	r2, [r3, #16]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	8b9b      	ldrh	r3, [r3, #28]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d202      	bcs.n	800b566 <NTC_SetFaultState+0x2c>
  {
    hFault = MC_NO_ERROR;
 800b560:	2300      	movs	r3, #0
 800b562:	81fb      	strh	r3, [r7, #14]
 800b564:	e002      	b.n	800b56c <NTC_SetFaultState+0x32>
  }
  else
  {
    hFault = pHandle->hFaultState;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8adb      	ldrh	r3, [r3, #22]
 800b56a:	81fb      	strh	r3, [r7, #14]
  }
  return hFault;
 800b56c:	89fb      	ldrh	r3, [r7, #14]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
__weak void NTC_Init( NTC_Handle_t * pHandle )
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b082      	sub	sp, #8
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10d      	bne.n	800b5a6 <NTC_Init+0x2c>
  {
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	3304      	adds	r3, #4
 800b58e:	4618      	mov	r0, r3
 800b590:	f7f8 fbd6 	bl	8003d40 <RCM_RegisterRegConv>
 800b594:	4603      	mov	r3, r0
 800b596:	461a      	mov	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    NTC_Clear( pHandle );
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f80c 	bl	800b5bc <NTC_Clear>
  {
    pHandle->hFaultState = MC_NO_ERROR;
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
  }

}
 800b5a4:	e006      	b.n	800b5b4 <NTC_Init+0x3a>
    pHandle->hFaultState = MC_NO_ERROR;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	82da      	strh	r2, [r3, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	8a5a      	ldrh	r2, [r3, #18]
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	821a      	strh	r2, [r3, #16]
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <NTC_Clear>:
 * @brief Initializes internal average temperature computed value
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  pHandle->hAvTemp_d = 0u;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	821a      	strh	r2, [r3, #16]
}
 800b5ca:	bf00      	nop
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b084      	sub	sp, #16
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d12e      	bne.n	800b644 <NTC_CalcAvTemp+0x6e>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f8 fc5d 	bl	8003eac <RCM_ExecRegularConv>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	81fb      	strh	r3, [r7, #14]

    if ( hAux != 0xFFFFu )
 800b5f6:	89fb      	ldrh	r3, [r7, #14]
 800b5f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d019      	beq.n	800b634 <NTC_CalcAvTemp+0x5e>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	8b1b      	ldrh	r3, [r3, #24]
 800b604:	3b01      	subs	r3, #1
 800b606:	60bb      	str	r3, [r7, #8]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	8a1b      	ldrh	r3, [r3, #16]
 800b60c:	461a      	mov	r2, r3
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	fb02 f303 	mul.w	r3, r2, r3
 800b614:	60bb      	str	r3, [r7, #8]
      wtemp += hAux;
 800b616:	89fb      	ldrh	r3, [r7, #14]
 800b618:	68ba      	ldr	r2, [r7, #8]
 800b61a:	4413      	add	r3, r2
 800b61c:	60bb      	str	r3, [r7, #8]
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	8b1b      	ldrh	r3, [r3, #24]
 800b622:	461a      	mov	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	fbb3 f3f2 	udiv	r3, r3, r2
 800b62a:	60bb      	str	r3, [r7, #8]

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	b29a      	uxth	r2, r3
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	821a      	strh	r2, [r3, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7ff ff80 	bl	800b53a <NTC_SetFaultState>
 800b63a:	4603      	mov	r3, r0
 800b63c:	461a      	mov	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	82da      	strh	r2, [r3, #22]
 800b642:	e002      	b.n	800b64a <NTC_CalcAvTemp+0x74>
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	82da      	strh	r2, [r3, #22]
  }

  return ( pHandle->hFaultState );
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8adb      	ldrh	r3, [r3, #22]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <NTC_GetAvTemp_C>:
  * @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @r AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
 800b656:	b480      	push	{r7}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d11d      	bne.n	800b6a2 <NTC_GetAvTemp_C+0x4c>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	8a1b      	ldrh	r3, [r3, #16]
 800b66a:	60fb      	str	r3, [r7, #12]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	461a      	mov	r2, r3
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	60fb      	str	r3, [r7, #12]
    wTemp *= pHandle->hSensitivity;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800b67e:	461a      	mov	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	fb02 f303 	mul.w	r3, r2, r3
 800b686:	60fb      	str	r3, [r7, #12]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	da02      	bge.n	800b694 <NTC_GetAvTemp_C+0x3e>
 800b68e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b692:	33ff      	adds	r3, #255	; 0xff
 800b694:	141b      	asrs	r3, r3, #16
 800b696:	461a      	mov	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	e002      	b.n	800b6a8 <NTC_GetAvTemp_C+0x52>
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	8a9b      	ldrh	r3, [r3, #20]
 800b6a6:	60fb      	str	r3, [r7, #12]
  }
  return ( ( int16_t )wTemp );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	b21b      	sxth	r3, r3
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <PID_HandleInit>:
 * @brief  It initializes the handle
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	809a      	strh	r2, [r3, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	80da      	strh	r2, [r3, #6]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	845a      	strh	r2, [r3, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	609a      	str	r2, [r3, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b6ea:	bf00      	nop
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <PID_SetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	460b      	mov	r3, r1
 800b700:	807b      	strh	r3, [r7, #2]
  pHandle->hKpGain = hKpGain;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	887a      	ldrh	r2, [r7, #2]
 800b706:	809a      	strh	r2, [r3, #4]
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <PID_SetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	807b      	strh	r3, [r7, #2]
  pHandle->hKiGain = hKiGain;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	887a      	ldrh	r2, [r7, #2]
 800b724:	80da      	strh	r2, [r3, #6]
}
 800b726:	bf00      	nop
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <PID_GetKP>:
 * @brief  It returns the Kp gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpGain );
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800b740:	4618      	mov	r0, r3
 800b742:	370c      	adds	r7, #12
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <PID_GetKI>:
 * @brief  It returns the Ki gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiGain );
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <PID_SetIntegralTerm>:
 * pHandle: handler of the current instance of the PID component
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
 800b766:	b480      	push	{r7}
 800b768:	b083      	sub	sp, #12
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  pHandle->wIntegralTerm = wIntegralTermValue;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	609a      	str	r2, [r3, #8]

  return;
 800b776:	bf00      	nop
}
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <PID_GetKPDivisor>:
 * @brief  It returns the Kp gain divisor
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
 800b782:	b480      	push	{r7}
 800b784:	b083      	sub	sp, #12
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpDivisor );
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	8b1b      	ldrh	r3, [r3, #24]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	370c      	adds	r7, #12
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <PID_GetKIDivisor>:
 * @brief  It returns the Ki gain divisor of the passed PI object
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiDivisor );
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	8b5b      	ldrh	r3, [r3, #26]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <PID_SetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	807b      	strh	r3, [r7, #2]
  pHandle->hKdGain = hKdGain;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	887a      	ldrh	r2, [r7, #2]
 800b7c2:	845a      	strh	r2, [r3, #34]	; 0x22
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <PID_GetKD>:
 * @brief  It returns the Kd gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  return pHandle->hKdGain;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
	...

0800b7ec <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b089      	sub	sp, #36	; 0x24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	617b      	str	r3, [r7, #20]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	8a9b      	ldrh	r3, [r3, #20]
 800b7fe:	827b      	strh	r3, [r7, #18]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	8adb      	ldrh	r3, [r3, #22]
 800b804:	823b      	strh	r3, [r7, #16]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b80c:	461a      	mov	r2, r3
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	fb02 f303 	mul.w	r3, r2, r3
 800b814:	60fb      	str	r3, [r7, #12]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d103      	bne.n	800b828 <PI_Controller+0x3c>
  {
    pHandle->wIntegralTerm = 0;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	609a      	str	r2, [r3, #8]
 800b826:	e03a      	b.n	800b89e <PI_Controller+0xb2>
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b82e:	461a      	mov	r2, r3
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	fb02 f303 	mul.w	r3, r2, r3
 800b836:	60bb      	str	r3, [r7, #8]
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	4413      	add	r3, r2
 800b840:	61bb      	str	r3, [r7, #24]

    if ( wIntegral_sum_temp < 0 )
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	2b00      	cmp	r3, #0
 800b846:	da0a      	bge.n	800b85e <PI_Controller+0x72>
    {
      if ( pHandle->wIntegralTerm > 0 )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dd0f      	ble.n	800b870 <PI_Controller+0x84>
      {
        if ( wIntegral_Term > 0 )
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	dd0c      	ble.n	800b870 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = INT32_MAX;
 800b856:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b85a:	61bb      	str	r3, [r7, #24]
 800b85c:	e008      	b.n	800b870 <PI_Controller+0x84>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	da04      	bge.n	800b870 <PI_Controller+0x84>
      {
        if ( wIntegral_Term < 0 )
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	da01      	bge.n	800b870 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = -INT32_MAX;
 800b86c:	4b27      	ldr	r3, [pc, #156]	; (800b90c <PI_Controller+0x120>)
 800b86e:	61bb      	str	r3, [r7, #24]
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	429a      	cmp	r2, r3
 800b878:	dd04      	ble.n	800b884 <PI_Controller+0x98>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	68da      	ldr	r2, [r3, #12]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	609a      	str	r2, [r3, #8]
 800b882:	e00c      	b.n	800b89e <PI_Controller+0xb2>
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	69ba      	ldr	r2, [r7, #24]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	da04      	bge.n	800b898 <PI_Controller+0xac>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	691a      	ldr	r2, [r3, #16]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	609a      	str	r2, [r3, #8]
 800b896:	e002      	b.n	800b89e <PI_Controller+0xb2>
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	69ba      	ldr	r2, [r7, #24]
 800b89c:	609a      	str	r2, [r3, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	8b9b      	ldrh	r3, [r3, #28]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	fa43 f202 	asr.w	r2, r3, r2
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	6879      	ldr	r1, [r7, #4]
 800b8b0:	8bc9      	ldrh	r1, [r1, #30]
 800b8b2:	410b      	asrs	r3, r1
 800b8b4:	4413      	add	r3, r2
 800b8b6:	61fb      	str	r3, [r7, #28]
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800b8b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8bc:	69fa      	ldr	r2, [r7, #28]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	dd08      	ble.n	800b8d4 <PI_Controller+0xe8>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800b8c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	617b      	str	r3, [r7, #20]
    wOutput_32 = hUpperOutputLimit;
 800b8cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8d0:	61fb      	str	r3, [r7, #28]
 800b8d2:	e00c      	b.n	800b8ee <PI_Controller+0x102>
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 800b8d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b8d8:	69fa      	ldr	r2, [r7, #28]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	da07      	bge.n	800b8ee <PI_Controller+0x102>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 800b8de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b8e2:	69fb      	ldr	r3, [r7, #28]
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	617b      	str	r3, [r7, #20]
    wOutput_32 = hLowerOutputLimit;
 800b8e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b8ec:	61fb      	str	r3, [r7, #28]
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	689a      	ldr	r2, [r3, #8]
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	441a      	add	r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	609a      	str	r2, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	b21b      	sxth	r3, r3
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3724      	adds	r7, #36	; 0x24
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	80000001 	.word	0x80000001

0800b910 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 800b910:	b590      	push	{r4, r7, lr}
 800b912:	b089      	sub	sp, #36	; 0x24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b91e:	f107 0310 	add.w	r3, r7, #16
 800b922:	320c      	adds	r2, #12
 800b924:	6810      	ldr	r0, [r2, #0]
 800b926:	6018      	str	r0, [r3, #0]
  qd_t Vqd = pHandle->pFOCVars->Vqd;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b92e:	f107 030c 	add.w	r3, r7, #12
 800b932:	3216      	adds	r2, #22
 800b934:	6810      	ldr	r0, [r2, #0]
 800b936:	6018      	str	r0, [r3, #0]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800b938:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b93c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b940:	fb02 f203 	mul.w	r2, r2, r3
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800b944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b948:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800b94c:	fb01 f303 	mul.w	r3, r1, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800b950:	4413      	add	r3, r2
 800b952:	61fb      	str	r3, [r7, #28]
  wAux /= 65536;
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	2b00      	cmp	r3, #0
 800b958:	da02      	bge.n	800b960 <PQD_CalcElMotorPower+0x50>
 800b95a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b95e:	33ff      	adds	r3, #255	; 0xff
 800b960:	141b      	asrs	r3, r3, #16
 800b962:	61fb      	str	r3, [r7, #28]

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff fc67 	bl	800b244 <VBS_GetAvBusVoltage_V>
 800b976:	4603      	mov	r3, r0
 800b978:	fb03 f304 	mul.w	r3, r3, r4
 800b97c:	61bb      	str	r3, [r7, #24]
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	4a16      	ldr	r2, [pc, #88]	; (800b9dc <PQD_CalcElMotorPower+0xcc>)
 800b982:	fb82 1203 	smull	r1, r2, r2, r3
 800b986:	1192      	asrs	r2, r2, #6
 800b988:	17db      	asrs	r3, r3, #31
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	61bb      	str	r3, [r7, #24]

  wAux3 = wAux * wAux2;
 800b98e:	69fb      	ldr	r3, [r7, #28]
 800b990:	69ba      	ldr	r2, [r7, #24]
 800b992:	fb02 f303 	mul.w	r3, r2, r3
 800b996:	617b      	str	r3, [r7, #20]
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	4613      	mov	r3, r2
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4413      	add	r3, r2
 800b9a0:	005b      	lsls	r3, r3, #1
 800b9a2:	617b      	str	r3, [r7, #20]
  wAux3 /= 10;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	4a0e      	ldr	r2, [pc, #56]	; (800b9e0 <PQD_CalcElMotorPower+0xd0>)
 800b9a8:	fb82 1203 	smull	r1, r2, r2, r3
 800b9ac:	1092      	asrs	r2, r2, #2
 800b9ae:	17db      	asrs	r3, r3, #31
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	617b      	str	r3, [r7, #20]
  wAux3 /= 65536;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	da02      	bge.n	800b9c0 <PQD_CalcElMotorPower+0xb0>
 800b9ba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b9be:	33ff      	adds	r3, #255	; 0xff
 800b9c0:	141b      	asrs	r3, r3, #16
 800b9c2:	617b      	str	r3, [r7, #20]

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	697a      	ldr	r2, [r7, #20]
 800b9c8:	b212      	sxth	r2, r2
 800b9ca:	4611      	mov	r1, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7ff fd5c 	bl	800b48a <MPM_CalcElMotorPower>

}
 800b9d2:	bf00      	nop
 800b9d4:	3724      	adds	r7, #36	; 0x24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd90      	pop	{r4, r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	1b4e81b5 	.word	0x1b4e81b5
 800b9e0:	66666667 	.word	0x66666667

0800b9e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b085      	sub	sp, #20
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800b9ec:	4b08      	ldr	r3, [pc, #32]	; (800ba10 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b9ee:	69da      	ldr	r2, [r3, #28]
 800b9f0:	4907      	ldr	r1, [pc, #28]	; (800ba10 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b9f8:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b9fa:	69da      	ldr	r2, [r3, #28]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4013      	ands	r3, r2
 800ba00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ba02:	68fb      	ldr	r3, [r7, #12]
}
 800ba04:	bf00      	nop
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	40021000 	.word	0x40021000

0800ba14 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800ba1c:	4b07      	ldr	r3, [pc, #28]	; (800ba3c <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800ba1e:	69da      	ldr	r2, [r3, #28]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4013      	ands	r3, r2
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	bf0c      	ite	eq
 800ba2a:	2301      	moveq	r3, #1
 800ba2c:	2300      	movne	r3, #0
 800ba2e:	b2db      	uxtb	r3, r3
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	40021000 	.word	0x40021000

0800ba40 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800ba48:	4b06      	ldr	r3, [pc, #24]	; (800ba64 <LL_APB1_GRP1_DisableClock+0x24>)
 800ba4a:	69da      	ldr	r2, [r3, #28]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	43db      	mvns	r3, r3
 800ba50:	4904      	ldr	r1, [pc, #16]	; (800ba64 <LL_APB1_GRP1_DisableClock+0x24>)
 800ba52:	4013      	ands	r3, r2
 800ba54:	61cb      	str	r3, [r1, #28]
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	40021000 	.word	0x40021000

0800ba68 <LL_TIM_GetCounterMode>:
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <LL_TIM_SetTriggerOutput>:
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	605a      	str	r2, [r3, #4]
}
 800ba9e:	bf00      	nop
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <LL_TIM_ClearFlag_CC1>:
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f06f 0202 	mvn.w	r2, #2
 800bab8:	611a      	str	r2, [r3, #16]
}
 800baba:	bf00      	nop
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <LL_TIM_IsActiveFlag_CC1>:
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	f003 0302 	and.w	r3, r3, #2
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d101      	bne.n	800bade <LL_TIM_IsActiveFlag_CC1+0x18>
 800bada:	2301      	movs	r3, #1
 800badc:	e000      	b.n	800bae0 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	f043 0201 	orr.w	r2, r3, #1
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	615a      	str	r2, [r3, #20]
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800bb12:	2001      	movs	r0, #1
 800bb14:	f7ff ff7e 	bl	800ba14 <LL_APB1_GRP1_IsEnabledClock>
 800bb18:	6078      	str	r0, [r7, #4]
  if ( isTIM2ClockOn == 0 )
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10a      	bne.n	800bb36 <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800bb20:	2001      	movs	r0, #1
 800bb22:	f7ff ff5f 	bl	800b9e4 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800bb26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bb2a:	f7ff ffdf 	bl	800baec <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800bb2e:	2001      	movs	r0, #1
 800bb30:	f7ff ff86 	bl	800ba40 <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800bb34:	e013      	b.n	800bb5e <startTimers+0x52>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800bb36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb40:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
 800bb42:	2120      	movs	r1, #32
 800bb44:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bb48:	f7ff ff9c 	bl	800ba84 <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800bb4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bb50:	f7ff ffcc 	bl	800baec <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
 800bb54:	6839      	ldr	r1, [r7, #0]
 800bb56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800bb5a:	f7ff ff93 	bl	800ba84 <LL_TIM_SetTriggerOutput>
}
 800bb5e:	bf00      	nop
 800bb60:	3708      	adds	r7, #8
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b086      	sub	sp, #24
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	60f8      	str	r0, [r7, #12]
 800bb6e:	60b9      	str	r1, [r7, #8]
 800bb70:	603b      	str	r3, [r7, #0]
 800bb72:	4613      	mov	r3, r2
 800bb74:	71fb      	strb	r3, [r7, #7]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f7ff ff76 	bl	800ba68 <LL_TIM_GetCounterMode>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb82:	2b60      	cmp	r3, #96	; 0x60
 800bb84:	d105      	bne.n	800bb92 <waitForPolarizationEnd+0x2c>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	015b      	lsls	r3, r3, #5
 800bb8e:	82bb      	strh	r3, [r7, #20]
 800bb90:	e005      	b.n	800bb9e <waitForPolarizationEnd+0x38>
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	3301      	adds	r3, #1
 800bb96:	085b      	lsrs	r3, r3, #1
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	015b      	lsls	r3, r3, #5
 800bb9c:	82bb      	strh	r3, [r7, #20]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff ff83 	bl	800baaa <LL_TIM_ClearFlag_CC1>
  hCalibrationPeriodCounter = 0u;
 800bba4:	2300      	movs	r3, #0
 800bba6:	82fb      	strh	r3, [r7, #22]
  while (*cnt < NB_CONVERSIONS)
 800bba8:	e017      	b.n	800bbda <waitForPolarizationEnd+0x74>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f7ff ff8b 	bl	800bac6 <LL_TIM_IsActiveFlag_CC1>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d011      	beq.n	800bbda <waitForPolarizationEnd+0x74>
    {
      LL_TIM_ClearFlag_CC1(TIMx);
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	f7ff ff77 	bl	800baaa <LL_TIM_ClearFlag_CC1>
      hCalibrationPeriodCounter++;
 800bbbc:	8afb      	ldrh	r3, [r7, #22]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	82fb      	strh	r3, [r7, #22]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800bbc2:	8afa      	ldrh	r2, [r7, #22]
 800bbc4:	8abb      	ldrh	r3, [r7, #20]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d307      	bcc.n	800bbda <waitForPolarizationEnd+0x74>
      {
        if (*cnt < NB_CONVERSIONS)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	2b0f      	cmp	r3, #15
 800bbd0:	d803      	bhi.n	800bbda <waitForPolarizationEnd+0x74>
        {
          *SWerror = 1u;
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	801a      	strh	r2, [r3, #0]
          break;
 800bbd8:	e003      	b.n	800bbe2 <waitForPolarizationEnd+0x7c>
  while (*cnt < NB_CONVERSIONS)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b0f      	cmp	r3, #15
 800bbe0:	d9e3      	bls.n	800bbaa <waitForPolarizationEnd+0x44>
        }
      }
    }
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b082      	sub	sp, #8
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	6039      	str	r1, [r7, #0]
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	4798      	blx	r3
}
 800bbfe:	bf00      	nop
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b08a      	sub	sp, #40	; 0x28
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800bc10:	f9b7 3000 	ldrsh.w	r3, [r7]
 800bc14:	461a      	mov	r2, r3
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800bc1a:	fb03 f302 	mul.w	r3, r3, r2
 800bc1e:	61bb      	str	r3, [r7, #24]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800bc20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bc24:	461a      	mov	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc2c:	fb03 f202 	mul.w	r2, r3, r2
 800bc30:	4613      	mov	r3, r2
 800bc32:	07db      	lsls	r3, r3, #31
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	005b      	lsls	r3, r3, #1
 800bc38:	617b      	str	r3, [r7, #20]

  wX = wUBeta;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	613b      	str	r3, [r7, #16]
  wY = ( wUBeta + wUAlpha ) / 2;
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	4413      	add	r3, r2
 800bc44:	0fda      	lsrs	r2, r3, #31
 800bc46:	4413      	add	r3, r2
 800bc48:	105b      	asrs	r3, r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
  wZ = ( wUBeta - wUAlpha ) / 2;
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	0fda      	lsrs	r2, r3, #31
 800bc54:	4413      	add	r3, r2
 800bc56:	105b      	asrs	r3, r3, #1
 800bc58:	60bb      	str	r3, [r7, #8]

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f280 80bd 	bge.w	800bddc <PWMC_SetPhaseVoltage+0x1d6>
  {
    if ( wZ < 0 )
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	da3c      	bge.n	800bce2 <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_5;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc76:	089b      	lsrs	r3, r3, #2
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	68fa      	ldr	r2, [r7, #12]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	da03      	bge.n	800bc8e <PWMC_SetPhaseVoltage+0x88>
 800bc86:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800bc8a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bc8e:	149b      	asrs	r3, r3, #18
 800bc90:	440b      	add	r3, r1
 800bc92:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	da03      	bge.n	800bca2 <PWMC_SetPhaseVoltage+0x9c>
 800bc9a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bc9e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bca2:	145b      	asrs	r3, r3, #17
 800bca4:	461a      	mov	r2, r3
 800bca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca8:	4413      	add	r3, r2
 800bcaa:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	da03      	bge.n	800bcba <PWMC_SetPhaseVoltage+0xb4>
 800bcb2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bcb6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bcba:	145b      	asrs	r3, r3, #17
 800bcbc:	425b      	negs	r3, r3
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	4413      	add	r3, r2
 800bcc4:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhC;
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800bcd6:	6a3b      	ldr	r3, [r7, #32]
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800bce0:	e138      	b.n	800bf54 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ >= 0 */
      if ( wX <= 0 )
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dc3c      	bgt.n	800bd62 <PWMC_SetPhaseVoltage+0x15c>
      {
        pHandle->Sector = SECTOR_4;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2203      	movs	r2, #3
 800bcec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcf6:	089b      	lsrs	r3, r3, #2
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	da03      	bge.n	800bd0e <PWMC_SetPhaseVoltage+0x108>
 800bd06:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800bd0a:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bd0e:	149b      	asrs	r3, r3, #18
 800bd10:	440b      	add	r3, r1
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	da03      	bge.n	800bd22 <PWMC_SetPhaseVoltage+0x11c>
 800bd1a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bd1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd22:	145b      	asrs	r3, r3, #17
 800bd24:	461a      	mov	r2, r3
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	4413      	add	r3, r2
 800bd2a:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	da03      	bge.n	800bd3a <PWMC_SetPhaseVoltage+0x134>
 800bd32:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bd36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd3a:	145b      	asrs	r3, r3, #17
 800bd3c:	425b      	negs	r3, r3
 800bd3e:	461a      	mov	r2, r3
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	4413      	add	r3, r2
 800bd44:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhC;
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800bd60:	e0f8      	b.n	800bf54 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_3;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2202      	movs	r2, #2
 800bd66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd70:	089b      	lsrs	r3, r3, #2
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	4619      	mov	r1, r3
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	da03      	bge.n	800bd88 <PWMC_SetPhaseVoltage+0x182>
 800bd80:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800bd84:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bd88:	149b      	asrs	r3, r3, #18
 800bd8a:	440b      	add	r3, r1
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	da03      	bge.n	800bd9c <PWMC_SetPhaseVoltage+0x196>
 800bd94:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bd98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bd9c:	145b      	asrs	r3, r3, #17
 800bd9e:	425b      	negs	r3, r3
 800bda0:	461a      	mov	r2, r3
 800bda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda4:	4413      	add	r3, r2
 800bda6:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	da03      	bge.n	800bdb6 <PWMC_SetPhaseVoltage+0x1b0>
 800bdae:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bdb2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bdb6:	145b      	asrs	r3, r3, #17
 800bdb8:	461a      	mov	r2, r3
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhB;
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800bdda:	e0bb      	b.n	800bf54 <PWMC_SetPhaseVoltage+0x34e>
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	db3c      	blt.n	800be5c <PWMC_SetPhaseVoltage+0x256>
    {
      pHandle->Sector = SECTOR_2;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdf0:	089b      	lsrs	r3, r3, #2
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	da03      	bge.n	800be08 <PWMC_SetPhaseVoltage+0x202>
 800be00:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800be04:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800be08:	149b      	asrs	r3, r3, #18
 800be0a:	440b      	add	r3, r1
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	da03      	bge.n	800be1c <PWMC_SetPhaseVoltage+0x216>
 800be14:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800be18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be1c:	145b      	asrs	r3, r3, #17
 800be1e:	461a      	mov	r2, r3
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	4413      	add	r3, r2
 800be24:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	da03      	bge.n	800be34 <PWMC_SetPhaseVoltage+0x22e>
 800be2c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800be30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be34:	145b      	asrs	r3, r3, #17
 800be36:	425b      	negs	r3, r3
 800be38:	461a      	mov	r2, r3
 800be3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3c:	4413      	add	r3, r2
 800be3e:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhB;
 800be40:	6a3b      	ldr	r3, [r7, #32]
 800be42:	b29a      	uxth	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	b29a      	uxth	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800be5a:	e07b      	b.n	800bf54 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ < 0 */
      if ( wX <= 0 )
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	dc3c      	bgt.n	800bedc <PWMC_SetPhaseVoltage+0x2d6>
      {
        pHandle->Sector = SECTOR_6;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2205      	movs	r2, #5
 800be66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be70:	089b      	lsrs	r3, r3, #2
 800be72:	b29b      	uxth	r3, r3
 800be74:	4619      	mov	r1, r3
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	da03      	bge.n	800be88 <PWMC_SetPhaseVoltage+0x282>
 800be80:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800be84:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800be88:	149b      	asrs	r3, r3, #18
 800be8a:	440b      	add	r3, r1
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	da03      	bge.n	800be9c <PWMC_SetPhaseVoltage+0x296>
 800be94:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800be98:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800be9c:	145b      	asrs	r3, r3, #17
 800be9e:	425b      	negs	r3, r3
 800bea0:	461a      	mov	r2, r3
 800bea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea4:	4413      	add	r3, r2
 800bea6:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da03      	bge.n	800beb6 <PWMC_SetPhaseVoltage+0x2b0>
 800beae:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800beb2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800beb6:	145b      	asrs	r3, r3, #17
 800beb8:	461a      	mov	r2, r3
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	4413      	add	r3, r2
 800bebe:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhA;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	b29a      	uxth	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800beda:	e03b      	b.n	800bf54 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_1;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beea:	089b      	lsrs	r3, r3, #2
 800beec:	b29b      	uxth	r3, r3
 800beee:	4619      	mov	r1, r3
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	da03      	bge.n	800bf02 <PWMC_SetPhaseVoltage+0x2fc>
 800befa:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800befe:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800bf02:	149b      	asrs	r3, r3, #18
 800bf04:	440b      	add	r3, r1
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da03      	bge.n	800bf16 <PWMC_SetPhaseVoltage+0x310>
 800bf0e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bf12:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bf16:	145b      	asrs	r3, r3, #17
 800bf18:	461a      	mov	r2, r3
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	4413      	add	r3, r2
 800bf1e:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	da03      	bge.n	800bf2e <PWMC_SetPhaseVoltage+0x328>
 800bf26:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800bf2a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bf2e:	145b      	asrs	r3, r3, #17
 800bf30:	425b      	negs	r3, r3
 800bf32:	461a      	mov	r2, r3
 800bf34:	6a3b      	ldr	r3, [r7, #32]
 800bf36:	4413      	add	r3, r2
 800bf38:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhA;
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800bf42:	6a3b      	ldr	r3, [r7, #32]
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }
  }

  pHandle->CntPhA = ( uint16_t )wTimePhA;
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	865a      	strh	r2, [r3, #50]	; 0x32
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	869a      	strh	r2, [r3, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	86da      	strh	r2, [r3, #54]	; 0x36

  if ( pHandle->DTTest == 1u )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d147      	bne.n	800c006 <PWMC_SetPhaseVoltage+0x400>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	dd09      	ble.n	800bf94 <PWMC_SetPhaseVoltage+0x38e>
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf8a:	4413      	add	r3, r2
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	865a      	strh	r2, [r3, #50]	; 0x32
 800bf92:	e008      	b.n	800bfa6 <PWMC_SetPhaseVoltage+0x3a0>
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dd09      	ble.n	800bfc4 <PWMC_SetPhaseVoltage+0x3be>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bfba:	4413      	add	r3, r2
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	869a      	strh	r2, [r3, #52]	; 0x34
 800bfc2:	e008      	b.n	800bfd6 <PWMC_SetPhaseVoltage+0x3d0>
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	869a      	strh	r2, [r3, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dd09      	ble.n	800bff4 <PWMC_SetPhaseVoltage+0x3ee>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bfea:	4413      	add	r3, r2
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	86da      	strh	r2, [r3, #54]	; 0x36
 800bff2:	e008      	b.n	800c006 <PWMC_SetPhaseVoltage+0x400>
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	b29a      	uxth	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	86da      	strh	r2, [r3, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	4798      	blx	r3
 800c00e:	4603      	mov	r3, r0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3728      	adds	r7, #40	; 0x28
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  pHandle->pFctSwitchOffPwm( pHandle );
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	4798      	blx	r3
}
 800c028:	bf00      	nop
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73fb      	strb	r3, [r7, #15]
  if ( action == CRC_START )
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d114      	bne.n	800c070 <PWMC_CurrentReadingCalibr+0x40>
  {
    PWMC_SwitchOffPWM( pHandle );
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff ffe6 	bl	800c018 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d124      	bne.n	800c0ac <PWMC_CurrentReadingCalibr+0x7c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	4798      	blx	r3
      retVal = true;
 800c06a:	2301      	movs	r3, #1
 800c06c:	73fb      	strb	r3, [r7, #15]
 800c06e:	e01d      	b.n	800c0ac <PWMC_CurrentReadingCalibr+0x7c>
    }
  }
  else if ( action == CRC_EXEC )
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d11a      	bne.n	800c0ac <PWMC_CurrentReadingCalibr+0x7c>
  {
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d013      	beq.n	800c0a8 <PWMC_CurrentReadingCalibr+0x78>
    {
      pHandle->OffCalibrWaitTimeCounter--;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c086:	3b01      	subs	r3, #1
 800c088:	b29a      	uxth	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c096:	2b00      	cmp	r3, #0
 800c098:	d108      	bne.n	800c0ac <PWMC_CurrentReadingCalibr+0x7c>
      {
        pHandle->pFctCurrReadingCalib( pHandle );
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	4798      	blx	r3
        retVal = true;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	73fb      	strb	r3, [r7, #15]
 800c0a6:	e001      	b.n	800c0ac <PWMC_CurrentReadingCalibr+0x7c>
      }
    }
    else
    {
      retVal = true;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  else
  {
  }
  return retVal;
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
 800c0c6:	4603      	mov	r3, r0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800c0d8:	4b05      	ldr	r3, [pc, #20]	; (800c0f0 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800c0da:	68da      	ldr	r2, [r3, #12]
 800c0dc:	4904      	ldr	r1, [pc, #16]	; (800c0f0 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	60cb      	str	r3, [r1, #12]
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	e0042000 	.word	0xe0042000

0800c0f4 <LL_ADC_INJ_SetSequencerDiscont>:
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	431a      	orrs	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	60da      	str	r2, [r3, #12]
}
 800c10e:	bf00      	nop
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <LL_ADC_INJ_SetQueueMode>:
{
 800c11a:	b480      	push	{r7}
 800c11c:	b083      	sub	sp, #12
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	60da      	str	r2, [r3, #12]
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <LL_ADC_EnableInternalRegulator>:
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800c15c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c160:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	609a      	str	r2, [r3, #8]
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <LL_ADC_IsInternalRegulatorEnabled>:
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	689b      	ldr	r3, [r3, #8]
 800c180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c188:	bf0c      	ite	eq
 800c18a:	2301      	moveq	r3, #1
 800c18c:	2300      	movne	r3, #0
 800c18e:	b2db      	uxtb	r3, r3
}
 800c190:	4618      	mov	r0, r3
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <LL_ADC_Enable>:
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c1b0:	f043 0201 	orr.w	r2, r3, #1
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	609a      	str	r2, [r3, #8]
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <LL_ADC_IsEnabled>:
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	bf0c      	ite	eq
 800c1d8:	2301      	moveq	r3, #1
 800c1da:	2300      	movne	r3, #0
 800c1dc:	b2db      	uxtb	r3, r3
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr

0800c1ea <LL_ADC_StartCalibration>:
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b083      	sub	sp, #12
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c1fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800c206:	4313      	orrs	r3, r2
 800c208:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	609a      	str	r2, [r3, #8]
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <LL_ADC_IsCalibrationOnGoing>:
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c22c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c230:	bf0c      	ite	eq
 800c232:	2301      	moveq	r3, #1
 800c234:	2300      	movne	r3, #0
 800c236:	b2db      	uxtb	r3, r3
}
 800c238:	4618      	mov	r0, r3
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <LL_ADC_INJ_StartConversion>:
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c254:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c258:	f043 0208 	orr.w	r2, r3, #8
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	609a      	str	r2, [r3, #8]
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <LL_ADC_INJ_StopConversion>:
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c27c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c280:	f043 0220 	orr.w	r2, r3, #32
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	609a      	str	r2, [r3, #8]
}
 800c288:	bf00      	nop
 800c28a:	370c      	adds	r7, #12
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <LL_ADC_IsActiveFlag_ADRDY>:
{
 800c294:	b480      	push	{r7}
 800c296:	b083      	sub	sp, #12
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	bf0c      	ite	eq
 800c2a8:	2301      	moveq	r3, #1
 800c2aa:	2300      	movne	r3, #0
 800c2ac:	b2db      	uxtb	r3, r3
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	370c      	adds	r7, #12
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <LL_ADC_ClearFlag_EOC>:
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2204      	movs	r2, #4
 800c2c6:	601a      	str	r2, [r3, #0]
}
 800c2c8:	bf00      	nop
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <LL_ADC_ClearFlag_JEOC>:
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	601a      	str	r2, [r3, #0]
}
 800c2e2:	bf00      	nop
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <LL_ADC_ClearFlag_JEOS>:
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2240      	movs	r2, #64	; 0x40
 800c2fa:	601a      	str	r2, [r3, #0]
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <LL_ADC_EnableIT_JEOS>:
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	605a      	str	r2, [r3, #4]
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <LL_ADC_DisableIT_EOC>:
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f023 0204 	bic.w	r2, r3, #4
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	605a      	str	r2, [r3, #4]
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <LL_ADC_DisableIT_JEOC>:
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	f023 0220 	bic.w	r2, r3, #32
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	605a      	str	r2, [r3, #4]
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <LL_TIM_DisableCounter>:
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f023 0201 	bic.w	r2, r3, #1
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	601a      	str	r2, [r3, #0]
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <LL_TIM_SetCounter>:
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <LL_TIM_SetRepetitionCounter>:
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <LL_TIM_CC_EnableChannel>:
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a1a      	ldr	r2, [r3, #32]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	431a      	orrs	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	621a      	str	r2, [r3, #32]
}
 800c3d6:	bf00      	nop
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <LL_TIM_CC_DisableChannel>:
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
 800c3ea:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6a1a      	ldr	r2, [r3, #32]
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	43db      	mvns	r3, r3
 800c3f4:	401a      	ands	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	621a      	str	r2, [r3, #32]
}
 800c3fa:	bf00      	nop
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
	...

0800c408 <LL_TIM_OC_SetMode>:
{
 800c408:	b4b0      	push	{r4, r5, r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b01      	cmp	r3, #1
 800c418:	d028      	beq.n	800c46c <LL_TIM_OC_SetMode+0x64>
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b04      	cmp	r3, #4
 800c41e:	d023      	beq.n	800c468 <LL_TIM_OC_SetMode+0x60>
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b10      	cmp	r3, #16
 800c424:	d01e      	beq.n	800c464 <LL_TIM_OC_SetMode+0x5c>
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	2b40      	cmp	r3, #64	; 0x40
 800c42a:	d019      	beq.n	800c460 <LL_TIM_OC_SetMode+0x58>
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c432:	d013      	beq.n	800c45c <LL_TIM_OC_SetMode+0x54>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c43a:	d00d      	beq.n	800c458 <LL_TIM_OC_SetMode+0x50>
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c442:	d007      	beq.n	800c454 <LL_TIM_OC_SetMode+0x4c>
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c44a:	d101      	bne.n	800c450 <LL_TIM_OC_SetMode+0x48>
 800c44c:	2307      	movs	r3, #7
 800c44e:	e00e      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c450:	2308      	movs	r3, #8
 800c452:	e00c      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c454:	2306      	movs	r3, #6
 800c456:	e00a      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c458:	2305      	movs	r3, #5
 800c45a:	e008      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c45c:	2304      	movs	r3, #4
 800c45e:	e006      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c460:	2303      	movs	r3, #3
 800c462:	e004      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c464:	2302      	movs	r3, #2
 800c466:	e002      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c468:	2301      	movs	r3, #1
 800c46a:	e000      	b.n	800c46e <LL_TIM_OC_SetMode+0x66>
 800c46c:	2300      	movs	r3, #0
 800c46e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	3318      	adds	r3, #24
 800c474:	461a      	mov	r2, r3
 800c476:	4629      	mov	r1, r5
 800c478:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <LL_TIM_OC_SetMode+0xa4>)
 800c47a:	5c5b      	ldrb	r3, [r3, r1]
 800c47c:	4413      	add	r3, r2
 800c47e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800c480:	6822      	ldr	r2, [r4, #0]
 800c482:	4629      	mov	r1, r5
 800c484:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <LL_TIM_OC_SetMode+0xa8>)
 800c486:	5c5b      	ldrb	r3, [r3, r1]
 800c488:	4619      	mov	r1, r3
 800c48a:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <LL_TIM_OC_SetMode+0xac>)
 800c48c:	408b      	lsls	r3, r1
 800c48e:	43db      	mvns	r3, r3
 800c490:	401a      	ands	r2, r3
 800c492:	4629      	mov	r1, r5
 800c494:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <LL_TIM_OC_SetMode+0xa8>)
 800c496:	5c5b      	ldrb	r3, [r3, r1]
 800c498:	4619      	mov	r1, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	408b      	lsls	r3, r1
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	6023      	str	r3, [r4, #0]
}
 800c4a2:	bf00      	nop
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bcb0      	pop	{r4, r5, r7}
 800c4aa:	4770      	bx	lr
 800c4ac:	0800fda0 	.word	0x0800fda0
 800c4b0:	0800fdac 	.word	0x0800fdac
 800c4b4:	00010073 	.word	0x00010073

0800c4b8 <LL_TIM_OC_EnablePreload>:
{
 800c4b8:	b4b0      	push	{r4, r5, r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d028      	beq.n	800c51a <LL_TIM_OC_EnablePreload+0x62>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b04      	cmp	r3, #4
 800c4cc:	d023      	beq.n	800c516 <LL_TIM_OC_EnablePreload+0x5e>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b10      	cmp	r3, #16
 800c4d2:	d01e      	beq.n	800c512 <LL_TIM_OC_EnablePreload+0x5a>
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	2b40      	cmp	r3, #64	; 0x40
 800c4d8:	d019      	beq.n	800c50e <LL_TIM_OC_EnablePreload+0x56>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4e0:	d013      	beq.n	800c50a <LL_TIM_OC_EnablePreload+0x52>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4e8:	d00d      	beq.n	800c506 <LL_TIM_OC_EnablePreload+0x4e>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4f0:	d007      	beq.n	800c502 <LL_TIM_OC_EnablePreload+0x4a>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4f8:	d101      	bne.n	800c4fe <LL_TIM_OC_EnablePreload+0x46>
 800c4fa:	2307      	movs	r3, #7
 800c4fc:	e00e      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c4fe:	2308      	movs	r3, #8
 800c500:	e00c      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c502:	2306      	movs	r3, #6
 800c504:	e00a      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c506:	2305      	movs	r3, #5
 800c508:	e008      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c50a:	2304      	movs	r3, #4
 800c50c:	e006      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c50e:	2303      	movs	r3, #3
 800c510:	e004      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c512:	2302      	movs	r3, #2
 800c514:	e002      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c516:	2301      	movs	r3, #1
 800c518:	e000      	b.n	800c51c <LL_TIM_OC_EnablePreload+0x64>
 800c51a:	2300      	movs	r3, #0
 800c51c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3318      	adds	r3, #24
 800c522:	461a      	mov	r2, r3
 800c524:	4629      	mov	r1, r5
 800c526:	4b09      	ldr	r3, [pc, #36]	; (800c54c <LL_TIM_OC_EnablePreload+0x94>)
 800c528:	5c5b      	ldrb	r3, [r3, r1]
 800c52a:	4413      	add	r3, r2
 800c52c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c52e:	6822      	ldr	r2, [r4, #0]
 800c530:	4629      	mov	r1, r5
 800c532:	4b07      	ldr	r3, [pc, #28]	; (800c550 <LL_TIM_OC_EnablePreload+0x98>)
 800c534:	5c5b      	ldrb	r3, [r3, r1]
 800c536:	4619      	mov	r1, r3
 800c538:	2308      	movs	r3, #8
 800c53a:	408b      	lsls	r3, r1
 800c53c:	4313      	orrs	r3, r2
 800c53e:	6023      	str	r3, [r4, #0]
}
 800c540:	bf00      	nop
 800c542:	370c      	adds	r7, #12
 800c544:	46bd      	mov	sp, r7
 800c546:	bcb0      	pop	{r4, r5, r7}
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	0800fda0 	.word	0x0800fda0
 800c550:	0800fdac 	.word	0x0800fdac

0800c554 <LL_TIM_OC_DisablePreload>:
{
 800c554:	b4b0      	push	{r4, r5, r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d028      	beq.n	800c5b6 <LL_TIM_OC_DisablePreload+0x62>
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b04      	cmp	r3, #4
 800c568:	d023      	beq.n	800c5b2 <LL_TIM_OC_DisablePreload+0x5e>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b10      	cmp	r3, #16
 800c56e:	d01e      	beq.n	800c5ae <LL_TIM_OC_DisablePreload+0x5a>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b40      	cmp	r3, #64	; 0x40
 800c574:	d019      	beq.n	800c5aa <LL_TIM_OC_DisablePreload+0x56>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c57c:	d013      	beq.n	800c5a6 <LL_TIM_OC_DisablePreload+0x52>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c584:	d00d      	beq.n	800c5a2 <LL_TIM_OC_DisablePreload+0x4e>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c58c:	d007      	beq.n	800c59e <LL_TIM_OC_DisablePreload+0x4a>
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c594:	d101      	bne.n	800c59a <LL_TIM_OC_DisablePreload+0x46>
 800c596:	2307      	movs	r3, #7
 800c598:	e00e      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c59a:	2308      	movs	r3, #8
 800c59c:	e00c      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c59e:	2306      	movs	r3, #6
 800c5a0:	e00a      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c5a2:	2305      	movs	r3, #5
 800c5a4:	e008      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c5a6:	2304      	movs	r3, #4
 800c5a8:	e006      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c5aa:	2303      	movs	r3, #3
 800c5ac:	e004      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e002      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e000      	b.n	800c5b8 <LL_TIM_OC_DisablePreload+0x64>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	3318      	adds	r3, #24
 800c5be:	461a      	mov	r2, r3
 800c5c0:	4629      	mov	r1, r5
 800c5c2:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <LL_TIM_OC_DisablePreload+0x94>)
 800c5c4:	5c5b      	ldrb	r3, [r3, r1]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c5ca:	6822      	ldr	r2, [r4, #0]
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <LL_TIM_OC_DisablePreload+0x98>)
 800c5d0:	5c5b      	ldrb	r3, [r3, r1]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	2308      	movs	r3, #8
 800c5d6:	408b      	lsls	r3, r1
 800c5d8:	43db      	mvns	r3, r3
 800c5da:	4013      	ands	r3, r2
 800c5dc:	6023      	str	r3, [r4, #0]
}
 800c5de:	bf00      	nop
 800c5e0:	370c      	adds	r7, #12
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bcb0      	pop	{r4, r5, r7}
 800c5e6:	4770      	bx	lr
 800c5e8:	0800fda0 	.word	0x0800fda0
 800c5ec:	0800fdac 	.word	0x0800fdac

0800c5f0 <LL_TIM_OC_SetCompareCH1>:
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	683a      	ldr	r2, [r7, #0]
 800c5fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <LL_TIM_OC_SetCompareCH2>:
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	683a      	ldr	r2, [r7, #0]
 800c61a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <LL_TIM_OC_SetCompareCH3>:
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <LL_TIM_OC_SetCompareCH4>:
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <LL_TIM_SetTriggerOutput>:
{
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	431a      	orrs	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	605a      	str	r2, [r3, #4]
}
 800c67a:	bf00      	nop
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr

0800c686 <LL_TIM_EnableAllOutputs>:
{
 800c686:	b480      	push	{r7}
 800c688:	b083      	sub	sp, #12
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c692:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	645a      	str	r2, [r3, #68]	; 0x44
}
 800c69a:	bf00      	nop
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <LL_TIM_DisableAllOutputs>:
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b083      	sub	sp, #12
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	645a      	str	r2, [r3, #68]	; 0x44
}
 800c6ba:	bf00      	nop
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <LL_TIM_ClearFlag_UPDATE>:
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f06f 0201 	mvn.w	r2, #1
 800c6d4:	611a      	str	r2, [r3, #16]
}
 800c6d6:	bf00      	nop
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800c6e2:	b480      	push	{r7}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	691b      	ldr	r3, [r3, #16]
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d101      	bne.n	800c6fa <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e000      	b.n	800c6fc <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <LL_TIM_ClearFlag_BRK>:
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c716:	611a      	str	r2, [r3, #16]
}
 800c718:	bf00      	nop
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <LL_TIM_ClearFlag_BRK2>:
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c732:	611a      	str	r2, [r3, #16]
}
 800c734:	bf00      	nop
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <LL_TIM_IsActiveFlag_BRK2>:
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c754:	d101      	bne.n	800c75a <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800c756:	2301      	movs	r3, #1
 800c758:	e000      	b.n	800c75c <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <LL_TIM_EnableIT_UPDATE>:
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	f043 0201 	orr.w	r2, r3, #1
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	60da      	str	r2, [r3, #12]
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <LL_TIM_DisableIT_UPDATE>:
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f023 0201 	bic.w	r2, r3, #1
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	60da      	str	r2, [r3, #12]
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <LL_TIM_EnableIT_BRK>:
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	60da      	str	r2, [r3, #12]
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <LL_TIM_GenerateEvent_UPDATE>:
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	f043 0201 	orr.w	r2, r3, #1
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	615a      	str	r2, [r3, #20]
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	619a      	str	r2, [r3, #24]
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	f003 0310 	and.w	r3, r3, #16
 800c834:	2101      	movs	r1, #1
 800c836:	fa01 f303 	lsl.w	r3, r1, r3
 800c83a:	431a      	orrs	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	f003 0310 	and.w	r3, r3, #16
 800c860:	2101      	movs	r1, #1
 800c862:	fa01 f303 	lsl.w	r3, r1, r3
 800c866:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	f003 0310 	and.w	r3, r3, #16
 800c86e:	2101      	movs	r1, #1
 800c870:	fa01 f303 	lsl.w	r3, r1, r3
 800c874:	429a      	cmp	r2, r3
 800c876:	bf0c      	ite	eq
 800c878:	2301      	moveq	r3, #1
 800c87a:	2300      	movne	r3, #0
 800c87c:	b2db      	uxtb	r3, r3
}
 800c87e:	4618      	mov	r0, r3
 800c880:	370c      	adds	r7, #12
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <LL_DAC_TrigSWConversion>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_TrigSWConversion(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b083      	sub	sp, #12
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	431a      	orrs	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	605a      	str	r2, [r3, #4]
          (DAC_Channel & DAC_SWTR_CHX_MASK));
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <LL_DAC_ConvertData12LeftAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 800c8b0:	b490      	push	{r4, r7}
 800c8b2:	b086      	sub	sp, #24
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3308      	adds	r3, #8
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800c8c8:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800c8cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	fa92 f2a2 	rbit	r2, r2
 800c8d4:	613a      	str	r2, [r7, #16]
  return result;
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	fab2 f282 	clz	r2, r2
 800c8dc:	b2d2      	uxtb	r2, r2
 800c8de:	40d3      	lsrs	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	440b      	add	r3, r1
 800c8e4:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800c8e6:	6823      	ldr	r3, [r4, #0]
 800c8e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	6023      	str	r3, [r4, #0]
             DAC_DHR12L1_DACC1DHR,
             Data);
}
 800c8f6:	bf00      	nop
 800c8f8:	3718      	adds	r7, #24
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bc90      	pop	{r4, r7}
 800c8fe:	4770      	bx	lr

0800c900 <LL_COMP_GetInputMinus>:
  *         (1) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302x6/8, STM32F303x6/8, STM32F328xx, STM32F334xx.\n
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c910:	4618      	mov	r0, r3
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr

0800c91c <LL_COMP_Enable>:
  * @rmtoll CSR      COMPxEN        LL_COMP_Enable
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f043 0201 	orr.w	r2, r3, #1
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	601a      	str	r2, [r3, #0]
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <LL_COMP_Lock>:
  * @rmtoll CSR      COMPxLOCK      LL_COMP_Lock
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	601a      	str	r2, [r3, #0]
}
 800c950:	bf00      	nop
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <R3_1_Init>:
  *         in three shunt topology using STM32F30X and shared ADC
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_Init( PWMC_R3_1_Handle_t * pHandle )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	61fb      	str	r3, [r7, #28]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	61bb      	str	r3, [r7, #24]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	617b      	str	r3, [r7, #20]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	60bb      	str	r3, [r7, #8]

  /*Check that _Super is the first member of the structure PWMC_R3_1_Handle_t */
  if ( ( uint32_t )pHandle == ( uint32_t )&pHandle->_Super )
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	461a      	mov	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	f040 8095 	bne.w	800caca <R3_1_Init+0x16e>
  {
    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOC( ADCx );
 800c9a0:	68b8      	ldr	r0, [r7, #8]
 800c9a2:	f7ff fcc1 	bl	800c328 <LL_ADC_DisableIT_EOC>
    LL_ADC_ClearFlag_EOC( ADCx );
 800c9a6:	68b8      	ldr	r0, [r7, #8]
 800c9a8:	f7ff fc87 	bl	800c2ba <LL_ADC_ClearFlag_EOC>
    LL_ADC_DisableIT_JEOC( ADCx );
 800c9ac:	68b8      	ldr	r0, [r7, #8]
 800c9ae:	f7ff fccb 	bl	800c348 <LL_ADC_DisableIT_JEOC>
    LL_ADC_ClearFlag_JEOC( ADCx );
 800c9b2:	68b8      	ldr	r0, [r7, #8]
 800c9b4:	f7ff fc8e 	bl	800c2d4 <LL_ADC_ClearFlag_JEOC>

    if ( TIMx == TIM1 )
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4a46      	ldr	r2, [pc, #280]	; (800cad4 <R3_1_Init+0x178>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d103      	bne.n	800c9c8 <R3_1_Init+0x6c>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800c9c0:	2001      	movs	r0, #1
 800c9c2:	f7ff fb85 	bl	800c0d0 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800c9c6:	e002      	b.n	800c9ce <R3_1_Init+0x72>
    }
#ifdef TIM8    
    else
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800c9c8:	2002      	movs	r0, #2
 800c9ca:	f7ff fb81 	bl	800c0d0 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
#endif
    /* Over current protection phase A */
    if ( COMP_OCPAx != NULL )
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d028      	beq.n	800ca26 <R3_1_Init+0xca>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9d8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d01c      	beq.n	800ca1a <R3_1_Init+0xbe>
      {
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800c9e0:	69f8      	ldr	r0, [r7, #28]
 800c9e2:	f7ff ff8d 	bl	800c900 <LL_COMP_GetInputMinus>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	2b40      	cmp	r3, #64	; 0x40
 800c9ea:	d108      	bne.n	800c9fe <R3_1_Init+0xa2>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4838      	ldr	r0, [pc, #224]	; (800cad8 <R3_1_Init+0x17c>)
 800c9f8:	f000 fe4c 	bl	800d694 <R3_1_SetAOReferenceVoltage>
 800c9fc:	e00d      	b.n	800ca1a <R3_1_Init+0xbe>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800c9fe:	69f8      	ldr	r0, [r7, #28]
 800ca00:	f7ff ff7e 	bl	800c900 <LL_COMP_GetInputMinus>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b50      	cmp	r3, #80	; 0x50
 800ca08:	d107      	bne.n	800ca1a <R3_1_Init+0xbe>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca0e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800ca12:	4619      	mov	r1, r3
 800ca14:	4831      	ldr	r0, [pc, #196]	; (800cadc <R3_1_Init+0x180>)
 800ca16:	f000 fe3d 	bl	800d694 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OCPAx );
 800ca1a:	69f8      	ldr	r0, [r7, #28]
 800ca1c:	f7ff ff7e 	bl	800c91c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPAx );
 800ca20:	69f8      	ldr	r0, [r7, #28]
 800ca22:	f7ff ff8b 	bl	800c93c <LL_COMP_Lock>
    }

    /* Over current protection phase B */
    if ( COMP_OCPBx != NULL )
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d005      	beq.n	800ca38 <R3_1_Init+0xdc>
    {
      LL_COMP_Enable ( COMP_OCPBx );
 800ca2c:	69b8      	ldr	r0, [r7, #24]
 800ca2e:	f7ff ff75 	bl	800c91c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPBx );
 800ca32:	69b8      	ldr	r0, [r7, #24]
 800ca34:	f7ff ff82 	bl	800c93c <LL_COMP_Lock>
    }

    /* Over current protection phase C */
    if ( COMP_OCPCx != NULL )
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d005      	beq.n	800ca4a <R3_1_Init+0xee>
    {
      LL_COMP_Enable ( COMP_OCPCx );
 800ca3e:	6978      	ldr	r0, [r7, #20]
 800ca40:	f7ff ff6c 	bl	800c91c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPCx );
 800ca44:	6978      	ldr	r0, [r7, #20]
 800ca46:	f7ff ff79 	bl	800c93c <LL_COMP_Lock>
    }

    /* Over voltage protection */
    if ( COMP_OVPx != NULL )
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d028      	beq.n	800caa2 <R3_1_Init+0x146>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d01c      	beq.n	800ca96 <R3_1_Init+0x13a>
      {
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800ca5c:	6938      	ldr	r0, [r7, #16]
 800ca5e:	f7ff ff4f 	bl	800c900 <LL_COMP_GetInputMinus>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b40      	cmp	r3, #64	; 0x40
 800ca66:	d108      	bne.n	800ca7a <R3_1_Init+0x11e>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca6c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800ca70:	4619      	mov	r1, r3
 800ca72:	4819      	ldr	r0, [pc, #100]	; (800cad8 <R3_1_Init+0x17c>)
 800ca74:	f000 fe0e 	bl	800d694 <R3_1_SetAOReferenceVoltage>
 800ca78:	e00d      	b.n	800ca96 <R3_1_Init+0x13a>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800ca7a:	6938      	ldr	r0, [r7, #16]
 800ca7c:	f7ff ff40 	bl	800c900 <LL_COMP_GetInputMinus>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b50      	cmp	r3, #80	; 0x50
 800ca84:	d107      	bne.n	800ca96 <R3_1_Init+0x13a>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca8a:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4812      	ldr	r0, [pc, #72]	; (800cadc <R3_1_Init+0x180>)
 800ca92:	f000 fdff 	bl	800d694 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OVPx );
 800ca96:	6938      	ldr	r0, [r7, #16]
 800ca98:	f7ff ff40 	bl	800c91c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OVPx );
 800ca9c:	6938      	ldr	r0, [r7, #16]
 800ca9e:	f7ff ff4d 	bl	800c93c <LL_COMP_Lock>
    }
    
    if (LL_ADC_IsEnabled (ADCx) == 0)
 800caa2:	68b8      	ldr	r0, [r7, #8]
 800caa4:	f7ff fb8e 	bl	800c1c4 <LL_ADC_IsEnabled>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d108      	bne.n	800cac0 <R3_1_Init+0x164>
    {
      R3_1_ADCxInit (ADCx);
 800caae:	68b8      	ldr	r0, [r7, #8]
 800cab0:	f000 f816 	bl	800cae0 <R3_1_ADCxInit>
      /* Only the Interrupt of the first ADC is enabled. 
       * As Both ADCs are fired by HW at the same moment 
       * It is safe to consider that both conversion are ready at the same time*/
      LL_ADC_ClearFlag_JEOS( ADCx );
 800cab4:	68b8      	ldr	r0, [r7, #8]
 800cab6:	f7ff fc1a 	bl	800c2ee <LL_ADC_ClearFlag_JEOS>
      LL_ADC_EnableIT_JEOS( ADCx );
 800caba:	68b8      	ldr	r0, [r7, #8]
 800cabc:	f7ff fc24 	bl	800c308 <LL_ADC_EnableIT_JEOS>
    }
    else 
    {
      /* Nothing to do ADCx_1 already configured */
    }
    R3_1_TIMxInit( TIMx, &pHandle->_Super );
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4619      	mov	r1, r3
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 f84f 	bl	800cb68 <R3_1_TIMxInit>
  }
}
 800caca:	bf00      	nop
 800cacc:	3720      	adds	r7, #32
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	40012c00 	.word	0x40012c00
 800cad8:	02100001 	.word	0x02100001
 800cadc:	15430012 	.word	0x15430012

0800cae0 <R3_1_ADCxInit>:

static void R3_1_ADCxInit( ADC_TypeDef * ADCx )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
     
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7ff fb43 	bl	800c174 <LL_ADC_IsInternalRegulatorEnabled>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d111      	bne.n	800cb18 <R3_1_ADCxInit+0x38>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADCx);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7ff fb23 	bl	800c140 <LL_ADC_EnableInternalRegulator>
  
    /* Wait for Regulator Startup time */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800cafa:	4b19      	ldr	r3, [pc, #100]	; (800cb60 <R3_1_ADCxInit+0x80>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	099b      	lsrs	r3, r3, #6
 800cb00:	4a18      	ldr	r2, [pc, #96]	; (800cb64 <R3_1_ADCxInit+0x84>)
 800cb02:	fba2 2303 	umull	r2, r3, r2, r3
 800cb06:	099b      	lsrs	r3, r3, #6
 800cb08:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800cb0a:	e002      	b.n	800cb12 <R3_1_ADCxInit+0x32>
    {
      wait_loop_index--;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d1f9      	bne.n	800cb0c <R3_1_ADCxInit+0x2c>
    }
  }
  
  LL_ADC_StartCalibration( ADCx, LL_ADC_SINGLE_ENDED );
 800cb18:	217f      	movs	r1, #127	; 0x7f
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7ff fb65 	bl	800c1ea <LL_ADC_StartCalibration>
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 800cb20:	bf00      	nop
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff fb7a 	bl	800c21c <LL_ADC_IsCalibrationOnGoing>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d0f9      	beq.n	800cb22 <R3_1_ADCxInit+0x42>
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800cb2e:	e002      	b.n	800cb36 <R3_1_ADCxInit+0x56>
  { 
    LL_ADC_Enable(  ADCx );
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f7ff fb33 	bl	800c19c <LL_ADC_Enable>
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff fbac 	bl	800c294 <LL_ADC_IsActiveFlag_ADRDY>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0f6      	beq.n	800cb30 <R3_1_ADCxInit+0x50>
  }
  /* Clear JSQR from CubeMX setting to avoid not wanting conversion*/
  LL_ADC_INJ_StartConversion( ADCx ); 
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff fb7e 	bl	800c244 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StopConversion(ADCx);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f7ff fb8f 	bl	800c26c <LL_ADC_INJ_StopConversion>
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );
 800cb4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff fae1 	bl	800c11a <LL_ADC_INJ_SetQueueMode>
 }
 800cb58:	bf00      	nop
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	200006d8 	.word	0x200006d8
 800cb64:	053e2d63 	.word	0x053e2d63

0800cb68 <R3_1_TIMxInit>:
  * @param TIMx: Timer to be initialized
  * @param pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_TIMxInit( TIM_TypeDef * TIMx, PWMC_Handle_t * pHdl )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint32_t Brk2Timeout = 1000;
 800cb76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb7a:	60fb      	str	r3, [r7, #12]

  /* disable main TIM counter to ensure
   * a synchronous start by TIM2 trigger */
  LL_TIM_DisableCounter( TIMx );
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff fbf3 	bl	800c368 <LL_TIM_DisableCounter>
  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800cb82:	2100      	movs	r1, #0
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff fd6b 	bl	800c660 <LL_TIM_SetTriggerOutput>

  /* Enables the TIMx Preload on CC1 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff fc93 	bl	800c4b8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC2 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 800cb92:	2110      	movs	r1, #16
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff fc8f 	bl	800c4b8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC3 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 800cb9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f7ff fc8a 	bl	800c4b8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC4 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH4 );
 800cba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fc85 	bl	800c4b8 <LL_TIM_OC_EnablePreload>
  /* Prepare timer for synchronization */
  LL_TIM_GenerateEvent_UPDATE( TIMx );
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7ff fe0a 	bl	800c7c8 <LL_TIM_GenerateEvent_UPDATE>
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d11f      	bne.n	800cc00 <R3_1_TIMxInit+0x98>
  {
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	d110      	bne.n	800cbee <R3_1_TIMxInit+0x86>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbd0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d10a      	bne.n	800cbee <R3_1_TIMxInit+0x86>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800cbd8:	2101      	movs	r1, #1
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7ff fbe2 	bl	800c3a4 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff fdf1 	bl	800c7c8 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800cbe6:	2103      	movs	r1, #3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff fbdb 	bl	800c3a4 <LL_TIM_SetRepetitionCounter>
      }
    }
    LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff fbc5 	bl	800c388 <LL_TIM_SetCounter>
 800cbfe:	e024      	b.n	800cc4a <R3_1_TIMxInit+0xe2>
  }
  else /* bFreqRatio equal to 1 or 3 */
  {
    if ( pHandle->_Super.Motor == M1 )
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d11f      	bne.n	800cc4a <R3_1_TIMxInit+0xe2>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc0e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d108      	bne.n	800cc28 <R3_1_TIMxInit+0xc0>
      {
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff fbb1 	bl	800c388 <LL_TIM_SetCounter>
 800cc26:	e010      	b.n	800cc4a <R3_1_TIMxInit+0xe2>
      }
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc2c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d10a      	bne.n	800cc4a <R3_1_TIMxInit+0xe2>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800cc34:	2101      	movs	r1, #1
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff fbb4 	bl	800c3a4 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f7ff fdc3 	bl	800c7c8 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800cc42:	2103      	movs	r1, #3
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7ff fbad 	bl	800c3a4 <LL_TIM_SetRepetitionCounter>
    }
    else
    {
    }
  }
  LL_TIM_ClearFlag_BRK( TIMx );
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f7ff fd5c 	bl	800c708 <LL_TIM_ClearFlag_BRK>
  
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc54:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00f      	beq.n	800cc7c <R3_1_TIMxInit+0x114>
  {
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800cc5c:	e005      	b.n	800cc6a <R3_1_TIMxInit+0x102>
    {
      LL_TIM_ClearFlag_BRK2( TIMx );
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7ff fd60 	bl	800c724 <LL_TIM_ClearFlag_BRK2>
      Brk2Timeout--;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3b01      	subs	r3, #1
 800cc68:	60fb      	str	r3, [r7, #12]
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7ff fd68 	bl	800c740 <LL_TIM_IsActiveFlag_BRK2>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d102      	bne.n	800cc7c <R3_1_TIMxInit+0x114>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1f0      	bne.n	800cc5e <R3_1_TIMxInit+0xf6>
    }   
  }
  LL_TIM_EnableIT_BRK( TIMx );
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff fd93 	bl	800c7a8 <LL_TIM_EnableIT_BRK>

  /* Enable PWM channel */
  LL_TIM_CC_EnableChannel( TIMx, TIMxCCER_MASK_CH123 );
 800cc82:	f240 5155 	movw	r1, #1365	; 0x555
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff fb9a 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
}
 800cc8c:	bf00      	nop
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <R3_1_CurrentReadingPolarization>:
  *         motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void R3_1_CurrentReadingPolarization( PWMC_Handle_t * pHdl )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]

  pHandle->PhaseAOffset = 0u;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset = 0u;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset = 0u;
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	665a      	str	r2, [r3, #100]	; 0x64

  pHandle->PolarizationCounter = 0u;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  /* It forces inactive level on TIMx CHy and CHyN */
  LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800ccca:	f240 5155 	movw	r1, #1365	; 0x555
 800ccce:	6938      	ldr	r0, [r7, #16]
 800ccd0:	f7ff fb87 	bl	800c3e2 <LL_TIM_CC_DisableChannel>

  /* Offset calibration for all phases */
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	4a53      	ldr	r2, [pc, #332]	; (800ce24 <R3_1_CurrentReadingPolarization+0x190>)
 800ccd8:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	4a52      	ldr	r2, [pc, #328]	; (800ce28 <R3_1_CurrentReadingPolarization+0x194>)
 800ccde:	619a      	str	r2, [r3, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	2240      	movs	r2, #64	; 0x40
 800cce4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     
  /* We want to polarize calibration Phase A and Phase B, so we select SECTOR_5 */
  pHandle->PolarizationSector=SECTOR_5;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	2204      	movs	r2, #4
 800ccec:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_5*/
  pHandle->_Super.Sector = SECTOR_5;   
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	2204      	movs	r2, #4
 800ccf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 fb2d 	bl	800d35a <R3_1_SwitchOnPWM>
  
  /* IF CH4 is enabled, it means that JSQR is now configured to sample polarization current*/
  //while ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 0u )
  //{
  //}
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800cd00:	bf00      	nop
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cd0a:	2b70      	cmp	r3, #112	; 0x70
 800cd0c:	d1f9      	bne.n	800cd02 <R3_1_CurrentReadingPolarization+0x6e>
  {
  }
  /* It is the right time to start the ADC without unwanted conversion */
  /* Start ADC to wait for external trigger. This is series dependant*/
  LL_ADC_INJ_StartConversion( ADCx );
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f7ff fa98 	bl	800c244 <LL_ADC_INJ_StartConversion>
  
  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800cd1e:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	336e      	adds	r3, #110	; 0x6e
 800cd26:	6938      	ldr	r0, [r7, #16]
 800cd28:	f7fe ff1d 	bl	800bb66 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );

  R3_1_SwitchOffPWM( &pHandle->_Super );
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 fbb4 	bl	800d49c <R3_1_SwitchOffPWM>
  
  /* Offset calibration for C phase */
  pHandle->PolarizationCounter = 0u;
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	2200      	movs	r2, #0
 800cd38:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	4a3b      	ldr	r2, [pc, #236]	; (800ce2c <R3_1_CurrentReadingPolarization+0x198>)
 800cd40:	605a      	str	r2, [r3, #4]
  /* We want to polarize Phase C, so we select SECTOR_1 */
  pHandle->PolarizationSector=SECTOR_1;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_1*/
  pHandle->_Super.Sector = SECTOR_1; 
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 fb00 	bl	800d35a <R3_1_SwitchOnPWM>

  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800cd64:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	336e      	adds	r3, #110	; 0x6e
 800cd6c:	6938      	ldr	r0, [r7, #16]
 800cd6e:	f7fe fefa 	bl	800bb66 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );
  
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f000 fb91 	bl	800d49c <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd7e:	091a      	lsrs	r2, r3, #4
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd88:	091a      	lsrs	r2, r3, #4
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd92:	091a      	lsrs	r2, r3, #4
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Change back function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800cd98:	697b      	ldr	r3, [r7, #20]
 800cd9a:	4a25      	ldr	r2, [pc, #148]	; (800ce30 <R3_1_CurrentReadingPolarization+0x19c>)
 800cd9c:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	4a24      	ldr	r2, [pc, #144]	; (800ce34 <R3_1_CurrentReadingPolarization+0x1a0>)
 800cda2:	619a      	str	r2, [r3, #24]

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800cda4:	2101      	movs	r1, #1
 800cda6:	6938      	ldr	r0, [r7, #16]
 800cda8:	f7ff fbd4 	bl	800c554 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800cdac:	2110      	movs	r1, #16
 800cdae:	6938      	ldr	r0, [r7, #16]
 800cdb0:	f7ff fbd0 	bl	800c554 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800cdb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cdb8:	6938      	ldr	r0, [r7, #16]
 800cdba:	f7ff fbcb 	bl	800c554 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	6938      	ldr	r0, [r7, #16]
 800cdc8:	f7ff fc12 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx, pHandle->Half_PWMPeriod);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6938      	ldr	r0, [r7, #16]
 800cdd6:	f7ff fc19 	bl	800c60c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx, pHandle->Half_PWMPeriod);
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cde0:	4619      	mov	r1, r3
 800cde2:	6938      	ldr	r0, [r7, #16]
 800cde4:	f7ff fc20 	bl	800c628 <LL_TIM_OC_SetCompareCH3>
  /* Enable TIMx preload */
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800cde8:	2101      	movs	r1, #1
 800cdea:	6938      	ldr	r0, [r7, #16]
 800cdec:	f7ff fb64 	bl	800c4b8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800cdf0:	2110      	movs	r1, #16
 800cdf2:	6938      	ldr	r0, [r7, #16]
 800cdf4:	f7ff fb60 	bl	800c4b8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800cdf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cdfc:	6938      	ldr	r0, [r7, #16]
 800cdfe:	f7ff fb5b 	bl	800c4b8 <LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800ce02:	f240 5155 	movw	r1, #1365	; 0x555
 800ce06:	6938      	ldr	r0, [r7, #16]
 800ce08:	f7ff fada 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
  
  /* At the end of calibration, all phases are at 50% we will sample A&B */
  pHandle->_Super.Sector=SECTOR_5;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2204      	movs	r2, #4
 800ce10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  pHandle->BrakeActionLock = false;
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

}
 800ce1c:	bf00      	nop
 800ce1e:	3718      	adds	r7, #24
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	0800d1b1 	.word	0x0800d1b1
 800ce28:	0800d059 	.word	0x0800d059
 800ce2c:	0800d241 	.word	0x0800d241
 800ce30:	0800ce39 	.word	0x0800ce39
 800ce34:	0800d08f 	.word	0x0800d08f

0800ce38 <R3_1_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	61fb      	str	r3, [r7, #28]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	61bb      	str	r3, [r7, #24]
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ce54:	75fb      	strb	r3, [r7, #23]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ce5a:	7dfb      	ldrb	r3, [r7, #23]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	009b      	lsls	r3, r3, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	613b      	str	r3, [r7, #16]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ce6c:	7dfb      	ldrb	r3, [r7, #23]
 800ce6e:	330e      	adds	r3, #14
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	69b8      	ldr	r0, [r7, #24]
 800ce7e:	f7ff fbef 	bl	800c660 <LL_TIM_SetTriggerOutput>
  
  switch ( Sector )
 800ce82:	7dfb      	ldrb	r3, [r7, #23]
 800ce84:	2b05      	cmp	r3, #5
 800ce86:	f200 80c6 	bhi.w	800d016 <R3_1_GetPhaseCurrents+0x1de>
 800ce8a:	a201      	add	r2, pc, #4	; (adr r2, 800ce90 <R3_1_GetPhaseCurrents+0x58>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cf1b 	.word	0x0800cf1b
 800ce94:	0800cf99 	.word	0x0800cf99
 800ce98:	0800cf99 	.word	0x0800cf99
 800ce9c:	0800cea9 	.word	0x0800cea9
 800cea0:	0800cea9 	.word	0x0800cea9
 800cea4:	0800cf1b 	.word	0x0800cf1b
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ceac:	461a      	mov	r2, r3
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	1ad3      	subs	r3, r2, r3
 800ceb2:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ceba:	dc04      	bgt.n	800cec6 <R3_1_GetPhaseCurrents+0x8e>
      {
        Iab->a = -INT16_MAX;
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	f248 0201 	movw	r2, #32769	; 0x8001
 800cec2:	801a      	strh	r2, [r3, #0]
 800cec4:	e00c      	b.n	800cee0 <R3_1_GetPhaseCurrents+0xa8>
      }
      else  if ( Aux > INT16_MAX )
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cecc:	db04      	blt.n	800ced8 <R3_1_GetPhaseCurrents+0xa0>
      {
        Iab->a = INT16_MAX;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ced4:	801a      	strh	r2, [r3, #0]
 800ced6:	e003      	b.n	800cee0 <R3_1_GetPhaseCurrents+0xa8>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	b21a      	sxth	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cee4:	461a      	mov	r2, r3
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	1ad3      	subs	r3, r2, r3
 800ceea:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cef2:	dc04      	bgt.n	800cefe <R3_1_GetPhaseCurrents+0xc6>
      {
        Iab->b = -INT16_MAX;
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	f248 0201 	movw	r2, #32769	; 0x8001
 800cefa:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800cefc:	e08c      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux > INT16_MAX )
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf04:	db04      	blt.n	800cf10 <R3_1_GetPhaseCurrents+0xd8>
        Iab->b = INT16_MAX;
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf0c:	805a      	strh	r2, [r3, #2]
      break;
 800cf0e:	e083      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	b21a      	sxth	r2, r3
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	805a      	strh	r2, [r3, #2]
      break;
 800cf18:	e07e      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_6:
    case SECTOR_1:
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf1e:	461a      	mov	r2, r3
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cf2c:	dc04      	bgt.n	800cf38 <R3_1_GetPhaseCurrents+0x100>
      {
        Iab->b = -INT16_MAX;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	f248 0201 	movw	r2, #32769	; 0x8001
 800cf34:	805a      	strh	r2, [r3, #2]
 800cf36:	e00c      	b.n	800cf52 <R3_1_GetPhaseCurrents+0x11a>
      }
      else  if ( Aux > INT16_MAX )
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf3e:	db04      	blt.n	800cf4a <R3_1_GetPhaseCurrents+0x112>
      {
        Iab->b = INT16_MAX;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf46:	805a      	strh	r2, [r3, #2]
 800cf48:	e003      	b.n	800cf52 <R3_1_GetPhaseCurrents+0x11a>
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	b21a      	sxth	r2, r3
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	805a      	strh	r2, [r3, #2]
      }

      /* Ia = -Ic -Ib */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	69fa      	ldr	r2, [r7, #28]
 800cf56:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cf58:	1a9b      	subs	r3, r3, r2
 800cf5a:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf62:	461a      	mov	r2, r3
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	1a9b      	subs	r3, r3, r2
 800cf68:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux > INT16_MAX )
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf70:	db04      	blt.n	800cf7c <R3_1_GetPhaseCurrents+0x144>
      {
        Iab->a = INT16_MAX;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf78:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        Iab->a = ( int16_t )Aux;
      }
      break;
 800cf7a:	e04d      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cf82:	dc04      	bgt.n	800cf8e <R3_1_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	f248 0201 	movw	r2, #32769	; 0x8001
 800cf8a:	801a      	strh	r2, [r3, #0]
      break;
 800cf8c:	e044      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->a = ( int16_t )Aux;
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	b21a      	sxth	r2, r3
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	801a      	strh	r2, [r3, #0]
      break;
 800cf96:	e03f      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cfaa:	dc04      	bgt.n	800cfb6 <R3_1_GetPhaseCurrents+0x17e>
      {
        Iab->a = -INT16_MAX;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	f248 0201 	movw	r2, #32769	; 0x8001
 800cfb2:	801a      	strh	r2, [r3, #0]
 800cfb4:	e00c      	b.n	800cfd0 <R3_1_GetPhaseCurrents+0x198>
      }
      else  if ( Aux > INT16_MAX )
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfbc:	db04      	blt.n	800cfc8 <R3_1_GetPhaseCurrents+0x190>
      {
        Iab->a = INT16_MAX;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cfc4:	801a      	strh	r2, [r3, #0]
 800cfc6:	e003      	b.n	800cfd0 <R3_1_GetPhaseCurrents+0x198>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	b21a      	sxth	r2, r3
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	69fa      	ldr	r2, [r7, #28]
 800cfd4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cfd6:	1a9b      	subs	r3, r3, r2
 800cfd8:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	1a9b      	subs	r3, r3, r2
 800cfe6:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfee:	db04      	blt.n	800cffa <R3_1_GetPhaseCurrents+0x1c2>
      {
        Iab->b = INT16_MAX;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cff6:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800cff8:	e00e      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d000:	dc04      	bgt.n	800d00c <R3_1_GetPhaseCurrents+0x1d4>
        Iab->b = -INT16_MAX;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	f248 0201 	movw	r2, #32769	; 0x8001
 800d008:	805a      	strh	r2, [r3, #2]
      break;
 800d00a:	e005      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	b21a      	sxth	r2, r3
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	805a      	strh	r2, [r3, #2]
      break;
 800d014:	e000      	b.n	800d018 <R3_1_GetPhaseCurrents+0x1e0>

    default:
      break;
 800d016:	bf00      	nop
  }

  pHandle->_Super.Ia = Iab->a;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800d02a:	69fb      	ldr	r3, [r7, #28]
 800d02c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d036:	b29b      	uxth	r3, r3
 800d038:	425b      	negs	r3, r3
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d042:	b29b      	uxth	r3, r3
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	b29b      	uxth	r3, r3
 800d048:	b21a      	sxth	r2, r3
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800d050:	bf00      	nop
 800d052:	3720      	adds	r7, #32
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d078:	3b01      	subs	r3, #1
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	4619      	mov	r1, r3
 800d07e:	4610      	mov	r0, r2
 800d080:	f000 f863 	bl	800d14a <R3_1_WriteTIMRegisters>
 800d084:	4603      	mov	r3, r0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}

0800d08e <R3_1_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle Pointer on the target component instance
  * @retval none
  */
uint16_t R3_1_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800d08e:	b580      	push	{r7, lr}
 800d090:	b086      	sub	sp, #24
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	613b      	str	r3, [r7, #16]
#endif /* __ICCARM__ */
  uint16_t SamplingPoint;
  uint16_t DeltaDuty;

  /* Verify that sampling is possible in the middle of PWM by checking the smallest duty cycle */
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ac:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d909      	bls.n	800d0c8 <R3_1_SetADCSampPointSectX+0x3a>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 4 or 5  */
    pHandle->_Super.Sector = SECTOR_5;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	2204      	movs	r2, #4
 800d0b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* set sampling  point trigger in the middle of PWM period */
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	82fb      	strh	r3, [r7, #22]
 800d0c6:	e035      	b.n	800d134 <R3_1_SetADCSampPointSectX+0xa6>
    /* ADC Injected sequence configuration. The stator phase with minimum value of complementary
        duty cycle is set as first. In every sector there is always one phase with maximum complementary duty,
        one with minimum complementary duty and one with variable complementary duty. In this case, phases
        with variable complementary duty and with maximum duty are converted and the first will be always
        the phase with variable complementary duty cycle */
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800d0d4:	89fa      	ldrh	r2, [r7, #14]
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800d0e0:	1acb      	subs	r3, r1, r3
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d908      	bls.n	800d0fc <R3_1_SetADCSampPointSectX+0x6e>
    {
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0f2:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	82fb      	strh	r3, [r7, #22]
 800d0fa:	e01b      	b.n	800d134 <R3_1_SetADCSampPointSectX+0xa6>
    }
    else
    {
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d104:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800d108:	4413      	add	r3, r2
 800d10a:	82fb      	strh	r3, [r7, #22]

      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d112:	8afa      	ldrh	r2, [r7, #22]
 800d114:	429a      	cmp	r2, r3
 800d116:	d30d      	bcc.n	800d134 <R3_1_SetADCSampPointSectX+0xa6>
      {
         /* ADC trigger edge must be changed from positive to negative */
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	2280      	movs	r2, #128	; 0x80
 800d11c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	b29a      	uxth	r2, r3
 800d12a:	8afb      	ldrh	r3, [r7, #22]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	b29b      	uxth	r3, r3
 800d130:	3b01      	subs	r3, #1
 800d132:	82fb      	strh	r3, [r7, #22]
      }
    }
  }
  return R3_1_WriteTIMRegisters( &pHandle->_Super, SamplingPoint );
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	8afa      	ldrh	r2, [r7, #22]
 800d138:	4611      	mov	r1, r2
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f805 	bl	800d14a <R3_1_WriteTIMRegisters>
 800d140:	4603      	mov	r3, r0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3718      	adds	r7, #24
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <R3_1_WriteTIMRegisters>:
  *         motor
  * @param  pHandle handler of the current instance of the PWM component
  * @retval none
  */
__STATIC_INLINE uint16_t R3_1_WriteTIMRegisters( PWMC_Handle_t * pHdl, uint16_t SamplingPoint )
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b086      	sub	sp, #24
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	460b      	mov	r3, r1
 800d154:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	60fb      	str	r3, [r7, #12]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d166:	4619      	mov	r1, r3
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f7ff fa41 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800d172:	4619      	mov	r1, r3
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7ff fa49 	bl	800c60c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d17e:	4619      	mov	r1, r3
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7ff fa51 	bl	800c628 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );
 800d186:	887b      	ldrh	r3, [r7, #2]
 800d188:	4619      	mov	r1, r3
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7ff fa5a 	bl	800c644 <LL_TIM_OC_SetCompareCH4>

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d002      	beq.n	800d1a2 <R3_1_WriteTIMRegisters+0x58>
  {
    Aux = MC_FOC_DURATION;
 800d19c:	2301      	movs	r3, #1
 800d19e:	82fb      	strh	r3, [r7, #22]
 800d1a0:	e001      	b.n	800d1a6 <R3_1_WriteTIMRegisters+0x5c>
  }
  else
  {
    Aux = MC_NO_ERROR;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	82fb      	strh	r3, [r7, #22]
  }
  return Aux;
 800d1a6:	8afb      	ldrh	r3, [r7, #22]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3718      	adds	r7, #24
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	4413      	add	r3, r2
 800d1d6:	685b      	ldr	r3, [r3, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	60fb      	str	r3, [r7, #12]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d1e6:	330e      	adds	r3, #14
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	4413      	add	r3, r2
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60bb      	str	r3, [r7, #8]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	6938      	ldr	r0, [r7, #16]
 800d1f6:	f7ff fa33 	bl	800c660 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d200:	2b0f      	cmp	r3, #15
 800d202:	d813      	bhi.n	800d22c <R3_1_HFCurrentsPolarizationAB+0x7c>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	441a      	add	r2, r3
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	65da      	str	r2, [r3, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	441a      	add	r2, r3
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d222:	3301      	adds	r3, #1
 800d224:	b2da      	uxtb	r2, r3
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2200      	movs	r2, #0
 800d230:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2200      	movs	r2, #0
 800d236:	805a      	strh	r2, [r3, #2]
}
 800d238:	bf00      	nop
 800d23a:	3718      	adds	r7, #24
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <R3_1_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b086      	sub	sp, #24
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800d260:	330e      	adds	r3, #14
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800d26c:	2100      	movs	r1, #0
 800d26e:	6938      	ldr	r0, [r7, #16]
 800d270:	f7ff f9f6 	bl	800c660 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d27a:	2b0f      	cmp	r3, #15
 800d27c:	d80d      	bhi.n	800d29a <R3_1_HFCurrentsPolarizationC+0x5a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	441a      	add	r2, r3
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800d290:	3301      	adds	r3, #1
 800d292:	b2da      	uxtb	r2, r3
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2200      	movs	r2, #0
 800d29e:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	805a      	strh	r2, [r3, #2]
}
 800d2a6:	bf00      	nop
 800d2a8:	3718      	adds	r7, #24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <R3_1_TurnOnLowSides>:
  *         called each motor start-up when using high voltage drivers
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b084      	sub	sp, #16
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff f9f8 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800d2d6:	2100      	movs	r1, #0
 800d2d8:	68b8      	ldr	r0, [r7, #8]
 800d2da:	f7ff f989 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
 800d2de:	2100      	movs	r1, #0
 800d2e0:	68b8      	ldr	r0, [r7, #8]
 800d2e2:	f7ff f993 	bl	800c60c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	68b8      	ldr	r0, [r7, #8]
 800d2ea:	f7ff f99d 	bl	800c628 <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800d2ee:	bf00      	nop
 800d2f0:	68b8      	ldr	r0, [r7, #8]
 800d2f2:	f7ff f9f6 	bl	800c6e2 <LL_TIM_IsActiveFlag_UPDATE>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0f9      	beq.n	800d2f0 <R3_1_TurnOnLowSides+0x42>
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800d2fc:	68b8      	ldr	r0, [r7, #8]
 800d2fe:	f7ff f9c2 	bl	800c686 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d306:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d121      	bne.n	800d352 <R3_1_TurnOnLowSides+0xa4>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d312:	699a      	ldr	r2, [r3, #24]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d318:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d31c:	4619      	mov	r1, r3
 800d31e:	4610      	mov	r0, r2
 800d320:	f7ff fa62 	bl	800c7e8 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d328:	69da      	ldr	r2, [r3, #28]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d32e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d332:	4619      	mov	r1, r3
 800d334:	4610      	mov	r0, r2
 800d336:	f7ff fa57 	bl	800c7e8 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d33e:	6a1a      	ldr	r2, [r3, #32]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d344:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d348:	4619      	mov	r1, r3
 800d34a:	4610      	mov	r0, r2
 800d34c:	f7ff fa4c 	bl	800c7e8 <LL_GPIO_SetOutputPin>
  }
  return;
 800d350:	bf00      	nop
 800d352:	bf00      	nop
}
 800d354:	3710      	adds	r7, #16
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <R3_1_SwitchOnPWM>:
  *         bit
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d37c:	085b      	lsrs	r3, r3, #1
 800d37e:	b29b      	uxth	r3, r3
 800d380:	4619      	mov	r1, r3
 800d382:	68b8      	ldr	r0, [r7, #8]
 800d384:	f7ff f934 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d38e:	085b      	lsrs	r3, r3, #1
 800d390:	b29b      	uxth	r3, r3
 800d392:	4619      	mov	r1, r3
 800d394:	68b8      	ldr	r0, [r7, #8]
 800d396:	f7ff f939 	bl	800c60c <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3a0:	085b      	lsrs	r3, r3, #1
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	68b8      	ldr	r0, [r7, #8]
 800d3a8:	f7ff f93e 	bl	800c628 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3b2:	3b05      	subs	r3, #5
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	68b8      	ldr	r0, [r7, #8]
 800d3b8:	f7ff f944 	bl	800c644 <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d3bc:	68b8      	ldr	r0, [r7, #8]
 800d3be:	f7ff f982 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800d3c2:	bf00      	nop
 800d3c4:	68b8      	ldr	r0, [r7, #8]
 800d3c6:	f7ff f98c 	bl	800c6e2 <LL_TIM_IsActiveFlag_UPDATE>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d0f9      	beq.n	800d3c4 <R3_1_SwitchOnPWM+0x6a>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d3d0:	68b8      	ldr	r0, [r7, #8]
 800d3d2:	f7ff f978 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3da:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );
 800d3e2:	68b8      	ldr	r0, [r7, #8]
 800d3e4:	f7ff f94f 	bl	800c686 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ec:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	d149      	bne.n	800d488 <R3_1_SwitchOnPWM+0x12e>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	6a1a      	ldr	r2, [r3, #32]
 800d3f8:	f240 5355 	movw	r3, #1365	; 0x555
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d021      	beq.n	800d446 <R3_1_SwitchOnPWM+0xec>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d406:	699a      	ldr	r2, [r3, #24]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d40c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d410:	4619      	mov	r1, r3
 800d412:	4610      	mov	r0, r2
 800d414:	f7ff f9e8 	bl	800c7e8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d41c:	69da      	ldr	r2, [r3, #28]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d422:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f7ff f9dd 	bl	800c7e8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d432:	6a1a      	ldr	r2, [r3, #32]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d438:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d43c:	4619      	mov	r1, r3
 800d43e:	4610      	mov	r0, r2
 800d440:	f7ff f9d2 	bl	800c7e8 <LL_GPIO_SetOutputPin>
 800d444:	e020      	b.n	800d488 <R3_1_SwitchOnPWM+0x12e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d44a:	699a      	ldr	r2, [r3, #24]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d450:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d454:	4619      	mov	r1, r3
 800d456:	4610      	mov	r0, r2
 800d458:	f7ff f9d4 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d460:	69da      	ldr	r2, [r3, #28]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d466:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d46a:	4619      	mov	r1, r3
 800d46c:	4610      	mov	r0, r2
 800d46e:	f7ff f9c9 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d476:	6a1a      	ldr	r2, [r3, #32]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d47c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d480:	4619      	mov	r1, r3
 800d482:	4610      	mov	r0, r2
 800d484:	f7ff f9be 	bl	800c804 <LL_GPIO_ResetOutputPin>
    }
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d488:	68b8      	ldr	r0, [r7, #8]
 800d48a:	f7ff f91c 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800d48e:	68b8      	ldr	r0, [r7, #8]
 800d490:	f7ff f96a 	bl	800c768 <LL_TIM_EnableIT_UPDATE>
}
 800d494:	bf00      	nop
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <R3_1_SwitchOffPWM>:
/**
 * @brief  Disables PWM generation on the proper Timer peripheral acting on  MOE bit
 * @param pHdl handler of the current instance of the PWM component
 */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b084      	sub	sp, #16
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800d4b0:	68b8      	ldr	r0, [r7, #8]
 800d4b2:	f7ff f969 	bl	800c788 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
 800d4be:	68b8      	ldr	r0, [r7, #8]
 800d4c0:	f7ff f8f1 	bl	800c6a6 <LL_TIM_DisableAllOutputs>
  if ( pHandle->BrakeActionLock == true )
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d126      	bne.n	800d51c <R3_1_SwitchOffPWM+0x80>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4d2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d120      	bne.n	800d51c <R3_1_SwitchOffPWM+0x80>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4de:	699a      	ldr	r2, [r3, #24]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4e4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7ff f98a 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f4:	69da      	ldr	r2, [r3, #28]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4fa:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d4fe:	4619      	mov	r1, r3
 800d500:	4610      	mov	r0, r2
 800d502:	f7ff f97f 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d50a:	6a1a      	ldr	r2, [r3, #32]
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d510:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d514:	4619      	mov	r1, r3
 800d516:	4610      	mov	r0, r2
 800d518:	f7ff f974 	bl	800c804 <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d51c:	68b8      	ldr	r0, [r7, #8]
 800d51e:	f7ff f8d2 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800d522:	bf00      	nop
 800d524:	68b8      	ldr	r0, [r7, #8]
 800d526:	f7ff f8dc 	bl	800c6e2 <LL_TIM_IsActiveFlag_UPDATE>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d0f9      	beq.n	800d524 <R3_1_SwitchOffPWM+0x88>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d530:	68b8      	ldr	r0, [r7, #8]
 800d532:	f7ff f8c8 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>

}
 800d536:	bf00      	nop
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <R3_1_TIMx_UP_IRQHandler>:
  *        sampling point
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d53e:	b580      	push	{r7, lr}
 800d540:	b084      	sub	sp, #16
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	60bb      	str	r3, [r7, #8]
  
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d560:	3314      	adds	r3, #20
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800d56e:	431a      	orrs	r2, r3
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* enable ADC trigger source */
    //LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
 800d574:	2170      	movs	r1, #112	; 0x70
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f7ff f872 	bl	800c660 <LL_TIM_SetTriggerOutput>
    
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2240      	movs	r2, #64	; 0x40
 800d580:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	3346      	adds	r3, #70	; 0x46
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3710      	adds	r7, #16
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}

0800d590 <R3_1_BRK2_IRQHandler>:
  * @brief  It contains the TIMx Break2 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK2_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800d59e:	f083 0301 	eor.w	r3, r3, #1
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d026      	beq.n	800d5f6 <R3_1_BRK2_IRQHandler+0x66>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ac:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d120      	bne.n	800d5f6 <R3_1_BRK2_IRQHandler+0x66>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5b8:	699a      	ldr	r2, [r3, #24]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5be:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	f7ff f91d 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ce:	69da      	ldr	r2, [r3, #28]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5d4:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4610      	mov	r0, r2
 800d5dc:	f7ff f912 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5e4:	6a1a      	ldr	r2, [r3, #32]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ea:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f7ff f907 	bl	800c804 <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return &( pHandle->_Super.Motor );
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	3346      	adds	r3, #70	; 0x46
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <R3_1_BRK_IRQHandler>:
  * @brief  It contains the TIMx Break1 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]

  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d616:	685b      	ldr	r3, [r3, #4]
 800d618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d624:	645a      	str	r2, [r3, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2201      	movs	r2, #1
 800d62a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  pHandle->BrakeActionLock = true;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  return &( pHandle->_Super.Motor );
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	3346      	adds	r3, #70	; 0x46
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <R3_1_IsOverCurrentOccurred>:
  * @param  pHandle Pointer on the target component instance
  * @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_1_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 800d646:	b480      	push	{r7}
 800d648:	b085      	sub	sp, #20
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint16_t retVal = MC_NO_FAULTS;
 800d652:	2300      	movs	r3, #0
 800d654:	81fb      	strh	r3, [r7, #14]

  if ( pHandle->OverVoltageFlag == true )
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d005      	beq.n	800d66c <R3_1_IsOverCurrentOccurred+0x26>
  {
    retVal = MC_OVER_VOLT;
 800d660:	2302      	movs	r3, #2
 800d662:	81fb      	strh	r3, [r7, #14]
    pHandle->OverVoltageFlag = false;
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  }

  if ( pHandle->OverCurrentFlag == true )
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d672:	2b00      	cmp	r3, #0
 800d674:	d007      	beq.n	800d686 <R3_1_IsOverCurrentOccurred+0x40>
  {
    retVal |= MC_BREAK_IN;
 800d676:	89fb      	ldrh	r3, [r7, #14]
 800d678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d67c:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2200      	movs	r2, #0
 800d682:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  }

  return retVal;
 800d686:	89fb      	ldrh	r3, [r7, #14]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3714      	adds	r7, #20
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <R3_1_SetAOReferenceVoltage>:
  * @param  hDACVref Value of DAC reference expressed as 16bit unsigned integer.
  *         Ex. 0 = 0V 65536 = VDD_DAC.
  * @retval none
  */
static void R3_1_SetAOReferenceVoltage( uint32_t DAC_Channel, uint16_t hDACVref )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	807b      	strh	r3, [r7, #2]
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800d6a0:	887b      	ldrh	r3, [r7, #2]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	481d      	ldr	r0, [pc, #116]	; (800d71c <R3_1_SetAOReferenceVoltage+0x88>)
 800d6a8:	f7ff f902 	bl	800c8b0 <LL_DAC_ConvertData12LeftAligned>

  /* Enable DAC Channel */
  LL_DAC_TrigSWConversion ( DAC1, DAC_Channel );
 800d6ac:	6879      	ldr	r1, [r7, #4]
 800d6ae:	481b      	ldr	r0, [pc, #108]	; (800d71c <R3_1_SetAOReferenceVoltage+0x88>)
 800d6b0:	f7ff f8eb 	bl	800c88a <LL_DAC_TrigSWConversion>
  
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 800d6b4:	6879      	ldr	r1, [r7, #4]
 800d6b6:	4819      	ldr	r0, [pc, #100]	; (800d71c <R3_1_SetAOReferenceVoltage+0x88>)
 800d6b8:	f7ff f8c8 	bl	800c84c <LL_DAC_IsEnabled>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d112      	bne.n	800d6e8 <R3_1_SetAOReferenceVoltage+0x54>
  { /* If DAC is already enable, we wait LL_DAC_DELAY_VOLTAGE_SETTLING_US*/
    uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800d6c2:	4b17      	ldr	r3, [pc, #92]	; (800d720 <R3_1_SetAOReferenceVoltage+0x8c>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4a17      	ldr	r2, [pc, #92]	; (800d724 <R3_1_SetAOReferenceVoltage+0x90>)
 800d6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6cc:	0cda      	lsrs	r2, r3, #19
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d6d8:	e002      	b.n	800d6e0 <R3_1_SetAOReferenceVoltage+0x4c>
    {
      wait_loop_index--;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d1f9      	bne.n	800d6da <R3_1_SetAOReferenceVoltage+0x46>
    while(wait_loop_index != 0UL)
    {
      wait_loop_index--;
    }    
  }
}
 800d6e6:	e014      	b.n	800d712 <R3_1_SetAOReferenceVoltage+0x7e>
    LL_DAC_Enable ( DAC1, DAC_Channel );
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	480c      	ldr	r0, [pc, #48]	; (800d71c <R3_1_SetAOReferenceVoltage+0x88>)
 800d6ec:	f7ff f898 	bl	800c820 <LL_DAC_Enable>
    uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800d6f0:	4b0b      	ldr	r3, [pc, #44]	; (800d720 <R3_1_SetAOReferenceVoltage+0x8c>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4a0b      	ldr	r2, [pc, #44]	; (800d724 <R3_1_SetAOReferenceVoltage+0x90>)
 800d6f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d6fa:	0cda      	lsrs	r2, r3, #19
 800d6fc:	4613      	mov	r3, r2
 800d6fe:	011b      	lsls	r3, r3, #4
 800d700:	1a9b      	subs	r3, r3, r2
 800d702:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800d704:	e002      	b.n	800d70c <R3_1_SetAOReferenceVoltage+0x78>
      wait_loop_index--;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	3b01      	subs	r3, #1
 800d70a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1f9      	bne.n	800d706 <R3_1_SetAOReferenceVoltage+0x72>
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	40007400 	.word	0x40007400
 800d720:	200006d8 	.word	0x200006d8
 800d724:	431bde83 	.word	0x431bde83

0800d728 <R3_1_RLDetectionModeEnable>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @param  hDuty to be applied in uint16_t
  * @retval none
  */
void R3_1_RLDetectionModeEnable( PWMC_Handle_t * pHdl )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	60bb      	str	r3, [r7, #8]
  
  if ( pHandle->_Super.RLDetectionMode == false )
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d742:	f083 0301 	eor.w	r3, r3, #1
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d047      	beq.n	800d7dc <R3_1_RLDetectionModeEnable+0xb4>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800d74c:	2260      	movs	r2, #96	; 0x60
 800d74e:	2101      	movs	r1, #1
 800d750:	68b8      	ldr	r0, [r7, #8]
 800d752:	f7fe fe59 	bl	800c408 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800d756:	2101      	movs	r1, #1
 800d758:	68b8      	ldr	r0, [r7, #8]
 800d75a:	f7fe fe31 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d75e:	2104      	movs	r1, #4
 800d760:	68b8      	ldr	r0, [r7, #8]
 800d762:	f7fe fe3e 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
    LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800d766:	2100      	movs	r1, #0
 800d768:	68b8      	ldr	r0, [r7, #8]
 800d76a:	f7fe ff41 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d772:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d776:	2b01      	cmp	r3, #1
 800d778:	d10d      	bne.n	800d796 <R3_1_RLDetectionModeEnable+0x6e>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE );
 800d77a:	2210      	movs	r2, #16
 800d77c:	2110      	movs	r1, #16
 800d77e:	68b8      	ldr	r0, [r7, #8]
 800d780:	f7fe fe42 	bl	800c408 <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d784:	2110      	movs	r1, #16
 800d786:	68b8      	ldr	r0, [r7, #8]
 800d788:	f7fe fe2b 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d78c:	2140      	movs	r1, #64	; 0x40
 800d78e:	68b8      	ldr	r0, [r7, #8]
 800d790:	f7fe fe16 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
 800d794:	e012      	b.n	800d7bc <R3_1_RLDetectionModeEnable+0x94>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d79a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d10c      	bne.n	800d7bc <R3_1_RLDetectionModeEnable+0x94>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE );
 800d7a2:	2220      	movs	r2, #32
 800d7a4:	2110      	movs	r1, #16
 800d7a6:	68b8      	ldr	r0, [r7, #8]
 800d7a8:	f7fe fe2e 	bl	800c408 <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d7ac:	2110      	movs	r1, #16
 800d7ae:	68b8      	ldr	r0, [r7, #8]
 800d7b0:	f7fe fe06 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d7b4:	2140      	movs	r1, #64	; 0x40
 800d7b6:	68b8      	ldr	r0, [r7, #8]
 800d7b8:	f7fe fe13 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
    else
    {
    }

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2 );
 800d7bc:	2270      	movs	r2, #112	; 0x70
 800d7be:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7c2:	68b8      	ldr	r0, [r7, #8]
 800d7c4:	f7fe fe20 	bl	800c408 <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800d7c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d7cc:	68b8      	ldr	r0, [r7, #8]
 800d7ce:	f7fe fe08 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d7d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d7d6:	68b8      	ldr	r0, [r7, #8]
 800d7d8:	f7fe fe03 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
   
  }

  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4a09      	ldr	r2, [pc, #36]	; (800d804 <R3_1_RLDetectionModeEnable+0xdc>)
 800d7e0:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	4a08      	ldr	r2, [pc, #32]	; (800d808 <R3_1_RLDetectionModeEnable+0xe0>)
 800d7e6:	615a      	str	r2, [r3, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	4a08      	ldr	r2, [pc, #32]	; (800d80c <R3_1_RLDetectionModeEnable+0xe4>)
 800d7ec:	60da      	str	r2, [r3, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	4a07      	ldr	r2, [pc, #28]	; (800d810 <R3_1_RLDetectionModeEnable+0xe8>)
 800d7f2:	609a      	str	r2, [r3, #8]

  pHandle->_Super.RLDetectionMode = true;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
}
 800d7fc:	bf00      	nop
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	0800da01 	.word	0x0800da01
 800d808:	0800da7d 	.word	0x0800da7d
 800d80c:	0800db11 	.word	0x0800db11
 800d810:	0800d49d 	.word	0x0800d49d

0800d814 <R3_1_RLDetectionModeDisable>:
 * @brief  It is used to disable the PWM mode for R/L detection.
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval none
 */
void R3_1_RLDetectionModeDisable( PWMC_Handle_t * pHdl )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	60bb      	str	r3, [r7, #8]

  if ( pHandle->_Super.RLDetectionMode == true )
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 809e 	beq.w	800d970 <R3_1_RLDetectionModeDisable+0x15c>

    /* The folowing while cycles ensure the identification of the positive counting mode of TIM1
     * for correct reactivation of Repetition Counter value of TIM1.*/

    /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800d834:	bf00      	nop
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f003 0310 	and.w	r3, r3, #16
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d0f9      	beq.n	800d836 <R3_1_RLDetectionModeDisable+0x22>
    {
    }
    /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction.*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800d842:	bf00      	nop
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f003 0310 	and.w	r3, r3, #16
 800d84c:	2b10      	cmp	r3, #16
 800d84e:	d0f9      	beq.n	800d844 <R3_1_RLDetectionModeDisable+0x30>
    {
    } 

    /* Repetition Counter of TIM1 User value reactivation END*/    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800d850:	2260      	movs	r2, #96	; 0x60
 800d852:	2101      	movs	r1, #1
 800d854:	68b8      	ldr	r0, [r7, #8]
 800d856:	f7fe fdd7 	bl	800c408 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800d85a:	2101      	movs	r1, #1
 800d85c:	68b8      	ldr	r0, [r7, #8]
 800d85e:	f7fe fdaf 	bl	800c3c0 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d866:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d104      	bne.n	800d878 <R3_1_RLDetectionModeDisable+0x64>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d86e:	2104      	movs	r1, #4
 800d870:	68b8      	ldr	r0, [r7, #8]
 800d872:	f7fe fda5 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
 800d876:	e009      	b.n	800d88c <R3_1_RLDetectionModeDisable+0x78>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d87c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d880:	2b02      	cmp	r3, #2
 800d882:	d103      	bne.n	800d88c <R3_1_RLDetectionModeDisable+0x78>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d884:	2104      	movs	r1, #4
 800d886:	68b8      	ldr	r0, [r7, #8]
 800d888:	f7fe fdab 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d892:	085b      	lsrs	r3, r3, #1
 800d894:	b29b      	uxth	r3, r3
 800d896:	4619      	mov	r1, r3
 800d898:	68b8      	ldr	r0, [r7, #8]
 800d89a:	f7fe fea9 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 800d89e:	2260      	movs	r2, #96	; 0x60
 800d8a0:	2110      	movs	r1, #16
 800d8a2:	68b8      	ldr	r0, [r7, #8]
 800d8a4:	f7fe fdb0 	bl	800c408 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d8a8:	2110      	movs	r1, #16
 800d8aa:	68b8      	ldr	r0, [r7, #8]
 800d8ac:	f7fe fd88 	bl	800c3c0 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8b4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d104      	bne.n	800d8c6 <R3_1_RLDetectionModeDisable+0xb2>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d8bc:	2140      	movs	r1, #64	; 0x40
 800d8be:	68b8      	ldr	r0, [r7, #8]
 800d8c0:	f7fe fd7e 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
 800d8c4:	e009      	b.n	800d8da <R3_1_RLDetectionModeDisable+0xc6>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ca:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d103      	bne.n	800d8da <R3_1_RLDetectionModeDisable+0xc6>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d8d2:	2140      	movs	r1, #64	; 0x40
 800d8d4:	68b8      	ldr	r0, [r7, #8]
 800d8d6:	f7fe fd84 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH2( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d8e0:	085b      	lsrs	r3, r3, #1
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	68b8      	ldr	r0, [r7, #8]
 800d8e8:	f7fe fe90 	bl	800c60c <LL_TIM_OC_SetCompareCH2>

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 800d8ec:	2260      	movs	r2, #96	; 0x60
 800d8ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d8f2:	68b8      	ldr	r0, [r7, #8]
 800d8f4:	f7fe fd88 	bl	800c408 <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800d8f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d8fc:	68b8      	ldr	r0, [r7, #8]
 800d8fe:	f7fe fd5f 	bl	800c3c0 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d906:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	d105      	bne.n	800d91a <R3_1_RLDetectionModeDisable+0x106>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d90e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d912:	68b8      	ldr	r0, [r7, #8]
 800d914:	f7fe fd54 	bl	800c3c0 <LL_TIM_CC_EnableChannel>
 800d918:	e00a      	b.n	800d930 <R3_1_RLDetectionModeDisable+0x11c>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d91e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d922:	2b02      	cmp	r3, #2
 800d924:	d104      	bne.n	800d930 <R3_1_RLDetectionModeDisable+0x11c>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d926:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d92a:	68b8      	ldr	r0, [r7, #8]
 800d92c:	f7fe fd59 	bl	800c3e2 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH3( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d936:	085b      	lsrs	r3, r3, #1
 800d938:	b29b      	uxth	r3, r3
 800d93a:	4619      	mov	r1, r3
 800d93c:	68b8      	ldr	r0, [r7, #8]
 800d93e:	f7fe fe73 	bl	800c628 <LL_TIM_OC_SetCompareCH3>
    
    /* ADCx Injected discontinuous mode disable */
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2100      	movs	r1, #0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe fbd2 	bl	800c0f4 <LL_ADC_INJ_SetSequencerDiscont>
                                    LL_ADC_INJ_SEQ_DISCONT_DISABLE );

    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	4a09      	ldr	r2, [pc, #36]	; (800d978 <R3_1_RLDetectionModeDisable+0x164>)
 800d954:	605a      	str	r2, [r3, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4a08      	ldr	r2, [pc, #32]	; (800d97c <R3_1_RLDetectionModeDisable+0x168>)
 800d95a:	615a      	str	r2, [r3, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	4a08      	ldr	r2, [pc, #32]	; (800d980 <R3_1_RLDetectionModeDisable+0x16c>)
 800d960:	60da      	str	r2, [r3, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	4a07      	ldr	r2, [pc, #28]	; (800d984 <R3_1_RLDetectionModeDisable+0x170>)
 800d966:	609a      	str	r2, [r3, #8]

    pHandle->_Super.RLDetectionMode = false;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }
}
 800d970:	bf00      	nop
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	0800ce39 	.word	0x0800ce39
 800d97c:	0800d2af 	.word	0x0800d2af
 800d980:	0800d35b 	.word	0x0800d35b
 800d984:	0800d49d 	.word	0x0800d49d

0800d988 <R3_1_RLDetectionModeSetDuty>:
 * @param  hDuty to be applied in uint16_t
 * @retval It returns the code error 'MC_FOC_DURATION' if any, 'MC_NO_ERROR'
 *         otherwise. These error codes are defined in mc_type.h
 */
uint16_t R3_1_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	460b      	mov	r3, r1
 800d992:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;


  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	887b      	ldrh	r3, [r7, #2]
 800d9aa:	fb03 f302 	mul.w	r3, r3, r2
 800d9ae:	0c1b      	lsrs	r3, r3, #16
 800d9b0:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	865a      	strh	r2, [r3, #50]	; 0x32
  
  /* set sector in order to sample phase B */
  pHandle->_Super.Sector = SECTOR_4;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	2203      	movs	r2, #3
 800d9be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  /* TIM1 Channel 1 Duty Cycle configuration.
   * In RL Detection mode only the Up-side device of Phase A are controlled*/
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f7fe fe11 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>


  /* Limit for update event */
  /*  If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d002      	beq.n	800d9e0 <R3_1_RLDetectionModeSetDuty+0x58>
  {
    hAux = MC_FOC_DURATION;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	82fb      	strh	r3, [r7, #22]
 800d9de:	e001      	b.n	800d9e4 <R3_1_RLDetectionModeSetDuty+0x5c>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d104      	bne.n	800d9f6 <R3_1_RLDetectionModeSetDuty+0x6e>
  {
    hAux = MC_FOC_DURATION;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	871a      	strh	r2, [r3, #56]	; 0x38
  }
  return hAux;
 800d9f6:	8afb      	ldrh	r3, [r7, #22]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}

0800da00 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_1_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	60fb      	str	r3, [r7, #12]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800da16:	2100      	movs	r1, #0
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7fe fe21 	bl	800c660 <LL_TIM_SetTriggerOutput>

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da22:	4619      	mov	r1, r3
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800da2e:	330e      	adds	r3, #14
 800da30:	009b      	lsls	r3, r3, #2
 800da32:	4413      	add	r3, r2
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	1acb      	subs	r3, r1, r3
 800da3a:	617b      	str	r3, [r7, #20]

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	4a0d      	ldr	r2, [pc, #52]	; (800da74 <R3_1_RLGetPhaseCurrents+0x74>)
 800da40:	4293      	cmp	r3, r2
 800da42:	db08      	blt.n	800da56 <R3_1_RLGetPhaseCurrents+0x56>
  {
    if ( wAux < INT16_MAX )
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800da4a:	4293      	cmp	r3, r2
 800da4c:	dd05      	ble.n	800da5a <R3_1_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800da4e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	e001      	b.n	800da5a <R3_1_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800da56:	4b08      	ldr	r3, [pc, #32]	; (800da78 <R3_1_RLGetPhaseCurrents+0x78>)
 800da58:	617b      	str	r3, [r7, #20]
  }

  pStator_Currents->a = (int16_t)wAux;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	b21a      	sxth	r2, r3
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = (int16_t)wAux;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	b21a      	sxth	r2, r3
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	805a      	strh	r2, [r3, #2]
}
 800da6a:	bf00      	nop
 800da6c:	3718      	adds	r7, #24
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	ffff8002 	.word	0xffff8002
 800da78:	ffff8001 	.word	0xffff8001

0800da7c <R3_1_RLTurnOnLowSides>:
  *         This function is specific for RL detection phase.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1 ( TIMx, 0u );
 800da90:	2100      	movs	r1, #0
 800da92:	68b8      	ldr	r0, [r7, #8]
 800da94:	f7fe fdac 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800da98:	68b8      	ldr	r0, [r7, #8]
 800da9a:	f7fe fe14 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800da9e:	bf00      	nop
 800daa0:	68b8      	ldr	r0, [r7, #8]
 800daa2:	f7fe fe1e 	bl	800c6e2 <LL_TIM_IsActiveFlag_UPDATE>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d0f9      	beq.n	800daa0 <R3_1_RLTurnOnLowSides+0x24>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800daac:	68b8      	ldr	r0, [r7, #8]
 800daae:	f7fe fe0a 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800dab2:	68b8      	ldr	r0, [r7, #8]
 800dab4:	f7fe fde7 	bl	800c686 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dabc:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d121      	bne.n	800db08 <R3_1_RLTurnOnLowSides+0x8c>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dac8:	699a      	ldr	r2, [r3, #24]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dace:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800dad2:	4619      	mov	r1, r3
 800dad4:	4610      	mov	r0, r2
 800dad6:	f7fe fe87 	bl	800c7e8 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dade:	69da      	ldr	r2, [r3, #28]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dae4:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800dae8:	4619      	mov	r1, r3
 800daea:	4610      	mov	r0, r2
 800daec:	f7fe fe8a 	bl	800c804 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf4:	6a1a      	ldr	r2, [r3, #32]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dafa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800dafe:	4619      	mov	r1, r3
 800db00:	4610      	mov	r0, r2
 800db02:	f7fe fe7f 	bl	800c804 <LL_GPIO_ResetOutputPin>
  }
  return;
 800db06:	bf00      	nop
 800db08:	bf00      	nop
}
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <R3_1_RLSwitchOnPWM>:
 *         This function is specific for RL detection phase.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
static void R3_1_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	60fb      	str	r3, [r7, #12]
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800db34:	bf00      	nop
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f003 0310 	and.w	r3, r3, #16
 800db3e:	2b10      	cmp	r3, #16
 800db40:	d0f9      	beq.n	800db36 <R3_1_RLSwitchOnPWM+0x26>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800db42:	bf00      	nop
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0310 	and.w	r3, r3, #16
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d0f9      	beq.n	800db44 <R3_1_RLSwitchOnPWM+0x34>
  {
  }

  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);
 800db50:	2101      	movs	r1, #1
 800db52:	6938      	ldr	r0, [r7, #16]
 800db54:	f7fe fd4c 	bl	800c5f0 <LL_TIM_OC_SetCompareCH1>

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db5e:	3b05      	subs	r3, #5
 800db60:	4619      	mov	r1, r3
 800db62:	6938      	ldr	r0, [r7, #16]
 800db64:	f7fe fd6e 	bl	800c644 <LL_TIM_OC_SetCompareCH4>
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */
 800db68:	6938      	ldr	r0, [r7, #16]
 800db6a:	f7fe fdac 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800db6e:	bf00      	nop
 800db70:	6938      	ldr	r0, [r7, #16]
 800db72:	f7fe fdb6 	bl	800c6e2 <LL_TIM_IsActiveFlag_UPDATE>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d0f9      	beq.n	800db70 <R3_1_RLSwitchOnPWM+0x60>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800db7c:	6938      	ldr	r0, [r7, #16]
 800db7e:	f7fe fda2 	bl	800c6c6 <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db86:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
 800db8e:	6938      	ldr	r0, [r7, #16]
 800db90:	f7fe fd79 	bl	800c686 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db98:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d149      	bne.n	800dc34 <R3_1_RLSwitchOnPWM+0x124>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	6a1a      	ldr	r2, [r3, #32]
 800dba4:	f240 5355 	movw	r3, #1365	; 0x555
 800dba8:	4013      	ands	r3, r2
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d021      	beq.n	800dbf2 <R3_1_RLSwitchOnPWM+0xe2>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb2:	699a      	ldr	r2, [r3, #24]
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	f7fe fe12 	bl	800c7e8 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbc8:	69da      	ldr	r2, [r3, #28]
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbce:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	f7fe fe07 	bl	800c7e8 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbde:	6a1a      	ldr	r2, [r3, #32]
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbe4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4610      	mov	r0, r2
 800dbec:	f7fe fe0a 	bl	800c804 <LL_GPIO_ResetOutputPin>
 800dbf0:	e020      	b.n	800dc34 <R3_1_RLSwitchOnPWM+0x124>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbf6:	699a      	ldr	r2, [r3, #24]
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbfc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7fe fdfe 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc0c:	69da      	ldr	r2, [r3, #28]
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc12:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800dc16:	4619      	mov	r1, r3
 800dc18:	4610      	mov	r0, r2
 800dc1a:	f7fe fdf3 	bl	800c804 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc22:	6a1a      	ldr	r2, [r3, #32]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc28:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4610      	mov	r0, r2
 800dc30:	f7fe fde8 	bl	800c804 <LL_GPIO_ResetOutputPin>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2203      	movs	r2, #3
 800dc38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  LL_ADC_INJ_StartConversion( ADCx );
 800dc3c:	68f8      	ldr	r0, [r7, #12]
 800dc3e:	f7fe fb01 	bl	800c244 <LL_ADC_INJ_StartConversion>

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800dc42:	6938      	ldr	r0, [r7, #16]
 800dc44:	f7fe fd90 	bl	800c768 <LL_TIM_EnableIT_UPDATE>



  return;
 800dc48:	bf00      	nop
}
 800dc4a:	3718      	adds	r7, #24
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Init( RDivider_Handle_t * pHandle )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	330c      	adds	r3, #12
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7f6 f86f 	bl	8003d40 <RCM_RegisterRegConv>
 800dc62:	4603      	mov	r3, r0
 800dc64:	461a      	mov	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* Check */
  RVBS_Clear( pHandle );
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 f804 	bl	800dc7a <RVBS_Clear>
}
 800dc72:	bf00      	nop
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b085      	sub	sp, #20
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	8b5b      	ldrh	r3, [r3, #26]
 800dc86:	461a      	mov	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	8b9b      	ldrh	r3, [r3, #28]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	085b      	lsrs	r3, r3, #1
 800dc90:	81bb      	strh	r3, [r7, #12]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800dc92:	2300      	movs	r3, #0
 800dc94:	81fb      	strh	r3, [r7, #14]
 800dc96:	e009      	b.n	800dcac <RVBS_Clear+0x32>
  {
    pHandle->aBuffer[index] = aux;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a1a      	ldr	r2, [r3, #32]
 800dc9c:	89fb      	ldrh	r3, [r7, #14]
 800dc9e:	005b      	lsls	r3, r3, #1
 800dca0:	4413      	add	r3, r2
 800dca2:	89ba      	ldrh	r2, [r7, #12]
 800dca4:	801a      	strh	r2, [r3, #0]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800dca6:	89fb      	ldrh	r3, [r7, #14]
 800dca8:	3301      	adds	r3, #1
 800dcaa:	81fb      	strh	r3, [r7, #14]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	8b1b      	ldrh	r3, [r3, #24]
 800dcb0:	89fa      	ldrh	r2, [r7, #14]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d3f0      	bcc.n	800dc98 <RVBS_Clear+0x1e>
  }
  pHandle->_Super.LatestConv = aux;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	89ba      	ldrh	r2, [r7, #12]
 800dcba:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	89ba      	ldrh	r2, [r7, #12]
 800dcc0:	80da      	strh	r2, [r3, #6]
  pHandle->index = 0;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800dcca:	bf00      	nop
 800dccc:	3714      	adds	r7, #20
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd4:	4770      	bx	lr

0800dcd6 <RVBS_ConvertVbusFiltrered>:

static uint16_t RVBS_ConvertVbusFiltrered( RDivider_Handle_t * pHandle )
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b086      	sub	sp, #24
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
  uint16_t hAux;
  uint8_t vindex;
  uint16_t max = 0, min = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	82bb      	strh	r3, [r7, #20]
 800dce2:	2300      	movs	r3, #0
 800dce4:	827b      	strh	r3, [r7, #18]
  uint32_t tot = 0u;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60fb      	str	r3, [r7, #12]

  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800dcea:	2300      	movs	r3, #0
 800dcec:	75fb      	strb	r3, [r7, #23]
 800dcee:	e027      	b.n	800dd40 <RVBS_ConvertVbusFiltrered+0x6a>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7f6 f8d8 	bl	8003eac <RCM_ExecRegularConv>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	817b      	strh	r3, [r7, #10]

    if ( hAux != 0xFFFFu )
 800dd00:	897b      	ldrh	r3, [r7, #10]
 800dd02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d01a      	beq.n	800dd40 <RVBS_ConvertVbusFiltrered+0x6a>
    {
      if ( vindex == 0 )
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d104      	bne.n	800dd1a <RVBS_ConvertVbusFiltrered+0x44>
      {
        min = hAux;
 800dd10:	897b      	ldrh	r3, [r7, #10]
 800dd12:	827b      	strh	r3, [r7, #18]
        max = hAux;
 800dd14:	897b      	ldrh	r3, [r7, #10]
 800dd16:	82bb      	strh	r3, [r7, #20]
 800dd18:	e00b      	b.n	800dd32 <RVBS_ConvertVbusFiltrered+0x5c>
      }
      else
      {
        if ( hAux < min )
 800dd1a:	897a      	ldrh	r2, [r7, #10]
 800dd1c:	8a7b      	ldrh	r3, [r7, #18]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d201      	bcs.n	800dd26 <RVBS_ConvertVbusFiltrered+0x50>
        {
          min = hAux;
 800dd22:	897b      	ldrh	r3, [r7, #10]
 800dd24:	827b      	strh	r3, [r7, #18]
        }
        if ( hAux > max )
 800dd26:	897a      	ldrh	r2, [r7, #10]
 800dd28:	8abb      	ldrh	r3, [r7, #20]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d901      	bls.n	800dd32 <RVBS_ConvertVbusFiltrered+0x5c>
        {
          max = hAux;
 800dd2e:	897b      	ldrh	r3, [r7, #10]
 800dd30:	82bb      	strh	r3, [r7, #20]
        }
      }
      vindex++;
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
 800dd34:	3301      	adds	r3, #1
 800dd36:	75fb      	strb	r3, [r7, #23]

      tot += hAux;
 800dd38:	897b      	ldrh	r3, [r7, #10]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	60fb      	str	r3, [r7, #12]
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800dd40:	7dfb      	ldrb	r3, [r7, #23]
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	8b1b      	ldrh	r3, [r3, #24]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d3d1      	bcc.n	800dcf0 <RVBS_ConvertVbusFiltrered+0x1a>
    }
  }

  tot -= max;
 800dd4c:	8abb      	ldrh	r3, [r7, #20]
 800dd4e:	68fa      	ldr	r2, [r7, #12]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	60fb      	str	r3, [r7, #12]
  tot -= min;
 800dd54:	8a7b      	ldrh	r3, [r7, #18]
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	60fb      	str	r3, [r7, #12]
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8b1b      	ldrh	r3, [r3, #24]
 800dd60:	3b02      	subs	r3, #2
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd68:	b29b      	uxth	r3, r3
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <RVBS_CalcAvVbusFilt>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbusFilt( RDivider_Handle_t * pHandle )
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RVBS_ConvertVbusFiltrered( pHandle );
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f7ff ffab 	bl	800dcd6 <RVBS_ConvertVbusFiltrered>
 800dd80:	4603      	mov	r3, r0
 800dd82:	813b      	strh	r3, [r7, #8]

  if ( hAux != 0xFFFF )
 800dd84:	893b      	ldrh	r3, [r7, #8]
 800dd86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d044      	beq.n	800de18 <RVBS_CalcAvVbusFilt+0xa6>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1a      	ldr	r2, [r3, #32]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	4413      	add	r3, r2
 800dd9c:	893a      	ldrh	r2, [r7, #8]
 800dd9e:	801a      	strh	r2, [r3, #0]
    wtemp = 0;
 800dda0:	2300      	movs	r3, #0
 800dda2:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800dda4:	2300      	movs	r3, #0
 800dda6:	72fb      	strb	r3, [r7, #11]
 800dda8:	e00c      	b.n	800ddc4 <RVBS_CalcAvVbusFilt+0x52>
    {
      wtemp += pHandle->aBuffer[i];
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a1a      	ldr	r2, [r3, #32]
 800ddae:	7afb      	ldrb	r3, [r7, #11]
 800ddb0:	005b      	lsls	r3, r3, #1
 800ddb2:	4413      	add	r3, r2
 800ddb4:	881b      	ldrh	r3, [r3, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	4413      	add	r3, r2
 800ddbc:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800ddbe:	7afb      	ldrb	r3, [r7, #11]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	72fb      	strb	r3, [r7, #11]
 800ddc4:	7afb      	ldrb	r3, [r7, #11]
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8b1b      	ldrh	r3, [r3, #24]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d3ec      	bcc.n	800ddaa <RVBS_CalcAvVbusFilt+0x38>
    }
    wtemp /= pHandle->LowPassFilterBW;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	8b1b      	ldrh	r3, [r3, #24]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dddc:	60fb      	str	r3, [r7, #12]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.LatestConv = hAux;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	893a      	ldrh	r2, [r7, #8]
 800ddea:	809a      	strh	r2, [r3, #4]

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	8b1b      	ldrh	r3, [r3, #24]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	da08      	bge.n	800de10 <RVBS_CalcAvVbusFilt+0x9e>
    {
      pHandle->index++;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800de04:	3301      	adds	r3, #1
 800de06:	b2da      	uxtb	r2, r3
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800de0e:	e003      	b.n	800de18 <RVBS_CalcAvVbusFilt+0xa6>
    }
    else
    {
      pHandle->index = 0;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 f80a 	bl	800de32 <RVBS_CheckFaultState>
 800de1e:	4603      	mov	r3, r0
 800de20:	461a      	mov	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	811a      	strh	r2, [r3, #8]

  return ( pHandle->_Super.FaultState );
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	891b      	ldrh	r3, [r3, #8]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
 800de32:	b480      	push	{r7}
 800de34:	b085      	sub	sp, #20
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	88da      	ldrh	r2, [r3, #6]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	8b5b      	ldrh	r3, [r3, #26]
 800de42:	429a      	cmp	r2, r3
 800de44:	d902      	bls.n	800de4c <RVBS_CheckFaultState+0x1a>
  {
    fault = MC_OVER_VOLT;
 800de46:	2302      	movs	r3, #2
 800de48:	81fb      	strh	r3, [r7, #14]
 800de4a:	e00a      	b.n	800de62 <RVBS_CheckFaultState+0x30>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	88da      	ldrh	r2, [r3, #6]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	8b9b      	ldrh	r3, [r3, #28]
 800de54:	429a      	cmp	r2, r3
 800de56:	d202      	bcs.n	800de5e <RVBS_CheckFaultState+0x2c>
  {
    fault = MC_UNDER_VOLT;
 800de58:	2304      	movs	r3, #4
 800de5a:	81fb      	strh	r3, [r7, #14]
 800de5c:	e001      	b.n	800de62 <RVBS_CheckFaultState+0x30>
  }
  else
  {
    fault = MC_NO_ERROR;
 800de5e:	2300      	movs	r3, #0
 800de60:	81fb      	strh	r3, [r7, #14]
  }
  return fault;
 800de62:	89fb      	ldrh	r3, [r7, #14]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  pHandle->Ext = 0;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	605a      	str	r2, [r3, #4]
  pHandle->RampRemainingStep = 0u;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	611a      	str	r2, [r3, #16]
  pHandle->ScalingFactor = 1u;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	615a      	str	r2, [r3, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800de96:	bf00      	nop
 800de98:	370c      	adds	r7, #12
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr

0800dea2 <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
 800dea2:	b480      	push	{r7}
 800dea4:	b085      	sub	sp, #20
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	60fb      	str	r3, [r7, #12]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d90a      	bls.n	800dece <REMNG_Calc+0x2c>
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	4413      	add	r3, r2
 800dec0:	60fb      	str	r3, [r7, #12]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	1e5a      	subs	r2, r3, #1
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	60da      	str	r2, [r3, #12]
 800decc:	e00d      	b.n	800deea <REMNG_Calc+0x48>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d109      	bne.n	800deea <REMNG_Calc+0x48>
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	6952      	ldr	r2, [r2, #20]
 800dede:	fb02 f303 	mul.w	r3, r2, r3
 800dee2:	60fb      	str	r3, [r7, #12]
    pHandle->RampRemainingStep = 0u;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	609a      	str	r2, [r3, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	6952      	ldr	r2, [r2, #20]
 800def8:	fb93 f3f2 	sdiv	r3, r3, r2
 800defc:	60bb      	str	r3, [r7, #8]
#endif

  return ret_val;
 800defe:	68bb      	ldr	r3, [r7, #8]
}
 800df00:	4618      	mov	r0, r3
 800df02:	3714      	adds	r7, #20
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b08c      	sub	sp, #48	; 0x30
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
  uint32_t aux;
  int32_t aux1;
  int32_t current_ref;
  bool retVal = true;
 800df18:	2301      	movs	r3, #1
 800df1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Get current state */
#ifdef FASTDIV
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	6952      	ldr	r2, [r2, #20]
 800df26:	fb93 f3f2 	sdiv	r3, r3, r2
 800df2a:	627b      	str	r3, [r7, #36]	; 0x24
#endif

  if ( Durationms == 0u )
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d114      	bne.n	800df5c <REMNG_ExecRamp+0x50>
  {
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800df32:	68b8      	ldr	r0, [r7, #8]
 800df34:	f000 f887 	bl	800e046 <getScalingFactor>
 800df38:	4602      	mov	r2, r0
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	615a      	str	r2, [r3, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	461a      	mov	r2, r3
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	fb03 f202 	mul.w	r2, r3, r2
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	609a      	str	r2, [r3, #8]
    pHandle->RampRemainingStep = 0u;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2200      	movs	r2, #0
 800df58:	611a      	str	r2, [r3, #16]
 800df5a:	e059      	b.n	800e010 <REMNG_ExecRamp+0x104>
  }
  else
  {
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	4618      	mov	r0, r3
 800df64:	f000 f86f 	bl	800e046 <getScalingFactor>
 800df68:	6238      	str	r0, [r7, #32]
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800df6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df6c:	f000 f86b 	bl	800e046 <getScalingFactor>
 800df70:	61f8      	str	r0, [r7, #28]
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800df72:	68b8      	ldr	r0, [r7, #8]
 800df74:	f000 f867 	bl	800e046 <getScalingFactor>
 800df78:	61b8      	str	r0, [r7, #24]
    uint32_t wScalingFactorMin;

    if ( wScalingFactor <  wScalingFactor2 )
 800df7a:	6a3a      	ldr	r2, [r7, #32]
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d209      	bcs.n	800df96 <REMNG_ExecRamp+0x8a>
    {
      if ( wScalingFactor < wScalingFactor3 )
 800df82:	6a3a      	ldr	r2, [r7, #32]
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	429a      	cmp	r2, r3
 800df88:	d202      	bcs.n	800df90 <REMNG_ExecRamp+0x84>
      {
        wScalingFactorMin = wScalingFactor;
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df8e:	e00b      	b.n	800dfa8 <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df94:	e008      	b.n	800dfa8 <REMNG_ExecRamp+0x9c>
      }
    }
    else
    {
      if ( wScalingFactor2 < wScalingFactor3 )
 800df96:	69fa      	ldr	r2, [r7, #28]
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d202      	bcs.n	800dfa4 <REMNG_ExecRamp+0x98>
      {
        wScalingFactorMin = wScalingFactor2;
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfa2:	e001      	b.n	800dfa8 <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800dfa4:	69bb      	ldr	r3, [r7, #24]
 800dfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }

    pHandle->ScalingFactor = wScalingFactorMin;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfac:	615a      	str	r2, [r3, #20]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb6:	fb03 f202 	mul.w	r2, r3, r2
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	609a      	str	r2, [r3, #8]

    /* Store the TargetFinal to be applied in the last step */
    pHandle->TargetFinal = TargetFinal;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	68ba      	ldr	r2, [r7, #8]
 800dfc2:	605a      	str	r2, [r3, #4]

    /* Compute the (wRampRemainingStep) number of steps remaining to complete
    the ramp. */
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	fb02 f303 	mul.w	r3, r2, r3
 800dfce:	617b      	str	r3, [r7, #20]
    aux /= 1000u;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	4a12      	ldr	r2, [pc, #72]	; (800e01c <REMNG_ExecRamp+0x110>)
 800dfd4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd8:	099b      	lsrs	r3, r3, #6
 800dfda:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = aux;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	60da      	str	r2, [r3, #12]
    pHandle->RampRemainingStep++;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	60da      	str	r2, [r3, #12]

    /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
    the reference value at each CalcTorqueReference. */
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 800dfec:	68ba      	ldr	r2, [r7, #8]
 800dfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	68fa      	ldr	r2, [r7, #12]
 800dff4:	6952      	ldr	r2, [r2, #20]
 800dff6:	fb02 f303 	mul.w	r3, r2, r3
 800dffa:	613b      	str	r3, [r7, #16]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	68db      	ldr	r3, [r3, #12]
 800e000:	461a      	mov	r2, r3
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	fb93 f3f2 	sdiv	r3, r3, r2
 800e008:	613b      	str	r3, [r7, #16]
    pHandle->IncDecAmount = aux1;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	693a      	ldr	r2, [r7, #16]
 800e00e:	611a      	str	r2, [r3, #16]
  }

  return retVal;
 800e010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e014:	4618      	mov	r0, r3
 800e016:	3730      	adds	r7, #48	; 0x30
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	10624dd3 	.word	0x10624dd3

0800e020 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
 800e020:	b480      	push	{r7}
 800e022:	b085      	sub	sp, #20
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800e028:	2300      	movs	r3, #0
 800e02a:	73fb      	strb	r3, [r7, #15]
  if ( pHandle->RampRemainingStep == 0u )
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d101      	bne.n	800e038 <REMNG_RampCompleted+0x18>
  {
    retVal = true;
 800e034:	2301      	movs	r3, #1
 800e036:	73fb      	strb	r3, [r7, #15]
  }
  return retVal;
 800e038:	7bfb      	ldrb	r3, [r7, #15]
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr

0800e046 <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 800e046:	b480      	push	{r7}
 800e048:	b087      	sub	sp, #28
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	da05      	bge.n	800e060 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	425b      	negs	r3, r3
 800e058:	60fb      	str	r3, [r7, #12]
    TargetAbs = ( uint32_t )( aux );
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	613b      	str	r3, [r7, #16]
 800e05e:	e001      	b.n	800e064 <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = ( uint32_t )( Target );
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	613b      	str	r3, [r7, #16]
  }
  for ( i = 1u; i < 32u; i++ )
 800e064:	2301      	movs	r3, #1
 800e066:	75fb      	strb	r3, [r7, #23]
 800e068:	e00d      	b.n	800e086 <getScalingFactor+0x40>
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800e06a:	7dfb      	ldrb	r3, [r7, #23]
 800e06c:	f1c3 031f 	rsb	r3, r3, #31
 800e070:	2201      	movs	r2, #1
 800e072:	fa02 f303 	lsl.w	r3, r2, r3
 800e076:	60bb      	str	r3, [r7, #8]
    if ( TargetAbs >= limit )
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d206      	bcs.n	800e08e <getScalingFactor+0x48>
  for ( i = 1u; i < 32u; i++ )
 800e080:	7dfb      	ldrb	r3, [r7, #23]
 800e082:	3301      	adds	r3, #1
 800e084:	75fb      	strb	r3, [r7, #23]
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	2b1f      	cmp	r3, #31
 800e08a:	d9ee      	bls.n	800e06a <getScalingFactor+0x24>
 800e08c:	e000      	b.n	800e090 <getScalingFactor+0x4a>
    {
      break;
 800e08e:	bf00      	nop
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 800e090:	7dfb      	ldrb	r3, [r7, #23]
 800e092:	3b01      	subs	r3, #1
 800e094:	2201      	movs	r2, #1
 800e096:	fa02 f303 	lsl.w	r3, r2, r3
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	371c      	adds	r7, #28
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr

0800e0a6 <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360ï¿½/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
 800e0a6:	b480      	push	{r7}
 800e0a8:	b083      	sub	sp, #12
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
  return ( pHandle->hElAngle );
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	370c      	adds	r7, #12
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr

0800e0c0 <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrMecSpeedUnit );
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	370c      	adds	r7, #12
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr

0800e0da <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
 800e0da:	b480      	push	{r7}
 800e0dc:	b083      	sub	sp, #12
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	6078      	str	r0, [r7, #4]
  return ( pHandle->InstantaneousElSpeedDpp );
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b087      	sub	sp, #28
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800e0fe:	2301      	movs	r3, #1
 800e100:	75fb      	strb	r3, [r7, #23]
  uint8_t bSpeedErrorNumber;
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	78db      	ldrb	r3, [r3, #3]
 800e106:	73fb      	strb	r3, [r7, #15]

  bool SpeedError = false;
 800e108:	2300      	movs	r3, #0
 800e10a:	757b      	strb	r3, [r7, #21]
  uint16_t hAbsMecSpeedUnit, hAbsMecAccelUnitP;
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	75bb      	strb	r3, [r7, #22]

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	da09      	bge.n	800e130 <SPD_IsMecSpeedReliable+0x3c>
  {
    hAux = -( *pMecSpeedUnit );
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e122:	b29b      	uxth	r3, r3
 800e124:	425b      	negs	r3, r3
 800e126:	b29b      	uxth	r3, r3
 800e128:	81bb      	strh	r3, [r7, #12]
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 800e12a:	89bb      	ldrh	r3, [r7, #12]
 800e12c:	827b      	strh	r3, [r7, #18]
 800e12e:	e003      	b.n	800e138 <SPD_IsMecSpeedReliable+0x44>
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e136:	827b      	strh	r3, [r7, #18]
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	8a9b      	ldrh	r3, [r3, #20]
 800e13c:	8a7a      	ldrh	r2, [r7, #18]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d901      	bls.n	800e146 <SPD_IsMecSpeedReliable+0x52>
  {
    SpeedError = true;
 800e142:	2301      	movs	r3, #1
 800e144:	757b      	strb	r3, [r7, #21]
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8adb      	ldrh	r3, [r3, #22]
 800e14a:	8a7a      	ldrh	r2, [r7, #18]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d201      	bcs.n	800e154 <SPD_IsMecSpeedReliable+0x60>
  {
    SpeedError = true;
 800e150:	2301      	movs	r3, #1
 800e152:	757b      	strb	r3, [r7, #21]
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	da09      	bge.n	800e172 <SPD_IsMecSpeedReliable+0x7e>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e164:	b29b      	uxth	r3, r3
 800e166:	425b      	negs	r3, r3
 800e168:	b29b      	uxth	r3, r3
 800e16a:	81bb      	strh	r3, [r7, #12]
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 800e16c:	89bb      	ldrh	r3, [r7, #12]
 800e16e:	823b      	strh	r3, [r7, #16]
 800e170:	e003      	b.n	800e17a <SPD_IsMecSpeedReliable+0x86>
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800e178:	823b      	strh	r3, [r7, #16]
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	8b1b      	ldrh	r3, [r3, #24]
 800e17e:	8a3a      	ldrh	r2, [r7, #16]
 800e180:	429a      	cmp	r2, r3
 800e182:	d901      	bls.n	800e188 <SPD_IsMecSpeedReliable+0x94>
  {
    SpeedError = true;
 800e184:	2301      	movs	r3, #1
 800e186:	757b      	strb	r3, [r7, #21]
  }

  if ( SpeedError == true )
 800e188:	7d7b      	ldrb	r3, [r7, #21]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d007      	beq.n	800e19e <SPD_IsMecSpeedReliable+0xaa>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800e18e:	7dba      	ldrb	r2, [r7, #22]
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	429a      	cmp	r2, r3
 800e194:	d209      	bcs.n	800e1aa <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber++;
 800e196:	7dbb      	ldrb	r3, [r7, #22]
 800e198:	3301      	adds	r3, #1
 800e19a:	75bb      	strb	r3, [r7, #22]
 800e19c:	e005      	b.n	800e1aa <SPD_IsMecSpeedReliable+0xb6>
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800e19e:	7dba      	ldrb	r2, [r7, #22]
 800e1a0:	7bfb      	ldrb	r3, [r7, #15]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d201      	bcs.n	800e1aa <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber = 0u;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800e1aa:	7dba      	ldrb	r2, [r7, #22]
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d101      	bne.n	800e1b6 <SPD_IsMecSpeedReliable+0xc2>
  {
    SpeedSensorReliability = false;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	75fb      	strb	r3, [r7, #23]
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	7dba      	ldrb	r2, [r7, #22]
 800e1ba:	701a      	strb	r2, [r3, #0]

  return ( SpeedSensorReliability );
 800e1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	371c      	adds	r7, #28
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr

0800e1ca <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800e1ca:	b480      	push	{r7}
 800e1cc:	b085      	sub	sp, #20
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800e1d8:	60fb      	str	r3, [r7, #12]
  wAux *= INT16_MAX;
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	03db      	lsls	r3, r3, #15
 800e1e0:	1a9b      	subs	r3, r3, r2
 800e1e2:	60fb      	str	r3, [r7, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	8a9b      	ldrh	r3, [r3, #20]
 800e1e8:	b21b      	sxth	r3, r3
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1f2:	60fb      	str	r3, [r7, #12]
  return ( int16_t )wAux;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	b21b      	sxth	r3, r3
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3714      	adds	r7, #20
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr

0800e204 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	607a      	str	r2, [r7, #4]

  pHandle->PISpeed = pPI;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	611a      	str	r2, [r3, #16]
  pHandle->SPD = SPD_Handle;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	615a      	str	r2, [r3, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	701a      	strb	r2, [r3, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800e22c:	041a      	lsls	r2, r3, #16
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	605a      	str	r2, [r3, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e238:	041a      	lsls	r2, r3, #16
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	805a      	strh	r2, [r3, #2]
  pHandle->RampRemainingStep = 0u;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	2200      	movs	r2, #0
 800e24e:	619a      	str	r2, [r3, #24]
}
 800e250:	bf00      	nop
 800e252:	3714      	adds	r7, #20
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800e25c:	b480      	push	{r7}
 800e25e:	b083      	sub	sp, #12
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  pHandle->SPD = SPD_Handle;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	615a      	str	r2, [r3, #20]
}
 800e26c:	bf00      	nop
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  return ( pHandle->SPD );
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	695b      	ldr	r3, [r3, #20]
}
 800e284:	4618      	mov	r0, r3
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  if ( pHandle->Mode == STC_SPEED_MODE )
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d105      	bne.n	800e2ac <STC_Clear+0x1c>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fd fa5d 	bl	800b766 <PID_SetIntegralTerm>
  }
}
 800e2ac:	bf00      	nop
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}

0800e2b4 <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	da02      	bge.n	800e2ca <STC_GetMecSpeedRefUnit+0x16>
 800e2c4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e2c8:	33ff      	adds	r3, #255	; 0xff
 800e2ca:	141b      	asrs	r3, r3, #16
 800e2cc:	b21b      	sxth	r3, r3
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	370c      	adds	r7, #12
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr

0800e2da <STC_GetTorqueRef>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b083      	sub	sp, #12
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	da02      	bge.n	800e2f0 <STC_GetTorqueRef+0x16>
 800e2ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e2ee:	33ff      	adds	r3, #255	; 0xff
 800e2f0:	141b      	asrs	r3, r3, #16
 800e2f2:	b21b      	sxth	r3, r3
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <STC_SetControlMode>:
  *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	460b      	mov	r3, r1
 800e30a:	70fb      	strb	r3, [r7, #3]
  pHandle->Mode = bMode;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	78fa      	ldrb	r2, [r7, #3]
 800e310:	701a      	strb	r2, [r3, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	60da      	str	r2, [r3, #12]
}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b088      	sub	sp, #32
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	460b      	mov	r3, r1
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	817b      	strh	r3, [r7, #10]
  bool AllowedRange = true;
 800e332:	2301      	movs	r3, #1
 800e334:	77fb      	strb	r3, [r7, #31]
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d116      	bne.n	800e36c <STC_ExecRamp+0x48>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7ff ffcb 	bl	800e2da <STC_GetTorqueRef>
 800e344:	4603      	mov	r3, r0
 800e346:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800e348:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800e350:	4293      	cmp	r3, r2
 800e352:	dd01      	ble.n	800e358 <STC_ExecRamp+0x34>
    {
      AllowedRange = false;
 800e354:	2300      	movs	r3, #0
 800e356:	77fb      	strb	r3, [r7, #31]
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800e35e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e362:	429a      	cmp	r2, r3
 800e364:	da2d      	bge.n	800e3c2 <STC_ExecRamp+0x9e>
    {
      AllowedRange = false;
 800e366:	2300      	movs	r3, #0
 800e368:	77fb      	strb	r3, [r7, #31]
 800e36a:	e02a      	b.n	800e3c2 <STC_ExecRamp+0x9e>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	da02      	bge.n	800e37a <STC_ExecRamp+0x56>
 800e374:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e378:	33ff      	adds	r3, #255	; 0xff
 800e37a:	141b      	asrs	r3, r3, #16
 800e37c:	83bb      	strh	r3, [r7, #28]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800e37e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	8bd2      	ldrh	r2, [r2, #30]
 800e386:	4293      	cmp	r3, r2
 800e388:	dd02      	ble.n	800e390 <STC_ExecRamp+0x6c>
    {
      AllowedRange = false;
 800e38a:	2300      	movs	r3, #0
 800e38c:	77fb      	strb	r3, [r7, #31]
 800e38e:	e018      	b.n	800e3c2 <STC_ExecRamp+0x9e>
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800e396:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	da02      	bge.n	800e3a4 <STC_ExecRamp+0x80>
    {
      AllowedRange = false;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	77fb      	strb	r3, [r7, #31]
 800e3a2:	e00e      	b.n	800e3c2 <STC_ExecRamp+0x9e>
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800e3a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	8c12      	ldrh	r2, [r2, #32]
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	da08      	bge.n	800e3c2 <STC_ExecRamp+0x9e>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800e3b6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	dd01      	ble.n	800e3c2 <STC_ExecRamp+0x9e>
      {
        AllowedRange = false;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	77fb      	strb	r3, [r7, #31]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 800e3c2:	7ffb      	ldrb	r3, [r7, #31]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d041      	beq.n	800e44c <STC_ExecRamp+0x128>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d115      	bne.n	800e3fa <STC_ExecRamp+0xd6>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d105      	bne.n	800e3e2 <STC_ExecRamp+0xbe>
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800e3d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3da:	041a      	lsls	r2, r3, #16
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	605a      	str	r2, [r3, #4]
 800e3e0:	e004      	b.n	800e3ec <STC_ExecRamp+0xc8>
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800e3e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e3e6:	041a      	lsls	r2, r3, #16
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	609a      	str	r2, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	619a      	str	r2, [r3, #24]
 800e3f8:	e028      	b.n	800e44c <STC_ExecRamp+0x128>
    }
    else
    {
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	897a      	ldrh	r2, [r7, #10]
 800e3fe:	805a      	strh	r2, [r3, #2]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	8b9b      	ldrh	r3, [r3, #28]
 800e404:	461a      	mov	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	fb02 f303 	mul.w	r3, r2, r3
 800e40c:	61bb      	str	r3, [r7, #24]
      wAux /= 1000u;
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	4a11      	ldr	r2, [pc, #68]	; (800e458 <STC_ExecRamp+0x134>)
 800e412:	fba2 2303 	umull	r2, r3, r2, r3
 800e416:	099b      	lsrs	r3, r3, #6
 800e418:	61bb      	str	r3, [r7, #24]
      pHandle->RampRemainingStep = wAux;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	69ba      	ldr	r2, [r7, #24]
 800e41e:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800e42a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800e42e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	041b      	lsls	r3, r3, #16
 800e436:	617b      	str	r3, [r7, #20]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	461a      	mov	r2, r3
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	fb93 f3f2 	sdiv	r3, r3, r2
 800e444:	617b      	str	r3, [r7, #20]
      pHandle->IncDecAmount = wAux1;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	619a      	str	r2, [r3, #24]
    }
  }

  return AllowedRange;
 800e44c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3720      	adds	r7, #32
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	10624dd3 	.word	0x10624dd3

0800e45c <STC_StopRamp>:
  *         rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]

  pHandle->RampRemainingStep = 0u;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2200      	movs	r2, #0
 800e46e:	619a      	str	r2, [r3, #24]
}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b086      	sub	sp, #24
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  int32_t wCurrentReference;
  int16_t hTorqueReference = 0;
 800e484:	2300      	movs	r3, #0
 800e486:	827b      	strh	r3, [r7, #18]
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d103      	bne.n	800e498 <STC_CalcTorqueReference+0x1c>
  {
    wCurrentReference = pHandle->TorqueRef;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	617b      	str	r3, [r7, #20]
 800e496:	e002      	b.n	800e49e <STC_CalcTorqueReference+0x22>
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	617b      	str	r3, [r7, #20]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d90a      	bls.n	800e4bc <STC_CalcTorqueReference+0x40>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	699b      	ldr	r3, [r3, #24]
 800e4aa:	697a      	ldr	r2, [r7, #20]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	617b      	str	r3, [r7, #20]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	1e5a      	subs	r2, r3, #1
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	60da      	str	r2, [r3, #12]
 800e4ba:	e00b      	b.n	800e4d4 <STC_CalcTorqueReference+0x58>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d107      	bne.n	800e4d4 <STC_CalcTorqueReference+0x58>
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e4ca:	041b      	lsls	r3, r3, #16
 800e4cc:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = 0u;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d126      	bne.n	800e52a <STC_CalcTorqueReference+0xae>
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	da02      	bge.n	800e4e8 <STC_CalcTorqueReference+0x6c>
 800e4e2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e4e6:	33ff      	adds	r3, #255	; 0xff
 800e4e8:	141b      	asrs	r3, r3, #16
 800e4ea:	823b      	strh	r3, [r7, #16]
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	695b      	ldr	r3, [r3, #20]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff fde5 	bl	800e0c0 <SPD_GetAvrgMecSpeedUnit>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	81fb      	strh	r3, [r7, #14]
    hError = hTargetSpeed - hMeasuredSpeed;
 800e4fa:	8a3a      	ldrh	r2, [r7, #16]
 800e4fc:	89fb      	ldrh	r3, [r7, #14]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	b29b      	uxth	r3, r3
 800e502:	81bb      	strh	r3, [r7, #12]
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	691b      	ldr	r3, [r3, #16]
 800e508:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e50c:	4611      	mov	r1, r2
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fd f96c 	bl	800b7ec <PI_Controller>
 800e514:	4603      	mov	r3, r0
 800e516:	827b      	strh	r3, [r7, #18]

    pHandle->SpeedRefUnitExt = wCurrentReference;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	605a      	str	r2, [r3, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800e51e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e522:	041a      	lsls	r2, r3, #16
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	609a      	str	r2, [r3, #8]
 800e528:	e00a      	b.n	800e540 <STC_CalcTorqueReference+0xc4>
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	697a      	ldr	r2, [r7, #20]
 800e52e:	609a      	str	r2, [r3, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2b00      	cmp	r3, #0
 800e534:	da02      	bge.n	800e53c <STC_CalcTorqueReference+0xc0>
 800e536:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e53a:	33ff      	adds	r3, #255	; 0xff
 800e53c:	141b      	asrs	r3, r3, #16
 800e53e:	827b      	strh	r3, [r7, #18]
  }

  return hTorqueReference;
 800e540:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <STC_GetMecSpeedRefUnitDefault>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  return pHandle->MecSpeedRefUnitDefault;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	370c      	adds	r7, #12
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr

0800e566 <STC_GetMaxAppPositiveMecSpeedUnit>:
/**
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e566:	b480      	push	{r7}
 800e568:	b083      	sub	sp, #12
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	8bdb      	ldrh	r3, [r3, #30]
}
 800e572:	4618      	mov	r0, r3
 800e574:	370c      	adds	r7, #12
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <STC_GetMinAppNegativeMecSpeedUnit>:
/**
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e57e:	b480      	push	{r7}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  return pHandle->MinAppNegativeMecSpeedUnit;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <STC_GetDefaultIqdref>:
  * @brief It returns the default values of Iqdref.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e598:	b480      	push	{r7}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e5a6:	813b      	strh	r3, [r7, #8]
  IqdRefDefault.d = pHandle->IdrefDefault;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5ae:	817b      	strh	r3, [r7, #10]
  return IqdRefDefault;
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	60fb      	str	r3, [r7, #12]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	89ba      	ldrh	r2, [r7, #12]
 800e5b8:	f362 030f 	bfi	r3, r2, #0, #16
 800e5bc:	89fa      	ldrh	r2, [r7, #14]
 800e5be:	f362 431f 	bfi	r3, r2, #16, #16
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3714      	adds	r7, #20
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr

0800e5ce <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b082      	sub	sp, #8
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	695b      	ldr	r3, [r3, #20]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7ff fd70 	bl	800e0c0 <SPD_GetAvrgMecSpeedUnit>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	041a      	lsls	r2, r3, #16
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	605a      	str	r2, [r3, #4]
}
 800e5e8:	bf00      	nop
 800e5ea:	3708      	adds	r7, #8
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <STM_Init>:
  *         once right after object creation.
  * @param pHandle pointer on the component instance to initialize.
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]

  pHandle->bState = IDLE;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	701a      	strb	r2, [r3, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	809a      	strh	r2, [r3, #4]
}
 800e60a:	bf00      	nop
 800e60c:	370c      	adds	r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
	...

0800e618 <STM_NextState>:
  * @param bState New requested state
  * @retval bool It returns true if the state has been really set equal to
  *         bState, false if the requested state can't be reached
  */
__weak bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	460b      	mov	r3, r1
 800e622:	70fb      	strb	r3, [r7, #3]
  bool bChangeState = false;
 800e624:	2300      	movs	r3, #0
 800e626:	73fb      	strb	r3, [r7, #15]
  State_t bCurrentState = pHandle->bState;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	737b      	strb	r3, [r7, #13]
  State_t bNewState = bCurrentState;
 800e62e:	7b7b      	ldrb	r3, [r7, #13]
 800e630:	73bb      	strb	r3, [r7, #14]

  switch ( bCurrentState )
 800e632:	7b7b      	ldrb	r3, [r7, #13]
 800e634:	2b14      	cmp	r3, #20
 800e636:	f200 8110 	bhi.w	800e85a <STM_NextState+0x242>
 800e63a:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <STM_NextState+0x28>)
 800e63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e640:	0800e6a7 	.word	0x0800e6a7
 800e644:	0800e6c5 	.word	0x0800e6c5
 800e648:	0800e72b 	.word	0x0800e72b
 800e64c:	0800e73d 	.word	0x0800e73d
 800e650:	0800e7c7 	.word	0x0800e7c7
 800e654:	0800e7ff 	.word	0x0800e7ff
 800e658:	0800e815 	.word	0x0800e815
 800e65c:	0800e825 	.word	0x0800e825
 800e660:	0800e835 	.word	0x0800e835
 800e664:	0800e845 	.word	0x0800e845
 800e668:	0800e85b 	.word	0x0800e85b
 800e66c:	0800e85b 	.word	0x0800e85b
 800e670:	0800e695 	.word	0x0800e695
 800e674:	0800e6e3 	.word	0x0800e6e3
 800e678:	0800e6fb 	.word	0x0800e6fb
 800e67c:	0800e713 	.word	0x0800e713
 800e680:	0800e767 	.word	0x0800e767
 800e684:	0800e77f 	.word	0x0800e77f
 800e688:	0800e7b1 	.word	0x0800e7b1
 800e68c:	0800e7e3 	.word	0x0800e7e3
 800e690:	0800e79b 	.word	0x0800e79b
  {
    case ICLWAIT:
      if ( bState == IDLE )
 800e694:	78fb      	ldrb	r3, [r7, #3]
 800e696:	2b00      	cmp	r3, #0
 800e698:	f040 80e1 	bne.w	800e85e <STM_NextState+0x246>
      {
        bNewState = bState;
 800e69c:	78fb      	ldrb	r3, [r7, #3]
 800e69e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6a4:	e0db      	b.n	800e85e <STM_NextState+0x246>
    case IDLE:
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800e6a6:	78fb      	ldrb	r3, [r7, #3]
 800e6a8:	2b03      	cmp	r3, #3
 800e6aa:	d006      	beq.n	800e6ba <STM_NextState+0xa2>
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d003      	beq.n	800e6ba <STM_NextState+0xa2>
           || ( bState == ICLWAIT ) )
 800e6b2:	78fb      	ldrb	r3, [r7, #3]
 800e6b4:	2b0c      	cmp	r3, #12
 800e6b6:	f040 80d4 	bne.w	800e862 <STM_NextState+0x24a>
      {
        bNewState = bState;
 800e6ba:	78fb      	ldrb	r3, [r7, #3]
 800e6bc:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6c2:	e0ce      	b.n	800e862 <STM_NextState+0x24a>

    case IDLE_ALIGNMENT:
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800e6c4:	78fb      	ldrb	r3, [r7, #3]
 800e6c6:	2b07      	cmp	r3, #7
 800e6c8:	d006      	beq.n	800e6d8 <STM_NextState+0xc0>
 800e6ca:	78fb      	ldrb	r3, [r7, #3]
 800e6cc:	2b0d      	cmp	r3, #13
 800e6ce:	d003      	beq.n	800e6d8 <STM_NextState+0xc0>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	2b0e      	cmp	r3, #14
 800e6d4:	f040 80c7 	bne.w	800e866 <STM_NextState+0x24e>
      {
        bNewState = bState;
 800e6d8:	78fb      	ldrb	r3, [r7, #3]
 800e6da:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6e0:	e0c1      	b.n	800e866 <STM_NextState+0x24e>

    case ALIGN_CHARGE_BOOT_CAP:
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800e6e2:	78fb      	ldrb	r3, [r7, #3]
 800e6e4:	2b0e      	cmp	r3, #14
 800e6e6:	d003      	beq.n	800e6f0 <STM_NextState+0xd8>
 800e6e8:	78fb      	ldrb	r3, [r7, #3]
 800e6ea:	2b07      	cmp	r3, #7
 800e6ec:	f040 80bd 	bne.w	800e86a <STM_NextState+0x252>
      {
        bNewState = bState;
 800e6f0:	78fb      	ldrb	r3, [r7, #3]
 800e6f2:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e6f8:	e0b7      	b.n	800e86a <STM_NextState+0x252>

    case ALIGN_OFFSET_CALIB:
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800e6fa:	78fb      	ldrb	r3, [r7, #3]
 800e6fc:	2b0f      	cmp	r3, #15
 800e6fe:	d003      	beq.n	800e708 <STM_NextState+0xf0>
 800e700:	78fb      	ldrb	r3, [r7, #3]
 800e702:	2b07      	cmp	r3, #7
 800e704:	f040 80b3 	bne.w	800e86e <STM_NextState+0x256>
      {
        bNewState = bState;
 800e708:	78fb      	ldrb	r3, [r7, #3]
 800e70a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e70c:	2301      	movs	r3, #1
 800e70e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e710:	e0ad      	b.n	800e86e <STM_NextState+0x256>

    case ALIGN_CLEAR:
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800e712:	78fb      	ldrb	r3, [r7, #3]
 800e714:	2b02      	cmp	r3, #2
 800e716:	d003      	beq.n	800e720 <STM_NextState+0x108>
 800e718:	78fb      	ldrb	r3, [r7, #3]
 800e71a:	2b07      	cmp	r3, #7
 800e71c:	f040 80a9 	bne.w	800e872 <STM_NextState+0x25a>
      {
        bNewState = bState;
 800e720:	78fb      	ldrb	r3, [r7, #3]
 800e722:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e724:	2301      	movs	r3, #1
 800e726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e728:	e0a3      	b.n	800e872 <STM_NextState+0x25a>

    case ALIGNMENT:
      if ( bState == ANY_STOP )
 800e72a:	78fb      	ldrb	r3, [r7, #3]
 800e72c:	2b07      	cmp	r3, #7
 800e72e:	f040 80a2 	bne.w	800e876 <STM_NextState+0x25e>
      {
        bNewState = bState;
 800e732:	78fb      	ldrb	r3, [r7, #3]
 800e734:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e736:	2301      	movs	r3, #1
 800e738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e73a:	e09c      	b.n	800e876 <STM_NextState+0x25e>

    case IDLE_START:
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800e73c:	78fb      	ldrb	r3, [r7, #3]
 800e73e:	2b07      	cmp	r3, #7
 800e740:	d00c      	beq.n	800e75c <STM_NextState+0x144>
 800e742:	78fb      	ldrb	r3, [r7, #3]
 800e744:	2b10      	cmp	r3, #16
 800e746:	d009      	beq.n	800e75c <STM_NextState+0x144>
 800e748:	78fb      	ldrb	r3, [r7, #3]
 800e74a:	2b04      	cmp	r3, #4
 800e74c:	d006      	beq.n	800e75c <STM_NextState+0x144>
           ( bState == START ) ||
 800e74e:	78fb      	ldrb	r3, [r7, #3]
 800e750:	2b11      	cmp	r3, #17
 800e752:	d003      	beq.n	800e75c <STM_NextState+0x144>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800e754:	78fb      	ldrb	r3, [r7, #3]
 800e756:	2b01      	cmp	r3, #1
 800e758:	f040 808f 	bne.w	800e87a <STM_NextState+0x262>
      {
        bNewState = bState;
 800e75c:	78fb      	ldrb	r3, [r7, #3]
 800e75e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e760:	2301      	movs	r3, #1
 800e762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e764:	e089      	b.n	800e87a <STM_NextState+0x262>

    case CHARGE_BOOT_CAP:
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800e766:	78fb      	ldrb	r3, [r7, #3]
 800e768:	2b11      	cmp	r3, #17
 800e76a:	d003      	beq.n	800e774 <STM_NextState+0x15c>
 800e76c:	78fb      	ldrb	r3, [r7, #3]
 800e76e:	2b07      	cmp	r3, #7
 800e770:	f040 8085 	bne.w	800e87e <STM_NextState+0x266>
      {
        bNewState = bState;
 800e774:	78fb      	ldrb	r3, [r7, #3]
 800e776:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e778:	2301      	movs	r3, #1
 800e77a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e77c:	e07f      	b.n	800e87e <STM_NextState+0x266>

    case OFFSET_CALIB:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800e77e:	78fb      	ldrb	r3, [r7, #3]
 800e780:	2b12      	cmp	r3, #18
 800e782:	d005      	beq.n	800e790 <STM_NextState+0x178>
 800e784:	78fb      	ldrb	r3, [r7, #3]
 800e786:	2b07      	cmp	r3, #7
 800e788:	d002      	beq.n	800e790 <STM_NextState+0x178>
 800e78a:	78fb      	ldrb	r3, [r7, #3]
 800e78c:	2b14      	cmp	r3, #20
 800e78e:	d178      	bne.n	800e882 <STM_NextState+0x26a>
      {
        bNewState = bState;
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e794:	2301      	movs	r3, #1
 800e796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e798:	e073      	b.n	800e882 <STM_NextState+0x26a>

     case WAIT_STOP_MOTOR:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800e79a:	78fb      	ldrb	r3, [r7, #3]
 800e79c:	2b12      	cmp	r3, #18
 800e79e:	d002      	beq.n	800e7a6 <STM_NextState+0x18e>
 800e7a0:	78fb      	ldrb	r3, [r7, #3]
 800e7a2:	2b07      	cmp	r3, #7
 800e7a4:	d16f      	bne.n	800e886 <STM_NextState+0x26e>
      {
        bNewState = bState;
 800e7a6:	78fb      	ldrb	r3, [r7, #3]
 800e7a8:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7ae:	e06a      	b.n	800e886 <STM_NextState+0x26e>

    case CLEAR:
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800e7b0:	78fb      	ldrb	r3, [r7, #3]
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d002      	beq.n	800e7bc <STM_NextState+0x1a4>
 800e7b6:	78fb      	ldrb	r3, [r7, #3]
 800e7b8:	2b07      	cmp	r3, #7
 800e7ba:	d166      	bne.n	800e88a <STM_NextState+0x272>
      {
        bNewState = bState;
 800e7bc:	78fb      	ldrb	r3, [r7, #3]
 800e7be:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7c4:	e061      	b.n	800e88a <STM_NextState+0x272>

    case START:
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800e7c6:	78fb      	ldrb	r3, [r7, #3]
 800e7c8:	2b13      	cmp	r3, #19
 800e7ca:	d005      	beq.n	800e7d8 <STM_NextState+0x1c0>
 800e7cc:	78fb      	ldrb	r3, [r7, #3]
 800e7ce:	2b07      	cmp	r3, #7
 800e7d0:	d002      	beq.n	800e7d8 <STM_NextState+0x1c0>
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	2b05      	cmp	r3, #5
 800e7d6:	d15a      	bne.n	800e88e <STM_NextState+0x276>
      {
        bNewState = bState;
 800e7d8:	78fb      	ldrb	r3, [r7, #3]
 800e7da:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7e0:	e055      	b.n	800e88e <STM_NextState+0x276>

    case SWITCH_OVER:
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800e7e2:	78fb      	ldrb	r3, [r7, #3]
 800e7e4:	2b04      	cmp	r3, #4
 800e7e6:	d005      	beq.n	800e7f4 <STM_NextState+0x1dc>
 800e7e8:	78fb      	ldrb	r3, [r7, #3]
 800e7ea:	2b07      	cmp	r3, #7
 800e7ec:	d002      	beq.n	800e7f4 <STM_NextState+0x1dc>
 800e7ee:	78fb      	ldrb	r3, [r7, #3]
 800e7f0:	2b05      	cmp	r3, #5
 800e7f2:	d14e      	bne.n	800e892 <STM_NextState+0x27a>
      {
        bNewState = bState;
 800e7f4:	78fb      	ldrb	r3, [r7, #3]
 800e7f6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e7fc:	e049      	b.n	800e892 <STM_NextState+0x27a>

    case START_RUN:
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800e7fe:	78fb      	ldrb	r3, [r7, #3]
 800e800:	2b06      	cmp	r3, #6
 800e802:	d002      	beq.n	800e80a <STM_NextState+0x1f2>
 800e804:	78fb      	ldrb	r3, [r7, #3]
 800e806:	2b07      	cmp	r3, #7
 800e808:	d145      	bne.n	800e896 <STM_NextState+0x27e>
      {
        bNewState = bState;
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e80e:	2301      	movs	r3, #1
 800e810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e812:	e040      	b.n	800e896 <STM_NextState+0x27e>

    case RUN:
      if ( bState == ANY_STOP )
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	2b07      	cmp	r3, #7
 800e818:	d13f      	bne.n	800e89a <STM_NextState+0x282>
      {
        bNewState = bState;
 800e81a:	78fb      	ldrb	r3, [r7, #3]
 800e81c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e81e:	2301      	movs	r3, #1
 800e820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e822:	e03a      	b.n	800e89a <STM_NextState+0x282>

    case ANY_STOP:
      if ( bState == STOP )
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	2b08      	cmp	r3, #8
 800e828:	d139      	bne.n	800e89e <STM_NextState+0x286>
      {
        bNewState = bState;
 800e82a:	78fb      	ldrb	r3, [r7, #3]
 800e82c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e82e:	2301      	movs	r3, #1
 800e830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e832:	e034      	b.n	800e89e <STM_NextState+0x286>

    case STOP:
      if ( bState == STOP_IDLE )
 800e834:	78fb      	ldrb	r3, [r7, #3]
 800e836:	2b09      	cmp	r3, #9
 800e838:	d133      	bne.n	800e8a2 <STM_NextState+0x28a>
      {
        bNewState = bState;
 800e83a:	78fb      	ldrb	r3, [r7, #3]
 800e83c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e83e:	2301      	movs	r3, #1
 800e840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e842:	e02e      	b.n	800e8a2 <STM_NextState+0x28a>

    case STOP_IDLE:
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800e844:	78fb      	ldrb	r3, [r7, #3]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <STM_NextState+0x238>
 800e84a:	78fb      	ldrb	r3, [r7, #3]
 800e84c:	2b0c      	cmp	r3, #12
 800e84e:	d12a      	bne.n	800e8a6 <STM_NextState+0x28e>
      {
        bNewState = bState;
 800e850:	78fb      	ldrb	r3, [r7, #3]
 800e852:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e854:	2301      	movs	r3, #1
 800e856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e858:	e025      	b.n	800e8a6 <STM_NextState+0x28e>
    default:
      break;
 800e85a:	bf00      	nop
 800e85c:	e024      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e85e:	bf00      	nop
 800e860:	e022      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e862:	bf00      	nop
 800e864:	e020      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e866:	bf00      	nop
 800e868:	e01e      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e86a:	bf00      	nop
 800e86c:	e01c      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e86e:	bf00      	nop
 800e870:	e01a      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e872:	bf00      	nop
 800e874:	e018      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e876:	bf00      	nop
 800e878:	e016      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e87a:	bf00      	nop
 800e87c:	e014      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e87e:	bf00      	nop
 800e880:	e012      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e882:	bf00      	nop
 800e884:	e010      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e886:	bf00      	nop
 800e888:	e00e      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e88a:	bf00      	nop
 800e88c:	e00c      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e88e:	bf00      	nop
 800e890:	e00a      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e892:	bf00      	nop
 800e894:	e008      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e896:	bf00      	nop
 800e898:	e006      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e89a:	bf00      	nop
 800e89c:	e004      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e89e:	bf00      	nop
 800e8a0:	e002      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e8a2:	bf00      	nop
 800e8a4:	e000      	b.n	800e8a8 <STM_NextState+0x290>
      break;
 800e8a6:	bf00      	nop
  }

  if ( bChangeState )
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d003      	beq.n	800e8b6 <STM_NextState+0x29e>
  {
    pHandle->bState = bNewState;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7bba      	ldrb	r2, [r7, #14]
 800e8b2:	701a      	strb	r2, [r3, #0]
 800e8b4:	e00d      	b.n	800e8d2 <STM_NextState+0x2ba>
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800e8b6:	78fb      	ldrb	r3, [r7, #3]
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d00a      	beq.n	800e8d2 <STM_NextState+0x2ba>
 800e8bc:	78fb      	ldrb	r3, [r7, #3]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	d007      	beq.n	800e8d2 <STM_NextState+0x2ba>
 800e8c2:	78fb      	ldrb	r3, [r7, #3]
 800e8c4:	2b07      	cmp	r3, #7
 800e8c6:	d004      	beq.n	800e8d2 <STM_NextState+0x2ba>
            || ( bState == ANY_STOP ) ) )
    {
      /* If new state is not a user command START/STOP raise a software error */
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2180      	movs	r1, #128	; 0x80
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f805 	bl	800e8dc <STM_FaultProcessing>
    }
  }

  return ( bChangeState );
 800e8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3710      	adds	r7, #16
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b085      	sub	sp, #20
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	807b      	strh	r3, [r7, #2]
 800e8e8:	4613      	mov	r3, r2
 800e8ea:	803b      	strh	r3, [r7, #0]
  State_t LocalState =  pHandle->bState;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	73fb      	strb	r3, [r7, #15]

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	885a      	ldrh	r2, [r3, #2]
 800e8f6:	887b      	ldrh	r3, [r7, #2]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	b21a      	sxth	r2, r3
 800e8fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e902:	43db      	mvns	r3, r3
 800e904:	b21b      	sxth	r3, r3
 800e906:	4013      	ands	r3, r2
 800e908:	b21b      	sxth	r3, r3
 800e90a:	b29a      	uxth	r2, r3
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	889a      	ldrh	r2, [r3, #4]
 800e914:	887b      	ldrh	r3, [r7, #2]
 800e916:	4313      	orrs	r3, r2
 800e918:	b29a      	uxth	r2, r3
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	809a      	strh	r2, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
 800e920:	2b0a      	cmp	r3, #10
 800e922:	d109      	bne.n	800e938 <STM_FaultProcessing+0x5c>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	885b      	ldrh	r3, [r3, #2]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10e      	bne.n	800e94a <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_OVER;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	220b      	movs	r2, #11
 800e930:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800e932:	230b      	movs	r3, #11
 800e934:	73fb      	strb	r3, [r7, #15]
 800e936:	e008      	b.n	800e94a <STM_FaultProcessing+0x6e>
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	885b      	ldrh	r3, [r3, #2]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d004      	beq.n	800e94a <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_NOW;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	220a      	movs	r2, #10
 800e944:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 800e946:	230a      	movs	r3, #10
 800e948:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ( LocalState );
 800e94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <STM_GetState>:
  * @brief  Returns the current state machine state
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  return ( pHandle->bState );
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	781b      	ldrb	r3, [r3, #0]
}
 800e964:	4618      	mov	r0, r3
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <STM_FaultAcknowledged>:
  * @param pHanlde pointer of type  STM_Handle_t
  * @retval bool true if the state machine has been moved to IDLE, false if the
  *        method call had no effects
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
 800e970:	b480      	push	{r7}
 800e972:	b085      	sub	sp, #20
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  bool bToBeReturned = false;
 800e978:	2300      	movs	r3, #0
 800e97a:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->bState == FAULT_OVER )
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	2b0b      	cmp	r3, #11
 800e982:	d107      	bne.n	800e994 <STM_FaultAcknowledged+0x24>
  {
    pHandle->bState = STOP_IDLE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2209      	movs	r2, #9
 800e988:	701a      	strb	r2, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2200      	movs	r2, #0
 800e98e:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 800e990:	2301      	movs	r3, #1
 800e992:	73fb      	strb	r3, [r7, #15]
  }

  return ( bToBeReturned );
 800e994:	7bfb      	ldrb	r3, [r7, #15]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3714      	adds	r7, #20
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr

0800e9a2 <STM_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
 800e9a2:	b480      	push	{r7}
 800e9a4:	b085      	sub	sp, #20
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	889b      	ldrh	r3, [r3, #4]
 800e9ae:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	885b      	ldrh	r3, [r3, #2]
 800e9b4:	041b      	lsls	r3, r3, #16
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	60fb      	str	r3, [r7, #12]

  return LocalFaultState;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <LL_USART_EnableIT_RXNE>:
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	b083      	sub	sp, #12
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f043 0220 	orr.w	r2, r3, #32
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	601a      	str	r2, [r3, #0]
}
 800e9de:	bf00      	nop
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr

0800e9ea <LL_USART_EnableIT_TXE>:
{
 800e9ea:	b480      	push	{r7}
 800e9ec:	b083      	sub	sp, #12
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	601a      	str	r2, [r3, #0]
}
 800e9fe:	bf00      	nop
 800ea00:	370c      	adds	r7, #12
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <LL_USART_DisableIT_RXNE>:
{
 800ea0a:	b480      	push	{r7}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f023 0220 	bic.w	r2, r3, #32
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	601a      	str	r2, [r3, #0]
}
 800ea1e:	bf00      	nop
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <LL_USART_DisableIT_TXE>:
{
 800ea2a:	b480      	push	{r7}
 800ea2c:	b083      	sub	sp, #12
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	601a      	str	r2, [r3, #0]
}
 800ea3e:	bf00      	nop
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800ea4a:	b480      	push	{r7}
 800ea4c:	b083      	sub	sp, #12
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
 800ea52:	460b      	mov	r3, r1
 800ea54:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800ea56:	78fb      	ldrb	r3, [r7, #3]
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800ea5e:	bf00      	nop
 800ea60:	370c      	adds	r7, #12
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fc fc5f 	bl	800b338 <FCP_Init>
}
 800ea7a:	bf00      	nop
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
	...

0800ea84 <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800ea84:	b590      	push	{r4, r7, lr}
 800ea86:	b087      	sub	sp, #28
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800ea90:	4b4b      	ldr	r3, [pc, #300]	; (800ebc0 <UFCP_RX_IRQ_Handler+0x13c>)
 800ea92:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 8089 	beq.w	800ebb6 <UFCP_RX_IRQ_Handler+0x132>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800eaa4:	887b      	ldrh	r3, [r7, #2]
 800eaa6:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d002      	beq.n	800eab8 <UFCP_RX_IRQ_Handler+0x34>
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d013      	beq.n	800eade <UFCP_RX_IRQ_Handler+0x5a>
 800eab6:	e029      	b.n	800eb0c <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	7bfa      	ldrb	r2, [r7, #15]
 800eabc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800eac0:	4b40      	ldr	r3, [pc, #256]	; (800ebc4 <UFCP_RX_IRQ_Handler+0x140>)
 800eac2:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	8a1a      	ldrh	r2, [r3, #16]
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800ead2:	3301      	adds	r3, #1
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800eadc:	e06b      	b.n	800ebb6 <UFCP_RX_IRQ_Handler+0x132>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	7bfa      	ldrb	r2, [r7, #15]
 800eae2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800eaec:	3301      	adds	r3, #1
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eafc:	b25b      	sxtb	r3, r3
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	da58      	bge.n	800ebb4 <UFCP_RX_IRQ_Handler+0x130>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800eb0a:	e053      	b.n	800ebb4 <UFCP_RX_IRQ_Handler+0x130>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800eb12:	461a      	mov	r2, r3
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb1a:	3302      	adds	r3, #2
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	da11      	bge.n	800eb44 <UFCP_RX_IRQ_Handler+0xc0>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800eb26:	3b02      	subs	r3, #2
 800eb28:	693a      	ldr	r2, [r7, #16]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	7bfa      	ldrb	r2, [r7, #15]
 800eb2e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800eb38:	3301      	adds	r3, #1
 800eb3a:	b2da      	uxtb	r2, r3
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800eb42:	e038      	b.n	800ebb6 <UFCP_RX_IRQ_Handler+0x132>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	7bfa      	ldrb	r2, [r7, #15]
 800eb48:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800eb4c:	4b1e      	ldr	r3, [pc, #120]	; (800ebc8 <UFCP_RX_IRQ_Handler+0x144>)
 800eb4e:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	2200      	movs	r2, #0
 800eb54:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f7ff ff54 	bl	800ea0a <LL_USART_DisableIT_RXNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	2200      	movs	r2, #0
 800eb66:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	3399      	adds	r3, #153	; 0x99
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fc fc31 	bl	800b3d6 <FCP_CalcCRC>
 800eb74:	4603      	mov	r3, r0
 800eb76:	461a      	mov	r2, r3
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800eb7e:	429a      	cmp	r2, r3
 800eb80:	d10e      	bne.n	800eba0 <UFCP_RX_IRQ_Handler+0x11c>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	689c      	ldr	r4, [r3, #8]
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	6818      	ldr	r0, [r3, #0]
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb9c:	47a0      	blx	r4
 800eb9e:	e00a      	b.n	800ebb6 <UFCP_RX_IRQ_Handler+0x132>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800eba0:	230a      	movs	r3, #10
 800eba2:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800eba4:	f107 020e 	add.w	r2, r7, #14
 800eba8:	2301      	movs	r3, #1
 800ebaa:	21ff      	movs	r1, #255	; 0xff
 800ebac:	6938      	ldr	r0, [r7, #16]
 800ebae:	f000 f8a3 	bl	800ecf8 <UFCP_Send>
 800ebb2:	e000      	b.n	800ebb6 <UFCP_RX_IRQ_Handler+0x132>
        break;
 800ebb4:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800ebb6:	697b      	ldr	r3, [r7, #20]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	371c      	adds	r7, #28
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd90      	pop	{r4, r7, pc}
 800ebc0:	0800fdb6 	.word	0x0800fdb6
 800ebc4:	0800fdb8 	.word	0x0800fdb8
 800ebc8:	0800fdba 	.word	0x0800fdba

0800ebcc <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d050      	beq.n	800ec84 <UFCP_TX_IRQ_Handler+0xb8>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <UFCP_TX_IRQ_Handler+0x26>
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	d004      	beq.n	800ebfa <UFCP_TX_IRQ_Handler+0x2e>
 800ebf0:	e007      	b.n	800ec02 <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	7d1b      	ldrb	r3, [r3, #20]
 800ebf6:	81fb      	strh	r3, [r7, #14]
        break;
 800ebf8:	e019      	b.n	800ec2e <UFCP_TX_IRQ_Handler+0x62>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	7d5b      	ldrb	r3, [r3, #21]
 800ebfe:	81fb      	strh	r3, [r7, #14]
        break;
 800ec00:	e015      	b.n	800ec2e <UFCP_TX_IRQ_Handler+0x62>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ec08:	461a      	mov	r2, r3
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	7d5b      	ldrb	r3, [r3, #21]
 800ec0e:	3302      	adds	r3, #2
 800ec10:	429a      	cmp	r2, r3
 800ec12:	da08      	bge.n	800ec26 <UFCP_TX_IRQ_Handler+0x5a>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ec1a:	3b02      	subs	r3, #2
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	4413      	add	r3, r2
 800ec20:	7d9b      	ldrb	r3, [r3, #22]
 800ec22:	81fb      	strh	r3, [r7, #14]
 800ec24:	e003      	b.n	800ec2e <UFCP_TX_IRQ_Handler+0x62>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800ec2c:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ec34:	89fa      	ldrh	r2, [r7, #14]
 800ec36:	b2d2      	uxtb	r2, r2
 800ec38:	4611      	mov	r1, r2
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff ff05 	bl	800ea4a <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ec46:	461a      	mov	r2, r3
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	7d5b      	ldrb	r3, [r3, #21]
 800ec4c:	3302      	adds	r3, #2
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	da08      	bge.n	800ec64 <UFCP_TX_IRQ_Handler+0x98>
    {
      pBaseHandle->TxFrameLevel++;
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ec58:	3301      	adds	r3, #1
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800ec62:	e00f      	b.n	800ec84 <UFCP_TX_IRQ_Handler+0xb8>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7ff fedd 	bl	800ea2a <LL_USART_DisableIT_TXE>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	68ba      	ldr	r2, [r7, #8]
 800ec7e:	6812      	ldr	r2, [r2, #0]
 800ec80:	4610      	mov	r0, r2
 800ec82:	4798      	blx	r3
}
 800ec84:	bf00      	nop
 800ec86:	3710      	adds	r7, #16
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b084      	sub	sp, #16
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800ec98:	2308      	movs	r3, #8
 800ec9a:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800ec9c:	f107 020b 	add.w	r2, r7, #11
 800eca0:	2301      	movs	r3, #1
 800eca2:	21ff      	movs	r1, #255	; 0xff
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	f000 f827 	bl	800ecf8 <UFCP_Send>

}
 800ecaa:	bf00      	nop
 800ecac:	3710      	adds	r7, #16
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}

0800ecb2 <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b084      	sub	sp, #16
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d112      	bne.n	800ecea <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7ff fe73 	bl	800e9ca <LL_USART_EnableIT_RXNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800ece4:	2302      	movs	r3, #2
 800ece6:	73fb      	strb	r3, [r7, #15]
 800ece8:	e001      	b.n	800ecee <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800ecea:	2301      	movs	r3, #1
 800ecec:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3710      	adds	r7, #16
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b088      	sub	sp, #32
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	607a      	str	r2, [r7, #4]
 800ed02:	461a      	mov	r2, r3
 800ed04:	460b      	mov	r3, r1
 800ed06:	72fb      	strb	r3, [r7, #11]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d133      	bne.n	800ed7e <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	3316      	adds	r3, #22
 800ed1e:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	7afa      	ldrb	r2, [r7, #11]
 800ed24:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	7aba      	ldrb	r2, [r7, #10]
 800ed2a:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800ed2c:	e007      	b.n	800ed3e <UFCP_Send+0x46>
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	1c53      	adds	r3, r2, #1
 800ed32:	607b      	str	r3, [r7, #4]
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	1c59      	adds	r1, r3, #1
 800ed38:	61b9      	str	r1, [r7, #24]
 800ed3a:	7812      	ldrb	r2, [r2, #0]
 800ed3c:	701a      	strb	r2, [r3, #0]
 800ed3e:	7abb      	ldrb	r3, [r7, #10]
 800ed40:	1e5a      	subs	r2, r3, #1
 800ed42:	72ba      	strb	r2, [r7, #10]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1f2      	bne.n	800ed2e <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	3314      	adds	r3, #20
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7fc fb42 	bl	800b3d6 <FCP_CalcCRC>
 800ed52:	4603      	mov	r3, r0
 800ed54:	461a      	mov	r2, r3
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7ff fe39 	bl	800e9ea <LL_USART_EnableIT_TXE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800ed78:	2302      	movs	r3, #2
 800ed7a:	77fb      	strb	r3, [r7, #31]
 800ed7c:	e001      	b.n	800ed82 <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800ed82:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3720      	adds	r7, #32
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800ed9c:	bf00      	nop
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <VSS_Init>:
* @brief  Software initialization of VirtualSpeedSensor component
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Init( VirtualSpeedSensor_Handle_t * pHandle )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
#ifdef FASTDIV
  FD_Init( &( pHandle->fd ) );
#endif

  VSS_Clear( pHandle );
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 f804 	bl	800edbe <VSS_Clear>
}
 800edb6:	bf00      	nop
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 800edbe:	b480      	push	{r7}
 800edc0:	b083      	sub	sp, #12
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.hElAngle = 0;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.hMecAngle = 0;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	819a      	strh	r2, [r3, #12]
  pHandle->_Super.hElSpeedDpp = 0;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	81da      	strh	r2, [r3, #14]
  pHandle->_Super.hMecAccelUnitP = 0;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	825a      	strh	r2, [r3, #18]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	701a      	strb	r2, [r3, #0]

  pHandle->wElAccDppP32 = 0;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	621a      	str	r2, [r3, #32]
  pHandle->wElSpeedDpp32 = 0;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2200      	movs	r2, #0
 800ee00:	851a      	strh	r2, [r3, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2200      	movs	r2, #0
 800ee06:	861a      	strh	r2, [r3, #48]	; 0x30

  pHandle->bTransitionStarted = false;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	85da      	strh	r2, [r3, #46]	; 0x2e
  pHandle->bTransitionLocked = false;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800ee32:	bf00      	nop
 800ee34:	370c      	adds	r7, #12
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <VSS_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t VSS_CalcElAngle( VirtualSpeedSensor_Handle_t * pHandle, void * pInputVars_str )
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b087      	sub	sp, #28
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]

  int16_t hRetAngle;
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	827b      	strh	r3, [r7, #18]

  if ( pHandle->bCopyObserver == true )
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d003      	beq.n	800ee5e <VSS_CalcElAngle+0x20>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	881b      	ldrh	r3, [r3, #0]
 800ee5a:	82fb      	strh	r3, [r7, #22]
 800ee5c:	e09a      	b.n	800ef94 <VSS_CalcElAngle+0x156>
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	4413      	add	r3, r2
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	b21a      	sxth	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	861a      	strh	r2, [r3, #48]	; 0x30
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ee7e:	b29a      	uxth	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ee86:	4619      	mov	r1, r3
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	785b      	ldrb	r3, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800ee8c:	fb91 f3f3 	sdiv	r3, r1, r3
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	4413      	add	r3, r2
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	b21a      	sxth	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	80da      	strh	r2, [r3, #6]
#endif

    if ( pHandle->bTransitionStarted == true )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d073      	beq.n	800ef8e <VSS_CalcElAngle+0x150>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10a      	bne.n	800eec6 <VSS_CalcElAngle+0x88>
      {
        hRetAngle = *( int16_t * )pInputVars_str;
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	82fb      	strh	r3, [r7, #22]
        pHandle->bTransitionEnded = true;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0u;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
 800eec4:	e066      	b.n	800ef94 <VSS_CalcElAngle+0x156>
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800eecc:	b29b      	uxth	r3, r3
 800eece:	3b01      	subs	r3, #1
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	b21a      	sxth	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	85da      	strh	r2, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	db0b      	blt.n	800eefa <VSS_CalcElAngle+0xbc>
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eee8:	b29a      	uxth	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	82bb      	strh	r3, [r7, #20]
 800eef8:	e00d      	b.n	800ef16 <VSS_CalcElAngle+0xd8>
        }
        else
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	1ad3      	subs	r3, r2, r3
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	82bb      	strh	r3, [r7, #20]
          hSignCorr = -1;
 800ef10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef14:	827b      	strh	r3, [r7, #18]
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800ef16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800ef20:	fb02 f303 	mul.w	r3, r2, r3
 800ef24:	60fb      	str	r3, [r7, #12]
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef34:	817b      	strh	r3, [r7, #10]
#endif

        hAngleCorr *= hSignCorr;
 800ef36:	897a      	ldrh	r2, [r7, #10]
 800ef38:	8a7b      	ldrh	r3, [r7, #18]
 800ef3a:	fb12 f303 	smulbb	r3, r2, r3
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	817b      	strh	r3, [r7, #10]

        if ( hAngleDiff >= 0 )
 800ef42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	db0c      	blt.n	800ef64 <VSS_CalcElAngle+0x126>
        {
          pHandle->bTransitionLocked = true;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef58:	b29a      	uxth	r2, r3
 800ef5a:	897b      	ldrh	r3, [r7, #10]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	82fb      	strh	r3, [r7, #22]
 800ef62:	e017      	b.n	800ef94 <VSS_CalcElAngle+0x156>
        }
        else
        {
          if ( pHandle->bTransitionLocked == false )
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ef6a:	f083 0301 	eor.w	r3, r3, #1
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d003      	beq.n	800ef7c <VSS_CalcElAngle+0x13e>
          {
            hRetAngle = pHandle->hElAngleAccu;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ef78:	82fb      	strh	r3, [r7, #22]
 800ef7a:	e00b      	b.n	800ef94 <VSS_CalcElAngle+0x156>
          }
          else
          {
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	897b      	ldrh	r3, [r7, #10]
 800ef86:	4413      	add	r3, r2
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	82fb      	strh	r3, [r7, #22]
 800ef8c:	e002      	b.n	800ef94 <VSS_CalcElAngle+0x156>
        }
      }
    }
    else
    {
      hRetAngle = pHandle->hElAngleAccu;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ef92:	82fb      	strh	r3, [r7, #22]
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	8afa      	ldrh	r2, [r7, #22]
 800ef98:	809a      	strh	r2, [r3, #4]
  return hRetAngle;
 800ef9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	371c      	adds	r7, #28
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr

0800efaa <VSS_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (SPED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 800efaa:	b580      	push	{r7, lr}
 800efac:	b084      	sub	sp, #16
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]
 800efb2:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = false;
 800efb4:	2300      	movs	r3, #0
 800efb6:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->hRemainingStep > 1u )
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d936      	bls.n	800f02e <VSS_CalcAvrgMecSpeedUnit+0x84>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6a1b      	ldr	r3, [r3, #32]
 800efc8:	441a      	add	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	da02      	bge.n	800efdc <VSS_CalcAvrgMecSpeedUnit+0x32>
 800efd6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800efda:	33ff      	adds	r3, #255	; 0xff
 800efdc:	141b      	asrs	r3, r3, #16
 800efde:	b21a      	sxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	81da      	strh	r2, [r3, #14]

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800efea:	461a      	mov	r2, r3
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	8b5b      	ldrh	r3, [r3, #26]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800eff0:	fb03 f202 	mul.w	r2, r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800eff4:	4613      	mov	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4413      	add	r3, r2
 800effa:	005b      	lsls	r3, r3, #1
 800effc:	461a      	mov	r2, r3
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	69db      	ldr	r3, [r3, #28]
 800f002:	4619      	mov	r1, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	785b      	ldrb	r3, [r3, #1]
 800f008:	fb03 f301 	mul.w	r3, r3, r1
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800f00c:	fb92 f3f3 	sdiv	r3, r2, r3
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800f010:	b21a      	sxth	r2, r3
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	819a      	strh	r2, [r3, #12]

    pHandle->hRemainingStep--;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f024:	3b01      	subs	r3, #1
 800f026:	b29a      	uxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	851a      	strh	r2, [r3, #40]	; 0x28
 800f02c:	e037      	b.n	800f09e <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else if ( pHandle->hRemainingStep == 1u )
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f032:	2b01      	cmp	r3, #1
 800f034:	d12e      	bne.n	800f094 <VSS_CalcAvrgMecSpeedUnit+0xea>
  {
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	819a      	strh	r2, [r3, #12]

    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f050:	461a      	mov	r2, r3
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	69db      	ldr	r3, [r3, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800f056:	fb03 f202 	mul.w	r2, r3, r2
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	8b5b      	ldrh	r3, [r3, #26]
 800f05e:	4619      	mov	r1, r3
 800f060:	460b      	mov	r3, r1
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	440b      	add	r3, r1
 800f066:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800f068:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800f06c:	b21a      	sxth	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	81da      	strh	r2, [r3, #14]

    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	785b      	ldrb	r3, [r3, #1]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	fb12 f303 	smulbb	r3, r2, r3
 800f084:	b29b      	uxth	r3, r3
 800f086:	b21a      	sxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	81da      	strh	r2, [r3, #14]

    pHandle->hRemainingStep = 0u;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	851a      	strh	r2, [r3, #40]	; 0x28
 800f092:	e004      	b.n	800f09e <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	801a      	strh	r2, [r3, #0]
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f0a4:	f083 0301 	eor.w	r3, r3, #1
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d006      	beq.n	800f0bc <VSS_CalcAvrgMecSpeedUnit+0x112>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	78da      	ldrb	r2, [r3, #3]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	701a      	strb	r2, [r3, #0]
    SpeedSensorReliability = false;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	73fb      	strb	r3, [r7, #15]
 800f0ba:	e006      	b.n	800f0ca <VSS_CalcAvrgMecSpeedUnit+0x120>
  }
  else
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6839      	ldr	r1, [r7, #0]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7ff f817 	bl	800e0f4 <SPD_IsMecSpeedReliable>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	73fb      	strb	r3, [r7, #15]
  }

  return ( SpeedSensorReliability );
 800f0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	460b      	mov	r3, r1
 800f0de:	807b      	strh	r3, [r7, #2]

  pHandle->hElAngleAccu = hMecAngle;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	887a      	ldrh	r2, [r7, #2]
 800f0e4:	861a      	strh	r2, [r3, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	785b      	ldrb	r3, [r3, #1]
 800f0f2:	fb92 f3f3 	sdiv	r3, r2, r3
 800f0f6:	b21a      	sxth	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	887a      	ldrh	r2, [r7, #2]
 800f100:	809a      	strh	r2, [r3, #4]
}
 800f102:	bf00      	nop
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
	...

0800f110 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800f110:	b480      	push	{r7}
 800f112:	b087      	sub	sp, #28
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	807b      	strh	r3, [r7, #2]
 800f11c:	4613      	mov	r3, r2
 800f11e:	803b      	strh	r3, [r7, #0]
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f126:	f083 0301 	eor.w	r3, r3, #1
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d06f      	beq.n	800f210 <VSS_SetMecAcceleration+0x100>
  {
    if ( hDurationms == 0u )
 800f130:	883b      	ldrh	r3, [r7, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d128      	bne.n	800f188 <VSS_SetMecAcceleration+0x78>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	887a      	ldrh	r2, [r7, #2]
 800f13a:	819a      	strh	r2, [r3, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800f13c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	69d2      	ldr	r2, [r2, #28]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800f144:	fb02 f203 	mul.w	r2, r2, r3
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	8b5b      	ldrh	r3, [r3, #26]
 800f14c:	4619      	mov	r1, r3
 800f14e:	460b      	mov	r3, r1
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	440b      	add	r3, r1
 800f154:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f156:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800f15a:	b21a      	sxth	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	81da      	strh	r2, [r3, #14]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f166:	b29a      	uxth	r2, r3
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	785b      	ldrb	r3, [r3, #1]
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	fb12 f303 	smulbb	r3, r2, r3
 800f172:	b29b      	uxth	r3, r3
 800f174:	b21a      	sxth	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	81da      	strh	r2, [r3, #14]

      pHandle->hRemainingStep = 0u;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	851a      	strh	r2, [r3, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	887a      	ldrh	r2, [r7, #2]
 800f184:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800f186:	e043      	b.n	800f210 <VSS_SetMecAcceleration+0x100>
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800f188:	883b      	ldrh	r3, [r7, #0]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	8e92      	ldrh	r2, [r2, #52]	; 0x34
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800f18e:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800f192:	4a22      	ldr	r2, [pc, #136]	; (800f21c <VSS_SetMecAcceleration+0x10c>)
 800f194:	fba2 2303 	umull	r2, r3, r2, r3
 800f198:	099b      	lsrs	r3, r3, #6
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800f19a:	82fb      	strh	r3, [r7, #22]
      hNbrStep++;
 800f19c:	8afb      	ldrh	r3, [r7, #22]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	82fb      	strh	r3, [r7, #22]
      pHandle->hRemainingStep = hNbrStep;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	8afa      	ldrh	r2, [r7, #22]
 800f1a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f1ae:	461a      	mov	r2, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	785b      	ldrb	r3, [r3, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800f1b4:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1b8:	82bb      	strh	r3, [r7, #20]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f1ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f1be:	687a      	ldr	r2, [r7, #4]
 800f1c0:	69d2      	ldr	r2, [r2, #28]
 800f1c2:	fb02 f203 	mul.w	r2, r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	8b5b      	ldrh	r3, [r3, #26]
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	440b      	add	r3, r1
 800f1d2:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800f1d4:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1d8:	827b      	strh	r3, [r7, #18]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800f1da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f1de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	041a      	lsls	r2, r3, #16
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;
 800f1e6:	8afb      	ldrh	r3, [r7, #22]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800f1e8:	fb92 f3f3 	sdiv	r3, r2, r3
 800f1ec:	60fb      	str	r3, [r7, #12]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	785b      	ldrb	r3, [r3, #1]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	fb03 f202 	mul.w	r2, r3, r2
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	621a      	str	r2, [r3, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	887a      	ldrh	r2, [r7, #2]
 800f202:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f20a:	041a      	lsls	r2, r3, #16
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f210:	bf00      	nop
 800f212:	371c      	adds	r7, #28
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	10624dd3 	.word	0x10624dd3

0800f220 <VSS_SetStartTransition>:
  * @retval bool true if Transition phase is enabled (started or not), false if
            transition has been triggered but it's actually disabled
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
 800f220:	b480      	push	{r7}
 800f222:	b085      	sub	sp, #20
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800f22c:	2301      	movs	r3, #1
 800f22e:	73fb      	strb	r3, [r7, #15]
  if ( bCommand == true )
 800f230:	78fb      	ldrb	r3, [r7, #3]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d011      	beq.n	800f25a <VSS_SetStartTransition+0x3a>
  {
    pHandle->bTransitionStarted = true;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if ( pHandle->hTransitionSteps == 0 )
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800f244:	2b00      	cmp	r3, #0
 800f246:	d108      	bne.n	800f25a <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionEnded = true;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2201      	movs	r2, #1
 800f24c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	701a      	strb	r2, [r3, #0]
      bAux = false;
 800f256:	2300      	movs	r3, #0
 800f258:	73fb      	strb	r3, [r7, #15]
    }
  }
  return bAux;
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr

0800f268 <VSS_TransitionEnded>:
  }
  return ( retVal );
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
    return pHandle->bTransitionEnded;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800f276:	4618      	mov	r0, r3
 800f278:	370c      	adds	r7, #12
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
	...

0800f284 <RUC_Init>:
 800f284:	b430      	push	{r4, r5}
 800f286:	6681      	str	r1, [r0, #104]	; 0x68
 800f288:	2100      	movs	r1, #0
 800f28a:	9c02      	ldr	r4, [sp, #8]
 800f28c:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800f290:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800f294:	f110 010c 	adds.w	r1, r0, #12
 800f298:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 800f29c:	6744      	str	r4, [r0, #116]	; 0x74
 800f29e:	d023      	beq.n	800f2e8 <RUC_Init+0x64>
 800f2a0:	6943      	ldr	r3, [r0, #20]
 800f2a2:	b323      	cbz	r3, 800f2ee <RUC_Init+0x6a>
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	b323      	cbz	r3, 800f2f2 <RUC_Init+0x6e>
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	b323      	cbz	r3, 800f2f6 <RUC_Init+0x72>
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	b1c3      	cbz	r3, 800f2e2 <RUC_Init+0x5e>
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	2105      	movs	r1, #5
 800f2b4:	b1b3      	cbz	r3, 800f2e4 <RUC_Init+0x60>
 800f2b6:	2204      	movs	r2, #4
 800f2b8:	2105      	movs	r1, #5
 800f2ba:	8805      	ldrh	r5, [r0, #0]
 800f2bc:	4c0f      	ldr	r4, [pc, #60]	; (800f2fc <RUC_Init+0x78>)
 800f2be:	2364      	movs	r3, #100	; 0x64
 800f2c0:	fb03 f305 	mul.w	r3, r3, r5
 800f2c4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f2c8:	fba4 4303 	umull	r4, r3, r4, r3
 800f2cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f2d0:	2400      	movs	r4, #0
 800f2d2:	099b      	lsrs	r3, r3, #6
 800f2d4:	6154      	str	r4, [r2, #20]
 800f2d6:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 800f2da:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800f2de:	bc30      	pop	{r4, r5}
 800f2e0:	4770      	bx	lr
 800f2e2:	2104      	movs	r1, #4
 800f2e4:	1e4a      	subs	r2, r1, #1
 800f2e6:	e7e8      	b.n	800f2ba <RUC_Init+0x36>
 800f2e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ec:	e7e5      	b.n	800f2ba <RUC_Init+0x36>
 800f2ee:	2101      	movs	r1, #1
 800f2f0:	e7f8      	b.n	800f2e4 <RUC_Init+0x60>
 800f2f2:	2102      	movs	r1, #2
 800f2f4:	e7f6      	b.n	800f2e4 <RUC_Init+0x60>
 800f2f6:	2103      	movs	r1, #3
 800f2f8:	e7f4      	b.n	800f2e4 <RUC_Init+0x60>
 800f2fa:	bf00      	nop
 800f2fc:	10624dd3 	.word	0x10624dd3

0800f300 <RUC_Clear>:
 800f300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f304:	4604      	mov	r4, r0
 800f306:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800f308:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 800f30c:	80e1      	strh	r1, [r4, #6]
 800f30e:	2500      	movs	r5, #0
 800f310:	4638      	mov	r0, r7
 800f312:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800f316:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800f31a:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800f31e:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800f322:	460e      	mov	r6, r1
 800f324:	f7ff fd4b 	bl	800edbe <VSS_Clear>
 800f328:	4629      	mov	r1, r5
 800f32a:	4640      	mov	r0, r8
 800f32c:	f7fe ffe8 	bl	800e300 <STC_SetControlMode>
 800f330:	8861      	ldrh	r1, [r4, #2]
 800f332:	b2b6      	uxth	r6, r6
 800f334:	fb11 f106 	smulbb	r1, r1, r6
 800f338:	b209      	sxth	r1, r1
 800f33a:	4638      	mov	r0, r7
 800f33c:	f7ff feca 	bl	800f0d4 <VSS_SetMecAngle>
 800f340:	462a      	mov	r2, r5
 800f342:	4629      	mov	r1, r5
 800f344:	4640      	mov	r0, r8
 800f346:	f7fe ffed 	bl	800e324 <STC_ExecRamp>
 800f34a:	8a21      	ldrh	r1, [r4, #16]
 800f34c:	89a2      	ldrh	r2, [r4, #12]
 800f34e:	fb11 f106 	smulbb	r1, r1, r6
 800f352:	b209      	sxth	r1, r1
 800f354:	4640      	mov	r0, r8
 800f356:	f7fe ffe5 	bl	800e324 <STC_ExecRamp>
 800f35a:	89e1      	ldrh	r1, [r4, #14]
 800f35c:	89a2      	ldrh	r2, [r4, #12]
 800f35e:	fb11 f106 	smulbb	r1, r1, r6
 800f362:	4638      	mov	r0, r7
 800f364:	b209      	sxth	r1, r1
 800f366:	f7ff fed3 	bl	800f110 <VSS_SetMecAcceleration>
 800f36a:	89a0      	ldrh	r0, [r4, #12]
 800f36c:	8823      	ldrh	r3, [r4, #0]
 800f36e:	4907      	ldr	r1, [pc, #28]	; (800f38c <RUC_Clear+0x8c>)
 800f370:	6962      	ldr	r2, [r4, #20]
 800f372:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800f376:	fb03 f300 	mul.w	r3, r3, r0
 800f37a:	fba1 1303 	umull	r1, r3, r1, r3
 800f37e:	099b      	lsrs	r3, r3, #6
 800f380:	3301      	adds	r3, #1
 800f382:	80a3      	strh	r3, [r4, #4]
 800f384:	60a2      	str	r2, [r4, #8]
 800f386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f38a:	bf00      	nop
 800f38c:	10624dd3 	.word	0x10624dd3

0800f390 <RUC_Exec>:
 800f390:	b538      	push	{r3, r4, r5, lr}
 800f392:	8883      	ldrh	r3, [r0, #4]
 800f394:	bb53      	cbnz	r3, 800f3ec <RUC_Exec+0x5c>
 800f396:	6883      	ldr	r3, [r0, #8]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d02e      	beq.n	800f3fa <RUC_Exec+0x6a>
 800f39c:	88c5      	ldrh	r5, [r0, #6]
 800f39e:	8899      	ldrh	r1, [r3, #4]
 800f3a0:	881a      	ldrh	r2, [r3, #0]
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	fb11 f105 	smulbb	r1, r1, r5
 800f3a8:	b209      	sxth	r1, r1
 800f3aa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f3ac:	f7fe ffba 	bl	800e324 <STC_ExecRamp>
 800f3b0:	68a3      	ldr	r3, [r4, #8]
 800f3b2:	88e5      	ldrh	r5, [r4, #6]
 800f3b4:	8859      	ldrh	r1, [r3, #2]
 800f3b6:	881a      	ldrh	r2, [r3, #0]
 800f3b8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f3ba:	fb11 f105 	smulbb	r1, r1, r5
 800f3be:	b209      	sxth	r1, r1
 800f3c0:	f7ff fea6 	bl	800f110 <VSS_SetMecAcceleration>
 800f3c4:	68a2      	ldr	r2, [r4, #8]
 800f3c6:	8823      	ldrh	r3, [r4, #0]
 800f3c8:	8810      	ldrh	r0, [r2, #0]
 800f3ca:	490d      	ldr	r1, [pc, #52]	; (800f400 <RUC_Exec+0x70>)
 800f3cc:	6892      	ldr	r2, [r2, #8]
 800f3ce:	60a2      	str	r2, [r4, #8]
 800f3d0:	fb03 f300 	mul.w	r3, r3, r0
 800f3d4:	fba1 2303 	umull	r2, r3, r1, r3
 800f3d8:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800f3dc:	099b      	lsrs	r3, r3, #6
 800f3de:	3301      	adds	r3, #1
 800f3e0:	3201      	adds	r2, #1
 800f3e2:	80a3      	strh	r3, [r4, #4]
 800f3e4:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800f3e8:	2001      	movs	r0, #1
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	8083      	strh	r3, [r0, #4]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d0cf      	beq.n	800f396 <RUC_Exec+0x6>
 800f3f6:	2001      	movs	r0, #1
 800f3f8:	e7f7      	b.n	800f3ea <RUC_Exec+0x5a>
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	bd38      	pop	{r3, r4, r5, pc}
 800f3fe:	bf00      	nop
 800f400:	10624dd3 	.word	0x10624dd3

0800f404 <RUC_FirstAccelerationStageReached>:
 800f404:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800f408:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 800f40c:	4282      	cmp	r2, r0
 800f40e:	bf34      	ite	cc
 800f410:	2000      	movcc	r0, #0
 800f412:	2001      	movcs	r0, #1
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop

0800f418 <RUC_SetPhaseDurationms>:
 800f418:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f41c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f420:	818a      	strh	r2, [r1, #12]
 800f422:	4770      	bx	lr

0800f424 <RUC_SetPhaseFinalMecSpeedUnit>:
 800f424:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f428:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f42c:	81ca      	strh	r2, [r1, #14]
 800f42e:	4770      	bx	lr

0800f430 <RUC_SetPhaseFinalTorque>:
 800f430:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f434:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f438:	820a      	strh	r2, [r1, #16]
 800f43a:	4770      	bx	lr

0800f43c <RUC_GetPhaseDurationms>:
 800f43c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f440:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f444:	8988      	ldrh	r0, [r1, #12]
 800f446:	4770      	bx	lr

0800f448 <RUC_GetPhaseFinalMecSpeedUnit>:
 800f448:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f44c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f450:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop

0800f458 <RUC_GetPhaseFinalTorque>:
 800f458:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800f45c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f460:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800f464:	4770      	bx	lr
 800f466:	bf00      	nop

0800f468 <RUC_GetNumberOfPhases>:
 800f468:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800f46c:	4770      	bx	lr
 800f46e:	bf00      	nop

0800f470 <STO_PLL_CalcElAngle>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800f478:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 800f47c:	4604      	mov	r4, r0
 800f47e:	03d8      	lsls	r0, r3, #15
 800f480:	1ac2      	subs	r2, r0, r3
 800f482:	4596      	cmp	lr, r2
 800f484:	b089      	sub	sp, #36	; 0x24
 800f486:	f340 80bb 	ble.w	800f600 <STO_PLL_CalcElAngle+0x190>
 800f48a:	66a2      	str	r2, [r4, #104]	; 0x68
 800f48c:	4696      	mov	lr, r2
 800f48e:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800f492:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800f496:	fa4e f605 	asr.w	r6, lr, r5
 800f49a:	9605      	str	r6, [sp, #20]
 800f49c:	4562      	cmp	r2, ip
 800f49e:	b236      	sxth	r6, r6
 800f4a0:	9600      	str	r6, [sp, #0]
 800f4a2:	f280 80bf 	bge.w	800f624 <STO_PLL_CalcElAngle+0x1b4>
 800f4a6:	66e2      	str	r2, [r4, #108]	; 0x6c
 800f4a8:	4694      	mov	ip, r2
 800f4aa:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800f4ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800f4b0:	03de      	lsls	r6, r3, #15
 800f4b2:	fa4c f205 	asr.w	r2, ip, r5
 800f4b6:	1af5      	subs	r5, r6, r3
 800f4b8:	9202      	str	r2, [sp, #8]
 800f4ba:	42a8      	cmp	r0, r5
 800f4bc:	b212      	sxth	r2, r2
 800f4be:	9201      	str	r2, [sp, #4]
 800f4c0:	f340 80aa 	ble.w	800f618 <STO_PLL_CalcElAngle+0x1a8>
 800f4c4:	6625      	str	r5, [r4, #96]	; 0x60
 800f4c6:	4628      	mov	r0, r5
 800f4c8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4ca:	4295      	cmp	r5, r2
 800f4cc:	f280 809e 	bge.w	800f60c <STO_PLL_CalcElAngle+0x19c>
 800f4d0:	6665      	str	r5, [r4, #100]	; 0x64
 800f4d2:	462a      	mov	r2, r5
 800f4d4:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800f4d8:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
 800f4dc:	88cd      	ldrh	r5, [r1, #6]
 800f4de:	890e      	ldrh	r6, [r1, #8]
 800f4e0:	f9b1 8000 	ldrsh.w	r8, [r1]
 800f4e4:	888f      	ldrh	r7, [r1, #4]
 800f4e6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800f4ea:	9104      	str	r1, [sp, #16]
 800f4ec:	fa40 f903 	asr.w	r9, r0, r3
 800f4f0:	fa42 f303 	asr.w	r3, r2, r3
 800f4f4:	fb13 f10a 	smulbb	r1, r3, sl
 800f4f8:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 800f4fc:	1a51      	subs	r1, r2, r1
 800f4fe:	eba9 0707 	sub.w	r7, r9, r7
 800f502:	fb19 f90a 	smulbb	r9, r9, sl
 800f506:	fb06 f208 	mul.w	r2, r6, r8
 800f50a:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 800f50e:	9103      	str	r1, [sp, #12]
 800f510:	b23f      	sxth	r7, r7
 800f512:	eba0 0009 	sub.w	r0, r0, r9
 800f516:	9904      	ldr	r1, [sp, #16]
 800f518:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 800f51c:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800f520:	fb0b 0007 	mla	r0, fp, r7, r0
 800f524:	1412      	asrs	r2, r2, #16
 800f526:	fb0a 0202 	mla	r2, sl, r2, r0
 800f52a:	1b5b      	subs	r3, r3, r5
 800f52c:	fb06 f601 	mul.w	r6, r6, r1
 800f530:	8e65      	ldrh	r5, [r4, #50]	; 0x32
 800f532:	9801      	ldr	r0, [sp, #4]
 800f534:	9903      	ldr	r1, [sp, #12]
 800f536:	b21b      	sxth	r3, r3
 800f538:	fb0b 1103 	mla	r1, fp, r3, r1
 800f53c:	fa40 fb05 	asr.w	fp, r0, r5
 800f540:	9800      	ldr	r0, [sp, #0]
 800f542:	1436      	asrs	r6, r6, #16
 800f544:	fb0a 1106 	mla	r1, sl, r6, r1
 800f548:	fa40 f505 	asr.w	r5, r0, r5
 800f54c:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 800f550:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 800f554:	f9b4 a124 	ldrsh.w	sl, [r4, #292]	; 0x124
 800f558:	fb0b fb08 	mul.w	fp, fp, r8
 800f55c:	fb05 f508 	mul.w	r5, r5, r8
 800f560:	fb09 c303 	mla	r3, r9, r3, ip
 800f564:	fb07 e709 	mla	r7, r7, r9, lr
 800f568:	fb0b 7706 	mla	r7, fp, r6, r7
 800f56c:	fb05 3616 	mls	r6, r5, r6, r3
 800f570:	9b00      	ldr	r3, [sp, #0]
 800f572:	fb00 2513 	mls	r5, r0, r3, r2
 800f576:	9a01      	ldr	r2, [sp, #4]
 800f578:	f1ba 0f00 	cmp.w	sl, #0
 800f57c:	fb00 1b12 	mls	fp, r0, r2, r1
 800f580:	4698      	mov	r8, r3
 800f582:	db55      	blt.n	800f630 <STO_PLL_CalcElAngle+0x1c0>
 800f584:	f04f 0901 	mov.w	r9, #1
 800f588:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800f58c:	9b01      	ldr	r3, [sp, #4]
 800f58e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 800f592:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f596:	f7f2 fd2b 	bl	8001ff0 <MCM_Trig_Functions>
 800f59a:	9b02      	ldr	r3, [sp, #8]
 800f59c:	fb13 f109 	smulbb	r1, r3, r9
 800f5a0:	4249      	negs	r1, r1
 800f5a2:	1403      	asrs	r3, r0, #16
 800f5a4:	fb10 f001 	smulbb	r0, r0, r1
 800f5a8:	fb08 f103 	mul.w	r1, r8, r3
 800f5ac:	f340 30cf 	sbfx	r0, r0, #15, #16
 800f5b0:	f341 31cf 	sbfx	r1, r1, #15, #16
 800f5b4:	1a41      	subs	r1, r0, r1
 800f5b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f5ba:	f7fc f917 	bl	800b7ec <PI_Controller>
 800f5be:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800f5c2:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 800f5c6:	8220      	strh	r0, [r4, #16]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	bf0a      	itet	eq
 800f5d0:	2200      	moveq	r2, #0
 800f5d2:	461a      	movne	r2, r3
 800f5d4:	4613      	moveq	r3, r2
 800f5d6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800f5da:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800f5de:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800f5e2:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800f5e6:	88a2      	ldrh	r2, [r4, #4]
 800f5e8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800f5ec:	4410      	add	r0, r2
 800f5ee:	b200      	sxth	r0, r0
 800f5f0:	6625      	str	r5, [r4, #96]	; 0x60
 800f5f2:	e9c4 b719 	strd	fp, r7, [r4, #100]	; 0x64
 800f5f6:	66e6      	str	r6, [r4, #108]	; 0x6c
 800f5f8:	80a0      	strh	r0, [r4, #4]
 800f5fa:	b009      	add	sp, #36	; 0x24
 800f5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f600:	1a1d      	subs	r5, r3, r0
 800f602:	45ae      	cmp	lr, r5
 800f604:	bfdc      	itt	le
 800f606:	66a5      	strle	r5, [r4, #104]	; 0x68
 800f608:	46ae      	movle	lr, r5
 800f60a:	e740      	b.n	800f48e <STO_PLL_CalcElAngle+0x1e>
 800f60c:	1b9b      	subs	r3, r3, r6
 800f60e:	429a      	cmp	r2, r3
 800f610:	bfdc      	itt	le
 800f612:	6663      	strle	r3, [r4, #100]	; 0x64
 800f614:	461a      	movle	r2, r3
 800f616:	e75d      	b.n	800f4d4 <STO_PLL_CalcElAngle+0x64>
 800f618:	1b9a      	subs	r2, r3, r6
 800f61a:	4290      	cmp	r0, r2
 800f61c:	bfdc      	itt	le
 800f61e:	6622      	strle	r2, [r4, #96]	; 0x60
 800f620:	4610      	movle	r0, r2
 800f622:	e751      	b.n	800f4c8 <STO_PLL_CalcElAngle+0x58>
 800f624:	1a1b      	subs	r3, r3, r0
 800f626:	459c      	cmp	ip, r3
 800f628:	bfdc      	itt	le
 800f62a:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800f62c:	469c      	movle	ip, r3
 800f62e:	e73c      	b.n	800f4aa <STO_PLL_CalcElAngle+0x3a>
 800f630:	9b05      	ldr	r3, [sp, #20]
 800f632:	f1c3 0800 	rsb	r8, r3, #0
 800f636:	fa0f f888 	sxth.w	r8, r8
 800f63a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800f63e:	9b00      	ldr	r3, [sp, #0]
 800f640:	e7a2      	b.n	800f588 <STO_PLL_CalcElAngle+0x118>
 800f642:	bf00      	nop

0800f644 <STO_PLL_CalcAvrgMecSpeedUnit>:
 800f644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f646:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 800f64a:	f1bc 0f00 	cmp.w	ip, #0
 800f64e:	f000 8095 	beq.w	800f77c <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800f652:	f10c 37ff 	add.w	r7, ip, #4294967295
 800f656:	b2fb      	uxtb	r3, r7
 800f658:	f100 0672 	add.w	r6, r0, #114	; 0x72
 800f65c:	f100 0774 	add.w	r7, r0, #116	; 0x74
 800f660:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800f664:	4632      	mov	r2, r6
 800f666:	2300      	movs	r3, #0
 800f668:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 800f66c:	4297      	cmp	r7, r2
 800f66e:	442b      	add	r3, r5
 800f670:	d1fa      	bne.n	800f668 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800f672:	fb93 f5fc 	sdiv	r5, r3, ip
 800f676:	2400      	movs	r4, #0
 800f678:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800f67c:	1b5b      	subs	r3, r3, r5
 800f67e:	42b2      	cmp	r2, r6
 800f680:	fb03 4403 	mla	r4, r3, r3, r4
 800f684:	d1f8      	bne.n	800f678 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 800f686:	fb94 f4fc 	sdiv	r4, r4, ip
 800f68a:	fb05 fc05 	mul.w	ip, r5, r5
 800f68e:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800f692:	8b43      	ldrh	r3, [r0, #26]
 800f694:	7887      	ldrb	r7, [r0, #2]
 800f696:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 800f69a:	fb0c fc02 	mul.w	ip, ip, r2
 800f69e:	ea4f 1cec 	mov.w	ip, ip, asr #7
 800f6a2:	fb05 f303 	mul.w	r3, r5, r3
 800f6a6:	45a4      	cmp	ip, r4
 800f6a8:	69c2      	ldr	r2, [r0, #28]
 800f6aa:	bfd4      	ite	le
 800f6ac:	2500      	movle	r5, #0
 800f6ae:	2501      	movgt	r5, #1
 800f6b0:	fb03 f307 	mul.w	r3, r3, r7
 800f6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6b8:	7842      	ldrb	r2, [r0, #1]
 800f6ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800f6be:	b21a      	sxth	r2, r3
 800f6c0:	800a      	strh	r2, [r1, #0]
 800f6c2:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 800f6c6:	8182      	strh	r2, [r0, #12]
 800f6c8:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 800f6cc:	b99e      	cbnz	r6, 800f6f6 <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 800f6ce:	b355      	cbz	r5, 800f726 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f6d0:	45a4      	cmp	ip, r4
 800f6d2:	dc25      	bgt.n	800f720 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 800f6d4:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 800f6d8:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 800f6dc:	3301      	adds	r3, #1
 800f6de:	b2db      	uxtb	r3, r3
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f6e6:	d81e      	bhi.n	800f726 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	78c2      	ldrb	r2, [r0, #3]
 800f6ec:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f6f0:	7002      	strb	r2, [r0, #0]
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 800f6fc:	bfb8      	it	lt
 800f6fe:	425b      	neglt	r3, r3
 800f700:	429a      	cmp	r2, r3
 800f702:	dc14      	bgt.n	800f72e <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 800f704:	2200      	movs	r2, #0
 800f706:	4613      	mov	r3, r2
 800f708:	4616      	mov	r6, r2
 800f70a:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 800f70e:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 800f712:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800f716:	b135      	cbz	r5, 800f726 <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f718:	45a4      	cmp	ip, r4
 800f71a:	dddb      	ble.n	800f6d4 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800f71c:	2a00      	cmp	r2, #0
 800f71e:	d0d9      	beq.n	800f6d4 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800f720:	2300      	movs	r3, #0
 800f722:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f726:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f72a:	f7fe bce3 	b.w	800e0f4 <SPD_IsMecSpeedReliable>
 800f72e:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 800f732:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800f736:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 800f73a:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 800f73e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800f742:	fb93 f3fe 	sdiv	r3, r3, lr
 800f746:	fb03 f202 	mul.w	r2, r3, r2
 800f74a:	2a00      	cmp	r2, #0
 800f74c:	bfb8      	it	lt
 800f74e:	323f      	addlt	r2, #63	; 0x3f
 800f750:	1192      	asrs	r2, r2, #6
 800f752:	fb02 f303 	mul.w	r3, r2, r3
 800f756:	fb07 f707 	mul.w	r7, r7, r7
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	fb06 7606 	mla	r6, r6, r6, r7
 800f760:	461a      	mov	r2, r3
 800f762:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800f766:	bfb8      	it	lt
 800f768:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 800f76c:	1192      	asrs	r2, r2, #6
 800f76e:	fb07 3212 	mls	r2, r7, r2, r3
 800f772:	4296      	cmp	r6, r2
 800f774:	bfd4      	ite	le
 800f776:	2200      	movle	r2, #0
 800f778:	2201      	movgt	r2, #1
 800f77a:	e7c6      	b.n	800f70a <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 800f77c:	4664      	mov	r4, ip
 800f77e:	4665      	mov	r5, ip
 800f780:	e785      	b.n	800f68e <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800f782:	bf00      	nop

0800f784 <STO_PLL_CalcAvrgElSpeedDpp>:
 800f784:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 800f788:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 800f78c:	b470      	push	{r4, r5, r6}
 800f78e:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 800f792:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 800f796:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 800f79a:	b2a6      	uxth	r6, r4
 800f79c:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 800f7a0:	1af3      	subs	r3, r6, r3
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	442a      	add	r2, r5
 800f7a6:	b19b      	cbz	r3, 800f7d0 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 800f7a8:	440b      	add	r3, r1
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	b219      	sxth	r1, r3
 800f7ae:	428c      	cmp	r4, r1
 800f7b0:	bfdc      	itt	le
 800f7b2:	1b9b      	suble	r3, r3, r6
 800f7b4:	b219      	sxthle	r1, r3
 800f7b6:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800f7ba:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800f7be:	1ad3      	subs	r3, r2, r3
 800f7c0:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800f7c4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800f7c8:	4113      	asrs	r3, r2
 800f7ca:	81c3      	strh	r3, [r0, #14]
 800f7cc:	bc70      	pop	{r4, r5, r6}
 800f7ce:	4770      	bx	lr
 800f7d0:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	e7f3      	b.n	800f7c0 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

0800f7d8 <STO_PLL_Clear>:
 800f7d8:	b510      	push	{r4, lr}
 800f7da:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800f7de:	2100      	movs	r1, #0
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 800f7e6:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 800f7ea:	8081      	strh	r1, [r0, #4]
 800f7ec:	81c1      	strh	r1, [r0, #14]
 800f7ee:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 800f7f2:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800f7f6:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800f7fa:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800f7fe:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 800f802:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800f806:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800f80a:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 800f80e:	b132      	cbz	r2, 800f81e <STO_PLL_Clear+0x46>
 800f810:	3a01      	subs	r2, #1
 800f812:	b2d2      	uxtb	r2, r2
 800f814:	3201      	adds	r2, #1
 800f816:	0052      	lsls	r2, r2, #1
 800f818:	3074      	adds	r0, #116	; 0x74
 800f81a:	f000 f929 	bl	800fa70 <memset>
 800f81e:	2100      	movs	r1, #0
 800f820:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 800f824:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800f828:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f830:	f7fb bf99 	b.w	800b766 <PID_SetIntegralTerm>

0800f834 <STO_PLL_Init>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4604      	mov	r4, r0
 800f838:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 800f83c:	4b18      	ldr	r3, [pc, #96]	; (800f8a0 <STO_PLL_Init+0x6c>)
 800f83e:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800f842:	fb93 f3f5 	sdiv	r3, r3, r5
 800f846:	2200      	movs	r2, #0
 800f848:	2101      	movs	r1, #1
 800f84a:	b21b      	sxth	r3, r3
 800f84c:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 800f850:	8662      	strh	r2, [r4, #50]	; 0x32
 800f852:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800f856:	b303      	cbz	r3, 800f89a <STO_PLL_Init+0x66>
 800f858:	4608      	mov	r0, r1
 800f85a:	e000      	b.n	800f85e <STO_PLL_Init+0x2a>
 800f85c:	4611      	mov	r1, r2
 800f85e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f862:	1c4a      	adds	r2, r1, #1
 800f864:	105b      	asrs	r3, r3, #1
 800f866:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800f86a:	b292      	uxth	r2, r2
 800f86c:	d1f6      	bne.n	800f85c <STO_PLL_Init+0x28>
 800f86e:	b200      	sxth	r0, r0
 800f870:	fb05 f200 	mul.w	r2, r5, r0
 800f874:	8661      	strh	r1, [r4, #50]	; 0x32
 800f876:	4b0b      	ldr	r3, [pc, #44]	; (800f8a4 <STO_PLL_Init+0x70>)
 800f878:	8620      	strh	r0, [r4, #48]	; 0x30
 800f87a:	fb83 1302 	smull	r1, r3, r3, r2
 800f87e:	17d2      	asrs	r2, r2, #31
 800f880:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 800f884:	8562      	strh	r2, [r4, #42]	; 0x2a
 800f886:	4620      	mov	r0, r4
 800f888:	f7ff ffa6 	bl	800f7d8 <STO_PLL_Clear>
 800f88c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f890:	f7fb ff12 	bl	800b6b8 <PID_HandleInit>
 800f894:	2300      	movs	r3, #0
 800f896:	8263      	strh	r3, [r4, #18]
 800f898:	bd38      	pop	{r3, r4, r5, pc}
 800f89a:	462a      	mov	r2, r5
 800f89c:	4608      	mov	r0, r1
 800f89e:	e7ea      	b.n	800f876 <STO_PLL_Init+0x42>
 800f8a0:	000fea5e 	.word	0x000fea5e
 800f8a4:	06488dc5 	.word	0x06488dc5

0800f8a8 <STO_PLL_IsObserverConverged>:
 800f8a8:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800f8ac:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	b10a      	cbz	r2, 800f8b8 <STO_PLL_IsObserverConverged+0x10>
 800f8b4:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f8b8:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	d143      	bne.n	800f948 <STO_PLL_IsObserverConverged+0xa0>
 800f8c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f8c4:	b430      	push	{r4, r5}
 800f8c6:	fb02 f501 	mul.w	r5, r2, r1
 800f8ca:	2d00      	cmp	r5, #0
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	dd34      	ble.n	800f93a <STO_PLL_IsObserverConverged+0x92>
 800f8d0:	2a00      	cmp	r2, #0
 800f8d2:	bfbc      	itt	lt
 800f8d4:	4252      	neglt	r2, r2
 800f8d6:	b212      	sxthlt	r2, r2
 800f8d8:	2900      	cmp	r1, #0
 800f8da:	bfbc      	itt	lt
 800f8dc:	4249      	neglt	r1, r1
 800f8de:	b20c      	sxthlt	r4, r1
 800f8e0:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800f8e4:	b359      	cbz	r1, 800f93e <STO_PLL_IsObserverConverged+0x96>
 800f8e6:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800f8ea:	b291      	uxth	r1, r2
 800f8ec:	428d      	cmp	r5, r1
 800f8ee:	d226      	bcs.n	800f93e <STO_PLL_IsObserverConverged+0x96>
 800f8f0:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800f8f4:	fb04 f101 	mul.w	r1, r4, r1
 800f8f8:	2900      	cmp	r1, #0
 800f8fa:	bfb8      	it	lt
 800f8fc:	310f      	addlt	r1, #15
 800f8fe:	f341 110f 	sbfx	r1, r1, #4, #16
 800f902:	428a      	cmp	r2, r1
 800f904:	db1b      	blt.n	800f93e <STO_PLL_IsObserverConverged+0x96>
 800f906:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800f90a:	fb04 f101 	mul.w	r1, r4, r1
 800f90e:	2900      	cmp	r1, #0
 800f910:	bfb8      	it	lt
 800f912:	310f      	addlt	r1, #15
 800f914:	f341 110f 	sbfx	r1, r1, #4, #16
 800f918:	428a      	cmp	r2, r1
 800f91a:	dc10      	bgt.n	800f93e <STO_PLL_IsObserverConverged+0x96>
 800f91c:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800f920:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 800f924:	3201      	adds	r2, #1
 800f926:	b2d2      	uxtb	r2, r2
 800f928:	4291      	cmp	r1, r2
 800f92a:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800f92e:	d804      	bhi.n	800f93a <STO_PLL_IsObserverConverged+0x92>
 800f930:	2001      	movs	r0, #1
 800f932:	2200      	movs	r2, #0
 800f934:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800f938:	701a      	strb	r2, [r3, #0]
 800f93a:	bc30      	pop	{r4, r5}
 800f93c:	4770      	bx	lr
 800f93e:	2200      	movs	r2, #0
 800f940:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800f944:	bc30      	pop	{r4, r5}
 800f946:	4770      	bx	lr
 800f948:	2001      	movs	r0, #1
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800f950:	701a      	strb	r2, [r3, #0]
 800f952:	4770      	bx	lr

0800f954 <STO_PLL_GetEstimatedBemf>:
 800f954:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f956:	2000      	movs	r0, #0
 800f958:	b29a      	uxth	r2, r3
 800f95a:	f362 000f 	bfi	r0, r2, #0, #16
 800f95e:	0c1b      	lsrs	r3, r3, #16
 800f960:	b082      	sub	sp, #8
 800f962:	f363 401f 	bfi	r0, r3, #16, #16
 800f966:	b002      	add	sp, #8
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop

0800f96c <STO_PLL_GetEstimatedCurrent>:
 800f96c:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 800f970:	b410      	push	{r4}
 800f972:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800f976:	4122      	asrs	r2, r4
 800f978:	b292      	uxth	r2, r2
 800f97a:	4123      	asrs	r3, r4
 800f97c:	2100      	movs	r1, #0
 800f97e:	b29b      	uxth	r3, r3
 800f980:	f362 010f 	bfi	r1, r2, #0, #16
 800f984:	f363 411f 	bfi	r1, r3, #16, #16
 800f988:	b083      	sub	sp, #12
 800f98a:	4608      	mov	r0, r1
 800f98c:	b003      	add	sp, #12
 800f98e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <STO_PLL_GetObserverGains>:
 800f994:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f998:	800b      	strh	r3, [r1, #0]
 800f99a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800f99e:	8013      	strh	r3, [r2, #0]
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop

0800f9a4 <STO_PLL_SetObserverGains>:
 800f9a4:	8441      	strh	r1, [r0, #34]	; 0x22
 800f9a6:	84c2      	strh	r2, [r0, #38]	; 0x26
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop

0800f9ac <STO_GetPLLGains>:
 800f9ac:	b570      	push	{r4, r5, r6, lr}
 800f9ae:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	460e      	mov	r6, r1
 800f9b6:	4615      	mov	r5, r2
 800f9b8:	f7fb febb 	bl	800b732 <PID_GetKP>
 800f9bc:	8030      	strh	r0, [r6, #0]
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f7fb fec4 	bl	800b74c <PID_GetKI>
 800f9c4:	8028      	strh	r0, [r5, #0]
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}

0800f9c8 <STO_SetPLLGains>:
 800f9c8:	b538      	push	{r3, r4, r5, lr}
 800f9ca:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800f9ce:	4615      	mov	r5, r2
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f7fb fe90 	bl	800b6f6 <PID_SetKP>
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	4620      	mov	r0, r4
 800f9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9de:	f7fb be99 	b.w	800b714 <PID_SetKI>
 800f9e2:	bf00      	nop

0800f9e4 <STO_OTF_ResetPLL>:
 800f9e4:	6800      	ldr	r0, [r0, #0]
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	3034      	adds	r0, #52	; 0x34
 800f9ea:	f7fb bebc 	b.w	800b766 <PID_SetIntegralTerm>
 800f9ee:	bf00      	nop

0800f9f0 <STO_ResetPLL>:
 800f9f0:	3034      	adds	r0, #52	; 0x34
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	f7fb beb7 	b.w	800b766 <PID_SetIntegralTerm>

0800f9f8 <STO_PLL_GetEstimatedBemfLevel>:
 800f9f8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop

0800fa00 <STO_PLL_GetObservedBemfLevel>:
 800fa00:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop

0800fa08 <STO_PLL_IsVarianceTight>:
 800fa08:	6803      	ldr	r3, [r0, #0]
 800fa0a:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800fa0e:	4770      	bx	lr

0800fa10 <STO_PLL_ForceConvergency1>:
 800fa10:	6803      	ldr	r3, [r0, #0]
 800fa12:	2201      	movs	r2, #1
 800fa14:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop

0800fa1c <STO_PLL_ForceConvergency2>:
 800fa1c:	6803      	ldr	r3, [r0, #0]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop

0800fa28 <__libc_init_array>:
 800fa28:	b570      	push	{r4, r5, r6, lr}
 800fa2a:	4e0d      	ldr	r6, [pc, #52]	; (800fa60 <__libc_init_array+0x38>)
 800fa2c:	4c0d      	ldr	r4, [pc, #52]	; (800fa64 <__libc_init_array+0x3c>)
 800fa2e:	1ba4      	subs	r4, r4, r6
 800fa30:	10a4      	asrs	r4, r4, #2
 800fa32:	2500      	movs	r5, #0
 800fa34:	42a5      	cmp	r5, r4
 800fa36:	d109      	bne.n	800fa4c <__libc_init_array+0x24>
 800fa38:	4e0b      	ldr	r6, [pc, #44]	; (800fa68 <__libc_init_array+0x40>)
 800fa3a:	4c0c      	ldr	r4, [pc, #48]	; (800fa6c <__libc_init_array+0x44>)
 800fa3c:	f000 f820 	bl	800fa80 <_init>
 800fa40:	1ba4      	subs	r4, r4, r6
 800fa42:	10a4      	asrs	r4, r4, #2
 800fa44:	2500      	movs	r5, #0
 800fa46:	42a5      	cmp	r5, r4
 800fa48:	d105      	bne.n	800fa56 <__libc_init_array+0x2e>
 800fa4a:	bd70      	pop	{r4, r5, r6, pc}
 800fa4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa50:	4798      	blx	r3
 800fa52:	3501      	adds	r5, #1
 800fa54:	e7ee      	b.n	800fa34 <__libc_init_array+0xc>
 800fa56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fa5a:	4798      	blx	r3
 800fa5c:	3501      	adds	r5, #1
 800fa5e:	e7f2      	b.n	800fa46 <__libc_init_array+0x1e>
 800fa60:	0800fdbc 	.word	0x0800fdbc
 800fa64:	0800fdbc 	.word	0x0800fdbc
 800fa68:	0800fdbc 	.word	0x0800fdbc
 800fa6c:	0800fdc0 	.word	0x0800fdc0

0800fa70 <memset>:
 800fa70:	4402      	add	r2, r0
 800fa72:	4603      	mov	r3, r0
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d100      	bne.n	800fa7a <memset+0xa>
 800fa78:	4770      	bx	lr
 800fa7a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa7e:	e7f9      	b.n	800fa74 <memset+0x4>

0800fa80 <_init>:
 800fa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa82:	bf00      	nop
 800fa84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa86:	bc08      	pop	{r3}
 800fa88:	469e      	mov	lr, r3
 800fa8a:	4770      	bx	lr

0800fa8c <_fini>:
 800fa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8e:	bf00      	nop
 800fa90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa92:	bc08      	pop	{r3}
 800fa94:	469e      	mov	lr, r3
 800fa96:	4770      	bx	lr
