
SinESC_Wing_1.0A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800f57c  0800f57c  0001f57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8a0  0800f8a0  000206dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800f8a0  0800f8a0  000206dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f8a0  0800f8a0  000206dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8a0  0800f8a0  0001f8a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f8a4  0800f8a4  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006dc  20000000  0800f8a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  200006dc  0800ff84  000206dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  0800ff84  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206dc  2**0
                  CONTENTS, READONLY
 12 .debug_line   000266f5  00000000  00000000  0002070c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00041ccb  00000000  00000000  00046e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005b16  00000000  00000000  00088acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000021c8  00000000  00000000  0008e5e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d56c8  00000000  00000000  000907b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001f20  00000000  00000000  00165e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002743e  00000000  00000000  00167d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  0018f1d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008cc0  00000000  00000000  0018f2d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200006dc 	.word	0x200006dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f564 	.word	0x0800f564

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200006e0 	.word	0x200006e0
 80001c4:	0800f564 	.word	0x0800f564

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f005 fb07 	bl	8005804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f00f f989 	bl	800f50c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 facf 	bl	800079c <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000204:	0800f8a8 	.word	0x0800f8a8
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	200006dc 	.word	0x200006dc
	ldr	r2, =_sbss
 8000210:	200006dc 	.word	0x200006dc
	ldr	r3, = _ebss
 8000214:	20000bd8 	.word	0x20000bd8

08000218 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC3_IRQHandler>

0800021a <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800021a:	b480      	push	{r7}
 800021c:	b083      	sub	sp, #12
 800021e:	af00      	add	r7, sp, #0
 8000220:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0201 	orr.w	r2, r3, #1
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800023a:	b480      	push	{r7}
 800023c:	b083      	sub	sp, #12
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	683a      	ldr	r2, [r7, #0]
 8000248:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800024a:	bf00      	nop
 800024c:	370c      	adds	r7, #12
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000256:	b480      	push	{r7}
 8000258:	b083      	sub	sp, #12
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
 800025e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	6a1a      	ldr	r2, [r3, #32]
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	621a      	str	r2, [r3, #32]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	6a1a      	ldr	r2, [r3, #32]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	43db      	mvns	r3, r3
 800028a:	401a      	ands	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	621a      	str	r2, [r3, #32]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <LL_TIM_OC_GetCompareCH2>:
  * @rmtoll CCR2         CCR2          LL_TIM_OC_GetCompareCH2
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR2));
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr

080002b4 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f06f 0202 	mvn.w	r2, #2
 80002c2:	611a      	str	r2, [r3, #16]
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	68db      	ldr	r3, [r3, #12]
 80002dc:	f043 0202 	orr.w	r2, r3, #2
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	60da      	str	r2, [r3, #12]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <esc_boot>:
/**
  * @brief  Boot function to initialize the ESC board.
  * @retval none.
  */
void esc_boot(ESC_Handle_t * pHandle)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pESC_params->Command_TIM;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	60fb      	str	r3, [r7, #12]
  /*##- Start the Input Capture in interrupt mode ##########################*/
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH2);
 8000300:	2110      	movs	r1, #16
 8000302:	68f8      	ldr	r0, [r7, #12]
 8000304:	f7ff ffa7 	bl	8000256 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableIT_CC1 (TIMx);
 8000308:	68f8      	ldr	r0, [r7, #12]
 800030a:	f7ff ffe1 	bl	80002d0 <LL_TIM_EnableIT_CC1>
  LL_TIM_CC_EnableChannel (TIMx, LL_TIM_CHANNEL_CH1);
 800030e:	2101      	movs	r1, #1
 8000310:	68f8      	ldr	r0, [r7, #12]
 8000312:	f7ff ffa0 	bl	8000256 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIMx);
 8000316:	68f8      	ldr	r0, [r7, #12]
 8000318:	f7ff ff7f 	bl	800021a <LL_TIM_EnableCounter>
#ifdef ESC_BEEP_FEATURE
  pHandle->beep_state = SM_BEEP_1;
  pHandle->phase_check_status = false;
#endif
  
}
 800031c:	bf00      	nop
 800031e:	3710      	adds	r7, #16
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <esc_pwm_run>:
  pHandle->restart_delay = STOP_DURATION;  
  pHandle->arming_counter = 0;
}

ESC_State_t esc_pwm_run(ESC_Handle_t * pHandle)
{ 
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  uint32_t new_speed;
  ESC_Params_t const * pESC_params = pHandle->pESC_params;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	60fb      	str	r3, [r7, #12]
  bool cmd_status;
  ESC_State_t ESC_Fault_Occured = ESC_NOERROR;
 8000332:	2300      	movs	r3, #0
 8000334:	74fb      	strb	r3, [r7, #19]
 { 
    /* First we detect that we still receive signal from PWM input */
   if(pHandle->watchdog_counter == pHandle->watchdog_counter_prev)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000342:	429a      	cmp	r2, r3
 8000344:	d10f      	bne.n	8000366 <esc_pwm_run+0x42>
   {
     if(pHandle->pwm_timeout == 0)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	6a1b      	ldr	r3, [r3, #32]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d105      	bne.n	800035a <esc_pwm_run+0x36>
     {
       /* Ton_Value is not updated anymore, set to 0 for safety*/
       pHandle->Ton_value  = 0;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2200      	movs	r2, #0
 8000352:	629a      	str	r2, [r3, #40]	; 0x28
       ESC_Fault_Occured = ESC_NOSIGNAL;
 8000354:	2301      	movs	r3, #1
 8000356:	74fb      	strb	r3, [r7, #19]
 8000358:	e012      	b.n	8000380 <esc_pwm_run+0x5c>
     }
     else 
     {
       pHandle->pwm_timeout--;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6a1b      	ldr	r3, [r3, #32]
 800035e:	1e5a      	subs	r2, r3, #1
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	621a      	str	r2, [r3, #32]
 8000364:	e00c      	b.n	8000380 <esc_pwm_run+0x5c>
     }
   }
   else 
   {
     pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	68da      	ldr	r2, [r3, #12]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	621a      	str	r2, [r3, #32]
     pHandle->watchdog_counter_prev = pHandle->watchdog_counter;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
     esc_reset_pwm_ch(pHandle);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f000 f9ca 	bl	8000714 <esc_reset_pwm_ch>
   }  
  /* User defined code */
  switch (pHandle->sm_state)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000386:	2b03      	cmp	r3, #3
 8000388:	f200 8111 	bhi.w	80005ae <esc_pwm_run+0x28a>
 800038c:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <esc_pwm_run+0x70>)
 800038e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000392:	bf00      	nop
 8000394:	080003a5 	.word	0x080003a5
 8000398:	0800040d 	.word	0x0800040d
 800039c:	080004a5 	.word	0x080004a5
 80003a0:	08000561 	.word	0x08000561
  {
   case ESC_ARMING:
    {
      if((pHandle->Ton_value >= pESC_params->Ton_arming) && (pHandle->Ton_value < pESC_params->Ton_min)) 
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d324      	bcc.n	80003fa <esc_pwm_run+0xd6>
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d21e      	bcs.n	80003fa <esc_pwm_run+0xd6>
      {
        pHandle->arming_counter++;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	1c5a      	adds	r2, r3, #1
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	61da      	str	r2, [r3, #28]
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	69da      	ldr	r2, [r3, #28]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d91b      	bls.n	800040a <esc_pwm_run+0xe6>
         {
           pHandle->sm_state = ESC_ARMED;   
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2201      	movs	r2, #1
 80003d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
           pHandle->arming_counter  = 0;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	61da      	str	r2, [r3, #28]
           pHandle->pwm_timeout = pESC_params->PWM_TURNOFF_MAX;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	621a      	str	r2, [r3, #32]
           pHandle->watchdog_counter = 0;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	2200      	movs	r2, #0
 80003ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
           pHandle->watchdog_counter_prev = 0;   
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2200      	movs	r2, #0
 80003f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        if(pHandle->arming_counter > pESC_params->ARMING_TIME)    
 80003f8:	e007      	b.n	800040a <esc_pwm_run+0xe6>
         }
      }
      else 
       {
         pHandle->sm_state = ESC_ARMING;          
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
         pHandle->arming_counter  = 0;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2200      	movs	r2, #0
 8000406:	61da      	str	r2, [r3, #28]
       }
      }
    break;  
 8000408:	e0d1      	b.n	80005ae <esc_pwm_run+0x28a>
 800040a:	e0d0      	b.n	80005ae <esc_pwm_run+0x28a>
   case ESC_ARMED:
    {
      if (pHandle->Ton_value >= pESC_params->Ton_min)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	429a      	cmp	r2, r3
 8000416:	d336      	bcc.n	8000486 <esc_pwm_run+0x162>
        /* Next state */
        /* This command sets what will be the first speed ramp after the 
          MC_StartMotor1 command. It requires as first parameter the 
          target mechanical speed in thenth of Hz and as
          second parameter the speed ramp duration in milliseconds. */
        MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (pESC_params->speed_min_valueRPM/6), 0 );
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800041e:	461a      	mov	r2, r3
 8000420:	4b65      	ldr	r3, [pc, #404]	; (80005b8 <esc_pwm_run+0x294>)
 8000422:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800042a:	4a64      	ldr	r2, [pc, #400]	; (80005bc <esc_pwm_run+0x298>)
 800042c:	fba2 2303 	umull	r2, r3, r2, r3
 8000430:	089b      	lsrs	r3, r3, #2
 8000432:	b29b      	uxth	r3, r3
 8000434:	b21b      	sxth	r3, r3
 8000436:	2200      	movs	r2, #0
 8000438:	4619      	mov	r1, r3
 800043a:	f000 ffda 	bl	80013f2 <MCI_ExecSpeedRamp>
        
        /* This is a user command used to start the motor. The speed ramp shall be
          pre programmed before the command.*/
        cmd_status = MCI_StartMotor( pMCI[pESC_params->motor] );
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000444:	461a      	mov	r2, r3
 8000446:	4b5c      	ldr	r3, [pc, #368]	; (80005b8 <esc_pwm_run+0x294>)
 8000448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800044c:	4618      	mov	r0, r3
 800044e:	f001 f826 	bl	800149e <MCI_StartMotor>
 8000452:	4603      	mov	r3, r0
 8000454:	72fb      	strb	r3, [r7, #11]
      
        /* It verifies if the command  "MCI_StartMotor" is successfully executed 
          otherwise it tries to restart the procedure */
        if(cmd_status==false)    
 8000456:	7afb      	ldrb	r3, [r7, #11]
 8000458:	f083 0301 	eor.w	r3, r3, #1
 800045c:	b2db      	uxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	d004      	beq.n	800046c <esc_pwm_run+0x148>
        {
          pHandle->sm_state = ESC_ARMING;                       // Command NOT executed
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2200      	movs	r2, #0
 8000466:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800046a:	e007      	b.n	800047c <esc_pwm_run+0x158>
        }
        else 
        {
          pHandle->sm_state = ESC_POSITIVE_RUN;              // Command executed
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2202      	movs	r2, #2
 8000470:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
          /* From this point the motor is spinning and stop and restart requires STOP_DURATION delay*/
          pHandle->restart_delay = STOP_DURATION; 
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f44f 7248 	mov.w	r2, #800	; 0x320
 800047a:	859a      	strh	r2, [r3, #44]	; 0x2c
        }
        pHandle->restart_delay = STOP_DURATION;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000482:	859a      	strh	r2, [r3, #44]	; 0x2c
          /* Nothing to do stay in ARMED state waiting for TON > TON_MIN*/
        }
      }
        
    }
    break;  
 8000484:	e090      	b.n	80005a8 <esc_pwm_run+0x284>
        if (pHandle->Ton_value < pESC_params->Ton_arming)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	429a      	cmp	r2, r3
 8000490:	f080 808a 	bcs.w	80005a8 <esc_pwm_run+0x284>
          pHandle->sm_state = ESC_ARMING;          
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
          pHandle->arming_counter  = 0;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2200      	movs	r2, #0
 80004a0:	61da      	str	r2, [r3, #28]
    break;  
 80004a2:	e081      	b.n	80005a8 <esc_pwm_run+0x284>
   case ESC_POSITIVE_RUN:
    {  
      if( pHandle->Ton_value < pESC_params->Ton_min)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d21c      	bcs.n	80004ea <esc_pwm_run+0x1c6>
      {
        pHandle->turnoff_delay --;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b4:	1e5a      	subs	r2, r3, #1
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
        if(pHandle->turnoff_delay <= 0)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004be:	2b00      	cmp	r3, #0
 80004c0:	dc74      	bgt.n	80005ac <esc_pwm_run+0x288>
        {
          pHandle->sm_state = ESC_STOP; 
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2203      	movs	r2, #3
 80004c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
          pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	691b      	ldr	r3, [r3, #16]
 80004ce:	461a      	mov	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	625a      	str	r2, [r3, #36]	; 0x24
          /* This is a user command to stop the motor */
          MCI_StopMotor( pMCI[pESC_params->motor] );
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004da:	461a      	mov	r2, r3
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <esc_pwm_run+0x294>)
 80004de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 fff2 	bl	80014cc <MCI_StopMotor>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );     
        }
      }
    }
      
   break;
 80004e8:	e060      	b.n	80005ac <esc_pwm_run+0x288>
        pHandle->turnoff_delay = pESC_params->TURNOFF_TIME_MAX;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	691b      	ldr	r3, [r3, #16]
 80004ee:	461a      	mov	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	625a      	str	r2, [r3, #36]	; 0x24
        if(pHandle->Ton_value <= pESC_params->Ton_max)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d815      	bhi.n	800052c <esc_pwm_run+0x208>
          new_speed = ((pHandle->Ton_value-pESC_params->Ton_min) * (pESC_params->speed_max_valueRPM - pESC_params->speed_min_valueRPM) / pESC_params->delta_Ton_max) + pESC_params->speed_min_valueRPM;  
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800050e:	4611      	mov	r1, r2
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000514:	1a8a      	subs	r2, r1, r2
 8000516:	fb02 f203 	mul.w	r2, r2, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6a1b      	ldr	r3, [r3, #32]
 800051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000526:	4413      	add	r3, r2
 8000528:	617b      	str	r3, [r7, #20]
 800052a:	e002      	b.n	8000532 <esc_pwm_run+0x20e>
          new_speed = pESC_params->speed_max_valueRPM;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000530:	617b      	str	r3, [r7, #20]
        if (MC_GetSTMStateMotor1() == RUN)
 8000532:	f000 ff2d 	bl	8001390 <MC_GetSTMStateMotor1>
 8000536:	4603      	mov	r3, r0
 8000538:	2b06      	cmp	r3, #6
 800053a:	d137      	bne.n	80005ac <esc_pwm_run+0x288>
          MCI_ExecSpeedRamp( pMCI[pESC_params->motor], (new_speed/6), 50 );     
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000542:	461a      	mov	r2, r3
 8000544:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <esc_pwm_run+0x294>)
 8000546:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <esc_pwm_run+0x298>)
 800054e:	fba2 2303 	umull	r2, r3, r2, r3
 8000552:	089b      	lsrs	r3, r3, #2
 8000554:	b21b      	sxth	r3, r3
 8000556:	2232      	movs	r2, #50	; 0x32
 8000558:	4619      	mov	r1, r3
 800055a:	f000 ff4a 	bl	80013f2 <MCI_ExecSpeedRamp>
   break;
 800055e:	e025      	b.n	80005ac <esc_pwm_run+0x288>
   case ESC_STOP:
    {    
       /* After the time "STOP_DURATION" the motor will be restarted */
       if (pHandle->restart_delay == 0)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000566:	2b00      	cmp	r3, #0
 8000568:	d114      	bne.n	8000594 <esc_pwm_run+0x270>
          {
            /* Next state */ 
            pHandle->sm_state = ESC_ARMING;  
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
            pHandle->Ton_value  = 0;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	629a      	str	r2, [r3, #40]	; 0x28
            pHandle->arming_counter = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	61da      	str	r2, [r3, #28]
            pHandle->buffer_completed = false;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
            pHandle->index_filter = 0;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
             pHandle->pwm_accumulator = 0;  
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
          else
          {
            pHandle->restart_delay--;
          }
    }
    break;  
 8000592:	e00c      	b.n	80005ae <esc_pwm_run+0x28a>
            pHandle->restart_delay--;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800059a:	b29b      	uxth	r3, r3
 800059c:	3b01      	subs	r3, #1
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b21a      	sxth	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    break;  
 80005a6:	e002      	b.n	80005ae <esc_pwm_run+0x28a>
    break;  
 80005a8:	bf00      	nop
 80005aa:	e000      	b.n	80005ae <esc_pwm_run+0x28a>
   break;
 80005ac:	bf00      	nop
  }
 }
 return (ESC_Fault_Occured);
 80005ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000ae0 	.word	0x20000ae0
 80005bc:	aaaaaaab 	.word	0xaaaaaaab

080005c0 <esc_pwm_control>:
  * @brief  This is the main function to use in the main.c in order to start the current example 
  * @param  None
  * @retval None
  */
void esc_pwm_control(ESC_Handle_t * pHandle)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
   ESC_State_t ESC_Fault_Occured;
 
  if(UI_IdleTimeHasElapsed()) {
 80005c8:	f003 ff6e 	bl	80044a8 <UI_IdleTimeHasElapsed>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d017      	beq.n	8000602 <esc_pwm_control+0x42>
    UI_SetIdleTime(USER_TIMEBASE_OCCURENCE_TICKS);   
 80005d2:	2004      	movs	r0, #4
 80005d4:	f003 ff7e 	bl	80044d4 <UI_SetIdleTime>
      pHandle->phase_check_status = esc_phase_check (pHandle);
    }
    else
#endif      
    {
      if (MC_GetSTMStateMotor1() == FAULT_OVER)
 80005d8:	f000 feda 	bl	8001390 <MC_GetSTMStateMotor1>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b0b      	cmp	r3, #11
 80005e0:	d108      	bne.n	80005f4 <esc_pwm_control+0x34>
       {
         pHandle->phase_check_status = false;
         pHandle-> start_check_flag = false;
       }
#endif         
       MC_AcknowledgeFaultMotor1();
 80005e2:	f000 fec9 	bl	8001378 <MC_AcknowledgeFaultMotor1>
       pHandle->sm_state = ESC_ARMING;   
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
       pHandle->arming_counter  = 0;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
      }
       
      ESC_Fault_Occured = esc_pwm_run(pHandle);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fe95 	bl	8000324 <esc_pwm_run>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]
     
      if (ESC_Fault_Occured == ESC_NOSIGNAL && pHandle->sm_state == ESC_ARMING)
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2b01      	cmp	r3, #1
      {
       /* Nothing to do */
      }
    }
  }
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <esc_capture_filter>:

static uint32_t esc_capture_filter(ESC_Handle_t * pHandle, uint32_t capture_value)
{ 
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
uint32_t pwm_filtered;
uint32_t pwm_max =0;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]

  if(pHandle->buffer_completed == false)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000620:	f083 0301 	eor.w	r3, r3, #1
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b00      	cmp	r3, #0
 8000628:	d024      	beq.n	8000674 <esc_capture_filter+0x68>
  {
     pHandle->pwm_accumulator += capture_value;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	699a      	ldr	r2, [r3, #24]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	441a      	add	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	619a      	str	r2, [r3, #24]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;    
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	605a      	str	r2, [r3, #4]
     pHandle->index_filter++;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	1c5a      	adds	r2, r3, #1
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	615a      	str	r2, [r3, #20]
     pwm_filtered = pHandle->pwm_accumulator/pHandle->index_filter;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	699a      	ldr	r2, [r3, #24]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	fbb2 f3f3 	udiv	r3, r2, r3
 800065a:	617b      	str	r3, [r7, #20]
     if(pHandle->index_filter >= ESC_FILTER_DEEP) 
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	2b03      	cmp	r3, #3
 8000662:	d947      	bls.n	80006f4 <esc_capture_filter+0xe8>
       {
         pHandle->index_filter = 0;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
         pHandle->buffer_completed = true;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000672:	e03f      	b.n	80006f4 <esc_capture_filter+0xe8>
       }
  }  
  else
  {
     /* We compute moving average, index_filter is the first data to remove*/
     pHandle->pwm_accumulator -= pHandle->pwm_buffer[pHandle->index_filter];
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	699a      	ldr	r2, [r3, #24]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	619a      	str	r2, [r3, #24]
     pHandle->pwm_buffer[pHandle->index_filter] = capture_value;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	605a      	str	r2, [r3, #4]
     pHandle->pwm_accumulator += capture_value;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	699a      	ldr	r2, [r3, #24]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	441a      	add	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	619a      	str	r2, [r3, #24]
     for (uint8_t i =0; i< ESC_FILTER_DEEP; i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	e00c      	b.n	80006c4 <esc_capture_filter+0xb8>
     {
       pwm_max = (pHandle->pwm_buffer[i] > pwm_max) ? pHandle->pwm_buffer[i] : pwm_max ;
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	4293      	cmp	r3, r2
 80006b8:	bf38      	it	cc
 80006ba:	4613      	movcc	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]
     for (uint8_t i =0; i< ESC_FILTER_DEEP; i++)
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	3301      	adds	r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d9ef      	bls.n	80006aa <esc_capture_filter+0x9e>
     }
     pHandle->index_filter++;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	615a      	str	r2, [r3, #20]
     if(pHandle->index_filter >= ESC_FILTER_DEEP)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d902      	bls.n	80006e2 <esc_capture_filter+0xd6>
     {
      pHandle->index_filter = 0;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
     }
     /* Remove the max pwm input from the average computation*/
     pwm_filtered = (pHandle->pwm_accumulator - pwm_max ) / (ESC_FILTER_DEEP -1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	699a      	ldr	r2, [r3, #24]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <esc_capture_filter+0x104>)
 80006ec:	fba2 2303 	umull	r2, r3, r2, r3
 80006f0:	085b      	lsrs	r3, r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
  }
  pwm_filtered = (pwm_filtered==0) ? 1 : pwm_filtered ;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <esc_capture_filter+0xf2>
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	e000      	b.n	8000700 <esc_capture_filter+0xf4>
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  
return(pwm_filtered);
 8000702:	697b      	ldr	r3, [r7, #20]
}
 8000704:	4618      	mov	r0, r3
 8000706:	371c      	adds	r7, #28
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	aaaaaaab 	.word	0xaaaaaaab

08000714 <esc_reset_pwm_ch>:
}

#endif // ESC_BEEP_FEATURE

static void esc_reset_pwm_ch(ESC_Handle_t * pHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    TIM_TypeDef * TIMx = TIM1;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <esc_reset_pwm_ch+0x34>)
 800071e:	60fb      	str	r3, [r7, #12]

    LL_TIM_CC_DisableChannel (TIMx, (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000720:	f240 5155 	movw	r1, #1365	; 0x555
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff fda7 	bl	8000278 <LL_TIM_CC_DisableChannel>
                           | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N
                           | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N ) );

    LL_TIM_SetAutoReload (TIMx, ((PWM_PERIOD_CYCLES) / 2));
 800072a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f7ff fd83 	bl	800023a <LL_TIM_SetAutoReload>
   
    /* Set the Output State */ 
    LL_TIM_CC_EnableChannel (TIMx, (LL_TIM_CHANNEL_CH1 | LL_TIM_CHANNEL_CH2
 8000734:	f240 5155 	movw	r1, #1365	; 0x555
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff fd8c 	bl	8000256 <LL_TIM_CC_EnableChannel>
                           | LL_TIM_CHANNEL_CH3 | LL_TIM_CHANNEL_CH1N
                           | LL_TIM_CHANNEL_CH2N | LL_TIM_CHANNEL_CH3N ));
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40012c00 	.word	0x40012c00

0800074c <TIM2_IRQHandler>:
  * @param  None
  * @retval None
  */

void TIM2_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* Clear TIM1 Capture compare interrupt pending bit */
  LL_TIM_ClearFlag_CC1 (TIM2);
 8000750:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000754:	f7ff fdae 	bl	80002b4 <LL_TIM_ClearFlag_CC1>

  /* Get Pulse width and low pass filter it to remove spurious informations */    
  ESC_M1.Ton_value = esc_capture_filter(&ESC_M1, LL_TIM_OC_GetCompareCH2(TIM2));
 8000758:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800075c:	f7ff fd9e 	bl	800029c <LL_TIM_OC_GetCompareCH2>
 8000760:	4603      	mov	r3, r0
 8000762:	4619      	mov	r1, r3
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <TIM2_IRQHandler+0x4c>)
 8000766:	f7ff ff51 	bl	800060c <esc_capture_filter>
 800076a:	4602      	mov	r2, r0
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <TIM2_IRQHandler+0x4c>)
 800076e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fail safe mechanism: stops the motor is the PWM input is disabled */
  ESC_M1.watchdog_counter++;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <TIM2_IRQHandler+0x4c>)
 8000772:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <TIM2_IRQHandler+0x4c>)
 800077c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  if(ESC_M1.watchdog_counter == 0)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <TIM2_IRQHandler+0x4c>)
 8000782:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000786:	2b00      	cmp	r3, #0
 8000788:	d103      	bne.n	8000792 <TIM2_IRQHandler+0x46>
     ESC_M1.watchdog_counter = 1;
 800078a:	4b03      	ldr	r3, [pc, #12]	; (8000798 <TIM2_IRQHandler+0x4c>)
 800078c:	2201      	movs	r2, #1
 800078e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000694 	.word	0x20000694

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f005 f846 	bl	8005830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f85a 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f000 fcd2 	bl	8001150 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007ac:	f000 f8e0 	bl	8000970 <MX_ADC1_Init>
  MX_ADC3_Init();
 80007b0:	f000 f99a 	bl	8000ae8 <MX_ADC3_Init>
  MX_COMP2_Init();
 80007b4:	f000 fa3e 	bl	8000c34 <MX_COMP2_Init>
  MX_COMP4_Init();
 80007b8:	f000 fa6c 	bl	8000c94 <MX_COMP4_Init>
  MX_COMP6_Init();
 80007bc:	f000 fa9a 	bl	8000cf4 <MX_COMP6_Init>
  MX_TIM1_Init();
 80007c0:	f000 fb30 	bl	8000e24 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007c4:	f000 fc0e 	bl	8000fe4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80007c8:	f000 fc92 	bl	80010f0 <MX_USART1_UART_Init>
  MX_MotorControl_Init();
 80007cc:	f002 fe96 	bl	80034fc <MX_MotorControl_Init>
  MX_CAN_Init();
 80007d0:	f000 f9fc 	bl	8000bcc <MX_CAN_Init>
  MX_DAC_Init();
 80007d4:	f000 fabe 	bl	8000d54 <MX_DAC_Init>
  MX_SPI1_Init();
 80007d8:	f000 fae6 	bl	8000da8 <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007dc:	f000 f89b 	bl	8000916 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  
  /*Initialization of Electronic Speed Controller (STEVAL-ESC001V1)*/
  esc_boot(&ESC_M1);
 80007e0:	481b      	ldr	r0, [pc, #108]	; (8000850 <main+0xb4>)
 80007e2:	f7ff fd85 	bl	80002f0 <esc_boot>

  /* Reset the driver */
  resetDriver ();
 80007e6:	f000 fda9 	bl	800133c <resetDriver>
  /* Write driver configuration to its registers through SPI */
  configureDriver ();
 80007ea:	f000 fd91 	bl	8001310 <configureDriver>

  /* DEBUG: read the registers after writing */
  SPIread (TMC6100_GCONF, SPIRxBuf);
 80007ee:	4919      	ldr	r1, [pc, #100]	; (8000854 <main+0xb8>)
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 fd2b 	bl	800124c <SPIread>
  SPIread (TMC6100_SHORT_CONF, SPIRxBuf);
 80007f6:	4917      	ldr	r1, [pc, #92]	; (8000854 <main+0xb8>)
 80007f8:	2009      	movs	r0, #9
 80007fa:	f000 fd27 	bl	800124c <SPIread>
  SPIread (TMC6100_DRV_CONF, SPIRxBuf);
 80007fe:	4915      	ldr	r1, [pc, #84]	; (8000854 <main+0xb8>)
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fd23 	bl	800124c <SPIread>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* Main routine for Electronic Speed Controller (STEVAL-ESC001V1) */
    esc_pwm_control(&ESC_M1); 
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <main+0xb4>)
 8000808:	f7ff feda 	bl	80005c0 <esc_pwm_control>

    /* Driver fault handling */
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)) {
 800080c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <main+0xbc>)
 8000812:	f006 febd 	bl	8007590 <HAL_GPIO_ReadPin>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d013      	beq.n	8000844 <main+0xa8>
    	/* Turn on fault LED */
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2104      	movs	r1, #4
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <main+0xbc>)
 8000822:	f006 fecd 	bl	80075c0 <HAL_GPIO_WritePin>
    	/* DEBUG: read all input pins */
        SPIread (TMC6100_IOIN, SPIRxBuf);
 8000826:	490b      	ldr	r1, [pc, #44]	; (8000854 <main+0xb8>)
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fd0f 	bl	800124c <SPIread>
        /* DEBUG: read fault register */
        SPIread (TMC6100_GSTAT, SPIRxBuf);
 800082e:	4909      	ldr	r1, [pc, #36]	; (8000854 <main+0xb8>)
 8000830:	2001      	movs	r0, #1
 8000832:	f000 fd0b 	bl	800124c <SPIread>
        /* Reset the driver */
        resetDriver ();
 8000836:	f000 fd81 	bl	800133c <resetDriver>
        /* DEBUG: read fault register */
        SPIread (TMC6100_GSTAT, SPIRxBuf);
 800083a:	4906      	ldr	r1, [pc, #24]	; (8000854 <main+0xb8>)
 800083c:	2001      	movs	r0, #1
 800083e:	f000 fd05 	bl	800124c <SPIread>
 8000842:	e7e0      	b.n	8000806 <main+0x6a>
        /* Write driver configuration to its registers through SPI */
        //configureDriver ();
    }
    else {
    	/* Turn off fault LED */
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2104      	movs	r1, #4
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <main+0xbc>)
 800084a:	f006 feb9 	bl	80075c0 <HAL_GPIO_WritePin>
    esc_pwm_control(&ESC_M1); 
 800084e:	e7da      	b.n	8000806 <main+0x6a>
 8000850:	20000694 	.word	0x20000694
 8000854:	20000728 	.word	0x20000728
 8000858:	48000400 	.word	0x48000400

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09e      	sub	sp, #120	; 0x78
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00e fe72 	bl	800f554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000880:	463b      	mov	r3, r7
 8000882:	223c      	movs	r2, #60	; 0x3c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f00e fe64 	bl	800f554 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800088c:	2301      	movs	r3, #1
 800088e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000890:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000894:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008ac:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008b2:	4618      	mov	r0, r3
 80008b4:	f006 fe9c 	bl	80075f0 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008be:	f000 fd53 	bl	8001368 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	230f      	movs	r3, #15
 80008c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c6:	2302      	movs	r3, #2
 80008c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008dc:	2102      	movs	r1, #2
 80008de:	4618      	mov	r0, r3
 80008e0:	f007 fd8e 	bl	8008400 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008ea:	f000 fd3d 	bl	8001368 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 80008ee:	f241 0301 	movw	r3, #4097	; 0x1001
 80008f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4618      	mov	r0, r3
 8000900:	f007 ffb4 	bl	800886c <HAL_RCCEx_PeriphCLKConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800090a:	f000 fd2d 	bl	8001368 <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3778      	adds	r7, #120	; 0x78
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	2104      	movs	r1, #4
 800091e:	2018      	movs	r0, #24
 8000920:	f006 fc09 	bl	8007136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000924:	2018      	movs	r0, #24
 8000926:	f006 fc22 	bl	800716e <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	2019      	movs	r0, #25
 8000930:	f006 fc01 	bl	8007136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000934:	2019      	movs	r0, #25
 8000936:	f006 fc1a 	bl	800716e <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	2012      	movs	r0, #18
 8000940:	f006 fbf9 	bl	8007136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000944:	2012      	movs	r0, #18
 8000946:	f006 fc12 	bl	800716e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	2103      	movs	r1, #3
 800094e:	2025      	movs	r0, #37	; 0x25
 8000950:	f006 fbf1 	bl	8007136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000954:	2025      	movs	r0, #37	; 0x25
 8000956:	f006 fc0a 	bl	800716e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2103      	movs	r1, #3
 800095e:	201c      	movs	r0, #28
 8000960:	f006 fbe9 	bl	8007136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000964:	201c      	movs	r0, #28
 8000966:	f006 fc02 	bl	800716e <HAL_NVIC_EnableIRQ>
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000976:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2228      	movs	r2, #40	; 0x28
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f00e fde2 	bl	800f554 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80009a8:	4b4e      	ldr	r3, [pc, #312]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b0:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009b6:	4b4b      	ldr	r3, [pc, #300]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009bc:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009be:	2200      	movs	r2, #0
 80009c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ca:	4b46      	ldr	r3, [pc, #280]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b44      	ldr	r3, [pc, #272]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80009d6:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009d8:	2220      	movs	r2, #32
 80009da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009dc:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e2:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009ec:	2204      	movs	r2, #4
 80009ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f6:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fc:	4839      	ldr	r0, [pc, #228]	; (8000ae4 <MX_ADC1_Init+0x174>)
 80009fe:	f004 ff9f 	bl	8005940 <HAL_ADC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000a08:	f000 fcae 	bl	8001368 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a14:	4619      	mov	r1, r3
 8000a16:	4833      	ldr	r0, [pc, #204]	; (8000ae4 <MX_ADC1_Init+0x174>)
 8000a18:	f005 ffe6 	bl	80069e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a22:	f000 fca1 	bl	8001368 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000a32:	2303      	movs	r3, #3
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000a36:	2303      	movs	r3, #3
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  sConfigInjected.QueueInjectedContext = ENABLE;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  sConfigInjected.InjectedOffset = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <MX_ADC1_Init+0x174>)
 8000a64:	f005 fc38 	bl	80062d8 <HAL_ADCEx_InjectedConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000a6e:	f000 fc7b 	bl	8001368 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4818      	ldr	r0, [pc, #96]	; (8000ae4 <MX_ADC1_Init+0x174>)
 8000a82:	f005 fc29 	bl	80062d8 <HAL_ADCEx_InjectedConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000a8c:	f000 fc6c 	bl	8001368 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000a90:	2303      	movs	r3, #3
 8000a92:	61fb      	str	r3, [r7, #28]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_ADC1_Init+0x174>)
 8000aa0:	f005 fc1a 	bl	80062d8 <HAL_ADCEx_InjectedConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000aaa:	f000 fc5d 	bl	8001368 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000aba:	2304      	movs	r3, #4
 8000abc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_ADC1_Init+0x174>)
 8000acc:	f005 f918 	bl	8005d00 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000ad6:	f000 fc47 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3750      	adds	r7, #80	; 0x50
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200007b8 	.word	0x200007b8

08000ae8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b0c:	4a2e      	ldr	r2, [pc, #184]	; (8000bc8 <MX_ADC3_Init+0xe0>)
 8000b0e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b16:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b2a:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b32:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b40:	2220      	movs	r2, #32
 8000b42:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b64:	4817      	ldr	r0, [pc, #92]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b66:	f004 feeb 	bl	8005940 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000b70:	f000 fbfa 	bl	8001368 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4811      	ldr	r0, [pc, #68]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000b80:	f005 ff32 	bl	80069e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8000b8a:	f000 fbed 	bl	8001368 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <MX_ADC3_Init+0xdc>)
 8000bac:	f005 f8a8 	bl	8005d00 <HAL_ADC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000bb6:	f000 fbd7 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000808 	.word	0x20000808
 8000bc8:	50000400 	.word	0x50000400

08000bcc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <MX_CAN_Init+0x60>)
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <MX_CAN_Init+0x64>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_CAN_Init+0x60>)
 8000bd8:	2210      	movs	r2, #16
 8000bda:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_CAN_Init+0x60>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000be2:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_CAN_Init+0x60>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_CAN_Init+0x60>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_CAN_Init+0x60>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_CAN_Init+0x60>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_CAN_Init+0x60>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_CAN_Init+0x60>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_CAN_Init+0x60>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_CAN_Init+0x60>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_CAN_Init+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_CAN_Init+0x60>)
 8000c1a:	f006 f836 	bl	8006c8a <HAL_CAN_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000c24:	f000 fba0 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000760 	.word	0x20000760
 8000c30:	40006400 	.word	0x40006400

08000c34 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_COMP2_Init+0x5c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c40:	2210      	movs	r2, #16
 8000c42:	605a      	str	r2, [r3, #4]
  hcomp2.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hcomp2.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c4c:	f640 027f 	movw	r2, #2175	; 0x87f
 8000c50:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Mode = COMP_MODE_HIGHSPEED;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_COMP2_Init+0x58>)
 8000c78:	f006 f902 	bl	8006e80 <HAL_COMP_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_COMP2_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 fb71 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000092c 	.word	0x2000092c
 8000c90:	40010020 	.word	0x40010020

08000c94 <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_COMP4_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_COMP4_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_COMP4_Init+0x58>)
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	605a      	str	r2, [r3, #4]
  hcomp4.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO1;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_COMP4_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hcomp4.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <MX_COMP4_Init+0x58>)
 8000cac:	f640 027f 	movw	r2, #2175	; 0x87f
 8000cb0:	60da      	str	r2, [r3, #12]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_COMP4_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_COMP4_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_COMP4_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hcomp4.Init.Mode = COMP_MODE_HIGHSPEED;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_COMP4_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hcomp4.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_COMP4_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_COMP4_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_COMP4_Init+0x58>)
 8000cd8:	f006 f8d2 	bl	8006e80 <HAL_COMP_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_COMP4_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f000 fb41 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000788 	.word	0x20000788
 8000cf0:	40010028 	.word	0x40010028

08000cf4 <MX_COMP6_Init>:
  * @brief COMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP6_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP6_Init 0 */

  /* USER CODE BEGIN COMP6_Init 1 */

  /* USER CODE END COMP6_Init 1 */
  hcomp6.Instance = COMP6;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <MX_COMP6_Init+0x5c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hcomp6.Init.InvertingInput = COMP_INVERTINGINPUT_1_2VREFINT;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d00:	2210      	movs	r2, #16
 8000d02:	605a      	str	r2, [r3, #4]
  hcomp6.Init.NonInvertingInput = COMP_NONINVERTINGINPUT_IO2;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	609a      	str	r2, [r3, #8]
  hcomp6.Init.Output = COMP_OUTPUT_TIM1BKIN2;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d0c:	f640 027f 	movw	r2, #2175	; 0x87f
 8000d10:	60da      	str	r2, [r3, #12]
  hcomp6.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hcomp6.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hcomp6.Init.BlankingSrce = COMP_BLANKINGSRCE_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  hcomp6.Init.Mode = COMP_MODE_HIGHSPEED;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  hcomp6.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  hcomp6.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp6) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_COMP6_Init+0x58>)
 8000d38:	f006 f8a2 	bl	8006e80 <HAL_COMP_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_COMP6_Init+0x52>
  {
    Error_Handler();
 8000d42:	f000 fb11 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN COMP6_Init 2 */

  /* USER CODE END COMP6_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000730 	.word	0x20000730
 8000d50:	40010030 	.word	0x40010030

08000d54 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_DAC_Init+0x4c>)
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <MX_DAC_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000d6a:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_DAC_Init+0x4c>)
 8000d6c:	f006 fa26 	bl	80071bc <HAL_DAC_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000d76:	f000 faf7 	bl	8001368 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_DAC_Init+0x4c>)
 8000d8a:	f006 fa39 	bl	8007200 <HAL_DAC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000d94:	f000 fae8 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200008d8 	.word	0x200008d8
 8000da4:	40007400 	.word	0x40007400

08000da8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <MX_SPI1_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000db8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc0:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dde:	2228      	movs	r2, #40	; 0x28
 8000de0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000df6:	2207      	movs	r2, #7
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_SPI1_Init+0x74>)
 8000e08:	f007 fee0 	bl	8008bcc <HAL_SPI_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e12:	f000 faa9 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000095c 	.word	0x2000095c
 8000e20:	40013000 	.word	0x40013000

08000e24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b09a      	sub	sp, #104	; 0x68
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	222c      	movs	r2, #44	; 0x2c
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00e fb77 	bl	800f554 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e66:	4b5d      	ldr	r3, [pc, #372]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e68:	4a5d      	ldr	r2, [pc, #372]	; (8000fe0 <MX_TIM1_Init+0x1bc>)
 8000e6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000e6c:	4b5b      	ldr	r3, [pc, #364]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e72:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e74:	2220      	movs	r2, #32
 8000e76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000e78:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e7a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000e7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e80:	4b56      	ldr	r3, [pc, #344]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000e88:	4b54      	ldr	r3, [pc, #336]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e94:	4851      	ldr	r0, [pc, #324]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000e96:	f008 fa5b 	bl	8009350 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000ea0:	f000 fa62 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ea4:	484d      	ldr	r0, [pc, #308]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000ea6:	f008 fa7e 	bl	80093a6 <HAL_TIM_PWM_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000eb0:	f000 fa5a 	bl	8001368 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000eb8:	2310      	movs	r3, #16
 8000eba:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ebc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4846      	ldr	r0, [pc, #280]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000ec4:	f008 fc8e 	bl	80097e4 <HAL_TIM_SlaveConfigSynchro>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000ece:	f000 fa4b 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000ed2:	2370      	movs	r3, #112	; 0x70
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	483d      	ldr	r0, [pc, #244]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000ee6:	f009 fa4b 	bl	800a380 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000ef0:	f000 fa3a 	bl	8001368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	; 0x60
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000f00:	2308      	movs	r3, #8
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4830      	ldr	r0, [pc, #192]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000f1c:	f008 fb4a 	bl	80095b4 <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000f26:	f000 fa1f 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	482a      	ldr	r0, [pc, #168]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000f34:	f008 fb3e 	bl	80095b4 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000f3e:	f000 fa13 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f46:	2208      	movs	r2, #8
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000f4c:	f008 fb32 	bl	80095b4 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000f56:	f000 fa07 	bl	8001368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f5a:	2370      	movs	r3, #112	; 0x70
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8000f5e:	f240 2357 	movw	r3, #599	; 0x257
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6c:	220c      	movs	r2, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481a      	ldr	r0, [pc, #104]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000f72:	f008 fb1f 	bl	80095b4 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8000f7c:	f000 f9f4 	bl	8001368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f84:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f92:	2319      	movs	r3, #25
 8000f94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fa8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000faa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4807      	ldr	r0, [pc, #28]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000fbe:	f009 fa5f 	bl	800a480 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x1a8>
  {
    Error_Handler();
 8000fc8:	f000 f9ce 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fcc:	4803      	ldr	r0, [pc, #12]	; (8000fdc <MX_TIM1_Init+0x1b8>)
 8000fce:	f003 f93b 	bl	8004248 <HAL_TIM_MspPostInit>

}
 8000fd2:	bf00      	nop
 8000fd4:	3768      	adds	r7, #104	; 0x68
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200008ec 	.word	0x200008ec
 8000fe0:	40012c00 	.word	0x40012c00

08000fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	; 0x30
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001012:	4b36      	ldr	r3, [pc, #216]	; (80010ec <MX_TIM2_Init+0x108>)
 8001014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001018:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800101a:	4b34      	ldr	r3, [pc, #208]	; (80010ec <MX_TIM2_Init+0x108>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <MX_TIM2_Init+0x108>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <MX_TIM2_Init+0x108>)
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <MX_TIM2_Init+0x108>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <MX_TIM2_Init+0x108>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800103a:	482c      	ldr	r0, [pc, #176]	; (80010ec <MX_TIM2_Init+0x108>)
 800103c:	f008 f988 	bl	8009350 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001046:	f000 f98f 	bl	8001368 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800104a:	4828      	ldr	r0, [pc, #160]	; (80010ec <MX_TIM2_Init+0x108>)
 800104c:	f008 f9e0 	bl	8009410 <HAL_TIM_IC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001056:	f000 f987 	bl	8001368 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800105a:	2304      	movs	r3, #4
 800105c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800105e:	2350      	movs	r3, #80	; 0x50
 8001060:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	4619      	mov	r1, r3
 8001070:	481e      	ldr	r0, [pc, #120]	; (80010ec <MX_TIM2_Init+0x108>)
 8001072:	f008 fbb7 	bl	80097e4 <HAL_TIM_SlaveConfigSynchro>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800107c:	f000 f974 	bl	8001368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	4817      	ldr	r0, [pc, #92]	; (80010ec <MX_TIM2_Init+0x108>)
 8001090:	f009 f976 	bl	800a380 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800109a:	f000 f965 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_TIM2_Init+0x108>)
 80010b6:	f008 f9e0 	bl	800947a <HAL_TIM_IC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80010c0:	f000 f952 	bl	8001368 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80010c4:	2302      	movs	r3, #2
 80010c6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80010c8:	2302      	movs	r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	2204      	movs	r2, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_TIM2_Init+0x108>)
 80010d4:	f008 f9d1 	bl	800947a <HAL_TIM_IC_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 80010de:	f000 f943 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200009c0 	.word	0x200009c0

080010f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_USART1_UART_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <MX_USART1_UART_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_USART1_UART_Init+0x58>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_USART1_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_USART1_UART_Init+0x58>)
 8001134:	f009 fa22 	bl	800a57c <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800113e:	f000 f913 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000858 	.word	0x20000858
 800114c:	40013800 	.word	0x40013800

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	4a36      	ldr	r2, [pc, #216]	; (8001244 <MX_GPIO_Init+0xf4>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001170:	6153      	str	r3, [r2, #20]
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	4a30      	ldr	r2, [pc, #192]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	6153      	str	r3, [r2, #20]
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <MX_GPIO_Init+0xf4>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_GPIO_Init+0xf4>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a2a      	ldr	r2, [pc, #168]	; (8001244 <MX_GPIO_Init+0xf4>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b28      	ldr	r3, [pc, #160]	; (8001244 <MX_GPIO_Init+0xf4>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STAT_LED_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f240 4104 	movw	r1, #1028	; 0x404
 80011b4:	4824      	ldr	r0, [pc, #144]	; (8001248 <MX_GPIO_Init+0xf8>)
 80011b6:	f006 fa03 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_SOFT_GPIO_Port, SPI1_NSS_SOFT_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f006 f9fc 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STAT_LED_Pin */
  GPIO_InitStruct.Pin = STAT_LED_Pin;
 80011c8:	2304      	movs	r3, #4
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STAT_LED_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	481a      	ldr	r0, [pc, #104]	; (8001248 <MX_GPIO_Init+0xf8>)
 80011e0:	f006 f85c 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_Pin */
  GPIO_InitStruct.Pin = DRV_EN_Pin;
 80011e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRV_EN_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	4812      	ldr	r0, [pc, #72]	; (8001248 <MX_GPIO_Init+0xf8>)
 80011fe:	f006 f84d 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_FAULT_Pin */
  GPIO_InitStruct.Pin = DRV_FAULT_Pin;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DRV_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_GPIO_Init+0xf8>)
 8001218:	f006 f840 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_SOFT_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_SOFT_Pin;
 800121c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	2301      	movs	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_SOFT_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f006 f830 	bl	800729c <HAL_GPIO_Init>

}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400

0800124c <SPIread>:

/* USER CODE BEGIN 4 */

void SPIread (uint8_t address, uint8_t *inputBuffer) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
	uint8_t outputBuffer [5] = {address, 0x00, 0x00, 0x00, 0x00};
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	723b      	strb	r3, [r7, #8]
 800125c:	2300      	movs	r3, #0
 800125e:	727b      	strb	r3, [r7, #9]
 8001260:	2300      	movs	r3, #0
 8001262:	72bb      	strb	r3, [r7, #10]
 8001264:	2300      	movs	r3, #0
 8001266:	72fb      	strb	r3, [r7, #11]
 8001268:	2300      	movs	r3, #0
 800126a:	733b      	strb	r3, [r7, #12]
	/* READ */
	/* Pull NSS LOW before beginning the transaction*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001276:	f006 f9a3 	bl	80075c0 <HAL_GPIO_WritePin>
	/* Transaction */
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 800127a:	f107 0108 	add.w	r1, r7, #8
 800127e:	2301      	movs	r3, #1
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2305      	movs	r3, #5
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <SPIread+0x58>)
 8001288:	f007 fd32 	bl	8008cf0 <HAL_SPI_TransmitReceive>
	/* Transaction is over; pull NSS HIGH once again */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f006 f993 	bl	80075c0 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000095c 	.word	0x2000095c

080012a8 <SPIwrite>:

void SPIwrite (uint8_t address, uint8_t *data) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
	uint8_t outputBuffer [5] = {address + TMC6100_WRITE_BYTE, data [0], data [1], data [2], data [3]};
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	3b80      	subs	r3, #128	; 0x80
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	743b      	strb	r3, [r7, #16]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	747b      	strb	r3, [r7, #17]
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	74bb      	strb	r3, [r7, #18]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	74fb      	strb	r3, [r7, #19]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	753b      	strb	r3, [r7, #20]
	uint8_t inputBuffer [5];
	/* READ */
	/* Pull NSS LOW before beginning the transaction*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f006 f96f 	bl	80075c0 <HAL_GPIO_WritePin>
	/* Transaction */
	HAL_SPI_TransmitReceive(&hspi1, outputBuffer, inputBuffer, 5, 1);
 80012e2:	f107 0208 	add.w	r2, r7, #8
 80012e6:	f107 0110 	add.w	r1, r7, #16
 80012ea:	2301      	movs	r3, #1
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2305      	movs	r3, #5
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <SPIwrite+0x64>)
 80012f2:	f007 fcfd 	bl	8008cf0 <HAL_SPI_TransmitReceive>
	/* Transaction is over; pull NSS HIGH once again */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f006 f95e 	bl	80075c0 <HAL_GPIO_WritePin>
}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000095c 	.word	0x2000095c

08001310 <configureDriver>:

void configureDriver (void) {
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	SPIwrite (TMC6100_GCONF, GCONF_Write);
 8001314:	4906      	ldr	r1, [pc, #24]	; (8001330 <configureDriver+0x20>)
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffc6 	bl	80012a8 <SPIwrite>
	SPIwrite (TMC6100_SHORT_CONF, SHORT_CONF_Write);
 800131c:	4905      	ldr	r1, [pc, #20]	; (8001334 <configureDriver+0x24>)
 800131e:	2009      	movs	r0, #9
 8001320:	f7ff ffc2 	bl	80012a8 <SPIwrite>
	SPIwrite (TMC6100_DRV_CONF, DRV_CONF_Write);
 8001324:	4904      	ldr	r1, [pc, #16]	; (8001338 <configureDriver+0x28>)
 8001326:	200a      	movs	r0, #10
 8001328:	f7ff ffbe 	bl	80012a8 <SPIwrite>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000004 	.word	0x20000004
 8001338:	20000008 	.word	0x20000008

0800133c <resetDriver>:

void resetDriver (void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <resetDriver+0x28>)
 8001348:	f006 f93a 	bl	80075c0 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 800134c:	2032      	movs	r0, #50	; 0x32
 800134e:	f004 fad5 	bl	80058fc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <resetDriver+0x28>)
 800135a:	f006 f931 	bl	80075c0 <HAL_GPIO_WritePin>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	48000400 	.word	0x48000400

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <MC_AcknowledgeFaultMotor1>:
 * the error condition that occured into account. If no error condition exists when
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	return MCI_FaultAcknowledged( pMCI[M1] );
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <MC_AcknowledgeFaultMotor1+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f8b2 	bl	80014ea <MCI_FaultAcknowledged>
 8001386:	4603      	mov	r3, r0
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000ae0 	.word	0x20000ae0

08001390 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	return MCI_GetSTMState( pMCI[M1] );
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <MC_GetSTMStateMotor1+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 f926 	bl	80015ea <MCI_GetSTMState>
 800139e:	4603      	mov	r3, r0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000ae0 	.word	0x20000ae0

080013a8 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
  pHandle->pSTM = pSTM;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	601a      	str	r2, [r3, #0]
  pHandle->pSTC = pSTC;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	605a      	str	r2, [r3, #4]
  pHandle->pFOCVars = pFOCVars;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	609a      	str	r2, [r3, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2200      	movs	r2, #0
 80013cc:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = 0;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	81da      	strh	r2, [r3, #14]
  pHandle->hFinalTorque = 0;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = 0;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	761a      	strb	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]
 80013fe:	4613      	mov	r3, r2
 8001400:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	81da      	strh	r2, [r3, #14]
  pHandle->hDurationms = hDurationms;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	883a      	ldrh	r2, [r7, #0]
 8001412:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2201      	movs	r2, #1
 8001418:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	765a      	strb	r2, [r3, #25]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	887a      	ldrh	r2, [r7, #2]
 8001446:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = hDurationms;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	883a      	ldrh	r2, [r7, #0]
 800144c:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	765a      	strb	r2, [r3, #25]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2203      	movs	r2, #3
 8001474:	731a      	strb	r2, [r3, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8001476:	f9b7 2000 	ldrsh.w	r2, [r7]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	825a      	strh	r2, [r3, #18]
  pHandle->Iqdref.d = Iqdref.d;
 800147e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	829a      	strh	r2, [r3, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	765a      	strb	r2, [r3, #25]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2103      	movs	r1, #3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00c fe25 	bl	800e0fc <STM_NextState>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]

  if ( RetVal == true )
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <MCI_StartMotor+0x24>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	761a      	strb	r2, [r3, #24]
  }

  return RetVal;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2107      	movs	r1, #7
 80014da:	4618      	mov	r0, r3
 80014dc:	f00c fe0e 	bl	800e0fc <STM_NextState>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  return STM_FaultAcknowledged( pHandle->pSTM );
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00c ffac 	bl	800e454 <STM_FaultAcknowledged>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f00c fdf1 	bl	800e0fc <STM_NextState>
 800151a:	4603      	mov	r3, r0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ( pHandle != MC_NULL )
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d057      	beq.n	80015e2 <MCI_ExecBufferedCommands+0xbe>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7e1b      	ldrb	r3, [r3, #24]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d153      	bne.n	80015e2 <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
      switch ( pHandle->lastCommand )
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7b1b      	ldrb	r3, [r3, #12]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d01c      	beq.n	8001580 <MCI_ExecBufferedCommands+0x5c>
 8001546:	2b03      	cmp	r3, #3
 8001548:	d032      	beq.n	80015b0 <MCI_ExecBufferedCommands+0x8c>
 800154a:	2b01      	cmp	r3, #1
 800154c:	d000      	beq.n	8001550 <MCI_ExecBufferedCommands+0x2c>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
        }
        break;
        default:
          break;
 800154e:	e03e      	b.n	80015ce <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2101      	movs	r1, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f00c fc3f 	bl	800dde4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6858      	ldr	r0, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	8adb      	ldrh	r3, [r3, #22]
 8001574:	461a      	mov	r2, r3
 8001576:	f00c fc47 	bl	800de08 <STC_ExecRamp>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]
        break;
 800157e:	e026      	b.n	80015ce <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f00c fc27 	bl	800dde4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6858      	ldr	r0, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	8adb      	ldrh	r3, [r3, #22]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f00c fc2f 	bl	800de08 <STC_ExecRamp>
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
        break;
 80015ae:	e00e      	b.n	80015ce <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	3310      	adds	r3, #16
 80015c2:	3212      	adds	r2, #18
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
        break;
 80015cc:	bf00      	nop
      }

      if ( commandHasBeenExecuted )
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	761a      	strb	r2, [r3, #24]
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80015da:	e002      	b.n	80015e2 <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	761a      	strb	r2, [r3, #24]
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  return STM_GetState( pHandle->pSTM );
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00c ff20 	bl	800e43c <STM_GetState>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return pHandle->LastModalitySetByUser;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7e5b      	ldrb	r3, [r3, #25]
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <MCI_GetImposedMotorDirection>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
  *         hFinalTorque or Iqdref.q of the last command.
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  int16_t retVal = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	81fb      	strh	r3, [r7, #14]

  switch ( pHandle->lastCommand )
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7b1b      	ldrb	r3, [r3, #12]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d00d      	beq.n	800164e <MCI_GetImposedMotorDirection+0x30>
 8001632:	2b03      	cmp	r3, #3
 8001634:	d014      	beq.n	8001660 <MCI_GetImposedMotorDirection+0x42>
 8001636:	2b01      	cmp	r3, #1
 8001638:	d000      	beq.n	800163c <MCI_GetImposedMotorDirection+0x1e>
      {
        retVal = -1;
      }
      break;
    default:
      break;
 800163a:	e01f      	b.n	800167c <MCI_GetImposedMotorDirection+0x5e>
      if ( pHandle->hFinalSpeed < 0 )
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001642:	2b00      	cmp	r3, #0
 8001644:	da15      	bge.n	8001672 <MCI_GetImposedMotorDirection+0x54>
        retVal = -1;
 8001646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164a:	81fb      	strh	r3, [r7, #14]
      break;
 800164c:	e011      	b.n	8001672 <MCI_GetImposedMotorDirection+0x54>
      if ( pHandle->hFinalTorque < 0 )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	da0e      	bge.n	8001676 <MCI_GetImposedMotorDirection+0x58>
        retVal = -1;
 8001658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165c:	81fb      	strh	r3, [r7, #14]
      break;
 800165e:	e00a      	b.n	8001676 <MCI_GetImposedMotorDirection+0x58>
      if ( pHandle->Iqdref.q < 0 )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001666:	2b00      	cmp	r3, #0
 8001668:	da07      	bge.n	800167a <MCI_GetImposedMotorDirection+0x5c>
        retVal = -1;
 800166a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166e:	81fb      	strh	r3, [r7, #14]
      break;
 8001670:	e003      	b.n	800167a <MCI_GetImposedMotorDirection+0x5c>
      break;
 8001672:	bf00      	nop
 8001674:	e002      	b.n	800167c <MCI_GetImposedMotorDirection+0x5e>
      break;
 8001676:	bf00      	nop
 8001678:	e000      	b.n	800167c <MCI_GetImposedMotorDirection+0x5e>
      break;
 800167a:	bf00      	nop
  }
  return retVal;
 800167c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in tehts
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  int16_t hRetVal = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	81fb      	strh	r3, [r7, #14]

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7b1b      	ldrb	r3, [r3, #12]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d102      	bne.n	80016a6 <MCI_GetLastRampFinalSpeed+0x1a>
  {
    hRetVal = pHandle->hFinalSpeed;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	89db      	ldrh	r3, [r3, #14]
 80016a4:	81fb      	strh	r3, [r7, #14]
  }
  return hRetVal;
 80016a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   STC_StopRamp( pHandle->pSTC );
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f00c fc3c 	bl	800df40 <STC_StopRamp>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4618      	mov	r0, r3
 80016de:	f00c fb3d 	bl	800dd5c <STC_GetSpeedSensor>
 80016e2:	60f8      	str	r0, [r7, #12]

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f00c fa5d 	bl	800dba4 <SPD_GetAvrgMecSpeedUnit>
 80016ea:	4603      	mov	r3, r0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	f00c fb49 	bl	800dd98 <STC_GetMecSpeedRefUnit>
 8001706:	4603      	mov	r3, r0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iab );
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	6810      	ldr	r0, [r2, #0]
 8001722:	6018      	str	r0, [r3, #0]
 8001724:	2300      	movs	r3, #0
 8001726:	89ba      	ldrh	r2, [r7, #12]
 8001728:	f362 030f 	bfi	r3, r2, #0, #16
 800172c:	89fa      	ldrh	r2, [r7, #14]
 800172e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Ialphabeta );
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	3204      	adds	r2, #4
 8001750:	6810      	ldr	r0, [r2, #0]
 8001752:	6018      	str	r0, [r3, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	89ba      	ldrh	r2, [r7, #12]
 8001758:	f362 030f 	bfi	r3, r2, #0, #16
 800175c:	89fa      	ldrh	r2, [r7, #14]
 800175e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqd );
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	320c      	adds	r2, #12
 8001780:	6810      	ldr	r0, [r2, #0]
 8001782:	6018      	str	r0, [r3, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	89ba      	ldrh	r2, [r7, #12]
 8001788:	f362 030f 	bfi	r3, r2, #0, #16
 800178c:	89fa      	ldrh	r2, [r7, #14]
 800178e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqdref );
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	3210      	adds	r2, #16
 80017b0:	6810      	ldr	r0, [r2, #0]
 80017b2:	6018      	str	r0, [r3, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	89ba      	ldrh	r2, [r7, #12]
 80017b8:	f362 030f 	bfi	r3, r2, #0, #16
 80017bc:	89fa      	ldrh	r2, [r7, #14]
 80017be:	f362 431f 	bfi	r3, r2, #16, #16
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 80017ce:	b480      	push	{r7}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Vqd );
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	f107 030c 	add.w	r3, r7, #12
 80017de:	3216      	adds	r2, #22
 80017e0:	6810      	ldr	r0, [r2, #0]
 80017e2:	6018      	str	r0, [r3, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	89ba      	ldrh	r2, [r7, #12]
 80017e8:	f362 030f 	bfi	r3, r2, #0, #16
 80017ec:	89fa      	ldrh	r2, [r7, #14]
 80017ee:	f362 431f 	bfi	r3, r2, #16, #16
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Valphabeta );
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	321a      	adds	r2, #26
 8001810:	6810      	ldr	r0, [r2, #0]
 8001812:	6018      	str	r0, [r3, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	89ba      	ldrh	r2, [r7, #12]
 8001818:	f362 030f 	bfi	r3, r2, #0, #16
 800181c:	89fa      	ldrh	r2, [r7, #14]
 800181e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->hTeref );
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <MCI_SetIdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	825a      	strh	r2, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	829a      	strh	r2, [r3, #20]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8001872:	b590      	push	{r4, r7, lr}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689c      	ldr	r4, [r3, #8]
 8001882:	4610      	mov	r0, r2
 8001884:	f00c fbfa 	bl	800e07c <STC_GetDefaultIqdref>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	8222      	strh	r2, [r4, #16]
 800188e:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001892:	8263      	strh	r3, [r4, #18]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  int32_t a_divSQRT3_tmp, b_divSQRT3_tmp ;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 80018a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018a8:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 80018aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ae:	461a      	mov	r2, r3
 80018b0:	f644 13e6 	movw	r3, #18918	; 0x49e6
 80018b4:	fb03 f302 	mul.w	r3, r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 80018ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018be:	461a      	mov	r2, r3
 80018c0:	f644 13e6 	movw	r3, #18918	; 0x49e6
 80018c4:	fb03 f302 	mul.w	r3, r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	425a      	negs	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	1ad2      	subs	r2, r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	13db      	asrs	r3, r3, #15
 80018d8:	613b      	str	r3, [r7, #16]
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e0:	db03      	blt.n	80018ea <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 80018e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80018e6:	83fb      	strh	r3, [r7, #30]
 80018e8:	e009      	b.n	80018fe <MCM_Clarke+0x62>
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80018f0:	da03      	bge.n	80018fa <MCM_Clarke+0x5e>
  {
    hbeta_tmp = ( -32768 );
 80018f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f6:	83fb      	strh	r3, [r7, #30]
 80018f8:	e001      	b.n	80018fe <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 80018fe:	8bfb      	ldrh	r3, [r7, #30]
 8001900:	817b      	strh	r3, [r7, #10]

  if ( Output.beta == ( int16_t )( -32768 ) )
 8001902:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001906:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800190a:	d102      	bne.n	8001912 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 800190c:	f248 0301 	movw	r3, #32769	; 0x8001
 8001910:	817b      	strh	r3, [r7, #10]
  }

  return ( Output );
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	2300      	movs	r3, #0
 8001918:	89ba      	ldrh	r2, [r7, #12]
 800191a:	f362 030f 	bfi	r3, r2, #0, #16
 800191e:	89fa      	ldrh	r2, [r7, #14]
 8001920:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001924:	4618      	mov	r0, r3
 8001926:	3724      	adds	r7, #36	; 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park( alphabeta_t Input, int16_t Theta )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
  int32_t d_tmp_1, d_tmp_2, q_tmp_1, q_tmp_2;
  Trig_Components Local_Vector_Components;
  int32_t wqd_tmp;
  int16_t hqd_tmp;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 800193c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f8af 	bl	8001aa4 <MCM_Trig_Functions>
 8001946:	4603      	mov	r3, r0
 8001948:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800194a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800194e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8001958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	13db      	asrs	r3, r3, #15
 800196e:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Iq */
  if ( wqd_tmp > INT16_MAX )
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001976:	db03      	blt.n	8001980 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 8001978:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800197c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800197e:	e009      	b.n	8001994 <MCM_Park+0x64>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001986:	da03      	bge.n	8001990 <MCM_Park+0x60>
  {
    hqd_tmp = ( -32768 );
 8001988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800198c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800198e:	e001      	b.n	8001994 <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 8001994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001996:	823b      	strh	r3, [r7, #16]

  if ( Output.q == ( int16_t )( -32768 ) )
 8001998:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800199c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80019a0:	d102      	bne.n	80019a8 <MCM_Park+0x78>
  {
    Output.q = -32767;
 80019a2:	f248 0301 	movw	r3, #32769	; 0x8001
 80019a6:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 80019a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 80019b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	61bb      	str	r3, [r7, #24]
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4413      	add	r3, r2
 80019ca:	13db      	asrs	r3, r3, #15
 80019cc:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Id */
  if ( wqd_tmp > INT16_MAX )
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d4:	db03      	blt.n	80019de <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 80019d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80019da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019dc:	e009      	b.n	80019f2 <MCM_Park+0xc2>
  }
  else if ( wqd_tmp < ( -32768 ) )
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80019e4:	da03      	bge.n	80019ee <MCM_Park+0xbe>
  {
    hqd_tmp = ( -32768 );
 80019e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019ec:	e001      	b.n	80019f2 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 80019ee:	6a3b      	ldr	r3, [r7, #32]
 80019f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 80019f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019f4:	827b      	strh	r3, [r7, #18]

  if ( Output.d == ( int16_t )( -32768 ) )
 80019f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019fa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80019fe:	d102      	bne.n	8001a06 <MCM_Park+0xd6>
  {
    Output.d = -32767;
 8001a00:	f248 0301 	movw	r3, #32769	; 0x8001
 8001a04:	827b      	strh	r3, [r7, #18]
  }

  return ( Output );
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	8aba      	ldrh	r2, [r7, #20]
 8001a0e:	f362 030f 	bfi	r3, r2, #0, #16
 8001a12:	8afa      	ldrh	r2, [r7, #22]
 8001a14:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3730      	adds	r7, #48	; 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park( qd_t Input, int16_t Theta )
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
  int32_t alpha_tmp1, alpha_tmp2, beta_tmp1, beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001a2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f837 	bl	8001aa4 <MCM_Trig_Functions>
 8001a36:	4603      	mov	r3, r0
 8001a38:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8001a3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a3e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	623b      	str	r3, [r7, #32]
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	13db      	asrs	r3, r3, #15
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	81bb      	strh	r3, [r7, #12]
#endif

  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8001a62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a66:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a74:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	61bb      	str	r3, [r7, #24]
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	13db      	asrs	r3, r3, #15
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	81fb      	strh	r3, [r7, #14]
#endif

  return ( Output );
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	8aba      	ldrh	r2, [r7, #20]
 8001a92:	f362 030f 	bfi	r3, r2, #0, #16
 8001a96:	8afa      	ldrh	r2, [r7, #22]
 8001a98:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ab6:	617b      	str	r3, [r7, #20]
  uhindex = ( uint16_t )shindex;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	827b      	strh	r3, [r7, #18]
  uhindex /= ( uint16_t )64;
 8001abc:	8a7b      	ldrh	r3, [r7, #18]
 8001abe:	099b      	lsrs	r3, r3, #6
 8001ac0:	827b      	strh	r3, [r7, #18]

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001ac2:	8a7b      	ldrh	r3, [r7, #18]
 8001ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001acc:	d04b      	beq.n	8001b66 <MCM_Trig_Functions+0xc2>
 8001ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad2:	d802      	bhi.n	8001ada <MCM_Trig_Functions+0x36>
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d02d      	beq.n	8001b34 <MCM_Trig_Functions+0x90>
    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
      break;
    default:
      break;
 8001ad8:	e05a      	b.n	8001b90 <MCM_Trig_Functions+0xec>
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8001ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ade:	d003      	beq.n	8001ae8 <MCM_Trig_Functions+0x44>
 8001ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ae4:	d011      	beq.n	8001b0a <MCM_Trig_Functions+0x66>
      break;
 8001ae6:	e053      	b.n	8001b90 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001ae8:	8a7b      	ldrh	r3, [r7, #18]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001af0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001af4:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001af6:	8a7b      	ldrh	r3, [r7, #18]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001b02:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b06:	813b      	strh	r3, [r7, #8]
      break;
 8001b08:	e042      	b.n	8001b90 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b0a:	8a7b      	ldrh	r3, [r7, #18]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001b16:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b1a:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001b1c:	8a7b      	ldrh	r3, [r7, #18]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001b24:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	813b      	strh	r3, [r7, #8]
      break;
 8001b32:	e02d      	b.n	8001b90 <MCM_Trig_Functions+0xec>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001b3c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	425b      	negs	r3, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b4a:	8a7b      	ldrh	r3, [r7, #18]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001b56:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	813b      	strh	r3, [r7, #8]
      break;
 8001b64:	e014      	b.n	8001b90 <MCM_Trig_Functions+0xec>
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001b66:	8a7b      	ldrh	r3, [r7, #18]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001b72:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	425b      	negs	r3, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	817b      	strh	r3, [r7, #10]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001b80:	8a7b      	ldrh	r3, [r7, #18]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <MCM_Trig_Functions+0x10c>)
 8001b88:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001b8c:	813b      	strh	r3, [r7, #8]
      break;
 8001b8e:	bf00      	nop
  }
  return ( Local_Components );
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	2300      	movs	r3, #0
 8001b96:	89ba      	ldrh	r2, [r7, #12]
 8001b98:	f362 030f 	bfi	r3, r2, #0, #16
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	0800f57c 	.word	0x0800f57c

08001bb4 <LL_GPIO_LockPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	60fb      	str	r3, [r7, #12]
  (void) temp;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  /* USER CODE END MCboot 0 */

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 8001bf6:	4877      	ldr	r0, [pc, #476]	; (8001dd4 <MCboot+0x1e8>)
 8001bf8:	f00c fa6c 	bl	800e0d4 <STM_Init>

  bMCBootCompleted = 0;
 8001bfc:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <MCboot+0x1ec>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001c02:	4b76      	ldr	r3, [pc, #472]	; (8001ddc <MCboot+0x1f0>)
 8001c04:	4a76      	ldr	r2, [pc, #472]	; (8001de0 <MCboot+0x1f4>)
 8001c06:	601a      	str	r2, [r3, #0]

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001c08:	4b76      	ldr	r3, [pc, #472]	; (8001de4 <MCboot+0x1f8>)
 8001c0a:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <MCboot+0x1fc>)
 8001c0c:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8001c0e:	4876      	ldr	r0, [pc, #472]	; (8001de8 <MCboot+0x1fc>)
 8001c10:	f00a fc16 	bl	800c440 <R3_1_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();
 8001c14:	f009 fcec 	bl	800b5f0 <startTimers>

  /******************************************************/
  /*   PID component initialization: speed regulation   */
  /******************************************************/
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001c18:	4874      	ldr	r0, [pc, #464]	; (8001dec <MCboot+0x200>)
 8001c1a:	f009 fabf 	bl	800b19c <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001c1e:	4b74      	ldr	r3, [pc, #464]	; (8001df0 <MCboot+0x204>)
 8001c20:	4a72      	ldr	r2, [pc, #456]	; (8001dec <MCboot+0x200>)
 8001c22:	601a      	str	r2, [r3, #0]

  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001c24:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <MCboot+0x208>)
 8001c26:	4a74      	ldr	r2, [pc, #464]	; (8001df8 <MCboot+0x20c>)
 8001c28:	601a      	str	r2, [r3, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8001c2a:	4874      	ldr	r0, [pc, #464]	; (8001dfc <MCboot+0x210>)
 8001c2c:	f00d fb74 	bl	800f318 <STO_PLL_Init>

  /******************************************************/
  /*   Speed & torque component initialization          */
  /******************************************************/
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8001c30:	4b70      	ldr	r3, [pc, #448]	; (8001df4 <MCboot+0x208>)
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	4b6e      	ldr	r3, [pc, #440]	; (8001df0 <MCboot+0x204>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a70      	ldr	r2, [pc, #448]	; (8001dfc <MCboot+0x210>)
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f00c f854 	bl	800dce8 <STC_Init>

  /****************************************************/
  /*   Virtual speed sensor component initialization  */
  /****************************************************/
  VSS_Init (&VirtualSpeedSensorM1);
 8001c40:	486f      	ldr	r0, [pc, #444]	; (8001e00 <MCboot+0x214>)
 8001c42:	f00c fe23 	bl	800e88c <VSS_Init>

  /**************************************/
  /*   Rev-up component initialization  */
  /**************************************/
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001c46:	4b6b      	ldr	r3, [pc, #428]	; (8001df4 <MCboot+0x208>)
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <MCboot+0x1f8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <MCboot+0x218>)
 8001c52:	4a6b      	ldr	r2, [pc, #428]	; (8001e00 <MCboot+0x214>)
 8001c54:	486c      	ldr	r0, [pc, #432]	; (8001e08 <MCboot+0x21c>)
 8001c56:	f00d f887 	bl	800ed68 <RUC_Init>

  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 8001c5a:	486c      	ldr	r0, [pc, #432]	; (8001e0c <MCboot+0x220>)
 8001c5c:	f009 fa9e 	bl	800b19c <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001c60:	486b      	ldr	r0, [pc, #428]	; (8001e10 <MCboot+0x224>)
 8001c62:	f009 fa9b 	bl	800b19c <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <MCboot+0x228>)
 8001c68:	4a68      	ldr	r2, [pc, #416]	; (8001e0c <MCboot+0x220>)
 8001c6a:	601a      	str	r2, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <MCboot+0x22c>)
 8001c6e:	4a68      	ldr	r2, [pc, #416]	; (8001e10 <MCboot+0x224>)
 8001c70:	601a      	str	r2, [r3, #0]

  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001c72:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <MCboot+0x230>)
 8001c74:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <MCboot+0x234>)
 8001c76:	601a      	str	r2, [r3, #0]
  RVBS_Init(pBusSensorM1);
 8001c78:	4b68      	ldr	r3, [pc, #416]	; (8001e1c <MCboot+0x230>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f00b fd59 	bl	800d734 <RVBS_Init>

  /*************************************************/
  /*   Power measurement component initialization  */
  /*************************************************/
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001c82:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <MCboot+0x238>)
 8001c84:	4a68      	ldr	r2, [pc, #416]	; (8001e28 <MCboot+0x23c>)
 8001c86:	601a      	str	r2, [r3, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001c88:	4b64      	ldr	r3, [pc, #400]	; (8001e1c <MCboot+0x230>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <MCboot+0x238>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001c94:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <MCboot+0x238>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <MCboot+0x240>)
 8001c9a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);
 8001c9e:	4864      	ldr	r0, [pc, #400]	; (8001e30 <MCboot+0x244>)
 8001ca0:	f009 f9dd 	bl	800b05e <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001ca4:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <MCboot+0x248>)
 8001ca6:	4a62      	ldr	r2, [pc, #392]	; (8001e30 <MCboot+0x244>)
 8001ca8:	601a      	str	r2, [r3, #0]

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001caa:	4b63      	ldr	r3, [pc, #396]	; (8001e38 <MCboot+0x24c>)
 8001cac:	4a63      	ldr	r2, [pc, #396]	; (8001e3c <MCboot+0x250>)
 8001cae:	601a      	str	r2, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8001cb0:	4b61      	ldr	r3, [pc, #388]	; (8001e38 <MCboot+0x24c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f00b fe4d 	bl	800d954 <REMNG_Init>

  FOC_Clear(M1);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f000 fadc 	bl	8002278 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001cc0:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <MCboot+0x240>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001cc8:	4b4a      	ldr	r3, [pc, #296]	; (8001df4 <MCboot+0x208>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4c57      	ldr	r4, [pc, #348]	; (8001e2c <MCboot+0x240>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f00c f9d4 	bl	800e07c <STC_GetDefaultIqdref>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	8222      	strh	r2, [r4, #16]
 8001cda:	f3c3 430f 	ubfx	r3, r3, #16, #16
 8001cde:	8263      	strh	r3, [r4, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001ce0:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <MCboot+0x208>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00c f9c9 	bl	800e07c <STC_GetDefaultIqdref>
 8001cea:	4603      	mov	r3, r0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <MCboot+0x240>)
 8001cf4:	829a      	strh	r2, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 8001cf6:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <MCboot+0x254>)
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <MCboot+0x258>)
 8001cfa:	601a      	str	r2, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <MCboot+0x254>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <MCboot+0x208>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <MCboot+0x240>)
 8001d06:	4933      	ldr	r1, [pc, #204]	; (8001dd4 <MCboot+0x1e8>)
 8001d08:	f7ff fb4e 	bl	80013a8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <MCboot+0x254>)
 8001d0e:	681c      	ldr	r4, [r3, #0]
 8001d10:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <MCboot+0x208>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00c f98b 	bl	800e030 <STC_GetMecSpeedRefUnitDefault>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fb66 	bl	80013f2 <MCI_ExecSpeedRamp>
  STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
  pMCIList[M1] = oMCInterface[M1];
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <MCboot+0x254>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001d2e:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <MCboot+0x204>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <MCboot+0x25c>)
 8001d34:	6013      	str	r3, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <MCboot+0x228>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a43      	ldr	r2, [pc, #268]	; (8001e48 <MCboot+0x25c>)
 8001d3c:	6053      	str	r3, [r2, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <MCboot+0x22c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a41      	ldr	r2, [pc, #260]	; (8001e48 <MCboot+0x25c>)
 8001d44:	6093      	str	r3, [r2, #8]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001d46:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <MCboot+0x25c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MCboot+0x1f8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a3d      	ldr	r2, [pc, #244]	; (8001e48 <MCboot+0x25c>)
 8001d52:	6113      	str	r3, [r2, #16]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8001d54:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <MCboot+0x25c>)
 8001d56:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <MCboot+0x21c>)
 8001d58:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <MCboot+0x25c>)
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <MCboot+0x210>)
 8001d5e:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <MCboot+0x25c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8001d66:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <MCboot+0x25c>)
 8001d68:	4a25      	ldr	r2, [pc, #148]	; (8001e00 <MCboot+0x214>)
 8001d6a:	621a      	str	r2, [r3, #32]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <MCboot+0x208>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a35      	ldr	r2, [pc, #212]	; (8001e48 <MCboot+0x25c>)
 8001d72:	6253      	str	r3, [r2, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 8001d74:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <MCboot+0x25c>)
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <MCboot+0x1e8>)
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001d7a:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <MCboot+0x248>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a32      	ldr	r2, [pc, #200]	; (8001e48 <MCboot+0x25c>)
 8001d80:	62d3      	str	r3, [r2, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <MCboot+0x230>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <MCboot+0x25c>)
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <MCboot+0x25c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <MCboot+0x25c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <MCboot+0x238>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <MCboot+0x25c>)
 8001d9e:	63d3      	str	r3, [r2, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 8001da0:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <MCboot+0x25c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8001da6:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <MCboot+0x25c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44

  MCT[M1].pPosCtrl = MC_NULL;
 8001dac:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <MCboot+0x25c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	649a      	str	r2, [r3, #72]	; 0x48

  MCT[M1].pSCC = MC_NULL;
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <MCboot+0x25c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	64da      	str	r2, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <MCboot+0x25c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	651a      	str	r2, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <MCboot+0x25c>)
 8001dc2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MCboot 2 */

  /* USER CODE END MCboot 2 */

  bMCBootCompleted = 1;
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <MCboot+0x1ec>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000ac8 	.word	0x20000ac8
 8001dd8:	20000716 	.word	0x20000716
 8001ddc:	20000aa4 	.word	0x20000aa4
 8001de0:	200004a4 	.word	0x200004a4
 8001de4:	20000a14 	.word	0x20000a14
 8001de8:	20000250 	.word	0x20000250
 8001dec:	20000120 	.word	0x20000120
 8001df0:	20000a18 	.word	0x20000a18
 8001df4:	20000adc 	.word	0x20000adc
 8001df8:	200001a4 	.word	0x200001a4
 8001dfc:	20000300 	.word	0x20000300
 8001e00:	200002c8 	.word	0x200002c8
 8001e04:	20000428 	.word	0x20000428
 8001e08:	200001d8 	.word	0x200001d8
 8001e0c:	2000014c 	.word	0x2000014c
 8001e10:	20000178 	.word	0x20000178
 8001e14:	20000a1c 	.word	0x20000a1c
 8001e18:	20000ad8 	.word	0x20000ad8
 8001e1c:	20000aa8 	.word	0x20000aa8
 8001e20:	20000464 	.word	0x20000464
 8001e24:	20000ad4 	.word	0x20000ad4
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	20000a28 	.word	0x20000a28
 8001e30:	2000043c 	.word	0x2000043c
 8001e34:	20000a10 	.word	0x20000a10
 8001e38:	20000ad0 	.word	0x20000ad0
 8001e3c:	2000048c 	.word	0x2000048c
 8001e40:	20000a20 	.word	0x20000a20
 8001e44:	20000aac 	.word	0x20000aac
 8001e48:	20000a50 	.word	0x20000a50

08001e4c <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task.
 */
__weak void MC_RunMotorControlTasks(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  if ( bMCBootCompleted ) {
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <MC_RunMotorControlTasks+0x1c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <MC_RunMotorControlTasks+0x18>
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 8001e58:	f000 f808 	bl	8001e6c <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 8001e5c:	f000 fc50 	bl	8002700 <TSK_SafetyTask>

    /* ** User Interface Task ** */
    UI_Scheduler();
 8001e60:	f002 faf0 	bl	8004444 <UI_Scheduler>
  }
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000716 	.word	0x20000716

08001e6c <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance.
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (bMCBootCompleted == 1)
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <MC_Scheduler+0x64>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d129      	bne.n	8001ecc <MC_Scheduler+0x60>
  {
    if(hMFTaskCounterM1 > 0u)
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <MC_Scheduler+0x68>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <MC_Scheduler+0x26>
    {
      hMFTaskCounterM1--;
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MC_Scheduler+0x68>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MC_Scheduler+0x68>)
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	e004      	b.n	8001e9c <MC_Scheduler+0x30>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 8001e92:	f000 f825 	bl	8001ee0 <TSK_MediumFrequencyTaskM1>
      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MC_Scheduler+0x68>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0u)
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MC_Scheduler+0x6c>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d006      	beq.n	8001eb4 <MC_Scheduler+0x48>
    {
      hBootCapDelayCounterM1--;
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MC_Scheduler+0x6c>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MC_Scheduler+0x6c>)
 8001eb2:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0u)
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MC_Scheduler+0x70>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <MC_Scheduler+0x60>
    {
      hStopPermanencyCounterM1--;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <MC_Scheduler+0x70>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	4b04      	ldr	r3, [pc, #16]	; (8001edc <MC_Scheduler+0x70>)
 8001eca:	801a      	strh	r2, [r3, #0]
  {
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000716 	.word	0x20000716
 8001ed4:	20000710 	.word	0x20000710
 8001ed8:	20000712 	.word	0x20000712
 8001edc:	20000714 	.word	0x20000714

08001ee0 <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic
  * execution at a medium frequency rate (such as the speed controller for instance)
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  State_t StateM1;
  int16_t wAux = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	827b      	strh	r3, [r7, #18]

  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8001eea:	f107 0312 	add.w	r3, r7, #18
 8001eee:	4619      	mov	r1, r3
 8001ef0:	48c2      	ldr	r0, [pc, #776]	; (80021fc <TSK_MediumFrequencyTaskM1+0x31c>)
 8001ef2:	f00d f919 	bl	800f128 <STO_PLL_CalcAvrgMecSpeedUnit>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	75bb      	strb	r3, [r7, #22]
  PQD_CalcElMotorPower( pMPM[M1] );
 8001efa:	4bc1      	ldr	r3, [pc, #772]	; (8002200 <TSK_MediumFrequencyTaskM1+0x320>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f009 fa78 	bl	800b3f4 <PQD_CalcElMotorPower>

  StateM1 = STM_GetState( &STM[M1] );
 8001f04:	48bf      	ldr	r0, [pc, #764]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 8001f06:	f00c fa99 	bl	800e43c <STM_GetState>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	757b      	strb	r3, [r7, #21]

  switch ( StateM1 )
 8001f0e:	7d7b      	ldrb	r3, [r7, #21]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	f200 8196 	bhi.w	8002244 <TSK_MediumFrequencyTaskM1+0x364>
 8001f18:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <TSK_MediumFrequencyTaskM1+0x40>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f65 	.word	0x08001f65
 8001f24:	0800200f 	.word	0x0800200f
 8001f28:	0800215d 	.word	0x0800215d
 8001f2c:	08002193 	.word	0x08002193
 8001f30:	080021bb 	.word	0x080021bb
 8001f34:	080021e7 	.word	0x080021e7
 8001f38:	08002229 	.word	0x08002229
 8001f3c:	08002245 	.word	0x08002245
 8001f40:	08002245 	.word	0x08002245
 8001f44:	08002245 	.word	0x08002245
 8001f48:	08002245 	.word	0x08002245
 8001f4c:	08002245 	.word	0x08002245
 8001f50:	08002245 	.word	0x08002245
 8001f54:	08001f93 	.word	0x08001f93
 8001f58:	08001fb5 	.word	0x08001fb5
 8001f5c:	08001fd3 	.word	0x08001fd3
 8001f60:	080020e1 	.word	0x080020e1
  {
  case IDLE_START:
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8001f64:	4ba8      	ldr	r3, [pc, #672]	; (8002208 <TSK_MediumFrequencyTaskM1+0x328>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fb58 	bl	800161e <MCI_GetImposedMotorDirection>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4619      	mov	r1, r3
 8001f72:	48a6      	ldr	r0, [pc, #664]	; (800220c <TSK_MediumFrequencyTaskM1+0x32c>)
 8001f74:	f00c ff36 	bl	800ede4 <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8001f78:	4ba5      	ldr	r3, [pc, #660]	; (8002210 <TSK_MediumFrequencyTaskM1+0x330>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00a ff08 	bl	800cd92 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001f82:	2014      	movs	r0, #20
 8001f84:	f000 fa56 	bl	8002434 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001f88:	2110      	movs	r1, #16
 8001f8a:	489e      	ldr	r0, [pc, #632]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 8001f8c:	f00c f8b6 	bl	800e0fc <STM_NextState>
    break;
 8001f90:	e167      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>

  case CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001f92:	f000 fa5f 	bl	8002454 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8155 	beq.w	8002248 <TSK_MediumFrequencyTaskM1+0x368>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001f9e:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <TSK_MediumFrequencyTaskM1+0x330>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f009 fdb5 	bl	800bb14 <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Charge BootCap elapsed */

      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001faa:	2111      	movs	r1, #17
 8001fac:	4895      	ldr	r0, [pc, #596]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 8001fae:	f00c f8a5 	bl	800e0fc <STM_NextState>
    }
    break;
 8001fb2:	e149      	b.n	8002248 <TSK_MediumFrequencyTaskM1+0x368>

  case OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001fb4:	4b96      	ldr	r3, [pc, #600]	; (8002210 <TSK_MediumFrequencyTaskM1+0x330>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f009 fdaa 	bl	800bb14 <PWMC_CurrentReadingCalibr>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8142 	beq.w	800224c <TSK_MediumFrequencyTaskM1+0x36c>
    {
      STM_NextState( &STM[M1], CLEAR );
 8001fc8:	2112      	movs	r1, #18
 8001fca:	488e      	ldr	r0, [pc, #568]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 8001fcc:	f00c f896 	bl	800e0fc <STM_NextState>
    }
    break;
 8001fd0:	e13c      	b.n	800224c <TSK_MediumFrequencyTaskM1+0x36c>

  case CLEAR:
    /* In a sensorless configuration. Initiate the Revup procedure */
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001fd2:	4b90      	ldr	r3, [pc, #576]	; (8002214 <TSK_MediumFrequencyTaskM1+0x334>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001fda:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <TSK_MediumFrequencyTaskM1+0x338>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	498f      	ldr	r1, [pc, #572]	; (800221c <TSK_MediumFrequencyTaskM1+0x33c>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00b fead 	bl	800dd40 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001fe6:	4885      	ldr	r0, [pc, #532]	; (80021fc <TSK_MediumFrequencyTaskM1+0x31c>)
 8001fe8:	f00d f968 	bl	800f2bc <STO_PLL_Clear>

    if ( STM_NextState( &STM[M1], START ) == true )
 8001fec:	2104      	movs	r1, #4
 8001fee:	4885      	ldr	r0, [pc, #532]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 8001ff0:	f00c f884 	bl	800e0fc <STM_NextState>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 812a 	beq.w	8002250 <TSK_MediumFrequencyTaskM1+0x370>
    {
      FOC_Clear( M1 );
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f000 f93b 	bl	8002278 <FOC_Clear>

      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8002002:	4b83      	ldr	r3, [pc, #524]	; (8002210 <TSK_MediumFrequencyTaskM1+0x330>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f00a ff19 	bl	800ce3e <R3_1_SwitchOnPWM>
    }
    break;
 800200c:	e120      	b.n	8002250 <TSK_MediumFrequencyTaskM1+0x370>
    {

      /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
      int16_t hForcedMecSpeedUnit;
      qd_t IqdRef;
      bool ObserverConverged = false;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]

      /* Execute the Rev Up procedure */
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8002012:	487e      	ldr	r0, [pc, #504]	; (800220c <TSK_MediumFrequencyTaskM1+0x32c>)
 8002014:	f00c ff2e 	bl	800ee74 <RUC_Exec>
 8002018:	4603      	mov	r3, r0
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <TSK_MediumFrequencyTaskM1+0x150>
      {
        /* The time allowed for the startup sequence has expired */
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8002024:	2200      	movs	r2, #0
 8002026:	2110      	movs	r1, #16
 8002028:	4876      	ldr	r0, [pc, #472]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 800202a:	f00c f9c9 	bl	800e3c0 <STM_FaultProcessing>
 800202e:	e010      	b.n	8002052 <TSK_MediumFrequencyTaskM1+0x172>
      }
      else
      {
        /* Execute the torque open loop current start-up ramp:
         * Compute the Iq reference current as configured in the Rev Up sequence */
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8002030:	4b79      	ldr	r3, [pc, #484]	; (8002218 <TSK_MediumFrequencyTaskM1+0x338>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f00b ff93 	bl	800df60 <STC_CalcTorqueReference>
 800203a:	4603      	mov	r3, r0
 800203c:	81bb      	strh	r3, [r7, #12]
        IqdRef.d = FOCVars[M1].UserIdref;
 800203e:	4b75      	ldr	r3, [pc, #468]	; (8002214 <TSK_MediumFrequencyTaskM1+0x334>)
 8002040:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002044:	81fb      	strh	r3, [r7, #14]
        /* Iqd reference current used by the High Frequency Loop to generate the PWM output */
        FOCVars[M1].Iqdref = IqdRef;
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <TSK_MediumFrequencyTaskM1+0x334>)
 8002048:	3310      	adds	r3, #16
 800204a:	f107 020c 	add.w	r2, r7, #12
 800204e:	6810      	ldr	r0, [r2, #0]
 8002050:	6018      	str	r0, [r3, #0]
      }

      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	4619      	mov	r1, r3
 8002058:	4870      	ldr	r0, [pc, #448]	; (800221c <TSK_MediumFrequencyTaskM1+0x33c>)
 800205a:	f00c fd18 	bl	800ea8e <VSS_CalcAvrgMecSpeedUnit>

      /* check that startup stage where the observer has to be used has been reached */
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 800205e:	486b      	ldr	r0, [pc, #428]	; (800220c <TSK_MediumFrequencyTaskM1+0x32c>)
 8002060:	f00c ff42 	bl	800eee8 <RUC_FirstAccelerationStageReached>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <TSK_MediumFrequencyTaskM1+0x1a4>
      {
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 800206a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800206e:	4619      	mov	r1, r3
 8002070:	4862      	ldr	r0, [pc, #392]	; (80021fc <TSK_MediumFrequencyTaskM1+0x31c>)
 8002072:	f00d f98b 	bl	800f38c <STO_PLL_IsObserverConverged>
 8002076:	4603      	mov	r3, r0
 8002078:	75fb      	strb	r3, [r7, #23]
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	4619      	mov	r1, r3
 800207e:	4867      	ldr	r0, [pc, #412]	; (800221c <TSK_MediumFrequencyTaskM1+0x33c>)
 8002080:	f00c fe40 	bl	800ed04 <VSS_SetStartTransition>
      }

      if ( ObserverConverged )
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80e4 	beq.w	8002254 <TSK_MediumFrequencyTaskM1+0x374>
      {
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800208c:	485b      	ldr	r0, [pc, #364]	; (80021fc <TSK_MediumFrequencyTaskM1+0x31c>)
 800208e:	f00b fd7c 	bl	800db8a <SPD_GetElAngle>
 8002092:	4603      	mov	r3, r0
 8002094:	4619      	mov	r1, r3
 8002096:	4b5f      	ldr	r3, [pc, #380]	; (8002214 <TSK_MediumFrequencyTaskM1+0x334>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	461a      	mov	r2, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f7ff fc46 	bl	8001930 <MCM_Park>
 80020a4:	4603      	mov	r3, r0
 80020a6:	60bb      	str	r3, [r7, #8]

        /* Start switch over ramp. This ramp will transition from the revup to the closed loop FOC. */
        REMNG_Init( pREMNG[M1] );
 80020a8:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <TSK_MediumFrequencyTaskM1+0x340>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00b fc51 	bl	800d954 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 80020b2:	4b5b      	ldr	r3, [pc, #364]	; (8002220 <TSK_MediumFrequencyTaskM1+0x340>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	4b57      	ldr	r3, [pc, #348]	; (8002214 <TSK_MediumFrequencyTaskM1+0x334>)
 80020b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020bc:	2200      	movs	r2, #0
 80020be:	4619      	mov	r1, r3
 80020c0:	f00b fc96 	bl	800d9f0 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 80020c4:	4b56      	ldr	r3, [pc, #344]	; (8002220 <TSK_MediumFrequencyTaskM1+0x340>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80020cc:	4611      	mov	r1, r2
 80020ce:	2232      	movs	r2, #50	; 0x32
 80020d0:	4618      	mov	r0, r3
 80020d2:	f00b fc8d 	bl	800d9f0 <REMNG_ExecRamp>

        STM_NextState( &STM[M1], SWITCH_OVER );
 80020d6:	2113      	movs	r1, #19
 80020d8:	484a      	ldr	r0, [pc, #296]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 80020da:	f00c f80f 	bl	800e0fc <STM_NextState>
      }
    }
    break;
 80020de:	e0b9      	b.n	8002254 <TSK_MediumFrequencyTaskM1+0x374>
  case SWITCH_OVER:
    {
      bool LoopClosed;
      int16_t hForcedMecSpeedUnit;

      if( ! RUC_Exec( &RevUpControlM1 ) )
 80020e0:	484a      	ldr	r0, [pc, #296]	; (800220c <TSK_MediumFrequencyTaskM1+0x32c>)
 80020e2:	f00c fec7 	bl	800ee74 <RUC_Exec>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f083 0301 	eor.w	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <TSK_MediumFrequencyTaskM1+0x21e>
      {
          /* The time allowed for the startup sequence has expired */
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 80020f2:	2200      	movs	r2, #0
 80020f4:	2110      	movs	r1, #16
 80020f6:	4843      	ldr	r0, [pc, #268]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 80020f8:	f00c f962 	bl	800e3c0 <STM_FaultProcessing>
          STM_NextState( &STM[M1], START_RUN );
        }
      }
    }

    break;
 80020fc:	e0ac      	b.n	8002258 <TSK_MediumFrequencyTaskM1+0x378>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 80020fe:	1dbb      	adds	r3, r7, #6
 8002100:	4619      	mov	r1, r3
 8002102:	4846      	ldr	r0, [pc, #280]	; (800221c <TSK_MediumFrequencyTaskM1+0x33c>)
 8002104:	f00c fcc3 	bl	800ea8e <VSS_CalcAvrgMecSpeedUnit>
 8002108:	4603      	mov	r3, r0
 800210a:	753b      	strb	r3, [r7, #20]
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 800210c:	4843      	ldr	r0, [pc, #268]	; (800221c <TSK_MediumFrequencyTaskM1+0x33c>)
 800210e:	f00c fe1d 	bl	800ed4c <VSS_TransitionEnded>
 8002112:	4603      	mov	r3, r0
 8002114:	461a      	mov	r2, r3
 8002116:	7d3b      	ldrb	r3, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf14      	ite	ne
 8002120:	2301      	movne	r3, #1
 8002122:	2300      	moveq	r3, #0
 8002124:	753b      	strb	r3, [r7, #20]
        if ( LoopClosed == true )
 8002126:	7d3b      	ldrb	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8095 	beq.w	8002258 <TSK_MediumFrequencyTaskM1+0x378>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <TSK_MediumFrequencyTaskM1+0x344>)
 8002130:	681c      	ldr	r4, [r3, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <TSK_MediumFrequencyTaskM1+0x334>)
 8002134:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002138:	461d      	mov	r5, r3
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <TSK_MediumFrequencyTaskM1+0x344>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f009 f89d 	bl	800b27e <PID_GetKIDivisor>
 8002144:	4603      	mov	r3, r0
 8002146:	fb03 f305 	mul.w	r3, r3, r5
          PID_SetIntegralTerm( pPIDSpeed[M1],
 800214a:	4619      	mov	r1, r3
 800214c:	4620      	mov	r0, r4
 800214e:	f009 f87c 	bl	800b24a <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8002152:	2105      	movs	r1, #5
 8002154:	482b      	ldr	r0, [pc, #172]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 8002156:	f00b ffd1 	bl	800e0fc <STM_NextState>
    break;
 800215a:	e07d      	b.n	8002258 <TSK_MediumFrequencyTaskM1+0x378>

  case START_RUN:
 /* only for sensor-less control */
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <TSK_MediumFrequencyTaskM1+0x338>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4926      	ldr	r1, [pc, #152]	; (80021fc <TSK_MediumFrequencyTaskM1+0x31c>)
 8002162:	4618      	mov	r0, r3
 8002164:	f00b fdec 	bl	800dd40 <STC_SetSpeedSensor>
    {
      /* USER CODE BEGIN MediumFrequencyTask M1 1 */

      /* USER CODE END MediumFrequencyTask M1 1 */
	  FOC_InitAdditionalMethods(M1);
 8002168:	2000      	movs	r0, #0
 800216a:	f000 f91b 	bl	80023a4 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 800216e:	2000      	movs	r0, #0
 8002170:	f000 f924 	bl	80023bc <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002174:	2106      	movs	r1, #6
 8002176:	4823      	ldr	r0, [pc, #140]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 8002178:	f00b ffc0 	bl	800e0fc <STM_NextState>
    }
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 800217c:	4b26      	ldr	r3, [pc, #152]	; (8002218 <TSK_MediumFrequencyTaskM1+0x338>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f00b ff96 	bl	800e0b2 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <TSK_MediumFrequencyTaskM1+0x328>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f9ca 	bl	8001524 <MCI_ExecBufferedCommands>

    break;
 8002190:	e067      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
  case RUN:
    /* USER CODE BEGIN MediumFrequencyTask M1 2 */

    /* USER CODE END MediumFrequencyTask M1 2 */

    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <TSK_MediumFrequencyTaskM1+0x328>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f9c4 	bl	8001524 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800219c:	2000      	movs	r0, #0
 800219e:	f000 f90d 	bl	80023bc <FOC_CalcCurrRef>

    if( !IsSpeedReliable )
 80021a2:	7dbb      	ldrb	r3, [r7, #22]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d056      	beq.n	800225c <TSK_MediumFrequencyTaskM1+0x37c>
    {
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80021ae:	2200      	movs	r2, #0
 80021b0:	2120      	movs	r1, #32
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 80021b4:	f00c f904 	bl	800e3c0 <STM_FaultProcessing>
    }

    /* USER CODE BEGIN MediumFrequencyTask M1 3 */

    /* USER CODE END MediumFrequencyTask M1 3 */
    break;
 80021b8:	e050      	b.n	800225c <TSK_MediumFrequencyTaskM1+0x37c>

  case ANY_STOP:
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <TSK_MediumFrequencyTaskM1+0x330>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a fede 	bl	800cf80 <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 f857 	bl	8002278 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <TSK_MediumFrequencyTaskM1+0x320>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f008 fead 	bl	800af2e <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80021d4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021d8:	f000 f952 	bl	8002480 <TSK_SetStopPermanencyTimeM1>

    /* USER CODE BEGIN MediumFrequencyTask M1 4 */

    /* USER CODE END MediumFrequencyTask M1 4 */

    STM_NextState( &STM[M1], STOP );
 80021dc:	2108      	movs	r1, #8
 80021de:	4809      	ldr	r0, [pc, #36]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 80021e0:	f00b ff8c 	bl	800e0fc <STM_NextState>
    break;
 80021e4:	e03d      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>

  case STOP:
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80021e6:	f000 f95b 	bl	80024a0 <TSK_StopPermanencyTimeHasElapsedM1>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d037      	beq.n	8002260 <TSK_MediumFrequencyTaskM1+0x380>
    {
      STM_NextState( &STM[M1], STOP_IDLE );
 80021f0:	2109      	movs	r1, #9
 80021f2:	4804      	ldr	r0, [pc, #16]	; (8002204 <TSK_MediumFrequencyTaskM1+0x324>)
 80021f4:	f00b ff82 	bl	800e0fc <STM_NextState>
    }
    break;
 80021f8:	e032      	b.n	8002260 <TSK_MediumFrequencyTaskM1+0x380>
 80021fa:	bf00      	nop
 80021fc:	20000300 	.word	0x20000300
 8002200:	20000ad4 	.word	0x20000ad4
 8002204:	20000ac8 	.word	0x20000ac8
 8002208:	20000a20 	.word	0x20000a20
 800220c:	200001d8 	.word	0x200001d8
 8002210:	20000a14 	.word	0x20000a14
 8002214:	20000a28 	.word	0x20000a28
 8002218:	20000adc 	.word	0x20000adc
 800221c:	200002c8 	.word	0x200002c8
 8002220:	20000ad0 	.word	0x20000ad0
 8002224:	20000a18 	.word	0x20000a18

  case STOP_IDLE:
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <TSK_MediumFrequencyTaskM1+0x38c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4910      	ldr	r1, [pc, #64]	; (8002270 <TSK_MediumFrequencyTaskM1+0x390>)
 800222e:	4618      	mov	r0, r3
 8002230:	f00b fd86 	bl	800dd40 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8002234:	480e      	ldr	r0, [pc, #56]	; (8002270 <TSK_MediumFrequencyTaskM1+0x390>)
 8002236:	f00c fb34 	bl	800e8a2 <VSS_Clear>

    /* USER CODE BEGIN MediumFrequencyTask M1 5 */

    /* USER CODE END MediumFrequencyTask M1 5 */
    STM_NextState( &STM[M1], IDLE );
 800223a:	2100      	movs	r1, #0
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <TSK_MediumFrequencyTaskM1+0x394>)
 800223e:	f00b ff5d 	bl	800e0fc <STM_NextState>
    break;
 8002242:	e00e      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>

  default:
    break;
 8002244:	bf00      	nop
 8002246:	e00c      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 8002248:	bf00      	nop
 800224a:	e00a      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 800224c:	bf00      	nop
 800224e:	e008      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 8002250:	bf00      	nop
 8002252:	e006      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 8002254:	bf00      	nop
 8002256:	e004      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 8002258:	bf00      	nop
 800225a:	e002      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 800225c:	bf00      	nop
 800225e:	e000      	b.n	8002262 <TSK_MediumFrequencyTaskM1+0x382>
    break;
 8002260:	bf00      	nop
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bdb0      	pop	{r4, r5, r7, pc}
 800226a:	bf00      	nop
 800226c:	20000adc 	.word	0x20000adc
 8002270:	200002c8 	.word	0x200002c8
 8002274:	20000ac8 	.word	0x20000ac8

08002278 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
 8002282:	2300      	movs	r3, #0
 8002284:	82bb      	strh	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
 800228a:	2300      	movs	r3, #0
 800228c:	823b      	strh	r3, [r7, #16]
 800228e:	2300      	movs	r3, #0
 8002290:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
 8002292:	2300      	movs	r3, #0
 8002294:	81bb      	strh	r3, [r7, #12]
 8002296:	2300      	movs	r3, #0
 8002298:	81fb      	strh	r3, [r7, #14]

  FOCVars[bMotor].Iab = NULL_ab;
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4a3c      	ldr	r2, [pc, #240]	; (8002390 <FOC_Clear+0x118>)
 800229e:	2126      	movs	r1, #38	; 0x26
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	461a      	mov	r2, r3
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	4a37      	ldr	r2, [pc, #220]	; (8002390 <FOC_Clear+0x118>)
 80022b4:	2126      	movs	r1, #38	; 0x26
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	461a      	mov	r2, r3
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	4a31      	ldr	r2, [pc, #196]	; (8002390 <FOC_Clear+0x118>)
 80022cc:	2126      	movs	r1, #38	; 0x26
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	330c      	adds	r3, #12
 80022d6:	461a      	mov	r2, r3
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqdref = NULL_qd;
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <FOC_Clear+0x118>)
 80022e4:	2126      	movs	r1, #38	; 0x26
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3310      	adds	r3, #16
 80022ee:	461a      	mov	r2, r3
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].hTeref = (int16_t)0;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4a25      	ldr	r2, [pc, #148]	; (8002390 <FOC_Clear+0x118>)
 80022fc:	2126      	movs	r1, #38	; 0x26
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	331e      	adds	r3, #30
 8002306:	2200      	movs	r2, #0
 8002308:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <FOC_Clear+0x118>)
 800230e:	2126      	movs	r1, #38	; 0x26
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3310      	adds	r3, #16
 8002318:	3306      	adds	r3, #6
 800231a:	f107 0210 	add.w	r2, r7, #16
 800231e:	6810      	ldr	r0, [r2, #0]
 8002320:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <FOC_Clear+0x118>)
 8002326:	2126      	movs	r1, #38	; 0x26
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3318      	adds	r3, #24
 8002330:	3302      	adds	r3, #2
 8002332:	f107 020c 	add.w	r2, r7, #12
 8002336:	6810      	ldr	r0, [r2, #0]
 8002338:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <FOC_Clear+0x118>)
 800233e:	2126      	movs	r1, #38	; 0x26
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	3320      	adds	r3, #32
 8002348:	2200      	movs	r2, #0
 800234a:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <FOC_Clear+0x11c>)
 8002350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f008 ff77 	bl	800b24a <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <FOC_Clear+0x120>)
 8002360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f008 ff6f 	bl	800b24a <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4a0b      	ldr	r2, [pc, #44]	; (800239c <FOC_Clear+0x124>)
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	4618      	mov	r0, r3
 8002376:	f00b fcfd 	bl	800dd74 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	4a08      	ldr	r2, [pc, #32]	; (80023a0 <FOC_Clear+0x128>)
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	4618      	mov	r0, r3
 8002384:	f009 fbba 	bl	800bafc <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002388:	bf00      	nop
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000a28 	.word	0x20000a28
 8002394:	20000a1c 	.word	0x20000a1c
 8002398:	20000ad8 	.word	0x20000ad8
 800239c:	20000adc 	.word	0x20000adc
 80023a0:	20000a14 	.word	0x20000a14

080023a4 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4a18      	ldr	r2, [pc, #96]	; (800242c <FOC_CalcCurrRef+0x70>)
 80023ca:	2126      	movs	r1, #38	; 0x26
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3324      	adds	r3, #36	; 0x24
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d123      	bne.n	8002422 <FOC_CalcCurrRef+0x66>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <FOC_CalcCurrRef+0x74>)
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	79fc      	ldrb	r4, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00b fdbb 	bl	800df60 <STC_CalcTorqueReference>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4619      	mov	r1, r3
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <FOC_CalcCurrRef+0x70>)
 80023f0:	2326      	movs	r3, #38	; 0x26
 80023f2:	fb03 f304 	mul.w	r3, r3, r4
 80023f6:	4413      	add	r3, r2
 80023f8:	331e      	adds	r3, #30
 80023fa:	460a      	mov	r2, r1
 80023fc:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80023fe:	79fa      	ldrb	r2, [r7, #7]
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	490a      	ldr	r1, [pc, #40]	; (800242c <FOC_CalcCurrRef+0x70>)
 8002404:	2026      	movs	r0, #38	; 0x26
 8002406:	fb00 f202 	mul.w	r2, r0, r2
 800240a:	440a      	add	r2, r1
 800240c:	321e      	adds	r2, #30
 800240e:	f9b2 0000 	ldrsh.w	r0, [r2]
 8002412:	4a06      	ldr	r2, [pc, #24]	; (800242c <FOC_CalcCurrRef+0x70>)
 8002414:	2126      	movs	r1, #38	; 0x26
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3310      	adds	r3, #16
 800241e:	4602      	mov	r2, r0
 8002420:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bd90      	pop	{r4, r7, pc}
 800242a:	bf00      	nop
 800242c:	20000a28 	.word	0x20000a28
 8002430:	20000adc 	.word	0x20000adc

08002434 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 800243e:	4a04      	ldr	r2, [pc, #16]	; (8002450 <TSK_SetChargeBootCapDelayM1+0x1c>)
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	8013      	strh	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	20000712 	.word	0x20000712

08002454 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
  bool retVal = false;
 800245a:	2300      	movs	r3, #0
 800245c:	71fb      	strb	r3, [r7, #7]
  if (hBootCapDelayCounterM1 == 0)
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 8002468:	2301      	movs	r3, #1
 800246a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 800246c:	79fb      	ldrb	r3, [r7, #7]
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	20000712 	.word	0x20000712

08002480 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <TSK_SetStopPermanencyTimeM1+0x1c>)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	8013      	strh	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	20000714 	.word	0x20000714

080024a0 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  bool retVal = false;
 80024a6:	2300      	movs	r3, #0
 80024a8:	71fb      	strb	r3, [r7, #7]
  if (hStopPermanencyCounterM1 == 0)
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 80024b4:	2301      	movs	r3, #1
 80024b6:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000714 	.word	0x20000714

080024cc <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
  uint16_t hFOCreturn;

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 80024d6:	4a35      	ldr	r2, [pc, #212]	; (80025ac <TSK_HighFrequencyTask+0xe0>)
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	321a      	adds	r2, #26
 80024dc:	6810      	ldr	r0, [r2, #0]
 80024de:	6018      	str	r0, [r3, #0]
  if ( STM[M1].bState == SWITCH_OVER )
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <TSK_HighFrequencyTask+0xe4>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b13      	cmp	r3, #19
 80024e6:	d113      	bne.n	8002510 <TSK_HighFrequencyTask+0x44>
  {
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <TSK_HighFrequencyTask+0xe8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f00b fb09 	bl	800db04 <REMNG_RampCompleted>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f083 0301 	eor.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <TSK_HighFrequencyTask+0x44>
    {
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <TSK_HighFrequencyTask+0xe8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f00b fa3f 	bl	800d986 <REMNG_Calc>
 8002508:	4603      	mov	r3, r0
 800250a:	b21a      	sxth	r2, r3
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <TSK_HighFrequencyTask+0xe0>)
 800250e:	821a      	strh	r2, [r3, #16]
    }
  }
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8002510:	f000 f85a 	bl	80025c8 <FOC_CurrControllerM1>
 8002514:	4603      	mov	r3, r0
 8002516:	82bb      	strh	r3, [r7, #20]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_FOC_DURATION)
 8002518:	8abb      	ldrh	r3, [r7, #20]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d105      	bne.n	800252a <TSK_HighFrequencyTask+0x5e>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2101      	movs	r1, #1
 8002522:	4823      	ldr	r0, [pc, #140]	; (80025b0 <TSK_HighFrequencyTask+0xe4>)
 8002524:	f00b ff4c 	bl	800e3c0 <STM_FaultProcessing>
 8002528:	e03a      	b.n	80025a0 <TSK_HighFrequencyTask+0xd4>
  }
  else
  {
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800252a:	4823      	ldr	r0, [pc, #140]	; (80025b8 <TSK_HighFrequencyTask+0xec>)
 800252c:	f00c fcdc 	bl	800eee8 <RUC_FirstAccelerationStageReached>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <TSK_HighFrequencyTask+0xe0>)
 8002536:	f107 0308 	add.w	r3, r7, #8
 800253a:	3204      	adds	r2, #4
 800253c:	6810      	ldr	r0, [r2, #0]
 800253e:	6018      	str	r0, [r3, #0]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <TSK_HighFrequencyTask+0xf0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f008 fbe3 	bl	800ad10 <VBS_GetAvBusVoltage_d>
 800254a:	4603      	mov	r3, r0
 800254c:	81bb      	strh	r3, [r7, #12]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	4619      	mov	r1, r3
 8002552:	481b      	ldr	r0, [pc, #108]	; (80025c0 <TSK_HighFrequencyTask+0xf4>)
 8002554:	f00c fcfe 	bl	800ef54 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002558:	4819      	ldr	r0, [pc, #100]	; (80025c0 <TSK_HighFrequencyTask+0xf4>)
 800255a:	f00c fe85 	bl	800f268 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	f083 0301 	eor.w	r3, r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <TSK_HighFrequencyTask+0xa4>
    {
      STO_ResetPLL(&STO_PLL_M1);
 800256a:	4815      	ldr	r0, [pc, #84]	; (80025c0 <TSK_HighFrequencyTask+0xf4>)
 800256c:	f00c ffb2 	bl	800f4d4 <STO_ResetPLL>
    }
    hState = STM_GetState(&STM[M1]);
 8002570:	480f      	ldr	r0, [pc, #60]	; (80025b0 <TSK_HighFrequencyTask+0xe4>)
 8002572:	f00b ff63 	bl	800e43c <STM_GetState>
 8002576:	4603      	mov	r3, r0
 8002578:	823b      	strh	r3, [r7, #16]
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 800257a:	8a3b      	ldrh	r3, [r7, #16]
 800257c:	2b04      	cmp	r3, #4
 800257e:	d005      	beq.n	800258c <TSK_HighFrequencyTask+0xc0>
 8002580:	8a3b      	ldrh	r3, [r7, #16]
 8002582:	2b13      	cmp	r3, #19
 8002584:	d002      	beq.n	800258c <TSK_HighFrequencyTask+0xc0>
 8002586:	8a3b      	ldrh	r3, [r7, #16]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d109      	bne.n	80025a0 <TSK_HighFrequencyTask+0xd4>
    {
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800258c:	480c      	ldr	r0, [pc, #48]	; (80025c0 <TSK_HighFrequencyTask+0xf4>)
 800258e:	f00b fafc 	bl	800db8a <SPD_GetElAngle>
 8002592:	4603      	mov	r3, r0
 8002594:	807b      	strh	r3, [r7, #2]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8002596:	1cbb      	adds	r3, r7, #2
 8002598:	4619      	mov	r1, r3
 800259a:	480a      	ldr	r0, [pc, #40]	; (80025c4 <TSK_HighFrequencyTask+0xf8>)
 800259c:	f00c f9c1 	bl	800e922 <VSS_CalcElAngle>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000a28 	.word	0x20000a28
 80025b0:	20000ac8 	.word	0x20000ac8
 80025b4:	20000ad0 	.word	0x20000ad0
 80025b8:	200001d8 	.word	0x200001d8
 80025bc:	20000aa8 	.word	0x20000aa8
 80025c0:	20000300 	.word	0x20000300
 80025c4:	200002c8 	.word	0x200002c8

080025c8 <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_FOC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80025ce:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <FOC_CurrControllerM1+0x120>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00b fbc2 	bl	800dd5c <STC_GetSpeedSensor>
 80025d8:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 80025da:	69f8      	ldr	r0, [r7, #28]
 80025dc:	f00b fad5 	bl	800db8a <SPD_GetElAngle>
 80025e0:	4603      	mov	r3, r0
 80025e2:	837b      	strh	r3, [r7, #26]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 80025e4:	69f8      	ldr	r0, [r7, #28]
 80025e6:	f00b faea 	bl	800dbbe <SPD_GetInstElSpeedDpp>
 80025ea:	2300      	movs	r3, #0
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	4413      	add	r3, r2
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <FOC_CurrControllerM1+0x124>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f107 020c 	add.w	r2, r7, #12
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f009 f864 	bl	800b6ce <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff f948 	bl	800189c <MCM_Clarke>
 800260c:	4603      	mov	r3, r0
 800260e:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002610:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002614:	4619      	mov	r1, r3
 8002616:	68b8      	ldr	r0, [r7, #8]
 8002618:	f7ff f98a 	bl	8001930 <MCM_Park>
 800261c:	4603      	mov	r3, r0
 800261e:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002620:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <FOC_CurrControllerM1+0x128>)
 8002622:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002624:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 8002626:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800262a:	4619      	mov	r1, r3
 800262c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 8002630:	1acb      	subs	r3, r1, r3
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f008 fe4b 	bl	800b2d0 <PI_Controller>
 800263a:	4603      	mov	r3, r0
 800263c:	823b      	strh	r3, [r7, #16]

  Vqd.d = PI_Controller(pPIDId[M1],
 800263e:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <FOC_CurrControllerM1+0x130>)
 8002640:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 8002644:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002648:	4619      	mov	r1, r3
 800264a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  Vqd.d = PI_Controller(pPIDId[M1],
 800264e:	1acb      	subs	r3, r1, r3
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f008 fe3c 	bl	800b2d0 <PI_Controller>
 8002658:	4603      	mov	r3, r0
 800265a:	827b      	strh	r3, [r7, #18]

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <FOC_CurrControllerM1+0x134>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6939      	ldr	r1, [r7, #16]
 8002662:	4618      	mov	r0, r3
 8002664:	f008 fb79 	bl	800ad5a <Circle_Limitation>
 8002668:	4603      	mov	r3, r0
 800266a:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800266c:	69f8      	ldr	r0, [r7, #28]
 800266e:	f00b faa6 	bl	800dbbe <SPD_GetInstElSpeedDpp>
 8002672:	2300      	movs	r3, #0
 8002674:	b29a      	uxth	r2, r3
 8002676:	8b7b      	ldrh	r3, [r7, #26]
 8002678:	4413      	add	r3, r2
 800267a:	b29b      	uxth	r3, r3
 800267c:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800267e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002682:	4619      	mov	r1, r3
 8002684:	6938      	ldr	r0, [r7, #16]
 8002686:	f7ff f9cb 	bl	8001a20 <MCM_Rev_Park>
 800268a:	4603      	mov	r3, r0
 800268c:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800268e:	4b17      	ldr	r3, [pc, #92]	; (80026ec <FOC_CurrControllerM1+0x124>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f009 f828 	bl	800b6ea <PWMC_SetPhaseVoltage>
 800269a:	4603      	mov	r3, r0
 800269c:	833b      	strh	r3, [r7, #24]
  FOCVars[M1].Vqd = Vqd;
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 80026a0:	3316      	adds	r3, #22
 80026a2:	f107 0210 	add.w	r2, r7, #16
 80026a6:	6810      	ldr	r0, [r2, #0]
 80026a8:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 80026ac:	461a      	mov	r2, r3
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	6010      	str	r0, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80026b6:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 80026b8:	3304      	adds	r3, #4
 80026ba:	f107 0208 	add.w	r2, r7, #8
 80026be:	6810      	ldr	r0, [r2, #0]
 80026c0:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iqd = Iqd;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 80026c4:	330c      	adds	r3, #12
 80026c6:	f107 0214 	add.w	r2, r7, #20
 80026ca:	6810      	ldr	r0, [r2, #0]
 80026cc:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 80026d0:	331a      	adds	r3, #26
 80026d2:	1d3a      	adds	r2, r7, #4
 80026d4:	6810      	ldr	r0, [r2, #0]
 80026d6:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 80026d8:	4a06      	ldr	r2, [pc, #24]	; (80026f4 <FOC_CurrControllerM1+0x12c>)
 80026da:	8b7b      	ldrh	r3, [r7, #26]
 80026dc:	8413      	strh	r3, [r2, #32]
  return(hCodeError);
 80026de:	8b3b      	ldrh	r3, [r7, #24]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000adc 	.word	0x20000adc
 80026ec:	20000a14 	.word	0x20000a14
 80026f0:	20000a1c 	.word	0x20000a1c
 80026f4:	20000a28 	.word	0x20000a28
 80026f8:	20000ad8 	.word	0x20000ad8
 80026fc:	20000aa4 	.word	0x20000aa4

08002700 <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances.
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <TSK_SafetyTask+0x1c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d104      	bne.n	8002716 <TSK_SafetyTask+0x16>
  {
    TSK_SafetyTask_PWMOFF(M1);
 800270c:	2000      	movs	r0, #0
 800270e:	f000 f807 	bl	8002720 <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv ();
 8002712:	f001 f9a3 	bl	8003a5c <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000716 	.word	0x20000716

08002720 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
 800272a:	2300      	movs	r3, #0
 800272c:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 800272e:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8002732:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	f107 0210 	add.w	r2, r7, #16
 800273c:	4413      	add	r3, r2
 800273e:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	4a37      	ldr	r2, [pc, #220]	; (8002824 <TSK_SafetyTask_PWMOFF+0x104>)
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	4618      	mov	r0, r3
 800274c:	f008 fcb5 	bl	800b0ba <NTC_CalcAvTemp>
 8002750:	4603      	mov	r3, r0
 8002752:	4023      	ands	r3, r4
 8002754:	b29b      	uxth	r3, r3
 8002756:	b21a      	sxth	r2, r3
 8002758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800275c:	4313      	orrs	r3, r2
 800275e:	b21b      	sxth	r3, r3
 8002760:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	4a30      	ldr	r2, [pc, #192]	; (8002828 <TSK_SafetyTask_PWMOFF+0x108>)
 8002766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276a:	4618      	mov	r0, r3
 800276c:	f009 fa15 	bl	800bb9a <PWMC_CheckOverCurrent>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	89fb      	ldrh	r3, [r7, #14]
 8002776:	4313      	orrs	r3, r2
 8002778:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d114      	bne.n	80027aa <TSK_SafetyTask_PWMOFF+0x8a>
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	f107 0210 	add.w	r2, r7, #16
 8002788:	4413      	add	r3, r2
 800278a:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 800278e:	4b27      	ldr	r3, [pc, #156]	; (800282c <TSK_SafetyTask_PWMOFF+0x10c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f00b f85f 	bl	800d856 <RVBS_CalcAvVbusFilt>
 8002798:	4603      	mov	r3, r0
 800279a:	4023      	ands	r3, r4
 800279c:	b29b      	uxth	r3, r3
 800279e:	b21a      	sxth	r2, r3
 80027a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	b21b      	sxth	r3, r3
 80027a8:	81fb      	strh	r3, [r7, #14]
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80027aa:	79fa      	ldrb	r2, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <TSK_SafetyTask_PWMOFF+0x110>)
 80027b6:	1898      	adds	r0, r3, r2
 80027b8:	89fb      	ldrh	r3, [r7, #14]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	b29a      	uxth	r2, r3
 80027be:	89fb      	ldrh	r3, [r7, #14]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f00b fdfd 	bl	800e3c0 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80027c6:	79fa      	ldrb	r2, [r7, #7]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4a17      	ldr	r2, [pc, #92]	; (8002830 <TSK_SafetyTask_PWMOFF+0x110>)
 80027d2:	4413      	add	r3, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f00b fe31 	bl	800e43c <STM_GetState>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b0a      	cmp	r3, #10
 80027de:	d002      	beq.n	80027e6 <TSK_SafetyTask_PWMOFF+0xc6>
 80027e0:	2b0b      	cmp	r3, #11
 80027e2:	d013      	beq.n	800280c <TSK_SafetyTask_PWMOFF+0xec>
	/* USER CODE BEGIN TSK_SafetyTask_PWMOFF 2 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 2 */
    break;
  default:
    break;
 80027e4:	e01a      	b.n	800281c <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4a0f      	ldr	r2, [pc, #60]	; (8002828 <TSK_SafetyTask_PWMOFF+0x108>)
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f009 f984 	bl	800bafc <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fd3e 	bl	8002278 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <TSK_SafetyTask_PWMOFF+0x114>)
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	4618      	mov	r0, r3
 8002806:	f008 fb92 	bl	800af2e <MPM_Clear>
    break;
 800280a:	e007      	b.n	800281c <TSK_SafetyTask_PWMOFF+0xfc>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	4a06      	ldr	r2, [pc, #24]	; (8002828 <TSK_SafetyTask_PWMOFF+0x108>)
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	4618      	mov	r0, r3
 8002816:	f009 f971 	bl	800bafc <PWMC_SwitchOffPWM>
    break;
 800281a:	bf00      	nop
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	20000a10 	.word	0x20000a10
 8002828:	20000a14 	.word	0x20000a14
 800282c:	20000aa8 	.word	0x20000aa8
 8002830:	20000ac8 	.word	0x20000ac8
 8002834:	20000ad4 	.word	0x20000ad4

08002838 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <TSK_HardwareFaultTask+0x1c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f00a fb9d 	bl	800cf80 <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8002846:	2200      	movs	r2, #0
 8002848:	2180      	movs	r1, #128	; 0x80
 800284a:	4803      	ldr	r0, [pc, #12]	; (8002858 <TSK_HardwareFaultTask+0x20>)
 800284c:	f00b fdb8 	bl	800e3c0 <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000a14 	.word	0x20000a14
 8002858:	20000ac8 	.word	0x20000ac8

0800285c <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 8002860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002864:	4824      	ldr	r0, [pc, #144]	; (80028f8 <mc_lock_pins+0x9c>)
 8002866:	f7ff f9a5 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
 800286a:	2104      	movs	r1, #4
 800286c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002870:	f7ff f9a0 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
 8002874:	2102      	movs	r1, #2
 8002876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800287a:	f7ff f99b 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
 800287e:	2101      	movs	r1, #1
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f7ff f996 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 8002888:	2101      	movs	r1, #1
 800288a:	481b      	ldr	r0, [pc, #108]	; (80028f8 <mc_lock_pins+0x9c>)
 800288c:	f7ff f992 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 8002890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002894:	4818      	ldr	r0, [pc, #96]	; (80028f8 <mc_lock_pins+0x9c>)
 8002896:	f7ff f98d 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a0:	f7ff f988 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_INPUT_GPIO_Port, M1_PWM_INPUT_Pin);
 80028a4:	2120      	movs	r1, #32
 80028a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028aa:	f7ff f983 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 80028ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028b6:	f7ff f97d 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 80028ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c2:	f7ff f977 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 80028c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ca:	480b      	ldr	r0, [pc, #44]	; (80028f8 <mc_lock_pins+0x9c>)
 80028cc:	f7ff f972 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 80028d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d8:	f7ff f96c 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 80028dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e0:	4805      	ldr	r0, [pc, #20]	; (80028f8 <mc_lock_pins+0x9c>)
 80028e2:	f7ff f967 	bl	8001bb4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 80028e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f7ff f961 	bl	8001bb4 <LL_GPIO_LockPin>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	48000400 	.word	0x48000400

080028fc <MCP_Init>:
               FCP_Handle_t * pFCP,
               FCP_SendFct_t fFcpSend,
               FCP_ReceiveFct_t fFcpReceive,
               FCP_AbortReceiveFct_t fFcpAbortReceive,
               const char* s_fwVer )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	619a      	str	r2, [r3, #24]
  pHandle->s_fwVer = s_fwVer;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <MCP_Init+0x4c>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <MCP_Init+0x50>)
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <MCP_Init+0x54>)
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	68b8      	ldr	r0, [r7, #8]
 8002924:	f008 faad 	bl	800ae82 <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	61da      	str	r2, [r3, #28]
  pHandle->fFcpReceive = fFcpReceive;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	621a      	str	r2, [r3, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

  MCP_WaitNextFrame(pHandle);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f815 	bl	800296a <MCP_WaitNextFrame>
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	08002955 	.word	0x08002955
 800294c:	080029bd 	.word	0x080029bd
 8002950:	0800299b 	.word	0x0800299b

08002954 <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f804 	bl	800296a <MCP_WaitNextFrame>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6992      	ldr	r2, [r2, #24]
 800297a:	4610      	mov	r0, r2
 800297c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6992      	ldr	r2, [r2, #24]
 800298e:	4610      	mov	r0, r2
 8002990:	4798      	blx	r3
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	461a      	mov	r2, r3
 80029a6:	460b      	mov	r3, r1
 80029a8:	72fb      	strb	r3, [r7, #11]
 80029aa:	4613      	mov	r3, r2
 80029ac:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7ff ffdb 	bl	800296a <MCP_WaitNextFrame>
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b0a9      	sub	sp, #164	; 0xa4
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	461a      	mov	r2, r3
 80029c8:	460b      	mov	r3, r1
 80029ca:	72fb      	strb	r3, [r7, #11]
 80029cc:	4613      	mov	r3, r2
 80029ce:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool bNoError = false; // Default is error
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 80029dc:	7afb      	ldrb	r3, [r7, #11]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  if (bMotorSelection != 0)
 80029e4:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d014      	beq.n	8002a16 <MCP_ReceivedFrame+0x5a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80029f2:	3b01      	subs	r3, #1
 80029f4:	461a      	mov	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	f001 fdd8 	bl	80045ac <UI_SetReg>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <MCP_ReceivedFrame+0x50>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	72fb      	strb	r3, [r7, #11]
 8002a0a:	e004      	b.n	8002a16 <MCP_ReceivedFrame+0x5a>

    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002a10:	230b      	movs	r3, #11
 8002a12:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
  }

  switch (Code)
 8002a16:	7afb      	ldrb	r3, [r7, #11]
 8002a18:	2b12      	cmp	r3, #18
 8002a1a:	f200 8543 	bhi.w	80034a4 <MCP_ReceivedFrame+0xae8>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <MCP_ReceivedFrame+0x68>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	080034ad 	.word	0x080034ad
 8002a28:	08002a71 	.word	0x08002a71
 8002a2c:	08002d71 	.word	0x08002d71
 8002a30:	080030a9 	.word	0x080030a9
 8002a34:	080034a5 	.word	0x080034a5
 8002a38:	080034a5 	.word	0x080034a5
 8002a3c:	080030cd 	.word	0x080030cd
 8002a40:	08003191 	.word	0x08003191
 8002a44:	08003243 	.word	0x08003243
 8002a48:	080032e3 	.word	0x080032e3
 8002a4c:	0800338b 	.word	0x0800338b
 8002a50:	080033d9 	.word	0x080033d9
 8002a54:	0800341f 	.word	0x0800341f
 8002a58:	080031e7 	.word	0x080031e7
 8002a5c:	080034a5 	.word	0x080034a5
 8002a60:	080034a5 	.word	0x080034a5
 8002a64:	080034a5 	.word	0x080034a5
 8002a68:	080034a5 	.word	0x080034a5
 8002a6c:	080034ad 	.word	0x080034ad
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
      bErrorCode = ERROR_CODE_WRONG_SET;
 8002a78:	2305      	movs	r3, #5
 8002a7a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 8002a7e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002a82:	2b88      	cmp	r3, #136	; 0x88
 8002a84:	f200 816f 	bhi.w	8002d66 <MCP_ReceivedFrame+0x3aa>
 8002a88:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <MCP_ReceivedFrame+0xd4>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002cb5 	.word	0x08002cb5
 8002a94:	08002d67 	.word	0x08002d67
 8002a98:	08002d67 	.word	0x08002d67
 8002a9c:	08002cd3 	.word	0x08002cd3
 8002aa0:	08002d67 	.word	0x08002d67
 8002aa4:	08002cff 	.word	0x08002cff
 8002aa8:	08002cff 	.word	0x08002cff
 8002aac:	08002cff 	.word	0x08002cff
 8002ab0:	08002cff 	.word	0x08002cff
 8002ab4:	08002cff 	.word	0x08002cff
 8002ab8:	08002cff 	.word	0x08002cff
 8002abc:	08002cff 	.word	0x08002cff
 8002ac0:	08002cff 	.word	0x08002cff
 8002ac4:	08002cff 	.word	0x08002cff
 8002ac8:	08002cff 	.word	0x08002cff
 8002acc:	08002cff 	.word	0x08002cff
 8002ad0:	08002d29 	.word	0x08002d29
 8002ad4:	08002d29 	.word	0x08002d29
 8002ad8:	08002d67 	.word	0x08002d67
 8002adc:	08002d67 	.word	0x08002d67
 8002ae0:	08002cff 	.word	0x08002cff
 8002ae4:	08002cff 	.word	0x08002cff
 8002ae8:	08002cff 	.word	0x08002cff
 8002aec:	08002cff 	.word	0x08002cff
 8002af0:	08002cff 	.word	0x08002cff
 8002af4:	08002d67 	.word	0x08002d67
 8002af8:	08002d67 	.word	0x08002d67
 8002afc:	08002d67 	.word	0x08002d67
 8002b00:	08002cef 	.word	0x08002cef
 8002b04:	08002cf7 	.word	0x08002cf7
 8002b08:	08002d67 	.word	0x08002d67
 8002b0c:	08002d67 	.word	0x08002d67
 8002b10:	08002d67 	.word	0x08002d67
 8002b14:	08002d67 	.word	0x08002d67
 8002b18:	08002d67 	.word	0x08002d67
 8002b1c:	08002d67 	.word	0x08002d67
 8002b20:	08002d67 	.word	0x08002d67
 8002b24:	08002d67 	.word	0x08002d67
 8002b28:	08002d67 	.word	0x08002d67
 8002b2c:	08002d67 	.word	0x08002d67
 8002b30:	08002d67 	.word	0x08002d67
 8002b34:	08002d67 	.word	0x08002d67
 8002b38:	08002d67 	.word	0x08002d67
 8002b3c:	08002d67 	.word	0x08002d67
 8002b40:	08002d67 	.word	0x08002d67
 8002b44:	08002d67 	.word	0x08002d67
 8002b48:	08002d67 	.word	0x08002d67
 8002b4c:	08002d67 	.word	0x08002d67
 8002b50:	08002d67 	.word	0x08002d67
 8002b54:	08002d67 	.word	0x08002d67
 8002b58:	08002d67 	.word	0x08002d67
 8002b5c:	08002d67 	.word	0x08002d67
 8002b60:	08002d67 	.word	0x08002d67
 8002b64:	08002d67 	.word	0x08002d67
 8002b68:	08002d67 	.word	0x08002d67
 8002b6c:	08002d67 	.word	0x08002d67
 8002b70:	08002d67 	.word	0x08002d67
 8002b74:	08002d67 	.word	0x08002d67
 8002b78:	08002d67 	.word	0x08002d67
 8002b7c:	08002d67 	.word	0x08002d67
 8002b80:	08002d67 	.word	0x08002d67
 8002b84:	08002d67 	.word	0x08002d67
 8002b88:	08002d67 	.word	0x08002d67
 8002b8c:	08002d67 	.word	0x08002d67
 8002b90:	08002d67 	.word	0x08002d67
 8002b94:	08002cff 	.word	0x08002cff
 8002b98:	08002d67 	.word	0x08002d67
 8002b9c:	08002d67 	.word	0x08002d67
 8002ba0:	08002d67 	.word	0x08002d67
 8002ba4:	08002d67 	.word	0x08002d67
 8002ba8:	08002d29 	.word	0x08002d29
 8002bac:	08002d29 	.word	0x08002d29
 8002bb0:	08002d29 	.word	0x08002d29
 8002bb4:	08002d67 	.word	0x08002d67
 8002bb8:	08002d67 	.word	0x08002d67
 8002bbc:	08002d67 	.word	0x08002d67
 8002bc0:	08002d67 	.word	0x08002d67
 8002bc4:	08002d67 	.word	0x08002d67
 8002bc8:	08002d67 	.word	0x08002d67
 8002bcc:	08002cff 	.word	0x08002cff
 8002bd0:	08002d67 	.word	0x08002d67
 8002bd4:	08002d67 	.word	0x08002d67
 8002bd8:	08002d67 	.word	0x08002d67
 8002bdc:	08002cff 	.word	0x08002cff
 8002be0:	08002cff 	.word	0x08002cff
 8002be4:	08002cff 	.word	0x08002cff
 8002be8:	08002cff 	.word	0x08002cff
 8002bec:	08002cff 	.word	0x08002cff
 8002bf0:	08002cff 	.word	0x08002cff
 8002bf4:	08002cff 	.word	0x08002cff
 8002bf8:	08002d67 	.word	0x08002d67
 8002bfc:	08002d29 	.word	0x08002d29
 8002c00:	08002d67 	.word	0x08002d67
 8002c04:	08002d67 	.word	0x08002d67
 8002c08:	08002d67 	.word	0x08002d67
 8002c0c:	08002d67 	.word	0x08002d67
 8002c10:	08002d67 	.word	0x08002d67
 8002c14:	08002cff 	.word	0x08002cff
 8002c18:	08002d67 	.word	0x08002d67
 8002c1c:	08002d67 	.word	0x08002d67
 8002c20:	08002cff 	.word	0x08002cff
 8002c24:	08002cff 	.word	0x08002cff
 8002c28:	08002d67 	.word	0x08002d67
 8002c2c:	08002d67 	.word	0x08002d67
 8002c30:	08002d67 	.word	0x08002d67
 8002c34:	08002d67 	.word	0x08002d67
 8002c38:	08002d67 	.word	0x08002d67
 8002c3c:	08002d67 	.word	0x08002d67
 8002c40:	08002d67 	.word	0x08002d67
 8002c44:	08002d67 	.word	0x08002d67
 8002c48:	08002d67 	.word	0x08002d67
 8002c4c:	08002d67 	.word	0x08002d67
 8002c50:	08002d67 	.word	0x08002d67
 8002c54:	08002d67 	.word	0x08002d67
 8002c58:	08002d67 	.word	0x08002d67
 8002c5c:	08002d67 	.word	0x08002d67
 8002c60:	08002cd3 	.word	0x08002cd3
 8002c64:	08002d29 	.word	0x08002d29
 8002c68:	08002d29 	.word	0x08002d29
 8002c6c:	08002d29 	.word	0x08002d29
 8002c70:	08002d29 	.word	0x08002d29
 8002c74:	08002d29 	.word	0x08002d29
 8002c78:	08002d67 	.word	0x08002d67
 8002c7c:	08002d67 	.word	0x08002d67
 8002c80:	08002d67 	.word	0x08002d67
 8002c84:	08002d29 	.word	0x08002d29
 8002c88:	08002d29 	.word	0x08002d29
 8002c8c:	08002d67 	.word	0x08002d67
 8002c90:	08002d67 	.word	0x08002d67
 8002c94:	08002d67 	.word	0x08002d67
 8002c98:	08002d67 	.word	0x08002d67
 8002c9c:	08002d67 	.word	0x08002d67
 8002ca0:	08002d67 	.word	0x08002d67
 8002ca4:	08002d67 	.word	0x08002d67
 8002ca8:	08002cff 	.word	0x08002cff
 8002cac:	08002cff 	.word	0x08002cff
 8002cb0:	08002cff 	.word	0x08002cff
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	663b      	str	r3, [r7, #96]	; 0x60

          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002cc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fc71 	bl	80045ac <UI_SetReg>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002cd0:	e04d      	b.n	8002d6e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f001 fc63 	bl	80045ac <UI_SetReg>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002cec:	e03f      	b.n	8002d6e <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          bNoError = true; /* No check inside class return always true*/
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002cf4:	e03b      	b.n	8002d6e <MCP_ReceivedFrame+0x3b2>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          bNoError = true; /* No check inside class return always true*/
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002cfc:	e037      	b.n	8002d6e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3301      	adds	r3, #1
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	4413      	add	r3, r2
 8002d10:	667b      	str	r3, [r7, #100]	; 0x64
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002d18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fc46 	bl	80045ac <UI_SetReg>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002d26:	e022      	b.n	8002d6e <MCP_ReceivedFrame+0x3b2>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3302      	adds	r3, #2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	441a      	add	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3303      	adds	r3, #3
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	041b      	lsls	r3, r3, #16
 8002d42:	441a      	add	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	061b      	lsls	r3, r3, #24
 8002d4c:	4413      	add	r3, r2
 8002d4e:	66bb      	str	r3, [r7, #104]	; 0x68
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002d56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fc27 	bl	80045ac <UI_SetReg>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002d64:	e003      	b.n	8002d6e <MCP_ReceivedFrame+0x3b2>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8002d66:	2302      	movs	r3, #2
 8002d68:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        }
        break;
 8002d6c:	bf00      	nop
      }
    }
    break;
 8002d6e:	e3a0      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 8002d7e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002d82:	2b88      	cmp	r3, #136	; 0x88
 8002d84:	f200 8182 	bhi.w	800308c <MCP_ReceivedFrame+0x6d0>
 8002d88:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <MCP_ReceivedFrame+0x3d4>)
 8002d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8e:	bf00      	nop
 8002d90:	08002fb5 	.word	0x08002fb5
 8002d94:	08003021 	.word	0x08003021
 8002d98:	08002fb5 	.word	0x08002fb5
 8002d9c:	08002fb5 	.word	0x08002fb5
 8002da0:	08003021 	.word	0x08003021
 8002da4:	08002feb 	.word	0x08002feb
 8002da8:	08002feb 	.word	0x08002feb
 8002dac:	08002feb 	.word	0x08002feb
 8002db0:	08002feb 	.word	0x08002feb
 8002db4:	08002feb 	.word	0x08002feb
 8002db8:	08002feb 	.word	0x08002feb
 8002dbc:	08002feb 	.word	0x08002feb
 8002dc0:	08002feb 	.word	0x08002feb
 8002dc4:	08002feb 	.word	0x08002feb
 8002dc8:	08002feb 	.word	0x08002feb
 8002dcc:	08002feb 	.word	0x08002feb
 8002dd0:	08002feb 	.word	0x08002feb
 8002dd4:	08002feb 	.word	0x08002feb
 8002dd8:	08002feb 	.word	0x08002feb
 8002ddc:	08002feb 	.word	0x08002feb
 8002de0:	08002feb 	.word	0x08002feb
 8002de4:	08002feb 	.word	0x08002feb
 8002de8:	08002feb 	.word	0x08002feb
 8002dec:	08002feb 	.word	0x08002feb
 8002df0:	08002feb 	.word	0x08002feb
 8002df4:	08002feb 	.word	0x08002feb
 8002df8:	08002feb 	.word	0x08002feb
 8002dfc:	08002feb 	.word	0x08002feb
 8002e00:	08003095 	.word	0x08003095
 8002e04:	08003095 	.word	0x08003095
 8002e08:	08003021 	.word	0x08003021
 8002e0c:	08002feb 	.word	0x08002feb
 8002e10:	08002feb 	.word	0x08002feb
 8002e14:	08002feb 	.word	0x08002feb
 8002e18:	08002fb5 	.word	0x08002fb5
 8002e1c:	0800308d 	.word	0x0800308d
 8002e20:	0800308d 	.word	0x0800308d
 8002e24:	0800308d 	.word	0x0800308d
 8002e28:	0800308d 	.word	0x0800308d
 8002e2c:	0800308d 	.word	0x0800308d
 8002e30:	0800308d 	.word	0x0800308d
 8002e34:	0800308d 	.word	0x0800308d
 8002e38:	0800308d 	.word	0x0800308d
 8002e3c:	0800308d 	.word	0x0800308d
 8002e40:	0800308d 	.word	0x0800308d
 8002e44:	0800308d 	.word	0x0800308d
 8002e48:	0800308d 	.word	0x0800308d
 8002e4c:	0800308d 	.word	0x0800308d
 8002e50:	0800308d 	.word	0x0800308d
 8002e54:	0800308d 	.word	0x0800308d
 8002e58:	0800308d 	.word	0x0800308d
 8002e5c:	0800308d 	.word	0x0800308d
 8002e60:	0800308d 	.word	0x0800308d
 8002e64:	0800308d 	.word	0x0800308d
 8002e68:	0800308d 	.word	0x0800308d
 8002e6c:	0800308d 	.word	0x0800308d
 8002e70:	0800308d 	.word	0x0800308d
 8002e74:	0800308d 	.word	0x0800308d
 8002e78:	0800308d 	.word	0x0800308d
 8002e7c:	0800308d 	.word	0x0800308d
 8002e80:	0800308d 	.word	0x0800308d
 8002e84:	0800308d 	.word	0x0800308d
 8002e88:	0800308d 	.word	0x0800308d
 8002e8c:	0800308d 	.word	0x0800308d
 8002e90:	0800308d 	.word	0x0800308d
 8002e94:	08002feb 	.word	0x08002feb
 8002e98:	0800308d 	.word	0x0800308d
 8002e9c:	0800308d 	.word	0x0800308d
 8002ea0:	0800308d 	.word	0x0800308d
 8002ea4:	0800308d 	.word	0x0800308d
 8002ea8:	08003021 	.word	0x08003021
 8002eac:	08003021 	.word	0x08003021
 8002eb0:	08003021 	.word	0x08003021
 8002eb4:	08002feb 	.word	0x08002feb
 8002eb8:	08002feb 	.word	0x08002feb
 8002ebc:	08002feb 	.word	0x08002feb
 8002ec0:	08002feb 	.word	0x08002feb
 8002ec4:	08002fb5 	.word	0x08002fb5
 8002ec8:	08003021 	.word	0x08003021
 8002ecc:	08002feb 	.word	0x08002feb
 8002ed0:	08002feb 	.word	0x08002feb
 8002ed4:	08002feb 	.word	0x08002feb
 8002ed8:	08002feb 	.word	0x08002feb
 8002edc:	08002feb 	.word	0x08002feb
 8002ee0:	08002feb 	.word	0x08002feb
 8002ee4:	08002feb 	.word	0x08002feb
 8002ee8:	08002feb 	.word	0x08002feb
 8002eec:	08002feb 	.word	0x08002feb
 8002ef0:	08002feb 	.word	0x08002feb
 8002ef4:	08002feb 	.word	0x08002feb
 8002ef8:	08002fb5 	.word	0x08002fb5
 8002efc:	08003021 	.word	0x08003021
 8002f00:	0800308d 	.word	0x0800308d
 8002f04:	08002feb 	.word	0x08002feb
 8002f08:	08002feb 	.word	0x08002feb
 8002f0c:	08002feb 	.word	0x08002feb
 8002f10:	08002feb 	.word	0x08002feb
 8002f14:	08002feb 	.word	0x08002feb
 8002f18:	0800308d 	.word	0x0800308d
 8002f1c:	0800308d 	.word	0x0800308d
 8002f20:	08002feb 	.word	0x08002feb
 8002f24:	08002feb 	.word	0x08002feb
 8002f28:	08002fb5 	.word	0x08002fb5
 8002f2c:	08002fb5 	.word	0x08002fb5
 8002f30:	08003021 	.word	0x08003021
 8002f34:	08003021 	.word	0x08003021
 8002f38:	08003021 	.word	0x08003021
 8002f3c:	08003021 	.word	0x08003021
 8002f40:	08003021 	.word	0x08003021
 8002f44:	08002fb5 	.word	0x08002fb5
 8002f48:	08002feb 	.word	0x08002feb
 8002f4c:	08002feb 	.word	0x08002feb
 8002f50:	08003021 	.word	0x08003021
 8002f54:	0800308d 	.word	0x0800308d
 8002f58:	08002feb 	.word	0x08002feb
 8002f5c:	08002feb 	.word	0x08002feb
 8002f60:	08002fb5 	.word	0x08002fb5
 8002f64:	08003021 	.word	0x08003021
 8002f68:	08003021 	.word	0x08003021
 8002f6c:	08003021 	.word	0x08003021
 8002f70:	08003021 	.word	0x08003021
 8002f74:	08003021 	.word	0x08003021
 8002f78:	08003021 	.word	0x08003021
 8002f7c:	08003021 	.word	0x08003021
 8002f80:	08003021 	.word	0x08003021
 8002f84:	08003021 	.word	0x08003021
 8002f88:	08003021 	.word	0x08003021
 8002f8c:	08003021 	.word	0x08003021
 8002f90:	08002fb5 	.word	0x08002fb5
 8002f94:	0800308d 	.word	0x0800308d
 8002f98:	08002fb5 	.word	0x08002fb5
 8002f9c:	08003057 	.word	0x08003057
 8002fa0:	08003057 	.word	0x08003057
 8002fa4:	08003057 	.word	0x08003057
 8002fa8:	08002feb 	.word	0x08002feb
 8002fac:	08002feb 	.word	0x08002feb
 8002fb0:	08002feb 	.word	0x08002feb
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002fba:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f001 fd48 	bl	8004a54 <UI_GetReg>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	65bb      	str	r3, [r7, #88]	; 0x58
           if ( bNoError == true )
 8002fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d063      	beq.n	8003098 <MCP_ReceivedFrame+0x6dc>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	69dc      	ldr	r4, [r3, #28]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6998      	ldr	r0, [r3, #24]
 8002fd8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002fdc:	2301      	movs	r3, #1
 8002fde:	21f0      	movs	r1, #240	; 0xf0
 8002fe0:	47a0      	blx	r4
            RequireAck = false;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002fe8:	e056      	b.n	8003098 <MCP_ReceivedFrame+0x6dc>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002ff0:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fd2d 	bl	8004a54 <UI_GetReg>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	657b      	str	r3, [r7, #84]	; 0x54
          if ( bNoError == true )
 8002ffe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003002:	2b00      	cmp	r3, #0
 8003004:	d04a      	beq.n	800309c <MCP_ReceivedFrame+0x6e0>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	69dc      	ldr	r4, [r3, #28]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6998      	ldr	r0, [r3, #24]
 800300e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003012:	2302      	movs	r3, #2
 8003014:	21f0      	movs	r1, #240	; 0xf0
 8003016:	47a0      	blx	r4
            RequireAck = false;
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800301e:	e03d      	b.n	800309c <MCP_ReceivedFrame+0x6e0>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8003026:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800302a:	4618      	mov	r0, r3
 800302c:	f001 fd12 	bl	8004a54 <UI_GetReg>
 8003030:	4603      	mov	r3, r0
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
          if ( bNoError == true )
 8003034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003038:	2b00      	cmp	r3, #0
 800303a:	d031      	beq.n	80030a0 <MCP_ReceivedFrame+0x6e4>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	69dc      	ldr	r4, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6998      	ldr	r0, [r3, #24]
 8003044:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003048:	2304      	movs	r3, #4
 800304a:	21f0      	movs	r1, #240	; 0xf0
 800304c:	47a0      	blx	r4
            RequireAck = false;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8003054:	e024      	b.n	80030a0 <MCP_ReceivedFrame+0x6e4>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 800305c:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8003060:	4618      	mov	r0, r3
 8003062:	f001 fcf7 	bl	8004a54 <UI_GetReg>
 8003066:	4603      	mov	r3, r0
 8003068:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ( bNoError == true )
 800306a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800306e:	2b00      	cmp	r3, #0
 8003070:	d018      	beq.n	80030a4 <MCP_ReceivedFrame+0x6e8>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	69dc      	ldr	r4, [r3, #28]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6998      	ldr	r0, [r3, #24]
 800307a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800307e:	2304      	movs	r3, #4
 8003080:	21f0      	movs	r1, #240	; 0xf0
 8003082:	47a0      	blx	r4
            RequireAck = false;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 800308a:	e00b      	b.n	80030a4 <MCP_ReceivedFrame+0x6e8>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800308c:	2303      	movs	r3, #3
 800308e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        break;
 8003092:	e008      	b.n	80030a6 <MCP_ReceivedFrame+0x6ea>
        break;
 8003094:	bf00      	nop
 8003096:	e20c      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
        break;
 8003098:	bf00      	nop
 800309a:	e20a      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
        break;
 800309c:	bf00      	nop
 800309e:	e208      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
        break;
 80030a0:	bf00      	nop
 80030a2:	e206      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
        break;
 80030a4:	bf00      	nop
      }
    }
    break;
 80030a6:	e204      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80030b0:	2307      	movs	r3, #7
 80030b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fa60 	bl	8005584 <UI_ExecCmd>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80030ca:	e1f2      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 80030cc:	2300      	movs	r3, #0
 80030ce:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80030d2:	e00c      	b.n	80030ee <MCP_ReceivedFrame+0x732>
      {
        outBuff[i] = 0;
 80030d4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80030d8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80030dc:	4413      	add	r3, r2
 80030de:	2200      	movs	r2, #0
 80030e0:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; i < 32; i++)
 80030e4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80030e8:	3301      	adds	r3, #1
 80030ea:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80030ee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80030f2:	2b1f      	cmp	r3, #31
 80030f4:	d9ee      	bls.n	80030d4 <MCP_ReceivedFrame+0x718>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80030fc:	e013      	b.n	8003126 <MCP_ReceivedFrame+0x76a>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003104:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003108:	441a      	add	r2, r3
 800310a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800310e:	3303      	adds	r3, #3
 8003110:	7812      	ldrb	r2, [r2, #0]
 8003112:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003116:	440b      	add	r3, r1
 8003118:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800311c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003120:	3301      	adds	r3, #1
 8003122:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003126:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800312a:	2b1c      	cmp	r3, #28
 800312c:	d808      	bhi.n	8003140 <MCP_ReceivedFrame+0x784>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003134:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003138:	4413      	add	r3, r2
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d1de      	bne.n	80030fe <MCP_ReceivedFrame+0x742>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003146:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800314a:	3305      	adds	r3, #5
 800314c:	4413      	add	r3, r2
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	753b      	strb	r3, [r7, #20]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003158:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800315c:	3307      	adds	r3, #7
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	757b      	strb	r3, [r7, #21]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800316a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800316e:	3309      	adds	r3, #9
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	75bb      	strb	r3, [r7, #22]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	69dc      	ldr	r4, [r3, #28]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6998      	ldr	r0, [r3, #24]
 800317e:	f107 0214 	add.w	r2, r7, #20
 8003182:	2320      	movs	r3, #32
 8003184:	21f0      	movs	r1, #240	; 0xf0
 8003186:	47a0      	blx	r4
      bNoError = true;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 800318e:	e190      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3305      	adds	r3, #5
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3301      	adds	r3, #1
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	441a      	add	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3302      	adds	r3, #2
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	441a      	add	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3303      	adds	r3, #3
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	4413      	add	r3, r2
 80031ce:	673b      	str	r3, [r7, #112]	; 0x70
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80031d6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 fa3f 	bl	800565c <UI_ExecSpeedRamp>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80031e4:	e165      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  case MC_PROTOCOL_CODE_SET_TORQUE_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3305      	adds	r3, #5
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3301      	adds	r3, #1
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3302      	adds	r3, #2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3303      	adds	r3, #3
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	4413      	add	r3, r2
 8003224:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800322e:	b211      	sxth	r1, r2
 8003230:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8003234:	4618      	mov	r0, r3
 8003236:	f002 fa39 	bl	80056ac <UI_ExecTorqueRamp>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003240:	e137      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7819      	ldrb	r1, [r3, #0]
 8003248:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800324c:	f107 0242 	add.w	r2, r7, #66	; 0x42
 8003250:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	4623      	mov	r3, r4
 8003258:	f002 fa44 	bl	80056e4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 800325c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8003260:	461a      	mov	r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4aa1      	ldr	r2, [pc, #644]	; (80034f0 <MCP_ReceivedFrame+0xb34>)
 800326c:	fb82 1203 	smull	r1, r2, r2, r3
 8003270:	1092      	asrs	r2, r2, #2
 8003272:	17db      	asrs	r3, r3, #31
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	67bb      	str	r3, [r7, #120]	; 0x78
      outBuff[0] = (uint8_t)(rpm);
 8003278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      outBuff[1] = (uint8_t)(rpm >> 8);
 8003280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003282:	121b      	asrs	r3, r3, #8
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      outBuff[2] = (uint8_t)(rpm >> 16);
 800328a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328c:	141b      	asrs	r3, r3, #16
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      outBuff[3] = (uint8_t)(rpm >> 24);
 8003294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003296:	161b      	asrs	r3, r3, #24
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      outBuff[4] = (uint8_t)(FinalTorque);
 800329e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80032a8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 80032ac:	121b      	asrs	r3, r3, #8
 80032ae:	b21b      	sxth	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
      outBuff[6] = (uint8_t)(Durationms);
 80032b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80032c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	69dc      	ldr	r4, [r3, #28]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6998      	ldr	r0, [r3, #24]
 80032d6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80032da:	2308      	movs	r3, #8
 80032dc:	21f0      	movs	r1, #240	; 0xf0
 80032de:	47a0      	blx	r4
    }
    break;
 80032e0:	e0e7      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
      uint8_t bStage;
      uint16_t hDurationms;
      int16_t hFinalMecSpeedUnit;
      int16_t hFinalTorque;
      int32_t rpm;
      bStage = buffer[0];
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      hDurationms = buffer[7] + (buffer[8] << 8);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3307      	adds	r3, #7
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3308      	adds	r3, #8
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4413      	add	r3, r2
 8003300:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3301      	adds	r3, #1
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3302      	adds	r3, #2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	441a      	add	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	3303      	adds	r3, #3
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	041b      	lsls	r3, r3, #16
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	4413      	add	r3, r2
 800332a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800332e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4a6e      	ldr	r2, [pc, #440]	; (80034f4 <MCP_ReceivedFrame+0xb38>)
 800333c:	fb82 1203 	smull	r1, r2, r2, r3
 8003340:	441a      	add	r2, r3
 8003342:	1152      	asrs	r2, r2, #5
 8003344:	17db      	asrs	r3, r3, #31
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3305      	adds	r3, #5
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	b29a      	uxth	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3306      	adds	r3, #6
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	b29b      	uxth	r3, r3
 8003360:	4413      	add	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f9b7 407e 	ldrsh.w	r4, [r7, #126]	; 0x7e
 800336e:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8003372:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8003376:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	4623      	mov	r3, r4
 800337e:	f002 f9ea 	bl	8005756 <UI_SetRevupData>
 8003382:	4603      	mov	r3, r0
 8003384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003388:	e093      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_SET_CURRENT_REF:
    {
      int16_t hIqRef;
      int16_t hIdRef;
      hIqRef = buffer[0] + (buffer[1] << 8);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3301      	adds	r3, #1
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	b29b      	uxth	r3, r3
 800339c:	4413      	add	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
      hIdRef = buffer[2] + (buffer[3] << 8);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3302      	adds	r3, #2
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3303      	adds	r3, #3
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 80033c6:	f9b7 108a 	ldrsh.w	r1, [r7, #138]	; 0x8a
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 f9f2 	bl	80057b4 <UI_SetCurrentReferences>
      bNoError = true;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80033d6:	e06c      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>

  case MC_PROTOCOL_CODE_GET_MP_INFO:
    {
      MPInfo_t stepList;
      stepList.data = buffer;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
      stepList.len = Size;
 80033dc:	7abb      	ldrb	r3, [r7, #10]
 80033de:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80033e2:	230c      	movs	r3, #12
 80033e4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80033e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033ec:	4942      	ldr	r1, [pc, #264]	; (80034f8 <MCP_ReceivedFrame+0xb3c>)
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 f9fc 	bl	80057ec <UI_GetMPInfo>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      if (bNoError)
 80033fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d056      	beq.n	80034b0 <MCP_ReceivedFrame+0xaf4>
      {
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	69dc      	ldr	r4, [r3, #28]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6998      	ldr	r0, [r3, #24]
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <MCP_ReceivedFrame+0xb3c>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <MCP_ReceivedFrame+0xb3c>)
 8003410:	791b      	ldrb	r3, [r3, #4]
 8003412:	21f0      	movs	r1, #240	; 0xf0
 8003414:	47a0      	blx	r4
        RequireAck = false;
 8003416:	2300      	movs	r3, #0
 8003418:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
    break;
 800341c:	e048      	b.n	80034b0 <MCP_ReceivedFrame+0xaf4>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 800341e:	2300      	movs	r3, #0
 8003420:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003424:	e012      	b.n	800344c <MCP_ReceivedFrame+0xa90>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800342c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003430:	441a      	add	r2, r3
 8003432:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800343c:	440b      	add	r3, r1
 800343e:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003442:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003446:	3301      	adds	r3, #1
 8003448:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800344c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003450:	2b1f      	cmp	r3, #31
 8003452:	d816      	bhi.n	8003482 <MCP_ReceivedFrame+0xac6>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800345a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800345e:	4413      	add	r3, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1df      	bne.n	8003426 <MCP_ReceivedFrame+0xa6a>
      }

      for (; i < 32; i++)
 8003466:	e00c      	b.n	8003482 <MCP_ReceivedFrame+0xac6>
      {
        outBuff[i] = 0;
 8003468:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800346c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003470:	4413      	add	r3, r2
 8003472:	2200      	movs	r2, #0
 8003474:	f803 2c84 	strb.w	r2, [r3, #-132]
      for (; i < 32; i++)
 8003478:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800347c:	3301      	adds	r3, #1
 800347e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003482:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003486:	2b1f      	cmp	r3, #31
 8003488:	d9ee      	bls.n	8003468 <MCP_ReceivedFrame+0xaac>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	69dc      	ldr	r4, [r3, #28]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6998      	ldr	r0, [r3, #24]
 8003492:	f107 0214 	add.w	r2, r7, #20
 8003496:	2320      	movs	r3, #32
 8003498:	21f0      	movs	r1, #240	; 0xf0
 800349a:	47a0      	blx	r4
      bNoError = true;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80034a2:	e006      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
    break;
 80034aa:	e002      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
    break;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <MCP_ReceivedFrame+0xaf6>
    break;
 80034b0:	bf00      	nop
  }

  if (RequireAck)
 80034b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <MCP_ReceivedFrame+0xb2a>
  {
    if (bNoError)
 80034ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d008      	beq.n	80034d4 <MCP_ReceivedFrame+0xb18>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	69dc      	ldr	r4, [r3, #28]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6998      	ldr	r0, [r3, #24]
 80034ca:	2300      	movs	r3, #0
 80034cc:	2200      	movs	r2, #0
 80034ce:	21f0      	movs	r1, #240	; 0xf0
 80034d0:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 80034d2:	e008      	b.n	80034e6 <MCP_ReceivedFrame+0xb2a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	69dc      	ldr	r4, [r3, #28]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6998      	ldr	r0, [r3, #24]
 80034dc:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 80034e0:	2301      	movs	r3, #1
 80034e2:	21ff      	movs	r1, #255	; 0xff
 80034e4:	47a0      	blx	r4
}
 80034e6:	bf00      	nop
 80034e8:	379c      	adds	r7, #156	; 0x9c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	66666667 	.word	0x66666667
 80034f4:	88888889 	.word	0x88888889
 80034f8:	20000718 	.word	0x20000718

080034fc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af02      	add	r7, sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003502:	f005 f963 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <MX_MotorControl_Init+0x3c>)
 800350a:	fba3 2302 	umull	r2, r3, r3, r2
 800350e:	09db      	lsrs	r3, r3, #7
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fe3a 	bl	800718a <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8003516:	4909      	ldr	r1, [pc, #36]	; (800353c <MX_MotorControl_Init+0x40>)
 8003518:	4809      	ldr	r0, [pc, #36]	; (8003540 <MX_MotorControl_Init+0x44>)
 800351a:	f7fe fb67 	bl	8001bec <MCboot>
  mc_lock_pins();
 800351e:	f7ff f99d 	bl	800285c <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <MX_MotorControl_Init+0x48>)
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <MX_MotorControl_Init+0x40>)
 8003528:	4a05      	ldr	r2, [pc, #20]	; (8003540 <MX_MotorControl_Init+0x44>)
 800352a:	2101      	movs	r1, #1
 800352c:	4806      	ldr	r0, [pc, #24]	; (8003548 <MX_MotorControl_Init+0x4c>)
 800352e:	f000 ff49 	bl	80043c4 <UI_TaskInit>
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	10624dd3 	.word	0x10624dd3
 800353c:	20000ae4 	.word	0x20000ae4
 8003540:	20000ae0 	.word	0x20000ae0
 8003544:	0800f82c 	.word	0x0800f82c
 8003548:	200006c8 	.word	0x200006c8

0800354c <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	f023 020f 	bic.w	r2, r3, #15
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_REG_SetSequencerRanks>:
  *         (5) On STM32F3, ADC channel available only on all ADC instances, but
  *             only one ADC instance is allowed to be connected to VrefInt at the same time.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003572:	b490      	push	{r4, r7}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3330      	adds	r3, #48	; 0x30
 8003582:	4619      	mov	r1, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800358e:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	fa92 f2a2 	rbit	r2, r2
 8003596:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	fab2 f282 	clz	r2, r2
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	40d3      	lsrs	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	211f      	movs	r1, #31
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	401a      	ands	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	f1c3 031a 	rsb	r3, r3, #26
 80035ca:	fa21 f303 	lsr.w	r3, r1, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS - (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc90      	pop	{r4, r7}
 80035da:	4770      	bx	lr

080035dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_181CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_601CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035dc:	b490      	push	{r4, r7}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	3314      	adds	r3, #20
 80035ec:	4619      	mov	r1, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	fa92 f2a2 	rbit	r2, r2
 8003600:	613a      	str	r2, [r7, #16]
  return result;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	fab2 f282 	clz	r2, r2
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	40d3      	lsrs	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800361a:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800361e:	61f9      	str	r1, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	69f9      	ldr	r1, [r7, #28]
 8003622:	fa91 f1a1 	rbit	r1, r1
 8003626:	61b9      	str	r1, [r7, #24]
  return result;
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	fab1 f181 	clz	r1, r1
 800362e:	b2c9      	uxtb	r1, r1
 8003630:	40cb      	lsrs	r3, r1
 8003632:	2107      	movs	r1, #7
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003642:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8003646:	6279      	str	r1, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364a:	fa91 f1a1 	rbit	r1, r1
 800364e:	6239      	str	r1, [r7, #32]
  return result;
 8003650:	6a39      	ldr	r1, [r7, #32]
 8003652:	fab1 f181 	clz	r1, r1
 8003656:	b2c9      	uxtb	r1, r1
 8003658:	40cb      	lsrs	r3, r1
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	4313      	orrs	r3, r2
 8003662:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 8003664:	bf00      	nop
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc90      	pop	{r4, r7}
 800366c:	4770      	bx	lr

0800366e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800367e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80036ce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80036d8:	4313      	orrs	r3, r2
 80036da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003726:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800372a:	f043 0204 	orr.w	r2, r3, #4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	b29b      	uxth	r3, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b04      	cmp	r3, #4
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2204      	movs	r2, #4
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_ADC_ClearFlag_JEOC>:
  * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 0204 	bic.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	605a      	str	r2, [r3, #4]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_ADC_DisableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f023 0220 	bic.w	r2, r3, #32
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	605a      	str	r2, [r3, #4]
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
	...

080037f4 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint8_t handle=255;
 80037fc:	23ff      	movs	r3, #255	; 0xff
 80037fe:	73fb      	strb	r3, [r7, #15]
  uint8_t i=0;
 8003800:	2300      	movs	r3, #0
 8003802:	73bb      	strb	r3, [r7, #14]

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 8003804:	e029      	b.n	800385a <RCM_RegisterRegConv+0x66>
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003806:	7bbb      	ldrb	r3, [r7, #14]
 8003808:	4a53      	ldr	r2, [pc, #332]	; (8003958 <RCM_RegisterRegConv+0x164>)
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <RCM_RegisterRegConv+0x28>
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d901      	bls.n	800381c <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
 8003818:	7bbb      	ldrb	r3, [r7, #14]
 800381a:	73fb      	strb	r3, [r7, #15]
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
 800381c:	7bbb      	ldrb	r3, [r7, #14]
 800381e:	4a4e      	ldr	r2, [pc, #312]	; (8003958 <RCM_RegisterRegConv+0x164>)
 8003820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d015      	beq.n	8003854 <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003828:	7bbb      	ldrb	r3, [r7, #14]
 800382a:	4a4b      	ldr	r2, [pc, #300]	; (8003958 <RCM_RegisterRegConv+0x164>)
 800382c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003830:	791a      	ldrb	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	791b      	ldrb	r3, [r3, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d10c      	bne.n	8003854 <RCM_RegisterRegConv+0x60>
            (RCM_handle_array [i]->regADC == regConv->regADC))
 800383a:	7bbb      	ldrb	r3, [r7, #14]
 800383c:	4a46      	ldr	r2, [pc, #280]	; (8003958 <RCM_RegisterRegConv+0x164>)
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003848:	429a      	cmp	r2, r3
 800384a:	d103      	bne.n	8003854 <RCM_RegisterRegConv+0x60>
          {
           handle =i; /* Reuse the same handle */
 800384c:	7bbb      	ldrb	r3, [r7, #14]
 800384e:	73fb      	strb	r3, [r7, #15]
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 8003850:	2304      	movs	r3, #4
 8003852:	73bb      	strb	r3, [r7, #14]
          }
      }
      i++;
 8003854:	7bbb      	ldrb	r3, [r7, #14]
 8003856:	3301      	adds	r3, #1
 8003858:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 800385a:	7bbb      	ldrb	r3, [r7, #14]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d9d2      	bls.n	8003806 <RCM_RegisterRegConv+0x12>
    }
    if (handle < RCM_MAX_CONV )
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b03      	cmp	r3, #3
 8003864:	d872      	bhi.n	800394c <RCM_RegisterRegConv+0x158>
    {
      RCM_handle_array [handle] = regConv;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	493b      	ldr	r1, [pc, #236]	; (8003958 <RCM_RegisterRegConv+0x164>)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	4a3a      	ldr	r2, [pc, #232]	; (800395c <RCM_RegisterRegConv+0x168>)
 8003874:	2100      	movs	r1, #0
 8003876:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ff09 	bl	8003696 <LL_ADC_IsEnabled>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d127      	bne.n	80038da <RCM_RegisterRegConv+0xe6>
      {
       LL_ADC_DisableIT_EOC(regConv->regADC);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff ff8f 	bl	80037b2 <LL_ADC_DisableIT_EOC>
       LL_ADC_ClearFlag_EOC(regConv->regADC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff ff70 	bl	800377e <LL_ADC_ClearFlag_EOC>
       LL_ADC_DisableIT_JEOC(regConv->regADC);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff95 	bl	80037d2 <LL_ADC_DisableIT_JEOC>
       LL_ADC_ClearFlag_JEOC(regConv->regADC);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff ff73 	bl	8003798 <LL_ADC_ClearFlag_JEOC>

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	217f      	movs	r1, #127	; 0x7f
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff feff 	bl	80036bc <LL_ADC_StartCalibration>
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 80038be:	bf00      	nop
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff12 	bl	80036ee <LL_ADC_IsCalibrationOnGoing>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f7      	bne.n	80038c0 <RCM_RegisterRegConv+0xcc>
        { }
        LL_ADC_Enable( regConv->regADC );
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff feca 	bl	800366e <LL_ADC_Enable>
      }
      else
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fe33 	bl	800354c <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	791b      	ldrb	r3, [r3, #4]
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	d812      	bhi.n	8003918 <RCM_RegisterRegConv+0x124>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	791b      	ldrb	r3, [r3, #4]
 80038f6:	069b      	lsls	r3, r3, #26
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	791b      	ldrb	r3, [r3, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	2302      	movs	r3, #2
 8003902:	408b      	lsls	r3, r1
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	791b      	ldrb	r3, [r3, #4]
 800390a:	4619      	mov	r1, r3
 800390c:	460b      	mov	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	440b      	add	r3, r1
 8003912:	051b      	lsls	r3, r3, #20
 8003914:	4313      	orrs	r3, r2
 8003916:	e014      	b.n	8003942 <RCM_RegisterRegConv+0x14e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	791b      	ldrb	r3, [r3, #4]
 800391c:	069b      	lsls	r3, r3, #26
 800391e:	461a      	mov	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	791b      	ldrb	r3, [r3, #4]
 8003924:	4619      	mov	r1, r3
 8003926:	2302      	movs	r3, #2
 8003928:	408b      	lsls	r3, r1
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	791b      	ldrb	r3, [r3, #4]
 8003930:	4619      	mov	r1, r3
 8003932:	460b      	mov	r3, r1
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	440b      	add	r3, r1
 8003938:	3b1e      	subs	r3, #30
 800393a:	051b      	lsls	r3, r3, #20
 800393c:	4313      	orrs	r3, r2
 800393e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	4619      	mov	r1, r3
 8003948:	f7ff fe48 	bl	80035dc <LL_ADC_SetChannelSamplingTime>
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000b10 	.word	0x20000b10
 800395c:	20000aec 	.word	0x20000aec

08003960 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	6818      	ldr	r0, [r3, #0]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	4a38      	ldr	r2, [pc, #224]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 8003978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397c:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800397e:	2b09      	cmp	r3, #9
 8003980:	d81c      	bhi.n	80039bc <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	4a34      	ldr	r2, [pc, #208]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 8003986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800398a:	791b      	ldrb	r3, [r3, #4]
 800398c:	069b      	lsls	r3, r3, #26
 800398e:	4619      	mov	r1, r3
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	4a31      	ldr	r2, [pc, #196]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 8003994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003998:	791b      	ldrb	r3, [r3, #4]
 800399a:	461a      	mov	r2, r3
 800399c:	2302      	movs	r3, #2
 800399e:	4093      	lsls	r3, r2
 80039a0:	ea41 0203 	orr.w	r2, r1, r3
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	492c      	ldr	r1, [pc, #176]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 80039a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ac:	791b      	ldrb	r3, [r3, #4]
 80039ae:	4619      	mov	r1, r3
 80039b0:	460b      	mov	r3, r1
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	440b      	add	r3, r1
 80039b6:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80039b8:	4313      	orrs	r3, r2
 80039ba:	e01e      	b.n	80039fa <RCM_ExecRegularConv+0x9a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	791b      	ldrb	r3, [r3, #4]
 80039c6:	069b      	lsls	r3, r3, #26
 80039c8:	4619      	mov	r1, r3
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	4a22      	ldr	r2, [pc, #136]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 80039ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d2:	791b      	ldrb	r3, [r3, #4]
 80039d4:	461a      	mov	r2, r3
 80039d6:	2302      	movs	r3, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	ea41 0203 	orr.w	r2, r1, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	491d      	ldr	r1, [pc, #116]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 80039e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039e6:	791b      	ldrb	r3, [r3, #4]
 80039e8:	4619      	mov	r1, r3
 80039ea:	460b      	mov	r3, r1
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	440b      	add	r3, r1
 80039f0:	3b1e      	subs	r3, #30
 80039f2:	051b      	lsls	r3, r3, #20
 80039f4:	4313      	orrs	r3, r2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80039f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039fa:	461a      	mov	r2, r3
 80039fc:	2106      	movs	r1, #6
 80039fe:	f7ff fdb8 	bl	8003572 <LL_ADC_REG_SetSequencerRanks>

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 8003a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fe96 	bl	800373e <LL_ADC_REG_ReadConversionData12>

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 8003a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fe7a 	bl	8003716 <LL_ADC_REG_StartConversion>
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8003a22:	bf00      	nop
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fe92 	bl	8003758 <LL_ADC_IsActiveFlag_EOC>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f4      	beq.n	8003a24 <RCM_ExecRegularConv+0xc4>
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <RCM_ExecRegularConv+0xf8>)
 8003a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fe7a 	bl	800373e <LL_ADC_REG_ReadConversionData12>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	81fb      	strh	r3, [r7, #14]
return retVal;
 8003a4e:	89fb      	ldrh	r3, [r7, #14]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000b10 	.word	0x20000b10

08003a5c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8003a5c:	b598      	push	{r3, r4, r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <RCM_ExecUserConv+0x64>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d128      	bne.n	8003aba <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <RCM_ExecUserConv+0x68>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff77 	bl	8003960 <RCM_ExecRegularConv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <RCM_ExecUserConv+0x6c>)
 8003a78:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <RCM_ExecUserConv+0x64>)
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8003a80:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <RCM_ExecUserConv+0x68>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b11      	ldr	r3, [pc, #68]	; (8003acc <RCM_ExecUserConv+0x70>)
 8003a88:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d014      	beq.n	8003aba <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003a90:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <RCM_ExecUserConv+0x64>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <RCM_ExecUserConv+0x68>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <RCM_ExecUserConv+0x70>)
 8003a9e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <RCM_ExecUserConv+0x68>)
 8003aa4:	7818      	ldrb	r0, [r3, #0]
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <RCM_ExecUserConv+0x6c>)
 8003aa8:	8819      	ldrh	r1, [r3, #0]
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <RCM_ExecUserConv+0x68>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	4a07      	ldr	r2, [pc, #28]	; (8003acc <RCM_ExecUserConv+0x70>)
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	47a0      	blx	r4
    }
  }
}
 8003aba:	bf00      	nop
 8003abc:	bd98      	pop	{r3, r4, r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000b0c 	.word	0x20000b0c
 8003ac4:	20000ae8 	.word	0x20000ae8
 8003ac8:	20000b20 	.word	0x20000b20
 8003acc:	20000aec 	.word	0x20000aec

08003ad0 <LL_ADC_ClearFlag_JEOS>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	601a      	str	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_TIM_ClearFlag_UPDATE>:
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f06f 0201 	mvn.w	r2, #1
 8003af8:	611a      	str	r2, [r3, #16]
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_TIM_ClearFlag_BRK>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b14:	611a      	str	r2, [r3, #16]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_TIM_IsActiveFlag_BRK>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	2b80      	cmp	r3, #128	; 0x80
 8003b34:	d101      	bne.n	8003b3a <LL_TIM_IsActiveFlag_BRK+0x18>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <LL_TIM_IsActiveFlag_BRK+0x1a>
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_TIM_ClearFlag_BRK2>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b56:	611a      	str	r2, [r3, #16]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_TIM_IsActiveFlag_BRK2>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b78:	d101      	bne.n	8003b7e <LL_TIM_IsActiveFlag_BRK2+0x1a>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d101      	bne.n	8003ba4 <LL_USART_IsActiveFlag_ORE+0x18>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <LL_USART_IsActiveFlag_ORE+0x1a>
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d101      	bne.n	8003bca <LL_USART_IsActiveFlag_RXNE+0x18>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <LL_USART_IsActiveFlag_RXNE+0x1a>
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b80      	cmp	r3, #128	; 0x80
 8003bea:	d101      	bne.n	8003bf0 <LL_USART_IsActiveFlag_TXE+0x18>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_USART_IsActiveFlag_TXE+0x1a>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	621a      	str	r2, [r3, #32]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );
 8003c38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c3c:	f7ff ff48 	bl	8003ad0 <LL_ADC_ClearFlag_JEOS>

  // Highfrequency task
  TSK_HighFrequencyTask();
 8003c40:	f7fe fc44 	bl	80024cc <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <TIM1_UP_TIM16_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
 8003c4c:	4803      	ldr	r0, [pc, #12]	; (8003c5c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003c4e:	f7ff ff4c 	bl	8003aea <LL_TIM_ClearFlag_UPDATE>
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003c52:	4803      	ldr	r0, [pc, #12]	; (8003c60 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003c54:	f009 f9e5 	bl	800d022 <R3_1_TIMx_UP_IRQHandler>

 /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40012c00 	.word	0x40012c00
 8003c60:	20000250 	.word	0x20000250

08003c64 <TIM1_BRK_TIM15_IRQHandler>:

void TIMx_BRK_M1_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
 8003c68:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003c6a:	f7ff ff5a 	bl	8003b22 <LL_TIM_IsActiveFlag_BRK>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <TIM1_BRK_TIM15_IRQHandler+0x1c>
  {
    LL_TIM_ClearFlag_BRK(TIM1);
 8003c74:	480a      	ldr	r0, [pc, #40]	; (8003ca0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003c76:	f7ff ff46 	bl	8003b06 <LL_TIM_ClearFlag_BRK>
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8003c7a:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003c7c:	f009 fa37 	bl	800d0ee <R3_1_BRK_IRQHandler>
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
 8003c80:	4807      	ldr	r0, [pc, #28]	; (8003ca0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003c82:	f7ff ff6f 	bl	8003b64 <LL_TIM_IsActiveFlag_BRK2>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <TIM1_BRK_TIM15_IRQHandler+0x34>
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
 8003c8c:	4804      	ldr	r0, [pc, #16]	; (8003ca0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8003c8e:	f7ff ff5b 	bl	8003b48 <LL_TIM_ClearFlag_BRK2>
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);
 8003c92:	4804      	ldr	r0, [pc, #16]	; (8003ca4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8003c94:	f009 f9ee 	bl	800d074 <R3_1_BRK2_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 8003c98:	f7fe f8e8 	bl	8001e6c <MC_Scheduler>

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	20000250 	.word	0x20000250

08003ca8 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003cae:	4b23      	ldr	r3, [pc, #140]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003cb0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff7c 	bl	8003bb2 <LL_USART_IsActiveFlag_RXNE>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d018      	beq.n	8003cf2 <USART1_IRQHandler+0x4a>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8003cc0:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003cc2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ffa6 	bl	8003c18 <LL_USART_ReceiveData8>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	481a      	ldr	r0, [pc, #104]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003cd4:	f00a fc48 	bl	800e568 <UFCP_RX_IRQ_Handler>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	80fb      	strh	r3, [r7, #6]
    if (retVal == 1)
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <USART1_IRQHandler+0x40>
    {
      UI_SerialCommunicationTimeOutStart();
 8003ce4:	f000 fc12 	bl	800450c <UI_SerialCommunicationTimeOutStart>
    }
    if (retVal == 2)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d101      	bne.n	8003cf2 <USART1_IRQHandler+0x4a>
    {
      UI_SerialCommunicationTimeOutStop();
 8003cee:	f000 fc01 	bl	80044f4 <UI_SerialCommunicationTimeOutStop>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003cf4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff6d 	bl	8003bd8 <LL_USART_IsActiveFlag_TXE>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <USART1_IRQHandler+0x62>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8003d04:	480d      	ldr	r0, [pc, #52]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003d06:	f00a fcd3 	bl	800e6b0 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003d0c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff ff3b 	bl	8003b8c <LL_USART_IsActiveFlag_ORE>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <USART1_IRQHandler+0x8a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8003d1c:	4807      	ldr	r0, [pc, #28]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003d1e:	f00a fd27 	bl	800e770 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <USART1_IRQHandler+0x94>)
 8003d24:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff68 	bl	8003bfe <LL_USART_ClearFlag_ORE>
    UI_SerialCommunicationTimeOutStop();
 8003d2e:	f000 fbe1 	bl	80044f4 <UI_SerialCommunicationTimeOutStop>
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */

}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000558 	.word	0x20000558

08003d40 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003d46:	f7fe fd77 	bl	8002838 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HardFault_Handler+0x90>)
 8003d4c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ff1b 	bl	8003b8c <LL_USART_IsActiveFlag_ORE>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HardFault_Handler+0x32>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8003d5c:	481c      	ldr	r0, [pc, #112]	; (8003dd0 <HardFault_Handler+0x90>)
 8003d5e:	f00a fd07 	bl	800e770 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HardFault_Handler+0x90>)
 8003d64:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff ff48 	bl	8003bfe <LL_USART_ClearFlag_ORE>
        UI_SerialCommunicationTimeOutStop();
 8003d6e:	f000 fbc1 	bl	80044f4 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HardFault_Handler+0x90>)
 8003d74:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ff2d 	bl	8003bd8 <LL_USART_IsActiveFlag_TXE>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HardFault_Handler+0x4a>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8003d84:	4812      	ldr	r0, [pc, #72]	; (8003dd0 <HardFault_Handler+0x90>)
 8003d86:	f00a fc93 	bl	800e6b0 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HardFault_Handler+0x90>)
 8003d8c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff0e 	bl	8003bb2 <LL_USART_IsActiveFlag_RXNE>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0d6      	beq.n	8003d4a <HardFault_Handler+0xa>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <HardFault_Handler+0x90>)
 8003d9e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff38 	bl	8003c18 <LL_USART_ReceiveData8>
 8003da8:	4603      	mov	r3, r0
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4619      	mov	r1, r3
 8003dae:	4808      	ldr	r0, [pc, #32]	; (8003dd0 <HardFault_Handler+0x90>)
 8003db0:	f00a fbda 	bl	800e568 <UFCP_RX_IRQ_Handler>
 8003db4:	4603      	mov	r3, r0
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	80fb      	strh	r3, [r7, #6]
        if (retVal == 1)
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HardFault_Handler+0x84>
        {
          UI_SerialCommunicationTimeOutStart();
 8003dc0:	f000 fba4 	bl	800450c <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d1bf      	bne.n	8003d4a <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8003dca:	f000 fb93 	bl	80044f4 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8003dce:	e7bc      	b.n	8003d4a <HardFault_Handler+0xa>
 8003dd0:	20000558 	.word	0x20000558

08003dd4 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <SysTick_Handler+0x30>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d106      	bne.n	8003dee <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 8003de0:	f001 fd6c 	bl	80058bc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003de4:	f003 f9dd 	bl	80071a2 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <SysTick_Handler+0x30>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <SysTick_Handler+0x30>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <SysTick_Handler+0x30>)
 8003df8:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8003dfa:	f7fe f827 	bl	8001e4c <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200006cc 	.word	0x200006cc

08003e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <HAL_MspInit+0x44>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <HAL_MspInit+0x44>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	6193      	str	r3, [r2, #24]
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <HAL_MspInit+0x44>)
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_MspInit+0x44>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_MspInit+0x44>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e30:	61d3      	str	r3, [r2, #28]
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_MspInit+0x44>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003e3e:	2004      	movs	r0, #4
 8003e40:	f003 f96e 	bl	8007120 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08c      	sub	sp, #48	; 0x30
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e70:	d125      	bne.n	8003ebe <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003e72:	4b2a      	ldr	r3, [pc, #168]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6153      	str	r3, [r2, #20]
 8003e7e:	4b27      	ldr	r3, [pc, #156]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8a:	4b24      	ldr	r3, [pc, #144]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	4a23      	ldr	r2, [pc, #140]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e94:	6153      	str	r3, [r2, #20]
 8003e96:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 8003ea2:	2307      	movs	r3, #7
 8003ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eae:	f107 031c 	add.w	r3, r7, #28
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb8:	f003 f9f0 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003ebc:	e029      	b.n	8003f12 <HAL_ADC_MspInit+0xc2>
  else if(hadc->Instance==ADC3)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a17      	ldr	r2, [pc, #92]	; (8003f20 <HAL_ADC_MspInit+0xd0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d124      	bne.n	8003f12 <HAL_ADC_MspInit+0xc2>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003ec8:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ed2:	6153      	str	r3, [r2, #20]
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	4a0d      	ldr	r2, [pc, #52]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eea:	6153      	str	r3, [r2, #20]
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_ADC_MspInit+0xcc>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8003ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003efe:	2303      	movs	r3, #3
 8003f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003f06:	f107 031c 	add.w	r3, r7, #28
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4805      	ldr	r0, [pc, #20]	; (8003f24 <HAL_ADC_MspInit+0xd4>)
 8003f0e:	f003 f9c5 	bl	800729c <HAL_GPIO_Init>
}
 8003f12:	bf00      	nop
 8003f14:	3730      	adds	r7, #48	; 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	50000400 	.word	0x50000400
 8003f24:	48000400 	.word	0x48000400

08003f28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <HAL_CAN_MspInit+0x7c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d128      	bne.n	8003f9c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f4a:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <HAL_CAN_MspInit+0x80>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	; (8003fa8 <HAL_CAN_MspInit+0x80>)
 8003f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f54:	61d3      	str	r3, [r2, #28]
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <HAL_CAN_MspInit+0x80>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_CAN_MspInit+0x80>)
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <HAL_CAN_MspInit+0x80>)
 8003f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f6c:	6153      	str	r3, [r2, #20]
 8003f6e:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_CAN_MspInit+0x80>)
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8003f8c:	2309      	movs	r3, #9
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	4619      	mov	r1, r3
 8003f96:	4805      	ldr	r0, [pc, #20]	; (8003fac <HAL_CAN_MspInit+0x84>)
 8003f98:	f003 f980 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003f9c:	bf00      	nop
 8003f9e:	3728      	adds	r7, #40	; 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40006400 	.word	0x40006400
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	48000400 	.word	0x48000400

08003fb0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2e      	ldr	r2, [pc, #184]	; (8004088 <HAL_COMP_MspInit+0xd8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d119      	bne.n	8004006 <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	4b2e      	ldr	r3, [pc, #184]	; (800408c <HAL_COMP_MspInit+0xdc>)
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	4a2d      	ldr	r2, [pc, #180]	; (800408c <HAL_COMP_MspInit+0xdc>)
 8003fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fdc:	6153      	str	r3, [r2, #20]
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_COMP_MspInit+0xdc>)
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]
    /**COMP2 GPIO Configuration
    PA7     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f107 0314 	add.w	r3, r7, #20
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004000:	f003 f94c 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP6_MspInit 1 */

  /* USER CODE END COMP6_MspInit 1 */
  }

}
 8004004:	e03b      	b.n	800407e <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP4)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a21      	ldr	r2, [pc, #132]	; (8004090 <HAL_COMP_MspInit+0xe0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d118      	bne.n	8004042 <HAL_COMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004010:	4b1e      	ldr	r3, [pc, #120]	; (800408c <HAL_COMP_MspInit+0xdc>)
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	4a1d      	ldr	r2, [pc, #116]	; (800408c <HAL_COMP_MspInit+0xdc>)
 8004016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800401a:	6153      	str	r3, [r2, #20]
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_COMP_MspInit+0xdc>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004028:	2301      	movs	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800402c:	2303      	movs	r3, #3
 800402e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4619      	mov	r1, r3
 800403a:	4816      	ldr	r0, [pc, #88]	; (8004094 <HAL_COMP_MspInit+0xe4>)
 800403c:	f003 f92e 	bl	800729c <HAL_GPIO_Init>
}
 8004040:	e01d      	b.n	800407e <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP6)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <HAL_COMP_MspInit+0xe8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d118      	bne.n	800407e <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <HAL_COMP_MspInit+0xdc>)
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4a0e      	ldr	r2, [pc, #56]	; (800408c <HAL_COMP_MspInit+0xdc>)
 8004052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004056:	6153      	str	r3, [r2, #20]
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_COMP_MspInit+0xdc>)
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800406a:	2303      	movs	r3, #3
 800406c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	4619      	mov	r1, r3
 8004078:	4806      	ldr	r0, [pc, #24]	; (8004094 <HAL_COMP_MspInit+0xe4>)
 800407a:	f003 f90f 	bl	800729c <HAL_GPIO_Init>
}
 800407e:	bf00      	nop
 8004080:	3728      	adds	r7, #40	; 0x28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40010020 	.word	0x40010020
 800408c:	40021000 	.word	0x40021000
 8004090:	40010028 	.word	0x40010028
 8004094:	48000400 	.word	0x48000400
 8004098:	40010030 	.word	0x40010030

0800409c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a4:	f107 0314 	add.w	r3, r7, #20
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <HAL_DAC_MspInit+0x74>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d124      	bne.n	8004108 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <HAL_DAC_MspInit+0x78>)
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	4a14      	ldr	r2, [pc, #80]	; (8004114 <HAL_DAC_MspInit+0x78>)
 80040c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040c8:	61d3      	str	r3, [r2, #28]
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_DAC_MspInit+0x78>)
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <HAL_DAC_MspInit+0x78>)
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <HAL_DAC_MspInit+0x78>)
 80040dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e0:	6153      	str	r3, [r2, #20]
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <HAL_DAC_MspInit+0x78>)
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040ee:	2310      	movs	r3, #16
 80040f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f2:	2303      	movs	r3, #3
 80040f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fa:	f107 0314 	add.w	r3, r7, #20
 80040fe:	4619      	mov	r1, r3
 8004100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004104:	f003 f8ca 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004108:	bf00      	nop
 800410a:	3728      	adds	r7, #40	; 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40007400 	.word	0x40007400
 8004114:	40021000 	.word	0x40021000

08004118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_SPI_MspInit+0x7c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d127      	bne.n	800418a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_SPI_MspInit+0x80>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <HAL_SPI_MspInit+0x80>)
 8004140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004144:	6193      	str	r3, [r2, #24]
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <HAL_SPI_MspInit+0x80>)
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004152:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_SPI_MspInit+0x80>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4a10      	ldr	r2, [pc, #64]	; (8004198 <HAL_SPI_MspInit+0x80>)
 8004158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800415c:	6153      	str	r3, [r2, #20]
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <HAL_SPI_MspInit+0x80>)
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800416a:	2338      	movs	r3, #56	; 0x38
 800416c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	2302      	movs	r3, #2
 8004170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004172:	2301      	movs	r3, #1
 8004174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004176:	2303      	movs	r3, #3
 8004178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800417a:	2305      	movs	r3, #5
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	4619      	mov	r1, r3
 8004184:	4805      	ldr	r0, [pc, #20]	; (800419c <HAL_SPI_MspInit+0x84>)
 8004186:	f003 f889 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800418a:	bf00      	nop
 800418c:	3728      	adds	r7, #40	; 0x28
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40013000 	.word	0x40013000
 8004198:	40021000 	.word	0x40021000
 800419c:	48000400 	.word	0x48000400

080041a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <HAL_TIM_Base_MspInit+0xa0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 80041c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041cc:	6193      	str	r3, [r2, #24]
 80041ce:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80041da:	e02d      	b.n	8004238 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM2)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e4:	d128      	bne.n	8004238 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	61d3      	str	r3, [r2, #28]
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 8004204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004208:	6153      	str	r3, [r2, #20]
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_TIM_Base_MspInit+0xa4>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_PWM_INPUT_Pin;
 8004216:	2320      	movs	r3, #32
 8004218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800421e:	2302      	movs	r3, #2
 8004220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004222:	2303      	movs	r3, #3
 8004224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004226:	2301      	movs	r3, #1
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_INPUT_GPIO_Port, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004234:	f003 f832 	bl	800729c <HAL_GPIO_Init>
}
 8004238:	bf00      	nop
 800423a:	3728      	adds	r7, #40	; 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a32      	ldr	r2, [pc, #200]	; (8004330 <HAL_TIM_MspPostInit+0xe8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d15d      	bne.n	8004326 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	4b32      	ldr	r3, [pc, #200]	; (8004334 <HAL_TIM_MspPostInit+0xec>)
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	4a31      	ldr	r2, [pc, #196]	; (8004334 <HAL_TIM_MspPostInit+0xec>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004274:	6153      	str	r3, [r2, #20]
 8004276:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <HAL_TIM_MspPostInit+0xec>)
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	4b2c      	ldr	r3, [pc, #176]	; (8004334 <HAL_TIM_MspPostInit+0xec>)
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	4a2b      	ldr	r2, [pc, #172]	; (8004334 <HAL_TIM_MspPostInit+0xec>)
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	6153      	str	r3, [r2, #20]
 800428e:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_TIM_MspPostInit+0xec>)
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin;
 800429a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800429e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a0:	2302      	movs	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042a4:	2301      	movs	r3, #1
 80042a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042a8:	2303      	movs	r3, #3
 80042aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80042ac:	2306      	movs	r3, #6
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_VL_GPIO_Port, &GPIO_InitStruct);
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4619      	mov	r1, r3
 80042b6:	4820      	ldr	r0, [pc, #128]	; (8004338 <HAL_TIM_MspPostInit+0xf0>)
 80042b8:	f002 fff0 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80042bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c2:	2302      	movs	r3, #2
 80042c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ca:	2303      	movs	r3, #3
 80042cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80042ce:	2304      	movs	r3, #4
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80042d2:	f107 0314 	add.w	r3, r7, #20
 80042d6:	4619      	mov	r1, r3
 80042d8:	4817      	ldr	r0, [pc, #92]	; (8004338 <HAL_TIM_MspPostInit+0xf0>)
 80042da:	f002 ffdf 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80042de:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80042e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e4:	2302      	movs	r3, #2
 80042e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80042e8:	2302      	movs	r3, #2
 80042ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042ec:	2303      	movs	r3, #3
 80042ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80042f0:	2306      	movs	r3, #6
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042fe:	f002 ffcd 	bl	800729c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004308:	2302      	movs	r3, #2
 800430a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800430c:	2301      	movs	r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004310:	2303      	movs	r3, #3
 8004312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004314:	2306      	movs	r3, #6
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004318:	f107 0314 	add.w	r3, r7, #20
 800431c:	4619      	mov	r1, r3
 800431e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004322:	f002 ffbb 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004326:	bf00      	nop
 8004328:	3728      	adds	r7, #40	; 0x28
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40021000 	.word	0x40021000
 8004338:	48000400 	.word	0x48000400

0800433c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a17      	ldr	r2, [pc, #92]	; (80043b8 <HAL_UART_MspInit+0x7c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d127      	bne.n	80043ae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800435e:	4b17      	ldr	r3, [pc, #92]	; (80043bc <HAL_UART_MspInit+0x80>)
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_UART_MspInit+0x80>)
 8004364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004368:	6193      	str	r3, [r2, #24]
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_UART_MspInit+0x80>)
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_UART_MspInit+0x80>)
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <HAL_UART_MspInit+0x80>)
 800437c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004380:	6153      	str	r3, [r2, #20]
 8004382:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <HAL_UART_MspInit+0x80>)
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800438e:	23c0      	movs	r3, #192	; 0xc0
 8004390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	2302      	movs	r3, #2
 8004394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439a:	2300      	movs	r3, #0
 800439c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800439e:	2307      	movs	r3, #7
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a2:	f107 0314 	add.w	r3, r7, #20
 80043a6:	4619      	mov	r1, r3
 80043a8:	4805      	ldr	r0, [pc, #20]	; (80043c0 <HAL_UART_MspInit+0x84>)
 80043aa:	f002 ff77 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80043ae:	bf00      	nop
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40013800 	.word	0x40013800
 80043bc:	40021000 	.word	0x40021000
 80043c0:	48000400 	.word	0x48000400

080043c4 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80043c4:	b5b0      	push	{r4, r5, r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	607a      	str	r2, [r7, #4]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	460b      	mov	r3, r1
 80043d2:	72fb      	strb	r3, [r7, #11]

    pMCP = &MCP_UI_Params;
 80043d4:	4b14      	ldr	r3, [pc, #80]	; (8004428 <UI_TaskInit+0x64>)
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <UI_TaskInit+0x68>)
 80043d8:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 80043da:	4b13      	ldr	r3, [pc, #76]	; (8004428 <UI_TaskInit+0x64>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a14      	ldr	r2, [pc, #80]	; (8004430 <UI_TaskInit+0x6c>)
 80043e0:	461c      	mov	r4, r3
 80043e2:	4615      	mov	r5, r2
 80043e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80043ec:	e884 0003 	stmia.w	r4, {r0, r1}

    UFCP_Init( & pUSART );
 80043f0:	4810      	ldr	r0, [pc, #64]	; (8004434 <UI_TaskInit+0x70>)
 80043f2:	f00a f8ac 	bl	800e54e <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <UI_TaskInit+0x64>)
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <UI_TaskInit+0x74>)
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <UI_TaskInit+0x78>)
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <UI_TaskInit+0x7c>)
 8004406:	490b      	ldr	r1, [pc, #44]	; (8004434 <UI_TaskInit+0x70>)
 8004408:	f7fe fa78 	bl	80028fc <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <UI_TaskInit+0x64>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	7af9      	ldrb	r1, [r7, #11]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	f000 f882 	bl	8004524 <UI_Init>

}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bdb0      	pop	{r4, r5, r7, pc}
 8004428:	20000720 	.word	0x20000720
 800442c:	20000b24 	.word	0x20000b24
 8004430:	200006f8 	.word	0x200006f8
 8004434:	20000558 	.word	0x20000558
 8004438:	0800e871 	.word	0x0800e871
 800443c:	0800e797 	.word	0x0800e797
 8004440:	0800e7dd 	.word	0x0800e7dd

08004444 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  if(bUITaskCounter > 0u)
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <UI_Scheduler+0x58>)
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <UI_Scheduler+0x1c>
  {
    bUITaskCounter--;
 8004452:	4b12      	ldr	r3, [pc, #72]	; (800449c <UI_Scheduler+0x58>)
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <UI_Scheduler+0x58>)
 800445e:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <UI_Scheduler+0x5c>)
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b01      	cmp	r3, #1
 8004468:	d906      	bls.n	8004478 <UI_Scheduler+0x34>
  {
    bCOMTimeoutCounter--;
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <UI_Scheduler+0x5c>)
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <UI_Scheduler+0x5c>)
 8004476:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <UI_Scheduler+0x60>)
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d906      	bls.n	8004490 <UI_Scheduler+0x4c>
  {
    bCOMATRTimeCounter--;
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <UI_Scheduler+0x60>)
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <UI_Scheduler+0x60>)
 800448e:	801a      	strh	r2, [r3, #0]
  }
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000724 	.word	0x20000724
 80044a0:	20000726 	.word	0x20000726
 80044a4:	200006ce 	.word	0x200006ce

080044a8 <UI_IdleTimeHasElapsed>:
{
  return pMCP;
}

__weak bool UI_IdleTimeHasElapsed(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
  bool retVal = false;
 80044ae:	2300      	movs	r3, #0
 80044b0:	71fb      	strb	r3, [r7, #7]
  if (bUITaskCounter == 0u)
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <UI_IdleTimeHasElapsed+0x28>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <UI_IdleTimeHasElapsed+0x18>
  {
    retVal = true;
 80044bc:	2301      	movs	r3, #1
 80044be:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 80044c0:	79fb      	ldrb	r3, [r7, #7]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000724 	.word	0x20000724

080044d4 <UI_SetIdleTime>:

__weak void UI_SetIdleTime(uint16_t SysTickCount)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
  bUITaskCounter = SysTickCount;
 80044de:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <UI_SetIdleTime+0x1c>)
 80044e0:	88fb      	ldrh	r3, [r7, #6]
 80044e2:	8013      	strh	r3, [r2, #0]
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	20000724 	.word	0x20000724

080044f4 <UI_SerialCommunicationTimeOutStop>:
  }
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = 0u;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <UI_SerialCommunicationTimeOutStop+0x14>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	801a      	strh	r2, [r3, #0]
}
 80044fe:	bf00      	nop
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	20000726 	.word	0x20000726

0800450c <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <UI_SerialCommunicationTimeOutStart+0x14>)
 8004512:	224f      	movs	r2, #79	; 0x4f
 8004514:	801a      	strh	r2, [r3, #0]
}
 8004516:	bf00      	nop
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	20000726 	.word	0x20000726

08004524 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	460b      	mov	r3, r1
 8004532:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	7afa      	ldrb	r2, [r7, #11]
 8004538:	711a      	strb	r2, [r3, #4]
  pHandle->pMCI = pMCI;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	609a      	str	r2, [r3, #8]
  pHandle->pMCT = pMCT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	60da      	str	r2, [r3, #12]
  pHandle->bSelectedDrive = 0u;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	751a      	strb	r2, [r3, #20]
  pHandle->pUICfg = pUICfg;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	611a      	str	r2, [r3, #16]
}
 8004552:	bf00      	nop
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 800456a:	2301      	movs	r3, #1
 800456c:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	791b      	ldrb	r3, [r3, #4]
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <UI_SelectMC+0x20>
  {
    retVal = false;
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]
 800457c:	e002      	b.n	8004584 <UI_SelectMC+0x26>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	751a      	strb	r2, [r3, #20]
  }
  return retVal;
 8004584:	7bfb      	ldrb	r3, [r7, #15]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7d1b      	ldrb	r3, [r3, #20]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b096      	sub	sp, #88	; 0x58
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	460b      	mov	r3, r1
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	72fb      	strb	r3, [r7, #11]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	7d1b      	ldrb	r3, [r3, #20]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	643b      	str	r3, [r7, #64]	; 0x40
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	7d1b      	ldrb	r3, [r3, #20]
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  bool retVal = true;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  switch (bRegID)
 80045e0:	7afb      	ldrb	r3, [r7, #11]
 80045e2:	2b5b      	cmp	r3, #91	; 0x5b
 80045e4:	f200 8223 	bhi.w	8004a2e <UI_SetReg+0x482>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UI_SetReg+0x44>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004761 	.word	0x08004761
 80045f4:	08004a2f 	.word	0x08004a2f
 80045f8:	08004a2f 	.word	0x08004a2f
 80045fc:	080047d1 	.word	0x080047d1
 8004600:	08004a2f 	.word	0x08004a2f
 8004604:	0800479b 	.word	0x0800479b
 8004608:	080047ad 	.word	0x080047ad
 800460c:	080047bf 	.word	0x080047bf
 8004610:	08004809 	.word	0x08004809
 8004614:	08004823 	.word	0x08004823
 8004618:	08004835 	.word	0x08004835
 800461c:	08004847 	.word	0x08004847
 8004620:	08004859 	.word	0x08004859
 8004624:	08004873 	.word	0x08004873
 8004628:	08004885 	.word	0x08004885
 800462c:	08004897 	.word	0x08004897
 8004630:	080048a9 	.word	0x080048a9
 8004634:	08004907 	.word	0x08004907
 8004638:	08004a2f 	.word	0x08004a2f
 800463c:	08004a2f 	.word	0x08004a2f
 8004640:	08004963 	.word	0x08004963
 8004644:	080049bf 	.word	0x080049bf
 8004648:	08004a2f 	.word	0x08004a2f
 800464c:	08004a2f 	.word	0x08004a2f
 8004650:	08004a2f 	.word	0x08004a2f
 8004654:	08004a2f 	.word	0x08004a2f
 8004658:	08004a2f 	.word	0x08004a2f
 800465c:	08004a2f 	.word	0x08004a2f
 8004660:	08004a2f 	.word	0x08004a2f
 8004664:	08004a2f 	.word	0x08004a2f
 8004668:	08004a2f 	.word	0x08004a2f
 800466c:	08004a2f 	.word	0x08004a2f
 8004670:	08004a2f 	.word	0x08004a2f
 8004674:	08004a2f 	.word	0x08004a2f
 8004678:	08004a2f 	.word	0x08004a2f
 800467c:	08004a2f 	.word	0x08004a2f
 8004680:	08004a2f 	.word	0x08004a2f
 8004684:	08004a2f 	.word	0x08004a2f
 8004688:	08004a2f 	.word	0x08004a2f
 800468c:	08004a2f 	.word	0x08004a2f
 8004690:	08004a2f 	.word	0x08004a2f
 8004694:	08004a2f 	.word	0x08004a2f
 8004698:	08004a2f 	.word	0x08004a2f
 800469c:	08004a2f 	.word	0x08004a2f
 80046a0:	08004a2f 	.word	0x08004a2f
 80046a4:	08004a2f 	.word	0x08004a2f
 80046a8:	08004a2f 	.word	0x08004a2f
 80046ac:	08004a2f 	.word	0x08004a2f
 80046b0:	08004a2f 	.word	0x08004a2f
 80046b4:	08004a2f 	.word	0x08004a2f
 80046b8:	08004a2f 	.word	0x08004a2f
 80046bc:	08004a2f 	.word	0x08004a2f
 80046c0:	08004a2f 	.word	0x08004a2f
 80046c4:	08004a2f 	.word	0x08004a2f
 80046c8:	08004a2f 	.word	0x08004a2f
 80046cc:	08004a2f 	.word	0x08004a2f
 80046d0:	08004a2f 	.word	0x08004a2f
 80046d4:	08004a2f 	.word	0x08004a2f
 80046d8:	08004a2f 	.word	0x08004a2f
 80046dc:	08004a2f 	.word	0x08004a2f
 80046e0:	08004a2f 	.word	0x08004a2f
 80046e4:	08004a2f 	.word	0x08004a2f
 80046e8:	08004a2f 	.word	0x08004a2f
 80046ec:	08004a2f 	.word	0x08004a2f
 80046f0:	08004a2f 	.word	0x08004a2f
 80046f4:	08004a21 	.word	0x08004a21
 80046f8:	08004a2f 	.word	0x08004a2f
 80046fc:	08004a2f 	.word	0x08004a2f
 8004700:	08004a2f 	.word	0x08004a2f
 8004704:	08004a2f 	.word	0x08004a2f
 8004708:	08004a2f 	.word	0x08004a2f
 800470c:	08004a2f 	.word	0x08004a2f
 8004710:	08004a2f 	.word	0x08004a2f
 8004714:	08004a2f 	.word	0x08004a2f
 8004718:	08004a2f 	.word	0x08004a2f
 800471c:	08004a2f 	.word	0x08004a2f
 8004720:	08004a2f 	.word	0x08004a2f
 8004724:	08004a2f 	.word	0x08004a2f
 8004728:	08004a2f 	.word	0x08004a2f
 800472c:	08004a2f 	.word	0x08004a2f
 8004730:	08004a2f 	.word	0x08004a2f
 8004734:	08004a2f 	.word	0x08004a2f
 8004738:	08004a2f 	.word	0x08004a2f
 800473c:	08004a2f 	.word	0x08004a2f
 8004740:	08004a2f 	.word	0x08004a2f
 8004744:	08004a2f 	.word	0x08004a2f
 8004748:	08004a2f 	.word	0x08004a2f
 800474c:	08004a2f 	.word	0x08004a2f
 8004750:	08004a2f 	.word	0x08004a2f
 8004754:	08004a2f 	.word	0x08004a2f
 8004758:	08004a2f 	.word	0x08004a2f
 800475c:	08004775 	.word	0x08004775
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4619      	mov	r1, r3
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fef9 	bl	800455e <UI_SelectMC>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }
    break;
 8004772:	e169      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	4aa7      	ldr	r2, [pc, #668]	; (8004a1c <UI_SetReg+0x470>)
 8004780:	fb82 1203 	smull	r1, r2, r2, r3
 8004784:	441a      	add	r2, r3
 8004786:	1152      	asrs	r2, r2, #5
 8004788:	17db      	asrs	r3, r3, #31
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	b21b      	sxth	r3, r3
 800478e:	2200      	movs	r2, #0
 8004790:	4619      	mov	r1, r3
 8004792:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004794:	f7fc fe2d 	bl	80013f2 <MCI_ExecSpeedRamp>
    }
    break;
 8004798:	e156      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 800479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	b212      	sxth	r2, r2
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f006 fd18 	bl	800b1da <PID_SetKP>
    }
    break;
 80047aa:	e14d      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	b212      	sxth	r2, r2
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f006 fd1e 	bl	800b1f8 <PID_SetKI>
    }
    break;
 80047bc:	e144      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	b212      	sxth	r2, r2
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f006 fd64 	bl	800b296 <PID_SetKD>
    }
    break;
 80047ce:	e13b      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d108      	bne.n	80047ea <UI_SetReg+0x23e>
      {
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80047d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047da:	f7fd f828 	bl	800182e <MCI_GetTeref>
 80047de:	4603      	mov	r3, r0
 80047e0:	2200      	movs	r2, #0
 80047e2:	4619      	mov	r1, r3
 80047e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047e6:	f7fc fe21 	bl	800142c <MCI_ExecTorqueRamp>
      }
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	f040 8121 	bne.w	8004a36 <UI_SetReg+0x48a>
      {
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80047f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047f6:	f7fc ff7d 	bl	80016f4 <MCI_GetMecSpeedRefUnit>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2200      	movs	r2, #0
 80047fe:	4619      	mov	r1, r3
 8004800:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004802:	f7fc fdf6 	bl	80013f2 <MCI_ExecSpeedRamp>
      }
    }
    break;
 8004806:	e116      	b.n	8004a36 <UI_SetReg+0x48a>

  case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004808:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800480a:	f7fc ffc8 	bl	800179e <MCI_GetIqdref>
 800480e:	4603      	mov	r3, r0
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
      currComp.q = (int16_t)wValue;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	b21b      	sxth	r3, r3
 8004816:	853b      	strh	r3, [r7, #40]	; 0x28
      MCI_SetCurrentReferences(pMCI,currComp);
 8004818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800481c:	f7fc fe23 	bl	8001466 <MCI_SetCurrentReferences>
    }
    break;
 8004820:	e112      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KP:
    {
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	b212      	sxth	r2, r2
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f006 fcd4 	bl	800b1da <PID_SetKP>
    }
    break;
 8004832:	e109      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KI:
    {
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8004834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	b212      	sxth	r2, r2
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f006 fcda 	bl	800b1f8 <PID_SetKI>
    }
    break;
 8004844:	e100      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_TORQUE_KD:
    {
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	b212      	sxth	r2, r2
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f006 fd20 	bl	800b296 <PID_SetKD>
    }
    break;
 8004856:	e0f7      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004858:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800485a:	f7fc ffa0 	bl	800179e <MCI_GetIqdref>
 800485e:	4603      	mov	r3, r0
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
      currComp.d = (int16_t)wValue;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	b21b      	sxth	r3, r3
 8004866:	84fb      	strh	r3, [r7, #38]	; 0x26
      MCI_SetCurrentReferences(pMCI,currComp);
 8004868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800486a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800486c:	f7fc fdfb 	bl	8001466 <MCI_SetCurrentReferences>
    }
    break;
 8004870:	e0ea      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KP:
    {
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8004872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	b212      	sxth	r2, r2
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f006 fcac 	bl	800b1da <PID_SetKP>
    }
    break;
 8004882:	e0e1      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KI:
    {
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8004884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	b212      	sxth	r2, r2
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f006 fcb2 	bl	800b1f8 <PID_SetKI>
    }
    break;
 8004894:	e0d8      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_FLUX_KD:
    {
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8004896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	b212      	sxth	r2, r2
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f006 fcf8 	bl	800b296 <PID_SetKD>
    }
    break;
 80048a6:	e0cf      	b.n	8004a48 <UI_SetReg+0x49c>

  case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	7d1b      	ldrb	r3, [r3, #20]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	653b      	str	r3, [r7, #80]	; 0x50
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	0f1b      	lsrs	r3, r3, #28
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d102      	bne.n	80048ca <UI_SetReg+0x31e>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	0e1b      	lsrs	r3, r3, #24
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	2b09      	cmp	r3, #9
 80048d4:	d102      	bne.n	80048dc <UI_SetReg+0x330>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	653b      	str	r3, [r7, #80]	; 0x50
      }
      if (pSPD != MC_NULL)
 80048dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80ab 	beq.w	8004a3a <UI_SetReg+0x48e>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80048e4:	f107 0220 	add.w	r2, r7, #32
 80048e8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80048ec:	4619      	mov	r1, r3
 80048ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80048f0:	f00a fdc2 	bl	800f478 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	b21b      	sxth	r3, r3
 80048f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80048fc:	4619      	mov	r1, r3
 80048fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004900:	f00a fdc2 	bl	800f488 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8004904:	e099      	b.n	8004a3a <UI_SetReg+0x48e>

  case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	7d1b      	ldrb	r3, [r3, #20]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	64fb      	str	r3, [r7, #76]	; 0x4c
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	0f1b      	lsrs	r3, r3, #28
 800491e:	2b09      	cmp	r3, #9
 8004920:	d102      	bne.n	8004928 <UI_SetReg+0x37c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	0e1b      	lsrs	r3, r3, #24
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	2b09      	cmp	r3, #9
 8004932:	d102      	bne.n	800493a <UI_SetReg+0x38e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      if (pSPD != MC_NULL)
 800493a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d07e      	beq.n	8004a3e <UI_SetReg+0x492>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004940:	f107 021c 	add.w	r2, r7, #28
 8004944:	f107 031e 	add.w	r3, r7, #30
 8004948:	4619      	mov	r1, r3
 800494a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800494c:	f00a fd94 	bl	800f478 <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 8004950:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	b212      	sxth	r2, r2
 8004958:	4619      	mov	r1, r3
 800495a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800495c:	f00a fd94 	bl	800f488 <STO_PLL_SetObserverGains>
      }
    }
    break;
 8004960:	e06d      	b.n	8004a3e <UI_SetReg+0x492>

  case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	7d1b      	ldrb	r3, [r3, #20]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4413      	add	r3, r2
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	64bb      	str	r3, [r7, #72]	; 0x48
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004978:	0f1b      	lsrs	r3, r3, #28
 800497a:	2b09      	cmp	r3, #9
 800497c:	d102      	bne.n	8004984 <UI_SetReg+0x3d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	0e1b      	lsrs	r3, r3, #24
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2b09      	cmp	r3, #9
 800498e:	d102      	bne.n	8004996 <UI_SetReg+0x3ea>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	64bb      	str	r3, [r7, #72]	; 0x48
      }
      if (pSPD != MC_NULL)
 8004996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004998:	2b00      	cmp	r3, #0
 800499a:	d052      	beq.n	8004a42 <UI_SetReg+0x496>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800499c:	f107 0218 	add.w	r2, r7, #24
 80049a0:	f107 031a 	add.w	r3, r7, #26
 80049a4:	4619      	mov	r1, r3
 80049a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80049a8:	f00a fd72 	bl	800f490 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 80049ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	b212      	sxth	r2, r2
 80049b4:	4619      	mov	r1, r3
 80049b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80049b8:	f00a fd78 	bl	800f4ac <STO_SetPLLGains>
      }
    }
    break;
 80049bc:	e041      	b.n	8004a42 <UI_SetReg+0x496>

  case MC_PROTOCOL_REG_PLL_KP:
	{
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	7d1b      	ldrb	r3, [r3, #20]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	647b      	str	r3, [r7, #68]	; 0x44
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	0f1b      	lsrs	r3, r3, #28
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d102      	bne.n	80049e0 <UI_SetReg+0x434>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80049da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	0e1b      	lsrs	r3, r3, #24
 80049e4:	f003 030f 	and.w	r3, r3, #15
 80049e8:	2b09      	cmp	r3, #9
 80049ea:	d102      	bne.n	80049f2 <UI_SetReg+0x446>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
      if (pSPD != MC_NULL)
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d026      	beq.n	8004a46 <UI_SetReg+0x49a>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80049f8:	f107 0214 	add.w	r2, r7, #20
 80049fc:	f107 0316 	add.w	r3, r7, #22
 8004a00:	4619      	mov	r1, r3
 8004a02:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a04:	f00a fd44 	bl	800f490 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	b21b      	sxth	r3, r3
 8004a0c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004a10:	4619      	mov	r1, r3
 8004a12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a14:	f00a fd4a 	bl	800f4ac <STO_SetPLLGains>
      }
    }
    break;
 8004a18:	e015      	b.n	8004a46 <UI_SetReg+0x49a>
 8004a1a:	bf00      	nop
 8004a1c:	88888889 	.word	0x88888889

  case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	b21b      	sxth	r3, r3
 8004a24:	4619      	mov	r1, r3
 8004a26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a28:	f7fc ff0f 	bl	800184a <MCI_SetIdref>
    }
    break;
 8004a2c:	e00c      	b.n	8004a48 <UI_SetReg+0x49c>

  default:
    retVal = false;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    break;
 8004a34:	e008      	b.n	8004a48 <UI_SetReg+0x49c>
    break;
 8004a36:	bf00      	nop
 8004a38:	e006      	b.n	8004a48 <UI_SetReg+0x49c>
    break;
 8004a3a:	bf00      	nop
 8004a3c:	e004      	b.n	8004a48 <UI_SetReg+0x49c>
    break;
 8004a3e:	bf00      	nop
 8004a40:	e002      	b.n	8004a48 <UI_SetReg+0x49c>
    break;
 8004a42:	bf00      	nop
 8004a44:	e000      	b.n	8004a48 <UI_SetReg+0x49c>
    break;
 8004a46:	bf00      	nop
  }

  return retVal;
 8004a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3758      	adds	r7, #88	; 0x58
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b0b6      	sub	sp, #216	; 0xd8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	72fb      	strb	r3, [r7, #11]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	7d1b      	ldrb	r3, [r3, #20]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	7d1b      	ldrb	r3, [r3, #20]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  int32_t bRetVal = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  if ( success != (bool *) 0 )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <UI_GetReg+0x44>
  {
    *success = true;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 8004a98:	7afb      	ldrb	r3, [r7, #11]
 8004a9a:	2b81      	cmp	r3, #129	; 0x81
 8004a9c:	f200 8552 	bhi.w	8005544 <UI_GetReg+0xaf0>
 8004aa0:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <UI_GetReg+0x54>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004cb1 	.word	0x08004cb1
 8004aac:	08004cc1 	.word	0x08004cc1
 8004ab0:	08004cd7 	.word	0x08004cd7
 8004ab4:	08004df7 	.word	0x08004df7
 8004ab8:	08004ced 	.word	0x08004ced
 8004abc:	08004d15 	.word	0x08004d15
 8004ac0:	08004d2b 	.word	0x08004d2b
 8004ac4:	08004d41 	.word	0x08004d41
 8004ac8:	08004dcb 	.word	0x08004dcb
 8004acc:	08004e89 	.word	0x08004e89
 8004ad0:	08004e9d 	.word	0x08004e9d
 8004ad4:	08004eb1 	.word	0x08004eb1
 8004ad8:	08004de1 	.word	0x08004de1
 8004adc:	08004edb 	.word	0x08004edb
 8004ae0:	08004eef 	.word	0x08004eef
 8004ae4:	08004f03 	.word	0x08004f03
 8004ae8:	08004f17 	.word	0x08004f17
 8004aec:	08004f79 	.word	0x08004f79
 8004af0:	08005545 	.word	0x08005545
 8004af4:	08005545 	.word	0x08005545
 8004af8:	0800509f 	.word	0x0800509f
 8004afc:	0800503d 	.word	0x0800503d
 8004b00:	08005545 	.word	0x08005545
 8004b04:	08005545 	.word	0x08005545
 8004b08:	08005545 	.word	0x08005545
 8004b0c:	08004d57 	.word	0x08004d57
 8004b10:	08004d6d 	.word	0x08004d6d
 8004b14:	080053af 	.word	0x080053af
 8004b18:	08005545 	.word	0x08005545
 8004b1c:	08005545 	.word	0x08005545
 8004b20:	08004d81 	.word	0x08004d81
 8004b24:	08005417 	.word	0x08005417
 8004b28:	0800542d 	.word	0x0800542d
 8004b2c:	08005545 	.word	0x08005545
 8004b30:	08005443 	.word	0x08005443
 8004b34:	08005469 	.word	0x08005469
 8004b38:	0800547f 	.word	0x0800547f
 8004b3c:	08005495 	.word	0x08005495
 8004b40:	080054ab 	.word	0x080054ab
 8004b44:	08005417 	.word	0x08005417
 8004b48:	0800542d 	.word	0x0800542d
 8004b4c:	080054c1 	.word	0x080054c1
 8004b50:	080054d7 	.word	0x080054d7
 8004b54:	080054ed 	.word	0x080054ed
 8004b58:	08005503 	.word	0x08005503
 8004b5c:	08005519 	.word	0x08005519
 8004b60:	0800552f 	.word	0x0800552f
 8004b64:	08005545 	.word	0x08005545
 8004b68:	08005545 	.word	0x08005545
 8004b6c:	08004fdb 	.word	0x08004fdb
 8004b70:	08005101 	.word	0x08005101
 8004b74:	0800515f 	.word	0x0800515f
 8004b78:	080051c3 	.word	0x080051c3
 8004b7c:	08005227 	.word	0x08005227
 8004b80:	0800528b 	.word	0x0800528b
 8004b84:	08005545 	.word	0x08005545
 8004b88:	08005545 	.word	0x08005545
 8004b8c:	08005545 	.word	0x08005545
 8004b90:	08005545 	.word	0x08005545
 8004b94:	08005545 	.word	0x08005545
 8004b98:	08005545 	.word	0x08005545
 8004b9c:	08005545 	.word	0x08005545
 8004ba0:	08005545 	.word	0x08005545
 8004ba4:	080053c3 	.word	0x080053c3
 8004ba8:	080053ed 	.word	0x080053ed
 8004bac:	08004ec5 	.word	0x08004ec5
 8004bb0:	080052ef 	.word	0x080052ef
 8004bb4:	0800534f 	.word	0x0800534f
 8004bb8:	08005545 	.word	0x08005545
 8004bbc:	08005545 	.word	0x08005545
 8004bc0:	08005545 	.word	0x08005545
 8004bc4:	08005545 	.word	0x08005545
 8004bc8:	08005545 	.word	0x08005545
 8004bcc:	08005545 	.word	0x08005545
 8004bd0:	08005545 	.word	0x08005545
 8004bd4:	08005545 	.word	0x08005545
 8004bd8:	08005545 	.word	0x08005545
 8004bdc:	08005545 	.word	0x08005545
 8004be0:	08005545 	.word	0x08005545
 8004be4:	08005545 	.word	0x08005545
 8004be8:	08005545 	.word	0x08005545
 8004bec:	08005545 	.word	0x08005545
 8004bf0:	08005545 	.word	0x08005545
 8004bf4:	08005545 	.word	0x08005545
 8004bf8:	08005545 	.word	0x08005545
 8004bfc:	08005545 	.word	0x08005545
 8004c00:	08005545 	.word	0x08005545
 8004c04:	08005545 	.word	0x08005545
 8004c08:	08005545 	.word	0x08005545
 8004c0c:	08005545 	.word	0x08005545
 8004c10:	08005545 	.word	0x08005545
 8004c14:	08004e07 	.word	0x08004e07
 8004c18:	08005545 	.word	0x08005545
 8004c1c:	08005545 	.word	0x08005545
 8004c20:	08005545 	.word	0x08005545
 8004c24:	08005545 	.word	0x08005545
 8004c28:	08005545 	.word	0x08005545
 8004c2c:	08005545 	.word	0x08005545
 8004c30:	08005545 	.word	0x08005545
 8004c34:	08005545 	.word	0x08005545
 8004c38:	08005545 	.word	0x08005545
 8004c3c:	08005545 	.word	0x08005545
 8004c40:	08005545 	.word	0x08005545
 8004c44:	08005545 	.word	0x08005545
 8004c48:	08005545 	.word	0x08005545
 8004c4c:	08005545 	.word	0x08005545
 8004c50:	08005545 	.word	0x08005545
 8004c54:	08005545 	.word	0x08005545
 8004c58:	08005545 	.word	0x08005545
 8004c5c:	08005545 	.word	0x08005545
 8004c60:	08004e61 	.word	0x08004e61
 8004c64:	08004e75 	.word	0x08004e75
 8004c68:	08004da7 	.word	0x08004da7
 8004c6c:	08005545 	.word	0x08005545
 8004c70:	08004daf 	.word	0x08004daf
 8004c74:	08004db9 	.word	0x08004db9
 8004c78:	08005545 	.word	0x08005545
 8004c7c:	08005545 	.word	0x08005545
 8004c80:	08005545 	.word	0x08005545
 8004c84:	08005545 	.word	0x08005545
 8004c88:	08005545 	.word	0x08005545
 8004c8c:	08005545 	.word	0x08005545
 8004c90:	08005545 	.word	0x08005545
 8004c94:	08005545 	.word	0x08005545
 8004c98:	08005545 	.word	0x08005545
 8004c9c:	08005545 	.word	0x08005545
 8004ca0:	08005545 	.word	0x08005545
 8004ca4:	08005545 	.word	0x08005545
 8004ca8:	08005545 	.word	0x08005545
 8004cac:	08004dc3 	.word	0x08004dc3
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7ff fc6e 	bl	8004592 <UI_GetSelectedMC>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004cbc:	f000 bc5a 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLAGS:
    {
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8004cc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f009 fbdd 	bl	800e486 <STM_GetFaultState>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 8004cd2:	f000 bc4f 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_STATUS:
    {
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8004cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f009 fbad 	bl	800e43c <STM_GetState>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
	break;
 8004ce8:	f000 bc44 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8004cec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004cf0:	f7fc fd00 	bl	80016f4 <MCI_GetMecSpeedRefUnit>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	1a9b      	subs	r3, r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4acc      	ldr	r2, [pc, #816]	; (8005034 <UI_GetReg+0x5e0>)
 8004d02:	fb82 1203 	smull	r1, r2, r2, r3
 8004d06:	1092      	asrs	r2, r2, #2
 8004d08:	17db      	asrs	r3, r3, #31
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004d10:	f000 bc30 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8004d14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f006 fa7b 	bl	800b216 <PID_GetKP>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004d26:	f000 bc25 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8004d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f006 fa7d 	bl	800b230 <PID_GetKI>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004d3c:	f000 bc1a 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8004d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f006 fab4 	bl	800b2b4 <PID_GetKD>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004d52:	f000 bc0f 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8004d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f005 ffe3 	bl	800ad28 <VBS_GetAvBusVoltage_V>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004d68:	f000 bc04 	b.w	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8004d6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4618      	mov	r0, r3
 8004d74:	f006 f9e1 	bl	800b13a <NTC_GetAvTemp_C>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004d7e:	e3f9      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8004d80:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004d84:	f7fc fca4 	bl	80016d0 <MCI_GetAvrgMecSpeedUnit>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4aa7      	ldr	r2, [pc, #668]	; (8005034 <UI_GetReg+0x5e0>)
 8004d96:	fb82 1203 	smull	r1, r2, r2, r3
 8004d9a:	1092      	asrs	r2, r2, #2
 8004d9c:	17db      	asrs	r3, r3, #31
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004da4:	e3e6      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 8004da6:	4ba4      	ldr	r3, [pc, #656]	; (8005038 <UI_GetReg+0x5e4>)
 8004da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004dac:	e3e2      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 8004dae:	f242 731d 	movw	r3, #10013	; 0x271d
 8004db2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004db6:	e3dd      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 8004db8:	f242 731d 	movw	r3, #10013	; 0x271d
 8004dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004dc0:	e3d8      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004dc8:	e3d4      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004dca:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004dce:	f7fc fce6 	bl	800179e <MCI_GetIqdref>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      bRetVal = (int32_t)currComp.q;
 8004dd6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004dde:	e3c9      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004de0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004de4:	f7fc fcdb 	bl	800179e <MCI_GetIqdref>
 8004de8:	4603      	mov	r3, r0
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
      bRetVal = (int32_t)currComp.d;
 8004dec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004df0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004df4:	e3be      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8004df6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004dfa:	f7fc fc04 	bl	8001606 <MCI_GetControlMode>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004e04:	e3b6      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8004e06:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004e0a:	f7fc fbfc 	bl	8001606 <MCI_GetControlMode>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d112      	bne.n	8004e3a <UI_GetReg+0x3e6>
      {
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8004e14:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004e18:	f7fc fc38 	bl	800168c <MCI_GetLastRampFinalSpeed>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4a82      	ldr	r2, [pc, #520]	; (8005034 <UI_GetReg+0x5e0>)
 8004e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8004e2e:	1092      	asrs	r2, r2, #2
 8004e30:	17db      	asrs	r3, r3, #31
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
      }
    }
    break;
 8004e38:	e39c      	b.n	8005574 <UI_GetReg+0xb20>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8004e3a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004e3e:	f7fc fc59 	bl	80016f4 <MCI_GetMecSpeedRefUnit>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4a79      	ldr	r2, [pc, #484]	; (8005034 <UI_GetReg+0x5e0>)
 8004e50:	fb82 1203 	smull	r1, r2, r2, r3
 8004e54:	1092      	asrs	r2, r2, #2
 8004e56:	17db      	asrs	r3, r3, #31
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 8004e5e:	e389      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KP_DIV:
    {
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8004e60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f006 f9fd 	bl	800b266 <PID_GetKPDivisor>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004e72:	e37f      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_SPEED_KI_DIV:
    {
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8004e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f006 f9ff 	bl	800b27e <PID_GetKIDivisor>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004e86:	e375      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8004e88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f006 f9c1 	bl	800b216 <PID_GetKP>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004e9a:	e36b      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8004e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f006 f9c4 	bl	800b230 <PID_GetKI>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004eae:	e361      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8004eb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f006 f9fc 	bl	800b2b4 <PID_GetKD>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004ec2:	e357      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004ec4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8004ec8:	f7fc fc69 	bl	800179e <MCI_GetIqdref>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	623b      	str	r3, [r7, #32]
      bRetVal = (int32_t)currComp.d;
 8004ed0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004ed8:	e34c      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8004eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f006 f998 	bl	800b216 <PID_GetKP>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004eec:	e342      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8004eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f006 f99b 	bl	800b230 <PID_GetKI>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004f00:	e338      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8004f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f006 f9d3 	bl	800b2b4 <PID_GetKD>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004f14:	e32e      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C1:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691a      	ldr	r2, [r3, #16]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	7d1b      	ldrb	r3, [r3, #20]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	66fb      	str	r3, [r7, #108]	; 0x6c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2e:	0f1b      	lsrs	r3, r3, #28
 8004f30:	2b09      	cmp	r3, #9
 8004f32:	d104      	bne.n	8004f3e <UI_GetReg+0x4ea>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004f34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f40:	0e1b      	lsrs	r3, r3, #24
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	2b09      	cmp	r3, #9
 8004f48:	d104      	bne.n	8004f54 <UI_GetReg+0x500>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }
      if (pSPD != MC_NULL)
 8004f54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <UI_GetReg+0x51a>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004f5c:	f107 021c 	add.w	r2, r7, #28
 8004f60:	f107 031e 	add.w	r3, r7, #30
 8004f64:	4619      	mov	r1, r3
 8004f66:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004f6a:	f00a fa85 	bl	800f478 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC1;
 8004f6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004f76:	e2fd      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBSERVER_C2:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	7d1b      	ldrb	r3, [r3, #20]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	673b      	str	r3, [r7, #112]	; 0x70
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      int16_t hC1,hC2;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f90:	0f1b      	lsrs	r3, r3, #28
 8004f92:	2b09      	cmp	r3, #9
 8004f94:	d104      	bne.n	8004fa0 <UI_GetReg+0x54c>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa2:	0e1b      	lsrs	r3, r3, #24
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	d104      	bne.n	8004fb6 <UI_GetReg+0x562>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004fac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      }
      if (pSPD != MC_NULL)
 8004fb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <UI_GetReg+0x57c>
      {
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8004fbe:	f107 0218 	add.w	r2, r7, #24
 8004fc2:	f107 031a 	add.w	r3, r7, #26
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8004fcc:	f00a fa54 	bl	800f478 <STO_PLL_GetObserverGains>
      }
      bRetVal = (int32_t)hC2;
 8004fd0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8004fd8:	e2cc      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	7d1b      	ldrb	r3, [r3, #20]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8004ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ff2:	0f1b      	lsrs	r3, r3, #28
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	d104      	bne.n	8005002 <UI_GetReg+0x5ae>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004ff8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005004:	0e1b      	lsrs	r3, r3, #24
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	2b09      	cmp	r3, #9
 800500c:	d104      	bne.n	8005018 <UI_GetReg+0x5c4>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800500e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      }
      if (pSPD != MC_NULL)
 8005018:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8298 	beq.w	8005552 <UI_GetReg+0xafe>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 8005022:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005026:	f008 fdb0 	bl	800db8a <SPD_GetElAngle>
 800502a:	4603      	mov	r3, r0
 800502c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005030:	e28f      	b.n	8005552 <UI_GetReg+0xafe>
 8005032:	bf00      	nop
 8005034:	66666667 	.word	0x66666667
 8005038:	34a6847a 	.word	0x34a6847a

    case MC_PROTOCOL_REG_PLL_KP:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	7d1b      	ldrb	r3, [r3, #20]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	67bb      	str	r3, [r7, #120]	; 0x78
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005054:	0f1b      	lsrs	r3, r3, #28
 8005056:	2b09      	cmp	r3, #9
 8005058:	d104      	bne.n	8005064 <UI_GetReg+0x610>
      {
        pSPD = pMCT->pSpeedSensorMain;
 800505a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005066:	0e1b      	lsrs	r3, r3, #24
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	2b09      	cmp	r3, #9
 800506e:	d104      	bne.n	800507a <UI_GetReg+0x626>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005070:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
      }
      if (pSPD != MC_NULL)
 800507a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <UI_GetReg+0x640>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8005082:	f107 0214 	add.w	r2, r7, #20
 8005086:	f107 0316 	add.w	r3, r7, #22
 800508a:	4619      	mov	r1, r3
 800508c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005090:	f00a f9fe 	bl	800f490 <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hPgain;
 8005094:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800509c:	e26a      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_PLL_KI:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	7d1b      	ldrb	r3, [r3, #20]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	677b      	str	r3, [r7, #116]	; 0x74
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      int16_t hPgain, hIgain;
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80050b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b6:	0f1b      	lsrs	r3, r3, #28
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d104      	bne.n	80050c6 <UI_GetReg+0x672>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80050bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80050c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c8:	0e1b      	lsrs	r3, r3, #24
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	2b09      	cmp	r3, #9
 80050d0:	d104      	bne.n	80050dc <UI_GetReg+0x688>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80050d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      }
      if (pSPD != MC_NULL)
 80050dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <UI_GetReg+0x6a2>
      {
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80050e4:	f107 0210 	add.w	r2, r7, #16
 80050e8:	f107 0312 	add.w	r3, r7, #18
 80050ec:	4619      	mov	r1, r3
 80050ee:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80050f2:	f00a f9cd 	bl	800f490 <STO_GetPLLGains>
      }
      bRetVal = (int32_t)hIgain;
 80050f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80050fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80050fe:	e239      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_OBS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	7d1b      	ldrb	r3, [r3, #20]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800511c:	0f1b      	lsrs	r3, r3, #28
 800511e:	2b09      	cmp	r3, #9
 8005120:	d104      	bne.n	800512c <UI_GetReg+0x6d8>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800512c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005130:	0e1b      	lsrs	r3, r3, #24
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	2b09      	cmp	r3, #9
 8005138:	d104      	bne.n	8005144 <UI_GetReg+0x6f0>
      {
        pSPD = pMCT->pSpeedSensorAux;
 800513a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }
      if (pSPD != MC_NULL)
 8005144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 8204 	beq.w	8005556 <UI_GetReg+0xb02>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 800514e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8005152:	f008 fdac 	bl	800dcae <SPD_GetS16Speed>
 8005156:	4603      	mov	r3, r0
 8005158:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800515c:	e1fb      	b.n	8005556 <UI_GetReg+0xb02>

    case MC_PROTOCOL_REG_OBS_I_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	7d1b      	ldrb	r3, [r3, #20]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800517a:	0f1b      	lsrs	r3, r3, #28
 800517c:	2b09      	cmp	r3, #9
 800517e:	d104      	bne.n	800518a <UI_GetReg+0x736>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005180:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800518a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800518e:	0e1b      	lsrs	r3, r3, #24
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	2b09      	cmp	r3, #9
 8005196:	d104      	bne.n	80051a2 <UI_GetReg+0x74e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      }
      if (pSPD != MC_NULL)
 80051a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 81d7 	beq.w	800555a <UI_GetReg+0xb06>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80051ac:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80051b0:	f00a f94e 	bl	800f450 <STO_PLL_GetEstimatedCurrent>
 80051b4:	4603      	mov	r3, r0
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80051bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80051c0:	e1cb      	b.n	800555a <UI_GetReg+0xb06>

    case MC_PROTOCOL_REG_OBS_I_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	7d1b      	ldrb	r3, [r3, #20]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80051da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051de:	0f1b      	lsrs	r3, r3, #28
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	d104      	bne.n	80051ee <UI_GetReg+0x79a>
      {
        pSPD = pMCT->pSpeedSensorMain;
 80051e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80051ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051f2:	0e1b      	lsrs	r3, r3, #24
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	2b09      	cmp	r3, #9
 80051fa:	d104      	bne.n	8005206 <UI_GetReg+0x7b2>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80051fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      if (pSPD != MC_NULL)
 8005206:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800520a:	2b00      	cmp	r3, #0
 800520c:	f000 81a7 	beq.w	800555e <UI_GetReg+0xb0a>
      {
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8005210:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005214:	f00a f91c 	bl	800f450 <STO_PLL_GetEstimatedCurrent>
 8005218:	4603      	mov	r3, r0
 800521a:	633b      	str	r3, [r7, #48]	; 0x30
 800521c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8005220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005224:	e19b      	b.n	800555e <UI_GetReg+0xb0a>

    case MC_PROTOCOL_REG_OBS_BEMF_ALPHA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	7d1b      	ldrb	r3, [r3, #20]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800523e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005242:	0f1b      	lsrs	r3, r3, #28
 8005244:	2b09      	cmp	r3, #9
 8005246:	d104      	bne.n	8005252 <UI_GetReg+0x7fe>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005256:	0e1b      	lsrs	r3, r3, #24
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	2b09      	cmp	r3, #9
 800525e:	d104      	bne.n	800526a <UI_GetReg+0x816>
      {
        pSPD =  pMCT->pSpeedSensorAux;
 8005260:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      }
      if (pSPD != MC_NULL)
 800526a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 8177 	beq.w	8005562 <UI_GetReg+0xb0e>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 8005274:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005278:	f00a f8de 	bl	800f438 <STO_PLL_GetEstimatedBemf>
 800527c:	4603      	mov	r3, r0
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8005284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 8005288:	e16b      	b.n	8005562 <UI_GetReg+0xb0e>

    case MC_PROTOCOL_REG_OBS_BEMF_BETA:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	7d1b      	ldrb	r3, [r3, #20]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80052a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052a6:	0f1b      	lsrs	r3, r3, #28
 80052a8:	2b09      	cmp	r3, #9
 80052aa:	d104      	bne.n	80052b6 <UI_GetReg+0x862>
      {
       pSPD = pMCT->pSpeedSensorMain;
 80052ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80052b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052ba:	0e1b      	lsrs	r3, r3, #24
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d104      	bne.n	80052ce <UI_GetReg+0x87a>
      {
        pSPD = pMCT->pSpeedSensorAux;
 80052c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      }
      if (pSPD != MC_NULL)
 80052ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8147 	beq.w	8005566 <UI_GetReg+0xb12>
      {
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80052d8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80052dc:	f00a f8ac 	bl	800f438 <STO_PLL_GetEstimatedBemf>
 80052e0:	4603      	mov	r3, r0
 80052e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80052e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80052ec:	e13b      	b.n	8005566 <UI_GetReg+0xb12>

    case MC_PROTOCOL_REG_EST_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	7d1b      	ldrb	r3, [r3, #20]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800530a:	0f1b      	lsrs	r3, r3, #28
 800530c:	2b09      	cmp	r3, #9
 800530e:	d104      	bne.n	800531a <UI_GetReg+0x8c6>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800531a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800531e:	0e1b      	lsrs	r3, r3, #24
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	2b09      	cmp	r3, #9
 8005326:	d104      	bne.n	8005332 <UI_GetReg+0x8de>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005328:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      }
      if (pSPD != MC_NULL)
 8005332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8117 	beq.w	800556a <UI_GetReg+0xb16>
      {
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800533c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8005340:	f00a f8cc 	bl	800f4dc <STO_PLL_GetEstimatedBemfLevel>
 8005344:	4603      	mov	r3, r0
 8005346:	141b      	asrs	r3, r3, #16
 8005348:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 800534c:	e10d      	b.n	800556a <UI_GetReg+0xb16>

    case MC_PROTOCOL_REG_OBS_BEMF_LEVEL:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	7d1b      	ldrb	r3, [r3, #20]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8005366:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800536a:	0f1b      	lsrs	r3, r3, #28
 800536c:	2b09      	cmp	r3, #9
 800536e:	d104      	bne.n	800537a <UI_GetReg+0x926>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8005370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800537a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 030f 	and.w	r3, r3, #15
 8005384:	2b09      	cmp	r3, #9
 8005386:	d104      	bne.n	8005392 <UI_GetReg+0x93e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8005388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      }
      if (pSPD != MC_NULL)
 8005392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 80e9 	beq.w	800556e <UI_GetReg+0xb1a>
      {
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800539c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80053a0:	f00a f8a0 	bl	800f4e4 <STO_PLL_GetObservedBemfLevel>
 80053a4:	4603      	mov	r3, r0
 80053a6:	141b      	asrs	r3, r3, #16
 80053a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }
    }
    break;
 80053ac:	e0df      	b.n	800556e <UI_GetReg+0xb1a>

    case MC_PROTOCOL_REG_MOTOR_POWER:
    {
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80053ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b4:	4618      	mov	r0, r3
 80053b6:	f005 fe25 	bl	800b004 <MPM_GetAvrgElMotorPowerW>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053c0:	e0d8      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MAX_APP_SPEED:
    {
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80053c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f008 fe3e 	bl	800e04a <STC_GetMaxAppPositiveMecSpeedUnit>
 80053ce:	4603      	mov	r3, r0
 80053d0:	461a      	mov	r2, r3
 80053d2:	4613      	mov	r3, r2
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4a69      	ldr	r2, [pc, #420]	; (8005580 <UI_GetReg+0xb2c>)
 80053dc:	fb82 1203 	smull	r1, r2, r2, r3
 80053e0:	1092      	asrs	r2, r2, #2
 80053e2:	17db      	asrs	r3, r3, #31
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80053ea:	e0c3      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_MIN_APP_SPEED:
    {
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 80053ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	4618      	mov	r0, r3
 80053f4:	f008 fe35 	bl	800e062 <STC_GetMinAppNegativeMecSpeedUnit>
 80053f8:	4603      	mov	r3, r0
 80053fa:	461a      	mov	r2, r3
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4a5e      	ldr	r2, [pc, #376]	; (8005580 <UI_GetReg+0xb2c>)
 8005406:	fb82 1203 	smull	r1, r2, r2, r3
 800540a:	1092      	asrs	r2, r2, #2
 800540c:	17db      	asrs	r3, r3, #31
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005414:	e0ae      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_TORQUE_MEAS:
    case MC_PROTOCOL_REG_I_Q:
    {
      bRetVal = MCI_GetIqd(pMCI).q;
 8005416:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800541a:	f7fc f9a8 	bl	800176e <MCI_GetIqd>
 800541e:	4603      	mov	r3, r0
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005422:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8005426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800542a:	e0a3      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_FLUX_MEAS:
    case MC_PROTOCOL_REG_I_D:
    {
      bRetVal = MCI_GetIqd(pMCI).d;
 800542c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005430:	f7fc f99d 	bl	800176e <MCI_GetIqd>
 8005434:	4603      	mov	r3, r0
 8005436:	643b      	str	r3, [r7, #64]	; 0x40
 8005438:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800543c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005440:	e098      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_RUC_STAGE_NBR:
    {
      if (pMCT->pRevupCtrl)
 8005442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d009      	beq.n	8005460 <UI_GetReg+0xa0c>
      {
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 800544c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4618      	mov	r0, r3
 8005454:	f009 fd7a 	bl	800ef4c <RUC_GetNumberOfPhases>
 8005458:	4603      	mov	r3, r0
 800545a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 800545e:	e089      	b.n	8005574 <UI_GetReg+0xb20>
        bRetVal = (uint32_t) 0;
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    break;
 8005466:	e085      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_A:
    {
      bRetVal = MCI_GetIab(pMCI).a;
 8005468:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800546c:	f7fc f950 	bl	8001710 <MCI_GetIab>
 8005470:	4603      	mov	r3, r0
 8005472:	647b      	str	r3, [r7, #68]	; 0x44
 8005474:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005478:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800547c:	e07a      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_B:
    {
      bRetVal = MCI_GetIab(pMCI).b;
 800547e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005482:	f7fc f945 	bl	8001710 <MCI_GetIab>
 8005486:	4603      	mov	r3, r0
 8005488:	64bb      	str	r3, [r7, #72]	; 0x48
 800548a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800548e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005492:	e06f      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_ALPHA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8005494:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005498:	f7fc f951 	bl	800173e <MCI_GetIalphabeta>
 800549c:	4603      	mov	r3, r0
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80054a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80054a8:	e064      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_BETA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 80054aa:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80054ae:	f7fc f946 	bl	800173e <MCI_GetIalphabeta>
 80054b2:	4603      	mov	r3, r0
 80054b4:	653b      	str	r3, [r7, #80]	; 0x50
 80054b6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80054ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80054be:	e059      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_Q_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).q;
 80054c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80054c4:	f7fc f96b 	bl	800179e <MCI_GetIqdref>
 80054c8:	4603      	mov	r3, r0
 80054ca:	657b      	str	r3, [r7, #84]	; 0x54
 80054cc:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80054d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80054d4:	e04e      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 80054d6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80054da:	f7fc f960 	bl	800179e <MCI_GetIqdref>
 80054de:	4603      	mov	r3, r0
 80054e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054e2:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80054e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 80054ea:	e043      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_Q:
    {
      bRetVal = MCI_GetVqd(pMCI).q;
 80054ec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80054f0:	f7fc f96d 	bl	80017ce <MCI_GetVqd>
 80054f4:	4603      	mov	r3, r0
 80054f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80054fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005500:	e038      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_D:
    {
      bRetVal = MCI_GetVqd(pMCI).d;
 8005502:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005506:	f7fc f962 	bl	80017ce <MCI_GetVqd>
 800550a:	4603      	mov	r3, r0
 800550c:	663b      	str	r3, [r7, #96]	; 0x60
 800550e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8005512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005516:	e02d      	b.n	8005574 <UI_GetReg+0xb20>

   case MC_PROTOCOL_REG_V_ALPHA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8005518:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800551c:	f7fc f96f 	bl	80017fe <MCI_GetValphabeta>
 8005520:	4603      	mov	r3, r0
 8005522:	667b      	str	r3, [r7, #100]	; 0x64
 8005524:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8005528:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 800552c:	e022      	b.n	8005574 <UI_GetReg+0xb20>

    case MC_PROTOCOL_REG_V_BETA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 800552e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8005532:	f7fc f964 	bl	80017fe <MCI_GetValphabeta>
 8005536:	4603      	mov	r3, r0
 8005538:	66bb      	str	r3, [r7, #104]	; 0x68
 800553a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 800553e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }
    break;
 8005542:	e017      	b.n	8005574 <UI_GetReg+0xb20>

    default:
	{
      if ( success != (bool *) 0 )
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d013      	beq.n	8005572 <UI_GetReg+0xb1e>
      {
        *success = false;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 8005550:	e00f      	b.n	8005572 <UI_GetReg+0xb1e>
    break;
 8005552:	bf00      	nop
 8005554:	e00e      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 8005556:	bf00      	nop
 8005558:	e00c      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 800555a:	bf00      	nop
 800555c:	e00a      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 800555e:	bf00      	nop
 8005560:	e008      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 8005562:	bf00      	nop
 8005564:	e006      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 8005566:	bf00      	nop
 8005568:	e004      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <UI_GetReg+0xb20>
    break;
 8005572:	bf00      	nop
  }
  return bRetVal;
 8005574:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8005578:	4618      	mov	r0, r3
 800557a:	37d8      	adds	r7, #216	; 0xd8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	66666667 	.word	0x66666667

08005584 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8005590:	2301      	movs	r3, #1
 8005592:	73fb      	strb	r3, [r7, #15]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	7d1b      	ldrb	r3, [r3, #20]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60bb      	str	r3, [r7, #8]

  switch (bCmdID)
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	2b0d      	cmp	r3, #13
 80055aa:	d84b      	bhi.n	8005644 <UI_ExecCmd+0xc0>
 80055ac:	a201      	add	r2, pc, #4	; (adr r2, 80055b4 <UI_ExecCmd+0x30>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055ed 	.word	0x080055ed
 80055b8:	080055f5 	.word	0x080055f5
 80055bc:	080055fd 	.word	0x080055fd
 80055c0:	0800564b 	.word	0x0800564b
 80055c4:	0800564b 	.word	0x0800564b
 80055c8:	08005611 	.word	0x08005611
 80055cc:	0800562d 	.word	0x0800562d
 80055d0:	08005635 	.word	0x08005635
 80055d4:	0800563d 	.word	0x0800563d
 80055d8:	08005645 	.word	0x08005645
 80055dc:	08005645 	.word	0x08005645
 80055e0:	08005645 	.word	0x08005645
 80055e4:	08005645 	.word	0x08005645
 80055e8:	080055f5 	.word	0x080055f5
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      /* Call MCI Start motor; */
      MCI_StartMotor(pMCI);
 80055ec:	68b8      	ldr	r0, [r7, #8]
 80055ee:	f7fb ff56 	bl	800149e <MCI_StartMotor>
    }
    break;
 80055f2:	e02d      	b.n	8005650 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      /* Call MCI Stop motor; */
      MCI_StopMotor(pMCI);
 80055f4:	68b8      	ldr	r0, [r7, #8]
 80055f6:	f7fb ff69 	bl	80014cc <MCI_StopMotor>
    }
    break;
 80055fa:	e029      	b.n	8005650 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f7fb fff4 	bl	80015ea <MCI_GetSTMState>
 8005602:	4603      	mov	r3, r0
 8005604:	2b06      	cmp	r3, #6
 8005606:	d122      	bne.n	800564e <UI_ExecCmd+0xca>
      {
        MCI_StopRamp(pMCI);
 8005608:	68b8      	ldr	r0, [r7, #8]
 800560a:	f7fc f854 	bl	80016b6 <MCI_StopRamp>
      }
    }
    break;
 800560e:	e01e      	b.n	800564e <UI_ExecCmd+0xca>
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8005610:	68b8      	ldr	r0, [r7, #8]
 8005612:	f7fb ffea 	bl	80015ea <MCI_GetSTMState>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d103      	bne.n	8005624 <UI_ExecCmd+0xa0>
      {
        MCI_StartMotor(pMCI);
 800561c:	68b8      	ldr	r0, [r7, #8]
 800561e:	f7fb ff3e 	bl	800149e <MCI_StartMotor>
      else
      {
        MCI_StopMotor(pMCI);
      }
    }
    break;
 8005622:	e015      	b.n	8005650 <UI_ExecCmd+0xcc>
        MCI_StopMotor(pMCI);
 8005624:	68b8      	ldr	r0, [r7, #8]
 8005626:	f7fb ff51 	bl	80014cc <MCI_StopMotor>
    break;
 800562a:	e011      	b.n	8005650 <UI_ExecCmd+0xcc>
    }
    break;

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MCI_FaultAcknowledged(pMCI);
 800562c:	68b8      	ldr	r0, [r7, #8]
 800562e:	f7fb ff5c 	bl	80014ea <MCI_FaultAcknowledged>
    }
    break;
 8005632:	e00d      	b.n	8005650 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_ENCODER_ALIGN:
    {
      MCI_EncoderAlign(pMCI);
 8005634:	68b8      	ldr	r0, [r7, #8]
 8005636:	f7fb ff66 	bl	8001506 <MCI_EncoderAlign>
    }
    break;
 800563a:	e009      	b.n	8005650 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_IQDREF_CLEAR:
    {
      MCI_Clear_Iqdref(pMCI);
 800563c:	68b8      	ldr	r0, [r7, #8]
 800563e:	f7fc f918 	bl	8001872 <MCI_Clear_Iqdref>
    }
    break;
 8005642:	e005      	b.n	8005650 <UI_ExecCmd+0xcc>

  default:
    {
    retVal = false;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]
	}
    break;
 8005648:	e002      	b.n	8005650 <UI_ExecCmd+0xcc>
    break;
 800564a:	bf00      	nop
 800564c:	e000      	b.n	8005650 <UI_ExecCmd+0xcc>
    break;
 800564e:	bf00      	nop
  }
  return retVal;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop

0800565c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	7d1b      	ldrb	r3, [r3, #20]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	005b      	lsls	r3, r3, #1
 8005684:	4a08      	ldr	r2, [pc, #32]	; (80056a8 <UI_ExecSpeedRamp+0x4c>)
 8005686:	fb82 1203 	smull	r1, r2, r2, r3
 800568a:	441a      	add	r2, r3
 800568c:	1152      	asrs	r2, r2, #5
 800568e:	17db      	asrs	r3, r3, #31
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	b21b      	sxth	r3, r3
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	4619      	mov	r1, r3
 8005698:	6978      	ldr	r0, [r7, #20]
 800569a:	f7fb feaa 	bl	80013f2 <MCI_ExecSpeedRamp>
  return true;
 800569e:	2301      	movs	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	88888889 	.word	0x88888889

080056ac <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	460b      	mov	r3, r1
 80056b6:	807b      	strh	r3, [r7, #2]
 80056b8:	4613      	mov	r3, r2
 80056ba:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7d1b      	ldrb	r3, [r3, #20]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 80056cc:	883a      	ldrh	r2, [r7, #0]
 80056ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056d2:	4619      	mov	r1, r3
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7fb fea9 	bl	800142c <MCI_ExecTorqueRamp>
  return true;
 80056da:	2301      	movs	r3, #1
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	460b      	mov	r3, r1
 80056f2:	72fb      	strb	r3, [r7, #11]
  bool hRetVal = true;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	7d1b      	ldrb	r3, [r3, #20]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	613b      	str	r3, [r7, #16]
  if (pRevupCtrl)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01b      	beq.n	8005748 <UI_GetRevupData+0x64>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8005710:	7afb      	ldrb	r3, [r7, #11]
 8005712:	4619      	mov	r1, r3
 8005714:	6938      	ldr	r0, [r7, #16]
 8005716:	f009 fc03 	bl	800ef20 <RUC_GetPhaseDurationms>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	801a      	strh	r2, [r3, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8005722:	7afb      	ldrb	r3, [r7, #11]
 8005724:	4619      	mov	r1, r3
 8005726:	6938      	ldr	r0, [r7, #16]
 8005728:	f009 fc00 	bl	800ef2c <RUC_GetPhaseFinalMecSpeedUnit>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	801a      	strh	r2, [r3, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	4619      	mov	r1, r3
 8005738:	6938      	ldr	r0, [r7, #16]
 800573a:	f009 fbff 	bl	800ef3c <RUC_GetPhaseFinalTorque>
 800573e:	4603      	mov	r3, r0
 8005740:	461a      	mov	r2, r3
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	801a      	strh	r2, [r3, #0]
 8005746:	e001      	b.n	800574c <UI_GetRevupData+0x68>
  }
  else
  {
    hRetVal = false;
 8005748:	2300      	movs	r3, #0
 800574a:	75fb      	strb	r3, [r7, #23]
  }
  return hRetVal;
 800574c:	7dfb      	ldrb	r3, [r7, #23]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	4608      	mov	r0, r1
 8005760:	4611      	mov	r1, r2
 8005762:	461a      	mov	r2, r3
 8005764:	4603      	mov	r3, r0
 8005766:	72fb      	strb	r3, [r7, #11]
 8005768:	460b      	mov	r3, r1
 800576a:	813b      	strh	r3, [r7, #8]
 800576c:	4613      	mov	r3, r2
 800576e:	80fb      	strh	r3, [r7, #6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	7d1b      	ldrb	r3, [r3, #20]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	617b      	str	r3, [r7, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8005782:	893a      	ldrh	r2, [r7, #8]
 8005784:	7afb      	ldrb	r3, [r7, #11]
 8005786:	4619      	mov	r1, r3
 8005788:	6978      	ldr	r0, [r7, #20]
 800578a:	f009 fbb7 	bl	800eefc <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800578e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005792:	7afb      	ldrb	r3, [r7, #11]
 8005794:	4619      	mov	r1, r3
 8005796:	6978      	ldr	r0, [r7, #20]
 8005798:	f009 fbb6 	bl	800ef08 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 800579c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80057a0:	7afb      	ldrb	r3, [r7, #11]
 80057a2:	4619      	mov	r1, r3
 80057a4:	6978      	ldr	r0, [r7, #20]
 80057a6:	f009 fbb5 	bl	800ef14 <RUC_SetPhaseFinalTorque>
  return true;
 80057aa:	2301      	movs	r3, #1
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7d1b      	ldrb	r3, [r3, #20]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
  qd_t currComp;
  currComp.q = hIqRef;
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	813b      	strh	r3, [r7, #8]
  currComp.d = hIdRef;
 80057d8:	883b      	ldrh	r3, [r7, #0]
 80057da:	817b      	strh	r3, [r7, #10]
  MCI_SetCurrentReferences(pMCI,currComp);
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7fb fe41 	bl	8001466 <MCI_SetCurrentReferences>
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <UI_GetMPInfo>:
  * @param  pMPInfo: The returned list of register.
  *         It is populated by this function.
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
    return false;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005808:	4b08      	ldr	r3, [pc, #32]	; (800582c <SystemInit+0x28>)
 800580a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580e:	4a07      	ldr	r2, [pc, #28]	; (800582c <SystemInit+0x28>)
 8005810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005818:	4b04      	ldr	r3, [pc, #16]	; (800582c <SystemInit+0x28>)
 800581a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800581e:	609a      	str	r2, [r3, #8]
#endif
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	e000ed00 	.word	0xe000ed00

08005830 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005834:	4b08      	ldr	r3, [pc, #32]	; (8005858 <HAL_Init+0x28>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a07      	ldr	r2, [pc, #28]	; (8005858 <HAL_Init+0x28>)
 800583a:	f043 0310 	orr.w	r3, r3, #16
 800583e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005840:	2003      	movs	r0, #3
 8005842:	f001 fc6d 	bl	8007120 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005846:	2004      	movs	r0, #4
 8005848:	f000 f808 	bl	800585c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800584c:	f7fe fadc 	bl	8003e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40022000 	.word	0x40022000

0800585c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_InitTick+0x54>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <HAL_InitTick+0x58>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	4619      	mov	r1, r3
 800586e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005872:	fbb3 f3f1 	udiv	r3, r3, r1
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	4618      	mov	r0, r3
 800587c:	f001 fc85 	bl	800718a <HAL_SYSTICK_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e00e      	b.n	80058a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b0f      	cmp	r3, #15
 800588e:	d80a      	bhi.n	80058a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005890:	2200      	movs	r2, #0
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	f001 fc4d 	bl	8007136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800589c:	4a06      	ldr	r2, [pc, #24]	; (80058b8 <HAL_InitTick+0x5c>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e000      	b.n	80058a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200006d0 	.word	0x200006d0
 80058b4:	200006d8 	.word	0x200006d8
 80058b8:	200006d4 	.word	0x200006d4

080058bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <HAL_IncTick+0x20>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <HAL_IncTick+0x24>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4413      	add	r3, r2
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <HAL_IncTick+0x24>)
 80058ce:	6013      	str	r3, [r2, #0]
}
 80058d0:	bf00      	nop
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	200006d8 	.word	0x200006d8
 80058e0:	20000bd4 	.word	0x20000bd4

080058e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_GetTick+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000bd4 	.word	0x20000bd4

080058fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005904:	f7ff ffee 	bl	80058e4 <HAL_GetTick>
 8005908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d005      	beq.n	8005922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_Delay+0x40>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005922:	bf00      	nop
 8005924:	f7ff ffde 	bl	80058e4 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	429a      	cmp	r2, r3
 8005932:	d8f7      	bhi.n	8005924 <HAL_Delay+0x28>
  {
  }
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	200006d8 	.word	0x200006d8

08005940 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b09a      	sub	sp, #104	; 0x68
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e1c9      	b.n	8005cf4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	d176      	bne.n	8005a60 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d152      	bne.n	8005a20 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fe fa5b 	bl	8003e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d13b      	bne.n	8005a20 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f90f 	bl	8006bcc <ADC_Disable>
 80059ae:	4603      	mov	r3, r0
 80059b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d12f      	bne.n	8005a20 <HAL_ADC_Init+0xe0>
 80059c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d12b      	bne.n	8005a20 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80059d0:	f023 0302 	bic.w	r3, r3, #2
 80059d4:	f043 0202 	orr.w	r2, r3, #2
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689a      	ldr	r2, [r3, #8]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80059ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80059fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059fc:	4b86      	ldr	r3, [pc, #536]	; (8005c18 <HAL_ADC_Init+0x2d8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a86      	ldr	r2, [pc, #536]	; (8005c1c <HAL_ADC_Init+0x2dc>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	0c9a      	lsrs	r2, r3, #18
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a12:	e002      	b.n	8005a1a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f9      	bne.n	8005a14 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3c:	d110      	bne.n	8005a60 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f023 0312 	bic.w	r3, r3, #18
 8005a46:	f043 0210 	orr.w	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f040 8136 	bne.w	8005cda <HAL_ADC_Init+0x39a>
 8005a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 8131 	bne.w	8005cda <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 8129 	bne.w	8005cda <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005a90:	f043 0202 	orr.w	r2, r3, #2
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005aa0:	d004      	beq.n	8005aac <HAL_ADC_Init+0x16c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a5e      	ldr	r2, [pc, #376]	; (8005c20 <HAL_ADC_Init+0x2e0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d101      	bne.n	8005ab0 <HAL_ADC_Init+0x170>
 8005aac:	4b5d      	ldr	r3, [pc, #372]	; (8005c24 <HAL_ADC_Init+0x2e4>)
 8005aae:	e000      	b.n	8005ab2 <HAL_ADC_Init+0x172>
 8005ab0:	4b5d      	ldr	r3, [pc, #372]	; (8005c28 <HAL_ADC_Init+0x2e8>)
 8005ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005abc:	d102      	bne.n	8005ac4 <HAL_ADC_Init+0x184>
 8005abe:	4b58      	ldr	r3, [pc, #352]	; (8005c20 <HAL_ADC_Init+0x2e0>)
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e01a      	b.n	8005afa <HAL_ADC_Init+0x1ba>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a55      	ldr	r2, [pc, #340]	; (8005c20 <HAL_ADC_Init+0x2e0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d103      	bne.n	8005ad6 <HAL_ADC_Init+0x196>
 8005ace:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e011      	b.n	8005afa <HAL_ADC_Init+0x1ba>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a54      	ldr	r2, [pc, #336]	; (8005c2c <HAL_ADC_Init+0x2ec>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d102      	bne.n	8005ae6 <HAL_ADC_Init+0x1a6>
 8005ae0:	4b53      	ldr	r3, [pc, #332]	; (8005c30 <HAL_ADC_Init+0x2f0>)
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e009      	b.n	8005afa <HAL_ADC_Init+0x1ba>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a51      	ldr	r2, [pc, #324]	; (8005c30 <HAL_ADC_Init+0x2f0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d102      	bne.n	8005af6 <HAL_ADC_Init+0x1b6>
 8005af0:	4b4e      	ldr	r3, [pc, #312]	; (8005c2c <HAL_ADC_Init+0x2ec>)
 8005af2:	60fb      	str	r3, [r7, #12]
 8005af4:	e001      	b.n	8005afa <HAL_ADC_Init+0x1ba>
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0303 	and.w	r3, r3, #3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d108      	bne.n	8005b1a <HAL_ADC_Init+0x1da>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_ADC_Init+0x1da>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <HAL_ADC_Init+0x1dc>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d11c      	bne.n	8005b5a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d010      	beq.n	8005b48 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d107      	bne.n	8005b42 <HAL_ADC_Init+0x202>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_ADC_Init+0x202>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <HAL_ADC_Init+0x204>
 8005b42:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d108      	bne.n	8005b5a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8005b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b58:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	7e5b      	ldrb	r3, [r3, #25]
 8005b5e:	035b      	lsls	r3, r3, #13
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b64:	2a01      	cmp	r2, #1
 8005b66:	d002      	beq.n	8005b6e <HAL_ADC_Init+0x22e>
 8005b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b6c:	e000      	b.n	8005b70 <HAL_ADC_Init+0x230>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b80:	4313      	orrs	r3, r2
 8005b82:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d11b      	bne.n	8005bc6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	7e5b      	ldrb	r3, [r3, #25]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	045a      	lsls	r2, r3, #17
 8005b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ba8:	e00d      	b.n	8005bc6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bb2:	f043 0220 	orr.w	r2, r3, #32
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d03a      	beq.n	8005c44 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a16      	ldr	r2, [pc, #88]	; (8005c2c <HAL_ADC_Init+0x2ec>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_ADC_Init+0x2a2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a14      	ldr	r2, [pc, #80]	; (8005c30 <HAL_ADC_Init+0x2f0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d128      	bne.n	8005c34 <HAL_ADC_Init+0x2f4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8005bea:	d012      	beq.n	8005c12 <HAL_ADC_Init+0x2d2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf4:	d00a      	beq.n	8005c0c <HAL_ADC_Init+0x2cc>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005bfe:	d002      	beq.n	8005c06 <HAL_ADC_Init+0x2c6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	e018      	b.n	8005c38 <HAL_ADC_Init+0x2f8>
 8005c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c0a:	e015      	b.n	8005c38 <HAL_ADC_Init+0x2f8>
 8005c0c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005c10:	e012      	b.n	8005c38 <HAL_ADC_Init+0x2f8>
 8005c12:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005c16:	e00f      	b.n	8005c38 <HAL_ADC_Init+0x2f8>
 8005c18:	200006d0 	.word	0x200006d0
 8005c1c:	431bde83 	.word	0x431bde83
 8005c20:	50000100 	.word	0x50000100
 8005c24:	50000300 	.word	0x50000300
 8005c28:	50000700 	.word	0x50000700
 8005c2c:	50000400 	.word	0x50000400
 8005c30:	50000500 	.word	0x50000500
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c40:	4313      	orrs	r3, r2
 8005c42:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f003 030c 	and.w	r3, r3, #12
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d114      	bne.n	8005c7c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c60:	f023 0302 	bic.w	r3, r3, #2
 8005c64:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	7e1b      	ldrb	r3, [r3, #24]
 8005c6a:	039a      	lsls	r2, r3, #14
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <HAL_ADC_Init+0x3bc>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10c      	bne.n	8005cb2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	f023 010f 	bic.w	r1, r3, #15
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	1e5a      	subs	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
 8005cb0:	e007      	b.n	8005cc2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 020f 	bic.w	r2, r2, #15
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f023 0303 	bic.w	r3, r3, #3
 8005cd0:	f043 0201 	orr.w	r2, r3, #1
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40
 8005cd8:	e00a      	b.n	8005cf0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f023 0312 	bic.w	r3, r3, #18
 8005ce2:	f043 0210 	orr.w	r2, r3, #16
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3768      	adds	r7, #104	; 0x68
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	fff0c007 	.word	0xfff0c007

08005d00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b09b      	sub	sp, #108	; 0x6c
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x22>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e2cb      	b.n	80062ba <HAL_ADC_ConfigChannel+0x5ba>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f040 82af 	bne.w	8006298 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d81c      	bhi.n	8005d7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4413      	add	r3, r2
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	461a      	mov	r2, r3
 8005d56:	231f      	movs	r3, #31
 8005d58:	4093      	lsls	r3, r2
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	4019      	ands	r1, r3
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4613      	mov	r3, r2
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4413      	add	r3, r2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
 8005d7a:	e063      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b09      	cmp	r3, #9
 8005d82:	d81e      	bhi.n	8005dc2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4413      	add	r3, r2
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	3b1e      	subs	r3, #30
 8005d98:	221f      	movs	r2, #31
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	4019      	ands	r1, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6818      	ldr	r0, [r3, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	4413      	add	r3, r2
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	3b1e      	subs	r3, #30
 8005db4:	fa00 f203 	lsl.w	r2, r0, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8005dc0:	e040      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b0e      	cmp	r3, #14
 8005dc8:	d81e      	bhi.n	8005e08 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	4413      	add	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	3b3c      	subs	r3, #60	; 0x3c
 8005dde:	221f      	movs	r2, #31
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	43db      	mvns	r3, r3
 8005de6:	4019      	ands	r1, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6818      	ldr	r0, [r3, #0]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	4613      	mov	r3, r2
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	4413      	add	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	3b3c      	subs	r3, #60	; 0x3c
 8005dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
 8005e06:	e01d      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	4413      	add	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	3b5a      	subs	r3, #90	; 0x5a
 8005e1c:	221f      	movs	r2, #31
 8005e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e22:	43db      	mvns	r3, r3
 8005e24:	4019      	ands	r1, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	4413      	add	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	3b5a      	subs	r3, #90	; 0x5a
 8005e38:	fa00 f203 	lsl.w	r2, r0, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f040 80e5 	bne.w	800601e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b09      	cmp	r3, #9
 8005e5a:	d91c      	bls.n	8005e96 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6999      	ldr	r1, [r3, #24]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4613      	mov	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4413      	add	r3, r2
 8005e6c:	3b1e      	subs	r3, #30
 8005e6e:	2207      	movs	r2, #7
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	43db      	mvns	r3, r3
 8005e76:	4019      	ands	r1, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	6898      	ldr	r0, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	4413      	add	r3, r2
 8005e86:	3b1e      	subs	r3, #30
 8005e88:	fa00 f203 	lsl.w	r2, r0, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	619a      	str	r2, [r3, #24]
 8005e94:	e019      	b.n	8005eca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6959      	ldr	r1, [r3, #20]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	2207      	movs	r2, #7
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	4019      	ands	r1, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6898      	ldr	r0, [r3, #8]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	4413      	add	r3, r2
 8005ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	005b      	lsls	r3, r3, #1
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d84f      	bhi.n	8005f8c <HAL_ADC_ConfigChannel+0x28c>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <HAL_ADC_ConfigChannel+0x1f4>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f05 	.word	0x08005f05
 8005ef8:	08005f27 	.word	0x08005f27
 8005efc:	08005f49 	.word	0x08005f49
 8005f00:	08005f6b 	.word	0x08005f6b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f0a:	4b9f      	ldr	r3, [pc, #636]	; (8006188 <HAL_ADC_ConfigChannel+0x488>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	0691      	lsls	r1, r2, #26
 8005f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f16:	430a      	orrs	r2, r1
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005f24:	e07e      	b.n	8006024 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005f2c:	4b96      	ldr	r3, [pc, #600]	; (8006188 <HAL_ADC_ConfigChannel+0x488>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	0691      	lsls	r1, r2, #26
 8005f36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f44:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005f46:	e06d      	b.n	8006024 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005f4e:	4b8e      	ldr	r3, [pc, #568]	; (8006188 <HAL_ADC_ConfigChannel+0x488>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	0691      	lsls	r1, r2, #26
 8005f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f66:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005f68:	e05c      	b.n	8006024 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005f70:	4b85      	ldr	r3, [pc, #532]	; (8006188 <HAL_ADC_ConfigChannel+0x488>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	0691      	lsls	r1, r2, #26
 8005f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005f88:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005f8a:	e04b      	b.n	8006024 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	069b      	lsls	r3, r3, #26
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d107      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	069b      	lsls	r3, r3, #26
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d107      	bne.n	8005fd4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005fd2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	069b      	lsls	r3, r3, #26
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d107      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005ff6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	069b      	lsls	r3, r3, #26
 8006008:	429a      	cmp	r2, r3
 800600a:	d10a      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800601a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800601c:	e001      	b.n	8006022 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800601e:	bf00      	nop
 8006020:	e000      	b.n	8006024 <HAL_ADC_ConfigChannel+0x324>
      break;
 8006022:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d108      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x344>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x344>
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_ADC_ConfigChannel+0x346>
 8006044:	2300      	movs	r3, #0
 8006046:	2b00      	cmp	r3, #0
 8006048:	f040 8131 	bne.w	80062ae <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d00f      	beq.n	8006074 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2201      	movs	r2, #1
 8006062:	fa02 f303 	lsl.w	r3, r2, r3
 8006066:	43da      	mvns	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	400a      	ands	r2, r1
 800606e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006072:	e049      	b.n	8006108 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2201      	movs	r2, #1
 8006082:	409a      	lsls	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b09      	cmp	r3, #9
 8006094:	d91c      	bls.n	80060d0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6999      	ldr	r1, [r3, #24]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4413      	add	r3, r2
 80060a6:	3b1b      	subs	r3, #27
 80060a8:	2207      	movs	r2, #7
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	43db      	mvns	r3, r3
 80060b0:	4019      	ands	r1, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6898      	ldr	r0, [r3, #8]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	4613      	mov	r3, r2
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	4413      	add	r3, r2
 80060c0:	3b1b      	subs	r3, #27
 80060c2:	fa00 f203 	lsl.w	r2, r0, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	619a      	str	r2, [r3, #24]
 80060ce:	e01b      	b.n	8006108 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6959      	ldr	r1, [r3, #20]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	4613      	mov	r3, r2
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	4413      	add	r3, r2
 80060e2:	2207      	movs	r2, #7
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	4019      	ands	r1, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	6898      	ldr	r0, [r3, #8]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	4613      	mov	r3, r2
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	4413      	add	r3, r2
 80060fc:	fa00 f203 	lsl.w	r2, r0, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006110:	d004      	beq.n	800611c <HAL_ADC_ConfigChannel+0x41c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1d      	ldr	r2, [pc, #116]	; (800618c <HAL_ADC_ConfigChannel+0x48c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d101      	bne.n	8006120 <HAL_ADC_ConfigChannel+0x420>
 800611c:	4b1c      	ldr	r3, [pc, #112]	; (8006190 <HAL_ADC_ConfigChannel+0x490>)
 800611e:	e000      	b.n	8006122 <HAL_ADC_ConfigChannel+0x422>
 8006120:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <HAL_ADC_ConfigChannel+0x494>)
 8006122:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b10      	cmp	r3, #16
 800612a:	d105      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800612c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800613c:	2b11      	cmp	r3, #17
 800613e:	d105      	bne.n	800614c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006150:	2b12      	cmp	r3, #18
 8006152:	f040 80ac 	bne.w	80062ae <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 80a5 	bne.w	80062ae <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800616c:	d102      	bne.n	8006174 <HAL_ADC_ConfigChannel+0x474>
 800616e:	4b07      	ldr	r3, [pc, #28]	; (800618c <HAL_ADC_ConfigChannel+0x48c>)
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e023      	b.n	80061bc <HAL_ADC_ConfigChannel+0x4bc>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a04      	ldr	r2, [pc, #16]	; (800618c <HAL_ADC_ConfigChannel+0x48c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d10c      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x498>
 800617e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e01a      	b.n	80061bc <HAL_ADC_ConfigChannel+0x4bc>
 8006186:	bf00      	nop
 8006188:	83fff000 	.word	0x83fff000
 800618c:	50000100 	.word	0x50000100
 8006190:	50000300 	.word	0x50000300
 8006194:	50000700 	.word	0x50000700
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a4a      	ldr	r2, [pc, #296]	; (80062c8 <HAL_ADC_ConfigChannel+0x5c8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d102      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x4a8>
 80061a2:	4b4a      	ldr	r3, [pc, #296]	; (80062cc <HAL_ADC_ConfigChannel+0x5cc>)
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	e009      	b.n	80061bc <HAL_ADC_ConfigChannel+0x4bc>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a47      	ldr	r2, [pc, #284]	; (80062cc <HAL_ADC_ConfigChannel+0x5cc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d102      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x4b8>
 80061b2:	4b45      	ldr	r3, [pc, #276]	; (80062c8 <HAL_ADC_ConfigChannel+0x5c8>)
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e001      	b.n	80061bc <HAL_ADC_ConfigChannel+0x4bc>
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d108      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x4dc>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_ADC_ConfigChannel+0x4dc>
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <HAL_ADC_ConfigChannel+0x4de>
 80061dc:	2300      	movs	r3, #0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d150      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80061e2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d107      	bne.n	8006204 <HAL_ADC_ConfigChannel+0x504>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_ADC_ConfigChannel+0x504>
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <HAL_ADC_ConfigChannel+0x506>
 8006204:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006206:	2b00      	cmp	r3, #0
 8006208:	d13c      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b10      	cmp	r3, #16
 8006210:	d11d      	bne.n	800624e <HAL_ADC_ConfigChannel+0x54e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800621a:	d118      	bne.n	800624e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800621c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006226:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006228:	4b29      	ldr	r3, [pc, #164]	; (80062d0 <HAL_ADC_ConfigChannel+0x5d0>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a29      	ldr	r2, [pc, #164]	; (80062d4 <HAL_ADC_ConfigChannel+0x5d4>)
 800622e:	fba2 2303 	umull	r2, r3, r2, r3
 8006232:	0c9a      	lsrs	r2, r3, #18
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800623e:	e002      	b.n	8006246 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3b01      	subs	r3, #1
 8006244:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f9      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800624c:	e02e      	b.n	80062ac <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b11      	cmp	r3, #17
 8006254:	d10b      	bne.n	800626e <HAL_ADC_ConfigChannel+0x56e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800625e:	d106      	bne.n	800626e <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800626a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800626c:	e01e      	b.n	80062ac <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b12      	cmp	r3, #18
 8006274:	d11a      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800627e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006280:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006282:	e013      	b.n	80062ac <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006296:	e00a      	b.n	80062ae <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80062aa:	e000      	b.n	80062ae <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80062ac:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80062b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	376c      	adds	r7, #108	; 0x6c
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	50000400 	.word	0x50000400
 80062cc:	50000500 	.word	0x50000500
 80062d0:	200006d0 	.word	0x200006d0
 80062d4:	431bde83 	.word	0x431bde83

080062d8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80062d8:	b480      	push	{r7}
 80062da:	b09d      	sub	sp, #116	; 0x74
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
  
  /* Injected context queue feature: temporary JSQR variables defined in      */
  /* static to be passed over calls of this function                          */
  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_ADCEx_InjectedConfigChannel+0x26>
 80062fa:	2302      	movs	r3, #2
 80062fc:	e365      	b.n	80069ca <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */
  
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_ADCEx_InjectedConfigChannel+0x3e>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	699b      	ldr	r3, [r3, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006312:	2b01      	cmp	r3, #1
 8006314:	d151      	bne.n	80063ba <HAL_ADCEx_InjectedConfigChannel+0xe2>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 used)        */
    
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d143      	bne.n	80063a6 <HAL_ADCEx_InjectedConfigChannel+0xce>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d02b      	beq.n	800637e <HAL_ADCEx_InjectedConfigChannel+0xa6>
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	021a      	lsls	r2, r3, #8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4984      	ldr	r1, [pc, #528]	; (8006544 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 8006332:	428b      	cmp	r3, r1
 8006334:	d004      	beq.n	8006340 <HAL_ADCEx_InjectedConfigChannel+0x68>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4983      	ldr	r1, [pc, #524]	; (8006548 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 800633c:	428b      	cmp	r3, r1
 800633e:	d114      	bne.n	800636a <HAL_ADCEx_InjectedConfigChannel+0x92>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d00e      	beq.n	8006366 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	2b14      	cmp	r3, #20
 800634e:	d008      	beq.n	8006362 <HAL_ADCEx_InjectedConfigChannel+0x8a>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	2b1c      	cmp	r3, #28
 8006356:	d002      	beq.n	800635e <HAL_ADCEx_InjectedConfigChannel+0x86>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	e007      	b.n	800636e <HAL_ADCEx_InjectedConfigChannel+0x96>
 800635e:	2310      	movs	r3, #16
 8006360:	e005      	b.n	800636e <HAL_ADCEx_InjectedConfigChannel+0x96>
 8006362:	231c      	movs	r3, #28
 8006364:	e003      	b.n	800636e <HAL_ADCEx_InjectedConfigChannel+0x96>
 8006366:	2334      	movs	r3, #52	; 0x34
 8006368:	e001      	b.n	800636e <HAL_ADCEx_InjectedConfigChannel+0x96>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	431a      	orrs	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	4313      	orrs	r3, r2
 8006376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006378:	4313      	orrs	r3, r2
 800637a:	66bb      	str	r3, [r7, #104]	; 0x68
 800637c:	e005      	b.n	800638a <HAL_ADCEx_InjectedConfigChannel+0xb2>
                                                 ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                 sConfigInjected->ExternalTrigInjecConvEdge                          );
      }
      else
      {
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006386:	4313      	orrs	r3, r2
 8006388:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      
      /* Update ADC register JSQR */
      MODIFY_REG(hadc->Instance->JSQR           ,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006390:	4b6e      	ldr	r3, [pc, #440]	; (800654c <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8006392:	4013      	ands	r3, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800639a:	430b      	orrs	r3, r1
 800639c:	64d3      	str	r3, [r2, #76]	; 0x4c
                 ADC_JSQR_JEXTSEL |
                 ADC_JSQR_JL                    ,
                 tmp_JSQR_ContextQueueBeingBuilt );
      
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063a2:	649a      	str	r2, [r3, #72]	; 0x48
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80063a4:	e07f      	b.n	80064a6 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063aa:	f043 0220 	orr.w	r2, r3, #32
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      tmp_hal_status = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80063b8:	e075      	b.n	80064a6 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
    /* Procedure to define injected context register JSQR over successive     */
    /* calls of this function, for each injected channel rank:                */
    
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger                      */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d140      	bne.n	8006444 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	699a      	ldr	r2, [r3, #24]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Initialize value that will be set into register JSQR */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	649a      	str	r2, [r3, #72]	; 0x48
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d02d      	beq.n	8006434 <HAL_ADCEx_InjectedConfigChannel+0x15c>
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	1e59      	subs	r1, r3, #1
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4857      	ldr	r0, [pc, #348]	; (8006544 <HAL_ADCEx_InjectedConfigChannel+0x26c>)
 80063e8:	4283      	cmp	r3, r0
 80063ea:	d004      	beq.n	80063f6 <HAL_ADCEx_InjectedConfigChannel+0x11e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4855      	ldr	r0, [pc, #340]	; (8006548 <HAL_ADCEx_InjectedConfigChannel+0x270>)
 80063f2:	4283      	cmp	r3, r0
 80063f4:	d114      	bne.n	8006420 <HAL_ADCEx_InjectedConfigChannel+0x148>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	2b08      	cmp	r3, #8
 80063fc:	d00e      	beq.n	800641c <HAL_ADCEx_InjectedConfigChannel+0x144>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	2b14      	cmp	r3, #20
 8006404:	d008      	beq.n	8006418 <HAL_ADCEx_InjectedConfigChannel+0x140>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	2b1c      	cmp	r3, #28
 800640c:	d002      	beq.n	8006414 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	e007      	b.n	8006424 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8006414:	2310      	movs	r3, #16
 8006416:	e005      	b.n	8006424 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8006418:	231c      	movs	r3, #28
 800641a:	e003      	b.n	8006424 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 800641c:	2334      	movs	r3, #52	; 0x34
 800641e:	e001      	b.n	8006424 <HAL_ADCEx_InjectedConfigChannel+0x14c>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	4319      	orrs	r1, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	430b      	orrs	r3, r1
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	649a      	str	r2, [r3, #72]	; 0x48
 8006432:	e007      	b.n	8006444 <HAL_ADCEx_InjectedConfigChannel+0x16c>
                                                    ADC_JSQR_JEXTSEL_SET(hadc, sConfigInjected->ExternalTrigInjecConv) |
                                                    sConfigInjected->ExternalTrigInjecConvEdge                          );        
      }
      else
      {
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	3b01      	subs	r3, #1
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	649a      	str	r2, [r3, #72]	; 0x48

      /* 2. Continue setting of context under definition with parameter       */
      /*    related to each channel: channel rank sequence                    */
      
      /* Set the JSQx bits for the selected rank */
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	3302      	adds	r3, #2
 8006456:	221f      	movs	r2, #31
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	4019      	ands	r1, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4413      	add	r3, r2
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	3302      	adds	r3, #2
 8006472:	fa00 f303 	lsl.w	r3, r0, r3
 8006476:	ea41 0203 	orr.w	r2, r1, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	649a      	str	r2, [r3, #72]	; 0x48
                 ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank)                   ,
                 ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank) );
      
      /* Decrease channel count after setting into temporary JSQR variable */
      hadc->InjectionConfig.ChannelCount --;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006482:	1e5a      	subs	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* 3. End of context setting: If last channel set, then write context   */
      /*    into register JSQR and make it enter into queue                   */
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      {
        /* Update ADC register JSQR */
        MODIFY_REG(hadc->Instance->JSQR              ,
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006496:	4b2d      	ldr	r3, [pc, #180]	; (800654c <HAL_ADCEx_InjectedConfigChannel+0x274>)
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	430b      	orrs	r3, r1
 80064a4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d12d      	bne.n	8006510 <HAL_ADCEx_InjectedConfigChannel+0x238>
  {     
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	7f5b      	ldrb	r3, [r3, #29]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d110      	bne.n	80064de <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	7f9b      	ldrb	r3, [r3, #30]
 80064ca:	055a      	lsls	r2, r3, #21
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	7f1b      	ldrb	r3, [r3, #28]
 80064d0:	051b      	lsls	r3, r3, #20
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	60da      	str	r2, [r3, #12]
 80064dc:	e018      	b.n	8006510 <HAL_ADCEx_InjectedConfigChannel+0x238>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	7f9b      	ldrb	r3, [r3, #30]
 80064ec:	055a      	lsls	r2, r3, #21
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR_JDISCEN                                                    ,
                 ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) );
      
      /* If injected discontinuous mode was intended to be set and could not  */
      /* due to auto-injected enabled, error is reported.                     */
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	7f1b      	ldrb	r3, [r3, #28]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d108      	bne.n	8006510 <HAL_ADCEx_InjectedConfigChannel+0x238>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0220 	orr.w	r2, r3, #32
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 030c 	and.w	r3, r3, #12
 800651a:	2b00      	cmp	r3, #0
 800651c:	f040 8111 	bne.w	8006742 <HAL_ADCEx_InjectedConfigChannel+0x46a>
  {    
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d113      	bne.n	8006550 <HAL_ADCEx_InjectedConfigChannel+0x278>
    {
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f023 7100 	bic.w	r1, r3, #33554432	; 0x2000000
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	7f5b      	ldrb	r3, [r3, #29]
 8006536:	065a      	lsls	r2, r3, #25
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	e01b      	b.n	800657a <HAL_ADCEx_InjectedConfigChannel+0x2a2>
 8006542:	bf00      	nop
 8006544:	50000400 	.word	0x50000400
 8006548:	50000500 	.word	0x50000500
 800654c:	82082000 	.word	0x82082000
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      /* Disable Automatic injected conversion */
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800655e:	60da      	str	r2, [r3, #12]
      
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	7f5b      	ldrb	r3, [r3, #29]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d108      	bne.n	800657a <HAL_ADCEx_InjectedConfigChannel+0x2a2>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f043 0220 	orr.w	r2, r3, #32
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }
      

    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b09      	cmp	r3, #9
 8006580:	d91c      	bls.n	80065bc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
    {
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6999      	ldr	r1, [r3, #24]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	3b1e      	subs	r3, #30
 8006594:	2207      	movs	r2, #7
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	4019      	ands	r1, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6898      	ldr	r0, [r3, #8]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4613      	mov	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4413      	add	r3, r2
 80065ac:	3b1e      	subs	r3, #30
 80065ae:	fa00 f203 	lsl.w	r2, r0, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	619a      	str	r2, [r3, #24]
 80065ba:	e019      	b.n	80065f0 <HAL_ADCEx_InjectedConfigChannel+0x318>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel)                      ,
                 ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6959      	ldr	r1, [r3, #20]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	2207      	movs	r2, #7
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43db      	mvns	r3, r3
 80065d4:	4019      	ands	r1, r3
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6898      	ldr	r0, [r3, #8]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	fa00 f203 	lsl.w	r2, r0, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */
    
    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695a      	ldr	r2, [r3, #20]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	08db      	lsrs	r3, r3, #3
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfigInjected->InjectedOffsetNumber)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	3b01      	subs	r3, #1
 800660e:	2b03      	cmp	r3, #3
 8006610:	d84e      	bhi.n	80066b0 <HAL_ADCEx_InjectedConfigChannel+0x3d8>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006629 	.word	0x08006629
 800661c:	0800664b 	.word	0x0800664b
 8006620:	0800666d 	.word	0x0800666d
 8006624:	0800668f 	.word	0x0800668f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800662e:	4b9f      	ldr	r3, [pc, #636]	; (80068ac <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006630:	4013      	ands	r3, r2
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	0691      	lsls	r1, r2, #26
 8006638:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800663a:	430a      	orrs	r2, r1
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006646:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                                   ,
                 ADC_OFR1_OFFSET1_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 8006648:	e07e      	b.n	8006748 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2                               ,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006650:	4b96      	ldr	r3, [pc, #600]	; (80068ac <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006652:	4013      	ands	r3, r2
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	0691      	lsls	r1, r2, #26
 800665a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800665c:	430a      	orrs	r2, r1
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006668:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                                   ,
                 ADC_OFR2_OFFSET2_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 800666a:	e06d      	b.n	8006748 <HAL_ADCEx_InjectedConfigChannel+0x470>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3                               ,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006672:	4b8e      	ldr	r3, [pc, #568]	; (80068ac <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006674:	4013      	ands	r3, r2
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	0691      	lsls	r1, r2, #26
 800667c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800667e:	430a      	orrs	r2, r1
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800668a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                                   ,
                 ADC_OFR3_OFFSET3_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 800668c:	e05c      	b.n	8006748 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4                               ,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006694:	4b85      	ldr	r3, [pc, #532]	; (80068ac <HAL_ADCEx_InjectedConfigChannel+0x5d4>)
 8006696:	4013      	ands	r3, r2
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	0691      	lsls	r1, r2, #26
 800669e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066a0:	430a      	orrs	r2, r1
 80066a2:	431a      	orrs	r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80066ac:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                                   ,
                 ADC_OFR4_OFFSET4_EN                               |
                 ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel) |
                 tmpOffsetShifted                                    );
      break;
 80066ae:	e04b      	b.n	8006748 <HAL_ADCEx_InjectedConfigChannel+0x470>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	069b      	lsls	r3, r3, #26
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d107      	bne.n	80066d4 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066d2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	069b      	lsls	r3, r3, #26
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d107      	bne.n	80066f8 <HAL_ADCEx_InjectedConfigChannel+0x420>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066f6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	069b      	lsls	r3, r3, #26
 8006708:	429a      	cmp	r2, r3
 800670a:	d107      	bne.n	800671c <HAL_ADCEx_InjectedConfigChannel+0x444>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800671a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	069b      	lsls	r3, r3, #26
 800672c:	429a      	cmp	r2, r3
 800672e:	d10a      	bne.n	8006746 <HAL_ADCEx_InjectedConfigChannel+0x46e>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800673e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8006740:	e001      	b.n	8006746 <HAL_ADCEx_InjectedConfigChannel+0x46e>
    }
    
  }
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <HAL_ADCEx_InjectedConfigChannel+0x470>
      break;
 8006746:	bf00      	nop
  
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b01      	cmp	r3, #1
 8006754:	d108      	bne.n	8006768 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_ADCEx_InjectedConfigChannel+0x490>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_ADCEx_InjectedConfigChannel+0x492>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 8127 	bne.w	80069be <HAL_ADCEx_InjectedConfigChannel+0x6e6>
  {
    /* Configuration of differential mode */
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d00f      	beq.n	8006798 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2201      	movs	r2, #1
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43da      	mvns	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	400a      	ands	r2, r1
 8006792:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8006796:	e049      	b.n	800682c <HAL_ADCEx_InjectedConfigChannel+0x554>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	430a      	orrs	r2, r1
 80067ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b09      	cmp	r3, #9
 80067b8:	d91c      	bls.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6999      	ldr	r1, [r3, #24]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	4413      	add	r3, r2
 80067ca:	3b1b      	subs	r3, #27
 80067cc:	2207      	movs	r2, #7
 80067ce:	fa02 f303 	lsl.w	r3, r2, r3
 80067d2:	43db      	mvns	r3, r3
 80067d4:	4019      	ands	r1, r3
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6898      	ldr	r0, [r3, #8]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	4413      	add	r3, r2
 80067e4:	3b1b      	subs	r3, #27
 80067e6:	fa00 f203 	lsl.w	r2, r0, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	619a      	str	r2, [r3, #24]
 80067f2:	e01b      	b.n	800682c <HAL_ADCEx_InjectedConfigChannel+0x554>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfigInjected->InjectedChannel +1U),
                   ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6959      	ldr	r1, [r3, #20]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	4613      	mov	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	4413      	add	r3, r2
 8006806:	2207      	movs	r2, #7
 8006808:	fa02 f303 	lsl.w	r3, r2, r3
 800680c:	43db      	mvns	r3, r3
 800680e:	4019      	ands	r1, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6898      	ldr	r0, [r3, #8]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	4613      	mov	r3, r2
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4413      	add	r3, r2
 8006820:	fa00 f203 	lsl.w	r2, r0, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006834:	d004      	beq.n	8006840 <HAL_ADCEx_InjectedConfigChannel+0x568>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a1d      	ldr	r2, [pc, #116]	; (80068b0 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d101      	bne.n	8006844 <HAL_ADCEx_InjectedConfigChannel+0x56c>
 8006840:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <HAL_ADCEx_InjectedConfigChannel+0x5dc>)
 8006842:	e000      	b.n	8006846 <HAL_ADCEx_InjectedConfigChannel+0x56e>
 8006844:	4b1c      	ldr	r3, [pc, #112]	; (80068b8 <HAL_ADCEx_InjectedConfigChannel+0x5e0>)
 8006846:	663b      	str	r3, [r7, #96]	; 0x60
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b10      	cmp	r3, #16
 800684e:	d105      	bne.n	800685c <HAL_ADCEx_InjectedConfigChannel+0x584>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8006858:	2b00      	cmp	r3, #0
 800685a:	d015      	beq.n	8006888 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006860:	2b11      	cmp	r3, #17
 8006862:	d105      	bne.n	8006870 <HAL_ADCEx_InjectedConfigChannel+0x598>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_ADCEx_InjectedConfigChannel+0x5b0>
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006874:	2b12      	cmp	r3, #18
 8006876:	f040 80a2 	bne.w	80069be <HAL_ADCEx_InjectedConfigChannel+0x6e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800687a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8006882:	2b00      	cmp	r3, #0
 8006884:	f040 809b 	bne.w	80069be <HAL_ADCEx_InjectedConfigChannel+0x6e6>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006890:	d102      	bne.n	8006898 <HAL_ADCEx_InjectedConfigChannel+0x5c0>
 8006892:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	e023      	b.n	80068e0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a04      	ldr	r2, [pc, #16]	; (80068b0 <HAL_ADCEx_InjectedConfigChannel+0x5d8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10c      	bne.n	80068bc <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80068a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	e01a      	b.n	80068e0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80068aa:	bf00      	nop
 80068ac:	83fff000 	.word	0x83fff000
 80068b0:	50000100 	.word	0x50000100
 80068b4:	50000300 	.word	0x50000300
 80068b8:	50000700 	.word	0x50000700
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a45      	ldr	r2, [pc, #276]	; (80069d8 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d102      	bne.n	80068cc <HAL_ADCEx_InjectedConfigChannel+0x5f4>
 80068c6:	4b45      	ldr	r3, [pc, #276]	; (80069dc <HAL_ADCEx_InjectedConfigChannel+0x704>)
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	e009      	b.n	80068e0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a42      	ldr	r2, [pc, #264]	; (80069dc <HAL_ADCEx_InjectedConfigChannel+0x704>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d102      	bne.n	80068dc <HAL_ADCEx_InjectedConfigChannel+0x604>
 80068d6:	4b40      	ldr	r3, [pc, #256]	; (80069d8 <HAL_ADCEx_InjectedConfigChannel+0x700>)
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e001      	b.n	80068e0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d108      	bne.n	8006900 <HAL_ADCEx_InjectedConfigChannel+0x628>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_ADCEx_InjectedConfigChannel+0x628>
 80068fc:	2301      	movs	r3, #1
 80068fe:	e000      	b.n	8006902 <HAL_ADCEx_InjectedConfigChannel+0x62a>
 8006900:	2300      	movs	r3, #0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d150      	bne.n	80069a8 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006906:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006908:	2b00      	cmp	r3, #0
 800690a:	d010      	beq.n	800692e <HAL_ADCEx_InjectedConfigChannel+0x656>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 0303 	and.w	r3, r3, #3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d107      	bne.n	8006928 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_ADCEx_InjectedConfigChannel+0x650>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_ADCEx_InjectedConfigChannel+0x652>
 8006928:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800692a:	2b00      	cmp	r3, #0
 800692c:	d13c      	bne.n	80069a8 <HAL_ADCEx_InjectedConfigChannel+0x6d0>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b10      	cmp	r3, #16
 8006934:	d11d      	bne.n	8006972 <HAL_ADCEx_InjectedConfigChannel+0x69a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800693e:	d118      	bne.n	8006972 <HAL_ADCEx_InjectedConfigChannel+0x69a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800694a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800694c:	4b24      	ldr	r3, [pc, #144]	; (80069e0 <HAL_ADCEx_InjectedConfigChannel+0x708>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <HAL_ADCEx_InjectedConfigChannel+0x70c>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	0c9a      	lsrs	r2, r3, #18
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8006962:	e002      	b.n	800696a <HAL_ADCEx_InjectedConfigChannel+0x692>
          {
            wait_loop_index--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3b01      	subs	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1f9      	bne.n	8006964 <HAL_ADCEx_InjectedConfigChannel+0x68c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006970:	e024      	b.n	80069bc <HAL_ADCEx_InjectedConfigChannel+0x6e4>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b11      	cmp	r3, #17
 8006978:	d10b      	bne.n	8006992 <HAL_ADCEx_InjectedConfigChannel+0x6ba>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006982:	d106      	bne.n	8006992 <HAL_ADCEx_InjectedConfigChannel+0x6ba>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800698c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800698e:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006990:	e014      	b.n	80069bc <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b12      	cmp	r3, #18
 8006998:	d110      	bne.n	80069bc <HAL_ADCEx_InjectedConfigChannel+0x6e4>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800699a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80069a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a4:	609a      	str	r2, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80069a6:	e009      	b.n	80069bc <HAL_ADCEx_InjectedConfigChannel+0x6e4>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	f043 0220 	orr.w	r2, r3, #32
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80069ba:	e000      	b.n	80069be <HAL_ADCEx_InjectedConfigChannel+0x6e6>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80069bc:	bf00      	nop
    }
    
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80069c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3774      	adds	r7, #116	; 0x74
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	50000400 	.word	0x50000400
 80069dc:	50000500 	.word	0x50000500
 80069e0:	200006d0 	.word	0x200006d0
 80069e4:	431bde83 	.word	0x431bde83

080069e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b099      	sub	sp, #100	; 0x64
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a00:	d102      	bne.n	8006a08 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006a02:	4b6d      	ldr	r3, [pc, #436]	; (8006bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	e01a      	b.n	8006a3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6a      	ldr	r2, [pc, #424]	; (8006bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d103      	bne.n	8006a1a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006a12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	e011      	b.n	8006a3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a67      	ldr	r2, [pc, #412]	; (8006bbc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d102      	bne.n	8006a2a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006a24:	4b66      	ldr	r3, [pc, #408]	; (8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006a26:	60bb      	str	r3, [r7, #8]
 8006a28:	e009      	b.n	8006a3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a64      	ldr	r2, [pc, #400]	; (8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d102      	bne.n	8006a3a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006a34:	4b61      	ldr	r3, [pc, #388]	; (8006bbc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006a36:	60bb      	str	r3, [r7, #8]
 8006a38:	e001      	b.n	8006a3e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0b0      	b.n	8006baa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e0a9      	b.n	8006baa <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f040 808d 	bne.w	8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f003 0304 	and.w	r3, r3, #4
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f040 8086 	bne.w	8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a84:	d004      	beq.n	8006a90 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a4b      	ldr	r2, [pc, #300]	; (8006bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d101      	bne.n	8006a94 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006a90:	4b4c      	ldr	r3, [pc, #304]	; (8006bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006a92:	e000      	b.n	8006a96 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006a94:	4b4c      	ldr	r3, [pc, #304]	; (8006bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006a96:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d040      	beq.n	8006b22 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6859      	ldr	r1, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ab2:	035b      	lsls	r3, r3, #13
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aba:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d108      	bne.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d101      	bne.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006adc:	2300      	movs	r3, #0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d15c      	bne.n	8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d107      	bne.n	8006afe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006afe:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d14b      	bne.n	8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b0c:	f023 030f 	bic.w	r3, r3, #15
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	6811      	ldr	r1, [r2, #0]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	6892      	ldr	r2, [r2, #8]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b1e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b20:	e03c      	b.n	8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b2c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d108      	bne.n	8006b4e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d123      	bne.n	8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d107      	bne.n	8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006b70:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d112      	bne.n	8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b7e:	f023 030f 	bic.w	r3, r3, #15
 8006b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b84:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b86:	e009      	b.n	8006b9c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	f043 0220 	orr.w	r2, r3, #32
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b9a:	e000      	b.n	8006b9e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b9c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006ba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8006baa:	4618      	mov	r0, r3
 8006bac:	3764      	adds	r7, #100	; 0x64
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	50000100 	.word	0x50000100
 8006bbc:	50000400 	.word	0x50000400
 8006bc0:	50000500 	.word	0x50000500
 8006bc4:	50000300 	.word	0x50000300
 8006bc8:	50000700 	.word	0x50000700

08006bcc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d108      	bne.n	8006bf8 <ADC_Disable+0x2c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <ADC_Disable+0x2c>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <ADC_Disable+0x2e>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d040      	beq.n	8006c80 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 030d 	and.w	r3, r3, #13
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d10f      	bne.n	8006c2c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0202 	orr.w	r2, r2, #2
 8006c1a:	609a      	str	r2, [r3, #8]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2203      	movs	r2, #3
 8006c22:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006c24:	f7fe fe5e 	bl	80058e4 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006c2a:	e022      	b.n	8006c72 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	f043 0210 	orr.w	r2, r3, #16
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3c:	f043 0201 	orr.w	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e01c      	b.n	8006c82 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c48:	f7fe fe4c 	bl	80058e4 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d90d      	bls.n	8006c72 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f043 0210 	orr.w	r2, r3, #16
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c66:	f043 0201 	orr.w	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e007      	b.n	8006c82 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d0e3      	beq.n	8006c48 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0ed      	b.n	8006e78 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7fd f93d 	bl	8003f28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0202 	bic.w	r2, r2, #2
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cbe:	f7fe fe11 	bl	80058e4 <HAL_GetTick>
 8006cc2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cc4:	e012      	b.n	8006cec <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006cc6:	f7fe fe0d 	bl	80058e4 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b0a      	cmp	r3, #10
 8006cd2:	d90b      	bls.n	8006cec <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2205      	movs	r2, #5
 8006ce4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0c5      	b.n	8006e78 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e5      	bne.n	8006cc6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0201 	orr.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d0a:	f7fe fdeb 	bl	80058e4 <HAL_GetTick>
 8006d0e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d10:	e012      	b.n	8006d38 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006d12:	f7fe fde7 	bl	80058e4 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b0a      	cmp	r3, #10
 8006d1e:	d90b      	bls.n	8006d38 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2205      	movs	r2, #5
 8006d30:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e09f      	b.n	8006e78 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0e5      	beq.n	8006d12 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	7e1b      	ldrb	r3, [r3, #24]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d108      	bne.n	8006d60 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e007      	b.n	8006d70 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	7e5b      	ldrb	r3, [r3, #25]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d108      	bne.n	8006d8a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e007      	b.n	8006d9a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	7e9b      	ldrb	r3, [r3, #26]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d108      	bne.n	8006db4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0220 	orr.w	r2, r2, #32
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e007      	b.n	8006dc4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0220 	bic.w	r2, r2, #32
 8006dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7edb      	ldrb	r3, [r3, #27]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d108      	bne.n	8006dde <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0210 	bic.w	r2, r2, #16
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	e007      	b.n	8006dee <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0210 	orr.w	r2, r2, #16
 8006dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7f1b      	ldrb	r3, [r3, #28]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d108      	bne.n	8006e08 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0208 	orr.w	r2, r2, #8
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	e007      	b.n	8006e18 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0208 	bic.w	r2, r2, #8
 8006e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7f5b      	ldrb	r3, [r3, #29]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d108      	bne.n	8006e32 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0204 	orr.w	r2, r2, #4
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	e007      	b.n	8006e42 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 0204 	bic.w	r2, r2, #4
 8006e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	431a      	orrs	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	ea42 0103 	orr.w	r1, r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]

  /* Check the COMP handle allocation and lock status */
  if ((hcomp == NULL) || ((hcomp->State & COMP_STATE_BIT_LOCK) != RESET))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d007      	beq.n	8006ea2 <HAL_COMP_Init+0x22>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_COMP_Init+0x28>
  {
    status = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	75fb      	strb	r3, [r7, #23]
 8006ea6:	e064      	b.n	8006f72 <HAL_COMP_Init+0xf2>
      assert_param(IS_COMP_WINDOWMODE_INSTANCE(hcomp->Instance));
      assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    }

    /* Init SYSCFG and the low level hardware to access comparators */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ea8:	4b34      	ldr	r3, [pc, #208]	; (8006f7c <HAL_COMP_Init+0xfc>)
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	4a33      	ldr	r2, [pc, #204]	; (8006f7c <HAL_COMP_Init+0xfc>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	6193      	str	r3, [r2, #24]
 8006eb4:	4b31      	ldr	r3, [pc, #196]	; (8006f7c <HAL_COMP_Init+0xfc>)
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	693b      	ldr	r3, [r7, #16]
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
    /* Init the low level hardware : SYSCFG to access comparators */
      HAL_COMP_MspInit(hcomp);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7fd f875 	bl	8003fb0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_COMP_Init+0x5a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    /* Manage inverting input comparator inverting input connected to a GPIO  */
    /* for STM32F302x, STM32F32xx, STM32F33x.                                 */
    hcomp->Init.InvertingInput = COMP_INVERTINGINPUT_SELECTION(hcomp->Instance, hcomp->Init.InvertingInput);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	605a      	str	r2, [r3, #4]
    /*     Set COMPxBLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set COMPxOUTSEL bits according to hcomp->Init.Output value               */
    /*     Set COMPxPOL bit according to hcomp->Init.OutputPol value                */
    /*     Set COMPxHYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set COMPxMODE bits according to hcomp->Init.Mode value                   */
    COMP_INIT(hcomp);
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60fb      	str	r3, [r7, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0282 	bic.w	r2, r3, #130	; 0x82
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f023 020c 	bic.w	r2, r3, #12
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]

    /* Initialize the COMP state*/
    hcomp->State = HAL_COMP_STATE_READY;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }

  return status;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	40021000 	.word	0x40021000

08006f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f003 0307 	and.w	r3, r3, #7
 8006f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fb2:	4a04      	ldr	r2, [pc, #16]	; (8006fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	60d3      	str	r3, [r2, #12]
}
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	e000ed00 	.word	0xe000ed00

08006fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	0a1b      	lsrs	r3, r3, #8
 8006fd2:	f003 0307 	and.w	r3, r3, #7
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	e000ed00 	.word	0xe000ed00

08006fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	db0b      	blt.n	800700e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	f003 021f 	and.w	r2, r3, #31
 8006ffc:	4907      	ldr	r1, [pc, #28]	; (800701c <__NVIC_EnableIRQ+0x38>)
 8006ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	2001      	movs	r0, #1
 8007006:	fa00 f202 	lsl.w	r2, r0, r2
 800700a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	e000e100 	.word	0xe000e100

08007020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	6039      	str	r1, [r7, #0]
 800702a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800702c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007030:	2b00      	cmp	r3, #0
 8007032:	db0a      	blt.n	800704a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	b2da      	uxtb	r2, r3
 8007038:	490c      	ldr	r1, [pc, #48]	; (800706c <__NVIC_SetPriority+0x4c>)
 800703a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800703e:	0112      	lsls	r2, r2, #4
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	440b      	add	r3, r1
 8007044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007048:	e00a      	b.n	8007060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	4908      	ldr	r1, [pc, #32]	; (8007070 <__NVIC_SetPriority+0x50>)
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	f003 030f 	and.w	r3, r3, #15
 8007056:	3b04      	subs	r3, #4
 8007058:	0112      	lsls	r2, r2, #4
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	440b      	add	r3, r1
 800705e:	761a      	strb	r2, [r3, #24]
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	e000e100 	.word	0xe000e100
 8007070:	e000ed00 	.word	0xe000ed00

08007074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f1c3 0307 	rsb	r3, r3, #7
 800708e:	2b04      	cmp	r3, #4
 8007090:	bf28      	it	cs
 8007092:	2304      	movcs	r3, #4
 8007094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	3304      	adds	r3, #4
 800709a:	2b06      	cmp	r3, #6
 800709c:	d902      	bls.n	80070a4 <NVIC_EncodePriority+0x30>
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3b03      	subs	r3, #3
 80070a2:	e000      	b.n	80070a6 <NVIC_EncodePriority+0x32>
 80070a4:	2300      	movs	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070a8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	43da      	mvns	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	401a      	ands	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070bc:	f04f 31ff 	mov.w	r1, #4294967295
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	fa01 f303 	lsl.w	r3, r1, r3
 80070c6:	43d9      	mvns	r1, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070cc:	4313      	orrs	r3, r2
         );
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3724      	adds	r7, #36	; 0x24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
	...

080070dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070ec:	d301      	bcc.n	80070f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070ee:	2301      	movs	r3, #1
 80070f0:	e00f      	b.n	8007112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070f2:	4a0a      	ldr	r2, [pc, #40]	; (800711c <SysTick_Config+0x40>)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070fa:	210f      	movs	r1, #15
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	f7ff ff8e 	bl	8007020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <SysTick_Config+0x40>)
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800710a:	4b04      	ldr	r3, [pc, #16]	; (800711c <SysTick_Config+0x40>)
 800710c:	2207      	movs	r2, #7
 800710e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	e000e010 	.word	0xe000e010

08007120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff ff29 	bl	8006f80 <__NVIC_SetPriorityGrouping>
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af00      	add	r7, sp, #0
 800713c:	4603      	mov	r3, r0
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007148:	f7ff ff3e 	bl	8006fc8 <__NVIC_GetPriorityGrouping>
 800714c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f7ff ff8e 	bl	8007074 <NVIC_EncodePriority>
 8007158:	4602      	mov	r2, r0
 800715a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800715e:	4611      	mov	r1, r2
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff ff5d 	bl	8007020 <__NVIC_SetPriority>
}
 8007166:	bf00      	nop
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	4603      	mov	r3, r0
 8007176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff ff31 	bl	8006fe4 <__NVIC_EnableIRQ>
}
 8007182:	bf00      	nop
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff ffa2 	bl	80070dc <SysTick_Config>
 8007198:	4603      	mov	r3, r0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80071a6:	f000 f802 	bl	80071ae <HAL_SYSTICK_Callback>
}
 80071aa:	bf00      	nop
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80071ae:	b480      	push	{r7}
 80071b0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e014      	b.n	80071f8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	791b      	ldrb	r3, [r3, #4]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d105      	bne.n	80071e4 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fc ff5c 	bl	800409c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	617b      	str	r3, [r7, #20]
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	795b      	ldrb	r3, [r3, #5]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_DAC_ConfigChannel+0x20>
 800721c:	2302      	movs	r3, #2
 800721e:	e036      	b.n	800728e <HAL_DAC_ConfigChannel+0x8e>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2202      	movs	r2, #2
 800722a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8007234:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	43db      	mvns	r3, r3
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	4013      	ands	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6819      	ldr	r1, [r3, #0]
 800726e:	22c0      	movs	r2, #192	; 0xc0
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	43da      	mvns	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	400a      	ands	r2, r1
 800727e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072aa:	e154      	b.n	8007556 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	2101      	movs	r1, #1
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	fa01 f303 	lsl.w	r3, r1, r3
 80072b8:	4013      	ands	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8146 	beq.w	8007550 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d003      	beq.n	80072d4 <HAL_GPIO_Init+0x38>
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	2b12      	cmp	r3, #18
 80072d2:	d123      	bne.n	800731c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	08da      	lsrs	r2, r3, #3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3208      	adds	r2, #8
 80072dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	220f      	movs	r2, #15
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4013      	ands	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	08da      	lsrs	r2, r3, #3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3208      	adds	r2, #8
 8007316:	6939      	ldr	r1, [r7, #16]
 8007318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	2203      	movs	r2, #3
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	43db      	mvns	r3, r3
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4013      	ands	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 0203 	and.w	r2, r3, #3
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d00b      	beq.n	8007370 <HAL_GPIO_Init+0xd4>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d007      	beq.n	8007370 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007364:	2b11      	cmp	r3, #17
 8007366:	d003      	beq.n	8007370 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2b12      	cmp	r3, #18
 800736e:	d130      	bne.n	80073d2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	2203      	movs	r2, #3
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	43db      	mvns	r3, r3
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4013      	ands	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	4313      	orrs	r3, r2
 8007398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80073a6:	2201      	movs	r2, #1
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	43db      	mvns	r3, r3
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	4013      	ands	r3, r2
 80073b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	091b      	lsrs	r3, r3, #4
 80073bc:	f003 0201 	and.w	r2, r3, #1
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	2203      	movs	r2, #3
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43db      	mvns	r3, r3
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4013      	ands	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80a0 	beq.w	8007550 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007410:	4b58      	ldr	r3, [pc, #352]	; (8007574 <HAL_GPIO_Init+0x2d8>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	4a57      	ldr	r2, [pc, #348]	; (8007574 <HAL_GPIO_Init+0x2d8>)
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	6193      	str	r3, [r2, #24]
 800741c:	4b55      	ldr	r3, [pc, #340]	; (8007574 <HAL_GPIO_Init+0x2d8>)
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	60bb      	str	r3, [r7, #8]
 8007426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007428:	4a53      	ldr	r2, [pc, #332]	; (8007578 <HAL_GPIO_Init+0x2dc>)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	089b      	lsrs	r3, r3, #2
 800742e:	3302      	adds	r3, #2
 8007430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f003 0303 	and.w	r3, r3, #3
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	220f      	movs	r2, #15
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	43db      	mvns	r3, r3
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	4013      	ands	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007452:	d019      	beq.n	8007488 <HAL_GPIO_Init+0x1ec>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a49      	ldr	r2, [pc, #292]	; (800757c <HAL_GPIO_Init+0x2e0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d013      	beq.n	8007484 <HAL_GPIO_Init+0x1e8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a48      	ldr	r2, [pc, #288]	; (8007580 <HAL_GPIO_Init+0x2e4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00d      	beq.n	8007480 <HAL_GPIO_Init+0x1e4>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a47      	ldr	r2, [pc, #284]	; (8007584 <HAL_GPIO_Init+0x2e8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d007      	beq.n	800747c <HAL_GPIO_Init+0x1e0>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a46      	ldr	r2, [pc, #280]	; (8007588 <HAL_GPIO_Init+0x2ec>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <HAL_GPIO_Init+0x1dc>
 8007474:	2304      	movs	r3, #4
 8007476:	e008      	b.n	800748a <HAL_GPIO_Init+0x1ee>
 8007478:	2305      	movs	r3, #5
 800747a:	e006      	b.n	800748a <HAL_GPIO_Init+0x1ee>
 800747c:	2303      	movs	r3, #3
 800747e:	e004      	b.n	800748a <HAL_GPIO_Init+0x1ee>
 8007480:	2302      	movs	r3, #2
 8007482:	e002      	b.n	800748a <HAL_GPIO_Init+0x1ee>
 8007484:	2301      	movs	r3, #1
 8007486:	e000      	b.n	800748a <HAL_GPIO_Init+0x1ee>
 8007488:	2300      	movs	r3, #0
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f002 0203 	and.w	r2, r2, #3
 8007490:	0092      	lsls	r2, r2, #2
 8007492:	4093      	lsls	r3, r2
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800749a:	4937      	ldr	r1, [pc, #220]	; (8007578 <HAL_GPIO_Init+0x2dc>)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	089b      	lsrs	r3, r3, #2
 80074a0:	3302      	adds	r3, #2
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074a8:	4b38      	ldr	r3, [pc, #224]	; (800758c <HAL_GPIO_Init+0x2f0>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4013      	ands	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80074cc:	4a2f      	ldr	r2, [pc, #188]	; (800758c <HAL_GPIO_Init+0x2f0>)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80074d2:	4b2e      	ldr	r3, [pc, #184]	; (800758c <HAL_GPIO_Init+0x2f0>)
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	43db      	mvns	r3, r3
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	4013      	ands	r3, r2
 80074e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80074f6:	4a25      	ldr	r2, [pc, #148]	; (800758c <HAL_GPIO_Init+0x2f0>)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074fc:	4b23      	ldr	r3, [pc, #140]	; (800758c <HAL_GPIO_Init+0x2f0>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	43db      	mvns	r3, r3
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4013      	ands	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007520:	4a1a      	ldr	r2, [pc, #104]	; (800758c <HAL_GPIO_Init+0x2f0>)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007526:	4b19      	ldr	r3, [pc, #100]	; (800758c <HAL_GPIO_Init+0x2f0>)
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	43db      	mvns	r3, r3
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4013      	ands	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800754a:	4a10      	ldr	r2, [pc, #64]	; (800758c <HAL_GPIO_Init+0x2f0>)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	3301      	adds	r3, #1
 8007554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	fa22 f303 	lsr.w	r3, r2, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	f47f aea3 	bne.w	80072ac <HAL_GPIO_Init+0x10>
  }
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40021000 	.word	0x40021000
 8007578:	40010000 	.word	0x40010000
 800757c:	48000400 	.word	0x48000400
 8007580:	48000800 	.word	0x48000800
 8007584:	48000c00 	.word	0x48000c00
 8007588:	48001000 	.word	0x48001000
 800758c:	40010400 	.word	0x40010400

08007590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	887b      	ldrh	r3, [r7, #2]
 80075a2:	4013      	ands	r3, r2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	e001      	b.n	80075b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	807b      	strh	r3, [r7, #2]
 80075cc:	4613      	mov	r3, r2
 80075ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075d0:	787b      	ldrb	r3, [r7, #1]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075d6:	887a      	ldrh	r2, [r7, #2]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80075dc:	e002      	b.n	80075e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075de:	887a      	ldrh	r2, [r7, #2]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	1d3b      	adds	r3, r7, #4
 80075fa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075fc:	1d3b      	adds	r3, r7, #4
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	f000 bef4 	b.w	80083f2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800760a:	1d3b      	adds	r3, r7, #4
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 816a 	beq.w	80078ee <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800761a:	4bb3      	ldr	r3, [pc, #716]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f003 030c 	and.w	r3, r3, #12
 8007622:	2b04      	cmp	r3, #4
 8007624:	d00c      	beq.n	8007640 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007626:	4bb0      	ldr	r3, [pc, #704]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f003 030c 	and.w	r3, r3, #12
 800762e:	2b08      	cmp	r3, #8
 8007630:	d159      	bne.n	80076e6 <HAL_RCC_OscConfig+0xf6>
 8007632:	4bad      	ldr	r3, [pc, #692]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800763a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800763e:	d152      	bne.n	80076e6 <HAL_RCC_OscConfig+0xf6>
 8007640:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007644:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007648:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800764c:	fa93 f3a3 	rbit	r3, r3
 8007650:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8007654:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007658:	fab3 f383 	clz	r3, r3
 800765c:	b2db      	uxtb	r3, r3
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	b2db      	uxtb	r3, r3
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	d102      	bne.n	8007672 <HAL_RCC_OscConfig+0x82>
 800766c:	4b9e      	ldr	r3, [pc, #632]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	e015      	b.n	800769e <HAL_RCC_OscConfig+0xae>
 8007672:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007676:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007686:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800768a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800768e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007692:	fa93 f3a3 	rbit	r3, r3
 8007696:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800769a:	4b93      	ldr	r3, [pc, #588]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80076a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80076a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80076aa:	fa92 f2a2 	rbit	r2, r2
 80076ae:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80076b2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80076b6:	fab2 f282 	clz	r2, r2
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	f042 0220 	orr.w	r2, r2, #32
 80076c0:	b2d2      	uxtb	r2, r2
 80076c2:	f002 021f 	and.w	r2, r2, #31
 80076c6:	2101      	movs	r1, #1
 80076c8:	fa01 f202 	lsl.w	r2, r1, r2
 80076cc:	4013      	ands	r3, r2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 810c 	beq.w	80078ec <HAL_RCC_OscConfig+0x2fc>
 80076d4:	1d3b      	adds	r3, r7, #4
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f040 8106 	bne.w	80078ec <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	f000 be86 	b.w	80083f2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076e6:	1d3b      	adds	r3, r7, #4
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f0:	d106      	bne.n	8007700 <HAL_RCC_OscConfig+0x110>
 80076f2:	4b7d      	ldr	r3, [pc, #500]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a7c      	ldr	r2, [pc, #496]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 80076f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	e030      	b.n	8007762 <HAL_RCC_OscConfig+0x172>
 8007700:	1d3b      	adds	r3, r7, #4
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10c      	bne.n	8007724 <HAL_RCC_OscConfig+0x134>
 800770a:	4b77      	ldr	r3, [pc, #476]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a76      	ldr	r2, [pc, #472]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	4b74      	ldr	r3, [pc, #464]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a73      	ldr	r2, [pc, #460]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800771c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	e01e      	b.n	8007762 <HAL_RCC_OscConfig+0x172>
 8007724:	1d3b      	adds	r3, r7, #4
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800772e:	d10c      	bne.n	800774a <HAL_RCC_OscConfig+0x15a>
 8007730:	4b6d      	ldr	r3, [pc, #436]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a6c      	ldr	r2, [pc, #432]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	4b6a      	ldr	r3, [pc, #424]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a69      	ldr	r2, [pc, #420]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	e00b      	b.n	8007762 <HAL_RCC_OscConfig+0x172>
 800774a:	4b67      	ldr	r3, [pc, #412]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a66      	ldr	r2, [pc, #408]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	4b64      	ldr	r3, [pc, #400]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a63      	ldr	r2, [pc, #396]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 800775c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007760:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007762:	4b61      	ldr	r3, [pc, #388]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007766:	f023 020f 	bic.w	r2, r3, #15
 800776a:	1d3b      	adds	r3, r7, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	495d      	ldr	r1, [pc, #372]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007772:	4313      	orrs	r3, r2
 8007774:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007776:	1d3b      	adds	r3, r7, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d059      	beq.n	8007834 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007780:	f7fe f8b0 	bl	80058e4 <HAL_GetTick>
 8007784:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007788:	e00a      	b.n	80077a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800778a:	f7fe f8ab 	bl	80058e4 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b64      	cmp	r3, #100	; 0x64
 8007798:	d902      	bls.n	80077a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	f000 be29 	b.w	80083f2 <HAL_RCC_OscConfig+0xe02>
 80077a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80077ac:	fa93 f3a3 	rbit	r3, r3
 80077b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80077b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077b8:	fab3 f383 	clz	r3, r3
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d102      	bne.n	80077d2 <HAL_RCC_OscConfig+0x1e2>
 80077cc:	4b46      	ldr	r3, [pc, #280]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	e015      	b.n	80077fe <HAL_RCC_OscConfig+0x20e>
 80077d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077da:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80077de:	fa93 f3a3 	rbit	r3, r3
 80077e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80077e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80077ee:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80077f2:	fa93 f3a3 	rbit	r3, r3
 80077f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80077fa:	4b3b      	ldr	r3, [pc, #236]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007802:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007806:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800780a:	fa92 f2a2 	rbit	r2, r2
 800780e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007812:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007816:	fab2 f282 	clz	r2, r2
 800781a:	b2d2      	uxtb	r2, r2
 800781c:	f042 0220 	orr.w	r2, r2, #32
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	f002 021f 	and.w	r2, r2, #31
 8007826:	2101      	movs	r1, #1
 8007828:	fa01 f202 	lsl.w	r2, r1, r2
 800782c:	4013      	ands	r3, r2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0ab      	beq.n	800778a <HAL_RCC_OscConfig+0x19a>
 8007832:	e05c      	b.n	80078ee <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007834:	f7fe f856 	bl	80058e4 <HAL_GetTick>
 8007838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800783c:	e00a      	b.n	8007854 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800783e:	f7fe f851 	bl	80058e4 <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b64      	cmp	r3, #100	; 0x64
 800784c:	d902      	bls.n	8007854 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	f000 bdcf 	b.w	80083f2 <HAL_RCC_OscConfig+0xe02>
 8007854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007858:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8007860:	fa93 f3a3 	rbit	r3, r3
 8007864:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007868:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800786c:	fab3 f383 	clz	r3, r3
 8007870:	b2db      	uxtb	r3, r3
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d102      	bne.n	8007886 <HAL_RCC_OscConfig+0x296>
 8007880:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	e015      	b.n	80078b2 <HAL_RCC_OscConfig+0x2c2>
 8007886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800788a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800788e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007892:	fa93 f3a3 	rbit	r3, r3
 8007896:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800789a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800789e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80078a2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80078a6:	fa93 f3a3 	rbit	r3, r3
 80078aa:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80078ae:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <HAL_RCC_OscConfig+0x2f8>)
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80078ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80078be:	fa92 f2a2 	rbit	r2, r2
 80078c2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80078c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80078ca:	fab2 f282 	clz	r2, r2
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	f042 0220 	orr.w	r2, r2, #32
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	f002 021f 	and.w	r2, r2, #31
 80078da:	2101      	movs	r1, #1
 80078dc:	fa01 f202 	lsl.w	r2, r1, r2
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1ab      	bne.n	800783e <HAL_RCC_OscConfig+0x24e>
 80078e6:	e002      	b.n	80078ee <HAL_RCC_OscConfig+0x2fe>
 80078e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 816f 	beq.w	8007bdc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80078fe:	4bd0      	ldr	r3, [pc, #832]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f003 030c 	and.w	r3, r3, #12
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00b      	beq.n	8007922 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800790a:	4bcd      	ldr	r3, [pc, #820]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f003 030c 	and.w	r3, r3, #12
 8007912:	2b08      	cmp	r3, #8
 8007914:	d16c      	bne.n	80079f0 <HAL_RCC_OscConfig+0x400>
 8007916:	4bca      	ldr	r3, [pc, #808]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d166      	bne.n	80079f0 <HAL_RCC_OscConfig+0x400>
 8007922:	2302      	movs	r3, #2
 8007924:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007928:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800792c:	fa93 f3a3 	rbit	r3, r3
 8007930:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007934:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007938:	fab3 f383 	clz	r3, r3
 800793c:	b2db      	uxtb	r3, r3
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	d102      	bne.n	8007952 <HAL_RCC_OscConfig+0x362>
 800794c:	4bbc      	ldr	r3, [pc, #752]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	e013      	b.n	800797a <HAL_RCC_OscConfig+0x38a>
 8007952:	2302      	movs	r3, #2
 8007954:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007958:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800795c:	fa93 f3a3 	rbit	r3, r3
 8007960:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007964:	2302      	movs	r3, #2
 8007966:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800796a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800796e:	fa93 f3a3 	rbit	r3, r3
 8007972:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007976:	4bb2      	ldr	r3, [pc, #712]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	2202      	movs	r2, #2
 800797c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007980:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007984:	fa92 f2a2 	rbit	r2, r2
 8007988:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800798c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007990:	fab2 f282 	clz	r2, r2
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	f042 0220 	orr.w	r2, r2, #32
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	f002 021f 	and.w	r2, r2, #31
 80079a0:	2101      	movs	r1, #1
 80079a2:	fa01 f202 	lsl.w	r2, r1, r2
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <HAL_RCC_OscConfig+0x3cc>
 80079ac:	1d3b      	adds	r3, r7, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d002      	beq.n	80079bc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	f000 bd1b 	b.w	80083f2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079bc:	4ba0      	ldr	r3, [pc, #640]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079c4:	1d3b      	adds	r3, r7, #4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	21f8      	movs	r1, #248	; 0xf8
 80079cc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80079d4:	fa91 f1a1 	rbit	r1, r1
 80079d8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80079dc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80079e0:	fab1 f181 	clz	r1, r1
 80079e4:	b2c9      	uxtb	r1, r1
 80079e6:	408b      	lsls	r3, r1
 80079e8:	4995      	ldr	r1, [pc, #596]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ee:	e0f5      	b.n	8007bdc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079f0:	1d3b      	adds	r3, r7, #4
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 8085 	beq.w	8007b06 <HAL_RCC_OscConfig+0x516>
 80079fc:	2301      	movs	r3, #1
 80079fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a02:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007a06:	fa93 f3a3 	rbit	r3, r3
 8007a0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007a0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a12:	fab3 f383 	clz	r3, r3
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007a1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	461a      	mov	r2, r3
 8007a24:	2301      	movs	r3, #1
 8007a26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a28:	f7fd ff5c 	bl	80058e4 <HAL_GetTick>
 8007a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a30:	e00a      	b.n	8007a48 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a32:	f7fd ff57 	bl	80058e4 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d902      	bls.n	8007a48 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	f000 bcd5 	b.w	80083f2 <HAL_RCC_OscConfig+0xe02>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007a52:	fa93 f3a3 	rbit	r3, r3
 8007a56:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007a5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a5e:	fab3 f383 	clz	r3, r3
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	095b      	lsrs	r3, r3, #5
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f043 0301 	orr.w	r3, r3, #1
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d102      	bne.n	8007a78 <HAL_RCC_OscConfig+0x488>
 8007a72:	4b73      	ldr	r3, [pc, #460]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	e013      	b.n	8007aa0 <HAL_RCC_OscConfig+0x4b0>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a7e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007a82:	fa93 f3a3 	rbit	r3, r3
 8007a86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007a90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007a94:	fa93 f3a3 	rbit	r3, r3
 8007a98:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007a9c:	4b68      	ldr	r3, [pc, #416]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007aa6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007aaa:	fa92 f2a2 	rbit	r2, r2
 8007aae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007ab2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007ab6:	fab2 f282 	clz	r2, r2
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	f042 0220 	orr.w	r2, r2, #32
 8007ac0:	b2d2      	uxtb	r2, r2
 8007ac2:	f002 021f 	and.w	r2, r2, #31
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0af      	beq.n	8007a32 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ad2:	4b5b      	ldr	r3, [pc, #364]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ada:	1d3b      	adds	r3, r7, #4
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	21f8      	movs	r1, #248	; 0xf8
 8007ae2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007aea:	fa91 f1a1 	rbit	r1, r1
 8007aee:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007af2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007af6:	fab1 f181 	clz	r1, r1
 8007afa:	b2c9      	uxtb	r1, r1
 8007afc:	408b      	lsls	r3, r1
 8007afe:	4950      	ldr	r1, [pc, #320]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	600b      	str	r3, [r1, #0]
 8007b04:	e06a      	b.n	8007bdc <HAL_RCC_OscConfig+0x5ec>
 8007b06:	2301      	movs	r3, #1
 8007b08:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007b10:	fa93 f3a3 	rbit	r3, r3
 8007b14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007b18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b1c:	fab3 f383 	clz	r3, r3
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007b26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2300      	movs	r3, #0
 8007b30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b32:	f7fd fed7 	bl	80058e4 <HAL_GetTick>
 8007b36:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b3a:	e00a      	b.n	8007b52 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b3c:	f7fd fed2 	bl	80058e4 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d902      	bls.n	8007b52 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	f000 bc50 	b.w	80083f2 <HAL_RCC_OscConfig+0xe02>
 8007b52:	2302      	movs	r3, #2
 8007b54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007b5c:	fa93 f3a3 	rbit	r3, r3
 8007b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b68:	fab3 f383 	clz	r3, r3
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d102      	bne.n	8007b82 <HAL_RCC_OscConfig+0x592>
 8007b7c:	4b30      	ldr	r3, [pc, #192]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	e013      	b.n	8007baa <HAL_RCC_OscConfig+0x5ba>
 8007b82:	2302      	movs	r3, #2
 8007b84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b8c:	fa93 f3a3 	rbit	r3, r3
 8007b90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007b94:	2302      	movs	r3, #2
 8007b96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007b9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b9e:	fa93 f3a3 	rbit	r3, r3
 8007ba2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007ba6:	4b26      	ldr	r3, [pc, #152]	; (8007c40 <HAL_RCC_OscConfig+0x650>)
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	2202      	movs	r2, #2
 8007bac:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007bb0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007bb4:	fa92 f2a2 	rbit	r2, r2
 8007bb8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007bbc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007bc0:	fab2 f282 	clz	r2, r2
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	f042 0220 	orr.w	r2, r2, #32
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	f002 021f 	and.w	r2, r2, #31
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1af      	bne.n	8007b3c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bdc:	1d3b      	adds	r3, r7, #4
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 80da 	beq.w	8007da0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bec:	1d3b      	adds	r3, r7, #4
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d069      	beq.n	8007cca <HAL_RCC_OscConfig+0x6da>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c00:	fa93 f3a3 	rbit	r3, r3
 8007c04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c0c:	fab3 f383 	clz	r3, r3
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	461a      	mov	r2, r3
 8007c14:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <HAL_RCC_OscConfig+0x654>)
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c20:	f7fd fe60 	bl	80058e4 <HAL_GetTick>
 8007c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c28:	e00e      	b.n	8007c48 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c2a:	f7fd fe5b 	bl	80058e4 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d906      	bls.n	8007c48 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e3d9      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
 8007c3e:	bf00      	nop
 8007c40:	40021000 	.word	0x40021000
 8007c44:	10908120 	.word	0x10908120
 8007c48:	2302      	movs	r3, #2
 8007c4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007c52:	fa93 f3a3 	rbit	r3, r3
 8007c56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007c5a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007c5e:	2202      	movs	r2, #2
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	fa93 f2a3 	rbit	r2, r3
 8007c6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007c76:	2202      	movs	r2, #2
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	fa93 f2a3 	rbit	r2, r3
 8007c84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007c88:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c8a:	4ba5      	ldr	r3, [pc, #660]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007c8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c8e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007c92:	2102      	movs	r1, #2
 8007c94:	6019      	str	r1, [r3, #0]
 8007c96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	fa93 f1a3 	rbit	r1, r3
 8007ca0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007ca4:	6019      	str	r1, [r3, #0]
  return result;
 8007ca6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	fab3 f383 	clz	r3, r3
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 031f 	and.w	r3, r3, #31
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0b0      	beq.n	8007c2a <HAL_RCC_OscConfig+0x63a>
 8007cc8:	e06a      	b.n	8007da0 <HAL_RCC_OscConfig+0x7b0>
 8007cca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007cce:	2201      	movs	r2, #1
 8007cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	fa93 f2a3 	rbit	r2, r3
 8007cdc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007ce0:	601a      	str	r2, [r3, #0]
  return result;
 8007ce2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007ce6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ce8:	fab3 f383 	clz	r3, r3
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	461a      	mov	r2, r3
 8007cf0:	4b8c      	ldr	r3, [pc, #560]	; (8007f24 <HAL_RCC_OscConfig+0x934>)
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cfc:	f7fd fdf2 	bl	80058e4 <HAL_GetTick>
 8007d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d04:	e009      	b.n	8007d1a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d06:	f7fd fded 	bl	80058e4 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e36b      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
 8007d1a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007d1e:	2202      	movs	r2, #2
 8007d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	fa93 f2a3 	rbit	r2, r3
 8007d2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007d36:	2202      	movs	r2, #2
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	fa93 f2a3 	rbit	r2, r3
 8007d44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007d4e:	2202      	movs	r2, #2
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	fa93 f2a3 	rbit	r2, r3
 8007d5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007d60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d62:	4b6f      	ldr	r3, [pc, #444]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d66:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	6019      	str	r1, [r3, #0]
 8007d6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	fa93 f1a3 	rbit	r1, r3
 8007d78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d7c:	6019      	str	r1, [r3, #0]
  return result;
 8007d7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	fab3 f383 	clz	r3, r3
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	2101      	movs	r1, #1
 8007d96:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1b2      	bne.n	8007d06 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007da0:	1d3b      	adds	r3, r7, #4
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8158 	beq.w	8008060 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007db0:	2300      	movs	r3, #0
 8007db2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007db6:	4b5a      	ldr	r3, [pc, #360]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d112      	bne.n	8007de8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dc2:	4b57      	ldr	r3, [pc, #348]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	4a56      	ldr	r2, [pc, #344]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	61d3      	str	r3, [r2, #28]
 8007dce:	4b54      	ldr	r3, [pc, #336]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007dd6:	f107 0308 	add.w	r3, r7, #8
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f107 0308 	add.w	r3, r7, #8
 8007de0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de8:	4b4f      	ldr	r3, [pc, #316]	; (8007f28 <HAL_RCC_OscConfig+0x938>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d11a      	bne.n	8007e2a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007df4:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <HAL_RCC_OscConfig+0x938>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a4b      	ldr	r2, [pc, #300]	; (8007f28 <HAL_RCC_OscConfig+0x938>)
 8007dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dfe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e00:	f7fd fd70 	bl	80058e4 <HAL_GetTick>
 8007e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e08:	e009      	b.n	8007e1e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e0a:	f7fd fd6b 	bl	80058e4 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b64      	cmp	r3, #100	; 0x64
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e2e9      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e1e:	4b42      	ldr	r3, [pc, #264]	; (8007f28 <HAL_RCC_OscConfig+0x938>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0ef      	beq.n	8007e0a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e2a:	1d3b      	adds	r3, r7, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d106      	bne.n	8007e42 <HAL_RCC_OscConfig+0x852>
 8007e34:	4b3a      	ldr	r3, [pc, #232]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	4a39      	ldr	r2, [pc, #228]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e3a:	f043 0301 	orr.w	r3, r3, #1
 8007e3e:	6213      	str	r3, [r2, #32]
 8007e40:	e02f      	b.n	8007ea2 <HAL_RCC_OscConfig+0x8b2>
 8007e42:	1d3b      	adds	r3, r7, #4
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10c      	bne.n	8007e66 <HAL_RCC_OscConfig+0x876>
 8007e4c:	4b34      	ldr	r3, [pc, #208]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	4a33      	ldr	r2, [pc, #204]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e52:	f023 0301 	bic.w	r3, r3, #1
 8007e56:	6213      	str	r3, [r2, #32]
 8007e58:	4b31      	ldr	r3, [pc, #196]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	4a30      	ldr	r2, [pc, #192]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e5e:	f023 0304 	bic.w	r3, r3, #4
 8007e62:	6213      	str	r3, [r2, #32]
 8007e64:	e01d      	b.n	8007ea2 <HAL_RCC_OscConfig+0x8b2>
 8007e66:	1d3b      	adds	r3, r7, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b05      	cmp	r3, #5
 8007e6e:	d10c      	bne.n	8007e8a <HAL_RCC_OscConfig+0x89a>
 8007e70:	4b2b      	ldr	r3, [pc, #172]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e72:	6a1b      	ldr	r3, [r3, #32]
 8007e74:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e76:	f043 0304 	orr.w	r3, r3, #4
 8007e7a:	6213      	str	r3, [r2, #32]
 8007e7c:	4b28      	ldr	r3, [pc, #160]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	4a27      	ldr	r2, [pc, #156]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	6213      	str	r3, [r2, #32]
 8007e88:	e00b      	b.n	8007ea2 <HAL_RCC_OscConfig+0x8b2>
 8007e8a:	4b25      	ldr	r3, [pc, #148]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	4a24      	ldr	r2, [pc, #144]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	6213      	str	r3, [r2, #32]
 8007e96:	4b22      	ldr	r3, [pc, #136]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	4a21      	ldr	r2, [pc, #132]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007e9c:	f023 0304 	bic.w	r3, r3, #4
 8007ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ea2:	1d3b      	adds	r3, r7, #4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d06b      	beq.n	8007f84 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eac:	f7fd fd1a 	bl	80058e4 <HAL_GetTick>
 8007eb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eb4:	e00b      	b.n	8007ece <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eb6:	f7fd fd15 	bl	80058e4 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e291      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
 8007ece:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ed6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	fa93 f2a3 	rbit	r2, r3
 8007ee0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007eea:	2202      	movs	r2, #2
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	fa93 f2a3 	rbit	r2, r3
 8007ef8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007efc:	601a      	str	r2, [r3, #0]
  return result;
 8007efe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007f02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f04:	fab3 f383 	clz	r3, r3
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f043 0302 	orr.w	r3, r3, #2
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d109      	bne.n	8007f2c <HAL_RCC_OscConfig+0x93c>
 8007f18:	4b01      	ldr	r3, [pc, #4]	; (8007f20 <HAL_RCC_OscConfig+0x930>)
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	e014      	b.n	8007f48 <HAL_RCC_OscConfig+0x958>
 8007f1e:	bf00      	nop
 8007f20:	40021000 	.word	0x40021000
 8007f24:	10908120 	.word	0x10908120
 8007f28:	40007000 	.word	0x40007000
 8007f2c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007f30:	2202      	movs	r2, #2
 8007f32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	fa93 f2a3 	rbit	r2, r3
 8007f3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007f42:	601a      	str	r2, [r3, #0]
 8007f44:	4bbb      	ldr	r3, [pc, #748]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	6011      	str	r1, [r2, #0]
 8007f50:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	fa92 f1a2 	rbit	r1, r2
 8007f5a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007f5e:	6011      	str	r1, [r2, #0]
  return result;
 8007f60:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007f64:	6812      	ldr	r2, [r2, #0]
 8007f66:	fab2 f282 	clz	r2, r2
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f70:	b2d2      	uxtb	r2, r2
 8007f72:	f002 021f 	and.w	r2, r2, #31
 8007f76:	2101      	movs	r1, #1
 8007f78:	fa01 f202 	lsl.w	r2, r1, r2
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d099      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x8c6>
 8007f82:	e063      	b.n	800804c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f84:	f7fd fcae 	bl	80058e4 <HAL_GetTick>
 8007f88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f8c:	e00b      	b.n	8007fa6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f8e:	f7fd fca9 	bl	80058e4 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e225      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
 8007fa6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007faa:	2202      	movs	r2, #2
 8007fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	fa93 f2a3 	rbit	r2, r3
 8007fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	fa93 f2a3 	rbit	r2, r3
 8007fd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007fd4:	601a      	str	r2, [r3, #0]
  return result;
 8007fd6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007fda:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fdc:	fab3 f383 	clz	r3, r3
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	095b      	lsrs	r3, r3, #5
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f043 0302 	orr.w	r3, r3, #2
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d102      	bne.n	8007ff6 <HAL_RCC_OscConfig+0xa06>
 8007ff0:	4b90      	ldr	r3, [pc, #576]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	e00d      	b.n	8008012 <HAL_RCC_OscConfig+0xa22>
 8007ff6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ffe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	fa93 f2a3 	rbit	r2, r3
 8008008:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	4b89      	ldr	r3, [pc, #548]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8008016:	2102      	movs	r1, #2
 8008018:	6011      	str	r1, [r2, #0]
 800801a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	fa92 f1a2 	rbit	r1, r2
 8008024:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008028:	6011      	str	r1, [r2, #0]
  return result;
 800802a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	fab2 f282 	clz	r2, r2
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	f002 021f 	and.w	r2, r2, #31
 8008040:	2101      	movs	r1, #1
 8008042:	fa01 f202 	lsl.w	r2, r1, r2
 8008046:	4013      	ands	r3, r2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1a0      	bne.n	8007f8e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800804c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008050:	2b01      	cmp	r3, #1
 8008052:	d105      	bne.n	8008060 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008054:	4b77      	ldr	r3, [pc, #476]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	4a76      	ldr	r2, [pc, #472]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 800805a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800805e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008060:	1d3b      	adds	r3, r7, #4
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 81c2 	beq.w	80083f0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800806c:	4b71      	ldr	r3, [pc, #452]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f003 030c 	and.w	r3, r3, #12
 8008074:	2b08      	cmp	r3, #8
 8008076:	f000 819c 	beq.w	80083b2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800807a:	1d3b      	adds	r3, r7, #4
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	2b02      	cmp	r3, #2
 8008082:	f040 8114 	bne.w	80082ae <HAL_RCC_OscConfig+0xcbe>
 8008086:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800808a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800808e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008090:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	fa93 f2a3 	rbit	r2, r3
 800809a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800809e:	601a      	str	r2, [r3, #0]
  return result;
 80080a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80080a4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080a6:	fab3 f383 	clz	r3, r3
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80080b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	461a      	mov	r2, r3
 80080b8:	2300      	movs	r3, #0
 80080ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080bc:	f7fd fc12 	bl	80058e4 <HAL_GetTick>
 80080c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080c4:	e009      	b.n	80080da <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c6:	f7fd fc0d 	bl	80058e4 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e18b      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
 80080da:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80080de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80080e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	fa93 f2a3 	rbit	r2, r3
 80080ee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80080f2:	601a      	str	r2, [r3, #0]
  return result;
 80080f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80080f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80080fa:	fab3 f383 	clz	r3, r3
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f043 0301 	orr.w	r3, r3, #1
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d102      	bne.n	8008114 <HAL_RCC_OscConfig+0xb24>
 800810e:	4b49      	ldr	r3, [pc, #292]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	e01b      	b.n	800814c <HAL_RCC_OscConfig+0xb5c>
 8008114:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008118:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800811c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	fa93 f2a3 	rbit	r2, r3
 8008128:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008132:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	fa93 f2a3 	rbit	r2, r3
 8008142:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	4b3a      	ldr	r3, [pc, #232]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008150:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008154:	6011      	str	r1, [r2, #0]
 8008156:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800815a:	6812      	ldr	r2, [r2, #0]
 800815c:	fa92 f1a2 	rbit	r1, r2
 8008160:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8008164:	6011      	str	r1, [r2, #0]
  return result;
 8008166:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800816a:	6812      	ldr	r2, [r2, #0]
 800816c:	fab2 f282 	clz	r2, r2
 8008170:	b2d2      	uxtb	r2, r2
 8008172:	f042 0220 	orr.w	r2, r2, #32
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	f002 021f 	and.w	r2, r2, #31
 800817c:	2101      	movs	r1, #1
 800817e:	fa01 f202 	lsl.w	r2, r1, r2
 8008182:	4013      	ands	r3, r2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d19e      	bne.n	80080c6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008188:	4b2a      	ldr	r3, [pc, #168]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	430b      	orrs	r3, r1
 800819e:	4925      	ldr	r1, [pc, #148]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 80081a0:	4313      	orrs	r3, r2
 80081a2:	604b      	str	r3, [r1, #4]
 80081a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	fa93 f2a3 	rbit	r2, r3
 80081b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80081bc:	601a      	str	r2, [r3, #0]
  return result;
 80081be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80081c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081c4:	fab3 f383 	clz	r3, r3
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80081ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	461a      	mov	r2, r3
 80081d6:	2301      	movs	r3, #1
 80081d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081da:	f7fd fb83 	bl	80058e4 <HAL_GetTick>
 80081de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80081e2:	e009      	b.n	80081f8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081e4:	f7fd fb7e 	bl	80058e4 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e0fc      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
 80081f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80081fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	fa93 f2a3 	rbit	r2, r3
 800820c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008210:	601a      	str	r2, [r3, #0]
  return result;
 8008212:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008216:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008218:	fab3 f383 	clz	r3, r3
 800821c:	b2db      	uxtb	r3, r3
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f043 0301 	orr.w	r3, r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	d105      	bne.n	8008238 <HAL_RCC_OscConfig+0xc48>
 800822c:	4b01      	ldr	r3, [pc, #4]	; (8008234 <HAL_RCC_OscConfig+0xc44>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	e01e      	b.n	8008270 <HAL_RCC_OscConfig+0xc80>
 8008232:	bf00      	nop
 8008234:	40021000 	.word	0x40021000
 8008238:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800823c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008242:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	fa93 f2a3 	rbit	r2, r3
 800824c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008256:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	fa93 f2a3 	rbit	r2, r3
 8008266:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	4b63      	ldr	r3, [pc, #396]	; (80083fc <HAL_RCC_OscConfig+0xe0c>)
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008274:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800827e:	6812      	ldr	r2, [r2, #0]
 8008280:	fa92 f1a2 	rbit	r1, r2
 8008284:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008288:	6011      	str	r1, [r2, #0]
  return result;
 800828a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	fab2 f282 	clz	r2, r2
 8008294:	b2d2      	uxtb	r2, r2
 8008296:	f042 0220 	orr.w	r2, r2, #32
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	f002 021f 	and.w	r2, r2, #31
 80082a0:	2101      	movs	r1, #1
 80082a2:	fa01 f202 	lsl.w	r2, r1, r2
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d09b      	beq.n	80081e4 <HAL_RCC_OscConfig+0xbf4>
 80082ac:	e0a0      	b.n	80083f0 <HAL_RCC_OscConfig+0xe00>
 80082ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	fa93 f2a3 	rbit	r2, r3
 80082c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082c6:	601a      	str	r2, [r3, #0]
  return result;
 80082c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80082cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ce:	fab3 f383 	clz	r3, r3
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80082d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	461a      	mov	r2, r3
 80082e0:	2300      	movs	r3, #0
 80082e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e4:	f7fd fafe 	bl	80058e4 <HAL_GetTick>
 80082e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082ec:	e009      	b.n	8008302 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082ee:	f7fd faf9 	bl	80058e4 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d901      	bls.n	8008302 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e077      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
 8008302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008306:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800830a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800830c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	fa93 f2a3 	rbit	r2, r3
 8008316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800831a:	601a      	str	r2, [r3, #0]
  return result;
 800831c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008320:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008322:	fab3 f383 	clz	r3, r3
 8008326:	b2db      	uxtb	r3, r3
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	b2db      	uxtb	r3, r3
 800832c:	f043 0301 	orr.w	r3, r3, #1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b01      	cmp	r3, #1
 8008334:	d102      	bne.n	800833c <HAL_RCC_OscConfig+0xd4c>
 8008336:	4b31      	ldr	r3, [pc, #196]	; (80083fc <HAL_RCC_OscConfig+0xe0c>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	e01b      	b.n	8008374 <HAL_RCC_OscConfig+0xd84>
 800833c:	f107 0320 	add.w	r3, r7, #32
 8008340:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008344:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008346:	f107 0320 	add.w	r3, r7, #32
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	fa93 f2a3 	rbit	r2, r3
 8008350:	f107 031c 	add.w	r3, r7, #28
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	f107 0318 	add.w	r3, r7, #24
 800835a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f107 0318 	add.w	r3, r7, #24
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	fa93 f2a3 	rbit	r2, r3
 800836a:	f107 0314 	add.w	r3, r7, #20
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	4b22      	ldr	r3, [pc, #136]	; (80083fc <HAL_RCC_OscConfig+0xe0c>)
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	f107 0210 	add.w	r2, r7, #16
 8008378:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800837c:	6011      	str	r1, [r2, #0]
 800837e:	f107 0210 	add.w	r2, r7, #16
 8008382:	6812      	ldr	r2, [r2, #0]
 8008384:	fa92 f1a2 	rbit	r1, r2
 8008388:	f107 020c 	add.w	r2, r7, #12
 800838c:	6011      	str	r1, [r2, #0]
  return result;
 800838e:	f107 020c 	add.w	r2, r7, #12
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	fab2 f282 	clz	r2, r2
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	f042 0220 	orr.w	r2, r2, #32
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	f002 021f 	and.w	r2, r2, #31
 80083a4:	2101      	movs	r1, #1
 80083a6:	fa01 f202 	lsl.w	r2, r1, r2
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d19e      	bne.n	80082ee <HAL_RCC_OscConfig+0xcfe>
 80083b0:	e01e      	b.n	80083f0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b2:	1d3b      	adds	r3, r7, #4
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e018      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80083c0:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <HAL_RCC_OscConfig+0xe0c>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80083c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80083cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80083d0:	1d3b      	adds	r3, r7, #4
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d108      	bne.n	80083ec <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80083da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80083de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80083e2:	1d3b      	adds	r3, r7, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d001      	beq.n	80083f0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	40021000 	.word	0x40021000

08008400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b09e      	sub	sp, #120	; 0x78
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e162      	b.n	80086de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008418:	4b90      	ldr	r3, [pc, #576]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0307 	and.w	r3, r3, #7
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d910      	bls.n	8008448 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008426:	4b8d      	ldr	r3, [pc, #564]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f023 0207 	bic.w	r2, r3, #7
 800842e:	498b      	ldr	r1, [pc, #556]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	4313      	orrs	r3, r2
 8008434:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008436:	4b89      	ldr	r3, [pc, #548]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d001      	beq.n	8008448 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e14a      	b.n	80086de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d008      	beq.n	8008466 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008454:	4b82      	ldr	r3, [pc, #520]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	497f      	ldr	r1, [pc, #508]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 8008462:	4313      	orrs	r3, r2
 8008464:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 80dc 	beq.w	800862c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d13c      	bne.n	80084f6 <HAL_RCC_ClockConfig+0xf6>
 800847c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008480:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008484:	fa93 f3a3 	rbit	r3, r3
 8008488:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800848a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800848c:	fab3 f383 	clz	r3, r3
 8008490:	b2db      	uxtb	r3, r3
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	b2db      	uxtb	r3, r3
 8008496:	f043 0301 	orr.w	r3, r3, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b01      	cmp	r3, #1
 800849e:	d102      	bne.n	80084a6 <HAL_RCC_ClockConfig+0xa6>
 80084a0:	4b6f      	ldr	r3, [pc, #444]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	e00f      	b.n	80084c6 <HAL_RCC_ClockConfig+0xc6>
 80084a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ae:	fa93 f3a3 	rbit	r3, r3
 80084b2:	667b      	str	r3, [r7, #100]	; 0x64
 80084b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084b8:	663b      	str	r3, [r7, #96]	; 0x60
 80084ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084bc:	fa93 f3a3 	rbit	r3, r3
 80084c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084c2:	4b67      	ldr	r3, [pc, #412]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 80084c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80084ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80084cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ce:	fa92 f2a2 	rbit	r2, r2
 80084d2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80084d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084d6:	fab2 f282 	clz	r2, r2
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	f042 0220 	orr.w	r2, r2, #32
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	f002 021f 	and.w	r2, r2, #31
 80084e6:	2101      	movs	r1, #1
 80084e8:	fa01 f202 	lsl.w	r2, r1, r2
 80084ec:	4013      	ands	r3, r2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d17b      	bne.n	80085ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e0f3      	b.n	80086de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d13c      	bne.n	8008578 <HAL_RCC_ClockConfig+0x178>
 80084fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008502:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008506:	fa93 f3a3 	rbit	r3, r3
 800850a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800850c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800850e:	fab3 f383 	clz	r3, r3
 8008512:	b2db      	uxtb	r3, r3
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f043 0301 	orr.w	r3, r3, #1
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b01      	cmp	r3, #1
 8008520:	d102      	bne.n	8008528 <HAL_RCC_ClockConfig+0x128>
 8008522:	4b4f      	ldr	r3, [pc, #316]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	e00f      	b.n	8008548 <HAL_RCC_ClockConfig+0x148>
 8008528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800852c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008530:	fa93 f3a3 	rbit	r3, r3
 8008534:	647b      	str	r3, [r7, #68]	; 0x44
 8008536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800853a:	643b      	str	r3, [r7, #64]	; 0x40
 800853c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800853e:	fa93 f3a3 	rbit	r3, r3
 8008542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008544:	4b46      	ldr	r3, [pc, #280]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800854c:	63ba      	str	r2, [r7, #56]	; 0x38
 800854e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008550:	fa92 f2a2 	rbit	r2, r2
 8008554:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008558:	fab2 f282 	clz	r2, r2
 800855c:	b2d2      	uxtb	r2, r2
 800855e:	f042 0220 	orr.w	r2, r2, #32
 8008562:	b2d2      	uxtb	r2, r2
 8008564:	f002 021f 	and.w	r2, r2, #31
 8008568:	2101      	movs	r1, #1
 800856a:	fa01 f202 	lsl.w	r2, r1, r2
 800856e:	4013      	ands	r3, r2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d13a      	bne.n	80085ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e0b2      	b.n	80086de <HAL_RCC_ClockConfig+0x2de>
 8008578:	2302      	movs	r3, #2
 800857a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	fa93 f3a3 	rbit	r3, r3
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008586:	fab3 f383 	clz	r3, r3
 800858a:	b2db      	uxtb	r3, r3
 800858c:	095b      	lsrs	r3, r3, #5
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b01      	cmp	r3, #1
 8008598:	d102      	bne.n	80085a0 <HAL_RCC_ClockConfig+0x1a0>
 800859a:	4b31      	ldr	r3, [pc, #196]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	e00d      	b.n	80085bc <HAL_RCC_ClockConfig+0x1bc>
 80085a0:	2302      	movs	r3, #2
 80085a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	fa93 f3a3 	rbit	r3, r3
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
 80085ac:	2302      	movs	r3, #2
 80085ae:	623b      	str	r3, [r7, #32]
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	fa93 f3a3 	rbit	r3, r3
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	4b29      	ldr	r3, [pc, #164]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	2202      	movs	r2, #2
 80085be:	61ba      	str	r2, [r7, #24]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	fa92 f2a2 	rbit	r2, r2
 80085c6:	617a      	str	r2, [r7, #20]
  return result;
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	fab2 f282 	clz	r2, r2
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	f042 0220 	orr.w	r2, r2, #32
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	f002 021f 	and.w	r2, r2, #31
 80085da:	2101      	movs	r1, #1
 80085dc:	fa01 f202 	lsl.w	r2, r1, r2
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e079      	b.n	80086de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085ea:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f023 0203 	bic.w	r2, r3, #3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	491a      	ldr	r1, [pc, #104]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085fc:	f7fd f972 	bl	80058e4 <HAL_GetTick>
 8008600:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008602:	e00a      	b.n	800861a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008604:	f7fd f96e 	bl	80058e4 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008612:	4293      	cmp	r3, r2
 8008614:	d901      	bls.n	800861a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e061      	b.n	80086de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861a:	4b11      	ldr	r3, [pc, #68]	; (8008660 <HAL_RCC_ClockConfig+0x260>)
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	f003 020c 	and.w	r2, r3, #12
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	429a      	cmp	r2, r3
 800862a:	d1eb      	bne.n	8008604 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800862c:	4b0b      	ldr	r3, [pc, #44]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d214      	bcs.n	8008664 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f023 0207 	bic.w	r2, r3, #7
 8008642:	4906      	ldr	r1, [pc, #24]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	4313      	orrs	r3, r2
 8008648:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800864a:	4b04      	ldr	r3, [pc, #16]	; (800865c <HAL_RCC_ClockConfig+0x25c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0307 	and.w	r3, r3, #7
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	429a      	cmp	r2, r3
 8008656:	d005      	beq.n	8008664 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e040      	b.n	80086de <HAL_RCC_ClockConfig+0x2de>
 800865c:	40022000 	.word	0x40022000
 8008660:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d008      	beq.n	8008682 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008670:	4b1d      	ldr	r3, [pc, #116]	; (80086e8 <HAL_RCC_ClockConfig+0x2e8>)
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	491a      	ldr	r1, [pc, #104]	; (80086e8 <HAL_RCC_ClockConfig+0x2e8>)
 800867e:	4313      	orrs	r3, r2
 8008680:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0308 	and.w	r3, r3, #8
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800868e:	4b16      	ldr	r3, [pc, #88]	; (80086e8 <HAL_RCC_ClockConfig+0x2e8>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	4912      	ldr	r1, [pc, #72]	; (80086e8 <HAL_RCC_ClockConfig+0x2e8>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80086a2:	f000 f829 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 80086a6:	4601      	mov	r1, r0
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <HAL_RCC_ClockConfig+0x2e8>)
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086b0:	22f0      	movs	r2, #240	; 0xf0
 80086b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	fa92 f2a2 	rbit	r2, r2
 80086ba:	60fa      	str	r2, [r7, #12]
  return result;
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	fab2 f282 	clz	r2, r2
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	40d3      	lsrs	r3, r2
 80086c6:	4a09      	ldr	r2, [pc, #36]	; (80086ec <HAL_RCC_ClockConfig+0x2ec>)
 80086c8:	5cd3      	ldrb	r3, [r2, r3]
 80086ca:	fa21 f303 	lsr.w	r3, r1, r3
 80086ce:	4a08      	ldr	r2, [pc, #32]	; (80086f0 <HAL_RCC_ClockConfig+0x2f0>)
 80086d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <HAL_RCC_ClockConfig+0x2f4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fd f8c0 	bl	800585c <HAL_InitTick>
  
  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3778      	adds	r7, #120	; 0x78
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	40021000 	.word	0x40021000
 80086ec:	0800f84c 	.word	0x0800f84c
 80086f0:	200006d0 	.word	0x200006d0
 80086f4:	200006d4 	.word	0x200006d4

080086f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b08b      	sub	sp, #44	; 0x2c
 80086fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	61fb      	str	r3, [r7, #28]
 8008702:	2300      	movs	r3, #0
 8008704:	61bb      	str	r3, [r7, #24]
 8008706:	2300      	movs	r3, #0
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008712:	4b29      	ldr	r3, [pc, #164]	; (80087b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	f003 030c 	and.w	r3, r3, #12
 800871e:	2b04      	cmp	r3, #4
 8008720:	d002      	beq.n	8008728 <HAL_RCC_GetSysClockFreq+0x30>
 8008722:	2b08      	cmp	r3, #8
 8008724:	d003      	beq.n	800872e <HAL_RCC_GetSysClockFreq+0x36>
 8008726:	e03c      	b.n	80087a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008728:	4b24      	ldr	r3, [pc, #144]	; (80087bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800872a:	623b      	str	r3, [r7, #32]
      break;
 800872c:	e03c      	b.n	80087a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008734:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008738:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	fa92 f2a2 	rbit	r2, r2
 8008740:	607a      	str	r2, [r7, #4]
  return result;
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	fab2 f282 	clz	r2, r2
 8008748:	b2d2      	uxtb	r2, r2
 800874a:	40d3      	lsrs	r3, r2
 800874c:	4a1c      	ldr	r2, [pc, #112]	; (80087c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800874e:	5cd3      	ldrb	r3, [r2, r3]
 8008750:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008752:	4b19      	ldr	r3, [pc, #100]	; (80087b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	f003 030f 	and.w	r3, r3, #15
 800875a:	220f      	movs	r2, #15
 800875c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	fa92 f2a2 	rbit	r2, r2
 8008764:	60fa      	str	r2, [r7, #12]
  return result;
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	fab2 f282 	clz	r2, r2
 800876c:	b2d2      	uxtb	r2, r2
 800876e:	40d3      	lsrs	r3, r2
 8008770:	4a14      	ldr	r2, [pc, #80]	; (80087c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008772:	5cd3      	ldrb	r3, [r2, r3]
 8008774:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d008      	beq.n	8008792 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008780:	4a0e      	ldr	r2, [pc, #56]	; (80087bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	fbb2 f2f3 	udiv	r2, r2, r3
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	fb02 f303 	mul.w	r3, r2, r3
 800878e:	627b      	str	r3, [r7, #36]	; 0x24
 8008790:	e004      	b.n	800879c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	4a0c      	ldr	r2, [pc, #48]	; (80087c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008796:	fb02 f303 	mul.w	r3, r2, r3
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	623b      	str	r3, [r7, #32]
      break;
 80087a0:	e002      	b.n	80087a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80087a4:	623b      	str	r3, [r7, #32]
      break;
 80087a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087a8:	6a3b      	ldr	r3, [r7, #32]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	372c      	adds	r7, #44	; 0x2c
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40021000 	.word	0x40021000
 80087bc:	007a1200 	.word	0x007a1200
 80087c0:	0800f864 	.word	0x0800f864
 80087c4:	0800f874 	.word	0x0800f874
 80087c8:	003d0900 	.word	0x003d0900

080087cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087d0:	4b03      	ldr	r3, [pc, #12]	; (80087e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80087d2:	681b      	ldr	r3, [r3, #0]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	200006d0 	.word	0x200006d0

080087e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80087ea:	f7ff ffef 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 80087ee:	4601      	mov	r1, r0
 80087f0:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80087fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	fa92 f2a2 	rbit	r2, r2
 8008804:	603a      	str	r2, [r7, #0]
  return result;
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	fab2 f282 	clz	r2, r2
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	40d3      	lsrs	r3, r2
 8008810:	4a04      	ldr	r2, [pc, #16]	; (8008824 <HAL_RCC_GetPCLK1Freq+0x40>)
 8008812:	5cd3      	ldrb	r3, [r2, r3]
 8008814:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008818:	4618      	mov	r0, r3
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	40021000 	.word	0x40021000
 8008824:	0800f85c 	.word	0x0800f85c

08008828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800882e:	f7ff ffcd 	bl	80087cc <HAL_RCC_GetHCLKFreq>
 8008832:	4601      	mov	r1, r0
 8008834:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800883c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008840:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	fa92 f2a2 	rbit	r2, r2
 8008848:	603a      	str	r2, [r7, #0]
  return result;
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	fab2 f282 	clz	r2, r2
 8008850:	b2d2      	uxtb	r2, r2
 8008852:	40d3      	lsrs	r3, r2
 8008854:	4a04      	ldr	r2, [pc, #16]	; (8008868 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008856:	5cd3      	ldrb	r3, [r2, r3]
 8008858:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	40021000 	.word	0x40021000
 8008868:	0800f85c 	.word	0x0800f85c

0800886c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b092      	sub	sp, #72	; 0x48
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008874:	2300      	movs	r3, #0
 8008876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 80d7 	beq.w	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800888a:	2300      	movs	r3, #0
 800888c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008890:	4b4e      	ldr	r3, [pc, #312]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10e      	bne.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800889c:	4b4b      	ldr	r3, [pc, #300]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	4a4a      	ldr	r2, [pc, #296]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a6:	61d3      	str	r3, [r2, #28]
 80088a8:	4b48      	ldr	r3, [pc, #288]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088b0:	60bb      	str	r3, [r7, #8]
 80088b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ba:	4b45      	ldr	r3, [pc, #276]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d118      	bne.n	80088f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088c6:	4b42      	ldr	r3, [pc, #264]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a41      	ldr	r2, [pc, #260]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088d2:	f7fd f807 	bl	80058e4 <HAL_GetTick>
 80088d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088d8:	e008      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088da:	f7fd f803 	bl	80058e4 <HAL_GetTick>
 80088de:	4602      	mov	r2, r0
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	2b64      	cmp	r3, #100	; 0x64
 80088e6:	d901      	bls.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e169      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088ec:	4b38      	ldr	r3, [pc, #224]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0f0      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088f8:	4b34      	ldr	r3, [pc, #208]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8084 	beq.w	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008914:	429a      	cmp	r2, r3
 8008916:	d07c      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008918:	4b2c      	ldr	r3, [pc, #176]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	fa93 f3a3 	rbit	r3, r3
 800892e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008932:	fab3 f383 	clz	r3, r3
 8008936:	b2db      	uxtb	r3, r3
 8008938:	461a      	mov	r2, r3
 800893a:	4b26      	ldr	r3, [pc, #152]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	461a      	mov	r2, r3
 8008942:	2301      	movs	r3, #1
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800894a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	fa93 f3a3 	rbit	r3, r3
 8008952:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008956:	fab3 f383 	clz	r3, r3
 800895a:	b2db      	uxtb	r3, r3
 800895c:	461a      	mov	r2, r3
 800895e:	4b1d      	ldr	r3, [pc, #116]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	461a      	mov	r2, r3
 8008966:	2300      	movs	r3, #0
 8008968:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800896a:	4a18      	ldr	r2, [pc, #96]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800896c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800896e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d04b      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897a:	f7fc ffb3 	bl	80058e4 <HAL_GetTick>
 800897e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008980:	e00a      	b.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008982:	f7fc ffaf 	bl	80058e4 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008990:	4293      	cmp	r3, r2
 8008992:	d901      	bls.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e113      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008998:	2302      	movs	r3, #2
 800899a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	fa93 f3a3 	rbit	r3, r3
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
 80089a4:	2302      	movs	r3, #2
 80089a6:	623b      	str	r3, [r7, #32]
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	fa93 f3a3 	rbit	r3, r3
 80089ae:	61fb      	str	r3, [r7, #28]
  return result;
 80089b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089b2:	fab3 f383 	clz	r3, r3
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	095b      	lsrs	r3, r3, #5
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	f043 0302 	orr.w	r3, r3, #2
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d108      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80089c6:	4b01      	ldr	r3, [pc, #4]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	e00d      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80089cc:	40021000 	.word	0x40021000
 80089d0:	40007000 	.word	0x40007000
 80089d4:	10908100 	.word	0x10908100
 80089d8:	2302      	movs	r3, #2
 80089da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	fa93 f3a3 	rbit	r3, r3
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	4b78      	ldr	r3, [pc, #480]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	2202      	movs	r2, #2
 80089ea:	613a      	str	r2, [r7, #16]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	fa92 f2a2 	rbit	r2, r2
 80089f2:	60fa      	str	r2, [r7, #12]
  return result;
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	fab2 f282 	clz	r2, r2
 80089fa:	b2d2      	uxtb	r2, r2
 80089fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	f002 021f 	and.w	r2, r2, #31
 8008a06:	2101      	movs	r1, #1
 8008a08:	fa01 f202 	lsl.w	r2, r1, r2
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0b7      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008a12:	4b6d      	ldr	r3, [pc, #436]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	496a      	ldr	r1, [pc, #424]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d105      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a2c:	4b66      	ldr	r3, [pc, #408]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	4a65      	ldr	r2, [pc, #404]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d008      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a44:	4b60      	ldr	r3, [pc, #384]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	f023 0203 	bic.w	r2, r3, #3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	495d      	ldr	r1, [pc, #372]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d008      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a62:	4b59      	ldr	r3, [pc, #356]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	4956      	ldr	r1, [pc, #344]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0304 	and.w	r3, r3, #4
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d008      	beq.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a80:	4b51      	ldr	r3, [pc, #324]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	494e      	ldr	r1, [pc, #312]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d008      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a9e:	4b4a      	ldr	r3, [pc, #296]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	f023 0210 	bic.w	r2, r3, #16
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	4947      	ldr	r1, [pc, #284]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008abc:	4b42      	ldr	r3, [pc, #264]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac8:	493f      	ldr	r1, [pc, #252]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ada:	4b3b      	ldr	r3, [pc, #236]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ade:	f023 0220 	bic.w	r2, r3, #32
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	4938      	ldr	r1, [pc, #224]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0308 	and.w	r3, r3, #8
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d008      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008af8:	4b33      	ldr	r3, [pc, #204]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	4930      	ldr	r1, [pc, #192]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d008      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b16:	4b2c      	ldr	r3, [pc, #176]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	4929      	ldr	r1, [pc, #164]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d008      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b34:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b40:	4921      	ldr	r1, [pc, #132]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008b52:	4b1d      	ldr	r3, [pc, #116]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5e:	491a      	ldr	r1, [pc, #104]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d008      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008b70:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b74:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7c:	4912      	ldr	r1, [pc, #72]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9a:	490b      	ldr	r1, [pc, #44]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d008      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	4903      	ldr	r1, [pc, #12]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3748      	adds	r7, #72	; 0x48
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	40021000 	.word	0x40021000

08008bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e084      	b.n	8008ce8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d106      	bne.n	8008bfe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7fb fa8d 	bl	8004118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2202      	movs	r2, #2
 8008c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c14:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c1e:	d902      	bls.n	8008c26 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008c20:	2300      	movs	r3, #0
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e002      	b.n	8008c2c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c2a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008c34:	d007      	beq.n	8008c46 <HAL_SPI_Init+0x7a>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c3e:	d002      	beq.n	8008c46 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10b      	bne.n	8008c66 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c56:	d903      	bls.n	8008c60 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8008c5e:	e002      	b.n	8008c66 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	431a      	orrs	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	431a      	orrs	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	ea42 0103 	orr.w	r1, r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	0c1b      	lsrs	r3, r3, #16
 8008ca6:	f003 0204 	and.w	r2, r3, #4
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	ea42 0103 	orr.w	r1, r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_SPI_TransmitReceive+0x26>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e1fb      	b.n	800910e <HAL_SPI_TransmitReceive+0x41e>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d1e:	f7fc fde1 	bl	80058e4 <HAL_GetTick>
 8008d22:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d2a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008d32:	887b      	ldrh	r3, [r7, #2]
 8008d34:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008d36:	887b      	ldrh	r3, [r7, #2]
 8008d38:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d3a:	7efb      	ldrb	r3, [r7, #27]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d00e      	beq.n	8008d5e <HAL_SPI_TransmitReceive+0x6e>
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d46:	d106      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d102      	bne.n	8008d56 <HAL_SPI_TransmitReceive+0x66>
 8008d50:	7efb      	ldrb	r3, [r7, #27]
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d003      	beq.n	8008d5e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008d56:	2302      	movs	r3, #2
 8008d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008d5c:	e1cd      	b.n	80090fa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <HAL_SPI_TransmitReceive+0x80>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <HAL_SPI_TransmitReceive+0x80>
 8008d6a:	887b      	ldrh	r3, [r7, #2]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d103      	bne.n	8008d78 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008d76:	e1c0      	b.n	80090fa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d003      	beq.n	8008d8c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2205      	movs	r2, #5
 8008d88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	887a      	ldrh	r2, [r7, #2]
 8008d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	887a      	ldrh	r2, [r7, #2]
 8008da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	887a      	ldrh	r2, [r7, #2]
 8008db2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	887a      	ldrh	r2, [r7, #2]
 8008db8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008dce:	d802      	bhi.n	8008dd6 <HAL_SPI_TransmitReceive+0xe6>
 8008dd0:	8a3b      	ldrh	r3, [r7, #16]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d908      	bls.n	8008de8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008de4:	605a      	str	r2, [r3, #4]
 8008de6:	e007      	b.n	8008df8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008df6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e02:	2b40      	cmp	r3, #64	; 0x40
 8008e04:	d007      	beq.n	8008e16 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e1e:	d97c      	bls.n	8008f1a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <HAL_SPI_TransmitReceive+0x13e>
 8008e28:	8a7b      	ldrh	r3, [r7, #18]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d169      	bne.n	8008f02 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e32:	881a      	ldrh	r2, [r3, #0]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3e:	1c9a      	adds	r2, r3, #2
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e52:	e056      	b.n	8008f02 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d11b      	bne.n	8008e9a <HAL_SPI_TransmitReceive+0x1aa>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d016      	beq.n	8008e9a <HAL_SPI_TransmitReceive+0x1aa>
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d113      	bne.n	8008e9a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	881a      	ldrh	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e82:	1c9a      	adds	r2, r3, #2
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d11c      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x1f2>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d016      	beq.n	8008ee2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	b292      	uxth	r2, r2
 8008ec0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec6:	1c9a      	adds	r2, r3, #2
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008ee2:	f7fc fcff 	bl	80058e4 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d807      	bhi.n	8008f02 <HAL_SPI_TransmitReceive+0x212>
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef8:	d003      	beq.n	8008f02 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f00:	e0fb      	b.n	80090fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1a3      	bne.n	8008e54 <HAL_SPI_TransmitReceive+0x164>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d19d      	bne.n	8008e54 <HAL_SPI_TransmitReceive+0x164>
 8008f18:	e0df      	b.n	80090da <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <HAL_SPI_TransmitReceive+0x23a>
 8008f22:	8a7b      	ldrh	r3, [r7, #18]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	f040 80cb 	bne.w	80090c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d912      	bls.n	8008f5a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	881a      	ldrh	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f44:	1c9a      	adds	r2, r3, #2
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	3b02      	subs	r3, #2
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f58:	e0b2      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	330c      	adds	r3, #12
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f80:	e09e      	b.n	80090c0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f003 0302 	and.w	r3, r3, #2
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d134      	bne.n	8008ffa <HAL_SPI_TransmitReceive+0x30a>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d02f      	beq.n	8008ffa <HAL_SPI_TransmitReceive+0x30a>
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d12c      	bne.n	8008ffa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d912      	bls.n	8008fd0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fae:	881a      	ldrh	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	1c9a      	adds	r2, r3, #2
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b02      	subs	r3, #2
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fce:	e012      	b.n	8008ff6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	7812      	ldrb	r2, [r2, #0]
 8008fdc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b01      	cmp	r3, #1
 8009006:	d148      	bne.n	800909a <HAL_SPI_TransmitReceive+0x3aa>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800900e:	b29b      	uxth	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d042      	beq.n	800909a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800901a:	b29b      	uxth	r3, r3
 800901c:	2b01      	cmp	r3, #1
 800901e:	d923      	bls.n	8009068 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902a:	b292      	uxth	r2, r2
 800902c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009032:	1c9a      	adds	r2, r3, #2
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800903e:	b29b      	uxth	r3, r3
 8009040:	3b02      	subs	r3, #2
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009050:	b29b      	uxth	r3, r3
 8009052:	2b01      	cmp	r3, #1
 8009054:	d81f      	bhi.n	8009096 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	e016      	b.n	8009096 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f103 020c 	add.w	r2, r3, #12
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	1c5a      	adds	r2, r3, #1
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800908a:	b29b      	uxth	r3, r3
 800908c:	3b01      	subs	r3, #1
 800908e:	b29a      	uxth	r2, r3
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009096:	2301      	movs	r3, #1
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800909a:	f7fc fc23 	bl	80058e4 <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d803      	bhi.n	80090b2 <HAL_SPI_TransmitReceive+0x3c2>
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b0:	d102      	bne.n	80090b8 <HAL_SPI_TransmitReceive+0x3c8>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d103      	bne.n	80090c0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80090be:	e01c      	b.n	80090fa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f47f af5b 	bne.w	8008f82 <HAL_SPI_TransmitReceive+0x292>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f47f af54 	bne.w	8008f82 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f8f0 	bl	80092c4 <SPI_EndRxTxTransaction>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d006      	beq.n	80090f8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2220      	movs	r2, #32
 80090f4:	661a      	str	r2, [r3, #96]	; 0x60
 80090f6:	e000      	b.n	80090fa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80090f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800910a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800910e:	4618      	mov	r0, r3
 8009110:	3728      	adds	r7, #40	; 0x28
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	603b      	str	r3, [r7, #0]
 8009122:	4613      	mov	r3, r2
 8009124:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009126:	e04c      	b.n	80091c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912e:	d048      	beq.n	80091c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009130:	f7fc fbd8 	bl	80058e4 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d902      	bls.n	8009146 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d13d      	bne.n	80091c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800915e:	d111      	bne.n	8009184 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009168:	d004      	beq.n	8009174 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009172:	d107      	bne.n	8009184 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800918c:	d10f      	bne.n	80091ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e00f      	b.n	80091e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	689a      	ldr	r2, [r3, #8]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	4013      	ands	r3, r2
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	bf0c      	ite	eq
 80091d2:	2301      	moveq	r3, #1
 80091d4:	2300      	movne	r3, #0
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d1a3      	bne.n	8009128 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	607a      	str	r2, [r7, #4]
 80091f6:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80091f8:	e057      	b.n	80092aa <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009200:	d106      	bne.n	8009210 <SPI_WaitFifoStateUntilTimeout+0x26>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d103      	bne.n	8009210 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	330c      	adds	r3, #12
 800920e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009216:	d048      	beq.n	80092aa <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009218:	f7fc fb64 	bl	80058e4 <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d902      	bls.n	800922e <SPI_WaitFifoStateUntilTimeout+0x44>
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d13d      	bne.n	80092aa <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800923c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009246:	d111      	bne.n	800926c <SPI_WaitFifoStateUntilTimeout+0x82>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009250:	d004      	beq.n	800925c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800925a:	d107      	bne.n	800926c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800926a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009274:	d10f      	bne.n	8009296 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009284:	601a      	str	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e008      	b.n	80092bc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	4013      	ands	r3, r2
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d19f      	bne.n	80091fa <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f7ff ff84 	bl	80091ea <SPI_WaitFifoStateUntilTimeout>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d007      	beq.n	80092f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ec:	f043 0220 	orr.w	r2, r3, #32
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e027      	b.n	8009348 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2200      	movs	r2, #0
 8009300:	2180      	movs	r1, #128	; 0x80
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff ff07 	bl	8009116 <SPI_WaitFlagStateUntilTimeout>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d007      	beq.n	800931e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009312:	f043 0220 	orr.w	r2, r3, #32
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e014      	b.n	8009348 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	2200      	movs	r2, #0
 8009326:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7ff ff5d 	bl	80091ea <SPI_WaitFifoStateUntilTimeout>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d007      	beq.n	8009346 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800933a:	f043 0220 	orr.w	r2, r3, #32
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e000      	b.n	8009348 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e01d      	b.n	800939e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fa ff12 	bl	80041a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f000 fa6a 	bl	8009868 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e01d      	b.n	80093f4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f815 	bl	80093fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	3304      	adds	r3, #4
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f000 fa3f 	bl	8009868 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e01d      	b.n	800945e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f815 	bl	8009466 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2202      	movs	r2, #2
 8009440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3304      	adds	r3, #4
 800944c:	4619      	mov	r1, r3
 800944e:	4610      	mov	r0, r2
 8009450:	f000 fa0a 	bl	8009868 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800948c:	2b01      	cmp	r3, #1
 800948e:	d101      	bne.n	8009494 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009490:	2302      	movs	r3, #2
 8009492:	e08a      	b.n	80095aa <HAL_TIM_IC_ConfigChannel+0x130>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11b      	bne.n	80094e2 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6818      	ldr	r0, [r3, #0]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	6819      	ldr	r1, [r3, #0]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f000 fdc3 	bl	800a044 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	699a      	ldr	r2, [r3, #24]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 020c 	bic.w	r2, r2, #12
 80094cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6999      	ldr	r1, [r3, #24]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	430a      	orrs	r2, r1
 80094de:	619a      	str	r2, [r3, #24]
 80094e0:	e05a      	b.n	8009598 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d11c      	bne.n	8009522 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6819      	ldr	r1, [r3, #0]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f000 fe3b 	bl	800a172 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800950a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6999      	ldr	r1, [r3, #24]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	021a      	lsls	r2, r3, #8
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	619a      	str	r2, [r3, #24]
 8009520:	e03a      	b.n	8009598 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b08      	cmp	r3, #8
 8009526:	d11b      	bne.n	8009560 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	6819      	ldr	r1, [r3, #0]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f000 fe88 	bl	800a24c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	69da      	ldr	r2, [r3, #28]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 020c 	bic.w	r2, r2, #12
 800954a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	69d9      	ldr	r1, [r3, #28]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	61da      	str	r2, [r3, #28]
 800955e:	e01b      	b.n	8009598 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6819      	ldr	r1, [r3, #0]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f000 fea8 	bl	800a2c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69da      	ldr	r2, [r3, #28]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009582:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69d9      	ldr	r1, [r3, #28]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	021a      	lsls	r2, r3, #8
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d101      	bne.n	80095ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e105      	b.n	80097da <HAL_TIM_PWM_ConfigChannel+0x226>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2202      	movs	r2, #2
 80095da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b14      	cmp	r3, #20
 80095e2:	f200 80f0 	bhi.w	80097c6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80095e6:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	08009641 	.word	0x08009641
 80095f0:	080097c7 	.word	0x080097c7
 80095f4:	080097c7 	.word	0x080097c7
 80095f8:	080097c7 	.word	0x080097c7
 80095fc:	08009681 	.word	0x08009681
 8009600:	080097c7 	.word	0x080097c7
 8009604:	080097c7 	.word	0x080097c7
 8009608:	080097c7 	.word	0x080097c7
 800960c:	080096c3 	.word	0x080096c3
 8009610:	080097c7 	.word	0x080097c7
 8009614:	080097c7 	.word	0x080097c7
 8009618:	080097c7 	.word	0x080097c7
 800961c:	08009703 	.word	0x08009703
 8009620:	080097c7 	.word	0x080097c7
 8009624:	080097c7 	.word	0x080097c7
 8009628:	080097c7 	.word	0x080097c7
 800962c:	08009745 	.word	0x08009745
 8009630:	080097c7 	.word	0x080097c7
 8009634:	080097c7 	.word	0x080097c7
 8009638:	080097c7 	.word	0x080097c7
 800963c:	08009785 	.word	0x08009785
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 f99e 	bl	8009988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0208 	orr.w	r2, r2, #8
 800965a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	699a      	ldr	r2, [r3, #24]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0204 	bic.w	r2, r2, #4
 800966a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6999      	ldr	r1, [r3, #24]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	691a      	ldr	r2, [r3, #16]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	619a      	str	r2, [r3, #24]
      break;
 800967e:	e0a3      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fa0e 	bl	8009aa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800969a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6999      	ldr	r1, [r3, #24]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	021a      	lsls	r2, r3, #8
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	619a      	str	r2, [r3, #24]
      break;
 80096c0:	e082      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68b9      	ldr	r1, [r7, #8]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 fa77 	bl	8009bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69da      	ldr	r2, [r3, #28]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0208 	orr.w	r2, r2, #8
 80096dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69da      	ldr	r2, [r3, #28]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0204 	bic.w	r2, r2, #4
 80096ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69d9      	ldr	r1, [r3, #28]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	691a      	ldr	r2, [r3, #16]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	430a      	orrs	r2, r1
 80096fe:	61da      	str	r2, [r3, #28]
      break;
 8009700:	e062      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68b9      	ldr	r1, [r7, #8]
 8009708:	4618      	mov	r0, r3
 800970a:	f000 fadf 	bl	8009ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69da      	ldr	r2, [r3, #28]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800971c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800972c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	69d9      	ldr	r1, [r3, #28]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	021a      	lsls	r2, r3, #8
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	61da      	str	r2, [r3, #28]
      break;
 8009742:	e041      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 fb28 	bl	8009da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f042 0208 	orr.w	r2, r2, #8
 800975e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0204 	bic.w	r2, r2, #4
 800976e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	691a      	ldr	r2, [r3, #16]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	430a      	orrs	r2, r1
 8009780:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009782:	e021      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68b9      	ldr	r1, [r7, #8]
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fb6c 	bl	8009e68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800979e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	691b      	ldr	r3, [r3, #16]
 80097ba:	021a      	lsls	r2, r3, #8
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80097c4:	e000      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80097c6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop

080097e4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d101      	bne.n	80097fc <HAL_TIM_SlaveConfigSynchro+0x18>
 80097f8:	2302      	movs	r3, #2
 80097fa:	e031      	b.n	8009860 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2202      	movs	r2, #2
 8009808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fb90 	bl	8009f34 <TIM_SlaveTimer_SetConfig>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e018      	b.n	8009860 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800983c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68da      	ldr	r2, [r3, #12]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800984c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a3c      	ldr	r2, [pc, #240]	; (800996c <TIM_Base_SetConfig+0x104>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00f      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009886:	d00b      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a39      	ldr	r2, [pc, #228]	; (8009970 <TIM_Base_SetConfig+0x108>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d007      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a38      	ldr	r2, [pc, #224]	; (8009974 <TIM_Base_SetConfig+0x10c>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d003      	beq.n	80098a0 <TIM_Base_SetConfig+0x38>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a37      	ldr	r2, [pc, #220]	; (8009978 <TIM_Base_SetConfig+0x110>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d108      	bne.n	80098b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a2d      	ldr	r2, [pc, #180]	; (800996c <TIM_Base_SetConfig+0x104>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d01b      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c0:	d017      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2a      	ldr	r2, [pc, #168]	; (8009970 <TIM_Base_SetConfig+0x108>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a29      	ldr	r2, [pc, #164]	; (8009974 <TIM_Base_SetConfig+0x10c>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a28      	ldr	r2, [pc, #160]	; (8009978 <TIM_Base_SetConfig+0x110>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00b      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a27      	ldr	r2, [pc, #156]	; (800997c <TIM_Base_SetConfig+0x114>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a26      	ldr	r2, [pc, #152]	; (8009980 <TIM_Base_SetConfig+0x118>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_Base_SetConfig+0x8a>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a25      	ldr	r2, [pc, #148]	; (8009984 <TIM_Base_SetConfig+0x11c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d108      	bne.n	8009904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a10      	ldr	r2, [pc, #64]	; (800996c <TIM_Base_SetConfig+0x104>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00f      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a11      	ldr	r2, [pc, #68]	; (8009978 <TIM_Base_SetConfig+0x110>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d00b      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a10      	ldr	r2, [pc, #64]	; (800997c <TIM_Base_SetConfig+0x114>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d007      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a0f      	ldr	r2, [pc, #60]	; (8009980 <TIM_Base_SetConfig+0x118>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_Base_SetConfig+0xe8>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a0e      	ldr	r2, [pc, #56]	; (8009984 <TIM_Base_SetConfig+0x11c>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d103      	bne.n	8009958 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	615a      	str	r2, [r3, #20]
}
 800995e:	bf00      	nop
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	40012c00 	.word	0x40012c00
 8009970:	40000400 	.word	0x40000400
 8009974:	40000800 	.word	0x40000800
 8009978:	40013400 	.word	0x40013400
 800997c:	40014000 	.word	0x40014000
 8009980:	40014400 	.word	0x40014400
 8009984:	40014800 	.word	0x40014800

08009988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	f023 0201 	bic.w	r2, r3, #1
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f023 0303 	bic.w	r3, r3, #3
 80099c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 0302 	bic.w	r3, r3, #2
 80099d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a2c      	ldr	r2, [pc, #176]	; (8009a94 <TIM_OC1_SetConfig+0x10c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d00f      	beq.n	8009a08 <TIM_OC1_SetConfig+0x80>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a2b      	ldr	r2, [pc, #172]	; (8009a98 <TIM_OC1_SetConfig+0x110>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00b      	beq.n	8009a08 <TIM_OC1_SetConfig+0x80>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a2a      	ldr	r2, [pc, #168]	; (8009a9c <TIM_OC1_SetConfig+0x114>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d007      	beq.n	8009a08 <TIM_OC1_SetConfig+0x80>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a29      	ldr	r2, [pc, #164]	; (8009aa0 <TIM_OC1_SetConfig+0x118>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_OC1_SetConfig+0x80>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a28      	ldr	r2, [pc, #160]	; (8009aa4 <TIM_OC1_SetConfig+0x11c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d10c      	bne.n	8009a22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f023 0308 	bic.w	r3, r3, #8
 8009a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f023 0304 	bic.w	r3, r3, #4
 8009a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a1b      	ldr	r2, [pc, #108]	; (8009a94 <TIM_OC1_SetConfig+0x10c>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00f      	beq.n	8009a4a <TIM_OC1_SetConfig+0xc2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a1a      	ldr	r2, [pc, #104]	; (8009a98 <TIM_OC1_SetConfig+0x110>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00b      	beq.n	8009a4a <TIM_OC1_SetConfig+0xc2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a19      	ldr	r2, [pc, #100]	; (8009a9c <TIM_OC1_SetConfig+0x114>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d007      	beq.n	8009a4a <TIM_OC1_SetConfig+0xc2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a18      	ldr	r2, [pc, #96]	; (8009aa0 <TIM_OC1_SetConfig+0x118>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_OC1_SetConfig+0xc2>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a17      	ldr	r2, [pc, #92]	; (8009aa4 <TIM_OC1_SetConfig+0x11c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d111      	bne.n	8009a6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	621a      	str	r2, [r3, #32]
}
 8009a88:	bf00      	nop
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	40012c00 	.word	0x40012c00
 8009a98:	40013400 	.word	0x40013400
 8009a9c:	40014000 	.word	0x40014000
 8009aa0:	40014400 	.word	0x40014400
 8009aa4:	40014800 	.word	0x40014800

08009aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	f023 0210 	bic.w	r2, r3, #16
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f023 0320 	bic.w	r3, r3, #32
 8009af6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	011b      	lsls	r3, r3, #4
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a28      	ldr	r2, [pc, #160]	; (8009ba8 <TIM_OC2_SetConfig+0x100>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d003      	beq.n	8009b14 <TIM_OC2_SetConfig+0x6c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a27      	ldr	r2, [pc, #156]	; (8009bac <TIM_OC2_SetConfig+0x104>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d10d      	bne.n	8009b30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a1d      	ldr	r2, [pc, #116]	; (8009ba8 <TIM_OC2_SetConfig+0x100>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d00f      	beq.n	8009b58 <TIM_OC2_SetConfig+0xb0>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a1c      	ldr	r2, [pc, #112]	; (8009bac <TIM_OC2_SetConfig+0x104>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00b      	beq.n	8009b58 <TIM_OC2_SetConfig+0xb0>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a1b      	ldr	r2, [pc, #108]	; (8009bb0 <TIM_OC2_SetConfig+0x108>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d007      	beq.n	8009b58 <TIM_OC2_SetConfig+0xb0>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1a      	ldr	r2, [pc, #104]	; (8009bb4 <TIM_OC2_SetConfig+0x10c>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d003      	beq.n	8009b58 <TIM_OC2_SetConfig+0xb0>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a19      	ldr	r2, [pc, #100]	; (8009bb8 <TIM_OC2_SetConfig+0x110>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d113      	bne.n	8009b80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b5e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b66:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	695b      	ldr	r3, [r3, #20]
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	621a      	str	r2, [r3, #32]
}
 8009b9a:	bf00      	nop
 8009b9c:	371c      	adds	r7, #28
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	40012c00 	.word	0x40012c00
 8009bac:	40013400 	.word	0x40013400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40014400 	.word	0x40014400
 8009bb8:	40014800 	.word	0x40014800

08009bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a27      	ldr	r2, [pc, #156]	; (8009cb8 <TIM_OC3_SetConfig+0xfc>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d003      	beq.n	8009c26 <TIM_OC3_SetConfig+0x6a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a26      	ldr	r2, [pc, #152]	; (8009cbc <TIM_OC3_SetConfig+0x100>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d10d      	bne.n	8009c42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	021b      	lsls	r3, r3, #8
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c40:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a1c      	ldr	r2, [pc, #112]	; (8009cb8 <TIM_OC3_SetConfig+0xfc>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d00f      	beq.n	8009c6a <TIM_OC3_SetConfig+0xae>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1b      	ldr	r2, [pc, #108]	; (8009cbc <TIM_OC3_SetConfig+0x100>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00b      	beq.n	8009c6a <TIM_OC3_SetConfig+0xae>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1a      	ldr	r2, [pc, #104]	; (8009cc0 <TIM_OC3_SetConfig+0x104>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d007      	beq.n	8009c6a <TIM_OC3_SetConfig+0xae>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a19      	ldr	r2, [pc, #100]	; (8009cc4 <TIM_OC3_SetConfig+0x108>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d003      	beq.n	8009c6a <TIM_OC3_SetConfig+0xae>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <TIM_OC3_SetConfig+0x10c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d113      	bne.n	8009c92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	621a      	str	r2, [r3, #32]
}
 8009cac:	bf00      	nop
 8009cae:	371c      	adds	r7, #28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	40012c00 	.word	0x40012c00
 8009cbc:	40013400 	.word	0x40013400
 8009cc0:	40014000 	.word	0x40014000
 8009cc4:	40014400 	.word	0x40014400
 8009cc8:	40014800 	.word	0x40014800

08009ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	021b      	lsls	r3, r3, #8
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	031b      	lsls	r3, r3, #12
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a18      	ldr	r2, [pc, #96]	; (8009d8c <TIM_OC4_SetConfig+0xc0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00f      	beq.n	8009d50 <TIM_OC4_SetConfig+0x84>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a17      	ldr	r2, [pc, #92]	; (8009d90 <TIM_OC4_SetConfig+0xc4>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d00b      	beq.n	8009d50 <TIM_OC4_SetConfig+0x84>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a16      	ldr	r2, [pc, #88]	; (8009d94 <TIM_OC4_SetConfig+0xc8>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d007      	beq.n	8009d50 <TIM_OC4_SetConfig+0x84>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a15      	ldr	r2, [pc, #84]	; (8009d98 <TIM_OC4_SetConfig+0xcc>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d003      	beq.n	8009d50 <TIM_OC4_SetConfig+0x84>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a14      	ldr	r2, [pc, #80]	; (8009d9c <TIM_OC4_SetConfig+0xd0>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d109      	bne.n	8009d64 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	019b      	lsls	r3, r3, #6
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	693a      	ldr	r2, [r7, #16]
 8009d7c:	621a      	str	r2, [r3, #32]
}
 8009d7e:	bf00      	nop
 8009d80:	371c      	adds	r7, #28
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	40012c00 	.word	0x40012c00
 8009d90:	40013400 	.word	0x40013400
 8009d94:	40014000 	.word	0x40014000
 8009d98:	40014400 	.word	0x40014400
 8009d9c:	40014800 	.word	0x40014800

08009da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009de4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	041b      	lsls	r3, r3, #16
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a17      	ldr	r2, [pc, #92]	; (8009e54 <TIM_OC5_SetConfig+0xb4>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d00f      	beq.n	8009e1a <TIM_OC5_SetConfig+0x7a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a16      	ldr	r2, [pc, #88]	; (8009e58 <TIM_OC5_SetConfig+0xb8>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00b      	beq.n	8009e1a <TIM_OC5_SetConfig+0x7a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a15      	ldr	r2, [pc, #84]	; (8009e5c <TIM_OC5_SetConfig+0xbc>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d007      	beq.n	8009e1a <TIM_OC5_SetConfig+0x7a>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a14      	ldr	r2, [pc, #80]	; (8009e60 <TIM_OC5_SetConfig+0xc0>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d003      	beq.n	8009e1a <TIM_OC5_SetConfig+0x7a>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a13      	ldr	r2, [pc, #76]	; (8009e64 <TIM_OC5_SetConfig+0xc4>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d109      	bne.n	8009e2e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e20:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	021b      	lsls	r3, r3, #8
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	621a      	str	r2, [r3, #32]
}
 8009e48:	bf00      	nop
 8009e4a:	371c      	adds	r7, #28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	40012c00 	.word	0x40012c00
 8009e58:	40013400 	.word	0x40013400
 8009e5c:	40014000 	.word	0x40014000
 8009e60:	40014400 	.word	0x40014400
 8009e64:	40014800 	.word	0x40014800

08009e68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	021b      	lsls	r3, r3, #8
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	051b      	lsls	r3, r3, #20
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a18      	ldr	r2, [pc, #96]	; (8009f20 <TIM_OC6_SetConfig+0xb8>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d00f      	beq.n	8009ee4 <TIM_OC6_SetConfig+0x7c>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a17      	ldr	r2, [pc, #92]	; (8009f24 <TIM_OC6_SetConfig+0xbc>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00b      	beq.n	8009ee4 <TIM_OC6_SetConfig+0x7c>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a16      	ldr	r2, [pc, #88]	; (8009f28 <TIM_OC6_SetConfig+0xc0>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d007      	beq.n	8009ee4 <TIM_OC6_SetConfig+0x7c>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a15      	ldr	r2, [pc, #84]	; (8009f2c <TIM_OC6_SetConfig+0xc4>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d003      	beq.n	8009ee4 <TIM_OC6_SetConfig+0x7c>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a14      	ldr	r2, [pc, #80]	; (8009f30 <TIM_OC6_SetConfig+0xc8>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d109      	bne.n	8009ef8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	029b      	lsls	r3, r3, #10
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40012c00 	.word	0x40012c00
 8009f24:	40013400 	.word	0x40013400
 8009f28:	40014000 	.word	0x40014000
 8009f2c:	40014400 	.word	0x40014400
 8009f30:	40014800 	.word	0x40014800

08009f34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f5e:	f023 0307 	bic.w	r3, r3, #7
 8009f62:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2b30      	cmp	r3, #48	; 0x30
 8009f7c:	d05c      	beq.n	800a038 <TIM_SlaveTimer_SetConfig+0x104>
 8009f7e:	2b30      	cmp	r3, #48	; 0x30
 8009f80:	d806      	bhi.n	8009f90 <TIM_SlaveTimer_SetConfig+0x5c>
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d058      	beq.n	800a038 <TIM_SlaveTimer_SetConfig+0x104>
 8009f86:	2b20      	cmp	r3, #32
 8009f88:	d056      	beq.n	800a038 <TIM_SlaveTimer_SetConfig+0x104>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d054      	beq.n	800a038 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009f8e:	e054      	b.n	800a03a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8009f90:	2b50      	cmp	r3, #80	; 0x50
 8009f92:	d03d      	beq.n	800a010 <TIM_SlaveTimer_SetConfig+0xdc>
 8009f94:	2b50      	cmp	r3, #80	; 0x50
 8009f96:	d802      	bhi.n	8009f9e <TIM_SlaveTimer_SetConfig+0x6a>
 8009f98:	2b40      	cmp	r3, #64	; 0x40
 8009f9a:	d010      	beq.n	8009fbe <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 8009f9c:	e04d      	b.n	800a03a <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8009f9e:	2b60      	cmp	r3, #96	; 0x60
 8009fa0:	d040      	beq.n	800a024 <TIM_SlaveTimer_SetConfig+0xf0>
 8009fa2:	2b70      	cmp	r3, #112	; 0x70
 8009fa4:	d000      	beq.n	8009fa8 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8009fa6:	e048      	b.n	800a03a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	68d9      	ldr	r1, [r3, #12]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	f000 f9c1 	bl	800a33e <TIM_ETR_SetConfig>
      break;
 8009fbc:	e03d      	b.n	800a03a <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b05      	cmp	r3, #5
 8009fc4:	d101      	bne.n	8009fca <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e038      	b.n	800a03c <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6a1a      	ldr	r2, [r3, #32]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0201 	bic.w	r2, r2, #1
 8009fe0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ff0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	621a      	str	r2, [r3, #32]
      break;
 800a00e:	e014      	b.n	800a03a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	6899      	ldr	r1, [r3, #8]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	461a      	mov	r2, r3
 800a01e:	f000 f879 	bl	800a114 <TIM_TI1_ConfigInputStage>
      break;
 800a022:	e00a      	b.n	800a03a <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6818      	ldr	r0, [r3, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	6899      	ldr	r1, [r3, #8]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	691b      	ldr	r3, [r3, #16]
 800a030:	461a      	mov	r2, r3
 800a032:	f000 f8db 	bl	800a1ec <TIM_TI2_ConfigInputStage>
      break;
 800a036:	e000      	b.n	800a03a <TIM_SlaveTimer_SetConfig+0x106>
      break;
 800a038:	bf00      	nop
  }
  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0201 	bic.w	r2, r3, #1
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	4a24      	ldr	r2, [pc, #144]	; (800a100 <TIM_TI1_SetConfig+0xbc>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d013      	beq.n	800a09a <TIM_TI1_SetConfig+0x56>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a078:	d00f      	beq.n	800a09a <TIM_TI1_SetConfig+0x56>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	4a21      	ldr	r2, [pc, #132]	; (800a104 <TIM_TI1_SetConfig+0xc0>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d00b      	beq.n	800a09a <TIM_TI1_SetConfig+0x56>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4a20      	ldr	r2, [pc, #128]	; (800a108 <TIM_TI1_SetConfig+0xc4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d007      	beq.n	800a09a <TIM_TI1_SetConfig+0x56>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4a1f      	ldr	r2, [pc, #124]	; (800a10c <TIM_TI1_SetConfig+0xc8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d003      	beq.n	800a09a <TIM_TI1_SetConfig+0x56>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4a1e      	ldr	r2, [pc, #120]	; (800a110 <TIM_TI1_SetConfig+0xcc>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d101      	bne.n	800a09e <TIM_TI1_SetConfig+0x5a>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e000      	b.n	800a0a0 <TIM_TI1_SetConfig+0x5c>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d008      	beq.n	800a0b6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	617b      	str	r3, [r7, #20]
 800a0b4:	e003      	b.n	800a0be <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	011b      	lsls	r3, r3, #4
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f023 030a 	bic.w	r3, r3, #10
 800a0d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f003 030a 	and.w	r3, r3, #10
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	bf00      	nop
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	40012c00 	.word	0x40012c00
 800a104:	40000400 	.word	0x40000400
 800a108:	40000800 	.word	0x40000800
 800a10c:	40013400 	.word	0x40013400
 800a110:	40014000 	.word	0x40014000

0800a114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6a1b      	ldr	r3, [r3, #32]
 800a124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f023 0201 	bic.w	r2, r3, #1
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	699b      	ldr	r3, [r3, #24]
 800a136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a13e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	011b      	lsls	r3, r3, #4
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	4313      	orrs	r3, r2
 800a148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f023 030a 	bic.w	r3, r3, #10
 800a150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4313      	orrs	r3, r2
 800a158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	621a      	str	r2, [r3, #32]
}
 800a166:	bf00      	nop
 800a168:	371c      	adds	r7, #28
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a172:	b480      	push	{r7}
 800a174:	b087      	sub	sp, #28
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	607a      	str	r2, [r7, #4]
 800a17e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	f023 0210 	bic.w	r2, r3, #16
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a19e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	031b      	lsls	r3, r3, #12
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	697a      	ldr	r2, [r7, #20]
 800a1d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	621a      	str	r2, [r3, #32]
}
 800a1e0:	bf00      	nop
 800a1e2:	371c      	adds	r7, #28
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	f023 0210 	bic.w	r2, r3, #16
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a216:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	031b      	lsls	r3, r3, #12
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	4313      	orrs	r3, r2
 800a220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a228:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	011b      	lsls	r3, r3, #4
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	4313      	orrs	r3, r2
 800a232:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	621a      	str	r2, [r3, #32]
}
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f023 0303 	bic.w	r3, r3, #3
 800a278:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a288:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	011b      	lsls	r3, r3, #4
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	4313      	orrs	r3, r2
 800a294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a29c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	021b      	lsls	r3, r3, #8
 800a2a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	621a      	str	r2, [r3, #32]
}
 800a2b8:	bf00      	nop
 800a2ba:	371c      	adds	r7, #28
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b087      	sub	sp, #28
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	69db      	ldr	r3, [r3, #28]
 800a2e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a302:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	031b      	lsls	r3, r3, #12
 800a308:	b29b      	uxth	r3, r3
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a316:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	031b      	lsls	r3, r3, #12
 800a31c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	4313      	orrs	r3, r2
 800a324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	621a      	str	r2, [r3, #32]
}
 800a332:	bf00      	nop
 800a334:	371c      	adds	r7, #28
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a33e:	b480      	push	{r7}
 800a340:	b087      	sub	sp, #28
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
 800a34a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a358:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	021a      	lsls	r2, r3, #8
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	431a      	orrs	r2, r3
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	4313      	orrs	r3, r2
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	4313      	orrs	r3, r2
 800a36a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	609a      	str	r2, [r3, #8]
}
 800a372:	bf00      	nop
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
	...

0800a380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a390:	2b01      	cmp	r3, #1
 800a392:	d101      	bne.n	800a398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a394:	2302      	movs	r3, #2
 800a396:	e063      	b.n	800a460 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a2b      	ldr	r2, [pc, #172]	; (800a46c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d004      	beq.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a2a      	ldr	r2, [pc, #168]	; (800a470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d108      	bne.n	800a3de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a1b      	ldr	r2, [pc, #108]	; (800a46c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d018      	beq.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40a:	d013      	beq.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a18      	ldr	r2, [pc, #96]	; (800a474 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00e      	beq.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a17      	ldr	r2, [pc, #92]	; (800a478 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d009      	beq.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a12      	ldr	r2, [pc, #72]	; (800a470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d004      	beq.n	800a434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a13      	ldr	r2, [pc, #76]	; (800a47c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d10c      	bne.n	800a44e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a43a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	4313      	orrs	r3, r2
 800a444:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	40012c00 	.word	0x40012c00
 800a470:	40013400 	.word	0x40013400
 800a474:	40000400 	.word	0x40000400
 800a478:	40000800 	.word	0x40000800
 800a47c:	40014000 	.word	0x40014000

0800a480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a494:	2b01      	cmp	r3, #1
 800a496:	d101      	bne.n	800a49c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a498:	2302      	movs	r3, #2
 800a49a:	e065      	b.n	800a568 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a502:	4313      	orrs	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	041b      	lsls	r3, r3, #16
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a16      	ldr	r2, [pc, #88]	; (800a574 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d004      	beq.n	800a52a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a14      	ldr	r2, [pc, #80]	; (800a578 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d115      	bne.n	800a556 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	051b      	lsls	r3, r3, #20
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	4313      	orrs	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr
 800a574:	40012c00 	.word	0x40012c00
 800a578:	40013400 	.word	0x40013400

0800a57c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e040      	b.n	800a610 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a592:	2b00      	cmp	r3, #0
 800a594:	d106      	bne.n	800a5a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7f9 fecc 	bl	800433c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2224      	movs	r2, #36	; 0x24
 800a5a8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0201 	bic.w	r2, r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f82c 	bl	800a618 <UART_SetConfig>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d101      	bne.n	800a5ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e022      	b.n	800a610 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d002      	beq.n	800a5d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fa3a 	bl	800aa4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689a      	ldr	r2, [r3, #8]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f042 0201 	orr.w	r2, r2, #1
 800a606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fac1 	bl	800ab90 <UART_CheckIdleState>
 800a60e:	4603      	mov	r3, r0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b088      	sub	sp, #32
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a620:	2300      	movs	r3, #0
 800a622:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	431a      	orrs	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	69db      	ldr	r3, [r3, #28]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a64a:	f023 030c 	bic.w	r3, r3, #12
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6812      	ldr	r2, [r2, #0]
 800a652:	6939      	ldr	r1, [r7, #16]
 800a654:	430b      	orrs	r3, r1
 800a656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68da      	ldr	r2, [r3, #12]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	693a      	ldr	r2, [r7, #16]
 800a68e:	430a      	orrs	r2, r1
 800a690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4aa9      	ldr	r2, [pc, #676]	; (800a93c <UART_SetConfig+0x324>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d121      	bne.n	800a6e0 <UART_SetConfig+0xc8>
 800a69c:	4ba8      	ldr	r3, [pc, #672]	; (800a940 <UART_SetConfig+0x328>)
 800a69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a0:	f003 0303 	and.w	r3, r3, #3
 800a6a4:	2b03      	cmp	r3, #3
 800a6a6:	d817      	bhi.n	800a6d8 <UART_SetConfig+0xc0>
 800a6a8:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <UART_SetConfig+0x98>)
 800a6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ae:	bf00      	nop
 800a6b0:	0800a6c1 	.word	0x0800a6c1
 800a6b4:	0800a6cd 	.word	0x0800a6cd
 800a6b8:	0800a6d3 	.word	0x0800a6d3
 800a6bc:	0800a6c7 	.word	0x0800a6c7
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	77fb      	strb	r3, [r7, #31]
 800a6c4:	e0b2      	b.n	800a82c <UART_SetConfig+0x214>
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	77fb      	strb	r3, [r7, #31]
 800a6ca:	e0af      	b.n	800a82c <UART_SetConfig+0x214>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	77fb      	strb	r3, [r7, #31]
 800a6d0:	e0ac      	b.n	800a82c <UART_SetConfig+0x214>
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	77fb      	strb	r3, [r7, #31]
 800a6d6:	e0a9      	b.n	800a82c <UART_SetConfig+0x214>
 800a6d8:	2310      	movs	r3, #16
 800a6da:	77fb      	strb	r3, [r7, #31]
 800a6dc:	bf00      	nop
 800a6de:	e0a5      	b.n	800a82c <UART_SetConfig+0x214>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a97      	ldr	r2, [pc, #604]	; (800a944 <UART_SetConfig+0x32c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d123      	bne.n	800a732 <UART_SetConfig+0x11a>
 800a6ea:	4b95      	ldr	r3, [pc, #596]	; (800a940 <UART_SetConfig+0x328>)
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f6:	d012      	beq.n	800a71e <UART_SetConfig+0x106>
 800a6f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6fc:	d802      	bhi.n	800a704 <UART_SetConfig+0xec>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <UART_SetConfig+0xfa>
 800a702:	e012      	b.n	800a72a <UART_SetConfig+0x112>
 800a704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a708:	d00c      	beq.n	800a724 <UART_SetConfig+0x10c>
 800a70a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a70e:	d003      	beq.n	800a718 <UART_SetConfig+0x100>
 800a710:	e00b      	b.n	800a72a <UART_SetConfig+0x112>
 800a712:	2300      	movs	r3, #0
 800a714:	77fb      	strb	r3, [r7, #31]
 800a716:	e089      	b.n	800a82c <UART_SetConfig+0x214>
 800a718:	2302      	movs	r3, #2
 800a71a:	77fb      	strb	r3, [r7, #31]
 800a71c:	e086      	b.n	800a82c <UART_SetConfig+0x214>
 800a71e:	2304      	movs	r3, #4
 800a720:	77fb      	strb	r3, [r7, #31]
 800a722:	e083      	b.n	800a82c <UART_SetConfig+0x214>
 800a724:	2308      	movs	r3, #8
 800a726:	77fb      	strb	r3, [r7, #31]
 800a728:	e080      	b.n	800a82c <UART_SetConfig+0x214>
 800a72a:	2310      	movs	r3, #16
 800a72c:	77fb      	strb	r3, [r7, #31]
 800a72e:	bf00      	nop
 800a730:	e07c      	b.n	800a82c <UART_SetConfig+0x214>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a84      	ldr	r2, [pc, #528]	; (800a948 <UART_SetConfig+0x330>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d123      	bne.n	800a784 <UART_SetConfig+0x16c>
 800a73c:	4b80      	ldr	r3, [pc, #512]	; (800a940 <UART_SetConfig+0x328>)
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800a744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a748:	d012      	beq.n	800a770 <UART_SetConfig+0x158>
 800a74a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a74e:	d802      	bhi.n	800a756 <UART_SetConfig+0x13e>
 800a750:	2b00      	cmp	r3, #0
 800a752:	d007      	beq.n	800a764 <UART_SetConfig+0x14c>
 800a754:	e012      	b.n	800a77c <UART_SetConfig+0x164>
 800a756:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a75a:	d00c      	beq.n	800a776 <UART_SetConfig+0x15e>
 800a75c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a760:	d003      	beq.n	800a76a <UART_SetConfig+0x152>
 800a762:	e00b      	b.n	800a77c <UART_SetConfig+0x164>
 800a764:	2300      	movs	r3, #0
 800a766:	77fb      	strb	r3, [r7, #31]
 800a768:	e060      	b.n	800a82c <UART_SetConfig+0x214>
 800a76a:	2302      	movs	r3, #2
 800a76c:	77fb      	strb	r3, [r7, #31]
 800a76e:	e05d      	b.n	800a82c <UART_SetConfig+0x214>
 800a770:	2304      	movs	r3, #4
 800a772:	77fb      	strb	r3, [r7, #31]
 800a774:	e05a      	b.n	800a82c <UART_SetConfig+0x214>
 800a776:	2308      	movs	r3, #8
 800a778:	77fb      	strb	r3, [r7, #31]
 800a77a:	e057      	b.n	800a82c <UART_SetConfig+0x214>
 800a77c:	2310      	movs	r3, #16
 800a77e:	77fb      	strb	r3, [r7, #31]
 800a780:	bf00      	nop
 800a782:	e053      	b.n	800a82c <UART_SetConfig+0x214>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a70      	ldr	r2, [pc, #448]	; (800a94c <UART_SetConfig+0x334>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d123      	bne.n	800a7d6 <UART_SetConfig+0x1be>
 800a78e:	4b6c      	ldr	r3, [pc, #432]	; (800a940 <UART_SetConfig+0x328>)
 800a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a792:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a79a:	d012      	beq.n	800a7c2 <UART_SetConfig+0x1aa>
 800a79c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7a0:	d802      	bhi.n	800a7a8 <UART_SetConfig+0x190>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <UART_SetConfig+0x19e>
 800a7a6:	e012      	b.n	800a7ce <UART_SetConfig+0x1b6>
 800a7a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7ac:	d00c      	beq.n	800a7c8 <UART_SetConfig+0x1b0>
 800a7ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7b2:	d003      	beq.n	800a7bc <UART_SetConfig+0x1a4>
 800a7b4:	e00b      	b.n	800a7ce <UART_SetConfig+0x1b6>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	77fb      	strb	r3, [r7, #31]
 800a7ba:	e037      	b.n	800a82c <UART_SetConfig+0x214>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	77fb      	strb	r3, [r7, #31]
 800a7c0:	e034      	b.n	800a82c <UART_SetConfig+0x214>
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	77fb      	strb	r3, [r7, #31]
 800a7c6:	e031      	b.n	800a82c <UART_SetConfig+0x214>
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	77fb      	strb	r3, [r7, #31]
 800a7cc:	e02e      	b.n	800a82c <UART_SetConfig+0x214>
 800a7ce:	2310      	movs	r3, #16
 800a7d0:	77fb      	strb	r3, [r7, #31]
 800a7d2:	bf00      	nop
 800a7d4:	e02a      	b.n	800a82c <UART_SetConfig+0x214>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a5d      	ldr	r2, [pc, #372]	; (800a950 <UART_SetConfig+0x338>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d123      	bne.n	800a828 <UART_SetConfig+0x210>
 800a7e0:	4b57      	ldr	r3, [pc, #348]	; (800a940 <UART_SetConfig+0x328>)
 800a7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a7e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7ec:	d012      	beq.n	800a814 <UART_SetConfig+0x1fc>
 800a7ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a7f2:	d802      	bhi.n	800a7fa <UART_SetConfig+0x1e2>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d007      	beq.n	800a808 <UART_SetConfig+0x1f0>
 800a7f8:	e012      	b.n	800a820 <UART_SetConfig+0x208>
 800a7fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a7fe:	d00c      	beq.n	800a81a <UART_SetConfig+0x202>
 800a800:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a804:	d003      	beq.n	800a80e <UART_SetConfig+0x1f6>
 800a806:	e00b      	b.n	800a820 <UART_SetConfig+0x208>
 800a808:	2300      	movs	r3, #0
 800a80a:	77fb      	strb	r3, [r7, #31]
 800a80c:	e00e      	b.n	800a82c <UART_SetConfig+0x214>
 800a80e:	2302      	movs	r3, #2
 800a810:	77fb      	strb	r3, [r7, #31]
 800a812:	e00b      	b.n	800a82c <UART_SetConfig+0x214>
 800a814:	2304      	movs	r3, #4
 800a816:	77fb      	strb	r3, [r7, #31]
 800a818:	e008      	b.n	800a82c <UART_SetConfig+0x214>
 800a81a:	2308      	movs	r3, #8
 800a81c:	77fb      	strb	r3, [r7, #31]
 800a81e:	e005      	b.n	800a82c <UART_SetConfig+0x214>
 800a820:	2310      	movs	r3, #16
 800a822:	77fb      	strb	r3, [r7, #31]
 800a824:	bf00      	nop
 800a826:	e001      	b.n	800a82c <UART_SetConfig+0x214>
 800a828:	2310      	movs	r3, #16
 800a82a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a834:	f040 808e 	bne.w	800a954 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 800a838:	7ffb      	ldrb	r3, [r7, #31]
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d85e      	bhi.n	800a8fc <UART_SetConfig+0x2e4>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <UART_SetConfig+0x22c>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a869 	.word	0x0800a869
 800a848:	0800a889 	.word	0x0800a889
 800a84c:	0800a8a9 	.word	0x0800a8a9
 800a850:	0800a8fd 	.word	0x0800a8fd
 800a854:	0800a8c5 	.word	0x0800a8c5
 800a858:	0800a8fd 	.word	0x0800a8fd
 800a85c:	0800a8fd 	.word	0x0800a8fd
 800a860:	0800a8fd 	.word	0x0800a8fd
 800a864:	0800a8e5 	.word	0x0800a8e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a868:	f7fd ffbc 	bl	80087e4 <HAL_RCC_GetPCLK1Freq>
 800a86c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	005a      	lsls	r2, r3, #1
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	085b      	lsrs	r3, r3, #1
 800a878:	441a      	add	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a882:	b29b      	uxth	r3, r3
 800a884:	61bb      	str	r3, [r7, #24]
        break;
 800a886:	e03c      	b.n	800a902 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a888:	f7fd ffce 	bl	8008828 <HAL_RCC_GetPCLK2Freq>
 800a88c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	005a      	lsls	r2, r3, #1
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	085b      	lsrs	r3, r3, #1
 800a898:	441a      	add	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	61bb      	str	r3, [r7, #24]
        break;
 800a8a6:	e02c      	b.n	800a902 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	085b      	lsrs	r3, r3, #1
 800a8ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a8b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	6852      	ldr	r2, [r2, #4]
 800a8ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	61bb      	str	r3, [r7, #24]
        break;
 800a8c2:	e01e      	b.n	800a902 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8c4:	f7fd ff18 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a8c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	005a      	lsls	r2, r3, #1
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	085b      	lsrs	r3, r3, #1
 800a8d4:	441a      	add	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	61bb      	str	r3, [r7, #24]
        break;
 800a8e2:	e00e      	b.n	800a902 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	085b      	lsrs	r3, r3, #1
 800a8ea:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	61bb      	str	r3, [r7, #24]
        break;
 800a8fa:	e002      	b.n	800a902 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	75fb      	strb	r3, [r7, #23]
        break;
 800a900:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	2b0f      	cmp	r3, #15
 800a906:	d916      	bls.n	800a936 <UART_SetConfig+0x31e>
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a90e:	d212      	bcs.n	800a936 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	b29b      	uxth	r3, r3
 800a914:	f023 030f 	bic.w	r3, r3, #15
 800a918:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	085b      	lsrs	r3, r3, #1
 800a91e:	b29b      	uxth	r3, r3
 800a920:	f003 0307 	and.w	r3, r3, #7
 800a924:	b29a      	uxth	r2, r3
 800a926:	897b      	ldrh	r3, [r7, #10]
 800a928:	4313      	orrs	r3, r2
 800a92a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	897a      	ldrh	r2, [r7, #10]
 800a932:	60da      	str	r2, [r3, #12]
 800a934:	e07e      	b.n	800aa34 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	75fb      	strb	r3, [r7, #23]
 800a93a:	e07b      	b.n	800aa34 <UART_SetConfig+0x41c>
 800a93c:	40013800 	.word	0x40013800
 800a940:	40021000 	.word	0x40021000
 800a944:	40004400 	.word	0x40004400
 800a948:	40004800 	.word	0x40004800
 800a94c:	40004c00 	.word	0x40004c00
 800a950:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 800a954:	7ffb      	ldrb	r3, [r7, #31]
 800a956:	2b08      	cmp	r3, #8
 800a958:	d85b      	bhi.n	800aa12 <UART_SetConfig+0x3fa>
 800a95a:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <UART_SetConfig+0x348>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a985 	.word	0x0800a985
 800a964:	0800a9a3 	.word	0x0800a9a3
 800a968:	0800a9c1 	.word	0x0800a9c1
 800a96c:	0800aa13 	.word	0x0800aa13
 800a970:	0800a9dd 	.word	0x0800a9dd
 800a974:	0800aa13 	.word	0x0800aa13
 800a978:	0800aa13 	.word	0x0800aa13
 800a97c:	0800aa13 	.word	0x0800aa13
 800a980:	0800a9fb 	.word	0x0800a9fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a984:	f7fd ff2e 	bl	80087e4 <HAL_RCC_GetPCLK1Freq>
 800a988:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	085a      	lsrs	r2, r3, #1
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	441a      	add	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	fbb2 f3f3 	udiv	r3, r2, r3
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	61bb      	str	r3, [r7, #24]
        break;
 800a9a0:	e03a      	b.n	800aa18 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9a2:	f7fd ff41 	bl	8008828 <HAL_RCC_GetPCLK2Freq>
 800a9a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	085a      	lsrs	r2, r3, #1
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	441a      	add	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	61bb      	str	r3, [r7, #24]
        break;
 800a9be:	e02b      	b.n	800aa18 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	085b      	lsrs	r3, r3, #1
 800a9c6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800a9ca:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6852      	ldr	r2, [r2, #4]
 800a9d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	61bb      	str	r3, [r7, #24]
        break;
 800a9da:	e01d      	b.n	800aa18 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9dc:	f7fd fe8c 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 800a9e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	085a      	lsrs	r2, r3, #1
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	441a      	add	r2, r3
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	61bb      	str	r3, [r7, #24]
        break;
 800a9f8:	e00e      	b.n	800aa18 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	085b      	lsrs	r3, r3, #1
 800aa00:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	61bb      	str	r3, [r7, #24]
        break;
 800aa10:	e002      	b.n	800aa18 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	75fb      	strb	r3, [r7, #23]
        break;
 800aa16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	2b0f      	cmp	r3, #15
 800aa1c:	d908      	bls.n	800aa30 <UART_SetConfig+0x418>
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa24:	d204      	bcs.n	800aa30 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	69ba      	ldr	r2, [r7, #24]
 800aa2c:	60da      	str	r2, [r3, #12]
 800aa2e:	e001      	b.n	800aa34 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2200      	movs	r2, #0
 800aa38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3720      	adds	r7, #32
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop

0800aa4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00a      	beq.n	800aa76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00a      	beq.n	800aa98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	430a      	orrs	r2, r1
 800aa96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00a      	beq.n	800aaba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	430a      	orrs	r2, r1
 800aab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aabe:	f003 0308 	and.w	r3, r3, #8
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00a      	beq.n	800aadc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	430a      	orrs	r2, r1
 800aada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	f003 0310 	and.w	r3, r3, #16
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00a      	beq.n	800aafe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab02:	f003 0320 	and.w	r3, r3, #32
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d01a      	beq.n	800ab62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab4a:	d10a      	bne.n	800ab62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d00a      	beq.n	800ab84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	430a      	orrs	r2, r1
 800ab82:	605a      	str	r2, [r3, #4]
  }
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af02      	add	r7, sp, #8
 800ab96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ab9e:	f7fa fea1 	bl	80058e4 <HAL_GetTick>
 800aba2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d10e      	bne.n	800abd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f82a 	bl	800ac1a <UART_WaitOnFlagUntilTimeout>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d001      	beq.n	800abd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e020      	b.n	800ac12 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f003 0304 	and.w	r3, r3, #4
 800abda:	2b04      	cmp	r3, #4
 800abdc:	d10e      	bne.n	800abfc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f814 	bl	800ac1a <UART_WaitOnFlagUntilTimeout>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e00a      	b.n	800ac12 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2220      	movs	r2, #32
 800ac00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2220      	movs	r2, #32
 800ac06:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	603b      	str	r3, [r7, #0]
 800ac26:	4613      	mov	r3, r2
 800ac28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac2a:	e05d      	b.n	800ace8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac32:	d059      	beq.n	800ace8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac34:	f7fa fe56 	bl	80058e4 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	69ba      	ldr	r2, [r7, #24]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d302      	bcc.n	800ac4a <UART_WaitOnFlagUntilTimeout+0x30>
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d11b      	bne.n	800ac82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	689a      	ldr	r2, [r3, #8]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0201 	bic.w	r2, r2, #1
 800ac68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2220      	movs	r2, #32
 800ac74:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	e042      	b.n	800ad08 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0304 	and.w	r3, r3, #4
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d02b      	beq.n	800ace8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac9e:	d123      	bne.n	800ace8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aca8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800acb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	689a      	ldr	r2, [r3, #8]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f022 0201 	bic.w	r2, r2, #1
 800acc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2220      	movs	r2, #32
 800acce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2220      	movs	r2, #32
 800acd4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2220      	movs	r2, #32
 800acda:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e00f      	b.n	800ad08 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	69da      	ldr	r2, [r3, #28]
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	4013      	ands	r3, r2
 800acf2:	68ba      	ldr	r2, [r7, #8]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	bf0c      	ite	eq
 800acf8:	2301      	moveq	r3, #1
 800acfa:	2300      	movne	r3, #0
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	461a      	mov	r2, r3
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d092      	beq.n	800ac2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <VBS_GetAvBusVoltage_d>:
  * @brief  It return latest averaged Vbus measurement expressed in u16Volt
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  return ( pHandle->AvBusVoltage_d );
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	88db      	ldrh	r3, [r3, #6]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	88db      	ldrh	r3, [r3, #6]
 800ad34:	60fb      	str	r3, [r7, #12]
  temp *= pHandle->ConversionFactor;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	885b      	ldrh	r3, [r3, #2]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	fb02 f303 	mul.w	r3, r2, r3
 800ad42:	60fb      	str	r3, [r7, #12]
  temp /= 65536u;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	0c1b      	lsrs	r3, r3, #16
 800ad48:	60fb      	str	r3, [r7, #12]

  return ( ( uint16_t )temp );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	b29b      	uxth	r3, r3
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b089      	sub	sp, #36	; 0x24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	6039      	str	r1, [r7, #0]
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	60fb      	str	r3, [r7, #12]

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800ad68:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ad6c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ad70:	fb02 f203 	mul.w	r2, r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 800ad74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad78:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ad7c:	fb01 f303 	mul.w	r3, r1, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800ad80:	4413      	add	r3, r2
 800ad82:	61fb      	str	r3, [r7, #28]

  uw_temp = ( uint32_t ) sw_temp;
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	61bb      	str	r3, [r7, #24]

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	881b      	ldrh	r3, [r3, #0]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	fb03 f302 	mul.w	r3, r3, r2
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d930      	bls.n	800adfe <Circle_Limitation+0xa4>
  {

    uw_temp /= ( uint32_t )( 16777216 );
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	0e1b      	lsrs	r3, r3, #24
 800ada0:	61bb      	str	r3, [r7, #24]

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800ada8:	461a      	mov	r2, r3
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	1a9b      	subs	r3, r3, r2
 800adae:	61bb      	str	r3, [r7, #24]

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	005b      	lsls	r3, r3, #1
 800adb8:	4413      	add	r3, r2
 800adba:	889b      	ldrh	r3, [r3, #4]
 800adbc:	82fb      	strh	r3, [r7, #22]

    sw_temp = Vqd.q * ( int32_t )table_element;
 800adbe:	f9b7 3000 	ldrsh.w	r3, [r7]
 800adc2:	461a      	mov	r2, r3
 800adc4:	8afb      	ldrh	r3, [r7, #22]
 800adc6:	fb03 f302 	mul.w	r3, r3, r2
 800adca:	61fb      	str	r3, [r7, #28]
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b00      	cmp	r3, #0
 800add0:	da02      	bge.n	800add8 <Circle_Limitation+0x7e>
 800add2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800add6:	337f      	adds	r3, #127	; 0x7f
 800add8:	13db      	asrs	r3, r3, #15
 800adda:	b21b      	sxth	r3, r3
 800addc:	81bb      	strh	r3, [r7, #12]

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800adde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ade2:	461a      	mov	r2, r3
 800ade4:	8afb      	ldrh	r3, [r7, #22]
 800ade6:	fb03 f302 	mul.w	r3, r3, r2
 800adea:	61fb      	str	r3, [r7, #28]
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	da02      	bge.n	800adf8 <Circle_Limitation+0x9e>
 800adf2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800adf6:	337f      	adds	r3, #127	; 0x7f
 800adf8:	13db      	asrs	r3, r3, #15
 800adfa:	b21b      	sxth	r3, r3
 800adfc:	81fb      	strh	r3, [r7, #14]
  }

  return ( local_vqd );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	2300      	movs	r3, #0
 800ae04:	8a3a      	ldrh	r2, [r7, #16]
 800ae06:	f362 030f 	bfi	r3, r2, #0, #16
 800ae0a:	8a7a      	ldrh	r2, [r7, #18]
 800ae0c:	f362 431f 	bfi	r3, r2, #16, #16
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3724      	adds	r7, #36	; 0x24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 800ae76:	bf00      	nop
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 800ae82:	b480      	push	{r7}
 800ae84:	b085      	sub	sp, #20
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00b      	beq.n	800aeae <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	683a      	ldr	r2, [r7, #0]
 800aea6:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	60da      	str	r2, [r3, #12]
  }
}
 800aeae:	bf00      	nop
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 800aeba:	b480      	push	{r7}
 800aebc:	b085      	sub	sp, #20
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d027      	beq.n	800af20 <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	89bb      	ldrh	r3, [r7, #12]
 800aed8:	4413      	add	r3, r2
 800aeda:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	785b      	ldrb	r3, [r3, #1]
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	89bb      	ldrh	r3, [r7, #12]
 800aee4:	4413      	add	r3, r2
 800aee6:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800aee8:	2300      	movs	r3, #0
 800aeea:	72fb      	strb	r3, [r7, #11]
 800aeec:	e00a      	b.n	800af04 <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 800aeee:	7afb      	ldrb	r3, [r7, #11]
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	4413      	add	r3, r2
 800aef4:	789b      	ldrb	r3, [r3, #2]
 800aef6:	b29a      	uxth	r2, r3
 800aef8:	89bb      	ldrh	r3, [r7, #12]
 800aefa:	4413      	add	r3, r2
 800aefc:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800aefe:	7afb      	ldrb	r3, [r7, #11]
 800af00:	3301      	adds	r3, #1
 800af02:	72fb      	strb	r3, [r7, #11]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	785b      	ldrb	r3, [r3, #1]
 800af08:	7afa      	ldrb	r2, [r7, #11]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d3ef      	bcc.n	800aeee <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 800af0e:	89bb      	ldrh	r3, [r7, #12]
 800af10:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800af12:	89bb      	ldrh	r3, [r7, #12]
 800af14:	0a1b      	lsrs	r3, r3, #8
 800af16:	b29b      	uxth	r3, r3
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	4413      	add	r3, r2
 800af1e:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 800af2e:	b480      	push	{r7}
 800af30:	b085      	sub	sp, #20
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800af36:	2300      	movs	r3, #0
 800af38:	81fb      	strh	r3, [r7, #14]
 800af3a:	e007      	b.n	800af4c <MPM_Clear+0x1e>
  {
    pHandle->hMeasBuffer[i] = 0;
 800af3c:	89fa      	ldrh	r2, [r7, #14]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2100      	movs	r1, #0
 800af42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800af46:	89fb      	ldrh	r3, [r7, #14]
 800af48:	3301      	adds	r3, #1
 800af4a:	81fb      	strh	r3, [r7, #14]
 800af4c:	89fb      	ldrh	r3, [r7, #14]
 800af4e:	2b7f      	cmp	r3, #127	; 0x7f
 800af50:	d9f4      	bls.n	800af3c <MPM_Clear+0xe>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

}
 800af62:	bf00      	nop
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 800af6e:	b480      	push	{r7}
 800af70:	b085      	sub	sp, #20
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	807b      	strh	r3, [r7, #2]
  uint16_t i;
  int32_t wAux = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60bb      	str	r3, [r7, #8]

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800af84:	4619      	mov	r1, r3
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	887a      	ldrh	r2, [r7, #2]
 800af8a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
  pHandle->hNextMeasBufferIndex++;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800afa0:	3301      	adds	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800afb0:	2b7f      	cmp	r3, #127	; 0x7f
 800afb2:	d903      	bls.n	800afbc <MPM_CalcElMotorPower+0x4e>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800afbc:	2300      	movs	r3, #0
 800afbe:	81fb      	strh	r3, [r7, #14]
 800afc0:	e00a      	b.n	800afd8 <MPM_CalcElMotorPower+0x6a>
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800afc2:	89fa      	ldrh	r2, [r7, #14]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800afca:	461a      	mov	r2, r3
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	4413      	add	r3, r2
 800afd0:	60bb      	str	r3, [r7, #8]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800afd2:	89fb      	ldrh	r3, [r7, #14]
 800afd4:	3301      	adds	r3, #1
 800afd6:	81fb      	strh	r3, [r7, #14]
 800afd8:	89fb      	ldrh	r3, [r7, #14]
 800afda:	2b7f      	cmp	r3, #127	; 0x7f
 800afdc:	d9f1      	bls.n	800afc2 <MPM_CalcElMotorPower+0x54>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da00      	bge.n	800afe6 <MPM_CalcElMotorPower+0x78>
 800afe4:	337f      	adds	r3, #127	; 0x7f
 800afe6:	11db      	asrs	r3, r3, #7
 800afe8:	60bb      	str	r3, [r7, #8]
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	b21a      	sxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
 800aff4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <MPM_GetAvrgElMotorPowerW>:
  *         expressed in watt.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrgElMotorPowerW );
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
}
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <NTC_SetFaultState>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
 800b01e:	b480      	push	{r7}
 800b020:	b085      	sub	sp, #20
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	8a1a      	ldrh	r2, [r3, #16]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	8b5b      	ldrh	r3, [r3, #26]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d902      	bls.n	800b038 <NTC_SetFaultState+0x1a>
  {
    hFault = MC_OVER_TEMP;
 800b032:	2308      	movs	r3, #8
 800b034:	81fb      	strh	r3, [r7, #14]
 800b036:	e00b      	b.n	800b050 <NTC_SetFaultState+0x32>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	8a1a      	ldrh	r2, [r3, #16]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	8b9b      	ldrh	r3, [r3, #28]
 800b040:	429a      	cmp	r2, r3
 800b042:	d202      	bcs.n	800b04a <NTC_SetFaultState+0x2c>
  {
    hFault = MC_NO_ERROR;
 800b044:	2300      	movs	r3, #0
 800b046:	81fb      	strh	r3, [r7, #14]
 800b048:	e002      	b.n	800b050 <NTC_SetFaultState+0x32>
  }
  else
  {
    hFault = pHandle->hFaultState;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	8adb      	ldrh	r3, [r3, #22]
 800b04e:	81fb      	strh	r3, [r7, #14]
  }
  return hFault;
 800b050:	89fb      	ldrh	r3, [r7, #14]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
__weak void NTC_Init( NTC_Handle_t * pHandle )
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b082      	sub	sp, #8
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10d      	bne.n	800b08a <NTC_Init+0x2c>
  {
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3304      	adds	r3, #4
 800b072:	4618      	mov	r0, r3
 800b074:	f7f8 fbbe 	bl	80037f4 <RCM_RegisterRegConv>
 800b078:	4603      	mov	r3, r0
 800b07a:	461a      	mov	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    NTC_Clear( pHandle );
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f80c 	bl	800b0a0 <NTC_Clear>
  {
    pHandle->hFaultState = MC_NO_ERROR;
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
  }

}
 800b088:	e006      	b.n	800b098 <NTC_Init+0x3a>
    pHandle->hFaultState = MC_NO_ERROR;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	82da      	strh	r2, [r3, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	8a5a      	ldrh	r2, [r3, #18]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	821a      	strh	r2, [r3, #16]
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <NTC_Clear>:
 * @brief Initializes internal average temperature computed value
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  pHandle->hAvTemp_d = 0u;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	821a      	strh	r2, [r3, #16]
}
 800b0ae:	bf00      	nop
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d12e      	bne.n	800b128 <NTC_CalcAvTemp+0x6e>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7f8 fc45 	bl	8003960 <RCM_ExecRegularConv>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	81fb      	strh	r3, [r7, #14]

    if ( hAux != 0xFFFFu )
 800b0da:	89fb      	ldrh	r3, [r7, #14]
 800b0dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d019      	beq.n	800b118 <NTC_CalcAvTemp+0x5e>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	8b1b      	ldrh	r3, [r3, #24]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	60bb      	str	r3, [r7, #8]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	8a1b      	ldrh	r3, [r3, #16]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	fb02 f303 	mul.w	r3, r2, r3
 800b0f8:	60bb      	str	r3, [r7, #8]
      wtemp += hAux;
 800b0fa:	89fb      	ldrh	r3, [r7, #14]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	4413      	add	r3, r2
 800b100:	60bb      	str	r3, [r7, #8]
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	8b1b      	ldrh	r3, [r3, #24]
 800b106:	461a      	mov	r2, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b10e:	60bb      	str	r3, [r7, #8]

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	b29a      	uxth	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	821a      	strh	r2, [r3, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff ff80 	bl	800b01e <NTC_SetFaultState>
 800b11e:	4603      	mov	r3, r0
 800b120:	461a      	mov	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	82da      	strh	r2, [r3, #22]
 800b126:	e002      	b.n	800b12e <NTC_CalcAvTemp+0x74>
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	82da      	strh	r2, [r3, #22]
  }

  return ( pHandle->hFaultState );
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	8adb      	ldrh	r3, [r3, #22]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <NTC_GetAvTemp_C>:
  * @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @r AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
 800b13a:	b480      	push	{r7}
 800b13c:	b085      	sub	sp, #20
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d11d      	bne.n	800b186 <NTC_GetAvTemp_C+0x4c>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	8a1b      	ldrh	r3, [r3, #16]
 800b14e:	60fb      	str	r3, [r7, #12]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	461a      	mov	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
    wTemp *= pHandle->hSensitivity;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800b162:	461a      	mov	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	fb02 f303 	mul.w	r3, r2, r3
 800b16a:	60fb      	str	r3, [r7, #12]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	da02      	bge.n	800b178 <NTC_GetAvTemp_C+0x3e>
 800b172:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b176:	33ff      	adds	r3, #255	; 0xff
 800b178:	141b      	asrs	r3, r3, #16
 800b17a:	461a      	mov	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b180:	4413      	add	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	e002      	b.n	800b18c <NTC_GetAvTemp_C+0x52>
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	8a9b      	ldrh	r3, [r3, #20]
 800b18a:	60fb      	str	r3, [r7, #12]
  }
  return ( ( int16_t )wTemp );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	b21b      	sxth	r3, r3
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <PID_HandleInit>:
 * @brief  It initializes the handle
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	809a      	strh	r2, [r3, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	80da      	strh	r2, [r3, #6]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	845a      	strh	r2, [r3, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	609a      	str	r2, [r3, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <PID_SetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	807b      	strh	r3, [r7, #2]
  pHandle->hKpGain = hKpGain;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	887a      	ldrh	r2, [r7, #2]
 800b1ea:	809a      	strh	r2, [r3, #4]
}
 800b1ec:	bf00      	nop
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <PID_SetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	460b      	mov	r3, r1
 800b202:	807b      	strh	r3, [r7, #2]
  pHandle->hKiGain = hKiGain;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	887a      	ldrh	r2, [r7, #2]
 800b208:	80da      	strh	r2, [r3, #6]
}
 800b20a:	bf00      	nop
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <PID_GetKP>:
 * @brief  It returns the Kp gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
 800b216:	b480      	push	{r7}
 800b218:	b083      	sub	sp, #12
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpGain );
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <PID_GetKI>:
 * @brief  It returns the Ki gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiGain );
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <PID_SetIntegralTerm>:
 * pHandle: handler of the current instance of the PID component
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
 800b24a:	b480      	push	{r7}
 800b24c:	b083      	sub	sp, #12
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
  pHandle->wIntegralTerm = wIntegralTermValue;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	609a      	str	r2, [r3, #8]

  return;
 800b25a:	bf00      	nop
}
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <PID_GetKPDivisor>:
 * @brief  It returns the Kp gain divisor
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpDivisor );
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	8b1b      	ldrh	r3, [r3, #24]
}
 800b272:	4618      	mov	r0, r3
 800b274:	370c      	adds	r7, #12
 800b276:	46bd      	mov	sp, r7
 800b278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27c:	4770      	bx	lr

0800b27e <PID_GetKIDivisor>:
 * @brief  It returns the Ki gain divisor of the passed PI object
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
 800b27e:	b480      	push	{r7}
 800b280:	b083      	sub	sp, #12
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiDivisor );
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8b5b      	ldrh	r3, [r3, #26]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <PID_SetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
 800b296:	b480      	push	{r7}
 800b298:	b083      	sub	sp, #12
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	807b      	strh	r3, [r7, #2]
  pHandle->hKdGain = hKdGain;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	887a      	ldrh	r2, [r7, #2]
 800b2a6:	845a      	strh	r2, [r3, #34]	; 0x22
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <PID_GetKD>:
 * @brief  It returns the Kd gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  return pHandle->hKdGain;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr
	...

0800b2d0 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b089      	sub	sp, #36	; 0x24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	617b      	str	r3, [r7, #20]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	8a9b      	ldrh	r3, [r3, #20]
 800b2e2:	827b      	strh	r3, [r7, #18]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	8adb      	ldrh	r3, [r3, #22]
 800b2e8:	823b      	strh	r3, [r7, #16]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	fb02 f303 	mul.w	r3, r2, r3
 800b2f8:	60fb      	str	r3, [r7, #12]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d103      	bne.n	800b30c <PI_Controller+0x3c>
  {
    pHandle->wIntegralTerm = 0;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	609a      	str	r2, [r3, #8]
 800b30a:	e03a      	b.n	800b382 <PI_Controller+0xb2>
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b312:	461a      	mov	r2, r3
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	fb02 f303 	mul.w	r3, r2, r3
 800b31a:	60bb      	str	r3, [r7, #8]
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	4413      	add	r3, r2
 800b324:	61bb      	str	r3, [r7, #24]

    if ( wIntegral_sum_temp < 0 )
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	da0a      	bge.n	800b342 <PI_Controller+0x72>
    {
      if ( pHandle->wIntegralTerm > 0 )
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	2b00      	cmp	r3, #0
 800b332:	dd0f      	ble.n	800b354 <PI_Controller+0x84>
      {
        if ( wIntegral_Term > 0 )
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	dd0c      	ble.n	800b354 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = INT32_MAX;
 800b33a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b33e:	61bb      	str	r3, [r7, #24]
 800b340:	e008      	b.n	800b354 <PI_Controller+0x84>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	689b      	ldr	r3, [r3, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	da04      	bge.n	800b354 <PI_Controller+0x84>
      {
        if ( wIntegral_Term < 0 )
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	da01      	bge.n	800b354 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = -INT32_MAX;
 800b350:	4b27      	ldr	r3, [pc, #156]	; (800b3f0 <PI_Controller+0x120>)
 800b352:	61bb      	str	r3, [r7, #24]
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	dd04      	ble.n	800b368 <PI_Controller+0x98>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68da      	ldr	r2, [r3, #12]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	609a      	str	r2, [r3, #8]
 800b366:	e00c      	b.n	800b382 <PI_Controller+0xb2>
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	429a      	cmp	r2, r3
 800b370:	da04      	bge.n	800b37c <PI_Controller+0xac>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	691a      	ldr	r2, [r3, #16]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	609a      	str	r2, [r3, #8]
 800b37a:	e002      	b.n	800b382 <PI_Controller+0xb2>
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	609a      	str	r2, [r3, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	8b9b      	ldrh	r3, [r3, #28]
 800b386:	461a      	mov	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	fa43 f202 	asr.w	r2, r3, r2
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	8bc9      	ldrh	r1, [r1, #30]
 800b396:	410b      	asrs	r3, r1
 800b398:	4413      	add	r3, r2
 800b39a:	61fb      	str	r3, [r7, #28]
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800b39c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3a0:	69fa      	ldr	r2, [r7, #28]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	dd08      	ble.n	800b3b8 <PI_Controller+0xe8>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800b3a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	617b      	str	r3, [r7, #20]
    wOutput_32 = hUpperOutputLimit;
 800b3b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3b4:	61fb      	str	r3, [r7, #28]
 800b3b6:	e00c      	b.n	800b3d2 <PI_Controller+0x102>
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 800b3b8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	da07      	bge.n	800b3d2 <PI_Controller+0x102>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 800b3c2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	617b      	str	r3, [r7, #20]
    wOutput_32 = hLowerOutputLimit;
 800b3cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b3d0:	61fb      	str	r3, [r7, #28]
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689a      	ldr	r2, [r3, #8]
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	441a      	add	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	609a      	str	r2, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	b21b      	sxth	r3, r3
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3724      	adds	r7, #36	; 0x24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	80000001 	.word	0x80000001

0800b3f4 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 800b3f4:	b590      	push	{r4, r7, lr}
 800b3f6:	b089      	sub	sp, #36	; 0x24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b402:	f107 0310 	add.w	r3, r7, #16
 800b406:	320c      	adds	r2, #12
 800b408:	6810      	ldr	r0, [r2, #0]
 800b40a:	6018      	str	r0, [r3, #0]
  qd_t Vqd = pHandle->pFOCVars->Vqd;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800b412:	f107 030c 	add.w	r3, r7, #12
 800b416:	3216      	adds	r2, #22
 800b418:	6810      	ldr	r0, [r2, #0]
 800b41a:	6018      	str	r0, [r3, #0]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800b41c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b420:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b424:	fb02 f203 	mul.w	r2, r2, r3
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800b428:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b42c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800b430:	fb01 f303 	mul.w	r3, r1, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800b434:	4413      	add	r3, r2
 800b436:	61fb      	str	r3, [r7, #28]
  wAux /= 65536;
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	da02      	bge.n	800b444 <PQD_CalcElMotorPower+0x50>
 800b43e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b442:	33ff      	adds	r3, #255	; 0xff
 800b444:	141b      	asrs	r3, r3, #16
 800b446:	61fb      	str	r3, [r7, #28]

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800b454:	4618      	mov	r0, r3
 800b456:	f7ff fc67 	bl	800ad28 <VBS_GetAvBusVoltage_V>
 800b45a:	4603      	mov	r3, r0
 800b45c:	fb03 f304 	mul.w	r3, r3, r4
 800b460:	61bb      	str	r3, [r7, #24]
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	4a16      	ldr	r2, [pc, #88]	; (800b4c0 <PQD_CalcElMotorPower+0xcc>)
 800b466:	fb82 1203 	smull	r1, r2, r2, r3
 800b46a:	1192      	asrs	r2, r2, #6
 800b46c:	17db      	asrs	r3, r3, #31
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	61bb      	str	r3, [r7, #24]

  wAux3 = wAux * wAux2;
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	fb02 f303 	mul.w	r3, r2, r3
 800b47a:	617b      	str	r3, [r7, #20]
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800b47c:	697a      	ldr	r2, [r7, #20]
 800b47e:	4613      	mov	r3, r2
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	4413      	add	r3, r2
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	617b      	str	r3, [r7, #20]
  wAux3 /= 10;
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	4a0e      	ldr	r2, [pc, #56]	; (800b4c4 <PQD_CalcElMotorPower+0xd0>)
 800b48c:	fb82 1203 	smull	r1, r2, r2, r3
 800b490:	1092      	asrs	r2, r2, #2
 800b492:	17db      	asrs	r3, r3, #31
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	617b      	str	r3, [r7, #20]
  wAux3 /= 65536;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	da02      	bge.n	800b4a4 <PQD_CalcElMotorPower+0xb0>
 800b49e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800b4a2:	33ff      	adds	r3, #255	; 0xff
 800b4a4:	141b      	asrs	r3, r3, #16
 800b4a6:	617b      	str	r3, [r7, #20]

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	b212      	sxth	r2, r2
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff fd5c 	bl	800af6e <MPM_CalcElMotorPower>

}
 800b4b6:	bf00      	nop
 800b4b8:	3724      	adds	r7, #36	; 0x24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	1b4e81b5 	.word	0x1b4e81b5
 800b4c4:	66666667 	.word	0x66666667

0800b4c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800b4d0:	4b08      	ldr	r3, [pc, #32]	; (800b4f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b4d2:	69da      	ldr	r2, [r3, #28]
 800b4d4:	4907      	ldr	r1, [pc, #28]	; (800b4f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b4dc:	4b05      	ldr	r3, [pc, #20]	; (800b4f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b4de:	69da      	ldr	r2, [r3, #28]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	bf00      	nop
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	40021000 	.word	0x40021000

0800b4f8 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 800b500:	4b07      	ldr	r3, [pc, #28]	; (800b520 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800b502:	69da      	ldr	r2, [r3, #28]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4013      	ands	r3, r2
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	bf0c      	ite	eq
 800b50e:	2301      	moveq	r3, #1
 800b510:	2300      	movne	r3, #0
 800b512:	b2db      	uxtb	r3, r3
}
 800b514:	4618      	mov	r0, r3
 800b516:	370c      	adds	r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr
 800b520:	40021000 	.word	0x40021000

0800b524 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 800b52c:	4b06      	ldr	r3, [pc, #24]	; (800b548 <LL_APB1_GRP1_DisableClock+0x24>)
 800b52e:	69da      	ldr	r2, [r3, #28]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	43db      	mvns	r3, r3
 800b534:	4904      	ldr	r1, [pc, #16]	; (800b548 <LL_APB1_GRP1_DisableClock+0x24>)
 800b536:	4013      	ands	r3, r2
 800b538:	61cb      	str	r3, [r1, #28]
}
 800b53a:	bf00      	nop
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	40021000 	.word	0x40021000

0800b54c <LL_TIM_GetCounterMode>:
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <LL_TIM_SetTriggerOutput>:
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	431a      	orrs	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	605a      	str	r2, [r3, #4]
}
 800b582:	bf00      	nop
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr

0800b58e <LL_TIM_ClearFlag_CC1>:
{
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f06f 0202 	mvn.w	r2, #2
 800b59c:	611a      	str	r2, [r3, #16]
}
 800b59e:	bf00      	nop
 800b5a0:	370c      	adds	r7, #12
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <LL_TIM_IsActiveFlag_CC1>:
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d101      	bne.n	800b5c2 <LL_TIM_IsActiveFlag_CC1+0x18>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e000      	b.n	800b5c4 <LL_TIM_IsActiveFlag_CC1+0x1a>
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	695b      	ldr	r3, [r3, #20]
 800b5dc:	f043 0201 	orr.w	r2, r3, #1
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	615a      	str	r2, [r3, #20]
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800b5f6:	2001      	movs	r0, #1
 800b5f8:	f7ff ff7e 	bl	800b4f8 <LL_APB1_GRP1_IsEnabledClock>
 800b5fc:	6078      	str	r0, [r7, #4]
  if ( isTIM2ClockOn == 0 )
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800b604:	2001      	movs	r0, #1
 800b606:	f7ff ff5f 	bl	800b4c8 <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800b60a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b60e:	f7ff ffdf 	bl	800b5d0 <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800b612:	2001      	movs	r0, #1
 800b614:	f7ff ff86 	bl	800b524 <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800b618:	e013      	b.n	800b642 <startTimers+0x52>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800b61a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b624:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
 800b626:	2120      	movs	r1, #32
 800b628:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b62c:	f7ff ff9c 	bl	800b568 <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800b630:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b634:	f7ff ffcc 	bl	800b5d0 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800b63e:	f7ff ff93 	bl	800b568 <LL_TIM_SetTriggerOutput>
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b086      	sub	sp, #24
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	60b9      	str	r1, [r7, #8]
 800b654:	603b      	str	r3, [r7, #0]
 800b656:	4613      	mov	r3, r2
 800b658:	71fb      	strb	r3, [r7, #7]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ff76 	bl	800b54c <LL_TIM_GetCounterMode>
 800b660:	4603      	mov	r3, r0
 800b662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b666:	2b60      	cmp	r3, #96	; 0x60
 800b668:	d105      	bne.n	800b676 <waitForPolarizationEnd+0x2c>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800b66a:	79fb      	ldrb	r3, [r7, #7]
 800b66c:	3301      	adds	r3, #1
 800b66e:	b29b      	uxth	r3, r3
 800b670:	015b      	lsls	r3, r3, #5
 800b672:	82bb      	strh	r3, [r7, #20]
 800b674:	e005      	b.n	800b682 <waitForPolarizationEnd+0x38>
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	3301      	adds	r3, #1
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	015b      	lsls	r3, r3, #5
 800b680:	82bb      	strh	r3, [r7, #20]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f7ff ff83 	bl	800b58e <LL_TIM_ClearFlag_CC1>
  hCalibrationPeriodCounter = 0u;
 800b688:	2300      	movs	r3, #0
 800b68a:	82fb      	strh	r3, [r7, #22]
  while (*cnt < NB_CONVERSIONS)
 800b68c:	e017      	b.n	800b6be <waitForPolarizationEnd+0x74>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f7ff ff8b 	bl	800b5aa <LL_TIM_IsActiveFlag_CC1>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d011      	beq.n	800b6be <waitForPolarizationEnd+0x74>
    {
      LL_TIM_ClearFlag_CC1(TIMx);
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f7ff ff77 	bl	800b58e <LL_TIM_ClearFlag_CC1>
      hCalibrationPeriodCounter++;
 800b6a0:	8afb      	ldrh	r3, [r7, #22]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	82fb      	strh	r3, [r7, #22]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800b6a6:	8afa      	ldrh	r2, [r7, #22]
 800b6a8:	8abb      	ldrh	r3, [r7, #20]
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d307      	bcc.n	800b6be <waitForPolarizationEnd+0x74>
      {
        if (*cnt < NB_CONVERSIONS)
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b0f      	cmp	r3, #15
 800b6b4:	d803      	bhi.n	800b6be <waitForPolarizationEnd+0x74>
        {
          *SWerror = 1u;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	801a      	strh	r2, [r3, #0]
          break;
 800b6bc:	e003      	b.n	800b6c6 <waitForPolarizationEnd+0x7c>
  while (*cnt < NB_CONVERSIONS)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	2b0f      	cmp	r3, #15
 800b6c4:	d9e3      	bls.n	800b68e <waitForPolarizationEnd+0x44>
        }
      }
    }
  }
}
 800b6c6:	bf00      	nop
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	4798      	blx	r3
}
 800b6e2:	bf00      	nop
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b08a      	sub	sp, #40	; 0x28
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800b6f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b6fe:	fb03 f302 	mul.w	r3, r3, r2
 800b702:	61bb      	str	r3, [r7, #24]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800b704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b708:	461a      	mov	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b710:	fb03 f202 	mul.w	r2, r3, r2
 800b714:	4613      	mov	r3, r2
 800b716:	07db      	lsls	r3, r3, #31
 800b718:	1a9b      	subs	r3, r3, r2
 800b71a:	005b      	lsls	r3, r3, #1
 800b71c:	617b      	str	r3, [r7, #20]

  wX = wUBeta;
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	613b      	str	r3, [r7, #16]
  wY = ( wUBeta + wUAlpha ) / 2;
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	4413      	add	r3, r2
 800b728:	0fda      	lsrs	r2, r3, #31
 800b72a:	4413      	add	r3, r2
 800b72c:	105b      	asrs	r3, r3, #1
 800b72e:	60fb      	str	r3, [r7, #12]
  wZ = ( wUBeta - wUAlpha ) / 2;
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	0fda      	lsrs	r2, r3, #31
 800b738:	4413      	add	r3, r2
 800b73a:	105b      	asrs	r3, r3, #1
 800b73c:	60bb      	str	r3, [r7, #8]

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f280 80bd 	bge.w	800b8c0 <PWMC_SetPhaseVoltage+0x1d6>
  {
    if ( wZ < 0 )
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	da3c      	bge.n	800b7c6 <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_5;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2204      	movs	r2, #4
 800b750:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b75a:	089b      	lsrs	r3, r3, #2
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	4619      	mov	r1, r3
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	2b00      	cmp	r3, #0
 800b768:	da03      	bge.n	800b772 <PWMC_SetPhaseVoltage+0x88>
 800b76a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800b76e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b772:	149b      	asrs	r3, r3, #18
 800b774:	440b      	add	r3, r1
 800b776:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	da03      	bge.n	800b786 <PWMC_SetPhaseVoltage+0x9c>
 800b77e:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b782:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b786:	145b      	asrs	r3, r3, #17
 800b788:	461a      	mov	r2, r3
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b78c:	4413      	add	r3, r2
 800b78e:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	da03      	bge.n	800b79e <PWMC_SetPhaseVoltage+0xb4>
 800b796:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b79a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b79e:	145b      	asrs	r3, r3, #17
 800b7a0:	425b      	negs	r3, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a6:	4413      	add	r3, r2
 800b7a8:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhC;
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800b7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800b7c4:	e138      	b.n	800ba38 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ >= 0 */
      if ( wX <= 0 )
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	dc3c      	bgt.n	800b846 <PWMC_SetPhaseVoltage+0x15c>
      {
        pHandle->Sector = SECTOR_4;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2203      	movs	r2, #3
 800b7d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7da:	089b      	lsrs	r3, r3, #2
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	4619      	mov	r1, r3
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	da03      	bge.n	800b7f2 <PWMC_SetPhaseVoltage+0x108>
 800b7ea:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800b7ee:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b7f2:	149b      	asrs	r3, r3, #18
 800b7f4:	440b      	add	r3, r1
 800b7f6:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	da03      	bge.n	800b806 <PWMC_SetPhaseVoltage+0x11c>
 800b7fe:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b802:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b806:	145b      	asrs	r3, r3, #17
 800b808:	461a      	mov	r2, r3
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	4413      	add	r3, r2
 800b80e:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	da03      	bge.n	800b81e <PWMC_SetPhaseVoltage+0x134>
 800b816:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b81a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b81e:	145b      	asrs	r3, r3, #17
 800b820:	425b      	negs	r3, r3
 800b822:	461a      	mov	r2, r3
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	4413      	add	r3, r2
 800b828:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhC;
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	b29a      	uxth	r2, r3
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	b29a      	uxth	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800b844:	e0f8      	b.n	800ba38 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_3;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2202      	movs	r2, #2
 800b84a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b854:	089b      	lsrs	r3, r3, #2
 800b856:	b29b      	uxth	r3, r3
 800b858:	4619      	mov	r1, r3
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b00      	cmp	r3, #0
 800b862:	da03      	bge.n	800b86c <PWMC_SetPhaseVoltage+0x182>
 800b864:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800b868:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b86c:	149b      	asrs	r3, r3, #18
 800b86e:	440b      	add	r3, r1
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	da03      	bge.n	800b880 <PWMC_SetPhaseVoltage+0x196>
 800b878:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b87c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b880:	145b      	asrs	r3, r3, #17
 800b882:	425b      	negs	r3, r3
 800b884:	461a      	mov	r2, r3
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	4413      	add	r3, r2
 800b88a:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	da03      	bge.n	800b89a <PWMC_SetPhaseVoltage+0x1b0>
 800b892:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b896:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b89a:	145b      	asrs	r3, r3, #17
 800b89c:	461a      	mov	r2, r3
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhB;
 800b8a4:	6a3b      	ldr	r3, [r7, #32]
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	b29a      	uxth	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800b8be:	e0bb      	b.n	800ba38 <PWMC_SetPhaseVoltage+0x34e>
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	db3c      	blt.n	800b940 <PWMC_SetPhaseVoltage+0x256>
    {
      pHandle->Sector = SECTOR_2;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8d4:	089b      	lsrs	r3, r3, #2
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	4619      	mov	r1, r3
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da03      	bge.n	800b8ec <PWMC_SetPhaseVoltage+0x202>
 800b8e4:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800b8e8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b8ec:	149b      	asrs	r3, r3, #18
 800b8ee:	440b      	add	r3, r1
 800b8f0:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	da03      	bge.n	800b900 <PWMC_SetPhaseVoltage+0x216>
 800b8f8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b8fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b900:	145b      	asrs	r3, r3, #17
 800b902:	461a      	mov	r2, r3
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	4413      	add	r3, r2
 800b908:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	da03      	bge.n	800b918 <PWMC_SetPhaseVoltage+0x22e>
 800b910:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b914:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b918:	145b      	asrs	r3, r3, #17
 800b91a:	425b      	negs	r3, r3
 800b91c:	461a      	mov	r2, r3
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	4413      	add	r3, r2
 800b922:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhB;
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	b29a      	uxth	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	b29a      	uxth	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	b29a      	uxth	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800b93e:	e07b      	b.n	800ba38 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ < 0 */
      if ( wX <= 0 )
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	2b00      	cmp	r3, #0
 800b944:	dc3c      	bgt.n	800b9c0 <PWMC_SetPhaseVoltage+0x2d6>
      {
        pHandle->Sector = SECTOR_6;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2205      	movs	r2, #5
 800b94a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b954:	089b      	lsrs	r3, r3, #2
 800b956:	b29b      	uxth	r3, r3
 800b958:	4619      	mov	r1, r3
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	2b00      	cmp	r3, #0
 800b962:	da03      	bge.n	800b96c <PWMC_SetPhaseVoltage+0x282>
 800b964:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800b968:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b96c:	149b      	asrs	r3, r3, #18
 800b96e:	440b      	add	r3, r1
 800b970:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	da03      	bge.n	800b980 <PWMC_SetPhaseVoltage+0x296>
 800b978:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b97c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b980:	145b      	asrs	r3, r3, #17
 800b982:	425b      	negs	r3, r3
 800b984:	461a      	mov	r2, r3
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	4413      	add	r3, r2
 800b98a:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	da03      	bge.n	800b99a <PWMC_SetPhaseVoltage+0x2b0>
 800b992:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b996:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b99a:	145b      	asrs	r3, r3, #17
 800b99c:	461a      	mov	r2, r3
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhA;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	b29a      	uxth	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800b9be:	e03b      	b.n	800ba38 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_1;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9ce:	089b      	lsrs	r3, r3, #2
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	da03      	bge.n	800b9e6 <PWMC_SetPhaseVoltage+0x2fc>
 800b9de:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800b9e2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800b9e6:	149b      	asrs	r3, r3, #18
 800b9e8:	440b      	add	r3, r1
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	da03      	bge.n	800b9fa <PWMC_SetPhaseVoltage+0x310>
 800b9f2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800b9f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b9fa:	145b      	asrs	r3, r3, #17
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	4413      	add	r3, r2
 800ba02:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	da03      	bge.n	800ba12 <PWMC_SetPhaseVoltage+0x328>
 800ba0a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800ba0e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ba12:	145b      	asrs	r3, r3, #17
 800ba14:	425b      	negs	r3, r3
 800ba16:	461a      	mov	r2, r3
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhA;
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }
  }

  pHandle->CntPhA = ( uint16_t )wTimePhA;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	865a      	strh	r2, [r3, #50]	; 0x32
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 800ba40:	6a3b      	ldr	r3, [r7, #32]
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	869a      	strh	r2, [r3, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	86da      	strh	r2, [r3, #54]	; 0x36

  if ( pHandle->DTTest == 1u )
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d147      	bne.n	800baea <PWMC_SetPhaseVoltage+0x400>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	dd09      	ble.n	800ba78 <PWMC_SetPhaseVoltage+0x38e>
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ba6e:	4413      	add	r3, r2
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	865a      	strh	r2, [r3, #50]	; 0x32
 800ba76:	e008      	b.n	800ba8a <PWMC_SetPhaseVoltage+0x3a0>
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dd09      	ble.n	800baa8 <PWMC_SetPhaseVoltage+0x3be>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ba9e:	4413      	add	r3, r2
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	869a      	strh	r2, [r3, #52]	; 0x34
 800baa6:	e008      	b.n	800baba <PWMC_SetPhaseVoltage+0x3d0>
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	869a      	strh	r2, [r3, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	dd09      	ble.n	800bad8 <PWMC_SetPhaseVoltage+0x3ee>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bace:	4413      	add	r3, r2
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	86da      	strh	r2, [r3, #54]	; 0x36
 800bad6:	e008      	b.n	800baea <PWMC_SetPhaseVoltage+0x400>
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800bae2:	1ad3      	subs	r3, r2, r3
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	4798      	blx	r3
 800baf2:	4603      	mov	r3, r0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3728      	adds	r7, #40	; 0x28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  pHandle->pFctSwitchOffPwm( pHandle );
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	4798      	blx	r3
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
  if ( action == CRC_START )
 800bb24:	78fb      	ldrb	r3, [r7, #3]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d114      	bne.n	800bb54 <PWMC_CurrentReadingCalibr+0x40>
  {
    PWMC_SwitchOffPWM( pHandle );
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff ffe6 	bl	800bafc <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d124      	bne.n	800bb90 <PWMC_CurrentReadingCalibr+0x7c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	4798      	blx	r3
      retVal = true;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	73fb      	strb	r3, [r7, #15]
 800bb52:	e01d      	b.n	800bb90 <PWMC_CurrentReadingCalibr+0x7c>
    }
  }
  else if ( action == CRC_EXEC )
 800bb54:	78fb      	ldrb	r3, [r7, #3]
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d11a      	bne.n	800bb90 <PWMC_CurrentReadingCalibr+0x7c>
  {
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d013      	beq.n	800bb8c <PWMC_CurrentReadingCalibr+0x78>
    {
      pHandle->OffCalibrWaitTimeCounter--;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d108      	bne.n	800bb90 <PWMC_CurrentReadingCalibr+0x7c>
      {
        pHandle->pFctCurrReadingCalib( pHandle );
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	4798      	blx	r3
        retVal = true;
 800bb86:	2301      	movs	r3, #1
 800bb88:	73fb      	strb	r3, [r7, #15]
 800bb8a:	e001      	b.n	800bb90 <PWMC_CurrentReadingCalibr+0x7c>
      }
    }
    else
    {
      retVal = true;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  else
  {
  }
  return retVal;
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b082      	sub	sp, #8
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
 800bbaa:	4603      	mov	r3, r0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800bbbc:	4b05      	ldr	r3, [pc, #20]	; (800bbd4 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800bbbe:	68da      	ldr	r2, [r3, #12]
 800bbc0:	4904      	ldr	r1, [pc, #16]	; (800bbd4 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	60cb      	str	r3, [r1, #12]
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	e0042000 	.word	0xe0042000

0800bbd8 <LL_ADC_INJ_SetSequencerDiscont>:
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	431a      	orrs	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	60da      	str	r2, [r3, #12]
}
 800bbf2:	bf00      	nop
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <LL_ADC_INJ_SetQueueMode>:
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b083      	sub	sp, #12
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	431a      	orrs	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	60da      	str	r2, [r3, #12]
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <LL_ADC_EnableInternalRegulator>:
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800bc40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bc44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	609a      	str	r2, [r3, #8]
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <LL_ADC_IsInternalRegulatorEnabled>:
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc6c:	bf0c      	ite	eq
 800bc6e:	2301      	moveq	r3, #1
 800bc70:	2300      	movne	r3, #0
 800bc72:	b2db      	uxtb	r3, r3
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <LL_ADC_Enable>:
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bc94:	f043 0201 	orr.w	r2, r3, #1
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	609a      	str	r2, [r3, #8]
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <LL_ADC_IsEnabled>:
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	f003 0301 	and.w	r3, r3, #1
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	bf0c      	ite	eq
 800bcbc:	2301      	moveq	r3, #1
 800bcbe:	2300      	movne	r3, #0
 800bcc0:	b2db      	uxtb	r3, r3
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr

0800bcce <LL_ADC_StartCalibration>:
{
 800bcce:	b480      	push	{r7}
 800bcd0:	b083      	sub	sp, #12
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800bce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bcea:	4313      	orrs	r3, r2
 800bcec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	609a      	str	r2, [r3, #8]
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <LL_ADC_IsCalibrationOnGoing>:
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd14:	bf0c      	ite	eq
 800bd16:	2301      	moveq	r3, #1
 800bd18:	2300      	movne	r3, #0
 800bd1a:	b2db      	uxtb	r3, r3
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <LL_ADC_INJ_StartConversion>:
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	689b      	ldr	r3, [r3, #8]
 800bd34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bd3c:	f043 0208 	orr.w	r2, r3, #8
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	609a      	str	r2, [r3, #8]
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <LL_ADC_INJ_StopConversion>:
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bd64:	f043 0220 	orr.w	r2, r3, #32
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	609a      	str	r2, [r3, #8]
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <LL_ADC_IsActiveFlag_ADRDY>:
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	bf0c      	ite	eq
 800bd8c:	2301      	moveq	r3, #1
 800bd8e:	2300      	movne	r3, #0
 800bd90:	b2db      	uxtb	r3, r3
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <LL_ADC_ClearFlag_EOC>:
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b083      	sub	sp, #12
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2204      	movs	r2, #4
 800bdaa:	601a      	str	r2, [r3, #0]
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <LL_ADC_ClearFlag_JEOC>:
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	601a      	str	r2, [r3, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <LL_ADC_ClearFlag_JEOS>:
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b083      	sub	sp, #12
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2240      	movs	r2, #64	; 0x40
 800bdde:	601a      	str	r2, [r3, #0]
}
 800bde0:	bf00      	nop
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <LL_ADC_EnableIT_JEOS>:
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	605a      	str	r2, [r3, #4]
}
 800be00:	bf00      	nop
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <LL_ADC_DisableIT_EOC>:
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	f023 0204 	bic.w	r2, r3, #4
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	605a      	str	r2, [r3, #4]
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <LL_ADC_DisableIT_JEOC>:
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f023 0220 	bic.w	r2, r3, #32
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	605a      	str	r2, [r3, #4]
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <LL_TIM_DisableCounter>:
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f023 0201 	bic.w	r2, r3, #1
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	601a      	str	r2, [r3, #0]
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <LL_TIM_SetCounter>:
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <LL_TIM_SetRepetitionCounter>:
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <LL_TIM_CC_EnableChannel>:
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a1a      	ldr	r2, [r3, #32]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	431a      	orrs	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	621a      	str	r2, [r3, #32]
}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <LL_TIM_CC_DisableChannel>:
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
 800bece:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a1a      	ldr	r2, [r3, #32]
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	43db      	mvns	r3, r3
 800bed8:	401a      	ands	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	621a      	str	r2, [r3, #32]
}
 800bede:	bf00      	nop
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr
	...

0800beec <LL_TIM_OC_SetMode>:
{
 800beec:	b4b0      	push	{r4, r5, r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d028      	beq.n	800bf50 <LL_TIM_OC_SetMode+0x64>
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d023      	beq.n	800bf4c <LL_TIM_OC_SetMode+0x60>
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2b10      	cmp	r3, #16
 800bf08:	d01e      	beq.n	800bf48 <LL_TIM_OC_SetMode+0x5c>
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b40      	cmp	r3, #64	; 0x40
 800bf0e:	d019      	beq.n	800bf44 <LL_TIM_OC_SetMode+0x58>
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf16:	d013      	beq.n	800bf40 <LL_TIM_OC_SetMode+0x54>
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf1e:	d00d      	beq.n	800bf3c <LL_TIM_OC_SetMode+0x50>
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf26:	d007      	beq.n	800bf38 <LL_TIM_OC_SetMode+0x4c>
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf2e:	d101      	bne.n	800bf34 <LL_TIM_OC_SetMode+0x48>
 800bf30:	2307      	movs	r3, #7
 800bf32:	e00e      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf34:	2308      	movs	r3, #8
 800bf36:	e00c      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf38:	2306      	movs	r3, #6
 800bf3a:	e00a      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf3c:	2305      	movs	r3, #5
 800bf3e:	e008      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf40:	2304      	movs	r3, #4
 800bf42:	e006      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf44:	2303      	movs	r3, #3
 800bf46:	e004      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e002      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <LL_TIM_OC_SetMode+0x66>
 800bf50:	2300      	movs	r3, #0
 800bf52:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	3318      	adds	r3, #24
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4629      	mov	r1, r5
 800bf5c:	4b0c      	ldr	r3, [pc, #48]	; (800bf90 <LL_TIM_OC_SetMode+0xa4>)
 800bf5e:	5c5b      	ldrb	r3, [r3, r1]
 800bf60:	4413      	add	r3, r2
 800bf62:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800bf64:	6822      	ldr	r2, [r4, #0]
 800bf66:	4629      	mov	r1, r5
 800bf68:	4b0a      	ldr	r3, [pc, #40]	; (800bf94 <LL_TIM_OC_SetMode+0xa8>)
 800bf6a:	5c5b      	ldrb	r3, [r3, r1]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4b0a      	ldr	r3, [pc, #40]	; (800bf98 <LL_TIM_OC_SetMode+0xac>)
 800bf70:	408b      	lsls	r3, r1
 800bf72:	43db      	mvns	r3, r3
 800bf74:	401a      	ands	r2, r3
 800bf76:	4629      	mov	r1, r5
 800bf78:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <LL_TIM_OC_SetMode+0xa8>)
 800bf7a:	5c5b      	ldrb	r3, [r3, r1]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	408b      	lsls	r3, r1
 800bf82:	4313      	orrs	r3, r2
 800bf84:	6023      	str	r3, [r4, #0]
}
 800bf86:	bf00      	nop
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bcb0      	pop	{r4, r5, r7}
 800bf8e:	4770      	bx	lr
 800bf90:	0800f884 	.word	0x0800f884
 800bf94:	0800f890 	.word	0x0800f890
 800bf98:	00010073 	.word	0x00010073

0800bf9c <LL_TIM_OC_EnablePreload>:
{
 800bf9c:	b4b0      	push	{r4, r5, r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d028      	beq.n	800bffe <LL_TIM_OC_EnablePreload+0x62>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d023      	beq.n	800bffa <LL_TIM_OC_EnablePreload+0x5e>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b10      	cmp	r3, #16
 800bfb6:	d01e      	beq.n	800bff6 <LL_TIM_OC_EnablePreload+0x5a>
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2b40      	cmp	r3, #64	; 0x40
 800bfbc:	d019      	beq.n	800bff2 <LL_TIM_OC_EnablePreload+0x56>
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc4:	d013      	beq.n	800bfee <LL_TIM_OC_EnablePreload+0x52>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfcc:	d00d      	beq.n	800bfea <LL_TIM_OC_EnablePreload+0x4e>
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd4:	d007      	beq.n	800bfe6 <LL_TIM_OC_EnablePreload+0x4a>
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfdc:	d101      	bne.n	800bfe2 <LL_TIM_OC_EnablePreload+0x46>
 800bfde:	2307      	movs	r3, #7
 800bfe0:	e00e      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bfe2:	2308      	movs	r3, #8
 800bfe4:	e00c      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bfe6:	2306      	movs	r3, #6
 800bfe8:	e00a      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bfea:	2305      	movs	r3, #5
 800bfec:	e008      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bfee:	2304      	movs	r3, #4
 800bff0:	e006      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bff2:	2303      	movs	r3, #3
 800bff4:	e004      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bff6:	2302      	movs	r3, #2
 800bff8:	e002      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bffa:	2301      	movs	r3, #1
 800bffc:	e000      	b.n	800c000 <LL_TIM_OC_EnablePreload+0x64>
 800bffe:	2300      	movs	r3, #0
 800c000:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3318      	adds	r3, #24
 800c006:	461a      	mov	r2, r3
 800c008:	4629      	mov	r1, r5
 800c00a:	4b09      	ldr	r3, [pc, #36]	; (800c030 <LL_TIM_OC_EnablePreload+0x94>)
 800c00c:	5c5b      	ldrb	r3, [r3, r1]
 800c00e:	4413      	add	r3, r2
 800c010:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c012:	6822      	ldr	r2, [r4, #0]
 800c014:	4629      	mov	r1, r5
 800c016:	4b07      	ldr	r3, [pc, #28]	; (800c034 <LL_TIM_OC_EnablePreload+0x98>)
 800c018:	5c5b      	ldrb	r3, [r3, r1]
 800c01a:	4619      	mov	r1, r3
 800c01c:	2308      	movs	r3, #8
 800c01e:	408b      	lsls	r3, r1
 800c020:	4313      	orrs	r3, r2
 800c022:	6023      	str	r3, [r4, #0]
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	bcb0      	pop	{r4, r5, r7}
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	0800f884 	.word	0x0800f884
 800c034:	0800f890 	.word	0x0800f890

0800c038 <LL_TIM_OC_DisablePreload>:
{
 800c038:	b4b0      	push	{r4, r5, r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d028      	beq.n	800c09a <LL_TIM_OC_DisablePreload+0x62>
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b04      	cmp	r3, #4
 800c04c:	d023      	beq.n	800c096 <LL_TIM_OC_DisablePreload+0x5e>
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b10      	cmp	r3, #16
 800c052:	d01e      	beq.n	800c092 <LL_TIM_OC_DisablePreload+0x5a>
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	2b40      	cmp	r3, #64	; 0x40
 800c058:	d019      	beq.n	800c08e <LL_TIM_OC_DisablePreload+0x56>
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c060:	d013      	beq.n	800c08a <LL_TIM_OC_DisablePreload+0x52>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c068:	d00d      	beq.n	800c086 <LL_TIM_OC_DisablePreload+0x4e>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c070:	d007      	beq.n	800c082 <LL_TIM_OC_DisablePreload+0x4a>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c078:	d101      	bne.n	800c07e <LL_TIM_OC_DisablePreload+0x46>
 800c07a:	2307      	movs	r3, #7
 800c07c:	e00e      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c07e:	2308      	movs	r3, #8
 800c080:	e00c      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c082:	2306      	movs	r3, #6
 800c084:	e00a      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c086:	2305      	movs	r3, #5
 800c088:	e008      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c08a:	2304      	movs	r3, #4
 800c08c:	e006      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c08e:	2303      	movs	r3, #3
 800c090:	e004      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c092:	2302      	movs	r3, #2
 800c094:	e002      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c096:	2301      	movs	r3, #1
 800c098:	e000      	b.n	800c09c <LL_TIM_OC_DisablePreload+0x64>
 800c09a:	2300      	movs	r3, #0
 800c09c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	3318      	adds	r3, #24
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <LL_TIM_OC_DisablePreload+0x94>)
 800c0a8:	5c5b      	ldrb	r3, [r3, r1]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800c0ae:	6822      	ldr	r2, [r4, #0]
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <LL_TIM_OC_DisablePreload+0x98>)
 800c0b4:	5c5b      	ldrb	r3, [r3, r1]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	2308      	movs	r3, #8
 800c0ba:	408b      	lsls	r3, r1
 800c0bc:	43db      	mvns	r3, r3
 800c0be:	4013      	ands	r3, r2
 800c0c0:	6023      	str	r3, [r4, #0]
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bcb0      	pop	{r4, r5, r7}
 800c0ca:	4770      	bx	lr
 800c0cc:	0800f884 	.word	0x0800f884
 800c0d0:	0800f890 	.word	0x0800f890

0800c0d4 <LL_TIM_OC_SetCompareCH1>:
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <LL_TIM_OC_SetCompareCH2>:
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <LL_TIM_OC_SetCompareCH3>:
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <LL_TIM_OC_SetCompareCH4>:
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	641a      	str	r2, [r3, #64]	; 0x40
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <LL_TIM_SetTriggerOutput>:
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	685b      	ldr	r3, [r3, #4]
 800c152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	605a      	str	r2, [r3, #4]
}
 800c15e:	bf00      	nop
 800c160:	370c      	adds	r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr

0800c16a <LL_TIM_EnableAllOutputs>:
{
 800c16a:	b480      	push	{r7}
 800c16c:	b083      	sub	sp, #12
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c176:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800c17e:	bf00      	nop
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <LL_TIM_DisableAllOutputs>:
{
 800c18a:	b480      	push	{r7}
 800c18c:	b083      	sub	sp, #12
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c196:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	645a      	str	r2, [r3, #68]	; 0x44
}
 800c19e:	bf00      	nop
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <LL_TIM_ClearFlag_UPDATE>:
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f06f 0201 	mvn.w	r2, #1
 800c1b8:	611a      	str	r2, [r3, #16]
}
 800c1ba:	bf00      	nop
 800c1bc:	370c      	adds	r7, #12
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr

0800c1c6 <LL_TIM_IsActiveFlag_UPDATE>:
{
 800c1c6:	b480      	push	{r7}
 800c1c8:	b083      	sub	sp, #12
 800c1ca:	af00      	add	r7, sp, #0
 800c1cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d101      	bne.n	800c1de <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e000      	b.n	800c1e0 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <LL_TIM_ClearFlag_BRK>:
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1fa:	611a      	str	r2, [r3, #16]
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <LL_TIM_ClearFlag_BRK2>:
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c216:	611a      	str	r2, [r3, #16]
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <LL_TIM_IsActiveFlag_BRK2>:
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	691b      	ldr	r3, [r3, #16]
 800c230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c238:	d101      	bne.n	800c23e <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e000      	b.n	800c240 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <LL_TIM_EnableIT_UPDATE>:
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	f043 0201 	orr.w	r2, r3, #1
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	60da      	str	r2, [r3, #12]
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <LL_TIM_DisableIT_UPDATE>:
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	f023 0201 	bic.w	r2, r3, #1
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	60da      	str	r2, [r3, #12]
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <LL_TIM_EnableIT_BRK>:
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60da      	str	r2, [r3, #12]
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr

0800c2ac <LL_TIM_GenerateEvent_UPDATE>:
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	695b      	ldr	r3, [r3, #20]
 800c2b8:	f043 0201 	orr.w	r2, r3, #1
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	615a      	str	r2, [r3, #20]
}
 800c2c0:	bf00      	nop
 800c2c2:	370c      	adds	r7, #12
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b083      	sub	sp, #12
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	619a      	str	r2, [r3, #24]
}
 800c2dc:	bf00      	nop
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	683a      	ldr	r2, [r7, #0]
 800c2f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c2f8:	bf00      	nop
 800c2fa:	370c      	adds	r7, #12
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c302:	4770      	bx	lr

0800c304 <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	f003 0310 	and.w	r3, r3, #16
 800c318:	2101      	movs	r1, #1
 800c31a:	fa01 f303 	lsl.w	r3, r1, r3
 800c31e:	431a      	orrs	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	f003 0310 	and.w	r3, r3, #16
 800c344:	2101      	movs	r1, #1
 800c346:	fa01 f303 	lsl.w	r3, r1, r3
 800c34a:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	f003 0310 	and.w	r3, r3, #16
 800c352:	2101      	movs	r1, #1
 800c354:	fa01 f303 	lsl.w	r3, r1, r3
 800c358:	429a      	cmp	r2, r3
 800c35a:	bf0c      	ite	eq
 800c35c:	2301      	moveq	r3, #1
 800c35e:	2300      	movne	r3, #0
 800c360:	b2db      	uxtb	r3, r3
}
 800c362:	4618      	mov	r0, r3
 800c364:	370c      	adds	r7, #12
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <LL_DAC_TrigSWConversion>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_TrigSWConversion(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800c36e:	b480      	push	{r7}
 800c370:	b083      	sub	sp, #12
 800c372:	af00      	add	r7, sp, #0
 800c374:	6078      	str	r0, [r7, #4]
 800c376:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	f003 0303 	and.w	r3, r3, #3
 800c382:	431a      	orrs	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	605a      	str	r2, [r3, #4]
          (DAC_Channel & DAC_SWTR_CHX_MASK));
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <LL_DAC_ConvertData12LeftAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 800c394:	b490      	push	{r4, r7}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3308      	adds	r3, #8
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800c3ac:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 800c3b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	fa92 f2a2 	rbit	r2, r2
 800c3b8:	613a      	str	r2, [r7, #16]
  return result;
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	fab2 f282 	clz	r2, r2
 800c3c0:	b2d2      	uxtb	r2, r2
 800c3c2:	40d3      	lsrs	r3, r2
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	440b      	add	r3, r1
 800c3c8:	461c      	mov	r4, r3
  
  MODIFY_REG(*preg,
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	6023      	str	r3, [r4, #0]
             DAC_DHR12L1_DACC1DHR,
             Data);
}
 800c3da:	bf00      	nop
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bc90      	pop	{r4, r7}
 800c3e2:	4770      	bx	lr

0800c3e4 <LL_COMP_GetInputMinus>:
  *         (1) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302x6/8, STM32F303x6/8, STM32F328xx, STM32F334xx.\n
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <LL_COMP_Enable>:
  * @rmtoll CSR      COMPxEN        LL_COMP_Enable
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f043 0201 	orr.w	r2, r3, #1
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <LL_COMP_Lock>:
  * @rmtoll CSR      COMPxLOCK      LL_COMP_Lock
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]
}
 800c434:	bf00      	nop
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <R3_1_Init>:
  *         in three shunt topology using STM32F30X and shared ADC
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_Init( PWMC_R3_1_Handle_t * pHandle )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b088      	sub	sp, #32
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c44c:	689b      	ldr	r3, [r3, #8]
 800c44e:	61fb      	str	r3, [r7, #28]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	61bb      	str	r3, [r7, #24]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	617b      	str	r3, [r7, #20]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	613b      	str	r3, [r7, #16]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	60bb      	str	r3, [r7, #8]

  /*Check that _Super is the first member of the structure PWMC_R3_1_Handle_t */
  if ( ( uint32_t )pHandle == ( uint32_t )&pHandle->_Super )
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	461a      	mov	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	429a      	cmp	r2, r3
 800c480:	f040 8095 	bne.w	800c5ae <R3_1_Init+0x16e>
  {
    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOC( ADCx );
 800c484:	68b8      	ldr	r0, [r7, #8]
 800c486:	f7ff fcc1 	bl	800be0c <LL_ADC_DisableIT_EOC>
    LL_ADC_ClearFlag_EOC( ADCx );
 800c48a:	68b8      	ldr	r0, [r7, #8]
 800c48c:	f7ff fc87 	bl	800bd9e <LL_ADC_ClearFlag_EOC>
    LL_ADC_DisableIT_JEOC( ADCx );
 800c490:	68b8      	ldr	r0, [r7, #8]
 800c492:	f7ff fccb 	bl	800be2c <LL_ADC_DisableIT_JEOC>
    LL_ADC_ClearFlag_JEOC( ADCx );
 800c496:	68b8      	ldr	r0, [r7, #8]
 800c498:	f7ff fc8e 	bl	800bdb8 <LL_ADC_ClearFlag_JEOC>

    if ( TIMx == TIM1 )
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	4a46      	ldr	r2, [pc, #280]	; (800c5b8 <R3_1_Init+0x178>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d103      	bne.n	800c4ac <R3_1_Init+0x6c>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	f7ff fb85 	bl	800bbb4 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800c4aa:	e002      	b.n	800c4b2 <R3_1_Init+0x72>
    }
#ifdef TIM8    
    else
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800c4ac:	2002      	movs	r0, #2
 800c4ae:	f7ff fb81 	bl	800bbb4 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
#endif
    /* Over current protection phase A */
    if ( COMP_OCPAx != NULL )
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d028      	beq.n	800c50a <R3_1_Init+0xca>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4bc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d01c      	beq.n	800c4fe <R3_1_Init+0xbe>
      {
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800c4c4:	69f8      	ldr	r0, [r7, #28]
 800c4c6:	f7ff ff8d 	bl	800c3e4 <LL_COMP_GetInputMinus>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b40      	cmp	r3, #64	; 0x40
 800c4ce:	d108      	bne.n	800c4e2 <R3_1_Init+0xa2>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4838      	ldr	r0, [pc, #224]	; (800c5bc <R3_1_Init+0x17c>)
 800c4dc:	f000 fe4c 	bl	800d178 <R3_1_SetAOReferenceVoltage>
 800c4e0:	e00d      	b.n	800c4fe <R3_1_Init+0xbe>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800c4e2:	69f8      	ldr	r0, [r7, #28]
 800c4e4:	f7ff ff7e 	bl	800c3e4 <LL_COMP_GetInputMinus>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b50      	cmp	r3, #80	; 0x50
 800c4ec:	d107      	bne.n	800c4fe <R3_1_Init+0xbe>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4f2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4831      	ldr	r0, [pc, #196]	; (800c5c0 <R3_1_Init+0x180>)
 800c4fa:	f000 fe3d 	bl	800d178 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OCPAx );
 800c4fe:	69f8      	ldr	r0, [r7, #28]
 800c500:	f7ff ff7e 	bl	800c400 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPAx );
 800c504:	69f8      	ldr	r0, [r7, #28]
 800c506:	f7ff ff8b 	bl	800c420 <LL_COMP_Lock>
    }

    /* Over current protection phase B */
    if ( COMP_OCPBx != NULL )
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d005      	beq.n	800c51c <R3_1_Init+0xdc>
    {
      LL_COMP_Enable ( COMP_OCPBx );
 800c510:	69b8      	ldr	r0, [r7, #24]
 800c512:	f7ff ff75 	bl	800c400 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPBx );
 800c516:	69b8      	ldr	r0, [r7, #24]
 800c518:	f7ff ff82 	bl	800c420 <LL_COMP_Lock>
    }

    /* Over current protection phase C */
    if ( COMP_OCPCx != NULL )
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d005      	beq.n	800c52e <R3_1_Init+0xee>
    {
      LL_COMP_Enable ( COMP_OCPCx );
 800c522:	6978      	ldr	r0, [r7, #20]
 800c524:	f7ff ff6c 	bl	800c400 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPCx );
 800c528:	6978      	ldr	r0, [r7, #20]
 800c52a:	f7ff ff79 	bl	800c420 <LL_COMP_Lock>
    }

    /* Over voltage protection */
    if ( COMP_OVPx != NULL )
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d028      	beq.n	800c586 <R3_1_Init+0x146>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c538:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d01c      	beq.n	800c57a <R3_1_Init+0x13a>
      {
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 800c540:	6938      	ldr	r0, [r7, #16]
 800c542:	f7ff ff4f 	bl	800c3e4 <LL_COMP_GetInputMinus>
 800c546:	4603      	mov	r3, r0
 800c548:	2b40      	cmp	r3, #64	; 0x40
 800c54a:	d108      	bne.n	800c55e <R3_1_Init+0x11e>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_1, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c550:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c554:	4619      	mov	r1, r3
 800c556:	4819      	ldr	r0, [pc, #100]	; (800c5bc <R3_1_Init+0x17c>)
 800c558:	f000 fe0e 	bl	800d178 <R3_1_SetAOReferenceVoltage>
 800c55c:	e00d      	b.n	800c57a <R3_1_Init+0x13a>
        }
#if defined(DAC_CHANNEL2_SUPPORT)
        else if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH2 )
 800c55e:	6938      	ldr	r0, [r7, #16]
 800c560:	f7ff ff40 	bl	800c3e4 <LL_COMP_GetInputMinus>
 800c564:	4603      	mov	r3, r0
 800c566:	2b50      	cmp	r3, #80	; 0x50
 800c568:	d107      	bne.n	800c57a <R3_1_Init+0x13a>
        {
          R3_1_SetAOReferenceVoltage( LL_DAC_CHANNEL_2, ( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c56e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800c572:	4619      	mov	r1, r3
 800c574:	4812      	ldr	r0, [pc, #72]	; (800c5c0 <R3_1_Init+0x180>)
 800c576:	f000 fdff 	bl	800d178 <R3_1_SetAOReferenceVoltage>
        else
        {
        }
      }
      /* Output */
      LL_COMP_Enable ( COMP_OVPx );
 800c57a:	6938      	ldr	r0, [r7, #16]
 800c57c:	f7ff ff40 	bl	800c400 <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OVPx );
 800c580:	6938      	ldr	r0, [r7, #16]
 800c582:	f7ff ff4d 	bl	800c420 <LL_COMP_Lock>
    }
    
    if (LL_ADC_IsEnabled (ADCx) == 0)
 800c586:	68b8      	ldr	r0, [r7, #8]
 800c588:	f7ff fb8e 	bl	800bca8 <LL_ADC_IsEnabled>
 800c58c:	4603      	mov	r3, r0
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d108      	bne.n	800c5a4 <R3_1_Init+0x164>
    {
      R3_1_ADCxInit (ADCx);
 800c592:	68b8      	ldr	r0, [r7, #8]
 800c594:	f000 f816 	bl	800c5c4 <R3_1_ADCxInit>
      /* Only the Interrupt of the first ADC is enabled. 
       * As Both ADCs are fired by HW at the same moment 
       * It is safe to consider that both conversion are ready at the same time*/
      LL_ADC_ClearFlag_JEOS( ADCx );
 800c598:	68b8      	ldr	r0, [r7, #8]
 800c59a:	f7ff fc1a 	bl	800bdd2 <LL_ADC_ClearFlag_JEOS>
      LL_ADC_EnableIT_JEOS( ADCx );
 800c59e:	68b8      	ldr	r0, [r7, #8]
 800c5a0:	f7ff fc24 	bl	800bdec <LL_ADC_EnableIT_JEOS>
    }
    else 
    {
      /* Nothing to do ADCx_1 already configured */
    }
    R3_1_TIMxInit( TIMx, &pHandle->_Super );
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 f84f 	bl	800c64c <R3_1_TIMxInit>
  }
}
 800c5ae:	bf00      	nop
 800c5b0:	3720      	adds	r7, #32
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
 800c5b6:	bf00      	nop
 800c5b8:	40012c00 	.word	0x40012c00
 800c5bc:	02100001 	.word	0x02100001
 800c5c0:	15430012 	.word	0x15430012

0800c5c4 <R3_1_ADCxInit>:

static void R3_1_ADCxInit( ADC_TypeDef * ADCx )
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
     
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff fb43 	bl	800bc58 <LL_ADC_IsInternalRegulatorEnabled>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d111      	bne.n	800c5fc <R3_1_ADCxInit+0x38>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADCx);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff fb23 	bl	800bc24 <LL_ADC_EnableInternalRegulator>
  
    /* Wait for Regulator Startup time */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800c5de:	4b19      	ldr	r3, [pc, #100]	; (800c644 <R3_1_ADCxInit+0x80>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	099b      	lsrs	r3, r3, #6
 800c5e4:	4a18      	ldr	r2, [pc, #96]	; (800c648 <R3_1_ADCxInit+0x84>)
 800c5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ea:	099b      	lsrs	r3, r3, #6
 800c5ec:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800c5ee:	e002      	b.n	800c5f6 <R3_1_ADCxInit+0x32>
    {
      wait_loop_index--;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1f9      	bne.n	800c5f0 <R3_1_ADCxInit+0x2c>
    }
  }
  
  LL_ADC_StartCalibration( ADCx, LL_ADC_SINGLE_ENDED );
 800c5fc:	217f      	movs	r1, #127	; 0x7f
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff fb65 	bl	800bcce <LL_ADC_StartCalibration>
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 800c604:	bf00      	nop
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fb7a 	bl	800bd00 <LL_ADC_IsCalibrationOnGoing>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d0f9      	beq.n	800c606 <R3_1_ADCxInit+0x42>
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800c612:	e002      	b.n	800c61a <R3_1_ADCxInit+0x56>
  { 
    LL_ADC_Enable(  ADCx );
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff fb33 	bl	800bc80 <LL_ADC_Enable>
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff fbac 	bl	800bd78 <LL_ADC_IsActiveFlag_ADRDY>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0f6      	beq.n	800c614 <R3_1_ADCxInit+0x50>
  }
  /* Clear JSQR from CubeMX setting to avoid not wanting conversion*/
  LL_ADC_INJ_StartConversion( ADCx ); 
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff fb7e 	bl	800bd28 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StopConversion(ADCx);
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff fb8f 	bl	800bd50 <LL_ADC_INJ_StopConversion>
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );
 800c632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fae1 	bl	800bbfe <LL_ADC_INJ_SetQueueMode>
 }
 800c63c:	bf00      	nop
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	200006d0 	.word	0x200006d0
 800c648:	053e2d63 	.word	0x053e2d63

0800c64c <R3_1_TIMxInit>:
  * @param TIMx: Timer to be initialized
  * @param pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_TIMxInit( TIM_TypeDef * TIMx, PWMC_Handle_t * pHdl )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint32_t Brk2Timeout = 1000;
 800c65a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c65e:	60fb      	str	r3, [r7, #12]

  /* disable main TIM counter to ensure
   * a synchronous start by TIM2 trigger */
  LL_TIM_DisableCounter( TIMx );
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff fbf3 	bl	800be4c <LL_TIM_DisableCounter>
  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800c666:	2100      	movs	r1, #0
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7ff fd6b 	bl	800c144 <LL_TIM_SetTriggerOutput>

  /* Enables the TIMx Preload on CC1 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 800c66e:	2101      	movs	r1, #1
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7ff fc93 	bl	800bf9c <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC2 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 800c676:	2110      	movs	r1, #16
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff fc8f 	bl	800bf9c <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC3 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 800c67e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7ff fc8a 	bl	800bf9c <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC4 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH4 );
 800c688:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff fc85 	bl	800bf9c <LL_TIM_OC_EnablePreload>
  /* Prepare timer for synchronization */
  LL_TIM_GenerateEvent_UPDATE( TIMx );
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff fe0a 	bl	800c2ac <LL_TIM_GenerateEvent_UPDATE>
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c69c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d11f      	bne.n	800c6e4 <R3_1_TIMxInit+0x98>
  {
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6a8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d110      	bne.n	800c6d2 <R3_1_TIMxInit+0x86>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6b4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d10a      	bne.n	800c6d2 <R3_1_TIMxInit+0x86>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800c6bc:	2101      	movs	r1, #1
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff fbe2 	bl	800be88 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7ff fdf1 	bl	800c2ac <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800c6ca:	2103      	movs	r1, #3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7ff fbdb 	bl	800be88 <LL_TIM_SetRepetitionCounter>
      }
    }
    LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff fbc5 	bl	800be6c <LL_TIM_SetCounter>
 800c6e2:	e024      	b.n	800c72e <R3_1_TIMxInit+0xe2>
  }
  else /* bFreqRatio equal to 1 or 3 */
  {
    if ( pHandle->_Super.Motor == M1 )
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d11f      	bne.n	800c72e <R3_1_TIMxInit+0xe2>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d108      	bne.n	800c70c <R3_1_TIMxInit+0xc0>
      {
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c700:	3b01      	subs	r3, #1
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff fbb1 	bl	800be6c <LL_TIM_SetCounter>
 800c70a:	e010      	b.n	800c72e <R3_1_TIMxInit+0xe2>
      }
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c710:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800c714:	2b03      	cmp	r3, #3
 800c716:	d10a      	bne.n	800c72e <R3_1_TIMxInit+0xe2>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800c718:	2101      	movs	r1, #1
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7ff fbb4 	bl	800be88 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff fdc3 	bl	800c2ac <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800c726:	2103      	movs	r1, #3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff fbad 	bl	800be88 <LL_TIM_SetRepetitionCounter>
    }
    else
    {
    }
  }
  LL_TIM_ClearFlag_BRK( TIMx );
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fd5c 	bl	800c1ec <LL_TIM_ClearFlag_BRK>
  
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c738:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00f      	beq.n	800c760 <R3_1_TIMxInit+0x114>
  {
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800c740:	e005      	b.n	800c74e <R3_1_TIMxInit+0x102>
    {
      LL_TIM_ClearFlag_BRK2( TIMx );
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff fd60 	bl	800c208 <LL_TIM_ClearFlag_BRK2>
      Brk2Timeout--;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	60fb      	str	r3, [r7, #12]
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7ff fd68 	bl	800c224 <LL_TIM_IsActiveFlag_BRK2>
 800c754:	4603      	mov	r3, r0
 800c756:	2b01      	cmp	r3, #1
 800c758:	d102      	bne.n	800c760 <R3_1_TIMxInit+0x114>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d1f0      	bne.n	800c742 <R3_1_TIMxInit+0xf6>
    }   
  }
  LL_TIM_EnableIT_BRK( TIMx );
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff fd93 	bl	800c28c <LL_TIM_EnableIT_BRK>

  /* Enable PWM channel */
  LL_TIM_CC_EnableChannel( TIMx, TIMxCCER_MASK_CH123 );
 800c766:	f240 5155 	movw	r1, #1365	; 0x555
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7ff fb9a 	bl	800bea4 <LL_TIM_CC_EnableChannel>
}
 800c770:	bf00      	nop
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <R3_1_CurrentReadingPolarization>:
  *         motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void R3_1_CurrentReadingPolarization( PWMC_Handle_t * pHdl )
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b086      	sub	sp, #24
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]

  pHandle->PhaseAOffset = 0u;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2200      	movs	r2, #0
 800c798:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset = 0u;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2200      	movs	r2, #0
 800c79e:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset = 0u;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	665a      	str	r2, [r3, #100]	; 0x64

  pHandle->PolarizationCounter = 0u;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  /* It forces inactive level on TIMx CHy and CHyN */
  LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800c7ae:	f240 5155 	movw	r1, #1365	; 0x555
 800c7b2:	6938      	ldr	r0, [r7, #16]
 800c7b4:	f7ff fb87 	bl	800bec6 <LL_TIM_CC_DisableChannel>

  /* Offset calibration for all phases */
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	4a53      	ldr	r2, [pc, #332]	; (800c908 <R3_1_CurrentReadingPolarization+0x190>)
 800c7bc:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	4a52      	ldr	r2, [pc, #328]	; (800c90c <R3_1_CurrentReadingPolarization+0x194>)
 800c7c2:	619a      	str	r2, [r3, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2240      	movs	r2, #64	; 0x40
 800c7c8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
     
  /* We want to polarize calibration Phase A and Phase B, so we select SECTOR_5 */
  pHandle->PolarizationSector=SECTOR_5;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	2204      	movs	r2, #4
 800c7d0:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_5*/
  pHandle->_Super.Sector = SECTOR_5;   
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2204      	movs	r2, #4
 800c7d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 fb2d 	bl	800ce3e <R3_1_SwitchOnPWM>
  
  /* IF CH4 is enabled, it means that JSQR is now configured to sample polarization current*/
  //while ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 0u )
  //{
  //}
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800c7e4:	bf00      	nop
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c7ee:	2b70      	cmp	r3, #112	; 0x70
 800c7f0:	d1f9      	bne.n	800c7e6 <R3_1_CurrentReadingPolarization+0x6e>
  {
  }
  /* It is the right time to start the ADC without unwanted conversion */
  /* Start ADC to wait for external trigger. This is series dependant*/
  LL_ADC_INJ_StartConversion( ADCx );
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7ff fa98 	bl	800bd28 <LL_ADC_INJ_StartConversion>
  
  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800c802:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	336e      	adds	r3, #110	; 0x6e
 800c80a:	6938      	ldr	r0, [r7, #16]
 800c80c:	f7fe ff1d 	bl	800b64a <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );

  R3_1_SwitchOffPWM( &pHandle->_Super );
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	4618      	mov	r0, r3
 800c814:	f000 fbb4 	bl	800cf80 <R3_1_SwitchOffPWM>
  
  /* Offset calibration for C phase */
  pHandle->PolarizationCounter = 0u;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	4a3b      	ldr	r2, [pc, #236]	; (800c910 <R3_1_CurrentReadingPolarization+0x198>)
 800c824:	605a      	str	r2, [r3, #4]
  /* We want to polarize Phase C, so we select SECTOR_1 */
  pHandle->PolarizationSector=SECTOR_1;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  /* Required to force first polarization conversion on SECTOR_1*/
  pHandle->_Super.Sector = SECTOR_1; 
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	4618      	mov	r0, r3
 800c83a:	f000 fb00 	bl	800ce3e <R3_1_SwitchOnPWM>

  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800c848:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	336e      	adds	r3, #110	; 0x6e
 800c850:	6938      	ldr	r0, [r7, #16]
 800c852:	f7fe fefa 	bl	800b64a <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );
  
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 fb91 	bl	800cf80 <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c862:	091a      	lsrs	r2, r3, #4
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c86c:	091a      	lsrs	r2, r3, #4
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c876:	091a      	lsrs	r2, r3, #4
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Change back function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	4a25      	ldr	r2, [pc, #148]	; (800c914 <R3_1_CurrentReadingPolarization+0x19c>)
 800c880:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 800c882:	697b      	ldr	r3, [r7, #20]
 800c884:	4a24      	ldr	r2, [pc, #144]	; (800c918 <R3_1_CurrentReadingPolarization+0x1a0>)
 800c886:	619a      	str	r2, [r3, #24]

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800c888:	2101      	movs	r1, #1
 800c88a:	6938      	ldr	r0, [r7, #16]
 800c88c:	f7ff fbd4 	bl	800c038 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800c890:	2110      	movs	r1, #16
 800c892:	6938      	ldr	r0, [r7, #16]
 800c894:	f7ff fbd0 	bl	800c038 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800c898:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c89c:	6938      	ldr	r0, [r7, #16]
 800c89e:	f7ff fbcb 	bl	800c038 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6938      	ldr	r0, [r7, #16]
 800c8ac:	f7ff fc12 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx, pHandle->Half_PWMPeriod);
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8b6:	4619      	mov	r1, r3
 800c8b8:	6938      	ldr	r0, [r7, #16]
 800c8ba:	f7ff fc19 	bl	800c0f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx, pHandle->Half_PWMPeriod);
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6938      	ldr	r0, [r7, #16]
 800c8c8:	f7ff fc20 	bl	800c10c <LL_TIM_OC_SetCompareCH3>
  /* Enable TIMx preload */
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	6938      	ldr	r0, [r7, #16]
 800c8d0:	f7ff fb64 	bl	800bf9c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800c8d4:	2110      	movs	r1, #16
 800c8d6:	6938      	ldr	r0, [r7, #16]
 800c8d8:	f7ff fb60 	bl	800bf9c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800c8dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c8e0:	6938      	ldr	r0, [r7, #16]
 800c8e2:	f7ff fb5b 	bl	800bf9c <LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800c8e6:	f240 5155 	movw	r1, #1365	; 0x555
 800c8ea:	6938      	ldr	r0, [r7, #16]
 800c8ec:	f7ff fada 	bl	800bea4 <LL_TIM_CC_EnableChannel>
  
  /* At the end of calibration, all phases are at 50% we will sample A&B */
  pHandle->_Super.Sector=SECTOR_5;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	2204      	movs	r2, #4
 800c8f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  pHandle->BrakeActionLock = false;
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

}
 800c900:	bf00      	nop
 800c902:	3718      	adds	r7, #24
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}
 800c908:	0800cc95 	.word	0x0800cc95
 800c90c:	0800cb3d 	.word	0x0800cb3d
 800c910:	0800cd25 	.word	0x0800cd25
 800c914:	0800c91d 	.word	0x0800c91d
 800c918:	0800cb73 	.word	0x0800cb73

0800c91c <R3_1_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	61fb      	str	r3, [r7, #28]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	61bb      	str	r3, [r7, #24]
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800c932:	69fb      	ldr	r3, [r7, #28]
 800c934:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c938:	75fb      	strb	r3, [r7, #23]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
 800c940:	3308      	adds	r3, #8
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	613b      	str	r3, [r7, #16]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800c950:	7dfb      	ldrb	r3, [r7, #23]
 800c952:	330e      	adds	r3, #14
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800c95e:	2100      	movs	r1, #0
 800c960:	69b8      	ldr	r0, [r7, #24]
 800c962:	f7ff fbef 	bl	800c144 <LL_TIM_SetTriggerOutput>
  
  switch ( Sector )
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b05      	cmp	r3, #5
 800c96a:	f200 80c6 	bhi.w	800cafa <R3_1_GetPhaseCurrents+0x1de>
 800c96e:	a201      	add	r2, pc, #4	; (adr r2, 800c974 <R3_1_GetPhaseCurrents+0x58>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800c9ff 	.word	0x0800c9ff
 800c978:	0800ca7d 	.word	0x0800ca7d
 800c97c:	0800ca7d 	.word	0x0800ca7d
 800c980:	0800c98d 	.word	0x0800c98d
 800c984:	0800c98d 	.word	0x0800c98d
 800c988:	0800c9ff 	.word	0x0800c9ff
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c990:	461a      	mov	r2, r3
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800c99e:	dc04      	bgt.n	800c9aa <R3_1_GetPhaseCurrents+0x8e>
      {
        Iab->a = -INT16_MAX;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	f248 0201 	movw	r2, #32769	; 0x8001
 800c9a6:	801a      	strh	r2, [r3, #0]
 800c9a8:	e00c      	b.n	800c9c4 <R3_1_GetPhaseCurrents+0xa8>
      }
      else  if ( Aux > INT16_MAX )
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9b0:	db04      	blt.n	800c9bc <R3_1_GetPhaseCurrents+0xa0>
      {
        Iab->a = INT16_MAX;
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c9b8:	801a      	strh	r2, [r3, #0]
 800c9ba:	e003      	b.n	800c9c4 <R3_1_GetPhaseCurrents+0xa8>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	b21a      	sxth	r2, r3
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800c9d6:	dc04      	bgt.n	800c9e2 <R3_1_GetPhaseCurrents+0xc6>
      {
        Iab->b = -INT16_MAX;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	f248 0201 	movw	r2, #32769	; 0x8001
 800c9de:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800c9e0:	e08c      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux > INT16_MAX )
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9e8:	db04      	blt.n	800c9f4 <R3_1_GetPhaseCurrents+0xd8>
        Iab->b = INT16_MAX;
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c9f0:	805a      	strh	r2, [r3, #2]
      break;
 800c9f2:	e083      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	b21a      	sxth	r2, r3
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	805a      	strh	r2, [r3, #2]
      break;
 800c9fc:	e07e      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_6:
    case SECTOR_1:
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca02:	461a      	mov	r2, r3
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ca10:	dc04      	bgt.n	800ca1c <R3_1_GetPhaseCurrents+0x100>
      {
        Iab->b = -INT16_MAX;
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	f248 0201 	movw	r2, #32769	; 0x8001
 800ca18:	805a      	strh	r2, [r3, #2]
 800ca1a:	e00c      	b.n	800ca36 <R3_1_GetPhaseCurrents+0x11a>
      }
      else  if ( Aux > INT16_MAX )
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca22:	db04      	blt.n	800ca2e <R3_1_GetPhaseCurrents+0x112>
      {
        Iab->b = INT16_MAX;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca2a:	805a      	strh	r2, [r3, #2]
 800ca2c:	e003      	b.n	800ca36 <R3_1_GetPhaseCurrents+0x11a>
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	b21a      	sxth	r2, r3
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	805a      	strh	r2, [r3, #2]
      }

      /* Ia = -Ic -Ib */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	69fa      	ldr	r2, [r7, #28]
 800ca3a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800ca3c:	1a9b      	subs	r3, r3, r2
 800ca3e:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca46:	461a      	mov	r2, r3
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	1a9b      	subs	r3, r3, r2
 800ca4c:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux > INT16_MAX )
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca54:	db04      	blt.n	800ca60 <R3_1_GetPhaseCurrents+0x144>
      {
        Iab->a = INT16_MAX;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca5c:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        Iab->a = ( int16_t )Aux;
      }
      break;
 800ca5e:	e04d      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ca66:	dc04      	bgt.n	800ca72 <R3_1_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	f248 0201 	movw	r2, #32769	; 0x8001
 800ca6e:	801a      	strh	r2, [r3, #0]
      break;
 800ca70:	e044      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>
        Iab->a = ( int16_t )Aux;
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	b21a      	sxth	r2, r3
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	801a      	strh	r2, [r3, #0]
      break;
 800ca7a:	e03f      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca80:	461a      	mov	r2, r3
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ca8e:	dc04      	bgt.n	800ca9a <R3_1_GetPhaseCurrents+0x17e>
      {
        Iab->a = -INT16_MAX;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	f248 0201 	movw	r2, #32769	; 0x8001
 800ca96:	801a      	strh	r2, [r3, #0]
 800ca98:	e00c      	b.n	800cab4 <R3_1_GetPhaseCurrents+0x198>
      }
      else  if ( Aux > INT16_MAX )
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caa0:	db04      	blt.n	800caac <R3_1_GetPhaseCurrents+0x190>
      {
        Iab->a = INT16_MAX;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800caa8:	801a      	strh	r2, [r3, #0]
 800caaa:	e003      	b.n	800cab4 <R3_1_GetPhaseCurrents+0x198>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	b21a      	sxth	r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	69fa      	ldr	r2, [r7, #28]
 800cab8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800caba:	1a9b      	subs	r3, r3, r2
 800cabc:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac4:	461a      	mov	r2, r3
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	1a9b      	subs	r3, r3, r2
 800caca:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cad2:	db04      	blt.n	800cade <R3_1_GetPhaseCurrents+0x1c2>
      {
        Iab->b = INT16_MAX;
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cada:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800cadc:	e00e      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800cae4:	dc04      	bgt.n	800caf0 <R3_1_GetPhaseCurrents+0x1d4>
        Iab->b = -INT16_MAX;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	f248 0201 	movw	r2, #32769	; 0x8001
 800caec:	805a      	strh	r2, [r3, #2]
      break;
 800caee:	e005      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	b21a      	sxth	r2, r3
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	805a      	strh	r2, [r3, #2]
      break;
 800caf8:	e000      	b.n	800cafc <R3_1_GetPhaseCurrents+0x1e0>

    default:
      break;
 800cafa:	bf00      	nop
  }

  pHandle->_Super.Ia = Iab->a;
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb1a:	b29b      	uxth	r3, r3
 800cb1c:	425b      	negs	r3, r3
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	b21a      	sxth	r2, r3
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800cb34:	bf00      	nop
 800cb36:	3720      	adds	r7, #32
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f893 206f 	ldrb.w	r2, [r3, #111]	; 0x6f
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	4619      	mov	r1, r3
 800cb62:	4610      	mov	r0, r2
 800cb64:	f000 f863 	bl	800cc2e <R3_1_WriteTIMRegisters>
 800cb68:	4603      	mov	r3, r0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <R3_1_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle Pointer on the target component instance
  * @retval none
  */
uint16_t R3_1_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b086      	sub	sp, #24
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	613b      	str	r3, [r7, #16]
#endif /* __ICCARM__ */
  uint16_t SamplingPoint;
  uint16_t DeltaDuty;

  /* Verify that sampling is possible in the middle of PWM by checking the smallest duty cycle */
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d909      	bls.n	800cbac <R3_1_SetADCSampPointSectX+0x3a>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 4 or 5  */
    pHandle->_Super.Sector = SECTOR_5;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	2204      	movs	r2, #4
 800cb9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* set sampling  point trigger in the middle of PWM period */
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cba6:	3b01      	subs	r3, #1
 800cba8:	82fb      	strh	r3, [r7, #22]
 800cbaa:	e035      	b.n	800cc18 <R3_1_SetADCSampPointSectX+0xa6>
    /* ADC Injected sequence configuration. The stator phase with minimum value of complementary
        duty cycle is set as first. In every sector there is always one phase with maximum complementary duty,
        one with minimum complementary duty and one with variable complementary duty. In this case, phases
        with variable complementary duty and with maximum duty are converted and the first will be always
        the phase with variable complementary duty cycle */
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800cbb8:	89fa      	ldrh	r2, [r7, #14]
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cbc4:	1acb      	subs	r3, r1, r3
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	005b      	lsls	r3, r3, #1
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d908      	bls.n	800cbe0 <R3_1_SetADCSampPointSectX+0x6e>
    {
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbd6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	82fb      	strh	r3, [r7, #22]
 800cbde:	e01b      	b.n	800cc18 <R3_1_SetADCSampPointSectX+0xa6>
    }
    else
    {
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbe8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800cbec:	4413      	add	r3, r2
 800cbee:	82fb      	strh	r3, [r7, #22]

      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cbf6:	8afa      	ldrh	r2, [r7, #22]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d30d      	bcc.n	800cc18 <R3_1_SetADCSampPointSectX+0xa6>
      {
         /* ADC trigger edge must be changed from positive to negative */
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	2280      	movs	r2, #128	; 0x80
 800cc00:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc0a:	005b      	lsls	r3, r3, #1
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	8afb      	ldrh	r3, [r7, #22]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	3b01      	subs	r3, #1
 800cc16:	82fb      	strh	r3, [r7, #22]
      }
    }
  }
  return R3_1_WriteTIMRegisters( &pHandle->_Super, SamplingPoint );
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	8afa      	ldrh	r2, [r7, #22]
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 f805 	bl	800cc2e <R3_1_WriteTIMRegisters>
 800cc24:	4603      	mov	r3, r0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}

0800cc2e <R3_1_WriteTIMRegisters>:
  *         motor
  * @param  pHandle handler of the current instance of the PWM component
  * @retval none
  */
__STATIC_INLINE uint16_t R3_1_WriteTIMRegisters( PWMC_Handle_t * pHdl, uint16_t SamplingPoint )
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b086      	sub	sp, #24
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	460b      	mov	r3, r1
 800cc38:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	60fb      	str	r3, [r7, #12]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f7ff fa41 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800cc56:	4619      	mov	r1, r3
 800cc58:	68f8      	ldr	r0, [r7, #12]
 800cc5a:	f7ff fa49 	bl	800c0f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc62:	4619      	mov	r1, r3
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7ff fa51 	bl	800c10c <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );
 800cc6a:	887b      	ldrh	r3, [r7, #2]
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	f7ff fa5a 	bl	800c128 <LL_TIM_OC_SetCompareCH4>

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <R3_1_WriteTIMRegisters+0x58>
  {
    Aux = MC_FOC_DURATION;
 800cc80:	2301      	movs	r3, #1
 800cc82:	82fb      	strh	r3, [r7, #22]
 800cc84:	e001      	b.n	800cc8a <R3_1_WriteTIMRegisters+0x5c>
  }
  else
  {
    Aux = MC_NO_ERROR;
 800cc86:	2300      	movs	r3, #0
 800cc88:	82fb      	strh	r3, [r7, #22]
  }
  return Aux;
 800cc8a:	8afb      	ldrh	r3, [r7, #22]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	60fb      	str	r3, [r7, #12]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800ccca:	330e      	adds	r3, #14
 800cccc:	009b      	lsls	r3, r3, #2
 800ccce:	4413      	add	r3, r2
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	60bb      	str	r3, [r7, #8]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800ccd6:	2100      	movs	r1, #0
 800ccd8:	6938      	ldr	r0, [r7, #16]
 800ccda:	f7ff fa33 	bl	800c144 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cce4:	2b0f      	cmp	r3, #15
 800cce6:	d813      	bhi.n	800cd10 <R3_1_HFCurrentsPolarizationAB+0x7c>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	441a      	add	r2, r3
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	65da      	str	r2, [r3, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	441a      	add	r2, r3
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cd06:	3301      	adds	r3, #1
 800cd08:	b2da      	uxtb	r2, r3
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2200      	movs	r2, #0
 800cd14:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	805a      	strh	r2, [r3, #2]
}
 800cd1c:	bf00      	nop
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <R3_1_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b086      	sub	sp, #24
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800cd44:	330e      	adds	r3, #14
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800cd50:	2100      	movs	r1, #0
 800cd52:	6938      	ldr	r0, [r7, #16]
 800cd54:	f7ff f9f6 	bl	800c144 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cd5e:	2b0f      	cmp	r3, #15
 800cd60:	d80d      	bhi.n	800cd7e <R3_1_HFCurrentsPolarizationC+0x5a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	441a      	add	r2, r3
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800cd74:	3301      	adds	r3, #1
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2200      	movs	r2, #0
 800cd82:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2200      	movs	r2, #0
 800cd88:	805a      	strh	r2, [r3, #2]
}
 800cd8a:	bf00      	nop
 800cd8c:	3718      	adds	r7, #24
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <R3_1_TurnOnLowSides>:
  *         called each motor start-up when using high voltage drivers
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b084      	sub	sp, #16
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7ff f9f8 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800cdba:	2100      	movs	r1, #0
 800cdbc:	68b8      	ldr	r0, [r7, #8]
 800cdbe:	f7ff f989 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	68b8      	ldr	r0, [r7, #8]
 800cdc6:	f7ff f993 	bl	800c0f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );
 800cdca:	2100      	movs	r1, #0
 800cdcc:	68b8      	ldr	r0, [r7, #8]
 800cdce:	f7ff f99d 	bl	800c10c <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800cdd2:	bf00      	nop
 800cdd4:	68b8      	ldr	r0, [r7, #8]
 800cdd6:	f7ff f9f6 	bl	800c1c6 <LL_TIM_IsActiveFlag_UPDATE>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0f9      	beq.n	800cdd4 <R3_1_TurnOnLowSides+0x42>
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800cde0:	68b8      	ldr	r0, [r7, #8]
 800cde2:	f7ff f9c2 	bl	800c16a <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdea:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d121      	bne.n	800ce36 <R3_1_TurnOnLowSides+0xa4>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdf6:	699a      	ldr	r2, [r3, #24]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdfc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800ce00:	4619      	mov	r1, r3
 800ce02:	4610      	mov	r0, r2
 800ce04:	f7ff fa62 	bl	800c2cc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce0c:	69da      	ldr	r2, [r3, #28]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce12:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800ce16:	4619      	mov	r1, r3
 800ce18:	4610      	mov	r0, r2
 800ce1a:	f7ff fa57 	bl	800c2cc <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce22:	6a1a      	ldr	r2, [r3, #32]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce28:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	4610      	mov	r0, r2
 800ce30:	f7ff fa4c 	bl	800c2cc <LL_GPIO_SetOutputPin>
  }
  return;
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop
}
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <R3_1_SwitchOnPWM>:
  *         bit
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2200      	movs	r2, #0
 800ce56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce60:	085b      	lsrs	r3, r3, #1
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	4619      	mov	r1, r3
 800ce66:	68b8      	ldr	r0, [r7, #8]
 800ce68:	f7ff f934 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce72:	085b      	lsrs	r3, r3, #1
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	4619      	mov	r1, r3
 800ce78:	68b8      	ldr	r0, [r7, #8]
 800ce7a:	f7ff f939 	bl	800c0f0 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce84:	085b      	lsrs	r3, r3, #1
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	4619      	mov	r1, r3
 800ce8a:	68b8      	ldr	r0, [r7, #8]
 800ce8c:	f7ff f93e 	bl	800c10c <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce96:	3b05      	subs	r3, #5
 800ce98:	4619      	mov	r1, r3
 800ce9a:	68b8      	ldr	r0, [r7, #8]
 800ce9c:	f7ff f944 	bl	800c128 <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800cea0:	68b8      	ldr	r0, [r7, #8]
 800cea2:	f7ff f982 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800cea6:	bf00      	nop
 800cea8:	68b8      	ldr	r0, [r7, #8]
 800ceaa:	f7ff f98c 	bl	800c1c6 <LL_TIM_IsActiveFlag_UPDATE>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d0f9      	beq.n	800cea8 <R3_1_SwitchOnPWM+0x6a>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800ceb4:	68b8      	ldr	r0, [r7, #8]
 800ceb6:	f7ff f978 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cebe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );
 800cec6:	68b8      	ldr	r0, [r7, #8]
 800cec8:	f7ff f94f 	bl	800c16a <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ced0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d149      	bne.n	800cf6c <R3_1_SwitchOnPWM+0x12e>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	6a1a      	ldr	r2, [r3, #32]
 800cedc:	f240 5355 	movw	r3, #1365	; 0x555
 800cee0:	4013      	ands	r3, r2
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d021      	beq.n	800cf2a <R3_1_SwitchOnPWM+0xec>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceea:	699a      	ldr	r2, [r3, #24]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cef0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800cef4:	4619      	mov	r1, r3
 800cef6:	4610      	mov	r0, r2
 800cef8:	f7ff f9e8 	bl	800c2cc <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf00:	69da      	ldr	r2, [r3, #28]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf06:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	f7ff f9dd 	bl	800c2cc <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf16:	6a1a      	ldr	r2, [r3, #32]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf1c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800cf20:	4619      	mov	r1, r3
 800cf22:	4610      	mov	r0, r2
 800cf24:	f7ff f9d2 	bl	800c2cc <LL_GPIO_SetOutputPin>
 800cf28:	e020      	b.n	800cf6c <R3_1_SwitchOnPWM+0x12e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf2e:	699a      	ldr	r2, [r3, #24]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf34:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800cf38:	4619      	mov	r1, r3
 800cf3a:	4610      	mov	r0, r2
 800cf3c:	f7ff f9d4 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf44:	69da      	ldr	r2, [r3, #28]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf4a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800cf4e:	4619      	mov	r1, r3
 800cf50:	4610      	mov	r0, r2
 800cf52:	f7ff f9c9 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf5a:	6a1a      	ldr	r2, [r3, #32]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf60:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800cf64:	4619      	mov	r1, r3
 800cf66:	4610      	mov	r0, r2
 800cf68:	f7ff f9be 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
    }
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800cf6c:	68b8      	ldr	r0, [r7, #8]
 800cf6e:	f7ff f91c 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800cf72:	68b8      	ldr	r0, [r7, #8]
 800cf74:	f7ff f96a 	bl	800c24c <LL_TIM_EnableIT_UPDATE>
}
 800cf78:	bf00      	nop
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <R3_1_SwitchOffPWM>:
/**
 * @brief  Disables PWM generation on the proper Timer peripheral acting on  MOE bit
 * @param pHdl handler of the current instance of the PWM component
 */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800cf94:	68b8      	ldr	r0, [r7, #8]
 800cf96:	f7ff f969 	bl	800c26c <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
 800cfa2:	68b8      	ldr	r0, [r7, #8]
 800cfa4:	f7ff f8f1 	bl	800c18a <LL_TIM_DisableAllOutputs>
  if ( pHandle->BrakeActionLock == true )
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d126      	bne.n	800d000 <R3_1_SwitchOffPWM+0x80>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfb6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800cfba:	2b02      	cmp	r3, #2
 800cfbc:	d120      	bne.n	800d000 <R3_1_SwitchOffPWM+0x80>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfc2:	699a      	ldr	r2, [r3, #24]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfc8:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7ff f98a 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfd8:	69da      	ldr	r2, [r3, #28]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfde:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	f7ff f97f 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfee:	6a1a      	ldr	r2, [r3, #32]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800cff8:	4619      	mov	r1, r3
 800cffa:	4610      	mov	r0, r2
 800cffc:	f7ff f974 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d000:	68b8      	ldr	r0, [r7, #8]
 800d002:	f7ff f8d2 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800d006:	bf00      	nop
 800d008:	68b8      	ldr	r0, [r7, #8]
 800d00a:	f7ff f8dc 	bl	800c1c6 <LL_TIM_IsActiveFlag_UPDATE>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0f9      	beq.n	800d008 <R3_1_SwitchOffPWM+0x88>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d014:	68b8      	ldr	r0, [r7, #8]
 800d016:	f7ff f8c8 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>

}
 800d01a:	bf00      	nop
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <R3_1_TIMx_UP_IRQHandler>:
  *        sampling point
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b084      	sub	sp, #16
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	60bb      	str	r3, [r7, #8]
  
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d044:	3314      	adds	r3, #20
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	4413      	add	r3, r2
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 800d052:	431a      	orrs	r2, r3
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* enable ADC trigger source */
    //LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
 800d058:	2170      	movs	r1, #112	; 0x70
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f7ff f872 	bl	800c144 <LL_TIM_SetTriggerOutput>
    
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2240      	movs	r2, #64	; 0x40
 800d064:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

  return &( pHandle->_Super.Motor );
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	3346      	adds	r3, #70	; 0x46
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <R3_1_BRK2_IRQHandler>:
  * @brief  It contains the TIMx Break2 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK2_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800d082:	f083 0301 	eor.w	r3, r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d026      	beq.n	800d0da <R3_1_BRK2_IRQHandler+0x66>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d090:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d094:	2b02      	cmp	r3, #2
 800d096:	d120      	bne.n	800d0da <R3_1_BRK2_IRQHandler+0x66>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d09c:	699a      	ldr	r2, [r3, #24]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0a2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	f7ff f91d 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0b2:	69da      	ldr	r2, [r3, #28]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0b8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d0bc:	4619      	mov	r1, r3
 800d0be:	4610      	mov	r0, r2
 800d0c0:	f7ff f912 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0c8:	6a1a      	ldr	r2, [r3, #32]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0ce:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	f7ff f907 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2201      	movs	r2, #1
 800d0de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return &( pHandle->_Super.Motor );
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3346      	adds	r3, #70	; 0x46
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <R3_1_BRK_IRQHandler>:
  * @brief  It contains the TIMx Break1 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_1_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 800d0ee:	b480      	push	{r7}
 800d0f0:	b083      	sub	sp, #12
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]

  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d108:	645a      	str	r2, [r3, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  pHandle->BrakeActionLock = true;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2201      	movs	r2, #1
 800d116:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

  return &( pHandle->_Super.Motor );
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	3346      	adds	r3, #70	; 0x46
}
 800d11e:	4618      	mov	r0, r3
 800d120:	370c      	adds	r7, #12
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr

0800d12a <R3_1_IsOverCurrentOccurred>:
  * @param  pHandle Pointer on the target component instance
  * @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_1_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 800d12a:	b480      	push	{r7}
 800d12c:	b085      	sub	sp, #20
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint16_t retVal = MC_NO_FAULTS;
 800d136:	2300      	movs	r3, #0
 800d138:	81fb      	strh	r3, [r7, #14]

  if ( pHandle->OverVoltageFlag == true )
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800d140:	2b00      	cmp	r3, #0
 800d142:	d005      	beq.n	800d150 <R3_1_IsOverCurrentOccurred+0x26>
  {
    retVal = MC_OVER_VOLT;
 800d144:	2302      	movs	r3, #2
 800d146:	81fb      	strh	r3, [r7, #14]
    pHandle->OverVoltageFlag = false;
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
  }

  if ( pHandle->OverCurrentFlag == true )
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d156:	2b00      	cmp	r3, #0
 800d158:	d007      	beq.n	800d16a <R3_1_IsOverCurrentOccurred+0x40>
  {
    retVal |= MC_BREAK_IN;
 800d15a:	89fb      	ldrh	r3, [r7, #14]
 800d15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d160:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  }

  return retVal;
 800d16a:	89fb      	ldrh	r3, [r7, #14]
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr

0800d178 <R3_1_SetAOReferenceVoltage>:
  * @param  hDACVref Value of DAC reference expressed as 16bit unsigned integer.
  *         Ex. 0 = 0V 65536 = VDD_DAC.
  * @retval none
  */
static void R3_1_SetAOReferenceVoltage( uint32_t DAC_Channel, uint16_t hDACVref )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	807b      	strh	r3, [r7, #2]
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800d184:	887b      	ldrh	r3, [r7, #2]
 800d186:	461a      	mov	r2, r3
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	481d      	ldr	r0, [pc, #116]	; (800d200 <R3_1_SetAOReferenceVoltage+0x88>)
 800d18c:	f7ff f902 	bl	800c394 <LL_DAC_ConvertData12LeftAligned>

  /* Enable DAC Channel */
  LL_DAC_TrigSWConversion ( DAC1, DAC_Channel );
 800d190:	6879      	ldr	r1, [r7, #4]
 800d192:	481b      	ldr	r0, [pc, #108]	; (800d200 <R3_1_SetAOReferenceVoltage+0x88>)
 800d194:	f7ff f8eb 	bl	800c36e <LL_DAC_TrigSWConversion>
  
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	4819      	ldr	r0, [pc, #100]	; (800d200 <R3_1_SetAOReferenceVoltage+0x88>)
 800d19c:	f7ff f8c8 	bl	800c330 <LL_DAC_IsEnabled>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d112      	bne.n	800d1cc <R3_1_SetAOReferenceVoltage+0x54>
  { /* If DAC is already enable, we wait LL_DAC_DELAY_VOLTAGE_SETTLING_US*/
    uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800d1a6:	4b17      	ldr	r3, [pc, #92]	; (800d204 <R3_1_SetAOReferenceVoltage+0x8c>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4a17      	ldr	r2, [pc, #92]	; (800d208 <R3_1_SetAOReferenceVoltage+0x90>)
 800d1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d1b0:	0cda      	lsrs	r2, r3, #19
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	005b      	lsls	r3, r3, #1
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d1bc:	e002      	b.n	800d1c4 <R3_1_SetAOReferenceVoltage+0x4c>
    {
      wait_loop_index--;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1f9      	bne.n	800d1be <R3_1_SetAOReferenceVoltage+0x46>
    while(wait_loop_index != 0UL)
    {
      wait_loop_index--;
    }    
  }
}
 800d1ca:	e014      	b.n	800d1f6 <R3_1_SetAOReferenceVoltage+0x7e>
    LL_DAC_Enable ( DAC1, DAC_Channel );
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	480c      	ldr	r0, [pc, #48]	; (800d200 <R3_1_SetAOReferenceVoltage+0x88>)
 800d1d0:	f7ff f898 	bl	800c304 <LL_DAC_Enable>
    uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800d1d4:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <R3_1_SetAOReferenceVoltage+0x8c>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a0b      	ldr	r2, [pc, #44]	; (800d208 <R3_1_SetAOReferenceVoltage+0x90>)
 800d1da:	fba2 2303 	umull	r2, r3, r2, r3
 800d1de:	0cda      	lsrs	r2, r3, #19
 800d1e0:	4613      	mov	r3, r2
 800d1e2:	011b      	lsls	r3, r3, #4
 800d1e4:	1a9b      	subs	r3, r3, r2
 800d1e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800d1e8:	e002      	b.n	800d1f0 <R3_1_SetAOReferenceVoltage+0x78>
      wait_loop_index--;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0UL)
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1f9      	bne.n	800d1ea <R3_1_SetAOReferenceVoltage+0x72>
}
 800d1f6:	bf00      	nop
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	40007400 	.word	0x40007400
 800d204:	200006d0 	.word	0x200006d0
 800d208:	431bde83 	.word	0x431bde83

0800d20c <R3_1_RLDetectionModeEnable>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @param  hDuty to be applied in uint16_t
  * @retval none
  */
void R3_1_RLDetectionModeEnable( PWMC_Handle_t * pHdl )
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	60bb      	str	r3, [r7, #8]
  
  if ( pHandle->_Super.RLDetectionMode == false )
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d226:	f083 0301 	eor.w	r3, r3, #1
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d047      	beq.n	800d2c0 <R3_1_RLDetectionModeEnable+0xb4>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800d230:	2260      	movs	r2, #96	; 0x60
 800d232:	2101      	movs	r1, #1
 800d234:	68b8      	ldr	r0, [r7, #8]
 800d236:	f7fe fe59 	bl	800beec <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800d23a:	2101      	movs	r1, #1
 800d23c:	68b8      	ldr	r0, [r7, #8]
 800d23e:	f7fe fe31 	bl	800bea4 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d242:	2104      	movs	r1, #4
 800d244:	68b8      	ldr	r0, [r7, #8]
 800d246:	f7fe fe3e 	bl	800bec6 <LL_TIM_CC_DisableChannel>
    LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800d24a:	2100      	movs	r1, #0
 800d24c:	68b8      	ldr	r0, [r7, #8]
 800d24e:	f7fe ff41 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d256:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d10d      	bne.n	800d27a <R3_1_RLDetectionModeEnable+0x6e>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE );
 800d25e:	2210      	movs	r2, #16
 800d260:	2110      	movs	r1, #16
 800d262:	68b8      	ldr	r0, [r7, #8]
 800d264:	f7fe fe42 	bl	800beec <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d268:	2110      	movs	r1, #16
 800d26a:	68b8      	ldr	r0, [r7, #8]
 800d26c:	f7fe fe2b 	bl	800bec6 <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d270:	2140      	movs	r1, #64	; 0x40
 800d272:	68b8      	ldr	r0, [r7, #8]
 800d274:	f7fe fe16 	bl	800bea4 <LL_TIM_CC_EnableChannel>
 800d278:	e012      	b.n	800d2a0 <R3_1_RLDetectionModeEnable+0x94>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d27e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d282:	2b02      	cmp	r3, #2
 800d284:	d10c      	bne.n	800d2a0 <R3_1_RLDetectionModeEnable+0x94>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE );
 800d286:	2220      	movs	r2, #32
 800d288:	2110      	movs	r1, #16
 800d28a:	68b8      	ldr	r0, [r7, #8]
 800d28c:	f7fe fe2e 	bl	800beec <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d290:	2110      	movs	r1, #16
 800d292:	68b8      	ldr	r0, [r7, #8]
 800d294:	f7fe fe06 	bl	800bea4 <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d298:	2140      	movs	r1, #64	; 0x40
 800d29a:	68b8      	ldr	r0, [r7, #8]
 800d29c:	f7fe fe13 	bl	800bec6 <LL_TIM_CC_DisableChannel>
    else
    {
    }

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2 );
 800d2a0:	2270      	movs	r2, #112	; 0x70
 800d2a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d2a6:	68b8      	ldr	r0, [r7, #8]
 800d2a8:	f7fe fe20 	bl	800beec <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800d2ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d2b0:	68b8      	ldr	r0, [r7, #8]
 800d2b2:	f7fe fe08 	bl	800bec6 <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d2b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d2ba:	68b8      	ldr	r0, [r7, #8]
 800d2bc:	f7fe fe03 	bl	800bec6 <LL_TIM_CC_DisableChannel>
   
  }

  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	4a09      	ldr	r2, [pc, #36]	; (800d2e8 <R3_1_RLDetectionModeEnable+0xdc>)
 800d2c4:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4a08      	ldr	r2, [pc, #32]	; (800d2ec <R3_1_RLDetectionModeEnable+0xe0>)
 800d2ca:	615a      	str	r2, [r3, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	4a08      	ldr	r2, [pc, #32]	; (800d2f0 <R3_1_RLDetectionModeEnable+0xe4>)
 800d2d0:	60da      	str	r2, [r3, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	4a07      	ldr	r2, [pc, #28]	; (800d2f4 <R3_1_RLDetectionModeEnable+0xe8>)
 800d2d6:	609a      	str	r2, [r3, #8]

  pHandle->_Super.RLDetectionMode = true;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
}
 800d2e0:	bf00      	nop
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	0800d4e5 	.word	0x0800d4e5
 800d2ec:	0800d561 	.word	0x0800d561
 800d2f0:	0800d5f5 	.word	0x0800d5f5
 800d2f4:	0800cf81 	.word	0x0800cf81

0800d2f8 <R3_1_RLDetectionModeDisable>:
 * @brief  It is used to disable the PWM mode for R/L detection.
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval none
 */
void R3_1_RLDetectionModeDisable( PWMC_Handle_t * pHdl )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	60bb      	str	r3, [r7, #8]

  if ( pHandle->_Super.RLDetectionMode == true )
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 809e 	beq.w	800d454 <R3_1_RLDetectionModeDisable+0x15c>

    /* The folowing while cycles ensure the identification of the positive counting mode of TIM1
     * for correct reactivation of Repetition Counter value of TIM1.*/

    /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800d318:	bf00      	nop
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 0310 	and.w	r3, r3, #16
 800d322:	2b00      	cmp	r3, #0
 800d324:	d0f9      	beq.n	800d31a <R3_1_RLDetectionModeDisable+0x22>
    {
    }
    /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction.*/
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800d326:	bf00      	nop
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f003 0310 	and.w	r3, r3, #16
 800d330:	2b10      	cmp	r3, #16
 800d332:	d0f9      	beq.n	800d328 <R3_1_RLDetectionModeDisable+0x30>
    {
    } 

    /* Repetition Counter of TIM1 User value reactivation END*/    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800d334:	2260      	movs	r2, #96	; 0x60
 800d336:	2101      	movs	r1, #1
 800d338:	68b8      	ldr	r0, [r7, #8]
 800d33a:	f7fe fdd7 	bl	800beec <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800d33e:	2101      	movs	r1, #1
 800d340:	68b8      	ldr	r0, [r7, #8]
 800d342:	f7fe fdaf 	bl	800bea4 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d34a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d104      	bne.n	800d35c <R3_1_RLDetectionModeDisable+0x64>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d352:	2104      	movs	r1, #4
 800d354:	68b8      	ldr	r0, [r7, #8]
 800d356:	f7fe fda5 	bl	800bea4 <LL_TIM_CC_EnableChannel>
 800d35a:	e009      	b.n	800d370 <R3_1_RLDetectionModeDisable+0x78>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d360:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d364:	2b02      	cmp	r3, #2
 800d366:	d103      	bne.n	800d370 <R3_1_RLDetectionModeDisable+0x78>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800d368:	2104      	movs	r1, #4
 800d36a:	68b8      	ldr	r0, [r7, #8]
 800d36c:	f7fe fdab 	bl	800bec6 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d376:	085b      	lsrs	r3, r3, #1
 800d378:	b29b      	uxth	r3, r3
 800d37a:	4619      	mov	r1, r3
 800d37c:	68b8      	ldr	r0, [r7, #8]
 800d37e:	f7fe fea9 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 800d382:	2260      	movs	r2, #96	; 0x60
 800d384:	2110      	movs	r1, #16
 800d386:	68b8      	ldr	r0, [r7, #8]
 800d388:	f7fe fdb0 	bl	800beec <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800d38c:	2110      	movs	r1, #16
 800d38e:	68b8      	ldr	r0, [r7, #8]
 800d390:	f7fe fd88 	bl	800bea4 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d398:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d104      	bne.n	800d3aa <R3_1_RLDetectionModeDisable+0xb2>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d3a0:	2140      	movs	r1, #64	; 0x40
 800d3a2:	68b8      	ldr	r0, [r7, #8]
 800d3a4:	f7fe fd7e 	bl	800bea4 <LL_TIM_CC_EnableChannel>
 800d3a8:	e009      	b.n	800d3be <R3_1_RLDetectionModeDisable+0xc6>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ae:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d3b2:	2b02      	cmp	r3, #2
 800d3b4:	d103      	bne.n	800d3be <R3_1_RLDetectionModeDisable+0xc6>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800d3b6:	2140      	movs	r1, #64	; 0x40
 800d3b8:	68b8      	ldr	r0, [r7, #8]
 800d3ba:	f7fe fd84 	bl	800bec6 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH2( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3c4:	085b      	lsrs	r3, r3, #1
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	68b8      	ldr	r0, [r7, #8]
 800d3cc:	f7fe fe90 	bl	800c0f0 <LL_TIM_OC_SetCompareCH2>

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 800d3d0:	2260      	movs	r2, #96	; 0x60
 800d3d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3d6:	68b8      	ldr	r0, [r7, #8]
 800d3d8:	f7fe fd88 	bl	800beec <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800d3dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3e0:	68b8      	ldr	r0, [r7, #8]
 800d3e2:	f7fe fd5f 	bl	800bea4 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ea:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d105      	bne.n	800d3fe <R3_1_RLDetectionModeDisable+0x106>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d3f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d3f6:	68b8      	ldr	r0, [r7, #8]
 800d3f8:	f7fe fd54 	bl	800bea4 <LL_TIM_CC_EnableChannel>
 800d3fc:	e00a      	b.n	800d414 <R3_1_RLDetectionModeDisable+0x11c>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d402:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d406:	2b02      	cmp	r3, #2
 800d408:	d104      	bne.n	800d414 <R3_1_RLDetectionModeDisable+0x11c>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800d40a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d40e:	68b8      	ldr	r0, [r7, #8]
 800d410:	f7fe fd59 	bl	800bec6 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH3( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d41a:	085b      	lsrs	r3, r3, #1
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	4619      	mov	r1, r3
 800d420:	68b8      	ldr	r0, [r7, #8]
 800d422:	f7fe fe73 	bl	800c10c <LL_TIM_OC_SetCompareCH3>
    
    /* ADCx Injected discontinuous mode disable */
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	2100      	movs	r1, #0
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe fbd2 	bl	800bbd8 <LL_ADC_INJ_SetSequencerDiscont>
                                    LL_ADC_INJ_SEQ_DISCONT_DISABLE );

    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4a09      	ldr	r2, [pc, #36]	; (800d45c <R3_1_RLDetectionModeDisable+0x164>)
 800d438:	605a      	str	r2, [r3, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	4a08      	ldr	r2, [pc, #32]	; (800d460 <R3_1_RLDetectionModeDisable+0x168>)
 800d43e:	615a      	str	r2, [r3, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	4a08      	ldr	r2, [pc, #32]	; (800d464 <R3_1_RLDetectionModeDisable+0x16c>)
 800d444:	60da      	str	r2, [r3, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4a07      	ldr	r2, [pc, #28]	; (800d468 <R3_1_RLDetectionModeDisable+0x170>)
 800d44a:	609a      	str	r2, [r3, #8]

    pHandle->_Super.RLDetectionMode = false;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }
}
 800d454:	bf00      	nop
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	0800c91d 	.word	0x0800c91d
 800d460:	0800cd93 	.word	0x0800cd93
 800d464:	0800ce3f 	.word	0x0800ce3f
 800d468:	0800cf81 	.word	0x0800cf81

0800d46c <R3_1_RLDetectionModeSetDuty>:
 * @param  hDuty to be applied in uint16_t
 * @retval It returns the code error 'MC_FOC_DURATION' if any, 'MC_NO_ERROR'
 *         otherwise. These error codes are defined in mc_type.h
 */
uint16_t R3_1_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	460b      	mov	r3, r1
 800d476:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;


  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d48a:	461a      	mov	r2, r3
 800d48c:	887b      	ldrh	r3, [r7, #2]
 800d48e:	fb03 f302 	mul.w	r3, r3, r2
 800d492:	0c1b      	lsrs	r3, r3, #16
 800d494:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	b29a      	uxth	r2, r3
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	865a      	strh	r2, [r3, #50]	; 0x32
  
  /* set sector in order to sample phase B */
  pHandle->_Super.Sector = SECTOR_4;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  /* TIM1 Channel 1 Duty Cycle configuration.
   * In RL Detection mode only the Up-side device of Phase A are controlled*/
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7fe fe11 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>


  /* Limit for update event */
  /*  If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d002      	beq.n	800d4c4 <R3_1_RLDetectionModeSetDuty+0x58>
  {
    hAux = MC_FOC_DURATION;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	82fb      	strh	r3, [r7, #22]
 800d4c2:	e001      	b.n	800d4c8 <R3_1_RLDetectionModeSetDuty+0x5c>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d104      	bne.n	800d4da <R3_1_RLDetectionModeSetDuty+0x6e>
  {
    hAux = MC_FOC_DURATION;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	871a      	strh	r2, [r3, #56]	; 0x38
  }
  return hAux;
 800d4da:	8afb      	ldrh	r3, [r7, #22]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3718      	adds	r7, #24
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_1_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	60fb      	str	r3, [r7, #12]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	f7fe fe21 	bl	800c144 <LL_TIM_SetTriggerOutput>

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d506:	4619      	mov	r1, r3
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d512:	330e      	adds	r3, #14
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	4413      	add	r3, r2
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	1acb      	subs	r3, r1, r3
 800d51e:	617b      	str	r3, [r7, #20]

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	4a0d      	ldr	r2, [pc, #52]	; (800d558 <R3_1_RLGetPhaseCurrents+0x74>)
 800d524:	4293      	cmp	r3, r2
 800d526:	db08      	blt.n	800d53a <R3_1_RLGetPhaseCurrents+0x56>
  {
    if ( wAux < INT16_MAX )
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d52e:	4293      	cmp	r3, r2
 800d530:	dd05      	ble.n	800d53e <R3_1_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800d532:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800d536:	617b      	str	r3, [r7, #20]
 800d538:	e001      	b.n	800d53e <R3_1_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800d53a:	4b08      	ldr	r3, [pc, #32]	; (800d55c <R3_1_RLGetPhaseCurrents+0x78>)
 800d53c:	617b      	str	r3, [r7, #20]
  }

  pStator_Currents->a = (int16_t)wAux;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	b21a      	sxth	r2, r3
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = (int16_t)wAux;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	b21a      	sxth	r2, r3
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	805a      	strh	r2, [r3, #2]
}
 800d54e:	bf00      	nop
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	ffff8002 	.word	0xffff8002
 800d55c:	ffff8001 	.word	0xffff8001

0800d560 <R3_1_RLTurnOnLowSides>:
  *         This function is specific for RL detection phase.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_1_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1 ( TIMx, 0u );
 800d574:	2100      	movs	r1, #0
 800d576:	68b8      	ldr	r0, [r7, #8]
 800d578:	f7fe fdac 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d57c:	68b8      	ldr	r0, [r7, #8]
 800d57e:	f7fe fe14 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800d582:	bf00      	nop
 800d584:	68b8      	ldr	r0, [r7, #8]
 800d586:	f7fe fe1e 	bl	800c1c6 <LL_TIM_IsActiveFlag_UPDATE>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d0f9      	beq.n	800d584 <R3_1_RLTurnOnLowSides+0x24>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d590:	68b8      	ldr	r0, [r7, #8]
 800d592:	f7fe fe0a 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800d596:	68b8      	ldr	r0, [r7, #8]
 800d598:	f7fe fde7 	bl	800c16a <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5a0:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	d121      	bne.n	800d5ec <R3_1_RLTurnOnLowSides+0x8c>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5ac:	699a      	ldr	r2, [r3, #24]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5b2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	f7fe fe87 	bl	800c2cc <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5c2:	69da      	ldr	r2, [r3, #28]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5c8:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	4610      	mov	r0, r2
 800d5d0:	f7fe fe8a 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5d8:	6a1a      	ldr	r2, [r3, #32]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5de:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	f7fe fe7f 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
  }
  return;
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
}
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <R3_1_RLSwitchOnPWM>:
 *         This function is specific for RL detection phase.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
static void R3_1_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b086      	sub	sp, #24
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	60fb      	str	r3, [r7, #12]
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2200      	movs	r2, #0
 800d614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800d618:	bf00      	nop
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f003 0310 	and.w	r3, r3, #16
 800d622:	2b10      	cmp	r3, #16
 800d624:	d0f9      	beq.n	800d61a <R3_1_RLSwitchOnPWM+0x26>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 800d626:	bf00      	nop
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0310 	and.w	r3, r3, #16
 800d630:	2b00      	cmp	r3, #0
 800d632:	d0f9      	beq.n	800d628 <R3_1_RLSwitchOnPWM+0x34>
  {
  }

  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);
 800d634:	2101      	movs	r1, #1
 800d636:	6938      	ldr	r0, [r7, #16]
 800d638:	f7fe fd4c 	bl	800c0d4 <LL_TIM_OC_SetCompareCH1>

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d642:	3b05      	subs	r3, #5
 800d644:	4619      	mov	r1, r3
 800d646:	6938      	ldr	r0, [r7, #16]
 800d648:	f7fe fd6e 	bl	800c128 <LL_TIM_OC_SetCompareCH4>
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */
 800d64c:	6938      	ldr	r0, [r7, #16]
 800d64e:	f7fe fdac 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800d652:	bf00      	nop
 800d654:	6938      	ldr	r0, [r7, #16]
 800d656:	f7fe fdb6 	bl	800c1c6 <LL_TIM_IsActiveFlag_UPDATE>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d0f9      	beq.n	800d654 <R3_1_RLSwitchOnPWM+0x60>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800d660:	6938      	ldr	r0, [r7, #16]
 800d662:	f7fe fda2 	bl	800c1aa <LL_TIM_ClearFlag_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d66a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);
 800d672:	6938      	ldr	r0, [r7, #16]
 800d674:	f7fe fd79 	bl	800c16a <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d67c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800d680:	2b02      	cmp	r3, #2
 800d682:	d149      	bne.n	800d718 <R3_1_RLSwitchOnPWM+0x124>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	6a1a      	ldr	r2, [r3, #32]
 800d688:	f240 5355 	movw	r3, #1365	; 0x555
 800d68c:	4013      	ands	r3, r2
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d021      	beq.n	800d6d6 <R3_1_RLSwitchOnPWM+0xe2>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d696:	699a      	ldr	r2, [r3, #24]
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d69c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	f7fe fe12 	bl	800c2cc <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6ac:	69da      	ldr	r2, [r3, #28]
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7fe fe07 	bl	800c2cc <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6c2:	6a1a      	ldr	r2, [r3, #32]
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6c8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	4610      	mov	r0, r2
 800d6d0:	f7fe fe0a 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
 800d6d4:	e020      	b.n	800d718 <R3_1_RLSwitchOnPWM+0x124>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6da:	699a      	ldr	r2, [r3, #24]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6e0:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	4610      	mov	r0, r2
 800d6e8:	f7fe fdfe 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6f0:	69da      	ldr	r2, [r3, #28]
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6f6:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	f7fe fdf3 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d706:	6a1a      	ldr	r2, [r3, #32]
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d70c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f7fe fde8 	bl	800c2e8 <LL_GPIO_ResetOutputPin>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2203      	movs	r2, #3
 800d71c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  LL_ADC_INJ_StartConversion( ADCx );
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7fe fb01 	bl	800bd28 <LL_ADC_INJ_StartConversion>

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800d726:	6938      	ldr	r0, [r7, #16]
 800d728:	f7fe fd90 	bl	800c24c <LL_TIM_EnableIT_UPDATE>



  return;
 800d72c:	bf00      	nop
}
 800d72e:	3718      	adds	r7, #24
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Init( RDivider_Handle_t * pHandle )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	330c      	adds	r3, #12
 800d740:	4618      	mov	r0, r3
 800d742:	f7f6 f857 	bl	80037f4 <RCM_RegisterRegConv>
 800d746:	4603      	mov	r3, r0
 800d748:	461a      	mov	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* Check */
  RVBS_Clear( pHandle );
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f804 	bl	800d75e <RVBS_Clear>
}
 800d756:	bf00      	nop
 800d758:	3708      	adds	r7, #8
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800d75e:	b480      	push	{r7}
 800d760:	b085      	sub	sp, #20
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	8b5b      	ldrh	r3, [r3, #26]
 800d76a:	461a      	mov	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	8b9b      	ldrh	r3, [r3, #28]
 800d770:	4413      	add	r3, r2
 800d772:	085b      	lsrs	r3, r3, #1
 800d774:	81bb      	strh	r3, [r7, #12]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800d776:	2300      	movs	r3, #0
 800d778:	81fb      	strh	r3, [r7, #14]
 800d77a:	e009      	b.n	800d790 <RVBS_Clear+0x32>
  {
    pHandle->aBuffer[index] = aux;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a1a      	ldr	r2, [r3, #32]
 800d780:	89fb      	ldrh	r3, [r7, #14]
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	4413      	add	r3, r2
 800d786:	89ba      	ldrh	r2, [r7, #12]
 800d788:	801a      	strh	r2, [r3, #0]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800d78a:	89fb      	ldrh	r3, [r7, #14]
 800d78c:	3301      	adds	r3, #1
 800d78e:	81fb      	strh	r3, [r7, #14]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	8b1b      	ldrh	r3, [r3, #24]
 800d794:	89fa      	ldrh	r2, [r7, #14]
 800d796:	429a      	cmp	r2, r3
 800d798:	d3f0      	bcc.n	800d77c <RVBS_Clear+0x1e>
  }
  pHandle->_Super.LatestConv = aux;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	89ba      	ldrh	r2, [r7, #12]
 800d79e:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	89ba      	ldrh	r2, [r7, #12]
 800d7a4:	80da      	strh	r2, [r3, #6]
  pHandle->index = 0;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800d7ae:	bf00      	nop
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <RVBS_ConvertVbusFiltrered>:

static uint16_t RVBS_ConvertVbusFiltrered( RDivider_Handle_t * pHandle )
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b086      	sub	sp, #24
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  uint16_t hAux;
  uint8_t vindex;
  uint16_t max = 0, min = 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	82bb      	strh	r3, [r7, #20]
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	827b      	strh	r3, [r7, #18]
  uint32_t tot = 0u;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	60fb      	str	r3, [r7, #12]

  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	75fb      	strb	r3, [r7, #23]
 800d7d2:	e027      	b.n	800d824 <RVBS_ConvertVbusFiltrered+0x6a>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7f6 f8c0 	bl	8003960 <RCM_ExecRegularConv>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	817b      	strh	r3, [r7, #10]

    if ( hAux != 0xFFFFu )
 800d7e4:	897b      	ldrh	r3, [r7, #10]
 800d7e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d01a      	beq.n	800d824 <RVBS_ConvertVbusFiltrered+0x6a>
    {
      if ( vindex == 0 )
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d104      	bne.n	800d7fe <RVBS_ConvertVbusFiltrered+0x44>
      {
        min = hAux;
 800d7f4:	897b      	ldrh	r3, [r7, #10]
 800d7f6:	827b      	strh	r3, [r7, #18]
        max = hAux;
 800d7f8:	897b      	ldrh	r3, [r7, #10]
 800d7fa:	82bb      	strh	r3, [r7, #20]
 800d7fc:	e00b      	b.n	800d816 <RVBS_ConvertVbusFiltrered+0x5c>
      }
      else
      {
        if ( hAux < min )
 800d7fe:	897a      	ldrh	r2, [r7, #10]
 800d800:	8a7b      	ldrh	r3, [r7, #18]
 800d802:	429a      	cmp	r2, r3
 800d804:	d201      	bcs.n	800d80a <RVBS_ConvertVbusFiltrered+0x50>
        {
          min = hAux;
 800d806:	897b      	ldrh	r3, [r7, #10]
 800d808:	827b      	strh	r3, [r7, #18]
        }
        if ( hAux > max )
 800d80a:	897a      	ldrh	r2, [r7, #10]
 800d80c:	8abb      	ldrh	r3, [r7, #20]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d901      	bls.n	800d816 <RVBS_ConvertVbusFiltrered+0x5c>
        {
          max = hAux;
 800d812:	897b      	ldrh	r3, [r7, #10]
 800d814:	82bb      	strh	r3, [r7, #20]
        }
      }
      vindex++;
 800d816:	7dfb      	ldrb	r3, [r7, #23]
 800d818:	3301      	adds	r3, #1
 800d81a:	75fb      	strb	r3, [r7, #23]

      tot += hAux;
 800d81c:	897b      	ldrh	r3, [r7, #10]
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 800d824:	7dfb      	ldrb	r3, [r7, #23]
 800d826:	b29a      	uxth	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	8b1b      	ldrh	r3, [r3, #24]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d3d1      	bcc.n	800d7d4 <RVBS_ConvertVbusFiltrered+0x1a>
    }
  }

  tot -= max;
 800d830:	8abb      	ldrh	r3, [r7, #20]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	1ad3      	subs	r3, r2, r3
 800d836:	60fb      	str	r3, [r7, #12]
  tot -= min;
 800d838:	8a7b      	ldrh	r3, [r7, #18]
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	60fb      	str	r3, [r7, #12]
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	8b1b      	ldrh	r3, [r3, #24]
 800d844:	3b02      	subs	r3, #2
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	fbb2 f3f3 	udiv	r3, r2, r3
 800d84c:	b29b      	uxth	r3, r3
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <RVBS_CalcAvVbusFilt>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbusFilt( RDivider_Handle_t * pHandle )
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b084      	sub	sp, #16
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RVBS_ConvertVbusFiltrered( pHandle );
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff ffab 	bl	800d7ba <RVBS_ConvertVbusFiltrered>
 800d864:	4603      	mov	r3, r0
 800d866:	813b      	strh	r3, [r7, #8]

  if ( hAux != 0xFFFF )
 800d868:	893b      	ldrh	r3, [r7, #8]
 800d86a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d86e:	4293      	cmp	r3, r2
 800d870:	d044      	beq.n	800d8fc <RVBS_CalcAvVbusFilt+0xa6>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a1a      	ldr	r2, [r3, #32]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d87c:	005b      	lsls	r3, r3, #1
 800d87e:	4413      	add	r3, r2
 800d880:	893a      	ldrh	r2, [r7, #8]
 800d882:	801a      	strh	r2, [r3, #0]
    wtemp = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800d888:	2300      	movs	r3, #0
 800d88a:	72fb      	strb	r3, [r7, #11]
 800d88c:	e00c      	b.n	800d8a8 <RVBS_CalcAvVbusFilt+0x52>
    {
      wtemp += pHandle->aBuffer[i];
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a1a      	ldr	r2, [r3, #32]
 800d892:	7afb      	ldrb	r3, [r7, #11]
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	4413      	add	r3, r2
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	4413      	add	r3, r2
 800d8a0:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800d8a2:	7afb      	ldrb	r3, [r7, #11]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	72fb      	strb	r3, [r7, #11]
 800d8a8:	7afb      	ldrb	r3, [r7, #11]
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	8b1b      	ldrh	r3, [r3, #24]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d3ec      	bcc.n	800d88e <RVBS_CalcAvVbusFilt+0x38>
    }
    wtemp /= pHandle->LowPassFilterBW;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	8b1b      	ldrh	r3, [r3, #24]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8c0:	60fb      	str	r3, [r7, #12]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.LatestConv = hAux;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	893a      	ldrh	r2, [r7, #8]
 800d8ce:	809a      	strh	r2, [r3, #4]

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	8b1b      	ldrh	r3, [r3, #24]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	da08      	bge.n	800d8f4 <RVBS_CalcAvVbusFilt+0x9e>
    {
      pHandle->index++;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	b2da      	uxtb	r2, r3
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800d8f2:	e003      	b.n	800d8fc <RVBS_CalcAvVbusFilt+0xa6>
    }
    else
    {
      pHandle->index = 0;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f80a 	bl	800d916 <RVBS_CheckFaultState>
 800d902:	4603      	mov	r3, r0
 800d904:	461a      	mov	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	811a      	strh	r2, [r3, #8]

  return ( pHandle->_Super.FaultState );
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	891b      	ldrh	r3, [r3, #8]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
 800d916:	b480      	push	{r7}
 800d918:	b085      	sub	sp, #20
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	88da      	ldrh	r2, [r3, #6]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	8b5b      	ldrh	r3, [r3, #26]
 800d926:	429a      	cmp	r2, r3
 800d928:	d902      	bls.n	800d930 <RVBS_CheckFaultState+0x1a>
  {
    fault = MC_OVER_VOLT;
 800d92a:	2302      	movs	r3, #2
 800d92c:	81fb      	strh	r3, [r7, #14]
 800d92e:	e00a      	b.n	800d946 <RVBS_CheckFaultState+0x30>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	88da      	ldrh	r2, [r3, #6]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	8b9b      	ldrh	r3, [r3, #28]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d202      	bcs.n	800d942 <RVBS_CheckFaultState+0x2c>
  {
    fault = MC_UNDER_VOLT;
 800d93c:	2304      	movs	r3, #4
 800d93e:	81fb      	strh	r3, [r7, #14]
 800d940:	e001      	b.n	800d946 <RVBS_CheckFaultState+0x30>
  }
  else
  {
    fault = MC_NO_ERROR;
 800d942:	2300      	movs	r3, #0
 800d944:	81fb      	strh	r3, [r7, #14]
  }
  return fault;
 800d946:	89fb      	ldrh	r3, [r7, #14]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3714      	adds	r7, #20
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  pHandle->Ext = 0;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	605a      	str	r2, [r3, #4]
  pHandle->RampRemainingStep = 0u;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	611a      	str	r2, [r3, #16]
  pHandle->ScalingFactor = 1u;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	615a      	str	r2, [r3, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800d97a:	bf00      	nop
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <REMNG_Calc>:
            It must be called at fixed interval defined in the hExecFreq.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval int32_t value of the state variable
  */
__weak int32_t REMNG_Calc( RampExtMngr_Handle_t * pHandle )
{
 800d986:	b480      	push	{r7}
 800d988:	b085      	sub	sp, #20
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  int32_t ret_val;
  int32_t current_ref;

  current_ref = pHandle->Ext;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	60fb      	str	r3, [r7, #12]

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d90a      	bls.n	800d9b2 <REMNG_Calc+0x2c>
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	60fb      	str	r3, [r7, #12]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	1e5a      	subs	r2, r3, #1
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	60da      	str	r2, [r3, #12]
 800d9b0:	e00d      	b.n	800d9ce <REMNG_Calc+0x48>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d109      	bne.n	800d9ce <REMNG_Calc+0x48>
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	6952      	ldr	r2, [r2, #20]
 800d9c2:	fb02 f303 	mul.w	r3, r2, r3
 800d9c6:	60fb      	str	r3, [r7, #12]
    pHandle->RampRemainingStep = 0u;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	68fa      	ldr	r2, [r7, #12]
 800d9d2:	609a      	str	r2, [r3, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6952      	ldr	r2, [r2, #20]
 800d9dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9e0:	60bb      	str	r3, [r7, #8]
#endif

  return ret_val;
 800d9e2:	68bb      	ldr	r3, [r7, #8]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <REMNG_ExecRamp>:
  *         milliseconds. It is possible to set 0 to perform an instantaneous
  *         change in the value.
  * @retval bool It returns true is command is valid, false otherwise
  */
__weak bool REMNG_ExecRamp( RampExtMngr_Handle_t * pHandle, int32_t TargetFinal, uint32_t Durationms )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b08c      	sub	sp, #48	; 0x30
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	60f8      	str	r0, [r7, #12]
 800d9f8:	60b9      	str	r1, [r7, #8]
 800d9fa:	607a      	str	r2, [r7, #4]
  uint32_t aux;
  int32_t aux1;
  int32_t current_ref;
  bool retVal = true;
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Get current state */
#ifdef FASTDIV
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
#else
  current_ref = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	6952      	ldr	r2, [r2, #20]
 800da0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800da0e:	627b      	str	r3, [r7, #36]	; 0x24
#endif

  if ( Durationms == 0u )
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d114      	bne.n	800da40 <REMNG_ExecRamp+0x50>
  {
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 800da16:	68b8      	ldr	r0, [r7, #8]
 800da18:	f000 f887 	bl	800db2a <getScalingFactor>
 800da1c:	4602      	mov	r2, r0
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	615a      	str	r2, [r3, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	461a      	mov	r2, r3
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	fb03 f202 	mul.w	r2, r3, r2
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	609a      	str	r2, [r3, #8]
    pHandle->RampRemainingStep = 0u;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	611a      	str	r2, [r3, #16]
 800da3e:	e059      	b.n	800daf4 <REMNG_ExecRamp+0x104>
  }
  else
  {
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	4618      	mov	r0, r3
 800da48:	f000 f86f 	bl	800db2a <getScalingFactor>
 800da4c:	6238      	str	r0, [r7, #32]
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 800da4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da50:	f000 f86b 	bl	800db2a <getScalingFactor>
 800da54:	61f8      	str	r0, [r7, #28]
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800da56:	68b8      	ldr	r0, [r7, #8]
 800da58:	f000 f867 	bl	800db2a <getScalingFactor>
 800da5c:	61b8      	str	r0, [r7, #24]
    uint32_t wScalingFactorMin;

    if ( wScalingFactor <  wScalingFactor2 )
 800da5e:	6a3a      	ldr	r2, [r7, #32]
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	429a      	cmp	r2, r3
 800da64:	d209      	bcs.n	800da7a <REMNG_ExecRamp+0x8a>
    {
      if ( wScalingFactor < wScalingFactor3 )
 800da66:	6a3a      	ldr	r2, [r7, #32]
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d202      	bcs.n	800da74 <REMNG_ExecRamp+0x84>
      {
        wScalingFactorMin = wScalingFactor;
 800da6e:	6a3b      	ldr	r3, [r7, #32]
 800da70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da72:	e00b      	b.n	800da8c <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da78:	e008      	b.n	800da8c <REMNG_ExecRamp+0x9c>
      }
    }
    else
    {
      if ( wScalingFactor2 < wScalingFactor3 )
 800da7a:	69fa      	ldr	r2, [r7, #28]
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d202      	bcs.n	800da88 <REMNG_ExecRamp+0x98>
      {
        wScalingFactorMin = wScalingFactor2;
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da86:	e001      	b.n	800da8c <REMNG_ExecRamp+0x9c>
      }
      else
      {
        wScalingFactorMin = wScalingFactor3;
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }

    pHandle->ScalingFactor = wScalingFactorMin;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da90:	615a      	str	r2, [r3, #20]
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	461a      	mov	r2, r3
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	fb03 f202 	mul.w	r2, r3, r2
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	609a      	str	r2, [r3, #8]

    /* Store the TargetFinal to be applied in the last step */
    pHandle->TargetFinal = TargetFinal;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	605a      	str	r2, [r3, #4]

    /* Compute the (wRampRemainingStep) number of steps remaining to complete
    the ramp. */
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	fb02 f303 	mul.w	r3, r2, r3
 800dab2:	617b      	str	r3, [r7, #20]
    aux /= 1000u;
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	4a12      	ldr	r2, [pc, #72]	; (800db00 <REMNG_ExecRamp+0x110>)
 800dab8:	fba2 2303 	umull	r2, r3, r2, r3
 800dabc:	099b      	lsrs	r3, r3, #6
 800dabe:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = aux;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	697a      	ldr	r2, [r7, #20]
 800dac4:	60da      	str	r2, [r3, #12]
    pHandle->RampRemainingStep++;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	1c5a      	adds	r2, r3, #1
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	60da      	str	r2, [r3, #12]

    /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
    the reference value at each CalcTorqueReference. */
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad4:	1ad3      	subs	r3, r2, r3
 800dad6:	68fa      	ldr	r2, [r7, #12]
 800dad8:	6952      	ldr	r2, [r2, #20]
 800dada:	fb02 f303 	mul.w	r3, r2, r3
 800dade:	613b      	str	r3, [r7, #16]
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	461a      	mov	r2, r3
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	fb93 f3f2 	sdiv	r3, r3, r2
 800daec:	613b      	str	r3, [r7, #16]
    pHandle->IncDecAmount = aux1;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	693a      	ldr	r2, [r7, #16]
 800daf2:	611a      	str	r2, [r3, #16]
  }

  return retVal;
 800daf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3730      	adds	r7, #48	; 0x30
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	10624dd3 	.word	0x10624dd3

0800db04 <REMNG_RampCompleted>:
  * @brief  Check if the settled ramp has been completed.
  * @param  pHandle related Handle of struct RampMngr_Handle_t.
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  bool retVal = false;
 800db0c:	2300      	movs	r3, #0
 800db0e:	73fb      	strb	r3, [r7, #15]
  if ( pHandle->RampRemainingStep == 0u )
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <REMNG_RampCompleted+0x18>
  {
    retVal = true;
 800db18:	2301      	movs	r3, #1
 800db1a:	73fb      	strb	r3, [r7, #15]
  }
  return retVal;
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3714      	adds	r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <getScalingFactor>:
  *         It allows to keep Target * Scaling factor inside int32_t type.
  * @param  Target Input data.
  * @retval uint32_t It returns the optimized scaling factor.
  */
__weak uint32_t getScalingFactor( int32_t Target )
{
 800db2a:	b480      	push	{r7}
 800db2c:	b087      	sub	sp, #28
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t TargetAbs;
  int32_t aux;

  if ( Target < 0 )
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2b00      	cmp	r3, #0
 800db36:	da05      	bge.n	800db44 <getScalingFactor+0x1a>
  {
    aux = -Target;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	425b      	negs	r3, r3
 800db3c:	60fb      	str	r3, [r7, #12]
    TargetAbs = ( uint32_t )( aux );
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	613b      	str	r3, [r7, #16]
 800db42:	e001      	b.n	800db48 <getScalingFactor+0x1e>
  }
  else
  {
    TargetAbs = ( uint32_t )( Target );
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	613b      	str	r3, [r7, #16]
  }
  for ( i = 1u; i < 32u; i++ )
 800db48:	2301      	movs	r3, #1
 800db4a:	75fb      	strb	r3, [r7, #23]
 800db4c:	e00d      	b.n	800db6a <getScalingFactor+0x40>
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 800db4e:	7dfb      	ldrb	r3, [r7, #23]
 800db50:	f1c3 031f 	rsb	r3, r3, #31
 800db54:	2201      	movs	r2, #1
 800db56:	fa02 f303 	lsl.w	r3, r2, r3
 800db5a:	60bb      	str	r3, [r7, #8]
    if ( TargetAbs >= limit )
 800db5c:	693a      	ldr	r2, [r7, #16]
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	429a      	cmp	r2, r3
 800db62:	d206      	bcs.n	800db72 <getScalingFactor+0x48>
  for ( i = 1u; i < 32u; i++ )
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	3301      	adds	r3, #1
 800db68:	75fb      	strb	r3, [r7, #23]
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	2b1f      	cmp	r3, #31
 800db6e:	d9ee      	bls.n	800db4e <getScalingFactor+0x24>
 800db70:	e000      	b.n	800db74 <getScalingFactor+0x4a>
    {
      break;
 800db72:	bf00      	nop
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	3b01      	subs	r3, #1
 800db78:	2201      	movs	r2, #1
 800db7a:	fa02 f303 	lsl.w	r3, r2, r3
}
 800db7e:	4618      	mov	r0, r3
 800db80:	371c      	adds	r7, #28
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360ï¿½/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
 800db8a:	b480      	push	{r7}
 800db8c:	b083      	sub	sp, #12
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  return ( pHandle->hElAngle );
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrMecSpeedUnit );
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	370c      	adds	r7, #12
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr

0800dbbe <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
 800dbbe:	b480      	push	{r7}
 800dbc0:	b083      	sub	sp, #12
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  return ( pHandle->InstantaneousElSpeedDpp );
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b087      	sub	sp, #28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	75fb      	strb	r3, [r7, #23]
  uint8_t bSpeedErrorNumber;
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	78db      	ldrb	r3, [r3, #3]
 800dbea:	73fb      	strb	r3, [r7, #15]

  bool SpeedError = false;
 800dbec:	2300      	movs	r3, #0
 800dbee:	757b      	strb	r3, [r7, #21]
  uint16_t hAbsMecSpeedUnit, hAbsMecAccelUnitP;
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	75bb      	strb	r3, [r7, #22]

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	da09      	bge.n	800dc14 <SPD_IsMecSpeedReliable+0x3c>
  {
    hAux = -( *pMecSpeedUnit );
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	425b      	negs	r3, r3
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	81bb      	strh	r3, [r7, #12]
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 800dc0e:	89bb      	ldrh	r3, [r7, #12]
 800dc10:	827b      	strh	r3, [r7, #18]
 800dc12:	e003      	b.n	800dc1c <SPD_IsMecSpeedReliable+0x44>
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc1a:	827b      	strh	r3, [r7, #18]
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	8a9b      	ldrh	r3, [r3, #20]
 800dc20:	8a7a      	ldrh	r2, [r7, #18]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d901      	bls.n	800dc2a <SPD_IsMecSpeedReliable+0x52>
  {
    SpeedError = true;
 800dc26:	2301      	movs	r3, #1
 800dc28:	757b      	strb	r3, [r7, #21]
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	8adb      	ldrh	r3, [r3, #22]
 800dc2e:	8a7a      	ldrh	r2, [r7, #18]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d201      	bcs.n	800dc38 <SPD_IsMecSpeedReliable+0x60>
  {
    SpeedError = true;
 800dc34:	2301      	movs	r3, #1
 800dc36:	757b      	strb	r3, [r7, #21]
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	da09      	bge.n	800dc56 <SPD_IsMecSpeedReliable+0x7e>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	425b      	negs	r3, r3
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	81bb      	strh	r3, [r7, #12]
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 800dc50:	89bb      	ldrh	r3, [r7, #12]
 800dc52:	823b      	strh	r3, [r7, #16]
 800dc54:	e003      	b.n	800dc5e <SPD_IsMecSpeedReliable+0x86>
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800dc5c:	823b      	strh	r3, [r7, #16]
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	8b1b      	ldrh	r3, [r3, #24]
 800dc62:	8a3a      	ldrh	r2, [r7, #16]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d901      	bls.n	800dc6c <SPD_IsMecSpeedReliable+0x94>
  {
    SpeedError = true;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	757b      	strb	r3, [r7, #21]
  }

  if ( SpeedError == true )
 800dc6c:	7d7b      	ldrb	r3, [r7, #21]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d007      	beq.n	800dc82 <SPD_IsMecSpeedReliable+0xaa>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800dc72:	7dba      	ldrb	r2, [r7, #22]
 800dc74:	7bfb      	ldrb	r3, [r7, #15]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d209      	bcs.n	800dc8e <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber++;
 800dc7a:	7dbb      	ldrb	r3, [r7, #22]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	75bb      	strb	r3, [r7, #22]
 800dc80:	e005      	b.n	800dc8e <SPD_IsMecSpeedReliable+0xb6>
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800dc82:	7dba      	ldrb	r2, [r7, #22]
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d201      	bcs.n	800dc8e <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber = 0u;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800dc8e:	7dba      	ldrb	r2, [r7, #22]
 800dc90:	7bfb      	ldrb	r3, [r7, #15]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d101      	bne.n	800dc9a <SPD_IsMecSpeedReliable+0xc2>
  {
    SpeedSensorReliability = false;
 800dc96:	2300      	movs	r3, #0
 800dc98:	75fb      	strb	r3, [r7, #23]
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	7dba      	ldrb	r2, [r7, #22]
 800dc9e:	701a      	strb	r2, [r3, #0]

  return ( SpeedSensorReliability );
 800dca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	371c      	adds	r7, #28
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b085      	sub	sp, #20
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800dcbc:	60fb      	str	r3, [r7, #12]
  wAux *= INT16_MAX;
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	03db      	lsls	r3, r3, #15
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	8a9b      	ldrh	r3, [r3, #20]
 800dccc:	b21b      	sxth	r3, r3
 800dcce:	461a      	mov	r2, r3
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800dcd6:	60fb      	str	r3, [r7, #12]
  return ( int16_t )wAux;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	b21b      	sxth	r3, r3
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3714      	adds	r7, #20
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]

  pHandle->PISpeed = pPI;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	611a      	str	r2, [r3, #16]
  pHandle->SPD = SPD_Handle;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	615a      	str	r2, [r3, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	701a      	strb	r2, [r3, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800dd10:	041a      	lsls	r2, r3, #16
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	605a      	str	r2, [r3, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800dd1c:	041a      	lsls	r2, r3, #16
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	805a      	strh	r2, [r3, #2]
  pHandle->RampRemainingStep = 0u;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	619a      	str	r2, [r3, #24]
}
 800dd34:	bf00      	nop
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  pHandle->SPD = SPD_Handle;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	683a      	ldr	r2, [r7, #0]
 800dd4e:	615a      	str	r2, [r3, #20]
}
 800dd50:	bf00      	nop
 800dd52:	370c      	adds	r7, #12
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b083      	sub	sp, #12
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  return ( pHandle->SPD );
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	695b      	ldr	r3, [r3, #20]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  if ( pHandle->Mode == STC_SPEED_MODE )
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d105      	bne.n	800dd90 <STC_Clear+0x1c>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	691b      	ldr	r3, [r3, #16]
 800dd88:	2100      	movs	r1, #0
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fd fa5d 	bl	800b24a <PID_SetIntegralTerm>
  }
}
 800dd90:	bf00      	nop
 800dd92:	3708      	adds	r7, #8
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	da02      	bge.n	800ddae <STC_GetMecSpeedRefUnit+0x16>
 800dda8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ddac:	33ff      	adds	r3, #255	; 0xff
 800ddae:	141b      	asrs	r3, r3, #16
 800ddb0:	b21b      	sxth	r3, r3
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <STC_GetTorqueRef>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	da02      	bge.n	800ddd4 <STC_GetTorqueRef+0x16>
 800ddce:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800ddd2:	33ff      	adds	r3, #255	; 0xff
 800ddd4:	141b      	asrs	r3, r3, #16
 800ddd6:	b21b      	sxth	r3, r3
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <STC_SetControlMode>:
  *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	70fb      	strb	r3, [r7, #3]
  pHandle->Mode = bMode;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	78fa      	ldrb	r2, [r7, #3]
 800ddf4:	701a      	strb	r2, [r3, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	60da      	str	r2, [r3, #12]
}
 800ddfc:	bf00      	nop
 800ddfe:	370c      	adds	r7, #12
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b088      	sub	sp, #32
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	460b      	mov	r3, r1
 800de12:	607a      	str	r2, [r7, #4]
 800de14:	817b      	strh	r3, [r7, #10]
  bool AllowedRange = true;
 800de16:	2301      	movs	r3, #1
 800de18:	77fb      	strb	r3, [r7, #31]
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d116      	bne.n	800de50 <STC_ExecRamp+0x48>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f7ff ffcb 	bl	800ddbe <STC_GetTorqueRef>
 800de28:	4603      	mov	r3, r0
 800de2a:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800de2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800de34:	4293      	cmp	r3, r2
 800de36:	dd01      	ble.n	800de3c <STC_ExecRamp+0x34>
    {
      AllowedRange = false;
 800de38:	2300      	movs	r3, #0
 800de3a:	77fb      	strb	r3, [r7, #31]
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800de42:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800de46:	429a      	cmp	r2, r3
 800de48:	da2d      	bge.n	800dea6 <STC_ExecRamp+0x9e>
    {
      AllowedRange = false;
 800de4a:	2300      	movs	r3, #0
 800de4c:	77fb      	strb	r3, [r7, #31]
 800de4e:	e02a      	b.n	800dea6 <STC_ExecRamp+0x9e>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	2b00      	cmp	r3, #0
 800de56:	da02      	bge.n	800de5e <STC_ExecRamp+0x56>
 800de58:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800de5c:	33ff      	adds	r3, #255	; 0xff
 800de5e:	141b      	asrs	r3, r3, #16
 800de60:	83bb      	strh	r3, [r7, #28]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800de62:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de66:	68fa      	ldr	r2, [r7, #12]
 800de68:	8bd2      	ldrh	r2, [r2, #30]
 800de6a:	4293      	cmp	r3, r2
 800de6c:	dd02      	ble.n	800de74 <STC_ExecRamp+0x6c>
    {
      AllowedRange = false;
 800de6e:	2300      	movs	r3, #0
 800de70:	77fb      	strb	r3, [r7, #31]
 800de72:	e018      	b.n	800dea6 <STC_ExecRamp+0x9e>
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800de7a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800de7e:	429a      	cmp	r2, r3
 800de80:	da02      	bge.n	800de88 <STC_ExecRamp+0x80>
    {
      AllowedRange = false;
 800de82:	2300      	movs	r3, #0
 800de84:	77fb      	strb	r3, [r7, #31]
 800de86:	e00e      	b.n	800dea6 <STC_ExecRamp+0x9e>
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800de88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	8c12      	ldrh	r2, [r2, #32]
 800de90:	4293      	cmp	r3, r2
 800de92:	da08      	bge.n	800dea6 <STC_ExecRamp+0x9e>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800de9a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	dd01      	ble.n	800dea6 <STC_ExecRamp+0x9e>
      {
        AllowedRange = false;
 800dea2:	2300      	movs	r3, #0
 800dea4:	77fb      	strb	r3, [r7, #31]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 800dea6:	7ffb      	ldrb	r3, [r7, #31]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d041      	beq.n	800df30 <STC_ExecRamp+0x128>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d115      	bne.n	800dede <STC_ExecRamp+0xd6>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	d105      	bne.n	800dec6 <STC_ExecRamp+0xbe>
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800deba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800debe:	041a      	lsls	r2, r3, #16
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	605a      	str	r2, [r3, #4]
 800dec4:	e004      	b.n	800ded0 <STC_ExecRamp+0xc8>
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800dec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800deca:	041a      	lsls	r2, r3, #16
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	609a      	str	r2, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2200      	movs	r2, #0
 800ded4:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2200      	movs	r2, #0
 800deda:	619a      	str	r2, [r3, #24]
 800dedc:	e028      	b.n	800df30 <STC_ExecRamp+0x128>
    }
    else
    {
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	897a      	ldrh	r2, [r7, #10]
 800dee2:	805a      	strh	r2, [r3, #2]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	8b9b      	ldrh	r3, [r3, #28]
 800dee8:	461a      	mov	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	fb02 f303 	mul.w	r3, r2, r3
 800def0:	61bb      	str	r3, [r7, #24]
      wAux /= 1000u;
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	4a11      	ldr	r2, [pc, #68]	; (800df3c <STC_ExecRamp+0x134>)
 800def6:	fba2 2303 	umull	r2, r3, r2, r3
 800defa:	099b      	lsrs	r3, r3, #6
 800defc:	61bb      	str	r3, [r7, #24]
      pHandle->RampRemainingStep = wAux;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	69ba      	ldr	r2, [r7, #24]
 800df02:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	1c5a      	adds	r2, r3, #1
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800df0e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800df12:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	041b      	lsls	r3, r3, #16
 800df1a:	617b      	str	r3, [r7, #20]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	461a      	mov	r2, r3
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	fb93 f3f2 	sdiv	r3, r3, r2
 800df28:	617b      	str	r3, [r7, #20]
      pHandle->IncDecAmount = wAux1;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	619a      	str	r2, [r3, #24]
    }
  }

  return AllowedRange;
 800df30:	7ffb      	ldrb	r3, [r7, #31]
}
 800df32:	4618      	mov	r0, r3
 800df34:	3720      	adds	r7, #32
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	10624dd3 	.word	0x10624dd3

0800df40 <STC_StopRamp>:
  *         rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]

  pHandle->RampRemainingStep = 0u;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	619a      	str	r2, [r3, #24]
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b086      	sub	sp, #24
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  int32_t wCurrentReference;
  int16_t hTorqueReference = 0;
 800df68:	2300      	movs	r3, #0
 800df6a:	827b      	strh	r3, [r7, #18]
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d103      	bne.n	800df7c <STC_CalcTorqueReference+0x1c>
  {
    wCurrentReference = pHandle->TorqueRef;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	617b      	str	r3, [r7, #20]
 800df7a:	e002      	b.n	800df82 <STC_CalcTorqueReference+0x22>
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	685b      	ldr	r3, [r3, #4]
 800df80:	617b      	str	r3, [r7, #20]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d90a      	bls.n	800dfa0 <STC_CalcTorqueReference+0x40>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	699b      	ldr	r3, [r3, #24]
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	4413      	add	r3, r2
 800df92:	617b      	str	r3, [r7, #20]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	1e5a      	subs	r2, r3, #1
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	60da      	str	r2, [r3, #12]
 800df9e:	e00b      	b.n	800dfb8 <STC_CalcTorqueReference+0x58>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d107      	bne.n	800dfb8 <STC_CalcTorqueReference+0x58>
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfae:	041b      	lsls	r3, r3, #16
 800dfb0:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = 0u;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d126      	bne.n	800e00e <STC_CalcTorqueReference+0xae>
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	da02      	bge.n	800dfcc <STC_CalcTorqueReference+0x6c>
 800dfc6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800dfca:	33ff      	adds	r3, #255	; 0xff
 800dfcc:	141b      	asrs	r3, r3, #16
 800dfce:	823b      	strh	r3, [r7, #16]
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	695b      	ldr	r3, [r3, #20]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff fde5 	bl	800dba4 <SPD_GetAvrgMecSpeedUnit>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	81fb      	strh	r3, [r7, #14]
    hError = hTargetSpeed - hMeasuredSpeed;
 800dfde:	8a3a      	ldrh	r2, [r7, #16]
 800dfe0:	89fb      	ldrh	r3, [r7, #14]
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	81bb      	strh	r3, [r7, #12]
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800dff0:	4611      	mov	r1, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7fd f96c 	bl	800b2d0 <PI_Controller>
 800dff8:	4603      	mov	r3, r0
 800dffa:	827b      	strh	r3, [r7, #18]

    pHandle->SpeedRefUnitExt = wCurrentReference;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	697a      	ldr	r2, [r7, #20]
 800e000:	605a      	str	r2, [r3, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800e002:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e006:	041a      	lsls	r2, r3, #16
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	609a      	str	r2, [r3, #8]
 800e00c:	e00a      	b.n	800e024 <STC_CalcTorqueReference+0xc4>
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	697a      	ldr	r2, [r7, #20]
 800e012:	609a      	str	r2, [r3, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	2b00      	cmp	r3, #0
 800e018:	da02      	bge.n	800e020 <STC_CalcTorqueReference+0xc0>
 800e01a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800e01e:	33ff      	adds	r3, #255	; 0xff
 800e020:	141b      	asrs	r3, r3, #16
 800e022:	827b      	strh	r3, [r7, #18]
  }

  return hTorqueReference;
 800e024:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <STC_GetMecSpeedRefUnitDefault>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  return pHandle->MecSpeedRefUnitDefault;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800e03e:	4618      	mov	r0, r3
 800e040:	370c      	adds	r7, #12
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr

0800e04a <STC_GetMaxAppPositiveMecSpeedUnit>:
/**
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e04a:	b480      	push	{r7}
 800e04c:	b083      	sub	sp, #12
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	8bdb      	ldrh	r3, [r3, #30]
}
 800e056:	4618      	mov	r0, r3
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr

0800e062 <STC_GetMinAppNegativeMecSpeedUnit>:
/**
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  return pHandle->MinAppNegativeMecSpeedUnit;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
}
 800e070:	4618      	mov	r0, r3
 800e072:	370c      	adds	r7, #12
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <STC_GetDefaultIqdref>:
  * @brief It returns the default values of Iqdref.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e08a:	813b      	strh	r3, [r7, #8]
  IqdRefDefault.d = pHandle->IdrefDefault;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e092:	817b      	strh	r3, [r7, #10]
  return IqdRefDefault;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	60fb      	str	r3, [r7, #12]
 800e098:	2300      	movs	r3, #0
 800e09a:	89ba      	ldrh	r2, [r7, #12]
 800e09c:	f362 030f 	bfi	r3, r2, #0, #16
 800e0a0:	89fa      	ldrh	r2, [r7, #14]
 800e0a2:	f362 431f 	bfi	r3, r2, #16, #16
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3714      	adds	r7, #20
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr

0800e0b2 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b082      	sub	sp, #8
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	695b      	ldr	r3, [r3, #20]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7ff fd70 	bl	800dba4 <SPD_GetAvrgMecSpeedUnit>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	041a      	lsls	r2, r3, #16
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	605a      	str	r2, [r3, #4]
}
 800e0cc:	bf00      	nop
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <STM_Init>:
  *         once right after object creation.
  * @param pHandle pointer on the component instance to initialize.
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]

  pHandle->bState = IDLE;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	701a      	strb	r2, [r3, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	809a      	strh	r2, [r3, #4]
}
 800e0ee:	bf00      	nop
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
	...

0800e0fc <STM_NextState>:
  * @param bState New requested state
  * @retval bool It returns true if the state has been really set equal to
  *         bState, false if the requested state can't be reached
  */
__weak bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	460b      	mov	r3, r1
 800e106:	70fb      	strb	r3, [r7, #3]
  bool bChangeState = false;
 800e108:	2300      	movs	r3, #0
 800e10a:	73fb      	strb	r3, [r7, #15]
  State_t bCurrentState = pHandle->bState;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	737b      	strb	r3, [r7, #13]
  State_t bNewState = bCurrentState;
 800e112:	7b7b      	ldrb	r3, [r7, #13]
 800e114:	73bb      	strb	r3, [r7, #14]

  switch ( bCurrentState )
 800e116:	7b7b      	ldrb	r3, [r7, #13]
 800e118:	2b14      	cmp	r3, #20
 800e11a:	f200 8110 	bhi.w	800e33e <STM_NextState+0x242>
 800e11e:	a201      	add	r2, pc, #4	; (adr r2, 800e124 <STM_NextState+0x28>)
 800e120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e124:	0800e18b 	.word	0x0800e18b
 800e128:	0800e1a9 	.word	0x0800e1a9
 800e12c:	0800e20f 	.word	0x0800e20f
 800e130:	0800e221 	.word	0x0800e221
 800e134:	0800e2ab 	.word	0x0800e2ab
 800e138:	0800e2e3 	.word	0x0800e2e3
 800e13c:	0800e2f9 	.word	0x0800e2f9
 800e140:	0800e309 	.word	0x0800e309
 800e144:	0800e319 	.word	0x0800e319
 800e148:	0800e329 	.word	0x0800e329
 800e14c:	0800e33f 	.word	0x0800e33f
 800e150:	0800e33f 	.word	0x0800e33f
 800e154:	0800e179 	.word	0x0800e179
 800e158:	0800e1c7 	.word	0x0800e1c7
 800e15c:	0800e1df 	.word	0x0800e1df
 800e160:	0800e1f7 	.word	0x0800e1f7
 800e164:	0800e24b 	.word	0x0800e24b
 800e168:	0800e263 	.word	0x0800e263
 800e16c:	0800e295 	.word	0x0800e295
 800e170:	0800e2c7 	.word	0x0800e2c7
 800e174:	0800e27f 	.word	0x0800e27f
  {
    case ICLWAIT:
      if ( bState == IDLE )
 800e178:	78fb      	ldrb	r3, [r7, #3]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f040 80e1 	bne.w	800e342 <STM_NextState+0x246>
      {
        bNewState = bState;
 800e180:	78fb      	ldrb	r3, [r7, #3]
 800e182:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e184:	2301      	movs	r3, #1
 800e186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e188:	e0db      	b.n	800e342 <STM_NextState+0x246>
    case IDLE:
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800e18a:	78fb      	ldrb	r3, [r7, #3]
 800e18c:	2b03      	cmp	r3, #3
 800e18e:	d006      	beq.n	800e19e <STM_NextState+0xa2>
 800e190:	78fb      	ldrb	r3, [r7, #3]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d003      	beq.n	800e19e <STM_NextState+0xa2>
           || ( bState == ICLWAIT ) )
 800e196:	78fb      	ldrb	r3, [r7, #3]
 800e198:	2b0c      	cmp	r3, #12
 800e19a:	f040 80d4 	bne.w	800e346 <STM_NextState+0x24a>
      {
        bNewState = bState;
 800e19e:	78fb      	ldrb	r3, [r7, #3]
 800e1a0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e1a6:	e0ce      	b.n	800e346 <STM_NextState+0x24a>

    case IDLE_ALIGNMENT:
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800e1a8:	78fb      	ldrb	r3, [r7, #3]
 800e1aa:	2b07      	cmp	r3, #7
 800e1ac:	d006      	beq.n	800e1bc <STM_NextState+0xc0>
 800e1ae:	78fb      	ldrb	r3, [r7, #3]
 800e1b0:	2b0d      	cmp	r3, #13
 800e1b2:	d003      	beq.n	800e1bc <STM_NextState+0xc0>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800e1b4:	78fb      	ldrb	r3, [r7, #3]
 800e1b6:	2b0e      	cmp	r3, #14
 800e1b8:	f040 80c7 	bne.w	800e34a <STM_NextState+0x24e>
      {
        bNewState = bState;
 800e1bc:	78fb      	ldrb	r3, [r7, #3]
 800e1be:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e1c4:	e0c1      	b.n	800e34a <STM_NextState+0x24e>

    case ALIGN_CHARGE_BOOT_CAP:
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800e1c6:	78fb      	ldrb	r3, [r7, #3]
 800e1c8:	2b0e      	cmp	r3, #14
 800e1ca:	d003      	beq.n	800e1d4 <STM_NextState+0xd8>
 800e1cc:	78fb      	ldrb	r3, [r7, #3]
 800e1ce:	2b07      	cmp	r3, #7
 800e1d0:	f040 80bd 	bne.w	800e34e <STM_NextState+0x252>
      {
        bNewState = bState;
 800e1d4:	78fb      	ldrb	r3, [r7, #3]
 800e1d6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e1dc:	e0b7      	b.n	800e34e <STM_NextState+0x252>

    case ALIGN_OFFSET_CALIB:
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800e1de:	78fb      	ldrb	r3, [r7, #3]
 800e1e0:	2b0f      	cmp	r3, #15
 800e1e2:	d003      	beq.n	800e1ec <STM_NextState+0xf0>
 800e1e4:	78fb      	ldrb	r3, [r7, #3]
 800e1e6:	2b07      	cmp	r3, #7
 800e1e8:	f040 80b3 	bne.w	800e352 <STM_NextState+0x256>
      {
        bNewState = bState;
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e1f4:	e0ad      	b.n	800e352 <STM_NextState+0x256>

    case ALIGN_CLEAR:
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800e1f6:	78fb      	ldrb	r3, [r7, #3]
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d003      	beq.n	800e204 <STM_NextState+0x108>
 800e1fc:	78fb      	ldrb	r3, [r7, #3]
 800e1fe:	2b07      	cmp	r3, #7
 800e200:	f040 80a9 	bne.w	800e356 <STM_NextState+0x25a>
      {
        bNewState = bState;
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e208:	2301      	movs	r3, #1
 800e20a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e20c:	e0a3      	b.n	800e356 <STM_NextState+0x25a>

    case ALIGNMENT:
      if ( bState == ANY_STOP )
 800e20e:	78fb      	ldrb	r3, [r7, #3]
 800e210:	2b07      	cmp	r3, #7
 800e212:	f040 80a2 	bne.w	800e35a <STM_NextState+0x25e>
      {
        bNewState = bState;
 800e216:	78fb      	ldrb	r3, [r7, #3]
 800e218:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e21a:	2301      	movs	r3, #1
 800e21c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e21e:	e09c      	b.n	800e35a <STM_NextState+0x25e>

    case IDLE_START:
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800e220:	78fb      	ldrb	r3, [r7, #3]
 800e222:	2b07      	cmp	r3, #7
 800e224:	d00c      	beq.n	800e240 <STM_NextState+0x144>
 800e226:	78fb      	ldrb	r3, [r7, #3]
 800e228:	2b10      	cmp	r3, #16
 800e22a:	d009      	beq.n	800e240 <STM_NextState+0x144>
 800e22c:	78fb      	ldrb	r3, [r7, #3]
 800e22e:	2b04      	cmp	r3, #4
 800e230:	d006      	beq.n	800e240 <STM_NextState+0x144>
           ( bState == START ) ||
 800e232:	78fb      	ldrb	r3, [r7, #3]
 800e234:	2b11      	cmp	r3, #17
 800e236:	d003      	beq.n	800e240 <STM_NextState+0x144>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800e238:	78fb      	ldrb	r3, [r7, #3]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	f040 808f 	bne.w	800e35e <STM_NextState+0x262>
      {
        bNewState = bState;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e244:	2301      	movs	r3, #1
 800e246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e248:	e089      	b.n	800e35e <STM_NextState+0x262>

    case CHARGE_BOOT_CAP:
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800e24a:	78fb      	ldrb	r3, [r7, #3]
 800e24c:	2b11      	cmp	r3, #17
 800e24e:	d003      	beq.n	800e258 <STM_NextState+0x15c>
 800e250:	78fb      	ldrb	r3, [r7, #3]
 800e252:	2b07      	cmp	r3, #7
 800e254:	f040 8085 	bne.w	800e362 <STM_NextState+0x266>
      {
        bNewState = bState;
 800e258:	78fb      	ldrb	r3, [r7, #3]
 800e25a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e25c:	2301      	movs	r3, #1
 800e25e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e260:	e07f      	b.n	800e362 <STM_NextState+0x266>

    case OFFSET_CALIB:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800e262:	78fb      	ldrb	r3, [r7, #3]
 800e264:	2b12      	cmp	r3, #18
 800e266:	d005      	beq.n	800e274 <STM_NextState+0x178>
 800e268:	78fb      	ldrb	r3, [r7, #3]
 800e26a:	2b07      	cmp	r3, #7
 800e26c:	d002      	beq.n	800e274 <STM_NextState+0x178>
 800e26e:	78fb      	ldrb	r3, [r7, #3]
 800e270:	2b14      	cmp	r3, #20
 800e272:	d178      	bne.n	800e366 <STM_NextState+0x26a>
      {
        bNewState = bState;
 800e274:	78fb      	ldrb	r3, [r7, #3]
 800e276:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e278:	2301      	movs	r3, #1
 800e27a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e27c:	e073      	b.n	800e366 <STM_NextState+0x26a>

     case WAIT_STOP_MOTOR:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800e27e:	78fb      	ldrb	r3, [r7, #3]
 800e280:	2b12      	cmp	r3, #18
 800e282:	d002      	beq.n	800e28a <STM_NextState+0x18e>
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	2b07      	cmp	r3, #7
 800e288:	d16f      	bne.n	800e36a <STM_NextState+0x26e>
      {
        bNewState = bState;
 800e28a:	78fb      	ldrb	r3, [r7, #3]
 800e28c:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e28e:	2301      	movs	r3, #1
 800e290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e292:	e06a      	b.n	800e36a <STM_NextState+0x26e>

    case CLEAR:
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800e294:	78fb      	ldrb	r3, [r7, #3]
 800e296:	2b04      	cmp	r3, #4
 800e298:	d002      	beq.n	800e2a0 <STM_NextState+0x1a4>
 800e29a:	78fb      	ldrb	r3, [r7, #3]
 800e29c:	2b07      	cmp	r3, #7
 800e29e:	d166      	bne.n	800e36e <STM_NextState+0x272>
      {
        bNewState = bState;
 800e2a0:	78fb      	ldrb	r3, [r7, #3]
 800e2a2:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e2a8:	e061      	b.n	800e36e <STM_NextState+0x272>

    case START:
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800e2aa:	78fb      	ldrb	r3, [r7, #3]
 800e2ac:	2b13      	cmp	r3, #19
 800e2ae:	d005      	beq.n	800e2bc <STM_NextState+0x1c0>
 800e2b0:	78fb      	ldrb	r3, [r7, #3]
 800e2b2:	2b07      	cmp	r3, #7
 800e2b4:	d002      	beq.n	800e2bc <STM_NextState+0x1c0>
 800e2b6:	78fb      	ldrb	r3, [r7, #3]
 800e2b8:	2b05      	cmp	r3, #5
 800e2ba:	d15a      	bne.n	800e372 <STM_NextState+0x276>
      {
        bNewState = bState;
 800e2bc:	78fb      	ldrb	r3, [r7, #3]
 800e2be:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e2c4:	e055      	b.n	800e372 <STM_NextState+0x276>

    case SWITCH_OVER:
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800e2c6:	78fb      	ldrb	r3, [r7, #3]
 800e2c8:	2b04      	cmp	r3, #4
 800e2ca:	d005      	beq.n	800e2d8 <STM_NextState+0x1dc>
 800e2cc:	78fb      	ldrb	r3, [r7, #3]
 800e2ce:	2b07      	cmp	r3, #7
 800e2d0:	d002      	beq.n	800e2d8 <STM_NextState+0x1dc>
 800e2d2:	78fb      	ldrb	r3, [r7, #3]
 800e2d4:	2b05      	cmp	r3, #5
 800e2d6:	d14e      	bne.n	800e376 <STM_NextState+0x27a>
      {
        bNewState = bState;
 800e2d8:	78fb      	ldrb	r3, [r7, #3]
 800e2da:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e2e0:	e049      	b.n	800e376 <STM_NextState+0x27a>

    case START_RUN:
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800e2e2:	78fb      	ldrb	r3, [r7, #3]
 800e2e4:	2b06      	cmp	r3, #6
 800e2e6:	d002      	beq.n	800e2ee <STM_NextState+0x1f2>
 800e2e8:	78fb      	ldrb	r3, [r7, #3]
 800e2ea:	2b07      	cmp	r3, #7
 800e2ec:	d145      	bne.n	800e37a <STM_NextState+0x27e>
      {
        bNewState = bState;
 800e2ee:	78fb      	ldrb	r3, [r7, #3]
 800e2f0:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e2f6:	e040      	b.n	800e37a <STM_NextState+0x27e>

    case RUN:
      if ( bState == ANY_STOP )
 800e2f8:	78fb      	ldrb	r3, [r7, #3]
 800e2fa:	2b07      	cmp	r3, #7
 800e2fc:	d13f      	bne.n	800e37e <STM_NextState+0x282>
      {
        bNewState = bState;
 800e2fe:	78fb      	ldrb	r3, [r7, #3]
 800e300:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e302:	2301      	movs	r3, #1
 800e304:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e306:	e03a      	b.n	800e37e <STM_NextState+0x282>

    case ANY_STOP:
      if ( bState == STOP )
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	2b08      	cmp	r3, #8
 800e30c:	d139      	bne.n	800e382 <STM_NextState+0x286>
      {
        bNewState = bState;
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e312:	2301      	movs	r3, #1
 800e314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e316:	e034      	b.n	800e382 <STM_NextState+0x286>

    case STOP:
      if ( bState == STOP_IDLE )
 800e318:	78fb      	ldrb	r3, [r7, #3]
 800e31a:	2b09      	cmp	r3, #9
 800e31c:	d133      	bne.n	800e386 <STM_NextState+0x28a>
      {
        bNewState = bState;
 800e31e:	78fb      	ldrb	r3, [r7, #3]
 800e320:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e322:	2301      	movs	r3, #1
 800e324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e326:	e02e      	b.n	800e386 <STM_NextState+0x28a>

    case STOP_IDLE:
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800e328:	78fb      	ldrb	r3, [r7, #3]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d002      	beq.n	800e334 <STM_NextState+0x238>
 800e32e:	78fb      	ldrb	r3, [r7, #3]
 800e330:	2b0c      	cmp	r3, #12
 800e332:	d12a      	bne.n	800e38a <STM_NextState+0x28e>
      {
        bNewState = bState;
 800e334:	78fb      	ldrb	r3, [r7, #3]
 800e336:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800e338:	2301      	movs	r3, #1
 800e33a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e33c:	e025      	b.n	800e38a <STM_NextState+0x28e>
    default:
      break;
 800e33e:	bf00      	nop
 800e340:	e024      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e342:	bf00      	nop
 800e344:	e022      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e346:	bf00      	nop
 800e348:	e020      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e34a:	bf00      	nop
 800e34c:	e01e      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e34e:	bf00      	nop
 800e350:	e01c      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e352:	bf00      	nop
 800e354:	e01a      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e356:	bf00      	nop
 800e358:	e018      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e35a:	bf00      	nop
 800e35c:	e016      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e35e:	bf00      	nop
 800e360:	e014      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e362:	bf00      	nop
 800e364:	e012      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e366:	bf00      	nop
 800e368:	e010      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e36a:	bf00      	nop
 800e36c:	e00e      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e36e:	bf00      	nop
 800e370:	e00c      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e372:	bf00      	nop
 800e374:	e00a      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e376:	bf00      	nop
 800e378:	e008      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e37a:	bf00      	nop
 800e37c:	e006      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e37e:	bf00      	nop
 800e380:	e004      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e382:	bf00      	nop
 800e384:	e002      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e386:	bf00      	nop
 800e388:	e000      	b.n	800e38c <STM_NextState+0x290>
      break;
 800e38a:	bf00      	nop
  }

  if ( bChangeState )
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d003      	beq.n	800e39a <STM_NextState+0x29e>
  {
    pHandle->bState = bNewState;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	7bba      	ldrb	r2, [r7, #14]
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	e00d      	b.n	800e3b6 <STM_NextState+0x2ba>
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800e39a:	78fb      	ldrb	r3, [r7, #3]
 800e39c:	2b03      	cmp	r3, #3
 800e39e:	d00a      	beq.n	800e3b6 <STM_NextState+0x2ba>
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d007      	beq.n	800e3b6 <STM_NextState+0x2ba>
 800e3a6:	78fb      	ldrb	r3, [r7, #3]
 800e3a8:	2b07      	cmp	r3, #7
 800e3aa:	d004      	beq.n	800e3b6 <STM_NextState+0x2ba>
            || ( bState == ANY_STOP ) ) )
    {
      /* If new state is not a user command START/STOP raise a software error */
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	2180      	movs	r1, #128	; 0x80
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f805 	bl	800e3c0 <STM_FaultProcessing>
    }
  }

  return ( bChangeState );
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	807b      	strh	r3, [r7, #2]
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	803b      	strh	r3, [r7, #0]
  State_t LocalState =  pHandle->bState;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	73fb      	strb	r3, [r7, #15]

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	885a      	ldrh	r2, [r3, #2]
 800e3da:	887b      	ldrh	r3, [r7, #2]
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	b21a      	sxth	r2, r3
 800e3e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e3e6:	43db      	mvns	r3, r3
 800e3e8:	b21b      	sxth	r3, r3
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	b21b      	sxth	r3, r3
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	889a      	ldrh	r2, [r3, #4]
 800e3f8:	887b      	ldrh	r3, [r7, #2]
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	809a      	strh	r2, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800e402:	7bfb      	ldrb	r3, [r7, #15]
 800e404:	2b0a      	cmp	r3, #10
 800e406:	d109      	bne.n	800e41c <STM_FaultProcessing+0x5c>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	885b      	ldrh	r3, [r3, #2]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d10e      	bne.n	800e42e <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_OVER;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	220b      	movs	r2, #11
 800e414:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800e416:	230b      	movs	r3, #11
 800e418:	73fb      	strb	r3, [r7, #15]
 800e41a:	e008      	b.n	800e42e <STM_FaultProcessing+0x6e>
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	885b      	ldrh	r3, [r3, #2]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d004      	beq.n	800e42e <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_NOW;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	220a      	movs	r2, #10
 800e428:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 800e42a:	230a      	movs	r3, #10
 800e42c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ( LocalState );
 800e42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3714      	adds	r7, #20
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <STM_GetState>:
  * @brief  Returns the current state machine state
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  return ( pHandle->bState );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	781b      	ldrb	r3, [r3, #0]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <STM_FaultAcknowledged>:
  * @param pHanlde pointer of type  STM_Handle_t
  * @retval bool true if the state machine has been moved to IDLE, false if the
  *        method call had no effects
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
 800e454:	b480      	push	{r7}
 800e456:	b085      	sub	sp, #20
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  bool bToBeReturned = false;
 800e45c:	2300      	movs	r3, #0
 800e45e:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->bState == FAULT_OVER )
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	2b0b      	cmp	r3, #11
 800e466:	d107      	bne.n	800e478 <STM_FaultAcknowledged+0x24>
  {
    pHandle->bState = STOP_IDLE;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2209      	movs	r2, #9
 800e46c:	701a      	strb	r2, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 800e474:	2301      	movs	r3, #1
 800e476:	73fb      	strb	r3, [r7, #15]
  }

  return ( bToBeReturned );
 800e478:	7bfb      	ldrb	r3, [r7, #15]
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3714      	adds	r7, #20
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr

0800e486 <STM_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
 800e486:	b480      	push	{r7}
 800e488:	b085      	sub	sp, #20
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	889b      	ldrh	r3, [r3, #4]
 800e492:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	885b      	ldrh	r3, [r3, #2]
 800e498:	041b      	lsls	r3, r3, #16
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	60fb      	str	r3, [r7, #12]

  return LocalFaultState;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr

0800e4ae <LL_USART_EnableIT_RXNE>:
{
 800e4ae:	b480      	push	{r7}
 800e4b0:	b083      	sub	sp, #12
 800e4b2:	af00      	add	r7, sp, #0
 800e4b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f043 0220 	orr.w	r2, r3, #32
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	601a      	str	r2, [r3, #0]
}
 800e4c2:	bf00      	nop
 800e4c4:	370c      	adds	r7, #12
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <LL_USART_EnableIT_TXE>:
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b083      	sub	sp, #12
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	601a      	str	r2, [r3, #0]
}
 800e4e2:	bf00      	nop
 800e4e4:	370c      	adds	r7, #12
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr

0800e4ee <LL_USART_DisableIT_RXNE>:
{
 800e4ee:	b480      	push	{r7}
 800e4f0:	b083      	sub	sp, #12
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	f023 0220 	bic.w	r2, r3, #32
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	601a      	str	r2, [r3, #0]
}
 800e502:	bf00      	nop
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr

0800e50e <LL_USART_DisableIT_TXE>:
{
 800e50e:	b480      	push	{r7}
 800e510:	b083      	sub	sp, #12
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	601a      	str	r2, [r3, #0]
}
 800e522:	bf00      	nop
 800e524:	370c      	adds	r7, #12
 800e526:	46bd      	mov	sp, r7
 800e528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52c:	4770      	bx	lr

0800e52e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800e52e:	b480      	push	{r7}
 800e530:	b083      	sub	sp, #12
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	460b      	mov	r3, r1
 800e538:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800e53a:	78fb      	ldrb	r3, [r7, #3]
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800e542:	bf00      	nop
 800e544:	370c      	adds	r7, #12
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr

0800e54e <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b082      	sub	sp, #8
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fc fc5f 	bl	800ae1c <FCP_Init>
}
 800e55e:	bf00      	nop
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
	...

0800e568 <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b087      	sub	sp, #28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	460b      	mov	r3, r1
 800e572:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800e574:	4b4b      	ldr	r3, [pc, #300]	; (800e6a4 <UFCP_RX_IRQ_Handler+0x13c>)
 800e576:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 8089 	beq.w	800e69a <UFCP_RX_IRQ_Handler+0x132>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800e588:	887b      	ldrh	r3, [r7, #2]
 800e58a:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <UFCP_RX_IRQ_Handler+0x34>
 800e596:	2b01      	cmp	r3, #1
 800e598:	d013      	beq.n	800e5c2 <UFCP_RX_IRQ_Handler+0x5a>
 800e59a:	e029      	b.n	800e5f0 <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	7bfa      	ldrb	r2, [r7, #15]
 800e5a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800e5a4:	4b40      	ldr	r3, [pc, #256]	; (800e6a8 <UFCP_RX_IRQ_Handler+0x140>)
 800e5a6:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	8a1a      	ldrh	r2, [r3, #16]
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800e5c0:	e06b      	b.n	800e69a <UFCP_RX_IRQ_Handler+0x132>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	7bfa      	ldrb	r2, [r7, #15]
 800e5c6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e5e0:	b25b      	sxtb	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	da58      	bge.n	800e698 <UFCP_RX_IRQ_Handler+0x130>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800e5ee:	e053      	b.n	800e698 <UFCP_RX_IRQ_Handler+0x130>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e5fe:	3302      	adds	r3, #2
 800e600:	429a      	cmp	r2, r3
 800e602:	da11      	bge.n	800e628 <UFCP_RX_IRQ_Handler+0xc0>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800e60a:	3b02      	subs	r3, #2
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	4413      	add	r3, r2
 800e610:	7bfa      	ldrb	r2, [r7, #15]
 800e612:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800e61c:	3301      	adds	r3, #1
 800e61e:	b2da      	uxtb	r2, r3
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800e626:	e038      	b.n	800e69a <UFCP_RX_IRQ_Handler+0x132>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	7bfa      	ldrb	r2, [r7, #15]
 800e62c:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800e630:	4b1e      	ldr	r3, [pc, #120]	; (800e6ac <UFCP_RX_IRQ_Handler+0x144>)
 800e632:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	2200      	movs	r2, #0
 800e638:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e640:	4618      	mov	r0, r3
 800e642:	f7ff ff54 	bl	800e4ee <LL_USART_DisableIT_RXNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2200      	movs	r2, #0
 800e64a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	3399      	adds	r3, #153	; 0x99
 800e652:	4618      	mov	r0, r3
 800e654:	f7fc fc31 	bl	800aeba <FCP_CalcCRC>
 800e658:	4603      	mov	r3, r0
 800e65a:	461a      	mov	r2, r3
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800e662:	429a      	cmp	r2, r3
 800e664:	d10e      	bne.n	800e684 <UFCP_RX_IRQ_Handler+0x11c>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	689c      	ldr	r4, [r3, #8]
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	6818      	ldr	r0, [r3, #0]
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e680:	47a0      	blx	r4
 800e682:	e00a      	b.n	800e69a <UFCP_RX_IRQ_Handler+0x132>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800e684:	230a      	movs	r3, #10
 800e686:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800e688:	f107 020e 	add.w	r2, r7, #14
 800e68c:	2301      	movs	r3, #1
 800e68e:	21ff      	movs	r1, #255	; 0xff
 800e690:	6938      	ldr	r0, [r7, #16]
 800e692:	f000 f8a3 	bl	800e7dc <UFCP_Send>
 800e696:	e000      	b.n	800e69a <UFCP_RX_IRQ_Handler+0x132>
        break;
 800e698:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800e69a:	697b      	ldr	r3, [r7, #20]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	371c      	adds	r7, #28
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd90      	pop	{r4, r7, pc}
 800e6a4:	0800f89a 	.word	0x0800f89a
 800e6a8:	0800f89c 	.word	0x0800f89c
 800e6ac:	0800f89e 	.word	0x0800f89e

0800e6b0 <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d050      	beq.n	800e768 <UFCP_TX_IRQ_Handler+0xb8>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d002      	beq.n	800e6d6 <UFCP_TX_IRQ_Handler+0x26>
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d004      	beq.n	800e6de <UFCP_TX_IRQ_Handler+0x2e>
 800e6d4:	e007      	b.n	800e6e6 <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	7d1b      	ldrb	r3, [r3, #20]
 800e6da:	81fb      	strh	r3, [r7, #14]
        break;
 800e6dc:	e019      	b.n	800e712 <UFCP_TX_IRQ_Handler+0x62>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	7d5b      	ldrb	r3, [r3, #21]
 800e6e2:	81fb      	strh	r3, [r7, #14]
        break;
 800e6e4:	e015      	b.n	800e712 <UFCP_TX_IRQ_Handler+0x62>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	7d5b      	ldrb	r3, [r3, #21]
 800e6f2:	3302      	adds	r3, #2
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	da08      	bge.n	800e70a <UFCP_TX_IRQ_Handler+0x5a>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e6fe:	3b02      	subs	r3, #2
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	4413      	add	r3, r2
 800e704:	7d9b      	ldrb	r3, [r3, #22]
 800e706:	81fb      	strh	r3, [r7, #14]
 800e708:	e003      	b.n	800e712 <UFCP_TX_IRQ_Handler+0x62>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e710:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e718:	89fa      	ldrh	r2, [r7, #14]
 800e71a:	b2d2      	uxtb	r2, r2
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff ff05 	bl	800e52e <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e72a:	461a      	mov	r2, r3
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	7d5b      	ldrb	r3, [r3, #21]
 800e730:	3302      	adds	r3, #2
 800e732:	429a      	cmp	r2, r3
 800e734:	da08      	bge.n	800e748 <UFCP_TX_IRQ_Handler+0x98>
    {
      pBaseHandle->TxFrameLevel++;
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e73c:	3301      	adds	r3, #1
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800e746:	e00f      	b.n	800e768 <UFCP_TX_IRQ_Handler+0xb8>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e74e:	4618      	mov	r0, r3
 800e750:	f7ff fedd 	bl	800e50e <LL_USART_DisableIT_TXE>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	6812      	ldr	r2, [r2, #0]
 800e764:	4610      	mov	r0, r2
 800e766:	4798      	blx	r3
}
 800e768:	bf00      	nop
 800e76a:	3710      	adds	r7, #16
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800e77c:	2308      	movs	r3, #8
 800e77e:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800e780:	f107 020b 	add.w	r2, r7, #11
 800e784:	2301      	movs	r3, #1
 800e786:	21ff      	movs	r1, #255	; 0xff
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f000 f827 	bl	800e7dc <UFCP_Send>

}
 800e78e:	bf00      	nop
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b084      	sub	sp, #16
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d112      	bne.n	800e7ce <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7ff fe73 	bl	800e4ae <LL_USART_EnableIT_RXNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800e7c8:	2302      	movs	r3, #2
 800e7ca:	73fb      	strb	r3, [r7, #15]
 800e7cc:	e001      	b.n	800e7d2 <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800e7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b088      	sub	sp, #32
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	607a      	str	r2, [r7, #4]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	72fb      	strb	r3, [r7, #11]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d133      	bne.n	800e862 <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	3316      	adds	r3, #22
 800e802:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	7afa      	ldrb	r2, [r7, #11]
 800e808:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	7aba      	ldrb	r2, [r7, #10]
 800e80e:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800e810:	e007      	b.n	800e822 <UFCP_Send+0x46>
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	1c53      	adds	r3, r2, #1
 800e816:	607b      	str	r3, [r7, #4]
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	1c59      	adds	r1, r3, #1
 800e81c:	61b9      	str	r1, [r7, #24]
 800e81e:	7812      	ldrb	r2, [r2, #0]
 800e820:	701a      	strb	r2, [r3, #0]
 800e822:	7abb      	ldrb	r3, [r7, #10]
 800e824:	1e5a      	subs	r2, r3, #1
 800e826:	72ba      	strb	r2, [r7, #10]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1f2      	bne.n	800e812 <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3314      	adds	r3, #20
 800e830:	4618      	mov	r0, r3
 800e832:	f7fc fb42 	bl	800aeba <FCP_CalcCRC>
 800e836:	4603      	mov	r3, r0
 800e838:	461a      	mov	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2201      	movs	r2, #1
 800e84c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fe39 	bl	800e4ce <LL_USART_EnableIT_TXE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800e85c:	2302      	movs	r3, #2
 800e85e:	77fb      	strb	r3, [r7, #31]
 800e860:	e001      	b.n	800e866 <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800e862:	2301      	movs	r3, #1
 800e864:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800e866:	7ffb      	ldrb	r3, [r7, #31]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3720      	adds	r7, #32
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr

0800e88c <VSS_Init>:
* @brief  Software initialization of VirtualSpeedSensor component
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Init( VirtualSpeedSensor_Handle_t * pHandle )
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
#ifdef FASTDIV
  FD_Init( &( pHandle->fd ) );
#endif

  VSS_Clear( pHandle );
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f000 f804 	bl	800e8a2 <VSS_Clear>
}
 800e89a:	bf00      	nop
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 800e8a2:	b480      	push	{r7}
 800e8a4:	b083      	sub	sp, #12
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	6078      	str	r0, [r7, #4]

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.hElAngle = 0;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.hMecAngle = 0;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	819a      	strh	r2, [r3, #12]
  pHandle->_Super.hElSpeedDpp = 0;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	81da      	strh	r2, [r3, #14]
  pHandle->_Super.hMecAccelUnitP = 0;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	825a      	strh	r2, [r3, #18]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	701a      	strb	r2, [r3, #0]

  pHandle->wElAccDppP32 = 0;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	621a      	str	r2, [r3, #32]
  pHandle->wElSpeedDpp32 = 0;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	851a      	strh	r2, [r3, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	861a      	strh	r2, [r3, #48]	; 0x30

  pHandle->bTransitionStarted = false;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	85da      	strh	r2, [r3, #46]	; 0x2e
  pHandle->bTransitionLocked = false;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800e916:	bf00      	nop
 800e918:	370c      	adds	r7, #12
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr

0800e922 <VSS_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t VSS_CalcElAngle( VirtualSpeedSensor_Handle_t * pHandle, void * pInputVars_str )
{
 800e922:	b480      	push	{r7}
 800e924:	b087      	sub	sp, #28
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	6039      	str	r1, [r7, #0]

  int16_t hRetAngle;
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;
 800e92c:	2301      	movs	r3, #1
 800e92e:	827b      	strh	r3, [r7, #18]

  if ( pHandle->bCopyObserver == true )
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800e936:	2b00      	cmp	r3, #0
 800e938:	d003      	beq.n	800e942 <VSS_CalcElAngle+0x20>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	881b      	ldrh	r3, [r3, #0]
 800e93e:	82fb      	strh	r3, [r7, #22]
 800e940:	e09a      	b.n	800ea78 <VSS_CalcElAngle+0x156>
  }
  else
  {
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e948:	b29a      	uxth	r2, r3
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e950:	b29b      	uxth	r3, r3
 800e952:	4413      	add	r3, r2
 800e954:	b29b      	uxth	r3, r3
 800e956:	b21a      	sxth	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	861a      	strh	r2, [r3, #48]	; 0x30
#ifdef FASTDIV
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                 ( int32_t )pHandle->_Super.hElSpeedDpp,
                                 ( int32_t )pHandle->_Super.bElToMecRatio ) );
#else
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e962:	b29a      	uxth	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e96a:	4619      	mov	r1, r3
                                 ( int16_t )pHandle->_Super.bElToMecRatio;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	785b      	ldrb	r3, [r3, #1]
    pHandle->_Super.hMecAngle += pHandle->_Super.hElSpeedDpp /
 800e970:	fb91 f3f3 	sdiv	r3, r1, r3
 800e974:	b29b      	uxth	r3, r3
 800e976:	4413      	add	r3, r2
 800e978:	b29b      	uxth	r3, r3
 800e97a:	b21a      	sxth	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	80da      	strh	r2, [r3, #6]
#endif

    if ( pHandle->bTransitionStarted == true )
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e986:	2b00      	cmp	r3, #0
 800e988:	d073      	beq.n	800ea72 <VSS_CalcElAngle+0x150>
    {
      if ( pHandle->hTransitionRemainingSteps == 0 )
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e990:	2b00      	cmp	r3, #0
 800e992:	d10a      	bne.n	800e9aa <VSS_CalcElAngle+0x88>
      {
        hRetAngle = *( int16_t * )pInputVars_str;
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	82fb      	strh	r3, [r7, #22]
        pHandle->bTransitionEnded = true;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2201      	movs	r2, #1
 800e99e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0u;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	701a      	strb	r2, [r3, #0]
 800e9a8:	e066      	b.n	800ea78 <VSS_CalcElAngle+0x156>
      }
      else
      {
        pHandle->hTransitionRemainingSteps--;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	b21a      	sxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	db0b      	blt.n	800e9de <VSS_CalcElAngle+0xbc>
        {
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9cc:	b29a      	uxth	r2, r3
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	82bb      	strh	r3, [r7, #20]
 800e9dc:	e00d      	b.n	800e9fa <VSS_CalcElAngle+0xd8>
        }
        else
        {
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	1ad3      	subs	r3, r2, r3
 800e9f0:	b29b      	uxth	r3, r3
 800e9f2:	82bb      	strh	r3, [r7, #20]
          hSignCorr = -1;
 800e9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9f8:	827b      	strh	r3, [r7, #18]
        }

        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800e9fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	; 0x2e
 800ea04:	fb02 f303 	mul.w	r3, r2, r3
 800ea08:	60fb      	str	r3, [r7, #12]
#ifdef FASTDIV
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
                                              wAux,
                                              ( int32_t )( pHandle->hTransitionSteps ) ) );
#else
        hAngleCorr = ( int16_t )( wAux / pHandle->hTransitionSteps );
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ea10:	461a      	mov	r2, r3
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea18:	817b      	strh	r3, [r7, #10]
#endif

        hAngleCorr *= hSignCorr;
 800ea1a:	897a      	ldrh	r2, [r7, #10]
 800ea1c:	8a7b      	ldrh	r3, [r7, #18]
 800ea1e:	fb12 f303 	smulbb	r3, r2, r3
 800ea22:	b29b      	uxth	r3, r3
 800ea24:	817b      	strh	r3, [r7, #10]

        if ( hAngleDiff >= 0 )
 800ea26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	db0c      	blt.n	800ea48 <VSS_CalcElAngle+0x126>
        {
          pHandle->bTransitionLocked = true;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	897b      	ldrh	r3, [r7, #10]
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	82fb      	strh	r3, [r7, #22]
 800ea46:	e017      	b.n	800ea78 <VSS_CalcElAngle+0x156>
        }
        else
        {
          if ( pHandle->bTransitionLocked == false )
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ea4e:	f083 0301 	eor.w	r3, r3, #1
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d003      	beq.n	800ea60 <VSS_CalcElAngle+0x13e>
          {
            hRetAngle = pHandle->hElAngleAccu;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ea5c:	82fb      	strh	r3, [r7, #22]
 800ea5e:	e00b      	b.n	800ea78 <VSS_CalcElAngle+0x156>
          }
          else
          {
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	897b      	ldrh	r3, [r7, #10]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	82fb      	strh	r3, [r7, #22]
 800ea70:	e002      	b.n	800ea78 <VSS_CalcElAngle+0x156>
        }
      }
    }
    else
    {
      hRetAngle = pHandle->hElAngleAccu;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ea76:	82fb      	strh	r3, [r7, #22]
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	8afa      	ldrh	r2, [r7, #22]
 800ea7c:	809a      	strh	r2, [r3, #4]
  return hRetAngle;
 800ea7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	371c      	adds	r7, #28
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr

0800ea8e <VSS_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (SPED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 800ea8e:	b580      	push	{r7, lr}
 800ea90:	b084      	sub	sp, #16
 800ea92:	af00      	add	r7, sp, #0
 800ea94:	6078      	str	r0, [r7, #4]
 800ea96:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = false;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->hRemainingStep > 1u )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d936      	bls.n	800eb12 <VSS_CalcAvrgMecSpeedUnit+0x84>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a1b      	ldr	r3, [r3, #32]
 800eaac:	441a      	add	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	625a      	str	r2, [r3, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	da02      	bge.n	800eac0 <VSS_CalcAvrgMecSpeedUnit+0x32>
 800eaba:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800eabe:	33ff      	adds	r3, #255	; 0xff
 800eac0:	141b      	asrs	r3, r3, #16
 800eac2:	b21a      	sxth	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	81da      	strh	r2, [r3, #14]

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800eace:	461a      	mov	r2, r3
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	8b5b      	ldrh	r3, [r3, #26]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800ead4:	fb03 f202 	mul.w	r2, r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800ead8:	4613      	mov	r3, r2
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	4413      	add	r3, r2
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	461a      	mov	r2, r3
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	69db      	ldr	r3, [r3, #28]
 800eae6:	4619      	mov	r1, r3
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	785b      	ldrb	r3, [r3, #1]
 800eaec:	fb03 f301 	mul.w	r3, r3, r1
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800eaf0:	fb92 f3f3 	sdiv	r3, r2, r3
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 800eaf4:	b21a      	sxth	r2, r3
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	819a      	strh	r2, [r3, #12]

    pHandle->hRemainingStep--;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	851a      	strh	r2, [r3, #40]	; 0x28
 800eb10:	e037      	b.n	800eb82 <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else if ( pHandle->hRemainingStep == 1u )
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d12e      	bne.n	800eb78 <VSS_CalcAvrgMecSpeedUnit+0xea>
  {
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	801a      	strh	r2, [r3, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	f9b3 2000 	ldrsh.w	r2, [r3]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	819a      	strh	r2, [r3, #12]

    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800eb34:	461a      	mov	r2, r3
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	69db      	ldr	r3, [r3, #28]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800eb3a:	fb03 f202 	mul.w	r2, r3, r2
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8b5b      	ldrh	r3, [r3, #26]
 800eb42:	4619      	mov	r1, r3
 800eb44:	460b      	mov	r3, r1
 800eb46:	009b      	lsls	r3, r3, #2
 800eb48:	440b      	add	r3, r1
 800eb4a:	005b      	lsls	r3, r3, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 800eb4c:	fb92 f3f3 	sdiv	r3, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 800eb50:	b21a      	sxth	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	81da      	strh	r2, [r3, #14]

    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	785b      	ldrb	r3, [r3, #1]
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	fb12 f303 	smulbb	r3, r2, r3
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	b21a      	sxth	r2, r3
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	81da      	strh	r2, [r3, #14]

    pHandle->hRemainingStep = 0u;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	851a      	strh	r2, [r3, #40]	; 0x28
 800eb76:	e004      	b.n	800eb82 <VSS_CalcAvrgMecSpeedUnit+0xf4>
  }
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	801a      	strh	r2, [r3, #0]
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb88:	f083 0301 	eor.w	r3, r3, #1
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d006      	beq.n	800eba0 <VSS_CalcAvrgMecSpeedUnit+0x112>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	78da      	ldrb	r2, [r3, #3]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	701a      	strb	r2, [r3, #0]
    SpeedSensorReliability = false;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	73fb      	strb	r3, [r7, #15]
 800eb9e:	e006      	b.n	800ebae <VSS_CalcAvrgMecSpeedUnit+0x120>
  }
  else
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7ff f817 	bl	800dbd8 <SPD_IsMecSpeedReliable>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73fb      	strb	r3, [r7, #15]
  }

  return ( SpeedSensorReliability );
 800ebae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	807b      	strh	r3, [r7, #2]

  pHandle->hElAngleAccu = hMecAngle;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	887a      	ldrh	r2, [r7, #2]
 800ebc8:	861a      	strh	r2, [r3, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	785b      	ldrb	r3, [r3, #1]
 800ebd6:	fb92 f3f3 	sdiv	r3, r2, r3
 800ebda:	b21a      	sxth	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	887a      	ldrh	r2, [r7, #2]
 800ebe4:	809a      	strh	r2, [r3, #4]
}
 800ebe6:	bf00      	nop
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	460b      	mov	r3, r1
 800ebfe:	807b      	strh	r3, [r7, #2]
 800ec00:	4613      	mov	r3, r2
 800ec02:	803b      	strh	r3, [r7, #0]
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ec0a:	f083 0301 	eor.w	r3, r3, #1
 800ec0e:	b2db      	uxtb	r3, r3
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d06f      	beq.n	800ecf4 <VSS_SetMecAcceleration+0x100>
  {
    if ( hDurationms == 0u )
 800ec14:	883b      	ldrh	r3, [r7, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d128      	bne.n	800ec6c <VSS_SetMecAcceleration+0x78>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	887a      	ldrh	r2, [r7, #2]
 800ec1e:	819a      	strh	r2, [r3, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800ec20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	69d2      	ldr	r2, [r2, #28]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800ec28:	fb02 f203 	mul.w	r2, r2, r3
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	8b5b      	ldrh	r3, [r3, #26]
 800ec30:	4619      	mov	r1, r3
 800ec32:	460b      	mov	r3, r1
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	440b      	add	r3, r1
 800ec38:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800ec3a:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800ec3e:	b21a      	sxth	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	81da      	strh	r2, [r3, #14]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	785b      	ldrb	r3, [r3, #1]
 800ec50:	b29b      	uxth	r3, r3
 800ec52:	fb12 f303 	smulbb	r3, r2, r3
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	b21a      	sxth	r2, r3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	81da      	strh	r2, [r3, #14]

      pHandle->hRemainingStep = 0u;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	851a      	strh	r2, [r3, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	887a      	ldrh	r2, [r7, #2]
 800ec68:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800ec6a:	e043      	b.n	800ecf4 <VSS_SetMecAcceleration+0x100>
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800ec6c:	883b      	ldrh	r3, [r7, #0]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	8e92      	ldrh	r2, [r2, #52]	; 0x34
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800ec72:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800ec76:	4a22      	ldr	r2, [pc, #136]	; (800ed00 <VSS_SetMecAcceleration+0x10c>)
 800ec78:	fba2 2303 	umull	r2, r3, r2, r3
 800ec7c:	099b      	lsrs	r3, r3, #6
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800ec7e:	82fb      	strh	r3, [r7, #22]
      hNbrStep++;
 800ec80:	8afb      	ldrh	r3, [r7, #22]
 800ec82:	3301      	adds	r3, #1
 800ec84:	82fb      	strh	r3, [r7, #22]
      pHandle->hRemainingStep = hNbrStep;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	8afa      	ldrh	r2, [r7, #22]
 800ec8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ec92:	461a      	mov	r2, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	785b      	ldrb	r3, [r3, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800ec98:	fb92 f3f3 	sdiv	r3, r2, r3
 800ec9c:	82bb      	strh	r3, [r7, #20]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800ec9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	69d2      	ldr	r2, [r2, #28]
 800eca6:	fb02 f203 	mul.w	r2, r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	8b5b      	ldrh	r3, [r3, #26]
 800ecae:	4619      	mov	r1, r3
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	440b      	add	r3, r1
 800ecb6:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800ecb8:	fb92 f3f3 	sdiv	r3, r2, r3
 800ecbc:	827b      	strh	r3, [r7, #18]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800ecbe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ecc2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	041a      	lsls	r2, r3, #16
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;
 800ecca:	8afb      	ldrh	r3, [r7, #22]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800eccc:	fb92 f3f3 	sdiv	r3, r2, r3
 800ecd0:	60fb      	str	r3, [r7, #12]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	785b      	ldrb	r3, [r3, #1]
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	fb03 f202 	mul.w	r2, r3, r2
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	621a      	str	r2, [r3, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	887a      	ldrh	r2, [r7, #2]
 800ece6:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ecee:	041a      	lsls	r2, r3, #16
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ecf4:	bf00      	nop
 800ecf6:	371c      	adds	r7, #28
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	10624dd3 	.word	0x10624dd3

0800ed04 <VSS_SetStartTransition>:
  * @retval bool true if Transition phase is enabled (started or not), false if
            transition has been triggered but it's actually disabled
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	70fb      	strb	r3, [r7, #3]
  bool bAux = true;
 800ed10:	2301      	movs	r3, #1
 800ed12:	73fb      	strb	r3, [r7, #15]
  if ( bCommand == true )
 800ed14:	78fb      	ldrb	r3, [r7, #3]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d011      	beq.n	800ed3e <VSS_SetStartTransition+0x3a>
  {
    pHandle->bTransitionStarted = true;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if ( pHandle->hTransitionSteps == 0 )
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d108      	bne.n	800ed3e <VSS_SetStartTransition+0x3a>
    {
      pHandle->bTransitionEnded = true;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      pHandle->_Super.bSpeedErrorNumber = 0u;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2200      	movs	r2, #0
 800ed38:	701a      	strb	r2, [r3, #0]
      bAux = false;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return bAux;
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3714      	adds	r7, #20
 800ed44:	46bd      	mov	sp, r7
 800ed46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4a:	4770      	bx	lr

0800ed4c <VSS_TransitionEnded>:
  }
  return ( retVal );
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
    return pHandle->bTransitionEnded;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr
	...

0800ed68 <RUC_Init>:
 800ed68:	b430      	push	{r4, r5}
 800ed6a:	6681      	str	r1, [r0, #104]	; 0x68
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	9c02      	ldr	r4, [sp, #8]
 800ed70:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 800ed74:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
 800ed78:	f110 010c 	adds.w	r1, r0, #12
 800ed7c:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
 800ed80:	6744      	str	r4, [r0, #116]	; 0x74
 800ed82:	d023      	beq.n	800edcc <RUC_Init+0x64>
 800ed84:	6943      	ldr	r3, [r0, #20]
 800ed86:	b323      	cbz	r3, 800edd2 <RUC_Init+0x6a>
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	b323      	cbz	r3, 800edd6 <RUC_Init+0x6e>
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	b323      	cbz	r3, 800edda <RUC_Init+0x72>
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	b1c3      	cbz	r3, 800edc6 <RUC_Init+0x5e>
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	2105      	movs	r1, #5
 800ed98:	b1b3      	cbz	r3, 800edc8 <RUC_Init+0x60>
 800ed9a:	2204      	movs	r2, #4
 800ed9c:	2105      	movs	r1, #5
 800ed9e:	8805      	ldrh	r5, [r0, #0]
 800eda0:	4c0f      	ldr	r4, [pc, #60]	; (800ede0 <RUC_Init+0x78>)
 800eda2:	2364      	movs	r3, #100	; 0x64
 800eda4:	fb03 f305 	mul.w	r3, r3, r5
 800eda8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800edac:	fba4 4303 	umull	r4, r3, r4, r3
 800edb0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800edb4:	2400      	movs	r4, #0
 800edb6:	099b      	lsrs	r3, r3, #6
 800edb8:	6154      	str	r4, [r2, #20]
 800edba:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
 800edbe:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
 800edc2:	bc30      	pop	{r4, r5}
 800edc4:	4770      	bx	lr
 800edc6:	2104      	movs	r1, #4
 800edc8:	1e4a      	subs	r2, r1, #1
 800edca:	e7e8      	b.n	800ed9e <RUC_Init+0x36>
 800edcc:	f04f 32ff 	mov.w	r2, #4294967295
 800edd0:	e7e5      	b.n	800ed9e <RUC_Init+0x36>
 800edd2:	2101      	movs	r1, #1
 800edd4:	e7f8      	b.n	800edc8 <RUC_Init+0x60>
 800edd6:	2102      	movs	r1, #2
 800edd8:	e7f6      	b.n	800edc8 <RUC_Init+0x60>
 800edda:	2103      	movs	r1, #3
 800eddc:	e7f4      	b.n	800edc8 <RUC_Init+0x60>
 800edde:	bf00      	nop
 800ede0:	10624dd3 	.word	0x10624dd3

0800ede4 <RUC_Clear>:
 800ede4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede8:	4604      	mov	r4, r0
 800edea:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
 800edec:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
 800edf0:	80e1      	strh	r1, [r4, #6]
 800edf2:	2500      	movs	r5, #0
 800edf4:	4638      	mov	r0, r7
 800edf6:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
 800edfa:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800edfe:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 800ee02:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
 800ee06:	460e      	mov	r6, r1
 800ee08:	f7ff fd4b 	bl	800e8a2 <VSS_Clear>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	4640      	mov	r0, r8
 800ee10:	f7fe ffe8 	bl	800dde4 <STC_SetControlMode>
 800ee14:	8861      	ldrh	r1, [r4, #2]
 800ee16:	b2b6      	uxth	r6, r6
 800ee18:	fb11 f106 	smulbb	r1, r1, r6
 800ee1c:	b209      	sxth	r1, r1
 800ee1e:	4638      	mov	r0, r7
 800ee20:	f7ff feca 	bl	800ebb8 <VSS_SetMecAngle>
 800ee24:	462a      	mov	r2, r5
 800ee26:	4629      	mov	r1, r5
 800ee28:	4640      	mov	r0, r8
 800ee2a:	f7fe ffed 	bl	800de08 <STC_ExecRamp>
 800ee2e:	8a21      	ldrh	r1, [r4, #16]
 800ee30:	89a2      	ldrh	r2, [r4, #12]
 800ee32:	fb11 f106 	smulbb	r1, r1, r6
 800ee36:	b209      	sxth	r1, r1
 800ee38:	4640      	mov	r0, r8
 800ee3a:	f7fe ffe5 	bl	800de08 <STC_ExecRamp>
 800ee3e:	89e1      	ldrh	r1, [r4, #14]
 800ee40:	89a2      	ldrh	r2, [r4, #12]
 800ee42:	fb11 f106 	smulbb	r1, r1, r6
 800ee46:	4638      	mov	r0, r7
 800ee48:	b209      	sxth	r1, r1
 800ee4a:	f7ff fed3 	bl	800ebf4 <VSS_SetMecAcceleration>
 800ee4e:	89a0      	ldrh	r0, [r4, #12]
 800ee50:	8823      	ldrh	r3, [r4, #0]
 800ee52:	4907      	ldr	r1, [pc, #28]	; (800ee70 <RUC_Clear+0x8c>)
 800ee54:	6962      	ldr	r2, [r4, #20]
 800ee56:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 800ee5a:	fb03 f300 	mul.w	r3, r3, r0
 800ee5e:	fba1 1303 	umull	r1, r3, r1, r3
 800ee62:	099b      	lsrs	r3, r3, #6
 800ee64:	3301      	adds	r3, #1
 800ee66:	80a3      	strh	r3, [r4, #4]
 800ee68:	60a2      	str	r2, [r4, #8]
 800ee6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6e:	bf00      	nop
 800ee70:	10624dd3 	.word	0x10624dd3

0800ee74 <RUC_Exec>:
 800ee74:	b538      	push	{r3, r4, r5, lr}
 800ee76:	8883      	ldrh	r3, [r0, #4]
 800ee78:	bb53      	cbnz	r3, 800eed0 <RUC_Exec+0x5c>
 800ee7a:	6883      	ldr	r3, [r0, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d02e      	beq.n	800eede <RUC_Exec+0x6a>
 800ee80:	88c5      	ldrh	r5, [r0, #6]
 800ee82:	8899      	ldrh	r1, [r3, #4]
 800ee84:	881a      	ldrh	r2, [r3, #0]
 800ee86:	4604      	mov	r4, r0
 800ee88:	fb11 f105 	smulbb	r1, r1, r5
 800ee8c:	b209      	sxth	r1, r1
 800ee8e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ee90:	f7fe ffba 	bl	800de08 <STC_ExecRamp>
 800ee94:	68a3      	ldr	r3, [r4, #8]
 800ee96:	88e5      	ldrh	r5, [r4, #6]
 800ee98:	8859      	ldrh	r1, [r3, #2]
 800ee9a:	881a      	ldrh	r2, [r3, #0]
 800ee9c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ee9e:	fb11 f105 	smulbb	r1, r1, r5
 800eea2:	b209      	sxth	r1, r1
 800eea4:	f7ff fea6 	bl	800ebf4 <VSS_SetMecAcceleration>
 800eea8:	68a2      	ldr	r2, [r4, #8]
 800eeaa:	8823      	ldrh	r3, [r4, #0]
 800eeac:	8810      	ldrh	r0, [r2, #0]
 800eeae:	490d      	ldr	r1, [pc, #52]	; (800eee4 <RUC_Exec+0x70>)
 800eeb0:	6892      	ldr	r2, [r2, #8]
 800eeb2:	60a2      	str	r2, [r4, #8]
 800eeb4:	fb03 f300 	mul.w	r3, r3, r0
 800eeb8:	fba1 2303 	umull	r2, r3, r1, r3
 800eebc:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800eec0:	099b      	lsrs	r3, r3, #6
 800eec2:	3301      	adds	r3, #1
 800eec4:	3201      	adds	r2, #1
 800eec6:	80a3      	strh	r3, [r4, #4]
 800eec8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 800eecc:	2001      	movs	r0, #1
 800eece:	bd38      	pop	{r3, r4, r5, pc}
 800eed0:	3b01      	subs	r3, #1
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	8083      	strh	r3, [r0, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d0cf      	beq.n	800ee7a <RUC_Exec+0x6>
 800eeda:	2001      	movs	r0, #1
 800eedc:	e7f7      	b.n	800eece <RUC_Exec+0x5a>
 800eede:	4618      	mov	r0, r3
 800eee0:	bd38      	pop	{r3, r4, r5, pc}
 800eee2:	bf00      	nop
 800eee4:	10624dd3 	.word	0x10624dd3

0800eee8 <RUC_FirstAccelerationStageReached>:
 800eee8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 800eeec:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
 800eef0:	4282      	cmp	r2, r0
 800eef2:	bf34      	ite	cc
 800eef4:	2000      	movcc	r0, #0
 800eef6:	2001      	movcs	r0, #1
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop

0800eefc <RUC_SetPhaseDurationms>:
 800eefc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef04:	818a      	strh	r2, [r1, #12]
 800ef06:	4770      	bx	lr

0800ef08 <RUC_SetPhaseFinalMecSpeedUnit>:
 800ef08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef10:	81ca      	strh	r2, [r1, #14]
 800ef12:	4770      	bx	lr

0800ef14 <RUC_SetPhaseFinalTorque>:
 800ef14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef1c:	820a      	strh	r2, [r1, #16]
 800ef1e:	4770      	bx	lr

0800ef20 <RUC_GetPhaseDurationms>:
 800ef20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef28:	8988      	ldrh	r0, [r1, #12]
 800ef2a:	4770      	bx	lr

0800ef2c <RUC_GetPhaseFinalMecSpeedUnit>:
 800ef2c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef34:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop

0800ef3c <RUC_GetPhaseFinalTorque>:
 800ef3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ef40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef44:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop

0800ef4c <RUC_GetNumberOfPhases>:
 800ef4c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop

0800ef54 <STO_PLL_CalcElAngle>:
 800ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef58:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 800ef5c:	f8d0 e068 	ldr.w	lr, [r0, #104]	; 0x68
 800ef60:	4604      	mov	r4, r0
 800ef62:	03d8      	lsls	r0, r3, #15
 800ef64:	1ac2      	subs	r2, r0, r3
 800ef66:	4596      	cmp	lr, r2
 800ef68:	b089      	sub	sp, #36	; 0x24
 800ef6a:	f340 80bb 	ble.w	800f0e4 <STO_PLL_CalcElAngle+0x190>
 800ef6e:	66a2      	str	r2, [r4, #104]	; 0x68
 800ef70:	4696      	mov	lr, r2
 800ef72:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
 800ef76:	f8d4 c06c 	ldr.w	ip, [r4, #108]	; 0x6c
 800ef7a:	fa4e f605 	asr.w	r6, lr, r5
 800ef7e:	9605      	str	r6, [sp, #20]
 800ef80:	4562      	cmp	r2, ip
 800ef82:	b236      	sxth	r6, r6
 800ef84:	9600      	str	r6, [sp, #0]
 800ef86:	f280 80bf 	bge.w	800f108 <STO_PLL_CalcElAngle+0x1b4>
 800ef8a:	66e2      	str	r2, [r4, #108]	; 0x6c
 800ef8c:	4694      	mov	ip, r2
 800ef8e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800ef92:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ef94:	03de      	lsls	r6, r3, #15
 800ef96:	fa4c f205 	asr.w	r2, ip, r5
 800ef9a:	1af5      	subs	r5, r6, r3
 800ef9c:	9202      	str	r2, [sp, #8]
 800ef9e:	42a8      	cmp	r0, r5
 800efa0:	b212      	sxth	r2, r2
 800efa2:	9201      	str	r2, [sp, #4]
 800efa4:	f340 80aa 	ble.w	800f0fc <STO_PLL_CalcElAngle+0x1a8>
 800efa8:	6625      	str	r5, [r4, #96]	; 0x60
 800efaa:	4628      	mov	r0, r5
 800efac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efae:	4295      	cmp	r5, r2
 800efb0:	f280 809e 	bge.w	800f0f0 <STO_PLL_CalcElAngle+0x19c>
 800efb4:	6665      	str	r5, [r4, #100]	; 0x64
 800efb6:	462a      	mov	r2, r5
 800efb8:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
 800efbc:	f9b4 a020 	ldrsh.w	sl, [r4, #32]
 800efc0:	88cd      	ldrh	r5, [r1, #6]
 800efc2:	890e      	ldrh	r6, [r1, #8]
 800efc4:	f9b1 8000 	ldrsh.w	r8, [r1]
 800efc8:	888f      	ldrh	r7, [r1, #4]
 800efca:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800efce:	9104      	str	r1, [sp, #16]
 800efd0:	fa40 f903 	asr.w	r9, r0, r3
 800efd4:	fa42 f303 	asr.w	r3, r2, r3
 800efd8:	fb13 f10a 	smulbb	r1, r3, sl
 800efdc:	f9b4 b022 	ldrsh.w	fp, [r4, #34]	; 0x22
 800efe0:	1a51      	subs	r1, r2, r1
 800efe2:	eba9 0707 	sub.w	r7, r9, r7
 800efe6:	fb19 f90a 	smulbb	r9, r9, sl
 800efea:	fb06 f208 	mul.w	r2, r6, r8
 800efee:	f9b4 a028 	ldrsh.w	sl, [r4, #40]	; 0x28
 800eff2:	9103      	str	r1, [sp, #12]
 800eff4:	b23f      	sxth	r7, r7
 800eff6:	eba0 0009 	sub.w	r0, r0, r9
 800effa:	9904      	ldr	r1, [sp, #16]
 800effc:	f9b4 802a 	ldrsh.w	r8, [r4, #42]	; 0x2a
 800f000:	f9b4 9026 	ldrsh.w	r9, [r4, #38]	; 0x26
 800f004:	fb0b 0007 	mla	r0, fp, r7, r0
 800f008:	1412      	asrs	r2, r2, #16
 800f00a:	fb0a 0202 	mla	r2, sl, r2, r0
 800f00e:	1b5b      	subs	r3, r3, r5
 800f010:	fb06 f601 	mul.w	r6, r6, r1
 800f014:	8e65      	ldrh	r5, [r4, #50]	; 0x32
 800f016:	9801      	ldr	r0, [sp, #4]
 800f018:	9903      	ldr	r1, [sp, #12]
 800f01a:	b21b      	sxth	r3, r3
 800f01c:	fb0b 1103 	mla	r1, fp, r3, r1
 800f020:	fa40 fb05 	asr.w	fp, r0, r5
 800f024:	9800      	ldr	r0, [sp, #0]
 800f026:	1436      	asrs	r6, r6, #16
 800f028:	fb0a 1106 	mla	r1, sl, r6, r1
 800f02c:	fa40 f505 	asr.w	r5, r0, r5
 800f030:	f9b4 600e 	ldrsh.w	r6, [r4, #14]
 800f034:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 800f038:	f9b4 a124 	ldrsh.w	sl, [r4, #292]	; 0x124
 800f03c:	fb0b fb08 	mul.w	fp, fp, r8
 800f040:	fb05 f508 	mul.w	r5, r5, r8
 800f044:	fb09 c303 	mla	r3, r9, r3, ip
 800f048:	fb07 e709 	mla	r7, r7, r9, lr
 800f04c:	fb0b 7706 	mla	r7, fp, r6, r7
 800f050:	fb05 3616 	mls	r6, r5, r6, r3
 800f054:	9b00      	ldr	r3, [sp, #0]
 800f056:	fb00 2513 	mls	r5, r0, r3, r2
 800f05a:	9a01      	ldr	r2, [sp, #4]
 800f05c:	f1ba 0f00 	cmp.w	sl, #0
 800f060:	fb00 1b12 	mls	fp, r0, r2, r1
 800f064:	4698      	mov	r8, r3
 800f066:	db55      	blt.n	800f114 <STO_PLL_CalcElAngle+0x1c0>
 800f068:	f04f 0901 	mov.w	r9, #1
 800f06c:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 800f076:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800f07a:	f7f2 fd13 	bl	8001aa4 <MCM_Trig_Functions>
 800f07e:	9b02      	ldr	r3, [sp, #8]
 800f080:	fb13 f109 	smulbb	r1, r3, r9
 800f084:	4249      	negs	r1, r1
 800f086:	1403      	asrs	r3, r0, #16
 800f088:	fb10 f001 	smulbb	r0, r0, r1
 800f08c:	fb08 f103 	mul.w	r1, r8, r3
 800f090:	f340 30cf 	sbfx	r0, r0, #15, #16
 800f094:	f341 31cf 	sbfx	r1, r1, #15, #16
 800f098:	1a41      	subs	r1, r0, r1
 800f09a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f09e:	f7fc f917 	bl	800b2d0 <PI_Controller>
 800f0a2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
 800f0a6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
 800f0aa:	8220      	strh	r0, [r4, #16]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	b2db      	uxtb	r3, r3
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	bf0a      	itet	eq
 800f0b4:	2200      	moveq	r2, #0
 800f0b6:	461a      	movne	r2, r3
 800f0b8:	4613      	moveq	r3, r2
 800f0ba:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800f0be:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 800f0c2:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800f0c6:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
 800f0ca:	88a2      	ldrh	r2, [r4, #4]
 800f0cc:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
 800f0d0:	4410      	add	r0, r2
 800f0d2:	b200      	sxth	r0, r0
 800f0d4:	6625      	str	r5, [r4, #96]	; 0x60
 800f0d6:	e9c4 b719 	strd	fp, r7, [r4, #100]	; 0x64
 800f0da:	66e6      	str	r6, [r4, #108]	; 0x6c
 800f0dc:	80a0      	strh	r0, [r4, #4]
 800f0de:	b009      	add	sp, #36	; 0x24
 800f0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e4:	1a1d      	subs	r5, r3, r0
 800f0e6:	45ae      	cmp	lr, r5
 800f0e8:	bfdc      	itt	le
 800f0ea:	66a5      	strle	r5, [r4, #104]	; 0x68
 800f0ec:	46ae      	movle	lr, r5
 800f0ee:	e740      	b.n	800ef72 <STO_PLL_CalcElAngle+0x1e>
 800f0f0:	1b9b      	subs	r3, r3, r6
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	bfdc      	itt	le
 800f0f6:	6663      	strle	r3, [r4, #100]	; 0x64
 800f0f8:	461a      	movle	r2, r3
 800f0fa:	e75d      	b.n	800efb8 <STO_PLL_CalcElAngle+0x64>
 800f0fc:	1b9a      	subs	r2, r3, r6
 800f0fe:	4290      	cmp	r0, r2
 800f100:	bfdc      	itt	le
 800f102:	6622      	strle	r2, [r4, #96]	; 0x60
 800f104:	4610      	movle	r0, r2
 800f106:	e751      	b.n	800efac <STO_PLL_CalcElAngle+0x58>
 800f108:	1a1b      	subs	r3, r3, r0
 800f10a:	459c      	cmp	ip, r3
 800f10c:	bfdc      	itt	le
 800f10e:	66e3      	strle	r3, [r4, #108]	; 0x6c
 800f110:	469c      	movle	ip, r3
 800f112:	e73c      	b.n	800ef8e <STO_PLL_CalcElAngle+0x3a>
 800f114:	9b05      	ldr	r3, [sp, #20]
 800f116:	f1c3 0800 	rsb	r8, r3, #0
 800f11a:	fa0f f888 	sxth.w	r8, r8
 800f11e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800f122:	9b00      	ldr	r3, [sp, #0]
 800f124:	e7a2      	b.n	800f06c <STO_PLL_CalcElAngle+0x118>
 800f126:	bf00      	nop

0800f128 <STO_PLL_CalcAvrgMecSpeedUnit>:
 800f128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12a:	f890 c10e 	ldrb.w	ip, [r0, #270]	; 0x10e
 800f12e:	f1bc 0f00 	cmp.w	ip, #0
 800f132:	f000 8095 	beq.w	800f260 <STO_PLL_CalcAvrgMecSpeedUnit+0x138>
 800f136:	f10c 37ff 	add.w	r7, ip, #4294967295
 800f13a:	b2fb      	uxtb	r3, r7
 800f13c:	f100 0672 	add.w	r6, r0, #114	; 0x72
 800f140:	f100 0774 	add.w	r7, r0, #116	; 0x74
 800f144:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 800f148:	4632      	mov	r2, r6
 800f14a:	2300      	movs	r3, #0
 800f14c:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 800f150:	4297      	cmp	r7, r2
 800f152:	442b      	add	r3, r5
 800f154:	d1fa      	bne.n	800f14c <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
 800f156:	fb93 f5fc 	sdiv	r5, r3, ip
 800f15a:	2400      	movs	r4, #0
 800f15c:	f936 3f02 	ldrsh.w	r3, [r6, #2]!
 800f160:	1b5b      	subs	r3, r3, r5
 800f162:	42b2      	cmp	r2, r6
 800f164:	fb03 4403 	mla	r4, r3, r3, r4
 800f168:	d1f8      	bne.n	800f15c <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
 800f16a:	fb94 f4fc 	sdiv	r4, r4, ip
 800f16e:	fb05 fc05 	mul.w	ip, r5, r5
 800f172:	f8b0 2110 	ldrh.w	r2, [r0, #272]	; 0x110
 800f176:	8b43      	ldrh	r3, [r0, #26]
 800f178:	7887      	ldrb	r7, [r0, #2]
 800f17a:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
 800f17e:	fb0c fc02 	mul.w	ip, ip, r2
 800f182:	ea4f 1cec 	mov.w	ip, ip, asr #7
 800f186:	fb05 f303 	mul.w	r3, r5, r3
 800f18a:	45a4      	cmp	ip, r4
 800f18c:	69c2      	ldr	r2, [r0, #28]
 800f18e:	bfd4      	ite	le
 800f190:	2500      	movle	r5, #0
 800f192:	2501      	movgt	r5, #1
 800f194:	fb03 f307 	mul.w	r3, r3, r7
 800f198:	fb93 f3f2 	sdiv	r3, r3, r2
 800f19c:	7842      	ldrb	r2, [r0, #1]
 800f19e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1a2:	b21a      	sxth	r2, r3
 800f1a4:	800a      	strh	r2, [r1, #0]
 800f1a6:	f880 50f5 	strb.w	r5, [r0, #245]	; 0xf5
 800f1aa:	8182      	strh	r2, [r0, #12]
 800f1ac:	f890 50f8 	ldrb.w	r5, [r0, #248]	; 0xf8
 800f1b0:	b99e      	cbnz	r6, 800f1da <STO_PLL_CalcAvrgMecSpeedUnit+0xb2>
 800f1b2:	b355      	cbz	r5, 800f20a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f1b4:	45a4      	cmp	ip, r4
 800f1b6:	dc25      	bgt.n	800f204 <STO_PLL_CalcAvrgMecSpeedUnit+0xdc>
 800f1b8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
 800f1bc:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f1ca:	d81e      	bhi.n	800f20a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	78c2      	ldrb	r2, [r0, #3]
 800f1d0:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f1d4:	7002      	strb	r2, [r0, #0]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f8b0 211a 	ldrh.w	r2, [r0, #282]	; 0x11a
 800f1e0:	bfb8      	it	lt
 800f1e2:	425b      	neglt	r3, r3
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	dc14      	bgt.n	800f212 <STO_PLL_CalcAvrgMecSpeedUnit+0xea>
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	4616      	mov	r6, r2
 800f1ee:	f880 20f9 	strb.w	r2, [r0, #249]	; 0xf9
 800f1f2:	f8c0 60fc 	str.w	r6, [r0, #252]	; 0xfc
 800f1f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800f1fa:	b135      	cbz	r5, 800f20a <STO_PLL_CalcAvrgMecSpeedUnit+0xe2>
 800f1fc:	45a4      	cmp	ip, r4
 800f1fe:	dddb      	ble.n	800f1b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800f200:	2a00      	cmp	r2, #0
 800f202:	d0d9      	beq.n	800f1b8 <STO_PLL_CalcAvrgMecSpeedUnit+0x90>
 800f204:	2300      	movs	r3, #0
 800f206:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
 800f20a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f20e:	f7fe bce3 	b.w	800dbd8 <SPD_IsMecSpeedReliable>
 800f212:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
 800f216:	f9b0 e014 	ldrsh.w	lr, [r0, #20]
 800f21a:	f9b0 7070 	ldrsh.w	r7, [r0, #112]	; 0x70
 800f21e:	f9b0 6072 	ldrsh.w	r6, [r0, #114]	; 0x72
 800f222:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800f226:	fb93 f3fe 	sdiv	r3, r3, lr
 800f22a:	fb03 f202 	mul.w	r2, r3, r2
 800f22e:	2a00      	cmp	r2, #0
 800f230:	bfb8      	it	lt
 800f232:	323f      	addlt	r2, #63	; 0x3f
 800f234:	1192      	asrs	r2, r2, #6
 800f236:	fb02 f303 	mul.w	r3, r2, r3
 800f23a:	fb07 f707 	mul.w	r7, r7, r7
 800f23e:	2b00      	cmp	r3, #0
 800f240:	fb06 7606 	mla	r6, r6, r6, r7
 800f244:	461a      	mov	r2, r3
 800f246:	f890 7118 	ldrb.w	r7, [r0, #280]	; 0x118
 800f24a:	bfb8      	it	lt
 800f24c:	f103 023f 	addlt.w	r2, r3, #63	; 0x3f
 800f250:	1192      	asrs	r2, r2, #6
 800f252:	fb07 3212 	mls	r2, r7, r2, r3
 800f256:	4296      	cmp	r6, r2
 800f258:	bfd4      	ite	le
 800f25a:	2200      	movle	r2, #0
 800f25c:	2201      	movgt	r2, #1
 800f25e:	e7c6      	b.n	800f1ee <STO_PLL_CalcAvrgMecSpeedUnit+0xc6>
 800f260:	4664      	mov	r4, ip
 800f262:	4665      	mov	r5, ip
 800f264:	e785      	b.n	800f172 <STO_PLL_CalcAvrgMecSpeedUnit+0x4a>
 800f266:	bf00      	nop

0800f268 <STO_PLL_CalcAvrgElSpeedDpp>:
 800f268:	f890 10f4 	ldrb.w	r1, [r0, #244]	; 0xf4
 800f26c:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
 800f270:	b470      	push	{r4, r5, r6}
 800f272:	f890 410e 	ldrb.w	r4, [r0, #270]	; 0x10e
 800f276:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
 800f27a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 800f27e:	b2a6      	uxth	r6, r4
 800f280:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	; 0x74
 800f284:	1af3      	subs	r3, r6, r3
 800f286:	b29b      	uxth	r3, r3
 800f288:	442a      	add	r2, r5
 800f28a:	b19b      	cbz	r3, 800f2b4 <STO_PLL_CalcAvrgElSpeedDpp+0x4c>
 800f28c:	440b      	add	r3, r1
 800f28e:	b29b      	uxth	r3, r3
 800f290:	b219      	sxth	r1, r3
 800f292:	428c      	cmp	r4, r1
 800f294:	bfdc      	itt	le
 800f296:	1b9b      	suble	r3, r3, r6
 800f298:	b219      	sxthle	r1, r3
 800f29a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800f29e:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
 800f2a8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800f2ac:	4113      	asrs	r3, r2
 800f2ae:	81c3      	strh	r3, [r0, #14]
 800f2b0:	bc70      	pop	{r4, r5, r6}
 800f2b2:	4770      	bx	lr
 800f2b4:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	e7f3      	b.n	800f2a4 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>

0800f2bc <STO_PLL_Clear>:
 800f2bc:	b510      	push	{r4, lr}
 800f2be:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	4604      	mov	r4, r0
 800f2c6:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
 800f2ca:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
 800f2ce:	8081      	strh	r1, [r0, #4]
 800f2d0:	81c1      	strh	r1, [r0, #14]
 800f2d2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
 800f2d6:	f880 10f8 	strb.w	r1, [r0, #248]	; 0xf8
 800f2da:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
 800f2de:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
 800f2e2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
 800f2e6:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
 800f2ea:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
 800f2ee:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
 800f2f2:	b132      	cbz	r2, 800f302 <STO_PLL_Clear+0x46>
 800f2f4:	3a01      	subs	r2, #1
 800f2f6:	b2d2      	uxtb	r2, r2
 800f2f8:	3201      	adds	r2, #1
 800f2fa:	0052      	lsls	r2, r2, #1
 800f2fc:	3074      	adds	r0, #116	; 0x74
 800f2fe:	f000 f929 	bl	800f554 <memset>
 800f302:	2100      	movs	r1, #0
 800f304:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
 800f308:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
 800f30c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f314:	f7fb bf99 	b.w	800b24a <PID_SetIntegralTerm>

0800f318 <STO_PLL_Init>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4604      	mov	r4, r0
 800f31c:	f9b0 502e 	ldrsh.w	r5, [r0, #46]	; 0x2e
 800f320:	4b18      	ldr	r3, [pc, #96]	; (800f384 <STO_PLL_Init+0x6c>)
 800f322:	f890 0116 	ldrb.w	r0, [r0, #278]	; 0x116
 800f326:	fb93 f3f5 	sdiv	r3, r3, r5
 800f32a:	2200      	movs	r2, #0
 800f32c:	2101      	movs	r1, #1
 800f32e:	b21b      	sxth	r3, r3
 800f330:	f884 00f6 	strb.w	r0, [r4, #246]	; 0xf6
 800f334:	8662      	strh	r2, [r4, #50]	; 0x32
 800f336:	f884 1104 	strb.w	r1, [r4, #260]	; 0x104
 800f33a:	b303      	cbz	r3, 800f37e <STO_PLL_Init+0x66>
 800f33c:	4608      	mov	r0, r1
 800f33e:	e000      	b.n	800f342 <STO_PLL_Init+0x2a>
 800f340:	4611      	mov	r1, r2
 800f342:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f346:	1c4a      	adds	r2, r1, #1
 800f348:	105b      	asrs	r3, r3, #1
 800f34a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 800f34e:	b292      	uxth	r2, r2
 800f350:	d1f6      	bne.n	800f340 <STO_PLL_Init+0x28>
 800f352:	b200      	sxth	r0, r0
 800f354:	fb05 f200 	mul.w	r2, r5, r0
 800f358:	8661      	strh	r1, [r4, #50]	; 0x32
 800f35a:	4b0b      	ldr	r3, [pc, #44]	; (800f388 <STO_PLL_Init+0x70>)
 800f35c:	8620      	strh	r0, [r4, #48]	; 0x30
 800f35e:	fb83 1302 	smull	r1, r3, r3, r2
 800f362:	17d2      	asrs	r2, r2, #31
 800f364:	ebc2 2223 	rsb	r2, r2, r3, asr #8
 800f368:	8562      	strh	r2, [r4, #42]	; 0x2a
 800f36a:	4620      	mov	r0, r4
 800f36c:	f7ff ffa6 	bl	800f2bc <STO_PLL_Clear>
 800f370:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f374:	f7fb ff12 	bl	800b19c <PID_HandleInit>
 800f378:	2300      	movs	r3, #0
 800f37a:	8263      	strh	r3, [r4, #18]
 800f37c:	bd38      	pop	{r3, r4, r5, pc}
 800f37e:	462a      	mov	r2, r5
 800f380:	4608      	mov	r0, r1
 800f382:	e7ea      	b.n	800f35a <STO_PLL_Init+0x42>
 800f384:	000fea5e 	.word	0x000fea5e
 800f388:	06488dc5 	.word	0x06488dc5

0800f38c <STO_PLL_IsObserverConverged>:
 800f38c:	f890 2123 	ldrb.w	r2, [r0, #291]	; 0x123
 800f390:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
 800f394:	4603      	mov	r3, r0
 800f396:	b10a      	cbz	r2, 800f39c <STO_PLL_IsObserverConverged+0x10>
 800f398:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 800f39c:	f893 0122 	ldrb.w	r0, [r3, #290]	; 0x122
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d143      	bne.n	800f42c <STO_PLL_IsObserverConverged+0xa0>
 800f3a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800f3a8:	b430      	push	{r4, r5}
 800f3aa:	fb02 f501 	mul.w	r5, r2, r1
 800f3ae:	2d00      	cmp	r5, #0
 800f3b0:	460c      	mov	r4, r1
 800f3b2:	dd34      	ble.n	800f41e <STO_PLL_IsObserverConverged+0x92>
 800f3b4:	2a00      	cmp	r2, #0
 800f3b6:	bfbc      	itt	lt
 800f3b8:	4252      	neglt	r2, r2
 800f3ba:	b212      	sxthlt	r2, r2
 800f3bc:	2900      	cmp	r1, #0
 800f3be:	bfbc      	itt	lt
 800f3c0:	4249      	neglt	r1, r1
 800f3c2:	b20c      	sxthlt	r4, r1
 800f3c4:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
 800f3c8:	b359      	cbz	r1, 800f422 <STO_PLL_IsObserverConverged+0x96>
 800f3ca:	f8b3 5114 	ldrh.w	r5, [r3, #276]	; 0x114
 800f3ce:	b291      	uxth	r1, r2
 800f3d0:	428d      	cmp	r5, r1
 800f3d2:	d226      	bcs.n	800f422 <STO_PLL_IsObserverConverged+0x96>
 800f3d4:	f893 1113 	ldrb.w	r1, [r3, #275]	; 0x113
 800f3d8:	fb04 f101 	mul.w	r1, r4, r1
 800f3dc:	2900      	cmp	r1, #0
 800f3de:	bfb8      	it	lt
 800f3e0:	310f      	addlt	r1, #15
 800f3e2:	f341 110f 	sbfx	r1, r1, #4, #16
 800f3e6:	428a      	cmp	r2, r1
 800f3e8:	db1b      	blt.n	800f422 <STO_PLL_IsObserverConverged+0x96>
 800f3ea:	f893 1112 	ldrb.w	r1, [r3, #274]	; 0x112
 800f3ee:	fb04 f101 	mul.w	r1, r4, r1
 800f3f2:	2900      	cmp	r1, #0
 800f3f4:	bfb8      	it	lt
 800f3f6:	310f      	addlt	r1, #15
 800f3f8:	f341 110f 	sbfx	r1, r1, #4, #16
 800f3fc:	428a      	cmp	r2, r1
 800f3fe:	dc10      	bgt.n	800f422 <STO_PLL_IsObserverConverged+0x96>
 800f400:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 800f404:	f893 1116 	ldrb.w	r1, [r3, #278]	; 0x116
 800f408:	3201      	adds	r2, #1
 800f40a:	b2d2      	uxtb	r2, r2
 800f40c:	4291      	cmp	r1, r2
 800f40e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800f412:	d804      	bhi.n	800f41e <STO_PLL_IsObserverConverged+0x92>
 800f414:	2001      	movs	r0, #1
 800f416:	2200      	movs	r2, #0
 800f418:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800f41c:	701a      	strb	r2, [r3, #0]
 800f41e:	bc30      	pop	{r4, r5}
 800f420:	4770      	bx	lr
 800f422:	2200      	movs	r2, #0
 800f424:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 800f428:	bc30      	pop	{r4, r5}
 800f42a:	4770      	bx	lr
 800f42c:	2001      	movs	r0, #1
 800f42e:	2200      	movs	r2, #0
 800f430:	f883 00f8 	strb.w	r0, [r3, #248]	; 0xf8
 800f434:	701a      	strb	r2, [r3, #0]
 800f436:	4770      	bx	lr

0800f438 <STO_PLL_GetEstimatedBemf>:
 800f438:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800f43a:	2000      	movs	r0, #0
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	f362 000f 	bfi	r0, r2, #0, #16
 800f442:	0c1b      	lsrs	r3, r3, #16
 800f444:	b082      	sub	sp, #8
 800f446:	f363 401f 	bfi	r0, r3, #16, #16
 800f44a:	b002      	add	sp, #8
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop

0800f450 <STO_PLL_GetEstimatedCurrent>:
 800f450:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
 800f454:	b410      	push	{r4}
 800f456:	f8b0 411c 	ldrh.w	r4, [r0, #284]	; 0x11c
 800f45a:	4122      	asrs	r2, r4
 800f45c:	b292      	uxth	r2, r2
 800f45e:	4123      	asrs	r3, r4
 800f460:	2100      	movs	r1, #0
 800f462:	b29b      	uxth	r3, r3
 800f464:	f362 010f 	bfi	r1, r2, #0, #16
 800f468:	f363 411f 	bfi	r1, r3, #16, #16
 800f46c:	b083      	sub	sp, #12
 800f46e:	4608      	mov	r0, r1
 800f470:	b003      	add	sp, #12
 800f472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <STO_PLL_GetObserverGains>:
 800f478:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 800f47c:	800b      	strh	r3, [r1, #0]
 800f47e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 800f482:	8013      	strh	r3, [r2, #0]
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop

0800f488 <STO_PLL_SetObserverGains>:
 800f488:	8441      	strh	r1, [r0, #34]	; 0x22
 800f48a:	84c2      	strh	r2, [r0, #38]	; 0x26
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop

0800f490 <STO_GetPLLGains>:
 800f490:	b570      	push	{r4, r5, r6, lr}
 800f492:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800f496:	4620      	mov	r0, r4
 800f498:	460e      	mov	r6, r1
 800f49a:	4615      	mov	r5, r2
 800f49c:	f7fb febb 	bl	800b216 <PID_GetKP>
 800f4a0:	8030      	strh	r0, [r6, #0]
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	f7fb fec4 	bl	800b230 <PID_GetKI>
 800f4a8:	8028      	strh	r0, [r5, #0]
 800f4aa:	bd70      	pop	{r4, r5, r6, pc}

0800f4ac <STO_SetPLLGains>:
 800f4ac:	b538      	push	{r3, r4, r5, lr}
 800f4ae:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800f4b2:	4615      	mov	r5, r2
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7fb fe90 	bl	800b1da <PID_SetKP>
 800f4ba:	4629      	mov	r1, r5
 800f4bc:	4620      	mov	r0, r4
 800f4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4c2:	f7fb be99 	b.w	800b1f8 <PID_SetKI>
 800f4c6:	bf00      	nop

0800f4c8 <STO_OTF_ResetPLL>:
 800f4c8:	6800      	ldr	r0, [r0, #0]
 800f4ca:	2100      	movs	r1, #0
 800f4cc:	3034      	adds	r0, #52	; 0x34
 800f4ce:	f7fb bebc 	b.w	800b24a <PID_SetIntegralTerm>
 800f4d2:	bf00      	nop

0800f4d4 <STO_ResetPLL>:
 800f4d4:	3034      	adds	r0, #52	; 0x34
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	f7fb beb7 	b.w	800b24a <PID_SetIntegralTerm>

0800f4dc <STO_PLL_GetEstimatedBemfLevel>:
 800f4dc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop

0800f4e4 <STO_PLL_GetObservedBemfLevel>:
 800f4e4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop

0800f4ec <STO_PLL_IsVarianceTight>:
 800f4ec:	6803      	ldr	r3, [r0, #0]
 800f4ee:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800f4f2:	4770      	bx	lr

0800f4f4 <STO_PLL_ForceConvergency1>:
 800f4f4:	6803      	ldr	r3, [r0, #0]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop

0800f500 <STO_PLL_ForceConvergency2>:
 800f500:	6803      	ldr	r3, [r0, #0]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop

0800f50c <__libc_init_array>:
 800f50c:	b570      	push	{r4, r5, r6, lr}
 800f50e:	4e0d      	ldr	r6, [pc, #52]	; (800f544 <__libc_init_array+0x38>)
 800f510:	4c0d      	ldr	r4, [pc, #52]	; (800f548 <__libc_init_array+0x3c>)
 800f512:	1ba4      	subs	r4, r4, r6
 800f514:	10a4      	asrs	r4, r4, #2
 800f516:	2500      	movs	r5, #0
 800f518:	42a5      	cmp	r5, r4
 800f51a:	d109      	bne.n	800f530 <__libc_init_array+0x24>
 800f51c:	4e0b      	ldr	r6, [pc, #44]	; (800f54c <__libc_init_array+0x40>)
 800f51e:	4c0c      	ldr	r4, [pc, #48]	; (800f550 <__libc_init_array+0x44>)
 800f520:	f000 f820 	bl	800f564 <_init>
 800f524:	1ba4      	subs	r4, r4, r6
 800f526:	10a4      	asrs	r4, r4, #2
 800f528:	2500      	movs	r5, #0
 800f52a:	42a5      	cmp	r5, r4
 800f52c:	d105      	bne.n	800f53a <__libc_init_array+0x2e>
 800f52e:	bd70      	pop	{r4, r5, r6, pc}
 800f530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f534:	4798      	blx	r3
 800f536:	3501      	adds	r5, #1
 800f538:	e7ee      	b.n	800f518 <__libc_init_array+0xc>
 800f53a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f53e:	4798      	blx	r3
 800f540:	3501      	adds	r5, #1
 800f542:	e7f2      	b.n	800f52a <__libc_init_array+0x1e>
 800f544:	0800f8a0 	.word	0x0800f8a0
 800f548:	0800f8a0 	.word	0x0800f8a0
 800f54c:	0800f8a0 	.word	0x0800f8a0
 800f550:	0800f8a4 	.word	0x0800f8a4

0800f554 <memset>:
 800f554:	4402      	add	r2, r0
 800f556:	4603      	mov	r3, r0
 800f558:	4293      	cmp	r3, r2
 800f55a:	d100      	bne.n	800f55e <memset+0xa>
 800f55c:	4770      	bx	lr
 800f55e:	f803 1b01 	strb.w	r1, [r3], #1
 800f562:	e7f9      	b.n	800f558 <memset+0x4>

0800f564 <_init>:
 800f564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f566:	bf00      	nop
 800f568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f56a:	bc08      	pop	{r3}
 800f56c:	469e      	mov	lr, r3
 800f56e:	4770      	bx	lr

0800f570 <_fini>:
 800f570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f572:	bf00      	nop
 800f574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f576:	bc08      	pop	{r3}
 800f578:	469e      	mov	lr, r3
 800f57a:	4770      	bx	lr
